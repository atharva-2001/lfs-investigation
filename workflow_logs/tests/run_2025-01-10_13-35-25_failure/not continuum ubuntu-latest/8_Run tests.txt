2025-01-10T13:36:20.9978288Z ##[group]Run pytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"
2025-01-10T13:36:20.9979610Z [36;1mpytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"[0m
2025-01-10T13:36:21.0006511Z shell: /usr/bin/bash -l {0}
2025-01-10T13:36:21.0006751Z env:
2025-01-10T13:36:21.0006923Z   CACHE_NUMBER: 0
2025-01-10T13:36:21.0007531Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-10T13:36:21.0008185Z   CODECOV_TOKEN: 
2025-01-10T13:36:21.0008401Z   MAMBA_ROOT_PREFIX: /home/runner/micromamba
2025-01-10T13:36:21.0008707Z   MAMBA_EXE: /home/runner/micromamba-bin/micromamba
2025-01-10T13:36:21.0009055Z   CONDARC: /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-10T13:36:21.0009404Z ##[endgroup]
2025-01-10T13:36:30.0395332Z ============================= test session starts ==============================
2025-01-10T13:36:30.0396144Z platform linux -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
2025-01-10T13:36:30.0396710Z rootdir: /home/runner/work/tardis/tardis
2025-01-10T13:36:30.0397215Z configfile: pyproject.toml
2025-01-10T13:36:30.0397824Z plugins: anyio-4.4.0, doctestplus-1.2.1, cov-5.0.0, html-4.1.1, metadata-3.1.1
2025-01-10T13:36:30.0398519Z collected 1796 items / 2 deselected / 1794 selected
2025-01-10T13:36:30.0398871Z 
2025-01-10T13:36:35.1260833Z tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
2025-01-10T13:36:36.7322558Z tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
2025-01-10T13:36:38.3042393Z tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
2025-01-10T13:36:40.0470687Z tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
2025-01-10T13:36:40.0563046Z tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
2025-01-10T13:36:41.3711207Z tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
2025-01-10T13:36:41.7895562Z tardis/grid/tests/test_grid.py .                                         [  2%]
2025-01-10T13:36:41.7910865Z tardis/gui/tests/test_gui.py s                                           [  2%]
2025-01-10T13:36:45.4646821Z tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
2025-01-10T13:36:45.4772727Z tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
2025-01-10T13:36:45.5062558Z tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
2025-01-10T13:37:23.8572054Z tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
2025-01-10T13:37:23.8718648Z tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
2025-01-10T13:37:23.8831047Z tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
2025-01-10T13:37:23.9141384Z tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
2025-01-10T13:37:23.9357632Z tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
2025-01-10T13:37:24.2428832Z tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
2025-01-10T13:37:24.5687666Z tardis/io/tests/test_atomic.py .....                                     [  7%]
2025-01-10T13:37:24.6039446Z tardis/io/tests/test_decay.py ..                                         [  7%]
2025-01-10T13:37:24.7960823Z tardis/io/tests/test_model_reader.py ......                              [  7%]
2025-01-10T13:37:24.8028907Z tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
2025-01-10T13:38:23.6510295Z tardis/model/tests/test_base.py ........................................ [ 10%]
2025-01-10T13:38:24.6400822Z ............                                                             [ 10%]
2025-01-10T13:38:27.6749180Z tardis/model/tests/test_csvy_model.py .........                          [ 11%]
2025-01-10T13:38:27.7229403Z tardis/model/tests/test_density.py ..                                    [ 11%]
2025-01-10T13:38:29.0395451Z tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
2025-01-10T13:38:30.3968276Z tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
2025-01-10T13:38:32.6424900Z tardis/opacities/tests/test_tau_sobolev.py FF                            [ 12%]
2025-01-10T13:38:35.3912824Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py ...      [ 12%]
2025-01-10T13:39:21.8161020Z tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
2025-01-10T13:39:33.3368180Z tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
2025-01-10T13:39:35.0363956Z tardis/plasma/tests/test_complete_plasmas.py ...........FFF..FFF..s..... [ 13%]
2025-01-10T13:39:38.5725376Z sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FF [ 18%]
2025-01-10T13:39:40.9551997Z F..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss.... [ 22%]
2025-01-10T13:39:44.5073927Z ........s...FFF..FFF.ss.....sFF.F....ss............s...FFF..FFF.ss.....s [ 26%]
2025-01-10T13:39:48.4218182Z FF.F....ss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF [ 30%]
2025-01-10T13:39:49.7556427Z ..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFssFssssss..... [ 34%]
2025-01-10T13:39:53.3842044Z .......s...FFF..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sF [ 38%]
2025-01-10T13:39:56.9305077Z F.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF. [ 42%]
2025-01-10T13:40:01.0151035Z .FFF.ss.....sFF.Fssssss............s...FFF..FFF.s.....FFFF.Fssssss...... [ 46%]
2025-01-10T13:40:03.5651901Z ......s...FFF..FFF.s.....FFFF.Fssssss............s...FFF..FFF.s.....FFFF [ 50%]
2025-01-10T13:40:06.9420865Z .Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF.. [ 54%]
2025-01-10T13:40:11.0466546Z FFF.ss.....sFF.Fssssss................FFF..FFF..s.....sFF.Fssss......... [ 58%]
2025-01-10T13:40:11.7099487Z .........FFF..FFF..s.....sFF.Fssss.......                                [ 60%]
2025-01-10T13:40:11.9525142Z tardis/plasma/tests/test_hdf_plasma.py ....F..F....F.F..........FFF..... [ 62%]
2025-01-10T13:40:11.9640307Z ......                                                                   [ 62%]
2025-01-10T13:40:12.0998217Z tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
2025-01-10T13:42:28.4020602Z tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
2025-01-10T13:42:28.4045453Z tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
2025-01-10T13:42:51.8045998Z tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
2025-01-10T13:43:05.0929049Z tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
2025-01-10T13:43:05.8452132Z tardis/simulation/tests/test_convergence.py .....                        [ 64%]
2025-01-10T13:43:14.4953189Z tardis/simulation/tests/test_simulation.py FFF.FFFFFF...                 [ 65%]
2025-01-10T13:43:14.5152451Z tardis/spectrum/tests/test_cuda_formal_integral.py sssssssssssssssssssss [ 66%]
2025-01-10T13:43:14.9779380Z ssss...ssssssssssssssssssssss                                            [ 67%]
2025-01-10T13:43:14.9849925Z tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
2025-01-10T13:43:17.0944253Z tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
2025-01-10T13:43:17.1128842Z ..........                                                               [ 69%]
2025-01-10T13:43:17.2824663Z tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
2025-01-10T13:43:17.3143216Z .........                                                                [ 72%]
2025-01-10T13:43:35.8762791Z tardis/spectrum/tests/test_spectrum_solver.py .FFF                       [ 72%]
2025-01-10T13:44:37.9640751Z tardis/tests/test_tardis_full.py .FFF                                    [ 72%]
2025-01-10T13:46:02.4384130Z tardis/tests/test_tardis_full_formal_integral.py .FFF.FFF.FFF.FFF        [ 73%]
2025-01-10T13:46:02.5107937Z tardis/tests/test_util.py .............................................  [ 75%]
2025-01-10T13:46:05.1873384Z tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
2025-01-10T13:46:12.8513194Z tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
2025-01-10T13:46:13.0835914Z tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
2025-01-10T13:46:13.1011033Z tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
2025-01-10T13:46:13.1424576Z sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
2025-01-10T13:46:22.0905449Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py xFF       [ 81%]
2025-01-10T13:46:22.0971985Z tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
2025-01-10T13:46:28.5148642Z tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
2025-01-10T13:46:28.9966045Z tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
2025-01-10T13:46:30.0469058Z tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
2025-01-10T13:46:30.1822732Z XX.........                                                              [ 84%]
2025-01-10T13:46:30.2096232Z tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
2025-01-10T13:46:30.5309631Z tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
2025-01-10T13:46:30.9468619Z .....                                                                    [ 85%]
2025-01-10T13:47:06.9205280Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py ....F.         [ 85%]
2025-01-10T13:47:06.9501376Z tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
2025-01-10T13:47:06.9535270Z tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
2025-01-10T13:47:10.0651411Z tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
2025-01-10T13:47:10.0827408Z tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
2025-01-10T13:47:13.5786394Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py F [ 86%]
2025-01-10T13:47:13.5788592Z                                                                          [ 86%]
2025-01-10T13:47:14.3214486Z tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
2025-01-10T13:47:15.7061172Z tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
2025-01-10T13:47:18.5556493Z ......                                                                   [ 88%]
2025-01-10T13:47:23.6034226Z tardis/visualization/tools/tests/test_liv_plot.py ...F..F..F..F..F..F..F [ 90%]
2025-01-10T13:47:26.7694257Z ..F..FF..FF.F........FF..FF.F                                            [ 91%]
2025-01-10T13:47:29.7153110Z tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
2025-01-10T13:47:36.8319164Z ....                                                                     [ 92%]
2025-01-10T13:47:43.0327293Z tardis/visualization/tools/tests/test_sdec_plot.py ...FFFFFFFFFFFFFFFFFF [ 94%]
2025-01-10T13:47:52.1328567Z FFFFFFFFFFFFFF................                                           [ 95%]
2025-01-10T13:47:52.5736247Z tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
2025-01-10T13:47:52.6468490Z ....                                                                     [ 96%]
2025-01-10T13:47:53.7579414Z tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
2025-01-10T13:47:54.4020483Z ..................                                                       [ 98%]
2025-01-10T13:48:57.7618901Z tardis/visualization/widgets/tests/test_shell_info.py .................. [ 99%]
2025-01-10T13:49:05.2390869Z ......                                                                   [100%]
2025-01-10T13:49:05.2391394Z 
2025-01-10T13:49:05.2391597Z =================================== FAILURES ===================================
2025-01-10T13:49:05.2392235Z _____________________ test_calculate_sobolev_line_opacity ______________________
2025-01-10T13:49:05.2392672Z 
2025-01-10T13:49:05.2392864Z left = array([13, 13, 13, ..., 19, 19, 19], dtype=int8)
2025-01-10T13:49:05.2393445Z right = array([13, 13, 13, ..., 19, 19, 19], dtype=int8), err_msg = None
2025-01-10T13:49:05.2394132Z 
2025-01-10T13:49:05.2394356Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2394809Z         if err_msg is None:
2025-01-10T13:49:05.2395179Z             if left.shape != right.shape:
2025-01-10T13:49:05.2395580Z                 raise_assert_detail(
2025-01-10T13:49:05.2396059Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2396583Z                 )
2025-01-10T13:49:05.2396856Z     
2025-01-10T13:49:05.2397098Z             diff = 0
2025-01-10T13:49:05.2397453Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2397895Z                 # count up differences
2025-01-10T13:49:05.2398425Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2398959Z                     diff += 1
2025-01-10T13:49:05.2399273Z     
2025-01-10T13:49:05.2399548Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2400100Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2400873Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2401561Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2402046Z E           
2025-01-10T13:49:05.2402401Z E           numpy array values are different (0.09581 %)
2025-01-10T13:49:05.2403409Z E           [left]:  [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]
2025-01-10T13:49:05.2405060Z E           [right]: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 13, 11, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]
2025-01-10T13:49:05.2405882Z 
2025-01-10T13:49:05.2406404Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2407385Z 
2025-01-10T13:49:05.2407672Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2408089Z 
2025-01-10T13:49:05.2408481Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3be824eea0>
2025-01-10T13:49:05.2409453Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3be831eff0>
2025-01-10T13:49:05.2410037Z 
2025-01-10T13:49:05.2410192Z     def test_calculate_sobolev_line_opacity(
2025-01-10T13:49:05.2410680Z         nb_simulation_verysimple, regression_data
2025-01-10T13:49:05.2411158Z     ):
2025-01-10T13:49:05.2411539Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-10T13:49:05.2412029Z     
2025-01-10T13:49:05.2412365Z         actual = calculate_sobolev_line_opacity(
2025-01-10T13:49:05.2412858Z             legacy_plasma.lines,
2025-01-10T13:49:05.2413306Z             legacy_plasma.level_number_density,
2025-01-10T13:49:05.2414217Z             legacy_plasma.time_explosion,
2025-01-10T13:49:05.2414708Z             legacy_plasma.stimulated_emission_factor,
2025-01-10T13:49:05.2415142Z         )
2025-01-10T13:49:05.2415501Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.2416035Z >       pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.2416350Z 
2025-01-10T13:49:05.2416544Z tardis/opacities/tests/test_tau_sobolev.py:22: 
2025-01-10T13:49:05.2417054Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2417609Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2418082Z     ???
2025-01-10T13:49:05.2418397Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2418721Z 
2025-01-10T13:49:05.2418832Z >   ???
2025-01-10T13:49:05.2419166Z E   AssertionError: MultiIndex level [0] are different
2025-01-10T13:49:05.2419604Z E   
2025-01-10T13:49:05.2419951Z E   MultiIndex level [0] values are different (0.09581 %)
2025-01-10T13:49:05.2420476Z E   [left]:  Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:49:05.2420889Z E          ...
2025-01-10T13:49:05.2421179Z E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:49:05.2421643Z E         dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:49:05.2422219Z E   [right]: Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:49:05.2422708Z E          ...
2025-01-10T13:49:05.2423047Z E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:49:05.2423572Z E         dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:49:05.2424292Z E   At positional index 54, first diff: 12 != 14
2025-01-10T13:49:05.2424645Z 
2025-01-10T13:49:05.2424805Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2425361Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.2426384Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:49:05.2427670Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:49:05.2428759Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:49:05.2429161Z 
2025-01-10T13:49:05.2429168Z 
2025-01-10T13:49:05.2429558Z Packets:                                                                                   4020/? [00:11<00:00, 33709.79it/s][A
2025-01-10T13:49:05.2429921Z 
2025-01-10T13:49:05.2430313Z Packets:                                                                                   4021/? [00:11<00:00, 251.66it/s]  [A
2025-01-10T13:49:05.2431220Z Iterations:████████████████████████████████████████████████████████████████                4/5 [00:11<00:02,  2.69s/it]
2025-01-10T13:49:05.2431668Z 
2025-01-10T13:49:05.2432049Z Packets:                                                                                   4030/? [00:11<00:00, 251.66it/s][A
2025-01-10T13:49:05.2432665Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.2434354Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:49:05.2435769Z _________________________ test_calculate_beta_sobolevs _________________________
2025-01-10T13:49:05.2436239Z 
2025-01-10T13:49:05.2436695Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3be824eea0>
2025-01-10T13:49:05.2437761Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3be8365d60>
2025-01-10T13:49:05.2438385Z 
2025-01-10T13:49:05.2438727Z     def test_calculate_beta_sobolevs(nb_simulation_verysimple, regression_data):
2025-01-10T13:49:05.2439417Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-10T13:49:05.2439873Z     
2025-01-10T13:49:05.2440412Z         tau_sobolevs = calculate_sobolev_line_opacity(
2025-01-10T13:49:05.2440877Z             legacy_plasma.lines,
2025-01-10T13:49:05.2441279Z             legacy_plasma.level_number_density,
2025-01-10T13:49:05.2441707Z             legacy_plasma.time_explosion,
2025-01-10T13:49:05.2442160Z             legacy_plasma.stimulated_emission_factor,
2025-01-10T13:49:05.2442579Z         )
2025-01-10T13:49:05.2442895Z         actual = calculate_beta_sobolev(tau_sobolevs)
2025-01-10T13:49:05.2443384Z         expected = regression_data.sync_ndarray(actual)
2025-01-10T13:49:05.2444029Z >       npt.assert_allclose(actual, expected)
2025-01-10T13:49:05.2444325Z 
2025-01-10T13:49:05.2444505Z tardis/opacities/tests/test_tau_sobolev.py:36: 
2025-01-10T13:49:05.2444989Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2445316Z 
2025-01-10T13:49:05.2445786Z args = (<function assert_allclose.<locals>.compare at 0x7f3bcb891440>, array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.2446605Z        [1., 1., .....,
2025-01-10T13:49:05.2446958Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.2447374Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.2447784Z        [1., 1., 1., ..., 1., 1., 1.]]))
2025-01-10T13:49:05.2448551Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.2449154Z 
2025-01-10T13:49:05.2449285Z     @wraps(func)
2025-01-10T13:49:05.2449598Z     def inner(*args, **kwds):
2025-01-10T13:49:05.2449977Z         with self._recreate_cm():
2025-01-10T13:49:05.2450373Z >           return func(*args, **kwds)
2025-01-10T13:49:05.2450780Z E           AssertionError: 
2025-01-10T13:49:05.2451188Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.2451616Z E           
2025-01-10T13:49:05.2451941Z E           Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:49:05.2452458Z E           Max absolute difference among violations: 0.99984222
2025-01-10T13:49:05.2453015Z E           Max relative difference among violations: 6337.12154973
2025-01-10T13:49:05.2453531Z E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.2454181Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.2454583Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:49:05.2455018Z E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.2455448Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.2455845Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:49:05.2456120Z 
2025-01-10T13:49:05.2456443Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.2457254Z _________ TestPlasma.test_plasma_properties[ionization:nebular-lines] __________
2025-01-10T13:49:05.2457783Z 
2025-01-10T13:49:05.2458023Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2458657Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2459482Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2460068Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2460717Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2461244Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2461669Z err_msg = None
2025-01-10T13:49:05.2461856Z 
2025-01-10T13:49:05.2462037Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2462490Z         if err_msg is None:
2025-01-10T13:49:05.2462869Z             if left.shape != right.shape:
2025-01-10T13:49:05.2463294Z                 raise_assert_detail(
2025-01-10T13:49:05.2463983Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2464496Z                 )
2025-01-10T13:49:05.2464981Z     
2025-01-10T13:49:05.2465220Z             diff = 0
2025-01-10T13:49:05.2465582Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2466025Z                 # count up differences
2025-01-10T13:49:05.2466557Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2467107Z                     diff += 1
2025-01-10T13:49:05.2467426Z     
2025-01-10T13:49:05.2467795Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2468268Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2468887Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2469533Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2470016Z E           
2025-01-10T13:49:05.2470400Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2471251Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2472457Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2473080Z 
2025-01-10T13:49:05.2473796Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2474504Z 
2025-01-10T13:49:05.2474799Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2475242Z 
2025-01-10T13:49:05.2475638Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8965760>
2025-01-10T13:49:05.2476452Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>
2025-01-10T13:49:05.2476972Z attr = 'lines'
2025-01-10T13:49:05.2477136Z 
2025-01-10T13:49:05.2477360Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2477899Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2478340Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2478676Z         try:
2025-01-10T13:49:05.2479054Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2479537Z         except KeyError:
2025-01-10T13:49:05.2479957Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2480412Z     
2025-01-10T13:49:05.2480676Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2481093Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2481567Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2482122Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2482685Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2483368Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2484190Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2484699Z             else:
2025-01-10T13:49:05.2485038Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.2485511Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.2485847Z 
2025-01-10T13:49:05.2486067Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.2486608Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2487197Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2487698Z     ???
2025-01-10T13:49:05.2488027Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2488361Z 
2025-01-10T13:49:05.2488473Z >   ???
2025-01-10T13:49:05.2489043Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2489484Z E   
2025-01-10T13:49:05.2489839Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2490351Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2490769Z E          ...
2025-01-10T13:49:05.2491061Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2491531Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2492045Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2492456Z E          ...
2025-01-10T13:49:05.2492740Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2493258Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2494027Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2494385Z 
2025-01-10T13:49:05.2494546Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2495210Z _ TestPlasma.test_plasma_properties[ionization:nebular-lines_lower_level_index] _
2025-01-10T13:49:05.2495798Z 
2025-01-10T13:49:05.2496223Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8964710>
2025-01-10T13:49:05.2497074Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>
2025-01-10T13:49:05.2497647Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.2497905Z 
2025-01-10T13:49:05.2498137Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2498695Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2499162Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2499514Z         try:
2025-01-10T13:49:05.2499906Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2500408Z         except KeyError:
2025-01-10T13:49:05.2500840Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2501306Z     
2025-01-10T13:49:05.2501574Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2501970Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2502377Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2502865Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2503342Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2503888Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2504322Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2504631Z 
2025-01-10T13:49:05.2504829Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2505408Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2505790Z 
2025-01-10T13:49:05.2506044Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.2506600Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.2507100Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2507588Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.2508103Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.2508834Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.2509297Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2509751Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.2510140Z err_msg = None
2025-01-10T13:49:05.2510315Z 
2025-01-10T13:49:05.2510500Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2510941Z         if err_msg is None:
2025-01-10T13:49:05.2511310Z             if left.shape != right.shape:
2025-01-10T13:49:05.2511704Z                 raise_assert_detail(
2025-01-10T13:49:05.2512182Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2512663Z                 )
2025-01-10T13:49:05.2512933Z     
2025-01-10T13:49:05.2513174Z             diff = 0
2025-01-10T13:49:05.2513530Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2514352Z                 # count up differences
2025-01-10T13:49:05.2514900Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2515431Z                     diff += 1
2025-01-10T13:49:05.2515749Z     
2025-01-10T13:49:05.2516048Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2516605Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2517324Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2518005Z E           AssertionError: Series are different
2025-01-10T13:49:05.2518462Z E           
2025-01-10T13:49:05.2518789Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.2519753Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.2521126Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2522384Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2523080Z 
2025-01-10T13:49:05.2523752Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2524778Z _ TestPlasma.test_plasma_properties[ionization:nebular-lines_upper_level_index] _
2025-01-10T13:49:05.2525277Z 
2025-01-10T13:49:05.2525643Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8964680>
2025-01-10T13:49:05.2526402Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>
2025-01-10T13:49:05.2526979Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.2527265Z 
2025-01-10T13:49:05.2527514Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2528124Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2528630Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2529076Z         try:
2025-01-10T13:49:05.2529522Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2530099Z         except KeyError:
2025-01-10T13:49:05.2530557Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2531241Z     
2025-01-10T13:49:05.2531525Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2531931Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2532358Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2532859Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2533358Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2533934Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2534373Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2534688Z 
2025-01-10T13:49:05.2534888Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2535396Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2535776Z 
2025-01-10T13:49:05.2535995Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.2536667Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.2537100Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.2537528Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.2537988Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.2538470Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.2538944Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.2539447Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.2539882Z err_msg = None
2025-01-10T13:49:05.2540077Z 
2025-01-10T13:49:05.2540273Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2540758Z         if err_msg is None:
2025-01-10T13:49:05.2541171Z             if left.shape != right.shape:
2025-01-10T13:49:05.2541637Z                 raise_assert_detail(
2025-01-10T13:49:05.2542160Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2542665Z                 )
2025-01-10T13:49:05.2542963Z     
2025-01-10T13:49:05.2543214Z             diff = 0
2025-01-10T13:49:05.2543586Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2544212Z                 # count up differences
2025-01-10T13:49:05.2544769Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2545331Z                     diff += 1
2025-01-10T13:49:05.2545662Z     
2025-01-10T13:49:05.2545925Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2546393Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2547015Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2547591Z E           AssertionError: Series are different
2025-01-10T13:49:05.2547993Z E           
2025-01-10T13:49:05.2548306Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.2549225Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.2550638Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.2552213Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.2553401Z 
2025-01-10T13:49:05.2554115Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2555134Z ___________ TestPlasma.test_plasma_properties[ionization:nebular-nu] ___________
2025-01-10T13:49:05.2555621Z 
2025-01-10T13:49:05.2555839Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2556420Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2556935Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2557635Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2558186Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2558675Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2559069Z err_msg = None
2025-01-10T13:49:05.2559241Z 
2025-01-10T13:49:05.2559410Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2559841Z         if err_msg is None:
2025-01-10T13:49:05.2560200Z             if left.shape != right.shape:
2025-01-10T13:49:05.2560597Z                 raise_assert_detail(
2025-01-10T13:49:05.2561067Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2561527Z                 )
2025-01-10T13:49:05.2561795Z     
2025-01-10T13:49:05.2562059Z             diff = 0
2025-01-10T13:49:05.2562466Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2562974Z                 # count up differences
2025-01-10T13:49:05.2563745Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2564397Z                     diff += 1
2025-01-10T13:49:05.2564767Z     
2025-01-10T13:49:05.2565082Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2565626Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2566281Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2566912Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2567348Z E           
2025-01-10T13:49:05.2567694Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2568469Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2569500Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2570079Z 
2025-01-10T13:49:05.2570588Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2571228Z 
2025-01-10T13:49:05.2571502Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2571913Z 
2025-01-10T13:49:05.2572276Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8966030>
2025-01-10T13:49:05.2573099Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>, attr = 'nu'
2025-01-10T13:49:05.2573564Z 
2025-01-10T13:49:05.2573957Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2574579Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2575350Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2575735Z         try:
2025-01-10T13:49:05.2576179Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2576732Z         except KeyError:
2025-01-10T13:49:05.2577228Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2577736Z     
2025-01-10T13:49:05.2578016Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2578422Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2578851Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2579354Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2579859Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2580256Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2580707Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2581221Z 
2025-01-10T13:49:05.2581423Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2581928Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2582482Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2582954Z     ???
2025-01-10T13:49:05.2583264Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2583589Z 
2025-01-10T13:49:05.2583862Z >   ???
2025-01-10T13:49:05.2584194Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2584623Z E   
2025-01-10T13:49:05.2584952Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2585449Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2585874Z E          ...
2025-01-10T13:49:05.2586209Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2586753Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2587358Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2587847Z E          ...
2025-01-10T13:49:05.2588179Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2588710Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2589265Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2589581Z 
2025-01-10T13:49:05.2589728Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2590328Z _____ TestPlasma.test_plasma_properties[ionization:nebular-wavelength_cm] ______
2025-01-10T13:49:05.2590830Z 
2025-01-10T13:49:05.2591050Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2591620Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2592140Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2592649Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2593201Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2593869Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2594272Z err_msg = None
2025-01-10T13:49:05.2594446Z 
2025-01-10T13:49:05.2594612Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2595030Z         if err_msg is None:
2025-01-10T13:49:05.2595388Z             if left.shape != right.shape:
2025-01-10T13:49:05.2595786Z                 raise_assert_detail(
2025-01-10T13:49:05.2596263Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2596729Z                 )
2025-01-10T13:49:05.2596990Z     
2025-01-10T13:49:05.2597228Z             diff = 0
2025-01-10T13:49:05.2597596Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2598090Z                 # count up differences
2025-01-10T13:49:05.2598707Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2599540Z                     diff += 1
2025-01-10T13:49:05.2599908Z     
2025-01-10T13:49:05.2600222Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2600778Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2601466Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2602100Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2602543Z E           
2025-01-10T13:49:05.2602886Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2603857Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2605074Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2605664Z 
2025-01-10T13:49:05.2606170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2606821Z 
2025-01-10T13:49:05.2607097Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2607507Z 
2025-01-10T13:49:05.2607871Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89665a0>
2025-01-10T13:49:05.2608637Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>
2025-01-10T13:49:05.2609153Z attr = 'wavelength_cm'
2025-01-10T13:49:05.2609368Z 
2025-01-10T13:49:05.2609626Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2610243Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2610753Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2611139Z         try:
2025-01-10T13:49:05.2611574Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2612108Z         except KeyError:
2025-01-10T13:49:05.2612551Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2613037Z     
2025-01-10T13:49:05.2613318Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2613890Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2614325Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2614822Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2615318Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2615710Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2616138Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2616455Z 
2025-01-10T13:49:05.2616656Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2617160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2617712Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2618183Z     ???
2025-01-10T13:49:05.2618495Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2618809Z 
2025-01-10T13:49:05.2618918Z >   ???
2025-01-10T13:49:05.2619245Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2619667Z E   
2025-01-10T13:49:05.2619992Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2620532Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2621010Z E          ...
2025-01-10T13:49:05.2621355Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2621894Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2622504Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2623166Z E          ...
2025-01-10T13:49:05.2623473Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2624130Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2624653Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2624972Z 
2025-01-10T13:49:05.2625113Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2625678Z __________ TestPlasma.test_plasma_properties[ionization:nebular-f_lu] __________
2025-01-10T13:49:05.2626152Z 
2025-01-10T13:49:05.2626363Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2626911Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2627402Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2628113Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2628673Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2629205Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2629594Z err_msg = None
2025-01-10T13:49:05.2629758Z 
2025-01-10T13:49:05.2629930Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2630347Z         if err_msg is None:
2025-01-10T13:49:05.2630703Z             if left.shape != right.shape:
2025-01-10T13:49:05.2631109Z                 raise_assert_detail(
2025-01-10T13:49:05.2631659Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2632207Z                 )
2025-01-10T13:49:05.2632523Z     
2025-01-10T13:49:05.2632796Z             diff = 0
2025-01-10T13:49:05.2633198Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2633871Z                 # count up differences
2025-01-10T13:49:05.2634501Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2635090Z                     diff += 1
2025-01-10T13:49:05.2635426Z     
2025-01-10T13:49:05.2635710Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2636209Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2636869Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2637494Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2637923Z E           
2025-01-10T13:49:05.2638260Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2639002Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2640012Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2640599Z 
2025-01-10T13:49:05.2641111Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2641759Z 
2025-01-10T13:49:05.2642025Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2642433Z 
2025-01-10T13:49:05.2642786Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8965910>
2025-01-10T13:49:05.2643879Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>, attr = 'f_lu'
2025-01-10T13:49:05.2644442Z 
2025-01-10T13:49:05.2644696Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2645314Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2646044Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2646419Z         try:
2025-01-10T13:49:05.2646822Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2647330Z         except KeyError:
2025-01-10T13:49:05.2647776Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2648261Z     
2025-01-10T13:49:05.2648543Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2648946Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2649373Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2649864Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2650371Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2650754Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2651201Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2651697Z 
2025-01-10T13:49:05.2651899Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2652419Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2652975Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2653449Z     ???
2025-01-10T13:49:05.2653923Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2654249Z 
2025-01-10T13:49:05.2654352Z >   ???
2025-01-10T13:49:05.2654691Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2655191Z E   
2025-01-10T13:49:05.2655572Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2656170Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2656658Z E          ...
2025-01-10T13:49:05.2656998Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2657543Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2658144Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2658594Z E          ...
2025-01-10T13:49:05.2658899Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2659389Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2659909Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2660225Z 
2025-01-10T13:49:05.2660371Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2660969Z ______ TestPlasma.test_plasma_properties[ionization:nebular-tau_sobolevs] ______
2025-01-10T13:49:05.2661472Z 
2025-01-10T13:49:05.2661681Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2662226Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2662715Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2663216Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2663928Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2664416Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2664809Z err_msg = None
2025-01-10T13:49:05.2664977Z 
2025-01-10T13:49:05.2665144Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2665567Z         if err_msg is None:
2025-01-10T13:49:05.2665917Z             if left.shape != right.shape:
2025-01-10T13:49:05.2666309Z                 raise_assert_detail(
2025-01-10T13:49:05.2666821Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2667365Z                 )
2025-01-10T13:49:05.2667679Z     
2025-01-10T13:49:05.2667957Z             diff = 0
2025-01-10T13:49:05.2668362Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2668865Z                 # count up differences
2025-01-10T13:49:05.2669490Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2670315Z                     diff += 1
2025-01-10T13:49:05.2670655Z     
2025-01-10T13:49:05.2670939Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2671445Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2672109Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2672730Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2673180Z E           
2025-01-10T13:49:05.2673524Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2674450Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2675653Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2676248Z 
2025-01-10T13:49:05.2676759Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2677397Z 
2025-01-10T13:49:05.2677673Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2678073Z 
2025-01-10T13:49:05.2678430Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89671d0>
2025-01-10T13:49:05.2679572Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>
2025-01-10T13:49:05.2680194Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.2680443Z 
2025-01-10T13:49:05.2680700Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2681323Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2681832Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2682220Z         try:
2025-01-10T13:49:05.2682628Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2683135Z         except KeyError:
2025-01-10T13:49:05.2683585Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2684243Z     
2025-01-10T13:49:05.2684525Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2684932Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2685370Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2685867Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2686361Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2686745Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2687219Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2687644Z             else:
2025-01-10T13:49:05.2687966Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.2688410Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.2688714Z 
2025-01-10T13:49:05.2688916Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.2689431Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2689985Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2690452Z     ???
2025-01-10T13:49:05.2690758Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2691076Z 
2025-01-10T13:49:05.2691178Z >   ???
2025-01-10T13:49:05.2691545Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2692044Z E   
2025-01-10T13:49:05.2692432Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2693045Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2693521Z E          ...
2025-01-10T13:49:05.2694331Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2694899Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2695486Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2695957Z E          ...
2025-01-10T13:49:05.2696272Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2696770Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2697299Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2697614Z 
2025-01-10T13:49:05.2697766Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2698355Z ______ TestPlasma.test_plasma_properties[ionization:nebular-beta_sobolev] ______
2025-01-10T13:49:05.2698853Z 
2025-01-10T13:49:05.2699066Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2699811Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2700327Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2700981Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2701708Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2702562Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2703087Z err_msg = None
2025-01-10T13:49:05.2703327Z 
2025-01-10T13:49:05.2703850Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2704555Z         if err_msg is None:
2025-01-10T13:49:05.2705167Z             if left.shape != right.shape:
2025-01-10T13:49:05.2705899Z                 raise_assert_detail(
2025-01-10T13:49:05.2723069Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2723779Z                 )
2025-01-10T13:49:05.2724075Z     
2025-01-10T13:49:05.2724328Z             diff = 0
2025-01-10T13:49:05.2724700Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2725142Z                 # count up differences
2025-01-10T13:49:05.2725675Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2726205Z                     diff += 1
2025-01-10T13:49:05.2726521Z     
2025-01-10T13:49:05.2726788Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2727284Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2727933Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2728620Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2729160Z E           
2025-01-10T13:49:05.2729554Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2730411Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2731535Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2732141Z 
2025-01-10T13:49:05.2732696Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2733385Z 
2025-01-10T13:49:05.2733864Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2734307Z 
2025-01-10T13:49:05.2734688Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8966c00>
2025-01-10T13:49:05.2735464Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>
2025-01-10T13:49:05.2736241Z attr = 'beta_sobolev'
2025-01-10T13:49:05.2736450Z 
2025-01-10T13:49:05.2736671Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2737210Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2737657Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2737998Z         try:
2025-01-10T13:49:05.2738379Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2738863Z         except KeyError:
2025-01-10T13:49:05.2739299Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2739824Z     
2025-01-10T13:49:05.2740132Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2740587Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2741061Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2741844Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2742420Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2742838Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2743302Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2743913Z             else:
2025-01-10T13:49:05.2744251Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.2744721Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.2745054Z 
2025-01-10T13:49:05.2745259Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.2745807Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2746413Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2746887Z     ???
2025-01-10T13:49:05.2747196Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2747514Z 
2025-01-10T13:49:05.2747623Z >   ???
2025-01-10T13:49:05.2747974Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2748423Z E   
2025-01-10T13:49:05.2748766Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2749280Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2749699Z E          ...
2025-01-10T13:49:05.2749995Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2750458Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2750987Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2751472Z E          ...
2025-01-10T13:49:05.2751805Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2752335Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2752909Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2753254Z 
2025-01-10T13:49:05.2753411Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2754213Z ________ TestPlasma.test_plasma_properties[ionization:nebular-j_blues] _________
2025-01-10T13:49:05.2754763Z 
2025-01-10T13:49:05.2754982Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2755554Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2756084Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2756614Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2757204Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2757717Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2758129Z err_msg = None
2025-01-10T13:49:05.2758304Z 
2025-01-10T13:49:05.2758478Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2758899Z         if err_msg is None:
2025-01-10T13:49:05.2759257Z             if left.shape != right.shape:
2025-01-10T13:49:05.2759664Z                 raise_assert_detail(
2025-01-10T13:49:05.2760351Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2760834Z                 )
2025-01-10T13:49:05.2761105Z     
2025-01-10T13:49:05.2761346Z             diff = 0
2025-01-10T13:49:05.2761695Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2762132Z                 # count up differences
2025-01-10T13:49:05.2762653Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2763242Z                     diff += 1
2025-01-10T13:49:05.2763777Z     
2025-01-10T13:49:05.2764099Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2764640Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2765363Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2766047Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2766707Z E           
2025-01-10T13:49:05.2767059Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2767833Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2768880Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2769480Z 
2025-01-10T13:49:05.2770003Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2770660Z 
2025-01-10T13:49:05.2770940Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2771366Z 
2025-01-10T13:49:05.2771727Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8966d80>
2025-01-10T13:49:05.2772508Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be854c080>
2025-01-10T13:49:05.2773027Z attr = 'j_blues'
2025-01-10T13:49:05.2773208Z 
2025-01-10T13:49:05.2773427Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2774170Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2774602Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2774972Z         try:
2025-01-10T13:49:05.2775407Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2775942Z         except KeyError:
2025-01-10T13:49:05.2776415Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2776939Z     
2025-01-10T13:49:05.2777259Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2777699Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2778183Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2778698Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2779198Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2779597Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2780062Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2780502Z             else:
2025-01-10T13:49:05.2780828Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.2781300Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.2781616Z 
2025-01-10T13:49:05.2781816Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.2782325Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2782867Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2783346Z     ???
2025-01-10T13:49:05.2783854Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2784387Z 
2025-01-10T13:49:05.2784499Z >   ???
2025-01-10T13:49:05.2784838Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2785272Z E   
2025-01-10T13:49:05.2785606Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2786110Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2786512Z E          ...
2025-01-10T13:49:05.2786805Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2787339Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2787942Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2788425Z E          ...
2025-01-10T13:49:05.2788763Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2789301Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2790116Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2790461Z 
2025-01-10T13:49:05.2790607Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2791176Z ___________ TestPlasma.test_plasma_properties[ionization:lte-lines] ____________
2025-01-10T13:49:05.2791656Z 
2025-01-10T13:49:05.2791871Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2792443Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2792962Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2793484Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2794244Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2794731Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2795128Z err_msg = None
2025-01-10T13:49:05.2795294Z 
2025-01-10T13:49:05.2795468Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2795904Z         if err_msg is None:
2025-01-10T13:49:05.2796258Z             if left.shape != right.shape:
2025-01-10T13:49:05.2796656Z                 raise_assert_detail(
2025-01-10T13:49:05.2797129Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2797601Z                 )
2025-01-10T13:49:05.2797867Z     
2025-01-10T13:49:05.2798104Z             diff = 0
2025-01-10T13:49:05.2798448Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2798898Z                 # count up differences
2025-01-10T13:49:05.2799506Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2800115Z                     diff += 1
2025-01-10T13:49:05.2800493Z     
2025-01-10T13:49:05.2800812Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2801367Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2802106Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2802753Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2803185Z E           
2025-01-10T13:49:05.2803530Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2804467Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2805521Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2806319Z 
2025-01-10T13:49:05.2806822Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2807471Z 
2025-01-10T13:49:05.2807741Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2808154Z 
2025-01-10T13:49:05.2808515Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8965af0>
2025-01-10T13:49:05.2809286Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>
2025-01-10T13:49:05.2809805Z attr = 'lines'
2025-01-10T13:49:05.2809977Z 
2025-01-10T13:49:05.2810187Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2810707Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2811198Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2811583Z         try:
2025-01-10T13:49:05.2812016Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2812815Z         except KeyError:
2025-01-10T13:49:05.2813313Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2814105Z     
2025-01-10T13:49:05.2814411Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2814826Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2815252Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2815755Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2816253Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2816651Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2817109Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2817550Z             else:
2025-01-10T13:49:05.2817874Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.2818324Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.2818629Z 
2025-01-10T13:49:05.2818822Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.2819345Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2819905Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2820377Z     ???
2025-01-10T13:49:05.2820700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2821025Z 
2025-01-10T13:49:05.2821130Z >   ???
2025-01-10T13:49:05.2821469Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2821904Z E   
2025-01-10T13:49:05.2822238Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2822774Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2823251Z E          ...
2025-01-10T13:49:05.2823582Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2824297Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2824993Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2825490Z E          ...
2025-01-10T13:49:05.2825803Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2826293Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2826822Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2827136Z 
2025-01-10T13:49:05.2827286Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2827889Z __ TestPlasma.test_plasma_properties[ionization:lte-lines_lower_level_index] ___
2025-01-10T13:49:05.2828394Z 
2025-01-10T13:49:05.2828814Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89660c0>
2025-01-10T13:49:05.2829599Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>
2025-01-10T13:49:05.2830127Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.2830382Z 
2025-01-10T13:49:05.2830597Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2831124Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2831577Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2831911Z         try:
2025-01-10T13:49:05.2832493Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2832970Z         except KeyError:
2025-01-10T13:49:05.2833381Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2834026Z     
2025-01-10T13:49:05.2834338Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2834791Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2835266Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2835817Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2836359Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2836756Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2837222Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2837560Z 
2025-01-10T13:49:05.2837772Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2838494Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2838846Z 
2025-01-10T13:49:05.2839080Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.2839585Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.2840026Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2840451Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.2840919Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.2841409Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.2841825Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2842248Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.2842615Z err_msg = None
2025-01-10T13:49:05.2842785Z 
2025-01-10T13:49:05.2842952Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2843379Z         if err_msg is None:
2025-01-10T13:49:05.2843901Z             if left.shape != right.shape:
2025-01-10T13:49:05.2844308Z                 raise_assert_detail(
2025-01-10T13:49:05.2844798Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2845355Z                 )
2025-01-10T13:49:05.2845661Z     
2025-01-10T13:49:05.2845938Z             diff = 0
2025-01-10T13:49:05.2846337Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2846847Z                 # count up differences
2025-01-10T13:49:05.2847467Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2848082Z                     diff += 1
2025-01-10T13:49:05.2848420Z     
2025-01-10T13:49:05.2848695Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2849196Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2849864Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2850486Z E           AssertionError: Series are different
2025-01-10T13:49:05.2850922Z E           
2025-01-10T13:49:05.2851247Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.2852178Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.2853483Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2855134Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2855825Z 
2025-01-10T13:49:05.2856325Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2857415Z __ TestPlasma.test_plasma_properties[ionization:lte-lines_upper_level_index] ___
2025-01-10T13:49:05.2857977Z 
2025-01-10T13:49:05.2858386Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8967a40>
2025-01-10T13:49:05.2859276Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>
2025-01-10T13:49:05.2860067Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.2860332Z 
2025-01-10T13:49:05.2860571Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2861133Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2861604Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2861955Z         try:
2025-01-10T13:49:05.2862352Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2862863Z         except KeyError:
2025-01-10T13:49:05.2863299Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2863915Z     
2025-01-10T13:49:05.2864185Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2864567Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2864980Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2865454Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2865930Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2866320Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2866752Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2867075Z 
2025-01-10T13:49:05.2867265Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2867759Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2868101Z 
2025-01-10T13:49:05.2868341Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.2868899Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.2869388Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.2869874Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.2870414Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.2870979Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.2871470Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.2871932Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.2872318Z err_msg = None
2025-01-10T13:49:05.2872495Z 
2025-01-10T13:49:05.2872677Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2873124Z         if err_msg is None:
2025-01-10T13:49:05.2873496Z             if left.shape != right.shape:
2025-01-10T13:49:05.2874071Z                 raise_assert_detail(
2025-01-10T13:49:05.2874586Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2875078Z                 )
2025-01-10T13:49:05.2875359Z     
2025-01-10T13:49:05.2875601Z             diff = 0
2025-01-10T13:49:05.2875945Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2876384Z                 # count up differences
2025-01-10T13:49:05.2876914Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2877447Z                     diff += 1
2025-01-10T13:49:05.2877774Z     
2025-01-10T13:49:05.2878037Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2878750Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2879369Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2879953Z E           AssertionError: Series are different
2025-01-10T13:49:05.2880402Z E           
2025-01-10T13:49:05.2880758Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.2881798Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.2883359Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.2885163Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.2885974Z 
2025-01-10T13:49:05.2886503Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2887461Z _____________ TestPlasma.test_plasma_properties[ionization:lte-nu] _____________
2025-01-10T13:49:05.2887907Z 
2025-01-10T13:49:05.2888123Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2888666Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2889155Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2889647Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2890191Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2890669Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2891055Z err_msg = None
2025-01-10T13:49:05.2891217Z 
2025-01-10T13:49:05.2891390Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2891861Z         if err_msg is None:
2025-01-10T13:49:05.2892271Z             if left.shape != right.shape:
2025-01-10T13:49:05.2892736Z                 raise_assert_detail(
2025-01-10T13:49:05.2893285Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2893983Z                 )
2025-01-10T13:49:05.2894301Z     
2025-01-10T13:49:05.2894587Z             diff = 0
2025-01-10T13:49:05.2894999Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2895480Z                 # count up differences
2025-01-10T13:49:05.2896035Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2896603Z                     diff += 1
2025-01-10T13:49:05.2896941Z     
2025-01-10T13:49:05.2897220Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2897723Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2898385Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2899003Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2899422Z E           
2025-01-10T13:49:05.2899969Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2900714Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2901720Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2902299Z 
2025-01-10T13:49:05.2902795Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2903777Z 
2025-01-10T13:49:05.2904095Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2904585Z 
2025-01-10T13:49:05.2905002Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8967500>
2025-01-10T13:49:05.2905945Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>, attr = 'nu'
2025-01-10T13:49:05.2906481Z 
2025-01-10T13:49:05.2906741Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2907321Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2907787Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2908141Z         try:
2025-01-10T13:49:05.2908538Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2909046Z         except KeyError:
2025-01-10T13:49:05.2909493Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2909981Z     
2025-01-10T13:49:05.2910267Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2910665Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2911079Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2911545Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2912024Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2912402Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2912836Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2913157Z 
2025-01-10T13:49:05.2913350Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2914004Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2914551Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2915016Z     ???
2025-01-10T13:49:05.2915340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2915714Z 
2025-01-10T13:49:05.2915839Z >   ???
2025-01-10T13:49:05.2916231Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2916734Z E   
2025-01-10T13:49:05.2917111Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2917691Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2918175Z E          ...
2025-01-10T13:49:05.2918521Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2919038Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2919578Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2920028Z E          ...
2025-01-10T13:49:05.2920333Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2920829Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2921356Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2921670Z 
2025-01-10T13:49:05.2921813Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2922391Z _______ TestPlasma.test_plasma_properties[ionization:lte-wavelength_cm] ________
2025-01-10T13:49:05.2922870Z 
2025-01-10T13:49:05.2923307Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2924028Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2924525Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2925019Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2925570Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2926062Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2926454Z err_msg = None
2025-01-10T13:49:05.2926617Z 
2025-01-10T13:49:05.2926792Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2927216Z         if err_msg is None:
2025-01-10T13:49:05.2927622Z             if left.shape != right.shape:
2025-01-10T13:49:05.2928299Z                 raise_assert_detail(
2025-01-10T13:49:05.2928909Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2929458Z                 )
2025-01-10T13:49:05.2929759Z     
2025-01-10T13:49:05.2930014Z             diff = 0
2025-01-10T13:49:05.2930389Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2930859Z                 # count up differences
2025-01-10T13:49:05.2931419Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2931987Z                     diff += 1
2025-01-10T13:49:05.2932323Z     
2025-01-10T13:49:05.2932602Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2933097Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2933920Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2934510Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2934934Z E           
2025-01-10T13:49:05.2935268Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2936007Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2937019Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2937592Z 
2025-01-10T13:49:05.2938289Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2939035Z 
2025-01-10T13:49:05.2939347Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2939833Z 
2025-01-10T13:49:05.2940249Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8967e90>
2025-01-10T13:49:05.2941123Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>
2025-01-10T13:49:05.2941688Z attr = 'wavelength_cm'
2025-01-10T13:49:05.2941907Z 
2025-01-10T13:49:05.2942134Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2942695Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2943167Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2943518Z         try:
2025-01-10T13:49:05.2944091Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2944602Z         except KeyError:
2025-01-10T13:49:05.2945017Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2945466Z     
2025-01-10T13:49:05.2945742Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2946130Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2946753Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2947231Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2947703Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2948079Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2948512Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2948820Z 
2025-01-10T13:49:05.2949016Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2949583Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2950223Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2950759Z     ???
2025-01-10T13:49:05.2951128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2951507Z 
2025-01-10T13:49:05.2951835Z >   ???
2025-01-10T13:49:05.2952236Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2952721Z E   
2025-01-10T13:49:05.2953073Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2953766Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2954214Z E          ...
2025-01-10T13:49:05.2954525Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2955023Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2955572Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2956011Z E          ...
2025-01-10T13:49:05.2956310Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2956772Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2957261Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2957563Z 
2025-01-10T13:49:05.2957703Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2958244Z ____________ TestPlasma.test_plasma_properties[ionization:lte-f_lu] ____________
2025-01-10T13:49:05.2958696Z 
2025-01-10T13:49:05.2958904Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2959449Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2959938Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2960419Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2961006Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2961562Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2962024Z err_msg = None
2025-01-10T13:49:05.2962228Z 
2025-01-10T13:49:05.2962422Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2962574Z         if err_msg is None:
2025-01-10T13:49:05.2962744Z             if left.shape != right.shape:
2025-01-10T13:49:05.2962906Z                 raise_assert_detail(
2025-01-10T13:49:05.2963176Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2963312Z                 )
2025-01-10T13:49:05.2963436Z     
2025-01-10T13:49:05.2963564Z             diff = 0
2025-01-10T13:49:05.2963922Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2964075Z                 # count up differences
2025-01-10T13:49:05.2964402Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2964529Z                     diff += 1
2025-01-10T13:49:05.2964641Z     
2025-01-10T13:49:05.2964778Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2965006Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2965295Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2965497Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2965609Z E           
2025-01-10T13:49:05.2965992Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2966447Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2966909Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2966922Z 
2025-01-10T13:49:05.2967464Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2967637Z 
2025-01-10T13:49:05.2967933Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2967948Z 
2025-01-10T13:49:05.2968322Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8967e00>
2025-01-10T13:49:05.2968652Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>, attr = 'f_lu'
2025-01-10T13:49:05.2968659Z 
2025-01-10T13:49:05.2968874Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2969058Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2969186Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2969301Z         try:
2025-01-10T13:49:05.2969524Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2969652Z         except KeyError:
2025-01-10T13:49:05.2969865Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2969973Z     
2025-01-10T13:49:05.2970115Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2970266Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2970411Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2970620Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2970752Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2970886Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2971058Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2971065Z 
2025-01-10T13:49:05.2971258Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.2971439Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2971667Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2971777Z     ???
2025-01-10T13:49:05.2971947Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2971960Z 
2025-01-10T13:49:05.2972068Z >   ???
2025-01-10T13:49:05.2972265Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2972376Z E   
2025-01-10T13:49:05.2972578Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2972760Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2972894Z E          ...
2025-01-10T13:49:05.2973048Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2973288Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2973491Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2973787Z E          ...
2025-01-10T13:49:05.2973948Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2974182Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2974366Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2974375Z 
2025-01-10T13:49:05.2974533Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2974916Z ________ TestPlasma.test_plasma_properties[ionization:lte-tau_sobolevs] ________
2025-01-10T13:49:05.2975157Z 
2025-01-10T13:49:05.2975398Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2975640Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2975811Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2976065Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2976283Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2976439Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2976555Z err_msg = None
2025-01-10T13:49:05.2976570Z 
2025-01-10T13:49:05.2976748Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2976880Z         if err_msg is None:
2025-01-10T13:49:05.2977207Z             if left.shape != right.shape:
2025-01-10T13:49:05.2977344Z                 raise_assert_detail(
2025-01-10T13:49:05.2977590Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2977706Z                 )
2025-01-10T13:49:05.2977812Z     
2025-01-10T13:49:05.2977930Z             diff = 0
2025-01-10T13:49:05.2978110Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2978253Z                 # count up differences
2025-01-10T13:49:05.2978545Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2978670Z                     diff += 1
2025-01-10T13:49:05.2978777Z     
2025-01-10T13:49:05.2978918Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2979140Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2979430Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2979623Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2979732Z E           
2025-01-10T13:49:05.2979924Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2980352Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2980793Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2980803Z 
2025-01-10T13:49:05.2981312Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.2981328Z 
2025-01-10T13:49:05.2981598Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.2981612Z 
2025-01-10T13:49:05.2981979Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8964050>
2025-01-10T13:49:05.2982245Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>
2025-01-10T13:49:05.2982371Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.2982378Z 
2025-01-10T13:49:05.2982592Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.2982773Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.2982905Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.2983010Z         try:
2025-01-10T13:49:05.2983235Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.2983357Z         except KeyError:
2025-01-10T13:49:05.2983573Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.2983840Z     
2025-01-10T13:49:05.2983978Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.2984292Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.2984433Z             if attr == "selected_atoms":
2025-01-10T13:49:05.2984639Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.2984795Z             elif actual.ndim == 1:
2025-01-10T13:49:05.2984954Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.2985156Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.2985280Z             else:
2025-01-10T13:49:05.2985443Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.2985638Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.2985647Z 
2025-01-10T13:49:05.2985871Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.2986084Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2986346Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.2986657Z     ???
2025-01-10T13:49:05.2986860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.2986879Z 
2025-01-10T13:49:05.2987001Z >   ???
2025-01-10T13:49:05.2987229Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.2987354Z E   
2025-01-10T13:49:05.2987587Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.2987792Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2987916Z E          ...
2025-01-10T13:49:05.2988070Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2988311Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2988497Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.2988614Z E          ...
2025-01-10T13:49:05.2988748Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.2988960Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.2989135Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.2989149Z 
2025-01-10T13:49:05.2989298Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.2989636Z ________ TestPlasma.test_plasma_properties[ionization:lte-beta_sobolev] ________
2025-01-10T13:49:05.2989644Z 
2025-01-10T13:49:05.2989865Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2990076Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2990236Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2990466Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.2990671Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.2990823Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.2990946Z err_msg = None
2025-01-10T13:49:05.2990953Z 
2025-01-10T13:49:05.2991139Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.2991277Z         if err_msg is None:
2025-01-10T13:49:05.2991431Z             if left.shape != right.shape:
2025-01-10T13:49:05.2991560Z                 raise_assert_detail(
2025-01-10T13:49:05.2991802Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.2991918Z                 )
2025-01-10T13:49:05.2992020Z     
2025-01-10T13:49:05.2992135Z             diff = 0
2025-01-10T13:49:05.2992301Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.2992435Z                 # count up differences
2025-01-10T13:49:05.2992697Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.2992820Z                     diff += 1
2025-01-10T13:49:05.2992923Z     
2025-01-10T13:49:05.2993200Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.2993855Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.2994699Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.2995297Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.2995723Z E           
2025-01-10T13:49:05.2996047Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.2996796Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2997960Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.2998870Z 
2025-01-10T13:49:05.2999459Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3000209Z 
2025-01-10T13:49:05.3000536Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3000999Z 
2025-01-10T13:49:05.3001386Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a51010>
2025-01-10T13:49:05.3002208Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>
2025-01-10T13:49:05.3002762Z attr = 'beta_sobolev'
2025-01-10T13:49:05.3002976Z 
2025-01-10T13:49:05.3003207Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3003947Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3004414Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3004760Z         try:
2025-01-10T13:49:05.3005144Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3005626Z         except KeyError:
2025-01-10T13:49:05.3006061Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3006529Z     
2025-01-10T13:49:05.3006798Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3007187Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3007594Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3008068Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3008546Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3008921Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3009400Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3009889Z             else:
2025-01-10T13:49:05.3010250Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3010762Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3011123Z 
2025-01-10T13:49:05.3011361Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3011942Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3012589Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3013084Z     ???
2025-01-10T13:49:05.3013415Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3013942Z 
2025-01-10T13:49:05.3014054Z >   ???
2025-01-10T13:49:05.3014407Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3014873Z E   
2025-01-10T13:49:05.3015230Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3015767Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3016204Z E          ...
2025-01-10T13:49:05.3016506Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3016972Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3017499Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3017921Z E          ...
2025-01-10T13:49:05.3018405Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3018872Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3019366Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3019669Z 
2025-01-10T13:49:05.3019807Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3020343Z __________ TestPlasma.test_plasma_properties[ionization:lte-j_blues] ___________
2025-01-10T13:49:05.3020798Z 
2025-01-10T13:49:05.3021019Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3021645Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3022222Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3022789Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3023876Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3024486Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3024927Z err_msg = None
2025-01-10T13:49:05.3025108Z 
2025-01-10T13:49:05.3025289Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3025736Z         if err_msg is None:
2025-01-10T13:49:05.3026115Z             if left.shape != right.shape:
2025-01-10T13:49:05.3026542Z                 raise_assert_detail(
2025-01-10T13:49:05.3027049Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3027553Z                 )
2025-01-10T13:49:05.3027838Z     
2025-01-10T13:49:05.3028089Z             diff = 0
2025-01-10T13:49:05.3028462Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3028951Z                 # count up differences
2025-01-10T13:49:05.3029480Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3030030Z                     diff += 1
2025-01-10T13:49:05.3030358Z     
2025-01-10T13:49:05.3030629Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3031107Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3031741Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3032336Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3032745Z E           
2025-01-10T13:49:05.3033098Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3034095Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3035258Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3035914Z 
2025-01-10T13:49:05.3036452Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3037138Z 
2025-01-10T13:49:05.3037429Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3037869Z 
2025-01-10T13:49:05.3038258Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a524e0>
2025-01-10T13:49:05.3039076Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf263d760>
2025-01-10T13:49:05.3039613Z attr = 'j_blues'
2025-01-10T13:49:05.3039796Z 
2025-01-10T13:49:05.3040014Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3040556Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3041203Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3041569Z         try:
2025-01-10T13:49:05.3041979Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3042465Z         except KeyError:
2025-01-10T13:49:05.3042894Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3043349Z     
2025-01-10T13:49:05.3043754Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3044141Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3044584Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3045139Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3045700Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3046345Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3047247Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3048058Z             else:
2025-01-10T13:49:05.3048583Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3049242Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3049613Z 
2025-01-10T13:49:05.3049912Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3050669Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3051363Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3051934Z     ???
2025-01-10T13:49:05.3052484Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3052895Z 
2025-01-10T13:49:05.3053040Z >   ???
2025-01-10T13:49:05.3072370Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3072887Z E   
2025-01-10T13:49:05.3073256Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3073986Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3074438Z E          ...
2025-01-10T13:49:05.3074749Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3075234Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3075748Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3076173Z E          ...
2025-01-10T13:49:05.3076460Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3076928Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3077423Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3077724Z 
2025-01-10T13:49:05.3077866Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3078411Z ___________ TestPlasma.test_plasma_properties[excitation:lte-lines] ____________
2025-01-10T13:49:05.3078872Z 
2025-01-10T13:49:05.3079082Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3079718Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3080297Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3080876Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3081508Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3082079Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3082524Z err_msg = None
2025-01-10T13:49:05.3082704Z 
2025-01-10T13:49:05.3082888Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3083330Z         if err_msg is None:
2025-01-10T13:49:05.3083863Z             if left.shape != right.shape:
2025-01-10T13:49:05.3084284Z                 raise_assert_detail(
2025-01-10T13:49:05.3084792Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3085296Z                 )
2025-01-10T13:49:05.3085579Z     
2025-01-10T13:49:05.3085834Z             diff = 0
2025-01-10T13:49:05.3086201Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3086942Z                 # count up differences
2025-01-10T13:49:05.3087471Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3088016Z                     diff += 1
2025-01-10T13:49:05.3088334Z     
2025-01-10T13:49:05.3088603Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3089080Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3089717Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3090312Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3090736Z E           
2025-01-10T13:49:05.3091112Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3091957Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3093340Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3094170Z 
2025-01-10T13:49:05.3094753Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3095435Z 
2025-01-10T13:49:05.3095738Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3096187Z 
2025-01-10T13:49:05.3096579Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a529c0>
2025-01-10T13:49:05.3097417Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>
2025-01-10T13:49:05.3097972Z attr = 'lines'
2025-01-10T13:49:05.3098156Z 
2025-01-10T13:49:05.3098376Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3098907Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3099359Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3099704Z         try:
2025-01-10T13:49:05.3100087Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3100585Z         except KeyError:
2025-01-10T13:49:05.3101024Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3101493Z     
2025-01-10T13:49:05.3101778Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3102163Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3102577Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3103098Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3103803Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3104258Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3104774Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3105255Z             else:
2025-01-10T13:49:05.3105630Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3106153Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3106485Z 
2025-01-10T13:49:05.3106698Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3107244Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3107845Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3108350Z     ???
2025-01-10T13:49:05.3108685Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3109022Z 
2025-01-10T13:49:05.3109138Z >   ???
2025-01-10T13:49:05.3109491Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3109950Z E   
2025-01-10T13:49:05.3110287Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3110994Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3111421Z E          ...
2025-01-10T13:49:05.3111722Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3112197Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3112718Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3113135Z E          ...
2025-01-10T13:49:05.3113423Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3114092Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3114586Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3114927Z 
2025-01-10T13:49:05.3115087Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3115748Z __ TestPlasma.test_plasma_properties[excitation:lte-lines_lower_level_index] ___
2025-01-10T13:49:05.3116530Z 
2025-01-10T13:49:05.3116947Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a50230>
2025-01-10T13:49:05.3117854Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>
2025-01-10T13:49:05.3118456Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3118719Z 
2025-01-10T13:49:05.3118951Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3119510Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3119972Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3120336Z         try:
2025-01-10T13:49:05.3120736Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3121255Z         except KeyError:
2025-01-10T13:49:05.3121695Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3122161Z     
2025-01-10T13:49:05.3122424Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3122808Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3123229Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3123866Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3124357Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3124737Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3125173Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3125493Z 
2025-01-10T13:49:05.3125689Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3126185Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3126514Z 
2025-01-10T13:49:05.3126748Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3127301Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3127786Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3128280Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3128826Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3129473Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3129968Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3130419Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3130795Z err_msg = None
2025-01-10T13:49:05.3130970Z 
2025-01-10T13:49:05.3131157Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3131616Z         if err_msg is None:
2025-01-10T13:49:05.3131995Z             if left.shape != right.shape:
2025-01-10T13:49:05.3132415Z                 raise_assert_detail(
2025-01-10T13:49:05.3132925Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3133417Z                 )
2025-01-10T13:49:05.3133886Z     
2025-01-10T13:49:05.3134133Z             diff = 0
2025-01-10T13:49:05.3134481Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3134928Z                 # count up differences
2025-01-10T13:49:05.3135457Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3136210Z                     diff += 1
2025-01-10T13:49:05.3136531Z     
2025-01-10T13:49:05.3136795Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3137262Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3137878Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3138471Z E           AssertionError: Series are different
2025-01-10T13:49:05.3138939Z E           
2025-01-10T13:49:05.3139298Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3140343Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3142026Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3143337Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3144236Z 
2025-01-10T13:49:05.3144799Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3145833Z __ TestPlasma.test_plasma_properties[excitation:lte-lines_upper_level_index] ___
2025-01-10T13:49:05.3146319Z 
2025-01-10T13:49:05.3146689Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a50440>
2025-01-10T13:49:05.3147465Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>
2025-01-10T13:49:05.3148011Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3148259Z 
2025-01-10T13:49:05.3148484Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3149017Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3149462Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3149831Z         try:
2025-01-10T13:49:05.3150213Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3150729Z         except KeyError:
2025-01-10T13:49:05.3151212Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3151757Z     
2025-01-10T13:49:05.3152074Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3152525Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3152992Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3153525Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3154233Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3154637Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3155096Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3155435Z 
2025-01-10T13:49:05.3155644Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3156179Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3156524Z 
2025-01-10T13:49:05.3156769Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3157278Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3157718Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3158359Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3158834Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3159323Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3159743Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3160163Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3160525Z err_msg = None
2025-01-10T13:49:05.3160693Z 
2025-01-10T13:49:05.3160869Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3161283Z         if err_msg is None:
2025-01-10T13:49:05.3161641Z             if left.shape != right.shape:
2025-01-10T13:49:05.3162090Z                 raise_assert_detail(
2025-01-10T13:49:05.3162638Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3163428Z                 )
2025-01-10T13:49:05.3163905Z     
2025-01-10T13:49:05.3164207Z             diff = 0
2025-01-10T13:49:05.3164622Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3165135Z                 # count up differences
2025-01-10T13:49:05.3165728Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3166297Z                     diff += 1
2025-01-10T13:49:05.3166637Z     
2025-01-10T13:49:05.3166922Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3167432Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3168106Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3168713Z E           AssertionError: Series are different
2025-01-10T13:49:05.3169134Z E           
2025-01-10T13:49:05.3169445Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3170393Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3171822Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3173243Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3174204Z 
2025-01-10T13:49:05.3174783Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3175864Z _____________ TestPlasma.test_plasma_properties[excitation:lte-nu] _____________
2025-01-10T13:49:05.3176378Z 
2025-01-10T13:49:05.3176624Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3177256Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3177804Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3178326Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3178920Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3179649Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3180067Z err_msg = None
2025-01-10T13:49:05.3180250Z 
2025-01-10T13:49:05.3180428Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3180871Z         if err_msg is None:
2025-01-10T13:49:05.3181247Z             if left.shape != right.shape:
2025-01-10T13:49:05.3181645Z                 raise_assert_detail(
2025-01-10T13:49:05.3182123Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3182622Z                 )
2025-01-10T13:49:05.3182895Z     
2025-01-10T13:49:05.3183139Z             diff = 0
2025-01-10T13:49:05.3183494Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3184105Z                 # count up differences
2025-01-10T13:49:05.3184637Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3185337Z                     diff += 1
2025-01-10T13:49:05.3185662Z     
2025-01-10T13:49:05.3185947Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3186489Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3187223Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3187915Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3188393Z E           
2025-01-10T13:49:05.3188783Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3189609Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3190672Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3191292Z 
2025-01-10T13:49:05.3191845Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3192523Z 
2025-01-10T13:49:05.3192815Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3193233Z 
2025-01-10T13:49:05.3193789Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a503b0>
2025-01-10T13:49:05.3194640Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>, attr = 'nu'
2025-01-10T13:49:05.3195113Z 
2025-01-10T13:49:05.3195337Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3195877Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3196317Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3196657Z         try:
2025-01-10T13:49:05.3197029Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3197501Z         except KeyError:
2025-01-10T13:49:05.3197958Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3198482Z     
2025-01-10T13:49:05.3198790Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3199228Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3199694Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3200234Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3200779Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3201196Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3201663Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3202003Z 
2025-01-10T13:49:05.3202225Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3202767Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3203557Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3204261Z     ???
2025-01-10T13:49:05.3204590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3204917Z 
2025-01-10T13:49:05.3205026Z >   ???
2025-01-10T13:49:05.3205357Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3205788Z E   
2025-01-10T13:49:05.3206131Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3206640Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3207055Z E          ...
2025-01-10T13:49:05.3207351Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3207819Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3208335Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3208917Z E          ...
2025-01-10T13:49:05.3209211Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3209731Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3210308Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3210656Z 
2025-01-10T13:49:05.3210808Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3211456Z _______ TestPlasma.test_plasma_properties[excitation:lte-wavelength_cm] ________
2025-01-10T13:49:05.3212017Z 
2025-01-10T13:49:05.3212263Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3212895Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3213417Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3214140Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3214734Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3215252Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3215672Z err_msg = None
2025-01-10T13:49:05.3215847Z 
2025-01-10T13:49:05.3216032Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3216476Z         if err_msg is None:
2025-01-10T13:49:05.3216846Z             if left.shape != right.shape:
2025-01-10T13:49:05.3217246Z                 raise_assert_detail(
2025-01-10T13:49:05.3217722Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3218201Z                 )
2025-01-10T13:49:05.3218470Z     
2025-01-10T13:49:05.3218715Z             diff = 0
2025-01-10T13:49:05.3219068Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3219509Z                 # count up differences
2025-01-10T13:49:05.3220037Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3220576Z                     diff += 1
2025-01-10T13:49:05.3220899Z     
2025-01-10T13:49:05.3221165Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3221702Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3222431Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3223107Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3223586Z E           
2025-01-10T13:49:05.3224127Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3224960Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3226023Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3226827Z 
2025-01-10T13:49:05.3227368Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3228055Z 
2025-01-10T13:49:05.3228344Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3228763Z 
2025-01-10T13:49:05.3229177Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a504a0>
2025-01-10T13:49:05.3229973Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>
2025-01-10T13:49:05.3230507Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3230708Z 
2025-01-10T13:49:05.3230934Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3231639Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3232093Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3232423Z         try:
2025-01-10T13:49:05.3232794Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3233338Z         except KeyError:
2025-01-10T13:49:05.3233979Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3234511Z     
2025-01-10T13:49:05.3234825Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3235272Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3235744Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3236296Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3236830Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3237226Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3237691Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3238035Z 
2025-01-10T13:49:05.3238243Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3238795Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3239379Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3239873Z     ???
2025-01-10T13:49:05.3240202Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3240530Z 
2025-01-10T13:49:05.3240637Z >   ???
2025-01-10T13:49:05.3240970Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3241407Z E   
2025-01-10T13:49:05.3241754Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3242268Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3242684Z E          ...
2025-01-10T13:49:05.3242979Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3243452Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3244135Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3244553Z E          ...
2025-01-10T13:49:05.3244848Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3245360Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3245933Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3246288Z 
2025-01-10T13:49:05.3246443Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3247058Z ____________ TestPlasma.test_plasma_properties[excitation:lte-f_lu] ____________
2025-01-10T13:49:05.3247569Z 
2025-01-10T13:49:05.3247793Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3248376Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3248910Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3249438Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3250031Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3250749Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3251162Z err_msg = None
2025-01-10T13:49:05.3251330Z 
2025-01-10T13:49:05.3251508Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3252550Z         if err_msg is None:
2025-01-10T13:49:05.3252912Z             if left.shape != right.shape:
2025-01-10T13:49:05.3253316Z                 raise_assert_detail(
2025-01-10T13:49:05.3253994Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3254483Z                 )
2025-01-10T13:49:05.3254758Z     
2025-01-10T13:49:05.3255001Z             diff = 0
2025-01-10T13:49:05.3255355Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3255810Z                 # count up differences
2025-01-10T13:49:05.3256419Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3257299Z                     diff += 1
2025-01-10T13:49:05.3257671Z     
2025-01-10T13:49:05.3257975Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3258524Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3259193Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3259835Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3260280Z E           
2025-01-10T13:49:05.3260631Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3261410Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3262454Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3263037Z 
2025-01-10T13:49:05.3263552Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3264362Z 
2025-01-10T13:49:05.3264638Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3265059Z 
2025-01-10T13:49:05.3265417Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a53560>
2025-01-10T13:49:05.3266255Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>, attr = 'f_lu'
2025-01-10T13:49:05.3266742Z 
2025-01-10T13:49:05.3266988Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3267611Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3268133Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3268519Z         try:
2025-01-10T13:49:05.3268961Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3269533Z         except KeyError:
2025-01-10T13:49:05.3270017Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3270505Z     
2025-01-10T13:49:05.3270792Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3271212Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3271645Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3272151Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3272662Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3273067Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3273529Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3274001Z 
2025-01-10T13:49:05.3274212Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3274912Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3275475Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3275949Z     ???
2025-01-10T13:49:05.3276269Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3276598Z 
2025-01-10T13:49:05.3276701Z >   ???
2025-01-10T13:49:05.3277040Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3277475Z E   
2025-01-10T13:49:05.3277812Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3278329Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3278799Z E          ...
2025-01-10T13:49:05.3279142Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3279691Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3280518Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3281024Z E          ...
2025-01-10T13:49:05.3281384Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3281915Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3282442Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3282756Z 
2025-01-10T13:49:05.3282907Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3283493Z ________ TestPlasma.test_plasma_properties[excitation:lte-tau_sobolevs] ________
2025-01-10T13:49:05.3283502Z 
2025-01-10T13:49:05.3283875Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3284100Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3284263Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3284479Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3284698Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3284852Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3284975Z err_msg = None
2025-01-10T13:49:05.3284982Z 
2025-01-10T13:49:05.3285156Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3285286Z         if err_msg is None:
2025-01-10T13:49:05.3285436Z             if left.shape != right.shape:
2025-01-10T13:49:05.3285574Z                 raise_assert_detail(
2025-01-10T13:49:05.3285798Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3285911Z                 )
2025-01-10T13:49:05.3286013Z     
2025-01-10T13:49:05.3286125Z             diff = 0
2025-01-10T13:49:05.3286298Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3286429Z                 # count up differences
2025-01-10T13:49:05.3286706Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3286832Z                     diff += 1
2025-01-10T13:49:05.3286947Z     
2025-01-10T13:49:05.3287078Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3287294Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3287565Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3287744Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3287851Z E           
2025-01-10T13:49:05.3288031Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3288461Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3288902Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3289120Z 
2025-01-10T13:49:05.3289631Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3289639Z 
2025-01-10T13:49:05.3289905Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3289919Z 
2025-01-10T13:49:05.3290295Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a50800>
2025-01-10T13:49:05.3290607Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>
2025-01-10T13:49:05.3290751Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.3290760Z 
2025-01-10T13:49:05.3291005Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3291458Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3291616Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3291737Z         try:
2025-01-10T13:49:05.3292008Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3292143Z         except KeyError:
2025-01-10T13:49:05.3292402Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3292519Z     
2025-01-10T13:49:05.3292677Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3292845Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3293011Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3293259Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3293403Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3293555Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3293927Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3294060Z             else:
2025-01-10T13:49:05.3294212Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3294394Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3294401Z 
2025-01-10T13:49:05.3294610Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3294805Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3295046Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3295163Z     ???
2025-01-10T13:49:05.3295340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3295352Z 
2025-01-10T13:49:05.3295458Z >   ???
2025-01-10T13:49:05.3295673Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3295781Z E   
2025-01-10T13:49:05.3295997Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3296174Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3296297Z E          ...
2025-01-10T13:49:05.3296439Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3296660Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3296839Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3296954Z E          ...
2025-01-10T13:49:05.3297088Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3297299Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3297463Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3297470Z 
2025-01-10T13:49:05.3297602Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3297919Z ________ TestPlasma.test_plasma_properties[excitation:lte-beta_sobolev] ________
2025-01-10T13:49:05.3297926Z 
2025-01-10T13:49:05.3298125Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3298332Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3298488Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3298900Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3299091Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3299239Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3299356Z err_msg = None
2025-01-10T13:49:05.3299362Z 
2025-01-10T13:49:05.3299530Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3299658Z         if err_msg is None:
2025-01-10T13:49:05.3299798Z             if left.shape != right.shape:
2025-01-10T13:49:05.3299931Z                 raise_assert_detail(
2025-01-10T13:49:05.3300156Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3300268Z                 )
2025-01-10T13:49:05.3300371Z     
2025-01-10T13:49:05.3300655Z             diff = 0
2025-01-10T13:49:05.3300824Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3300966Z                 # count up differences
2025-01-10T13:49:05.3301231Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3301350Z                     diff += 1
2025-01-10T13:49:05.3301451Z     
2025-01-10T13:49:05.3301588Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3301809Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3302113Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3302319Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3302444Z E           
2025-01-10T13:49:05.3302644Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3303137Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3303801Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3303816Z 
2025-01-10T13:49:05.3304403Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3304414Z 
2025-01-10T13:49:05.3304727Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3304736Z 
2025-01-10T13:49:05.3305160Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a51c10>
2025-01-10T13:49:05.3305473Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>
2025-01-10T13:49:05.3305614Z attr = 'beta_sobolev'
2025-01-10T13:49:05.3305621Z 
2025-01-10T13:49:05.3305853Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3306042Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3306179Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3306289Z         try:
2025-01-10T13:49:05.3306530Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3306656Z         except KeyError:
2025-01-10T13:49:05.3306888Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3306996Z     
2025-01-10T13:49:05.3307139Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3307288Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3307438Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3307653Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3307803Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3307943Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3308342Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3308462Z             else:
2025-01-10T13:49:05.3308608Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3308782Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3308788Z 
2025-01-10T13:49:05.3308989Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3309181Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3309411Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3309519Z     ???
2025-01-10T13:49:05.3309690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3309696Z 
2025-01-10T13:49:05.3309803Z >   ???
2025-01-10T13:49:05.3309998Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3310278Z E   
2025-01-10T13:49:05.3310480Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3310664Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3310781Z E          ...
2025-01-10T13:49:05.3310912Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3311117Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3311288Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3311401Z E          ...
2025-01-10T13:49:05.3311531Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3311734Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3311892Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3311900Z 
2025-01-10T13:49:05.3312038Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3312343Z __________ TestPlasma.test_plasma_properties[excitation:lte-j_blues] ___________
2025-01-10T13:49:05.3312357Z 
2025-01-10T13:49:05.3312566Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3312777Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3312923Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3313133Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3313324Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3313467Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3313581Z err_msg = None
2025-01-10T13:49:05.3313587Z 
2025-01-10T13:49:05.3313934Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3314082Z         if err_msg is None:
2025-01-10T13:49:05.3314252Z             if left.shape != right.shape:
2025-01-10T13:49:05.3314407Z                 raise_assert_detail(
2025-01-10T13:49:05.3314677Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3314817Z                 )
2025-01-10T13:49:05.3314930Z     
2025-01-10T13:49:05.3315062Z             diff = 0
2025-01-10T13:49:05.3315258Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3315416Z                 # count up differences
2025-01-10T13:49:05.3315727Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3315861Z                     diff += 1
2025-01-10T13:49:05.3315980Z     
2025-01-10T13:49:05.3316138Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3316378Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3316698Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3316902Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3317043Z E           
2025-01-10T13:49:05.3317242Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3317880Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3318343Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3318352Z 
2025-01-10T13:49:05.3318883Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3318899Z 
2025-01-10T13:49:05.3319356Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3319372Z 
2025-01-10T13:49:05.3319758Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a514f0>
2025-01-10T13:49:05.3320040Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc5ee4aa0>
2025-01-10T13:49:05.3320164Z attr = 'j_blues'
2025-01-10T13:49:05.3320170Z 
2025-01-10T13:49:05.3320403Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3320595Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3320724Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3320840Z         try:
2025-01-10T13:49:05.3321058Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3321184Z         except KeyError:
2025-01-10T13:49:05.3321399Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3321499Z     
2025-01-10T13:49:05.3321633Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3321785Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3321922Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3322136Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3322268Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3322406Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3322581Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3322687Z             else:
2025-01-10T13:49:05.3322837Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3323000Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3323008Z 
2025-01-10T13:49:05.3323207Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3323391Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3323775Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3323893Z     ???
2025-01-10T13:49:05.3324071Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3324084Z 
2025-01-10T13:49:05.3324191Z >   ???
2025-01-10T13:49:05.3324384Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3324491Z E   
2025-01-10T13:49:05.3324690Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3324861Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3324965Z E          ...
2025-01-10T13:49:05.3325098Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3325293Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3325470Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3325588Z E          ...
2025-01-10T13:49:05.3325735Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3325959Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3326146Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3326163Z 
2025-01-10T13:49:05.3326320Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3326899Z ________ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines] ________
2025-01-10T13:49:05.3326910Z 
2025-01-10T13:49:05.3327146Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3327377Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3327547Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3327792Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3328016Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3328182Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3328311Z err_msg = None
2025-01-10T13:49:05.3328320Z 
2025-01-10T13:49:05.3328727Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3328869Z         if err_msg is None:
2025-01-10T13:49:05.3329113Z             if left.shape != right.shape:
2025-01-10T13:49:05.3329258Z                 raise_assert_detail(
2025-01-10T13:49:05.3329511Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3329623Z                 )
2025-01-10T13:49:05.3329733Z     
2025-01-10T13:49:05.3329844Z             diff = 0
2025-01-10T13:49:05.3330028Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3330169Z                 # count up differences
2025-01-10T13:49:05.3330466Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3330593Z                     diff += 1
2025-01-10T13:49:05.3330700Z     
2025-01-10T13:49:05.3330844Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3331067Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3331378Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3331572Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3331691Z E           
2025-01-10T13:49:05.3331871Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3332333Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3332784Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3332799Z 
2025-01-10T13:49:05.3333314Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3333331Z 
2025-01-10T13:49:05.3333790Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3333802Z 
2025-01-10T13:49:05.3334172Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a51fd0>
2025-01-10T13:49:05.3334447Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>
2025-01-10T13:49:05.3334568Z attr = 'lines'
2025-01-10T13:49:05.3334575Z 
2025-01-10T13:49:05.3334789Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3334974Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3335101Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3335213Z         try:
2025-01-10T13:49:05.3335434Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3335568Z         except KeyError:
2025-01-10T13:49:05.3335784Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3336080Z     
2025-01-10T13:49:05.3336211Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3336360Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3336492Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3336709Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3336842Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3336979Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3337151Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3337258Z             else:
2025-01-10T13:49:05.3337408Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3337567Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3337574Z 
2025-01-10T13:49:05.3337777Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3338193Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3338482Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3338600Z     ???
2025-01-10T13:49:05.3338807Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3338816Z 
2025-01-10T13:49:05.3338939Z >   ???
2025-01-10T13:49:05.3339167Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3339292Z E   
2025-01-10T13:49:05.3339526Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3339729Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3339852Z E          ...
2025-01-10T13:49:05.3340010Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3340240Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3340439Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3340552Z E          ...
2025-01-10T13:49:05.3340701Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3340915Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3341091Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3341099Z 
2025-01-10T13:49:05.3341246Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3341640Z _ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_lower_level_index] _
2025-01-10T13:49:05.3341648Z 
2025-01-10T13:49:05.3342040Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a53260>
2025-01-10T13:49:05.3342324Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>
2025-01-10T13:49:05.3342473Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3342480Z 
2025-01-10T13:49:05.3342703Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3342894Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3343023Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3343146Z         try:
2025-01-10T13:49:05.3343378Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3343518Z         except KeyError:
2025-01-10T13:49:05.3343899Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3344019Z     
2025-01-10T13:49:05.3344160Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3344302Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3344440Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3344645Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3344776Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3344912Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3345090Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3345098Z 
2025-01-10T13:49:05.3345294Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3345475Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3345488Z 
2025-01-10T13:49:05.3345913Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3346047Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3346214Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3346332Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3346559Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3346682Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3346847Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3346962Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3347080Z err_msg = None
2025-01-10T13:49:05.3347086Z 
2025-01-10T13:49:05.3347253Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3347378Z         if err_msg is None:
2025-01-10T13:49:05.3347692Z             if left.shape != right.shape:
2025-01-10T13:49:05.3347823Z                 raise_assert_detail(
2025-01-10T13:49:05.3348056Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3348160Z                 )
2025-01-10T13:49:05.3348265Z     
2025-01-10T13:49:05.3348370Z             diff = 0
2025-01-10T13:49:05.3348547Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3348687Z                 # count up differences
2025-01-10T13:49:05.3349000Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3349137Z                     diff += 1
2025-01-10T13:49:05.3349259Z     
2025-01-10T13:49:05.3349406Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3349655Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3349967Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3350167Z E           AssertionError: Series are different
2025-01-10T13:49:05.3350291Z E           
2025-01-10T13:49:05.3350477Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3351191Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3351777Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3352370Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3352387Z 
2025-01-10T13:49:05.3352928Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3353323Z _ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_upper_level_index] _
2025-01-10T13:49:05.3353332Z 
2025-01-10T13:49:05.3353872Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a52750>
2025-01-10T13:49:05.3354156Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>
2025-01-10T13:49:05.3354307Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3354321Z 
2025-01-10T13:49:05.3354545Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3354928Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3355066Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3355174Z         try:
2025-01-10T13:49:05.3355401Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3355518Z         except KeyError:
2025-01-10T13:49:05.3355732Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3355833Z     
2025-01-10T13:49:05.3355971Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3356113Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3356253Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3356462Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3356598Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3356736Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3357078Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3357093Z 
2025-01-10T13:49:05.3357297Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3357472Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3357478Z 
2025-01-10T13:49:05.3357694Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3357819Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3357987Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3358106Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3358331Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3358451Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3358618Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3358739Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3358859Z err_msg = None
2025-01-10T13:49:05.3358866Z 
2025-01-10T13:49:05.3359037Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3359154Z         if err_msg is None:
2025-01-10T13:49:05.3359297Z             if left.shape != right.shape:
2025-01-10T13:49:05.3359420Z                 raise_assert_detail(
2025-01-10T13:49:05.3359650Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3359768Z                 )
2025-01-10T13:49:05.3359892Z     
2025-01-10T13:49:05.3360017Z             diff = 0
2025-01-10T13:49:05.3360225Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3360378Z                 # count up differences
2025-01-10T13:49:05.3360693Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3360832Z                     diff += 1
2025-01-10T13:49:05.3360947Z     
2025-01-10T13:49:05.3361101Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3361350Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3361675Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3361859Z E           AssertionError: Series are different
2025-01-10T13:49:05.3361988Z E           
2025-01-10T13:49:05.3362168Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3362882Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3363555Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3364555Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3364568Z 
2025-01-10T13:49:05.3365108Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3365451Z _________ TestPlasma.test_plasma_properties[excitation:dilute-lte-nu] __________
2025-01-10T13:49:05.3365622Z 
2025-01-10T13:49:05.3365843Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3366067Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3366221Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3366442Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3366644Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3366795Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3366907Z err_msg = None
2025-01-10T13:49:05.3366920Z 
2025-01-10T13:49:05.3367085Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3367211Z         if err_msg is None:
2025-01-10T13:49:05.3367345Z             if left.shape != right.shape:
2025-01-10T13:49:05.3367483Z                 raise_assert_detail(
2025-01-10T13:49:05.3367705Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3367823Z                 )
2025-01-10T13:49:05.3367924Z     
2025-01-10T13:49:05.3368040Z             diff = 0
2025-01-10T13:49:05.3368210Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3368347Z                 # count up differences
2025-01-10T13:49:05.3368615Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3368737Z                     diff += 1
2025-01-10T13:49:05.3368838Z     
2025-01-10T13:49:05.3368975Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3369184Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3369465Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3369641Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3369759Z E           
2025-01-10T13:49:05.3369935Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3370369Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3370802Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3370811Z 
2025-01-10T13:49:05.3371314Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3371338Z 
2025-01-10T13:49:05.3371638Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3371819Z 
2025-01-10T13:49:05.3372257Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a50a10>
2025-01-10T13:49:05.3372638Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>, attr = 'nu'
2025-01-10T13:49:05.3372646Z 
2025-01-10T13:49:05.3372898Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3373113Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3373261Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3373389Z         try:
2025-01-10T13:49:05.3373804Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3373954Z         except KeyError:
2025-01-10T13:49:05.3374212Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3374341Z     
2025-01-10T13:49:05.3374495Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3374907Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3375059Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3375300Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3375436Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3375582Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3375761Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3375768Z 
2025-01-10T13:49:05.3375984Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3376175Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3376417Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3376534Z     ???
2025-01-10T13:49:05.3376715Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3376722Z 
2025-01-10T13:49:05.3376833Z >   ???
2025-01-10T13:49:05.3377046Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3377169Z E   
2025-01-10T13:49:05.3377384Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3377580Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3377688Z E          ...
2025-01-10T13:49:05.3377836Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3378047Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3378232Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3378345Z E          ...
2025-01-10T13:49:05.3378478Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3378688Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3378847Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3378854Z 
2025-01-10T13:49:05.3378994Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3379324Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-wavelength_cm] ____
2025-01-10T13:49:05.3379337Z 
2025-01-10T13:49:05.3379542Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3379751Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3379903Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3380120Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3380315Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3380463Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3380575Z err_msg = None
2025-01-10T13:49:05.3380581Z 
2025-01-10T13:49:05.3380756Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3380876Z         if err_msg is None:
2025-01-10T13:49:05.3381024Z             if left.shape != right.shape:
2025-01-10T13:49:05.3381150Z                 raise_assert_detail(
2025-01-10T13:49:05.3381387Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3381669Z                 )
2025-01-10T13:49:05.3381779Z     
2025-01-10T13:49:05.3381886Z             diff = 0
2025-01-10T13:49:05.3382064Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3382201Z                 # count up differences
2025-01-10T13:49:05.3382469Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3382589Z                     diff += 1
2025-01-10T13:49:05.3382690Z     
2025-01-10T13:49:05.3382825Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3383031Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3383327Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3383527Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3384053Z E           
2025-01-10T13:49:05.3384252Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3384765Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3385263Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3385273Z 
2025-01-10T13:49:05.3385851Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3385861Z 
2025-01-10T13:49:05.3386187Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3386204Z 
2025-01-10T13:49:05.3386619Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a50860>
2025-01-10T13:49:05.3386911Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>
2025-01-10T13:49:05.3387045Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3387051Z 
2025-01-10T13:49:05.3387273Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3387468Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3387603Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3387719Z         try:
2025-01-10T13:49:05.3387958Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3388091Z         except KeyError:
2025-01-10T13:49:05.3388320Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3388442Z     
2025-01-10T13:49:05.3402867Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3403111Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3403256Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3403501Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3403829Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3403989Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3404172Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3404188Z 
2025-01-10T13:49:05.3404396Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3404584Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3404823Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3404936Z     ???
2025-01-10T13:49:05.3405110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3405118Z 
2025-01-10T13:49:05.3405225Z >   ???
2025-01-10T13:49:05.3405427Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3405544Z E   
2025-01-10T13:49:05.3405979Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3406165Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3406272Z E          ...
2025-01-10T13:49:05.3406418Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3406630Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3406814Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3406945Z E          ...
2025-01-10T13:49:05.3407098Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3407334Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3407524Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3407533Z 
2025-01-10T13:49:05.3407694Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3408068Z ________ TestPlasma.test_plasma_properties[excitation:dilute-lte-f_lu] _________
2025-01-10T13:49:05.3408275Z 
2025-01-10T13:49:05.3408520Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3408767Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3408943Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3409195Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3409422Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3409592Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3409724Z err_msg = None
2025-01-10T13:49:05.3409731Z 
2025-01-10T13:49:05.3409939Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3410083Z         if err_msg is None:
2025-01-10T13:49:05.3410257Z             if left.shape != right.shape:
2025-01-10T13:49:05.3410407Z                 raise_assert_detail(
2025-01-10T13:49:05.3410662Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3410781Z                 )
2025-01-10T13:49:05.3410895Z     
2025-01-10T13:49:05.3411015Z             diff = 0
2025-01-10T13:49:05.3411198Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3411346Z                 # count up differences
2025-01-10T13:49:05.3411637Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3411770Z                     diff += 1
2025-01-10T13:49:05.3411879Z     
2025-01-10T13:49:05.3412024Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3412255Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3412551Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3412736Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3412856Z E           
2025-01-10T13:49:05.3413032Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3413495Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3414334Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3414365Z 
2025-01-10T13:49:05.3414759Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3414778Z 
2025-01-10T13:49:05.3414988Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3415218Z 
2025-01-10T13:49:05.3415487Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a50a40>
2025-01-10T13:49:05.3415722Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>, attr = 'f_lu'
2025-01-10T13:49:05.3415726Z 
2025-01-10T13:49:05.3415889Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3416020Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3416117Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3416195Z         try:
2025-01-10T13:49:05.3416360Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3416448Z         except KeyError:
2025-01-10T13:49:05.3416608Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3416683Z     
2025-01-10T13:49:05.3416783Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3417011Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3417115Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3417274Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3417369Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3417473Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3417594Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3417598Z 
2025-01-10T13:49:05.3417744Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3417871Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3418039Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3418115Z     ???
2025-01-10T13:49:05.3418244Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3418249Z 
2025-01-10T13:49:05.3418324Z >   ???
2025-01-10T13:49:05.3418470Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3418562Z E   
2025-01-10T13:49:05.3418704Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3418836Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3418913Z E          ...
2025-01-10T13:49:05.3419014Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3419155Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3419285Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3419363Z E          ...
2025-01-10T13:49:05.3419459Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3419594Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3419711Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3419716Z 
2025-01-10T13:49:05.3419811Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3420050Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-tau_sobolevs] _____
2025-01-10T13:49:05.3420058Z 
2025-01-10T13:49:05.3420205Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3420355Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3420464Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3420610Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3420754Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3420852Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3420938Z err_msg = None
2025-01-10T13:49:05.3420942Z 
2025-01-10T13:49:05.3421069Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3421154Z         if err_msg is None:
2025-01-10T13:49:05.3421267Z             if left.shape != right.shape:
2025-01-10T13:49:05.3421361Z                 raise_assert_detail(
2025-01-10T13:49:05.3421523Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3421731Z                 )
2025-01-10T13:49:05.3421805Z     
2025-01-10T13:49:05.3421888Z             diff = 0
2025-01-10T13:49:05.3422010Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3422107Z                 # count up differences
2025-01-10T13:49:05.3422306Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3422392Z                     diff += 1
2025-01-10T13:49:05.3422465Z     
2025-01-10T13:49:05.3422563Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3422711Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3422908Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3423031Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3423199Z E           
2025-01-10T13:49:05.3423321Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3423828Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3424146Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3424152Z 
2025-01-10T13:49:05.3424507Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3424523Z 
2025-01-10T13:49:05.3424714Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3424727Z 
2025-01-10T13:49:05.3424986Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a97c80>
2025-01-10T13:49:05.3425170Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>
2025-01-10T13:49:05.3425259Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.3425264Z 
2025-01-10T13:49:05.3425413Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3425541Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3425629Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3425710Z         try:
2025-01-10T13:49:05.3425865Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3425956Z         except KeyError:
2025-01-10T13:49:05.3426105Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3426185Z     
2025-01-10T13:49:05.3426282Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3426389Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3426496Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3426638Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3426730Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3426823Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3426945Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3427024Z             else:
2025-01-10T13:49:05.3427132Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3427246Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3427251Z 
2025-01-10T13:49:05.3427391Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3427514Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3427700Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3427842Z     ???
2025-01-10T13:49:05.3428061Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3428255Z 
2025-01-10T13:49:05.3428388Z >   ???
2025-01-10T13:49:05.3428608Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3428728Z E   
2025-01-10T13:49:05.3428941Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3429125Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3429246Z E          ...
2025-01-10T13:49:05.3429371Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3429512Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3429638Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3429713Z E          ...
2025-01-10T13:49:05.3429807Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3429946Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3430189Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3430194Z 
2025-01-10T13:49:05.3430301Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3430533Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-beta_sobolev] _____
2025-01-10T13:49:05.3430538Z 
2025-01-10T13:49:05.3430682Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3430820Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3430927Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3431072Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3431213Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3431315Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3431395Z err_msg = None
2025-01-10T13:49:05.3431404Z 
2025-01-10T13:49:05.3431526Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3431616Z         if err_msg is None:
2025-01-10T13:49:05.3431723Z             if left.shape != right.shape:
2025-01-10T13:49:05.3431813Z                 raise_assert_detail(
2025-01-10T13:49:05.3431985Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3432061Z                 )
2025-01-10T13:49:05.3432139Z     
2025-01-10T13:49:05.3432217Z             diff = 0
2025-01-10T13:49:05.3432340Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3432432Z                 # count up differences
2025-01-10T13:49:05.3432626Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3432712Z                     diff += 1
2025-01-10T13:49:05.3432786Z     
2025-01-10T13:49:05.3432879Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3433014Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3433189Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3433306Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3433378Z E           
2025-01-10T13:49:05.3433482Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3433924Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3434196Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3434207Z 
2025-01-10T13:49:05.3434525Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3434650Z 
2025-01-10T13:49:05.3434828Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3434833Z 
2025-01-10T13:49:05.3435059Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a952e0>
2025-01-10T13:49:05.3435231Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>
2025-01-10T13:49:05.3435314Z attr = 'beta_sobolev'
2025-01-10T13:49:05.3435318Z 
2025-01-10T13:49:05.3435453Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3435571Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3435649Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3435720Z         try:
2025-01-10T13:49:05.3435856Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3436044Z         except KeyError:
2025-01-10T13:49:05.3436183Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3436257Z     
2025-01-10T13:49:05.3436337Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3436431Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3436514Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3436648Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3436730Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3436819Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3436927Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3436994Z             else:
2025-01-10T13:49:05.3437087Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3437188Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3437193Z 
2025-01-10T13:49:05.3437325Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3437440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3437595Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3437660Z     ???
2025-01-10T13:49:05.3437772Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3437776Z 
2025-01-10T13:49:05.3437840Z >   ???
2025-01-10T13:49:05.3437969Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3438039Z E   
2025-01-10T13:49:05.3438160Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3438272Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3438340Z E          ...
2025-01-10T13:49:05.3438427Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3438549Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3438660Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3438731Z E          ...
2025-01-10T13:49:05.3438816Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3438941Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3439046Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3439050Z 
2025-01-10T13:49:05.3439132Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3439335Z _______ TestPlasma.test_plasma_properties[excitation:dilute-lte-j_blues] _______
2025-01-10T13:49:05.3439339Z 
2025-01-10T13:49:05.3439467Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3439592Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3439689Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3439816Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3439938Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3440150Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3440223Z err_msg = None
2025-01-10T13:49:05.3440227Z 
2025-01-10T13:49:05.3440334Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3440415Z         if err_msg is None:
2025-01-10T13:49:05.3440514Z             if left.shape != right.shape:
2025-01-10T13:49:05.3440591Z                 raise_assert_detail(
2025-01-10T13:49:05.3440740Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3440807Z                 )
2025-01-10T13:49:05.3440876Z     
2025-01-10T13:49:05.3440942Z             diff = 0
2025-01-10T13:49:05.3441053Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3441136Z                 # count up differences
2025-01-10T13:49:05.3441306Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3441455Z                     diff += 1
2025-01-10T13:49:05.3441523Z     
2025-01-10T13:49:05.3441611Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3441747Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3441912Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3442025Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3442095Z E           
2025-01-10T13:49:05.3442210Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3442472Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3442731Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3442751Z 
2025-01-10T13:49:05.3443052Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3443057Z 
2025-01-10T13:49:05.3443225Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3443229Z 
2025-01-10T13:49:05.3443449Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a971a0>
2025-01-10T13:49:05.3443733Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcb1f54f0>
2025-01-10T13:49:05.3443806Z attr = 'j_blues'
2025-01-10T13:49:05.3443810Z 
2025-01-10T13:49:05.3443945Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3444055Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3444145Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3444223Z         try:
2025-01-10T13:49:05.3444356Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3444435Z         except KeyError:
2025-01-10T13:49:05.3444567Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3444636Z     
2025-01-10T13:49:05.3444715Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3444809Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3444894Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3445026Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3445109Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3445199Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3445303Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3445375Z             else:
2025-01-10T13:49:05.3445464Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3445573Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3445719Z 
2025-01-10T13:49:05.3445849Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3445957Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3446105Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3446170Z     ???
2025-01-10T13:49:05.3446278Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3446283Z 
2025-01-10T13:49:05.3446347Z >   ???
2025-01-10T13:49:05.3446482Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3446565Z E   
2025-01-10T13:49:05.3446794Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3446982Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3447108Z E          ...
2025-01-10T13:49:05.3447252Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3447529Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3447651Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3447719Z E          ...
2025-01-10T13:49:05.3447803Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3447922Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3448028Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3448032Z 
2025-01-10T13:49:05.3448117Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3448363Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines] _
2025-01-10T13:49:05.3448368Z 
2025-01-10T13:49:05.3448493Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3448618Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3448720Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3448847Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3448973Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3449060Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3449135Z err_msg = None
2025-01-10T13:49:05.3449139Z 
2025-01-10T13:49:05.3449245Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3449327Z         if err_msg is None:
2025-01-10T13:49:05.3449417Z             if left.shape != right.shape:
2025-01-10T13:49:05.3449501Z                 raise_assert_detail(
2025-01-10T13:49:05.3449641Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3449716Z                 )
2025-01-10T13:49:05.3449785Z     
2025-01-10T13:49:05.3449854Z             diff = 0
2025-01-10T13:49:05.3449974Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3450062Z                 # count up differences
2025-01-10T13:49:05.3450242Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3450318Z                     diff += 1
2025-01-10T13:49:05.3450387Z     
2025-01-10T13:49:05.3450473Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3450614Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3450786Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3450902Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3450970Z E           
2025-01-10T13:49:05.3451084Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3451346Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3451876Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3451889Z 
2025-01-10T13:49:05.3452389Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3452398Z 
2025-01-10T13:49:05.3452569Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3452578Z 
2025-01-10T13:49:05.3452802Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a96960>
2025-01-10T13:49:05.3452971Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>
2025-01-10T13:49:05.3453145Z attr = 'lines'
2025-01-10T13:49:05.3453149Z 
2025-01-10T13:49:05.3453298Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3453413Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3453499Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3453564Z         try:
2025-01-10T13:49:05.3453857Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3453936Z         except KeyError:
2025-01-10T13:49:05.3454078Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3454145Z     
2025-01-10T13:49:05.3454233Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3454328Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3454413Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3454545Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3454625Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3454719Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3454824Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3454900Z             else:
2025-01-10T13:49:05.3454993Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3455101Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3455106Z 
2025-01-10T13:49:05.3455228Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3455350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3455492Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3455563Z     ???
2025-01-10T13:49:05.3455674Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3455679Z 
2025-01-10T13:49:05.3455742Z >   ???
2025-01-10T13:49:05.3455877Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3455941Z E   
2025-01-10T13:49:05.3456074Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3456181Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3456261Z E          ...
2025-01-10T13:49:05.3456344Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3456476Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3456584Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3456659Z E          ...
2025-01-10T13:49:05.3456738Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3456862Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3456968Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3456973Z 
2025-01-10T13:49:05.3457058Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3457358Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index] _
2025-01-10T13:49:05.3457363Z 
2025-01-10T13:49:05.3457586Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a963f0>
2025-01-10T13:49:05.3457881Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>
2025-01-10T13:49:05.3457965Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3457970Z 
2025-01-10T13:49:05.3458106Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3458215Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3458303Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3458374Z         try:
2025-01-10T13:49:05.3458511Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3458592Z         except KeyError:
2025-01-10T13:49:05.3458726Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3458797Z     
2025-01-10T13:49:05.3458879Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3458973Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3459057Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3459302Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3459390Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3459481Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3459585Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3459589Z 
2025-01-10T13:49:05.3459716Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3459824Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3459834Z 
2025-01-10T13:49:05.3459972Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3460058Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3460162Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3460246Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3460383Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3460469Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3460572Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3460651Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3460722Z err_msg = None
2025-01-10T13:49:05.3460726Z 
2025-01-10T13:49:05.3460839Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3460921Z         if err_msg is None:
2025-01-10T13:49:05.3461013Z             if left.shape != right.shape:
2025-01-10T13:49:05.3461101Z                 raise_assert_detail(
2025-01-10T13:49:05.3461246Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3461317Z                 )
2025-01-10T13:49:05.3461381Z     
2025-01-10T13:49:05.3461457Z             diff = 0
2025-01-10T13:49:05.3461564Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3461655Z                 # count up differences
2025-01-10T13:49:05.3461825Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3461910Z                     diff += 1
2025-01-10T13:49:05.3461974Z     
2025-01-10T13:49:05.3462061Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3462201Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3462372Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3462478Z E           AssertionError: Series are different
2025-01-10T13:49:05.3462546Z E           
2025-01-10T13:49:05.3462649Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3463017Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3463444Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3463877Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3463884Z 
2025-01-10T13:49:05.3464195Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3464631Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index] _
2025-01-10T13:49:05.3464637Z 
2025-01-10T13:49:05.3464863Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a96ab0>
2025-01-10T13:49:05.3465033Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>
2025-01-10T13:49:05.3465196Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3465205Z 
2025-01-10T13:49:05.3465444Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3465650Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3465785Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3465902Z         try:
2025-01-10T13:49:05.3466135Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3466267Z         except KeyError:
2025-01-10T13:49:05.3466501Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3466608Z     
2025-01-10T13:49:05.3466699Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3466794Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3466878Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3467012Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3467096Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3467181Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3467290Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3467296Z 
2025-01-10T13:49:05.3467414Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3467524Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3467528Z 
2025-01-10T13:49:05.3467658Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3467743Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3467850Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3467934Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3468072Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3468150Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3468254Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3468327Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3468402Z err_msg = None
2025-01-10T13:49:05.3468406Z 
2025-01-10T13:49:05.3468513Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3468594Z         if err_msg is None:
2025-01-10T13:49:05.3468686Z             if left.shape != right.shape:
2025-01-10T13:49:05.3468772Z                 raise_assert_detail(
2025-01-10T13:49:05.3468912Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3468989Z                 )
2025-01-10T13:49:05.3469052Z     
2025-01-10T13:49:05.3469266Z             diff = 0
2025-01-10T13:49:05.3469379Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3469460Z                 # count up differences
2025-01-10T13:49:05.3469629Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3469701Z                     diff += 1
2025-01-10T13:49:05.3469773Z     
2025-01-10T13:49:05.3469853Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3469987Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3470155Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3470259Z E           AssertionError: Series are different
2025-01-10T13:49:05.3470326Z E           
2025-01-10T13:49:05.3470427Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3470793Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3471292Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3471668Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3471685Z 
2025-01-10T13:49:05.3471991Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3472217Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu] _
2025-01-10T13:49:05.3472222Z 
2025-01-10T13:49:05.3472350Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3472473Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3472569Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3472697Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3472821Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3472918Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3472989Z err_msg = None
2025-01-10T13:49:05.3472993Z 
2025-01-10T13:49:05.3473099Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3473175Z         if err_msg is None:
2025-01-10T13:49:05.3473268Z             if left.shape != right.shape:
2025-01-10T13:49:05.3473390Z                 raise_assert_detail(
2025-01-10T13:49:05.3473535Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3473752Z                 )
2025-01-10T13:49:05.3473822Z     
2025-01-10T13:49:05.3473890Z             diff = 0
2025-01-10T13:49:05.3474002Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3474083Z                 # count up differences
2025-01-10T13:49:05.3474252Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3474462Z                     diff += 1
2025-01-10T13:49:05.3474527Z     
2025-01-10T13:49:05.3474615Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3474744Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3474914Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3475023Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3475094Z E           
2025-01-10T13:49:05.3475198Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3475462Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3475829Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3475845Z 
2025-01-10T13:49:05.3476138Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3476143Z 
2025-01-10T13:49:05.3476314Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3476319Z 
2025-01-10T13:49:05.3476537Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a97110>
2025-01-10T13:49:05.3476735Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>, attr = 'nu'
2025-01-10T13:49:05.3476740Z 
2025-01-10T13:49:05.3476876Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3476991Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3477077Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3477142Z         try:
2025-01-10T13:49:05.3477286Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3477361Z         except KeyError:
2025-01-10T13:49:05.3477497Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3477561Z     
2025-01-10T13:49:05.3477649Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3477739Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3477827Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3477955Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3478042Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3478130Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3478240Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3478244Z 
2025-01-10T13:49:05.3478376Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3478485Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3478639Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3478705Z     ???
2025-01-10T13:49:05.3478818Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3478823Z 
2025-01-10T13:49:05.3478886Z >   ???
2025-01-10T13:49:05.3479015Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3479078Z E   
2025-01-10T13:49:05.3479209Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3479319Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3479392Z E          ...
2025-01-10T13:49:05.3479480Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3479606Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3479723Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3479792Z E          ...
2025-01-10T13:49:05.3479966Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3480084Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3480188Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3480193Z 
2025-01-10T13:49:05.3480277Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3480552Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm] _
2025-01-10T13:49:05.3480558Z 
2025-01-10T13:49:05.3480680Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3480804Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3480900Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3481029Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3481252Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3481342Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3481417Z err_msg = None
2025-01-10T13:49:05.3481421Z 
2025-01-10T13:49:05.3481526Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3481606Z         if err_msg is None:
2025-01-10T13:49:05.3481695Z             if left.shape != right.shape:
2025-01-10T13:49:05.3481778Z                 raise_assert_detail(
2025-01-10T13:49:05.3481918Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3481989Z                 )
2025-01-10T13:49:05.3482058Z     
2025-01-10T13:49:05.3482126Z             diff = 0
2025-01-10T13:49:05.3482235Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3482320Z                 # count up differences
2025-01-10T13:49:05.3482497Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3482573Z                     diff += 1
2025-01-10T13:49:05.3482643Z     
2025-01-10T13:49:05.3482725Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3482861Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3483027Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3483138Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3483205Z E           
2025-01-10T13:49:05.3483314Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3483590Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3484212Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3484232Z 
2025-01-10T13:49:05.3484618Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3484625Z 
2025-01-10T13:49:05.3484793Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3484798Z 
2025-01-10T13:49:05.3485014Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a94e60>
2025-01-10T13:49:05.3485182Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>
2025-01-10T13:49:05.3485258Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3485263Z 
2025-01-10T13:49:05.3485399Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3485513Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3485751Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3485818Z         try:
2025-01-10T13:49:05.3485960Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3486035Z         except KeyError:
2025-01-10T13:49:05.3486173Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3486241Z     
2025-01-10T13:49:05.3486322Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3486417Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3486502Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3486635Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3486714Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3486803Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3486910Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3487042Z 
2025-01-10T13:49:05.3487170Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3487284Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3487432Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3487496Z     ???
2025-01-10T13:49:05.3487609Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3487614Z 
2025-01-10T13:49:05.3487683Z >   ???
2025-01-10T13:49:05.3487804Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3487872Z E   
2025-01-10T13:49:05.3487992Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3488104Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3488171Z E          ...
2025-01-10T13:49:05.3488262Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3488385Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3488501Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3488573Z E          ...
2025-01-10T13:49:05.3488657Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3488781Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3488890Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3488894Z 
2025-01-10T13:49:05.3488981Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3489215Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu] _
2025-01-10T13:49:05.3489221Z 
2025-01-10T13:49:05.3489350Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3489471Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3489566Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3489692Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3489818Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3489911Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3489987Z err_msg = None
2025-01-10T13:49:05.3489991Z 
2025-01-10T13:49:05.3490101Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3490177Z         if err_msg is None:
2025-01-10T13:49:05.3490270Z             if left.shape != right.shape:
2025-01-10T13:49:05.3490348Z                 raise_assert_detail(
2025-01-10T13:49:05.3490494Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3490561Z                 )
2025-01-10T13:49:05.3490630Z     
2025-01-10T13:49:05.3490698Z             diff = 0
2025-01-10T13:49:05.3490809Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3490891Z                 # count up differences
2025-01-10T13:49:05.3491065Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3491229Z                     diff += 1
2025-01-10T13:49:05.3491298Z     
2025-01-10T13:49:05.3491379Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3491515Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3491685Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3491792Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3491862Z E           
2025-01-10T13:49:05.3491966Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3492237Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3492572Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3492588Z 
2025-01-10T13:49:05.3492887Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3492892Z 
2025-01-10T13:49:05.3493058Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3493063Z 
2025-01-10T13:49:05.3493280Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a974a0>
2025-01-10T13:49:05.3493481Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>, attr = 'f_lu'
2025-01-10T13:49:05.3493485Z 
2025-01-10T13:49:05.3493761Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3493885Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3493976Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3494042Z         try:
2025-01-10T13:49:05.3494181Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3494256Z         except KeyError:
2025-01-10T13:49:05.3494396Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3494460Z     
2025-01-10T13:49:05.3494550Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3494639Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3494727Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3494851Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3494936Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3495020Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3495130Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3495138Z 
2025-01-10T13:49:05.3495262Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3495374Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3495522Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3495587Z     ???
2025-01-10T13:49:05.3495696Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3495700Z 
2025-01-10T13:49:05.3495764Z >   ???
2025-01-10T13:49:05.3495890Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3495954Z E   
2025-01-10T13:49:05.3496078Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3496183Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3496256Z E          ...
2025-01-10T13:49:05.3496338Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3496464Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3496580Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3496767Z E          ...
2025-01-10T13:49:05.3496853Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3496972Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3497075Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3497079Z 
2025-01-10T13:49:05.3497161Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3497431Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs] _
2025-01-10T13:49:05.3497436Z 
2025-01-10T13:49:05.3497559Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3497686Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3497779Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3497905Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3498134Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3498227Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3498302Z err_msg = None
2025-01-10T13:49:05.3498306Z 
2025-01-10T13:49:05.3498409Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3498490Z         if err_msg is None:
2025-01-10T13:49:05.3498578Z             if left.shape != right.shape:
2025-01-10T13:49:05.3498664Z                 raise_assert_detail(
2025-01-10T13:49:05.3498805Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3498876Z                 )
2025-01-10T13:49:05.3498940Z     
2025-01-10T13:49:05.3499013Z             diff = 0
2025-01-10T13:49:05.3499124Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3499205Z                 # count up differences
2025-01-10T13:49:05.3499378Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3499455Z                     diff += 1
2025-01-10T13:49:05.3499525Z     
2025-01-10T13:49:05.3499607Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3499741Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3499905Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3500019Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3500085Z E           
2025-01-10T13:49:05.3500193Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3500454Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3500720Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3500730Z 
2025-01-10T13:49:05.3501028Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3501033Z 
2025-01-10T13:49:05.3501195Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3501204Z 
2025-01-10T13:49:05.3501419Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a94530>
2025-01-10T13:49:05.3501585Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>
2025-01-10T13:49:05.3501659Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.3501663Z 
2025-01-10T13:49:05.3501804Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3502001Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3502087Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3502154Z         try:
2025-01-10T13:49:05.3502383Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3502523Z         except KeyError:
2025-01-10T13:49:05.3502769Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3502882Z     
2025-01-10T13:49:05.3503027Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3503177Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3503322Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3503545Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3503813Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3503941Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3504051Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3504263Z             else:
2025-01-10T13:49:05.3504361Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3504470Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3504475Z 
2025-01-10T13:49:05.3504594Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3504710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3504852Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3504924Z     ???
2025-01-10T13:49:05.3505033Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3505038Z 
2025-01-10T13:49:05.3505101Z >   ???
2025-01-10T13:49:05.3505228Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3505293Z E   
2025-01-10T13:49:05.3505417Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3505523Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3505602Z E          ...
2025-01-10T13:49:05.3505687Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3505815Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3505922Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3505991Z E          ...
2025-01-10T13:49:05.3506071Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3506198Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3506302Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3506306Z 
2025-01-10T13:49:05.3506388Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3506660Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev] _
2025-01-10T13:49:05.3506665Z 
2025-01-10T13:49:05.3506788Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3506918Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3507011Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3507146Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3507262Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3507359Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3507434Z err_msg = None
2025-01-10T13:49:05.3507438Z 
2025-01-10T13:49:05.3507543Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3507623Z         if err_msg is None:
2025-01-10T13:49:05.3507712Z             if left.shape != right.shape:
2025-01-10T13:49:05.3507795Z                 raise_assert_detail(
2025-01-10T13:49:05.3507936Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3508012Z                 )
2025-01-10T13:49:05.3508075Z     
2025-01-10T13:49:05.3508149Z             diff = 0
2025-01-10T13:49:05.3508396Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3508484Z                 # count up differences
2025-01-10T13:49:05.3508648Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3508727Z                     diff += 1
2025-01-10T13:49:05.3508797Z     
2025-01-10T13:49:05.3508882Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3509019Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3509186Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3509296Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3509367Z E           
2025-01-10T13:49:05.3509477Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3509733Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3510078Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3510084Z 
2025-01-10T13:49:05.3510380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3510385Z 
2025-01-10T13:49:05.3510547Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3510552Z 
2025-01-10T13:49:05.3510772Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a94a10>
2025-01-10T13:49:05.3510938Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>
2025-01-10T13:49:05.3511019Z attr = 'beta_sobolev'
2025-01-10T13:49:05.3511023Z 
2025-01-10T13:49:05.3511159Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3511268Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3511352Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3511419Z         try:
2025-01-10T13:49:05.3511557Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3511634Z         except KeyError:
2025-01-10T13:49:05.3511773Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3511837Z     
2025-01-10T13:49:05.3511922Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3512010Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3512098Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3512227Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3512317Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3512402Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3512510Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3512582Z             else:
2025-01-10T13:49:05.3512670Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3512776Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3512780Z 
2025-01-10T13:49:05.3512904Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3513017Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3513157Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3513227Z     ???
2025-01-10T13:49:05.3513332Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3513337Z 
2025-01-10T13:49:05.3513409Z >   ???
2025-01-10T13:49:05.3513530Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3513839Z E   
2025-01-10T13:49:05.3513963Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3514073Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3514146Z E          ...
2025-01-10T13:49:05.3514226Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3514353Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3514460Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3514532Z E          ...
2025-01-10T13:49:05.3514610Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3514734Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3514833Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3514837Z 
2025-01-10T13:49:05.3514927Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3515289Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues] _
2025-01-10T13:49:05.3515306Z 
2025-01-10T13:49:05.3515429Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3515555Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3515643Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3515776Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3515895Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3515987Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3516058Z err_msg = None
2025-01-10T13:49:05.3516062Z 
2025-01-10T13:49:05.3516171Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3516247Z         if err_msg is None:
2025-01-10T13:49:05.3516345Z             if left.shape != right.shape:
2025-01-10T13:49:05.3516430Z                 raise_assert_detail(
2025-01-10T13:49:05.3516571Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3516642Z                 )
2025-01-10T13:49:05.3516709Z     
2025-01-10T13:49:05.3516781Z             diff = 0
2025-01-10T13:49:05.3516886Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3516973Z                 # count up differences
2025-01-10T13:49:05.3517137Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3517214Z                     diff += 1
2025-01-10T13:49:05.3517278Z     
2025-01-10T13:49:05.3517366Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3517497Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3517666Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3517775Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3517849Z E           
2025-01-10T13:49:05.3517965Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3518223Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3518484Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3518489Z 
2025-01-10T13:49:05.3518783Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3518800Z 
2025-01-10T13:49:05.3519085Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3519091Z 
2025-01-10T13:49:05.3519312Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a94380>
2025-01-10T13:49:05.3519473Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf23849b0>
2025-01-10T13:49:05.3519549Z attr = 'j_blues'
2025-01-10T13:49:05.3519553Z 
2025-01-10T13:49:05.3519682Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3519795Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3519872Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3519944Z         try:
2025-01-10T13:49:05.3520076Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3520158Z         except KeyError:
2025-01-10T13:49:05.3520295Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3520435Z     
2025-01-10T13:49:05.3520522Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3520618Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3520707Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3520831Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3520921Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3521005Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3521117Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3521244Z             else:
2025-01-10T13:49:05.3521411Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3521593Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3521601Z 
2025-01-10T13:49:05.3521816Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3522009Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3522252Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3522384Z     ???
2025-01-10T13:49:05.3522564Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3522578Z 
2025-01-10T13:49:05.3522692Z >   ???
2025-01-10T13:49:05.3522866Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3522937Z E   
2025-01-10T13:49:05.3523067Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3523179Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3523245Z E          ...
2025-01-10T13:49:05.3523335Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3523458Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3523572Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3523752Z E          ...
2025-01-10T13:49:05.3523836Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3523964Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3524067Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3524076Z 
2025-01-10T13:49:05.3524165Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3524370Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines] ____
2025-01-10T13:49:05.3524374Z 
2025-01-10T13:49:05.3524501Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3524623Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3524719Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3524849Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3524972Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3525062Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3525135Z err_msg = None
2025-01-10T13:49:05.3525140Z 
2025-01-10T13:49:05.3525255Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3525507Z         if err_msg is None:
2025-01-10T13:49:05.3525603Z             if left.shape != right.shape:
2025-01-10T13:49:05.3525683Z                 raise_assert_detail(
2025-01-10T13:49:05.3525829Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3525895Z                 )
2025-01-10T13:49:05.3525965Z     
2025-01-10T13:49:05.3526033Z             diff = 0
2025-01-10T13:49:05.3526144Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3526231Z                 # count up differences
2025-01-10T13:49:05.3526397Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3526476Z                     diff += 1
2025-01-10T13:49:05.3526540Z     
2025-01-10T13:49:05.3526628Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3526869Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3527046Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3527153Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3527225Z E           
2025-01-10T13:49:05.3527329Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3527592Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3527855Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3527870Z 
2025-01-10T13:49:05.3528170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3528175Z 
2025-01-10T13:49:05.3528343Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3528347Z 
2025-01-10T13:49:05.3528568Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a94aa0>
2025-01-10T13:49:05.3528735Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>
2025-01-10T13:49:05.3528809Z attr = 'lines'
2025-01-10T13:49:05.3528814Z 
2025-01-10T13:49:05.3528944Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3529061Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3529139Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3529211Z         try:
2025-01-10T13:49:05.3529344Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3529429Z         except KeyError:
2025-01-10T13:49:05.3529567Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3529642Z     
2025-01-10T13:49:05.3529725Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3529819Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3529904Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3530039Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3530125Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3530211Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3530320Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3530387Z             else:
2025-01-10T13:49:05.3530481Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3530581Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3530586Z 
2025-01-10T13:49:05.3530720Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3530828Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3531082Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3531147Z     ???
2025-01-10T13:49:05.3531256Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3531261Z 
2025-01-10T13:49:05.3531329Z >   ???
2025-01-10T13:49:05.3531452Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3531522Z E   
2025-01-10T13:49:05.3531643Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3531756Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3531824Z E          ...
2025-01-10T13:49:05.3531910Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3532032Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3532145Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3532292Z E          ...
2025-01-10T13:49:05.3532390Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3532506Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3532608Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3532612Z 
2025-01-10T13:49:05.3532700Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3532950Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index] _
2025-01-10T13:49:05.3532955Z 
2025-01-10T13:49:05.3533177Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a94ef0>
2025-01-10T13:49:05.3533339Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>
2025-01-10T13:49:05.3533425Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3533431Z 
2025-01-10T13:49:05.3533560Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3533800Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3533886Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3533964Z         try:
2025-01-10T13:49:05.3534098Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3534178Z         except KeyError:
2025-01-10T13:49:05.3534317Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3534380Z     
2025-01-10T13:49:05.3534469Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3534556Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3534644Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3534769Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3534852Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3534938Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3535045Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3535050Z 
2025-01-10T13:49:05.3535168Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3535285Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3535294Z 
2025-01-10T13:49:05.3535429Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3535508Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3535616Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3535693Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3535833Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3535910Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3536013Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3536086Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3536161Z err_msg = None
2025-01-10T13:49:05.3536165Z 
2025-01-10T13:49:05.3536270Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3536356Z         if err_msg is None:
2025-01-10T13:49:05.3536570Z             if left.shape != right.shape:
2025-01-10T13:49:05.3536655Z                 raise_assert_detail(
2025-01-10T13:49:05.3536797Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3536863Z                 )
2025-01-10T13:49:05.3536931Z     
2025-01-10T13:49:05.3536999Z             diff = 0
2025-01-10T13:49:05.3537110Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3537193Z                 # count up differences
2025-01-10T13:49:05.3537361Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3537432Z                     diff += 1
2025-01-10T13:49:05.3537501Z     
2025-01-10T13:49:05.3537582Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3537716Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3537991Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3538102Z E           AssertionError: Series are different
2025-01-10T13:49:05.3538178Z E           
2025-01-10T13:49:05.3538276Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3538736Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3539349Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3539707Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3539713Z 
2025-01-10T13:49:05.3540026Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3540276Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index] _
2025-01-10T13:49:05.3540281Z 
2025-01-10T13:49:05.3540505Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a94350>
2025-01-10T13:49:05.3540666Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>
2025-01-10T13:49:05.3540763Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3540772Z 
2025-01-10T13:49:05.3540909Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3541019Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3541101Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3541167Z         try:
2025-01-10T13:49:05.3541305Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3541381Z         except KeyError:
2025-01-10T13:49:05.3541518Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3541581Z     
2025-01-10T13:49:05.3541667Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3541756Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3541843Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3541972Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3542060Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3542153Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3542360Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3542365Z 
2025-01-10T13:49:05.3542490Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3542598Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3542602Z 
2025-01-10T13:49:05.3542737Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3542818Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3542924Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3542999Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3543138Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3543215Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3543320Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3543475Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3543553Z err_msg = None
2025-01-10T13:49:05.3543559Z 
2025-01-10T13:49:05.3543778Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3543857Z         if err_msg is None:
2025-01-10T13:49:05.3543950Z             if left.shape != right.shape:
2025-01-10T13:49:05.3544030Z                 raise_assert_detail(
2025-01-10T13:49:05.3544171Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3544236Z                 )
2025-01-10T13:49:05.3544305Z     
2025-01-10T13:49:05.3544371Z             diff = 0
2025-01-10T13:49:05.3544483Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3544566Z                 # count up differences
2025-01-10T13:49:05.3544735Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3544812Z                     diff += 1
2025-01-10T13:49:05.3544881Z     
2025-01-10T13:49:05.3544966Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3545099Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3545270Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3545369Z E           AssertionError: Series are different
2025-01-10T13:49:05.3545443Z E           
2025-01-10T13:49:05.3545542Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3545912Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3546287Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3546667Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3546678Z 
2025-01-10T13:49:05.3546976Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3547183Z _____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-nu] ______
2025-01-10T13:49:05.3547310Z 
2025-01-10T13:49:05.3547436Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3547562Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3547654Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3547785Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3547902Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3547998Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3548073Z err_msg = None
2025-01-10T13:49:05.3548077Z 
2025-01-10T13:49:05.3548179Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3548260Z         if err_msg is None:
2025-01-10T13:49:05.3548478Z             if left.shape != right.shape:
2025-01-10T13:49:05.3548572Z                 raise_assert_detail(
2025-01-10T13:49:05.3548713Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3548783Z                 )
2025-01-10T13:49:05.3548847Z     
2025-01-10T13:49:05.3548919Z             diff = 0
2025-01-10T13:49:05.3549028Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3549114Z                 # count up differences
2025-01-10T13:49:05.3549279Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3549355Z                     diff += 1
2025-01-10T13:49:05.3549419Z     
2025-01-10T13:49:05.3549506Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3549638Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3549805Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3549923Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3549994Z E           
2025-01-10T13:49:05.3550105Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3550362Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3550626Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3550633Z 
2025-01-10T13:49:05.3550930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3550938Z 
2025-01-10T13:49:05.3551107Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3551112Z 
2025-01-10T13:49:05.3551334Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a95550>
2025-01-10T13:49:05.3551528Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>, attr = 'nu'
2025-01-10T13:49:05.3551532Z 
2025-01-10T13:49:05.3551670Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3551786Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3551865Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3551938Z         try:
2025-01-10T13:49:05.3552075Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3552156Z         except KeyError:
2025-01-10T13:49:05.3552288Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3552361Z     
2025-01-10T13:49:05.3552451Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3552546Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3552722Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3552857Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3552939Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3553035Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3553147Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3553157Z 
2025-01-10T13:49:05.3553280Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3553400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3553546Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3553813Z     ???
2025-01-10T13:49:05.3553943Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3553948Z 
2025-01-10T13:49:05.3554155Z >   ???
2025-01-10T13:49:05.3554284Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3554360Z E   
2025-01-10T13:49:05.3554486Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3554600Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3554667Z E          ...
2025-01-10T13:49:05.3554758Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3554884Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3554996Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3555068Z E          ...
2025-01-10T13:49:05.3555151Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3555278Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3555380Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3555384Z 
2025-01-10T13:49:05.3555474Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3555699Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-wavelength_cm] _
2025-01-10T13:49:05.3555708Z 
2025-01-10T13:49:05.3555843Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3555975Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3556078Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3556210Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3556332Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3556426Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3556496Z err_msg = None
2025-01-10T13:49:05.3556500Z 
2025-01-10T13:49:05.3556612Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3556691Z         if err_msg is None:
2025-01-10T13:49:05.3556792Z             if left.shape != right.shape:
2025-01-10T13:49:05.3556872Z                 raise_assert_detail(
2025-01-10T13:49:05.3557023Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3557090Z                 )
2025-01-10T13:49:05.3557160Z     
2025-01-10T13:49:05.3557227Z             diff = 0
2025-01-10T13:49:05.3557341Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3557430Z                 # count up differences
2025-01-10T13:49:05.3557597Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3557677Z                     diff += 1
2025-01-10T13:49:05.3557742Z     
2025-01-10T13:49:05.3557833Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3557970Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3558143Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3558256Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3558461Z E           
2025-01-10T13:49:05.3558572Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3558839Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3559107Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3559113Z 
2025-01-10T13:49:05.3559409Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3559487Z 
2025-01-10T13:49:05.3559669Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3559675Z 
2025-01-10T13:49:05.3559957Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a94c50>
2025-01-10T13:49:05.3560264Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>
2025-01-10T13:49:05.3560405Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3560413Z 
2025-01-10T13:49:05.3560651Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3560850Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3560983Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3561103Z         try:
2025-01-10T13:49:05.3561338Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3561477Z         except KeyError:
2025-01-10T13:49:05.3561705Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3561836Z     
2025-01-10T13:49:05.3561977Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3562143Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3562291Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3562520Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3562665Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3562810Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3562996Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3563004Z 
2025-01-10T13:49:05.3563211Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3563405Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3563751Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3563830Z     ???
2025-01-10T13:49:05.3563940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3563951Z 
2025-01-10T13:49:05.3564022Z >   ???
2025-01-10T13:49:05.3564151Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3564225Z E   
2025-01-10T13:49:05.3564356Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3564464Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3564537Z E          ...
2025-01-10T13:49:05.3564620Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3564749Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3564857Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3564929Z E          ...
2025-01-10T13:49:05.3565010Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3565133Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3565235Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3565239Z 
2025-01-10T13:49:05.3565332Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3565536Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-f_lu] _____
2025-01-10T13:49:05.3565691Z 
2025-01-10T13:49:05.3565820Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3565951Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3566044Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3566175Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3566297Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3566389Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3566461Z err_msg = None
2025-01-10T13:49:05.3566465Z 
2025-01-10T13:49:05.3566577Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3566658Z         if err_msg is None:
2025-01-10T13:49:05.3566854Z             if left.shape != right.shape:
2025-01-10T13:49:05.3566944Z                 raise_assert_detail(
2025-01-10T13:49:05.3567086Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3567157Z                 )
2025-01-10T13:49:05.3567226Z     
2025-01-10T13:49:05.3567299Z             diff = 0
2025-01-10T13:49:05.3567407Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3567495Z                 # count up differences
2025-01-10T13:49:05.3567662Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3567740Z                     diff += 1
2025-01-10T13:49:05.3567805Z     
2025-01-10T13:49:05.3567895Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3568027Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3568199Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3568317Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3568392Z E           
2025-01-10T13:49:05.3568503Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3568763Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3569026Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3569031Z 
2025-01-10T13:49:05.3569339Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3569351Z 
2025-01-10T13:49:05.3569516Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3569520Z 
2025-01-10T13:49:05.3569745Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a949e0>
2025-01-10T13:49:05.3569943Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>, attr = 'f_lu'
2025-01-10T13:49:05.3569949Z 
2025-01-10T13:49:05.3570086Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3570196Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3570281Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3570346Z         try:
2025-01-10T13:49:05.3570487Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3570569Z         except KeyError:
2025-01-10T13:49:05.3570704Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3570779Z     
2025-01-10T13:49:05.3570860Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3571051Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3571136Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3571275Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3571355Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3571446Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3571551Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3571557Z 
2025-01-10T13:49:05.3571688Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3571796Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3571940Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3572011Z     ???
2025-01-10T13:49:05.3572116Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3572228Z 
2025-01-10T13:49:05.3572300Z >   ???
2025-01-10T13:49:05.3572433Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3572512Z E   
2025-01-10T13:49:05.3572636Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3572748Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3572818Z E          ...
2025-01-10T13:49:05.3572910Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3573034Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3573152Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3573220Z E          ...
2025-01-10T13:49:05.3573308Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3573477Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3573578Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3573582Z 
2025-01-10T13:49:05.3573870Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3574111Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs] _
2025-01-10T13:49:05.3574121Z 
2025-01-10T13:49:05.3574257Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3574383Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3574486Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3574617Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3574744Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3574840Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3574913Z err_msg = None
2025-01-10T13:49:05.3574917Z 
2025-01-10T13:49:05.3575030Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3575107Z         if err_msg is None:
2025-01-10T13:49:05.3575205Z             if left.shape != right.shape:
2025-01-10T13:49:05.3575289Z                 raise_assert_detail(
2025-01-10T13:49:05.3575435Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3575503Z                 )
2025-01-10T13:49:05.3575574Z     
2025-01-10T13:49:05.3575643Z             diff = 0
2025-01-10T13:49:05.3575756Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3575838Z                 # count up differences
2025-01-10T13:49:05.3576013Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3585069Z                     diff += 1
2025-01-10T13:49:05.3585235Z     
2025-01-10T13:49:05.3585409Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3585669Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3585980Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3586193Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3586525Z E           
2025-01-10T13:49:05.3586727Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3587193Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3587668Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3587677Z 
2025-01-10T13:49:05.3588232Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3588394Z 
2025-01-10T13:49:05.3588692Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3588709Z 
2025-01-10T13:49:05.3588993Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a944d0>
2025-01-10T13:49:05.3589179Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>
2025-01-10T13:49:05.3589258Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.3589262Z 
2025-01-10T13:49:05.3589413Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3589532Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3589621Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3589693Z         try:
2025-01-10T13:49:05.3589843Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3589920Z         except KeyError:
2025-01-10T13:49:05.3590072Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3590145Z     
2025-01-10T13:49:05.3590237Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3590340Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3590430Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3590579Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3590665Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3590760Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3590871Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3590945Z             else:
2025-01-10T13:49:05.3591035Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3591149Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3591154Z 
2025-01-10T13:49:05.3591279Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3591402Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3591556Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3591634Z     ???
2025-01-10T13:49:05.3591746Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3591751Z 
2025-01-10T13:49:05.3591816Z >   ???
2025-01-10T13:49:05.3591948Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3592015Z E   
2025-01-10T13:49:05.3592144Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3592252Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3592325Z E          ...
2025-01-10T13:49:05.3592412Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3592546Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3592654Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3592727Z E          ...
2025-01-10T13:49:05.3592809Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3592940Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3593175Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3593181Z 
2025-01-10T13:49:05.3593269Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3593491Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-beta_sobolev] _
2025-01-10T13:49:05.3593496Z 
2025-01-10T13:49:05.3593740Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3593882Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3593979Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3594119Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3594244Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3594339Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3594536Z err_msg = None
2025-01-10T13:49:05.3594547Z 
2025-01-10T13:49:05.3594659Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3594743Z         if err_msg is None:
2025-01-10T13:49:05.3594835Z             if left.shape != right.shape:
2025-01-10T13:49:05.3594921Z                 raise_assert_detail(
2025-01-10T13:49:05.3595067Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3595147Z                 )
2025-01-10T13:49:05.3595212Z     
2025-01-10T13:49:05.3595286Z             diff = 0
2025-01-10T13:49:05.3595392Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3595484Z                 # count up differences
2025-01-10T13:49:05.3595653Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3595733Z                     diff += 1
2025-01-10T13:49:05.3595803Z     
2025-01-10T13:49:05.3595891Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3596040Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3596218Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3596337Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3596405Z E           
2025-01-10T13:49:05.3596519Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3596787Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3597055Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3597068Z 
2025-01-10T13:49:05.3597383Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3597388Z 
2025-01-10T13:49:05.3597556Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3597561Z 
2025-01-10T13:49:05.3597791Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a97950>
2025-01-10T13:49:05.3597956Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>
2025-01-10T13:49:05.3598039Z attr = 'beta_sobolev'
2025-01-10T13:49:05.3598043Z 
2025-01-10T13:49:05.3598183Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3598301Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3598386Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3598459Z         try:
2025-01-10T13:49:05.3598603Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3598804Z         except KeyError:
2025-01-10T13:49:05.3598944Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3599009Z     
2025-01-10T13:49:05.3599097Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3599188Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3599279Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3599411Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3599498Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3599583Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3599693Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3599763Z             else:
2025-01-10T13:49:05.3599860Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3599963Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3600050Z 
2025-01-10T13:49:05.3600177Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3600300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3600443Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3600515Z     ???
2025-01-10T13:49:05.3600621Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3600625Z 
2025-01-10T13:49:05.3600694Z >   ???
2025-01-10T13:49:05.3600819Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3600891Z E   
2025-01-10T13:49:05.3601014Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3601127Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3601195Z E          ...
2025-01-10T13:49:05.3601287Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3601419Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3601533Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3601609Z E          ...
2025-01-10T13:49:05.3601690Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3601813Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3601914Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3601919Z 
2025-01-10T13:49:05.3602008Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3602347Z ___ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-j_blues] ___
2025-01-10T13:49:05.3602357Z 
2025-01-10T13:49:05.3602589Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3602802Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3602967Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3603193Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3603406Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3603566Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3603830Z err_msg = None
2025-01-10T13:49:05.3603842Z 
2025-01-10T13:49:05.3603978Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3604056Z         if err_msg is None:
2025-01-10T13:49:05.3604152Z             if left.shape != right.shape:
2025-01-10T13:49:05.3604231Z                 raise_assert_detail(
2025-01-10T13:49:05.3604374Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3604446Z                 )
2025-01-10T13:49:05.3604512Z     
2025-01-10T13:49:05.3604590Z             diff = 0
2025-01-10T13:49:05.3604701Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3604792Z                 # count up differences
2025-01-10T13:49:05.3604963Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3605207Z                     diff += 1
2025-01-10T13:49:05.3605271Z     
2025-01-10T13:49:05.3605360Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3605495Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3605666Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3605777Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3605852Z E           
2025-01-10T13:49:05.3605960Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3606225Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3606607Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3606620Z 
2025-01-10T13:49:05.3606925Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3606930Z 
2025-01-10T13:49:05.3607106Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3607112Z 
2025-01-10T13:49:05.3607337Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8cb30>
2025-01-10T13:49:05.3607502Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bd00d1970>
2025-01-10T13:49:05.3607579Z attr = 'j_blues'
2025-01-10T13:49:05.3607583Z 
2025-01-10T13:49:05.3607721Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3607841Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3607926Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3608000Z         try:
2025-01-10T13:49:05.3608138Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3608219Z         except KeyError:
2025-01-10T13:49:05.3608355Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3608425Z     
2025-01-10T13:49:05.3608507Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3608603Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3608694Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3608824Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3608909Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3608993Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3609104Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3609177Z             else:
2025-01-10T13:49:05.3609275Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3609386Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3609391Z 
2025-01-10T13:49:05.3609520Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3609631Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3609780Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3609852Z     ???
2025-01-10T13:49:05.3609958Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3609963Z 
2025-01-10T13:49:05.3610033Z >   ???
2025-01-10T13:49:05.3610162Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3610232Z E   
2025-01-10T13:49:05.3610354Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3610464Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3610538Z E          ...
2025-01-10T13:49:05.3610628Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3610849Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3610963Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3611030Z E          ...
2025-01-10T13:49:05.3611116Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3611237Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3611343Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3611347Z 
2025-01-10T13:49:05.3611438Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3611639Z ___ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines] ____
2025-01-10T13:49:05.3611643Z 
2025-01-10T13:49:05.3611771Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3611894Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3612079Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3612209Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3612331Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3612427Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3612498Z err_msg = None
2025-01-10T13:49:05.3612502Z 
2025-01-10T13:49:05.3612613Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3612691Z         if err_msg is None:
2025-01-10T13:49:05.3612786Z             if left.shape != right.shape:
2025-01-10T13:49:05.3612865Z                 raise_assert_detail(
2025-01-10T13:49:05.3613014Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3613081Z                 )
2025-01-10T13:49:05.3613155Z     
2025-01-10T13:49:05.3613223Z             diff = 0
2025-01-10T13:49:05.3613334Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3613423Z                 # count up differences
2025-01-10T13:49:05.3613753Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3613875Z                     diff += 1
2025-01-10T13:49:05.3613946Z     
2025-01-10T13:49:05.3614036Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3614168Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3614339Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3614447Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3614520Z E           
2025-01-10T13:49:05.3614626Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3614887Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3615158Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3615169Z 
2025-01-10T13:49:05.3615467Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3615472Z 
2025-01-10T13:49:05.3615641Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3615645Z 
2025-01-10T13:49:05.3615863Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8dbb0>
2025-01-10T13:49:05.3616033Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>
2025-01-10T13:49:05.3616235Z attr = 'lines'
2025-01-10T13:49:05.3616244Z 
2025-01-10T13:49:05.3616376Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3616493Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3616573Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3616645Z         try:
2025-01-10T13:49:05.3616780Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3616862Z         except KeyError:
2025-01-10T13:49:05.3616999Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3617070Z     
2025-01-10T13:49:05.3617154Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3617248Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3617333Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3617467Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3617654Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3617753Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3617863Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3617932Z             else:
2025-01-10T13:49:05.3618026Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3618127Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3618132Z 
2025-01-10T13:49:05.3618260Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3618368Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3618515Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3618581Z     ???
2025-01-10T13:49:05.3618690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3618694Z 
2025-01-10T13:49:05.3618759Z >   ???
2025-01-10T13:49:05.3618885Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3618957Z E   
2025-01-10T13:49:05.3619087Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3619205Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3619273Z E          ...
2025-01-10T13:49:05.3619364Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3619489Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3619603Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3619670Z E          ...
2025-01-10T13:49:05.3619762Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3619881Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3619985Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3619990Z 
2025-01-10T13:49:05.3620073Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3620334Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index] _
2025-01-10T13:49:05.3620343Z 
2025-01-10T13:49:05.3620567Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8d850>
2025-01-10T13:49:05.3620734Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>
2025-01-10T13:49:05.3620823Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3620829Z 
2025-01-10T13:49:05.3620958Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3621072Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3621151Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3621222Z         try:
2025-01-10T13:49:05.3621355Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3621439Z         except KeyError:
2025-01-10T13:49:05.3621572Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3621643Z     
2025-01-10T13:49:05.3621775Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3621945Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3622107Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3622462Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3622608Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3622755Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3622936Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3622943Z 
2025-01-10T13:49:05.3623143Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3623333Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3623339Z 
2025-01-10T13:49:05.3623475Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3623562Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3623809Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3623888Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3624163Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3624247Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3624355Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3624429Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3624505Z err_msg = None
2025-01-10T13:49:05.3624509Z 
2025-01-10T13:49:05.3624613Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3624695Z         if err_msg is None:
2025-01-10T13:49:05.3624784Z             if left.shape != right.shape:
2025-01-10T13:49:05.3624869Z                 raise_assert_detail(
2025-01-10T13:49:05.3625007Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3625079Z                 )
2025-01-10T13:49:05.3625149Z     
2025-01-10T13:49:05.3625218Z             diff = 0
2025-01-10T13:49:05.3625330Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3625418Z                 # count up differences
2025-01-10T13:49:05.3625591Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3625664Z                     diff += 1
2025-01-10T13:49:05.3625734Z     
2025-01-10T13:49:05.3625817Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3625953Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3626119Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3626224Z E           AssertionError: Series are different
2025-01-10T13:49:05.3626291Z E           
2025-01-10T13:49:05.3626397Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3626766Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3627111Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3627451Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3627461Z 
2025-01-10T13:49:05.3627765Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3628153Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index] _
2025-01-10T13:49:05.3628159Z 
2025-01-10T13:49:05.3628376Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8ed20>
2025-01-10T13:49:05.3628537Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>
2025-01-10T13:49:05.3628629Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3628633Z 
2025-01-10T13:49:05.3628764Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3628879Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3628965Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3629032Z         try:
2025-01-10T13:49:05.3629176Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3629335Z         except KeyError:
2025-01-10T13:49:05.3629475Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3629546Z     
2025-01-10T13:49:05.3629633Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3629722Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3629813Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3629942Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3630028Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3630112Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3630221Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3630226Z 
2025-01-10T13:49:05.3630352Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3630461Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3630466Z 
2025-01-10T13:49:05.3630600Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3630687Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3630798Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3630874Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3631015Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3631093Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3631196Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3631270Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3631349Z err_msg = None
2025-01-10T13:49:05.3631353Z 
2025-01-10T13:49:05.3631465Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3631542Z         if err_msg is None:
2025-01-10T13:49:05.3631635Z             if left.shape != right.shape:
2025-01-10T13:49:05.3631715Z                 raise_assert_detail(
2025-01-10T13:49:05.3631857Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3631931Z                 )
2025-01-10T13:49:05.3632004Z     
2025-01-10T13:49:05.3632072Z             diff = 0
2025-01-10T13:49:05.3632180Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3632261Z                 # count up differences
2025-01-10T13:49:05.3632435Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3632508Z                     diff += 1
2025-01-10T13:49:05.3632582Z     
2025-01-10T13:49:05.3632665Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3632800Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3632969Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3633069Z E           AssertionError: Series are different
2025-01-10T13:49:05.3633142Z E           
2025-01-10T13:49:05.3633239Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3633714Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3634210Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3634592Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3634704Z 
2025-01-10T13:49:05.3635008Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3635205Z _____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-nu] _____
2025-01-10T13:49:05.3635214Z 
2025-01-10T13:49:05.3635334Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3635461Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3635553Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3635688Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3635812Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3635904Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3635975Z err_msg = None
2025-01-10T13:49:05.3635980Z 
2025-01-10T13:49:05.3636086Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3636168Z         if err_msg is None:
2025-01-10T13:49:05.3636257Z             if left.shape != right.shape:
2025-01-10T13:49:05.3636340Z                 raise_assert_detail(
2025-01-10T13:49:05.3636478Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3636551Z                 )
2025-01-10T13:49:05.3636615Z     
2025-01-10T13:49:05.3636688Z             diff = 0
2025-01-10T13:49:05.3636792Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3636879Z                 # count up differences
2025-01-10T13:49:05.3637045Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3637125Z                     diff += 1
2025-01-10T13:49:05.3637189Z     
2025-01-10T13:49:05.3637276Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3637406Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3637574Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3637686Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3637753Z E           
2025-01-10T13:49:05.3637863Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3638123Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3638398Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3638489Z 
2025-01-10T13:49:05.3638790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3638795Z 
2025-01-10T13:49:05.3638958Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3638963Z 
2025-01-10T13:49:05.3639186Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8e030>
2025-01-10T13:49:05.3639401Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>, attr = 'nu'
2025-01-10T13:49:05.3639412Z 
2025-01-10T13:49:05.3639658Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3639977Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3640126Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3640240Z         try:
2025-01-10T13:49:05.3640477Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3640609Z         except KeyError:
2025-01-10T13:49:05.3640843Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3640922Z     
2025-01-10T13:49:05.3641006Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3641103Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3641189Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3641324Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3641405Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3641495Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3641600Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3641610Z 
2025-01-10T13:49:05.3641736Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3641852Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3641999Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3642072Z     ???
2025-01-10T13:49:05.3642177Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3642182Z 
2025-01-10T13:49:05.3642251Z >   ???
2025-01-10T13:49:05.3642375Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3642447Z E   
2025-01-10T13:49:05.3642574Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3642688Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3642756Z E          ...
2025-01-10T13:49:05.3642846Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3642968Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3643087Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3643161Z E          ...
2025-01-10T13:49:05.3643246Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3643369Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3643469Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3643473Z 
2025-01-10T13:49:05.3643563Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3643903Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm] _
2025-01-10T13:49:05.3643909Z 
2025-01-10T13:49:05.3644038Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3644160Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3644255Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3644382Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3644510Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3644738Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3644810Z err_msg = None
2025-01-10T13:49:05.3644814Z 
2025-01-10T13:49:05.3644925Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3645007Z         if err_msg is None:
2025-01-10T13:49:05.3645102Z             if left.shape != right.shape:
2025-01-10T13:49:05.3645182Z                 raise_assert_detail(
2025-01-10T13:49:05.3645326Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3645393Z                 )
2025-01-10T13:49:05.3645464Z     
2025-01-10T13:49:05.3645533Z             diff = 0
2025-01-10T13:49:05.3645644Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3645727Z                 # count up differences
2025-01-10T13:49:05.3646046Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3646132Z                     diff += 1
2025-01-10T13:49:05.3646196Z     
2025-01-10T13:49:05.3646286Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3646415Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3646584Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3646692Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3646764Z E           
2025-01-10T13:49:05.3646870Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3647135Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3647400Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3647415Z 
2025-01-10T13:49:05.3647722Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3647726Z 
2025-01-10T13:49:05.3647896Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3647900Z 
2025-01-10T13:49:05.3648118Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8dd60>
2025-01-10T13:49:05.3648284Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>
2025-01-10T13:49:05.3648366Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3648371Z 
2025-01-10T13:49:05.3648509Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3648630Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3648711Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3648784Z         try:
2025-01-10T13:49:05.3648921Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3649003Z         except KeyError:
2025-01-10T13:49:05.3649138Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3649211Z     
2025-01-10T13:49:05.3649294Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3649390Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3649477Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3649609Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3649690Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3649782Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3649892Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3649905Z 
2025-01-10T13:49:05.3650116Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3650231Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3650373Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3650445Z     ???
2025-01-10T13:49:05.3650549Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3650554Z 
2025-01-10T13:49:05.3650623Z >   ???
2025-01-10T13:49:05.3650747Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3650818Z E   
2025-01-10T13:49:05.3650941Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3651053Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3651127Z E          ...
2025-01-10T13:49:05.3651210Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3651339Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3651528Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3651605Z E          ...
2025-01-10T13:49:05.3651685Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3651809Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3651910Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3651914Z 
2025-01-10T13:49:05.3652007Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3652206Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-f_lu] ____
2025-01-10T13:49:05.3652211Z 
2025-01-10T13:49:05.3652341Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3652471Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3652564Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3652707Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3652829Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3652920Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3652989Z err_msg = None
2025-01-10T13:49:05.3652994Z 
2025-01-10T13:49:05.3653104Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3653182Z         if err_msg is None:
2025-01-10T13:49:05.3653280Z             if left.shape != right.shape:
2025-01-10T13:49:05.3653360Z                 raise_assert_detail(
2025-01-10T13:49:05.3653506Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3653579Z                 )
2025-01-10T13:49:05.3653771Z     
2025-01-10T13:49:05.3653846Z             diff = 0
2025-01-10T13:49:05.3653952Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3654045Z                 # count up differences
2025-01-10T13:49:05.3654210Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3654292Z                     diff += 1
2025-01-10T13:49:05.3654357Z     
2025-01-10T13:49:05.3654448Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3654579Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3654749Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3654858Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3654932Z E           
2025-01-10T13:49:05.3655038Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3655300Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3655567Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3655699Z 
2025-01-10T13:49:05.3655999Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3656009Z 
2025-01-10T13:49:05.3656172Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3656177Z 
2025-01-10T13:49:05.3656401Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8f0e0>
2025-01-10T13:49:05.3656598Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>, attr = 'f_lu'
2025-01-10T13:49:05.3656602Z 
2025-01-10T13:49:05.3656840Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3656949Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3657040Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3657106Z         try:
2025-01-10T13:49:05.3657244Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3657323Z         except KeyError:
2025-01-10T13:49:05.3657462Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3657533Z     
2025-01-10T13:49:05.3657616Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3657711Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3657793Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3657995Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3658144Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3658299Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3658485Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3658502Z 
2025-01-10T13:49:05.3658716Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3658910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3659156Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3659266Z     ???
2025-01-10T13:49:05.3659458Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3659466Z 
2025-01-10T13:49:05.3659542Z >   ???
2025-01-10T13:49:05.3659669Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3659739Z E   
2025-01-10T13:49:05.3659863Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3659974Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3660042Z E          ...
2025-01-10T13:49:05.3660129Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3660252Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3660367Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3660442Z E          ...
2025-01-10T13:49:05.3660526Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3660646Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3660753Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3660758Z 
2025-01-10T13:49:05.3660846Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3661065Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs] _
2025-01-10T13:49:05.3661070Z 
2025-01-10T13:49:05.3661201Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3661322Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3661417Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3661548Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3661787Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3661878Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3661954Z err_msg = None
2025-01-10T13:49:05.3661958Z 
2025-01-10T13:49:05.3662065Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3662142Z         if err_msg is None:
2025-01-10T13:49:05.3662236Z             if left.shape != right.shape:
2025-01-10T13:49:05.3662315Z                 raise_assert_detail(
2025-01-10T13:49:05.3662459Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3662534Z                 )
2025-01-10T13:49:05.3662603Z     
2025-01-10T13:49:05.3662672Z             diff = 0
2025-01-10T13:49:05.3662786Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3662869Z                 # count up differences
2025-01-10T13:49:05.3663118Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3663195Z                     diff += 1
2025-01-10T13:49:05.3663265Z     
2025-01-10T13:49:05.3663349Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3663485Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3663777Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3663887Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3663960Z E           
2025-01-10T13:49:05.3664067Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3664329Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3664597Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3664612Z 
2025-01-10T13:49:05.3664911Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3664916Z 
2025-01-10T13:49:05.3665083Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3665088Z 
2025-01-10T13:49:05.3665306Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8d670>
2025-01-10T13:49:05.3665472Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>
2025-01-10T13:49:05.3665548Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.3665555Z 
2025-01-10T13:49:05.3665691Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3665812Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3665891Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3665965Z         try:
2025-01-10T13:49:05.3666102Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3666184Z         except KeyError:
2025-01-10T13:49:05.3666318Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3666388Z     
2025-01-10T13:49:05.3666470Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3666565Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3666651Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3666782Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3666862Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3666953Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3667062Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3667135Z             else:
2025-01-10T13:49:05.3667360Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3667463Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3667468Z 
2025-01-10T13:49:05.3667593Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3667702Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3667848Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3667914Z     ???
2025-01-10T13:49:05.3668022Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3668027Z 
2025-01-10T13:49:05.3668090Z >   ???
2025-01-10T13:49:05.3668219Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3668285Z E   
2025-01-10T13:49:05.3668418Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3668654Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3668728Z E          ...
2025-01-10T13:49:05.3668825Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3668953Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3669069Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3669137Z E          ...
2025-01-10T13:49:05.3669224Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3669343Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3669450Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3669455Z 
2025-01-10T13:49:05.3669539Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3669765Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev] _
2025-01-10T13:49:05.3669769Z 
2025-01-10T13:49:05.3669895Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3670033Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3670136Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3670264Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3670390Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3670481Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3670558Z err_msg = None
2025-01-10T13:49:05.3670562Z 
2025-01-10T13:49:05.3670669Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3670754Z         if err_msg is None:
2025-01-10T13:49:05.3670847Z             if left.shape != right.shape:
2025-01-10T13:49:05.3670932Z                 raise_assert_detail(
2025-01-10T13:49:05.3671081Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3671154Z                 )
2025-01-10T13:49:05.3671224Z     
2025-01-10T13:49:05.3671293Z             diff = 0
2025-01-10T13:49:05.3671412Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3671495Z                 # count up differences
2025-01-10T13:49:05.3671668Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3671742Z                     diff += 1
2025-01-10T13:49:05.3671811Z     
2025-01-10T13:49:05.3671895Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3672033Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3672201Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3672317Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3672384Z E           
2025-01-10T13:49:05.3672501Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3672773Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3673129Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3673135Z 
2025-01-10T13:49:05.3673466Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3673471Z 
2025-01-10T13:49:05.3673728Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3673733Z 
2025-01-10T13:49:05.3673957Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8fd70>
2025-01-10T13:49:05.3674244Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>
2025-01-10T13:49:05.3674323Z attr = 'beta_sobolev'
2025-01-10T13:49:05.3674327Z 
2025-01-10T13:49:05.3674464Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3674576Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3674662Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3674729Z         try:
2025-01-10T13:49:05.3674872Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3674950Z         except KeyError:
2025-01-10T13:49:05.3675089Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3675159Z     
2025-01-10T13:49:05.3675240Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3675339Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3675424Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3675562Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3675648Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3675740Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3675846Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3675921Z             else:
2025-01-10T13:49:05.3676012Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3676119Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3676123Z 
2025-01-10T13:49:05.3676244Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3676389Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3676654Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3676778Z     ???
2025-01-10T13:49:05.3676974Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3676983Z 
2025-01-10T13:49:05.3677113Z >   ???
2025-01-10T13:49:05.3677267Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3677338Z E   
2025-01-10T13:49:05.3677468Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3677576Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3677651Z E          ...
2025-01-10T13:49:05.3677742Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3677875Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3677990Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3678066Z E          ...
2025-01-10T13:49:05.3678157Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3678281Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3678391Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3678395Z 
2025-01-10T13:49:05.3678487Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3678705Z __ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-j_blues] ___
2025-01-10T13:49:05.3678843Z 
2025-01-10T13:49:05.3678977Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3679112Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3679207Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3679346Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3679477Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3679570Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3679647Z err_msg = None
2025-01-10T13:49:05.3679651Z 
2025-01-10T13:49:05.3679759Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3679843Z         if err_msg is None:
2025-01-10T13:49:05.3680014Z             if left.shape != right.shape:
2025-01-10T13:49:05.3680101Z                 raise_assert_detail(
2025-01-10T13:49:05.3680247Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3680322Z                 )
2025-01-10T13:49:05.3680387Z     
2025-01-10T13:49:05.3680462Z             diff = 0
2025-01-10T13:49:05.3680572Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3680666Z                 # count up differences
2025-01-10T13:49:05.3680842Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3680920Z                     diff += 1
2025-01-10T13:49:05.3680992Z     
2025-01-10T13:49:05.3681080Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3681221Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3681393Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3681511Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3681585Z E           
2025-01-10T13:49:05.3681707Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3681969Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3682239Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3682245Z 
2025-01-10T13:49:05.3682557Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3682565Z 
2025-01-10T13:49:05.3682739Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3682748Z 
2025-01-10T13:49:05.3682974Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8a8e3c0>
2025-01-10T13:49:05.3683139Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc61c0ad0>
2025-01-10T13:49:05.3683223Z attr = 'j_blues'
2025-01-10T13:49:05.3683227Z 
2025-01-10T13:49:05.3683368Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3683484Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3683572Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3683762Z         try:
2025-01-10T13:49:05.3683912Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3683991Z         except KeyError:
2025-01-10T13:49:05.3684131Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3684202Z     
2025-01-10T13:49:05.3684293Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3684386Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3684604Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3684734Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3684824Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3684917Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3685027Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3685107Z             else:
2025-01-10T13:49:05.3685199Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3685311Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3685316Z 
2025-01-10T13:49:05.3685442Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3685559Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3685702Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3685881Z     ???
2025-01-10T13:49:05.3685990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3686002Z 
2025-01-10T13:49:05.3686073Z >   ???
2025-01-10T13:49:05.3686206Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3686273Z E   
2025-01-10T13:49:05.3686403Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3686511Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3686586Z E          ...
2025-01-10T13:49:05.3686673Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3686806Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3686917Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3686991Z E          ...
2025-01-10T13:49:05.3687074Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3687197Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3687307Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3687316Z 
2025-01-10T13:49:05.3687411Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3687644Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines] _
2025-01-10T13:49:05.3687649Z 
2025-01-10T13:49:05.3687776Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3687911Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3688006Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3688143Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3688265Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3688361Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3688439Z err_msg = None
2025-01-10T13:49:05.3688443Z 
2025-01-10T13:49:05.3688557Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3688645Z         if err_msg is None:
2025-01-10T13:49:05.3688739Z             if left.shape != right.shape:
2025-01-10T13:49:05.3688825Z                 raise_assert_detail(
2025-01-10T13:49:05.3688967Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3689040Z                 )
2025-01-10T13:49:05.3689107Z     
2025-01-10T13:49:05.3689182Z             diff = 0
2025-01-10T13:49:05.3689293Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3689384Z                 # count up differences
2025-01-10T13:49:05.3689554Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3689636Z                     diff += 1
2025-01-10T13:49:05.3689704Z     
2025-01-10T13:49:05.3689796Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3689936Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3690221Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3690339Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3690408Z E           
2025-01-10T13:49:05.3690523Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3690783Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3691048Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3691130Z 
2025-01-10T13:49:05.3691436Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3691440Z 
2025-01-10T13:49:05.3691609Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3691614Z 
2025-01-10T13:49:05.3691841Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c1f40>
2025-01-10T13:49:05.3692005Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>
2025-01-10T13:49:05.3692084Z attr = 'lines'
2025-01-10T13:49:05.3692088Z 
2025-01-10T13:49:05.3692220Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3692337Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3692418Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3692492Z         try:
2025-01-10T13:49:05.3692634Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3692719Z         except KeyError:
2025-01-10T13:49:05.3692866Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3692932Z     
2025-01-10T13:49:05.3693020Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3693113Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3693204Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3693332Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3693418Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3693504Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3693752Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3693826Z             else:
2025-01-10T13:49:05.3693923Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3694029Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3694038Z 
2025-01-10T13:49:05.3694170Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3694289Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3694438Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3694511Z     ???
2025-01-10T13:49:05.3694618Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3694623Z 
2025-01-10T13:49:05.3694693Z >   ???
2025-01-10T13:49:05.3694817Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3694890Z E   
2025-01-10T13:49:05.3695104Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3695311Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3695432Z E          ...
2025-01-10T13:49:05.3695586Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3695810Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3695995Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3696131Z E          ...
2025-01-10T13:49:05.3696450Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3696620Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3696725Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3696730Z 
2025-01-10T13:49:05.3696823Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3697102Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index] _
2025-01-10T13:49:05.3697108Z 
2025-01-10T13:49:05.3697329Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c2000>
2025-01-10T13:49:05.3697492Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>
2025-01-10T13:49:05.3697583Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3697587Z 
2025-01-10T13:49:05.3697722Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3697834Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3698035Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3698110Z         try:
2025-01-10T13:49:05.3698251Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3698329Z         except KeyError:
2025-01-10T13:49:05.3698473Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3698541Z     
2025-01-10T13:49:05.3698633Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3698723Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3698815Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3698943Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3699032Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3699124Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3699229Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3699234Z 
2025-01-10T13:49:05.3699359Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3699474Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3699483Z 
2025-01-10T13:49:05.3699621Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3699704Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3699817Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3699897Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3700038Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3700123Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3700227Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3700309Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3700382Z err_msg = None
2025-01-10T13:49:05.3700387Z 
2025-01-10T13:49:05.3700498Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3700579Z         if err_msg is None:
2025-01-10T13:49:05.3700680Z             if left.shape != right.shape:
2025-01-10T13:49:05.3700761Z                 raise_assert_detail(
2025-01-10T13:49:05.3700906Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3700975Z                 )
2025-01-10T13:49:05.3701048Z     
2025-01-10T13:49:05.3701119Z             diff = 0
2025-01-10T13:49:05.3701234Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3701320Z                 # count up differences
2025-01-10T13:49:05.3701494Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3701575Z                     diff += 1
2025-01-10T13:49:05.3701643Z     
2025-01-10T13:49:05.3701732Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3701868Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3702044Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3702260Z E           AssertionError: Series are different
2025-01-10T13:49:05.3702334Z E           
2025-01-10T13:49:05.3702435Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3702809Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3703146Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3703581Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3703592Z 
2025-01-10T13:49:05.3704022Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3704304Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index] _
2025-01-10T13:49:05.3704309Z 
2025-01-10T13:49:05.3704532Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c20c0>
2025-01-10T13:49:05.3704702Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>
2025-01-10T13:49:05.3704794Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3704803Z 
2025-01-10T13:49:05.3704941Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3705054Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3705140Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3705208Z         try:
2025-01-10T13:49:05.3705350Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3705433Z         except KeyError:
2025-01-10T13:49:05.3705567Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3705640Z     
2025-01-10T13:49:05.3705723Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3705819Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3705904Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3706049Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3706135Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3706232Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3706348Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3706354Z 
2025-01-10T13:49:05.3706482Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3706595Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3706605Z 
2025-01-10T13:49:05.3706739Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3706825Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3706930Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3707013Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3707149Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3707235Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3707339Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3707424Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3707622Z err_msg = None
2025-01-10T13:49:05.3707627Z 
2025-01-10T13:49:05.3707743Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3707827Z         if err_msg is None:
2025-01-10T13:49:05.3707920Z             if left.shape != right.shape:
2025-01-10T13:49:05.3708007Z                 raise_assert_detail(
2025-01-10T13:49:05.3708149Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3708224Z                 )
2025-01-10T13:49:05.3708292Z     
2025-01-10T13:49:05.3708367Z             diff = 0
2025-01-10T13:49:05.3708477Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3708569Z                 # count up differences
2025-01-10T13:49:05.3708736Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3708923Z                     diff += 1
2025-01-10T13:49:05.3708989Z     
2025-01-10T13:49:05.3709078Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3709217Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3709390Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3709497Z E           AssertionError: Series are different
2025-01-10T13:49:05.3709566Z E           
2025-01-10T13:49:05.3709672Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3710039Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3710419Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3710803Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3710808Z 
2025-01-10T13:49:05.3711114Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3711334Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-nu] __
2025-01-10T13:49:05.3711343Z 
2025-01-10T13:49:05.3711468Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3711598Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3711697Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3711829Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3711954Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3712052Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3712130Z err_msg = None
2025-01-10T13:49:05.3712136Z 
2025-01-10T13:49:05.3712240Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3712325Z         if err_msg is None:
2025-01-10T13:49:05.3712447Z             if left.shape != right.shape:
2025-01-10T13:49:05.3712784Z                 raise_assert_detail(
2025-01-10T13:49:05.3713029Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3713157Z                 )
2025-01-10T13:49:05.3713285Z     
2025-01-10T13:49:05.3713374Z             diff = 0
2025-01-10T13:49:05.3713492Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3713579Z                 # count up differences
2025-01-10T13:49:05.3713860Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3713936Z                     diff += 1
2025-01-10T13:49:05.3714009Z     
2025-01-10T13:49:05.3714094Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3714230Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3714400Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3714656Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3714732Z E           
2025-01-10T13:49:05.3714851Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3715116Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3715377Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3715383Z 
2025-01-10T13:49:05.3715687Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3715700Z 
2025-01-10T13:49:05.3715872Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3715878Z 
2025-01-10T13:49:05.3716101Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c2300>
2025-01-10T13:49:05.3716303Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>, attr = 'nu'
2025-01-10T13:49:05.3716308Z 
2025-01-10T13:49:05.3716445Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3716565Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3716649Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3716725Z         try:
2025-01-10T13:49:05.3716864Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3716948Z         except KeyError:
2025-01-10T13:49:05.3717086Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3717166Z     
2025-01-10T13:49:05.3717255Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3717356Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3717452Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3717584Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3717672Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3717760Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3717873Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3717877Z 
2025-01-10T13:49:05.3717999Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3718116Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3718260Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3718335Z     ???
2025-01-10T13:49:05.3718441Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3718456Z 
2025-01-10T13:49:05.3718521Z >   ???
2025-01-10T13:49:05.3718651Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3718848Z E   
2025-01-10T13:49:05.3718983Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3719093Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3719168Z E          ...
2025-01-10T13:49:05.3719253Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3719385Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3719496Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3719572Z E          ...
2025-01-10T13:49:05.3719655Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3719783Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3719886Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3719899Z 
2025-01-10T13:49:05.3719986Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3720332Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm] _
2025-01-10T13:49:05.3720343Z 
2025-01-10T13:49:05.3720470Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3720601Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3720695Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3720828Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3720948Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3721045Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3721117Z err_msg = None
2025-01-10T13:49:05.3721125Z 
2025-01-10T13:49:05.3721233Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3721317Z         if err_msg is None:
2025-01-10T13:49:05.3721413Z             if left.shape != right.shape:
2025-01-10T13:49:05.3721504Z                 raise_assert_detail(
2025-01-10T13:49:05.3721644Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3721719Z                 )
2025-01-10T13:49:05.3721787Z     
2025-01-10T13:49:05.3721862Z             diff = 0
2025-01-10T13:49:05.3721970Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3722060Z                 # count up differences
2025-01-10T13:49:05.3722227Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3722309Z                     diff += 1
2025-01-10T13:49:05.3722377Z     
2025-01-10T13:49:05.3722468Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3722608Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3722785Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3722904Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3722980Z E           
2025-01-10T13:49:05.3723095Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3723358Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3723758Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3723765Z 
2025-01-10T13:49:05.3724074Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3724268Z 
2025-01-10T13:49:05.3724438Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3724443Z 
2025-01-10T13:49:05.3724668Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c23c0>
2025-01-10T13:49:05.3724833Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>
2025-01-10T13:49:05.3724915Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3724919Z 
2025-01-10T13:49:05.3725055Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3725175Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3725265Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3725334Z         try:
2025-01-10T13:49:05.3725476Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3725555Z         except KeyError:
2025-01-10T13:49:05.3725695Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3725874Z     
2025-01-10T13:49:05.3725963Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3726059Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3726153Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3726282Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3726371Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3726458Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3726571Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3726576Z 
2025-01-10T13:49:05.3726702Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3726814Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3726963Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3727032Z     ???
2025-01-10T13:49:05.3727147Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3727157Z 
2025-01-10T13:49:05.3727223Z >   ???
2025-01-10T13:49:05.3727357Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3727424Z E   
2025-01-10T13:49:05.3727556Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3727666Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3727741Z E          ...
2025-01-10T13:49:05.3727826Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3727957Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3728073Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3728142Z E          ...
2025-01-10T13:49:05.3728230Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3728353Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3728460Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3728465Z 
2025-01-10T13:49:05.3728555Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3728776Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu] _
2025-01-10T13:49:05.3728785Z 
2025-01-10T13:49:05.3728907Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3729034Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3729134Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3729262Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3729384Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3729475Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3729551Z err_msg = None
2025-01-10T13:49:05.3729555Z 
2025-01-10T13:49:05.3729662Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3729750Z         if err_msg is None:
2025-01-10T13:49:05.3729842Z             if left.shape != right.shape:
2025-01-10T13:49:05.3730020Z                 raise_assert_detail(
2025-01-10T13:49:05.3730162Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3730237Z                 )
2025-01-10T13:49:05.3730304Z     
2025-01-10T13:49:05.3730379Z             diff = 0
2025-01-10T13:49:05.3730492Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3730576Z                 # count up differences
2025-01-10T13:49:05.3730746Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3730820Z                     diff += 1
2025-01-10T13:49:05.3730894Z     
2025-01-10T13:49:05.3730978Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3731168Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3731478Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3731857Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3731947Z E           
2025-01-10T13:49:05.3732065Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3732324Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3732590Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3732595Z 
2025-01-10T13:49:05.3732909Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3732917Z 
2025-01-10T13:49:05.3733085Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3733090Z 
2025-01-10T13:49:05.3733315Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c2480>
2025-01-10T13:49:05.3733519Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>, attr = 'f_lu'
2025-01-10T13:49:05.3733523Z 
2025-01-10T13:49:05.3733799Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3733920Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3734001Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3734076Z         try:
2025-01-10T13:49:05.3734215Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3734299Z         except KeyError:
2025-01-10T13:49:05.3734437Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3734515Z     
2025-01-10T13:49:05.3734600Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3734702Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3734790Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3734930Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3735018Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3735105Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3735217Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3735222Z 
2025-01-10T13:49:05.3735343Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3735460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3735602Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3735675Z     ???
2025-01-10T13:49:05.3735781Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3735788Z 
2025-01-10T13:49:05.3735859Z >   ???
2025-01-10T13:49:05.3735983Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3736199Z E   
2025-01-10T13:49:05.3736331Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3736441Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3736518Z E          ...
2025-01-10T13:49:05.3736603Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3736732Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3736844Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3736918Z E          ...
2025-01-10T13:49:05.3737002Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3737128Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3737231Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3737235Z 
2025-01-10T13:49:05.3737435Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3737674Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs] _
2025-01-10T13:49:05.3737690Z 
2025-01-10T13:49:05.3737814Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3737944Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3738036Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3738170Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3738291Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3738386Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3738460Z err_msg = None
2025-01-10T13:49:05.3738464Z 
2025-01-10T13:49:05.3738578Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3738662Z         if err_msg is None:
2025-01-10T13:49:05.3738760Z             if left.shape != right.shape:
2025-01-10T13:49:05.3738849Z                 raise_assert_detail(
2025-01-10T13:49:05.3738989Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3739063Z                 )
2025-01-10T13:49:05.3739129Z     
2025-01-10T13:49:05.3739203Z             diff = 0
2025-01-10T13:49:05.3739312Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3739401Z                 # count up differences
2025-01-10T13:49:05.3739567Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3739651Z                     diff += 1
2025-01-10T13:49:05.3739718Z     
2025-01-10T13:49:05.3739811Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3739945Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3740117Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3740235Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3740309Z E           
2025-01-10T13:49:05.3740424Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3740680Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3740943Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3740949Z 
2025-01-10T13:49:05.3741248Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3741374Z 
2025-01-10T13:49:05.3741543Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3741547Z 
2025-01-10T13:49:05.3741774Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c2c30>
2025-01-10T13:49:05.3741937Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>
2025-01-10T13:49:05.3742019Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.3742024Z 
2025-01-10T13:49:05.3742156Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3742274Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3742356Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3742430Z         try:
2025-01-10T13:49:05.3742568Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3742651Z         except KeyError:
2025-01-10T13:49:05.3742790Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3742940Z     
2025-01-10T13:49:05.3743033Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3743125Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3743217Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3743344Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3743431Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3743518Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3743735Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3743808Z             else:
2025-01-10T13:49:05.3743907Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3744012Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3744022Z 
2025-01-10T13:49:05.3744145Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3744260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3744407Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3744488Z     ???
2025-01-10T13:49:05.3744596Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3744602Z 
2025-01-10T13:49:05.3744674Z >   ???
2025-01-10T13:49:05.3744798Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3744869Z E   
2025-01-10T13:49:05.3744994Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3745106Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3745175Z E          ...
2025-01-10T13:49:05.3745266Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3745393Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3745509Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3745582Z E          ...
2025-01-10T13:49:05.3745665Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3745800Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3745909Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3745914Z 
2025-01-10T13:49:05.3746004Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3746242Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev] _
2025-01-10T13:49:05.3746247Z 
2025-01-10T13:49:05.3746375Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3746498Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3746595Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3746730Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3746851Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3746950Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3747023Z err_msg = None
2025-01-10T13:49:05.3747154Z 
2025-01-10T13:49:05.3747270Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3747350Z         if err_msg is None:
2025-01-10T13:49:05.3747447Z             if left.shape != right.shape:
2025-01-10T13:49:05.3747529Z                 raise_assert_detail(
2025-01-10T13:49:05.3747671Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3747741Z                 )
2025-01-10T13:49:05.3747821Z     
2025-01-10T13:49:05.3747894Z             diff = 0
2025-01-10T13:49:05.3748011Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3748104Z                 # count up differences
2025-01-10T13:49:05.3748401Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3748552Z                     diff += 1
2025-01-10T13:49:05.3748671Z     
2025-01-10T13:49:05.3748986Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3749210Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3749522Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3749647Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3749729Z E           
2025-01-10T13:49:05.3749843Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3750112Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3750379Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3750393Z 
2025-01-10T13:49:05.3750693Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3750698Z 
2025-01-10T13:49:05.3750869Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3750874Z 
2025-01-10T13:49:05.3751105Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c2cf0>
2025-01-10T13:49:05.3751272Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>
2025-01-10T13:49:05.3751361Z attr = 'beta_sobolev'
2025-01-10T13:49:05.3751366Z 
2025-01-10T13:49:05.3751499Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3751617Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3751700Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3751781Z         try:
2025-01-10T13:49:05.3751917Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3752005Z         except KeyError:
2025-01-10T13:49:05.3752143Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3752216Z     
2025-01-10T13:49:05.3752300Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3752400Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3752494Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3752629Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3752716Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3752804Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3752918Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3752991Z             else:
2025-01-10T13:49:05.3753091Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3753196Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3753206Z 
2025-01-10T13:49:05.3753333Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3753553Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3753825Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3753894Z     ???
2025-01-10T13:49:05.3754009Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3754013Z 
2025-01-10T13:49:05.3754084Z >   ???
2025-01-10T13:49:05.3763473Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3763581Z E   
2025-01-10T13:49:05.3763882Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3764006Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3764081Z E          ...
2025-01-10T13:49:05.3764182Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3764320Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3764654Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3764731Z E          ...
2025-01-10T13:49:05.3764824Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3764956Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3765062Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3765067Z 
2025-01-10T13:49:05.3765160Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3765396Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues] _
2025-01-10T13:49:05.3765401Z 
2025-01-10T13:49:05.3765538Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3765670Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3765775Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3765915Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3766048Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3766144Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3766218Z err_msg = None
2025-01-10T13:49:05.3766222Z 
2025-01-10T13:49:05.3766342Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3766424Z         if err_msg is None:
2025-01-10T13:49:05.3766527Z             if left.shape != right.shape:
2025-01-10T13:49:05.3766609Z                 raise_assert_detail(
2025-01-10T13:49:05.3766764Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3766885Z                 )
2025-01-10T13:49:05.3767015Z     
2025-01-10T13:49:05.3767145Z             diff = 0
2025-01-10T13:49:05.3767344Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3767494Z                 # count up differences
2025-01-10T13:49:05.3767811Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3767951Z                     diff += 1
2025-01-10T13:49:05.3768061Z     
2025-01-10T13:49:05.3768209Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3768443Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3768662Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3768777Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3768852Z E           
2025-01-10T13:49:05.3768963Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3769230Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3769502Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3769682Z 
2025-01-10T13:49:05.3769997Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3770002Z 
2025-01-10T13:49:05.3770183Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3770188Z 
2025-01-10T13:49:05.3770416Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c2ea0>
2025-01-10T13:49:05.3770588Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be819df70>
2025-01-10T13:49:05.3770665Z attr = 'j_blues'
2025-01-10T13:49:05.3770752Z 
2025-01-10T13:49:05.3770891Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3771024Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3771107Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3771181Z         try:
2025-01-10T13:49:05.3771322Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3771410Z         except KeyError:
2025-01-10T13:49:05.3771551Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3771622Z     
2025-01-10T13:49:05.3771706Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3771803Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3771892Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3772032Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3772122Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3772208Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3772325Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3772398Z             else:
2025-01-10T13:49:05.3772503Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3772608Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3772613Z 
2025-01-10T13:49:05.3772753Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3772867Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3773020Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3773088Z     ???
2025-01-10T13:49:05.3773199Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3773203Z 
2025-01-10T13:49:05.3773274Z >   ???
2025-01-10T13:49:05.3773438Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3773509Z E   
2025-01-10T13:49:05.3773776Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3773894Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3773969Z E          ...
2025-01-10T13:49:05.3774061Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3774192Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3774301Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3774375Z E          ...
2025-01-10T13:49:05.3774462Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3774585Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3774693Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3774698Z 
2025-01-10T13:49:05.3774783Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3774998Z ____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines] ____
2025-01-10T13:49:05.3775003Z 
2025-01-10T13:49:05.3775130Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3775271Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3775492Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3775631Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3775755Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3775843Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3775922Z err_msg = None
2025-01-10T13:49:05.3775926Z 
2025-01-10T13:49:05.3776035Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3776117Z         if err_msg is None:
2025-01-10T13:49:05.3776211Z             if left.shape != right.shape:
2025-01-10T13:49:05.3776298Z                 raise_assert_detail(
2025-01-10T13:49:05.3776443Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3776624Z                 )
2025-01-10T13:49:05.3776689Z     
2025-01-10T13:49:05.3776767Z             diff = 0
2025-01-10T13:49:05.3776881Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3776972Z                 # count up differences
2025-01-10T13:49:05.3777146Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3777221Z                     diff += 1
2025-01-10T13:49:05.3777291Z     
2025-01-10T13:49:05.3777375Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3777514Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3777680Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3777794Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3777863Z E           
2025-01-10T13:49:05.3777971Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3778233Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3778905Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3778912Z 
2025-01-10T13:49:05.3779226Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3779231Z 
2025-01-10T13:49:05.3779398Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3779403Z 
2025-01-10T13:49:05.3779629Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c3ce0>
2025-01-10T13:49:05.3779806Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcaca5700>
2025-01-10T13:49:05.3779884Z attr = 'lines'
2025-01-10T13:49:05.3779887Z 
2025-01-10T13:49:05.3780026Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3780139Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3780225Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3780293Z         try:
2025-01-10T13:49:05.3780433Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3780511Z         except KeyError:
2025-01-10T13:49:05.3780655Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3780721Z     
2025-01-10T13:49:05.3780810Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3780901Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3780992Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3781127Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3781214Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3781396Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3781504Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3781577Z             else:
2025-01-10T13:49:05.3781669Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3781776Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3781781Z 
2025-01-10T13:49:05.3781906Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3782022Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3782163Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3782235Z     ???
2025-01-10T13:49:05.3782340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3782350Z 
2025-01-10T13:49:05.3782415Z >   ???
2025-01-10T13:49:05.3782624Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3782694Z E   
2025-01-10T13:49:05.3782822Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3782928Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3783002Z E          ...
2025-01-10T13:49:05.3783084Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3783215Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3783322Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3783396Z E          ...
2025-01-10T13:49:05.3783478Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3783697Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3783800Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3783809Z 
2025-01-10T13:49:05.3783893Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3784146Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index] _
2025-01-10T13:49:05.3784161Z 
2025-01-10T13:49:05.3784378Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c3da0>
2025-01-10T13:49:05.3784547Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcaca5700>
2025-01-10T13:49:05.3784631Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3784635Z 
2025-01-10T13:49:05.3784774Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3784882Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3784965Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3785034Z         try:
2025-01-10T13:49:05.3785175Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3785259Z         except KeyError:
2025-01-10T13:49:05.3785466Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3785591Z     
2025-01-10T13:49:05.3785735Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3785899Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3786050Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3786291Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3786428Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3786578Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3786754Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3786760Z 
2025-01-10T13:49:05.3786974Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3787157Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3787173Z 
2025-01-10T13:49:05.3787355Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3787443Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3787549Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3787639Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3787775Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3788031Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3788132Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3788212Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3788285Z err_msg = None
2025-01-10T13:49:05.3788289Z 
2025-01-10T13:49:05.3788401Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3788479Z         if err_msg is None:
2025-01-10T13:49:05.3788575Z             if left.shape != right.shape:
2025-01-10T13:49:05.3788660Z                 raise_assert_detail(
2025-01-10T13:49:05.3788805Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3788878Z                 )
2025-01-10T13:49:05.3788943Z     
2025-01-10T13:49:05.3789016Z             diff = 0
2025-01-10T13:49:05.3789234Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3789324Z                 # count up differences
2025-01-10T13:49:05.3789497Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3789578Z                     diff += 1
2025-01-10T13:49:05.3789643Z     
2025-01-10T13:49:05.3789733Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3789863Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3790037Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3790145Z E           AssertionError: Series are different
2025-01-10T13:49:05.3790213Z E           
2025-01-10T13:49:05.3790317Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3790687Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3791028Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3791364Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3791374Z 
2025-01-10T13:49:05.3791676Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3791929Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index] _
2025-01-10T13:49:05.3791935Z 
2025-01-10T13:49:05.3792153Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89c3e60>
2025-01-10T13:49:05.3792323Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcaca5700>
2025-01-10T13:49:05.3792417Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3792422Z 
2025-01-10T13:49:05.3792556Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3792672Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3792753Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3792824Z         try:
2025-01-10T13:49:05.3792962Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3793053Z         except KeyError:
2025-01-10T13:49:05.3793185Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3793346Z     
2025-01-10T13:49:05.3793431Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3793525Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3793728Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3793865Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3793952Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3794038Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3794147Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3794152Z 
2025-01-10T13:49:05.3794274Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3794391Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3794396Z 
2025-01-10T13:49:05.3794527Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3794735Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3794847Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3794929Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3795068Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3795153Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3795259Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3795334Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3795412Z err_msg = None
2025-01-10T13:49:05.3795417Z 
2025-01-10T13:49:05.3795523Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3795605Z         if err_msg is None:
2025-01-10T13:49:05.3795696Z             if left.shape != right.shape:
2025-01-10T13:49:05.3795782Z                 raise_assert_detail(
2025-01-10T13:49:05.3795930Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3796008Z                 )
2025-01-10T13:49:05.3796073Z     
2025-01-10T13:49:05.3796148Z             diff = 0
2025-01-10T13:49:05.3796257Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3796348Z                 # count up differences
2025-01-10T13:49:05.3796521Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3796595Z                     diff += 1
2025-01-10T13:49:05.3796665Z     
2025-01-10T13:49:05.3796747Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3796886Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3797052Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3797158Z E           AssertionError: Series are different
2025-01-10T13:49:05.3797226Z E           
2025-01-10T13:49:05.3797332Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3797697Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3798085Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3798463Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3798598Z 
2025-01-10T13:49:05.3798908Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3799108Z _____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-nu] ______
2025-01-10T13:49:05.3799113Z 
2025-01-10T13:49:05.3799240Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3799366Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3799465Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3799672Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3799804Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3799893Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3799969Z err_msg = None
2025-01-10T13:49:05.3799973Z 
2025-01-10T13:49:05.3800081Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3800158Z         if err_msg is None:
2025-01-10T13:49:05.3800252Z             if left.shape != right.shape:
2025-01-10T13:49:05.3800333Z                 raise_assert_detail(
2025-01-10T13:49:05.3800475Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3800543Z                 )
2025-01-10T13:49:05.3800612Z     
2025-01-10T13:49:05.3800681Z             diff = 0
2025-01-10T13:49:05.3800793Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3800883Z                 # count up differences
2025-01-10T13:49:05.3801054Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3801131Z                     diff += 1
2025-01-10T13:49:05.3801202Z     
2025-01-10T13:49:05.3801289Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3801422Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3801592Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3801702Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3801775Z E           
2025-01-10T13:49:05.3801884Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3802149Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3802417Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3802429Z 
2025-01-10T13:49:05.3802723Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3802728Z 
2025-01-10T13:49:05.3802897Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3802902Z 
2025-01-10T13:49:05.3803124Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887c0e0>
2025-01-10T13:49:05.3803330Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcaca5700>, attr = 'nu'
2025-01-10T13:49:05.3803338Z 
2025-01-10T13:49:05.3803472Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3803774Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3803864Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3803933Z         try:
2025-01-10T13:49:05.3804169Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3804310Z         except KeyError:
2025-01-10T13:49:05.3804555Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3804674Z     
2025-01-10T13:49:05.3804814Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3804911Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3804999Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3805128Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3805210Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3805295Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3805409Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3805555Z 
2025-01-10T13:49:05.3805692Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3805802Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3805950Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3806019Z     ???
2025-01-10T13:49:05.3806132Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3806137Z 
2025-01-10T13:49:05.3806203Z >   ???
2025-01-10T13:49:05.3806329Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3806396Z E   
2025-01-10T13:49:05.3806525Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3806634Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3806707Z E          ...
2025-01-10T13:49:05.3806791Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3806926Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3807041Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3807114Z E          ...
2025-01-10T13:49:05.3807201Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3807319Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3807426Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3807431Z 
2025-01-10T13:49:05.3807516Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3807738Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-wavelength_cm] _
2025-01-10T13:49:05.3807744Z 
2025-01-10T13:49:05.3807868Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3807999Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3808096Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3808226Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3808355Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3808444Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3808521Z err_msg = None
2025-01-10T13:49:05.3808525Z 
2025-01-10T13:49:05.3808631Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3808716Z         if err_msg is None:
2025-01-10T13:49:05.3808809Z             if left.shape != right.shape:
2025-01-10T13:49:05.3808895Z                 raise_assert_detail(
2025-01-10T13:49:05.3809035Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3809112Z                 )
2025-01-10T13:49:05.3809178Z     
2025-01-10T13:49:05.3809253Z             diff = 0
2025-01-10T13:49:05.3809363Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3809451Z                 # count up differences
2025-01-10T13:49:05.3809623Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3809839Z                     diff += 1
2025-01-10T13:49:05.3809909Z     
2025-01-10T13:49:05.3809993Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3810129Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3810296Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3810411Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3810479Z E           
2025-01-10T13:49:05.3810588Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3810847Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3811197Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3811204Z 
2025-01-10T13:49:05.3811509Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3811513Z 
2025-01-10T13:49:05.3811677Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3811688Z 
2025-01-10T13:49:05.3811907Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887c1a0>
2025-01-10T13:49:05.3812072Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcaca5700>
2025-01-10T13:49:05.3812148Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3812157Z 
2025-01-10T13:49:05.3812296Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3812410Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3812496Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3812563Z         try:
2025-01-10T13:49:05.3812705Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3812782Z         except KeyError:
2025-01-10T13:49:05.3812922Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3812988Z     
2025-01-10T13:49:05.3813078Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3813166Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3813258Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3813392Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3813474Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3813563Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3813840Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3813850Z 
2025-01-10T13:49:05.3813976Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3814087Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3814233Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3814300Z     ???
2025-01-10T13:49:05.3814410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3814414Z 
2025-01-10T13:49:05.3814478Z >   ???
2025-01-10T13:49:05.3814608Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3814678Z E   
2025-01-10T13:49:05.3814803Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3814915Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3814983Z E          ...
2025-01-10T13:49:05.3815071Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3815198Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3815437Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3815505Z E          ...
2025-01-10T13:49:05.3815594Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3815714Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3815821Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3815826Z 
2025-01-10T13:49:05.3815911Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3816115Z ____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-f_lu] _____
2025-01-10T13:49:05.3816120Z 
2025-01-10T13:49:05.3816250Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3816373Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3816470Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3816711Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3816840Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3816930Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3817009Z err_msg = None
2025-01-10T13:49:05.3817013Z 
2025-01-10T13:49:05.3817118Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3817200Z         if err_msg is None:
2025-01-10T13:49:05.3817295Z             if left.shape != right.shape:
2025-01-10T13:49:05.3817375Z                 raise_assert_detail(
2025-01-10T13:49:05.3817519Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3817588Z                 )
2025-01-10T13:49:05.3817658Z     
2025-01-10T13:49:05.3817726Z             diff = 0
2025-01-10T13:49:05.3817837Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3817926Z                 # count up differences
2025-01-10T13:49:05.3818097Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3818174Z                     diff += 1
2025-01-10T13:49:05.3818245Z     
2025-01-10T13:49:05.3818329Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3818466Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3818633Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3818749Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3818826Z E           
2025-01-10T13:49:05.3818933Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3819196Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3819462Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3819473Z 
2025-01-10T13:49:05.3819767Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3819772Z 
2025-01-10T13:49:05.3819940Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3819945Z 
2025-01-10T13:49:05.3820164Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887c260>
2025-01-10T13:49:05.3820369Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcaca5700>, attr = 'f_lu'
2025-01-10T13:49:05.3820378Z 
2025-01-10T13:49:05.3820510Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3820716Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3820797Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3820871Z         try:
2025-01-10T13:49:05.3821014Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3821091Z         except KeyError:
2025-01-10T13:49:05.3821229Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3821295Z     
2025-01-10T13:49:05.3821381Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3821469Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3821592Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3821829Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3821983Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3822135Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3822403Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3822408Z 
2025-01-10T13:49:05.3822542Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3822655Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3822803Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3822869Z     ???
2025-01-10T13:49:05.3822980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3822984Z 
2025-01-10T13:49:05.3823048Z >   ???
2025-01-10T13:49:05.3823176Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3823240Z E   
2025-01-10T13:49:05.3823367Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3823473Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3823544Z E          ...
2025-01-10T13:49:05.3823744Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3823881Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3823995Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3824068Z E          ...
2025-01-10T13:49:05.3824156Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3824276Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3824381Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3824385Z 
2025-01-10T13:49:05.3824474Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3824691Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-tau_sobolevs] _
2025-01-10T13:49:05.3824696Z 
2025-01-10T13:49:05.3824819Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3824946Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3825038Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3825173Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3825300Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3825391Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3825471Z err_msg = None
2025-01-10T13:49:05.3825475Z 
2025-01-10T13:49:05.3825582Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3825664Z         if err_msg is None:
2025-01-10T13:49:05.3825754Z             if left.shape != right.shape:
2025-01-10T13:49:05.3825838Z                 raise_assert_detail(
2025-01-10T13:49:05.3825979Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3826052Z                 )
2025-01-10T13:49:05.3826120Z     
2025-01-10T13:49:05.3826196Z             diff = 0
2025-01-10T13:49:05.3826366Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3826515Z                 # count up differences
2025-01-10T13:49:05.3826770Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3827102Z                     diff += 1
2025-01-10T13:49:05.3827206Z     
2025-01-10T13:49:05.3827335Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3827535Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3827791Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3827958Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3828061Z E           
2025-01-10T13:49:05.3828229Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3828637Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3829140Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3829148Z 
2025-01-10T13:49:05.3829462Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3829468Z 
2025-01-10T13:49:05.3829636Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3829641Z 
2025-01-10T13:49:05.3829868Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887c9e0>
2025-01-10T13:49:05.3830032Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcaca5700>
2025-01-10T13:49:05.3830114Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.3830123Z 
2025-01-10T13:49:05.3830261Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3830378Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3830464Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3830533Z         try:
2025-01-10T13:49:05.3830676Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3830753Z         except KeyError:
2025-01-10T13:49:05.3830891Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3830956Z     
2025-01-10T13:49:05.3831044Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3831135Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3831227Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3831358Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3831447Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3831538Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3831649Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3831729Z             else:
2025-01-10T13:49:05.3831821Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3831929Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3831934Z 
2025-01-10T13:49:05.3832054Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3832168Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3832311Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3832385Z     ???
2025-01-10T13:49:05.3832495Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3832500Z 
2025-01-10T13:49:05.3832570Z >   ???
2025-01-10T13:49:05.3832699Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3832766Z E   
2025-01-10T13:49:05.3832897Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3833018Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3833185Z E          ...
2025-01-10T13:49:05.3833269Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3833399Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3833508Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3833581Z E          ...
2025-01-10T13:49:05.3833802Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3833930Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3834029Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3834033Z 
2025-01-10T13:49:05.3834123Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3834336Z ___ TestPlasma.test_plasma_properties[line_interaction_type:scatter-j_blues] ___
2025-01-10T13:49:05.3834340Z 
2025-01-10T13:49:05.3834465Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3834714Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3834812Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3834945Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3835063Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3835156Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3835230Z err_msg = None
2025-01-10T13:49:05.3835234Z 
2025-01-10T13:49:05.3835345Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3835430Z         if err_msg is None:
2025-01-10T13:49:05.3835519Z             if left.shape != right.shape:
2025-01-10T13:49:05.3835605Z                 raise_assert_detail(
2025-01-10T13:49:05.3835747Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3835826Z                 )
2025-01-10T13:49:05.3835891Z     
2025-01-10T13:49:05.3835968Z             diff = 0
2025-01-10T13:49:05.3836074Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3836165Z                 # count up differences
2025-01-10T13:49:05.3836332Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3836412Z                     diff += 1
2025-01-10T13:49:05.3836477Z     
2025-01-10T13:49:05.3836568Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3836699Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3836870Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3836985Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3837054Z E           
2025-01-10T13:49:05.3837166Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3837426Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3837693Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3837699Z 
2025-01-10T13:49:05.3838000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3838005Z 
2025-01-10T13:49:05.3838167Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3838172Z 
2025-01-10T13:49:05.3838407Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887cc20>
2025-01-10T13:49:05.3838697Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcaca5700>
2025-01-10T13:49:05.3838774Z attr = 'j_blues'
2025-01-10T13:49:05.3838778Z 
2025-01-10T13:49:05.3838910Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3839027Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3839106Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3839178Z         try:
2025-01-10T13:49:05.3839319Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3839395Z         except KeyError:
2025-01-10T13:49:05.3839535Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3839601Z     
2025-01-10T13:49:05.3839738Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3839909Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3840064Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3840409Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3840550Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3840689Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3840866Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3840986Z             else:
2025-01-10T13:49:05.3841119Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3841287Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3841303Z 
2025-01-10T13:49:05.3841503Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3841683Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3841911Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3842027Z     ???
2025-01-10T13:49:05.3842207Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3842226Z 
2025-01-10T13:49:05.3842348Z >   ???
2025-01-10T13:49:05.3842558Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3842686Z E   
2025-01-10T13:49:05.3842916Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3843094Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3843206Z E          ...
2025-01-10T13:49:05.3843354Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3843573Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3843964Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3844097Z E          ...
2025-01-10T13:49:05.3844240Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3844464Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3844633Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3844641Z 
2025-01-10T13:49:05.3844795Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3845181Z ___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines] ___
2025-01-10T13:49:05.3845199Z 
2025-01-10T13:49:05.3845431Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3845655Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3845828Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3846066Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3846285Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3846455Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3846585Z err_msg = None
2025-01-10T13:49:05.3846595Z 
2025-01-10T13:49:05.3846792Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3846929Z         if err_msg is None:
2025-01-10T13:49:05.3847113Z             if left.shape != right.shape:
2025-01-10T13:49:05.3847254Z                 raise_assert_detail(
2025-01-10T13:49:05.3847755Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3847877Z                 )
2025-01-10T13:49:05.3848006Z     
2025-01-10T13:49:05.3848136Z             diff = 0
2025-01-10T13:49:05.3848333Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3848497Z                 # count up differences
2025-01-10T13:49:05.3848801Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3848938Z                     diff += 1
2025-01-10T13:49:05.3849051Z     
2025-01-10T13:49:05.3849205Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3849440Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3849739Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3850146Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3850283Z E           
2025-01-10T13:49:05.3850477Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3850949Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3851429Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3851439Z 
2025-01-10T13:49:05.3851996Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3852014Z 
2025-01-10T13:49:05.3852325Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3852334Z 
2025-01-10T13:49:05.3852729Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887d9a0>
2025-01-10T13:49:05.3853044Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>
2025-01-10T13:49:05.3853175Z attr = 'lines'
2025-01-10T13:49:05.3853184Z 
2025-01-10T13:49:05.3853428Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3853835Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3853990Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3854121Z         try:
2025-01-10T13:49:05.3854366Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3854502Z         except KeyError:
2025-01-10T13:49:05.3854734Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3854864Z     
2025-01-10T13:49:05.3855004Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3855180Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3855335Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3855572Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3855720Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3855871Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3856069Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3856189Z             else:
2025-01-10T13:49:05.3856353Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3856539Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3856547Z 
2025-01-10T13:49:05.3856769Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3856965Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3857219Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3857344Z     ???
2025-01-10T13:49:05.3857767Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3857776Z 
2025-01-10T13:49:05.3857893Z >   ???
2025-01-10T13:49:05.3858114Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3858232Z E   
2025-01-10T13:49:05.3858455Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3858653Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3858783Z E          ...
2025-01-10T13:49:05.3858936Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3859160Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3859360Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3859476Z E          ...
2025-01-10T13:49:05.3859623Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3859828Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3860231Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3860248Z 
2025-01-10T13:49:05.3860405Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3860863Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index] _
2025-01-10T13:49:05.3860872Z 
2025-01-10T13:49:05.3861266Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887da60>
2025-01-10T13:49:05.3861551Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>
2025-01-10T13:49:05.3861713Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3861722Z 
2025-01-10T13:49:05.3861960Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3862152Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3862238Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3862312Z         try:
2025-01-10T13:49:05.3862464Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3862549Z         except KeyError:
2025-01-10T13:49:05.3862701Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3862767Z     
2025-01-10T13:49:05.3862859Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3862957Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3863050Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3863189Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3863278Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3863367Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3863486Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3863491Z 
2025-01-10T13:49:05.3863847Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3863988Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3863995Z 
2025-01-10T13:49:05.3864137Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3864227Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3864343Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3864424Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3864567Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3864648Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3864756Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3864830Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3864908Z err_msg = None
2025-01-10T13:49:05.3864912Z 
2025-01-10T13:49:05.3865024Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3865107Z         if err_msg is None:
2025-01-10T13:49:05.3865206Z             if left.shape != right.shape:
2025-01-10T13:49:05.3865286Z                 raise_assert_detail(
2025-01-10T13:49:05.3865441Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3865721Z                 )
2025-01-10T13:49:05.3865794Z     
2025-01-10T13:49:05.3865863Z             diff = 0
2025-01-10T13:49:05.3865979Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3866063Z                 # count up differences
2025-01-10T13:49:05.3866236Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3866311Z                     diff += 1
2025-01-10T13:49:05.3866383Z     
2025-01-10T13:49:05.3866466Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3866606Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3866774Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3866883Z E           AssertionError: Series are different
2025-01-10T13:49:05.3866957Z E           
2025-01-10T13:49:05.3867175Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3867560Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3867889Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3868226Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3868239Z 
2025-01-10T13:49:05.3868557Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3868813Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index] _
2025-01-10T13:49:05.3868819Z 
2025-01-10T13:49:05.3869046Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887db20>
2025-01-10T13:49:05.3869219Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>
2025-01-10T13:49:05.3869306Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3869310Z 
2025-01-10T13:49:05.3869449Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3869565Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3869658Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3869726Z         try:
2025-01-10T13:49:05.3869871Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3869949Z         except KeyError:
2025-01-10T13:49:05.3870092Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3870158Z     
2025-01-10T13:49:05.3870244Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3870335Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3870428Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3870565Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3870647Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3870736Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3870841Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3870845Z 
2025-01-10T13:49:05.3870978Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3871180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3871186Z 
2025-01-10T13:49:05.3871323Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3871406Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3871514Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3871590Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3871729Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3871813Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3871913Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3871991Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3872062Z err_msg = None
2025-01-10T13:49:05.3872067Z 
2025-01-10T13:49:05.3872259Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3872342Z         if err_msg is None:
2025-01-10T13:49:05.3872435Z             if left.shape != right.shape:
2025-01-10T13:49:05.3872515Z                 raise_assert_detail(
2025-01-10T13:49:05.3872660Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3872728Z                 )
2025-01-10T13:49:05.3872797Z     
2025-01-10T13:49:05.3872866Z             diff = 0
2025-01-10T13:49:05.3872978Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3873066Z                 # count up differences
2025-01-10T13:49:05.3873235Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3873315Z                     diff += 1
2025-01-10T13:49:05.3873420Z     
2025-01-10T13:49:05.3873514Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3873774Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3873964Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3874074Z E           AssertionError: Series are different
2025-01-10T13:49:05.3874153Z E           
2025-01-10T13:49:05.3874254Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3874625Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3875002Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3875629Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3875649Z 
2025-01-10T13:49:05.3876194Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3876559Z ____ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-nu] _____
2025-01-10T13:49:05.3876566Z 
2025-01-10T13:49:05.3876778Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3876920Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3877169Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3877308Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3877435Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3877526Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3877605Z err_msg = None
2025-01-10T13:49:05.3877609Z 
2025-01-10T13:49:05.3877719Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3877803Z         if err_msg is None:
2025-01-10T13:49:05.3877897Z             if left.shape != right.shape:
2025-01-10T13:49:05.3877983Z                 raise_assert_detail(
2025-01-10T13:49:05.3878126Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3878381Z                 )
2025-01-10T13:49:05.3878453Z     
2025-01-10T13:49:05.3878531Z             diff = 0
2025-01-10T13:49:05.3878641Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3878730Z                 # count up differences
2025-01-10T13:49:05.3878897Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3878979Z                     diff += 1
2025-01-10T13:49:05.3879049Z     
2025-01-10T13:49:05.3879133Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3879274Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3879440Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3879557Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3879627Z E           
2025-01-10T13:49:05.3879740Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3880006Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3880276Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3880282Z 
2025-01-10T13:49:05.3880583Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3880589Z 
2025-01-10T13:49:05.3880758Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3880766Z 
2025-01-10T13:49:05.3880991Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887dd60>
2025-01-10T13:49:05.3881196Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>, attr = 'nu'
2025-01-10T13:49:05.3881206Z 
2025-01-10T13:49:05.3881342Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3881460Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3881543Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3881617Z         try:
2025-01-10T13:49:05.3881754Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3881838Z         except KeyError:
2025-01-10T13:49:05.3881973Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3882046Z     
2025-01-10T13:49:05.3882130Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3882226Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3882313Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3882454Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3882654Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3882745Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3882858Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3882863Z 
2025-01-10T13:49:05.3882984Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3883101Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3883244Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3883316Z     ???
2025-01-10T13:49:05.3883423Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3883427Z 
2025-01-10T13:49:05.3883497Z >   ???
2025-01-10T13:49:05.3883748Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3883822Z E   
2025-01-10T13:49:05.3883949Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3884183Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3884265Z E          ...
2025-01-10T13:49:05.3884351Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3884484Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3884597Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3884670Z E          ...
2025-01-10T13:49:05.3884754Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3884881Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3884983Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3884988Z 
2025-01-10T13:49:05.3885078Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3885302Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-wavelength_cm] _
2025-01-10T13:49:05.3885306Z 
2025-01-10T13:49:05.3885439Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3885574Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3885669Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3885805Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3885926Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3886020Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3886094Z err_msg = None
2025-01-10T13:49:05.3886099Z 
2025-01-10T13:49:05.3886210Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3886289Z         if err_msg is None:
2025-01-10T13:49:05.3886386Z             if left.shape != right.shape:
2025-01-10T13:49:05.3886466Z                 raise_assert_detail(
2025-01-10T13:49:05.3886613Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3886690Z                 )
2025-01-10T13:49:05.3886761Z     
2025-01-10T13:49:05.3886836Z             diff = 0
2025-01-10T13:49:05.3886945Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3887033Z                 # count up differences
2025-01-10T13:49:05.3887198Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3887281Z                     diff += 1
2025-01-10T13:49:05.3887348Z     
2025-01-10T13:49:05.3887440Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3887576Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3887749Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3887859Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3887932Z E           
2025-01-10T13:49:05.3888041Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3888308Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3888696Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3888702Z 
2025-01-10T13:49:05.3888999Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3889009Z 
2025-01-10T13:49:05.3889174Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3889269Z 
2025-01-10T13:49:05.3889499Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887de20>
2025-01-10T13:49:05.3889669Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>
2025-01-10T13:49:05.3889751Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3889756Z 
2025-01-10T13:49:05.3889891Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3890008Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3890088Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3890162Z         try:
2025-01-10T13:49:05.3890298Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3890382Z         except KeyError:
2025-01-10T13:49:05.3890518Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3890590Z     
2025-01-10T13:49:05.3890676Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3890768Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3890864Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3890993Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3891085Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3891171Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3891283Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3891288Z 
2025-01-10T13:49:05.3891408Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3891524Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3891665Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3891738Z     ???
2025-01-10T13:49:05.3891844Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3891854Z 
2025-01-10T13:49:05.3891920Z >   ???
2025-01-10T13:49:05.3892049Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3892123Z E   
2025-01-10T13:49:05.3892256Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3892363Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3892442Z E          ...
2025-01-10T13:49:05.3892526Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3892656Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3892774Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3892848Z E          ...
2025-01-10T13:49:05.3892930Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3893054Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3893154Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3893165Z 
2025-01-10T13:49:05.3893248Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3893453Z ___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-f_lu] ____
2025-01-10T13:49:05.3893457Z 
2025-01-10T13:49:05.3893581Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3893915Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3894284Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3894521Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3894733Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3894889Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3895013Z err_msg = None
2025-01-10T13:49:05.3895020Z 
2025-01-10T13:49:05.3895204Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3895313Z         if err_msg is None:
2025-01-10T13:49:05.3895408Z             if left.shape != right.shape:
2025-01-10T13:49:05.3895495Z                 raise_assert_detail(
2025-01-10T13:49:05.3895637Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3895842Z                 )
2025-01-10T13:49:05.3895915Z     
2025-01-10T13:49:05.3895990Z             diff = 0
2025-01-10T13:49:05.3896099Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3896189Z                 # count up differences
2025-01-10T13:49:05.3896357Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3896436Z                     diff += 1
2025-01-10T13:49:05.3896501Z     
2025-01-10T13:49:05.3896590Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3896727Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3896895Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3897010Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3897078Z E           
2025-01-10T13:49:05.3897191Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3897451Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3897717Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3897723Z 
2025-01-10T13:49:05.3898029Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3898034Z 
2025-01-10T13:49:05.3898197Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3898207Z 
2025-01-10T13:49:05.3898434Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887dee0>
2025-01-10T13:49:05.3898639Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>, attr = 'f_lu'
2025-01-10T13:49:05.3898643Z 
2025-01-10T13:49:05.3898779Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3898898Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3898980Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3899052Z         try:
2025-01-10T13:49:05.3899188Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3899270Z         except KeyError:
2025-01-10T13:49:05.3899409Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3899479Z     
2025-01-10T13:49:05.3899562Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3899656Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3899742Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3899882Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3900052Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3900144Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3900252Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3900262Z 
2025-01-10T13:49:05.3900383Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3900497Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3900638Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3900713Z     ???
2025-01-10T13:49:05.3900819Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3900824Z 
2025-01-10T13:49:05.3900894Z >   ???
2025-01-10T13:49:05.3901018Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3901090Z E   
2025-01-10T13:49:05.3901213Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3901407Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3901480Z E          ...
2025-01-10T13:49:05.3901569Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3901696Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3901808Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3901883Z E          ...
2025-01-10T13:49:05.3901964Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3902089Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3902191Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3902195Z 
2025-01-10T13:49:05.3902285Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3902501Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs] _
2025-01-10T13:49:05.3902506Z 
2025-01-10T13:49:05.3902639Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3902765Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3902876Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3903014Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3903133Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3903227Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3903298Z err_msg = None
2025-01-10T13:49:05.3903302Z 
2025-01-10T13:49:05.3903415Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3903492Z         if err_msg is None:
2025-01-10T13:49:05.3903588Z             if left.shape != right.shape:
2025-01-10T13:49:05.3903797Z                 raise_assert_detail(
2025-01-10T13:49:05.3903945Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3904018Z                 )
2025-01-10T13:49:05.3904094Z     
2025-01-10T13:49:05.3904164Z             diff = 0
2025-01-10T13:49:05.3904280Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3904368Z                 # count up differences
2025-01-10T13:49:05.3904534Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3904614Z                     diff += 1
2025-01-10T13:49:05.3904680Z     
2025-01-10T13:49:05.3904768Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3904901Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3905072Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3905180Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3905253Z E           
2025-01-10T13:49:05.3905361Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3905628Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3906034Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3906040Z 
2025-01-10T13:49:05.3906337Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3906342Z 
2025-01-10T13:49:05.3906510Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3906614Z 
2025-01-10T13:49:05.3906842Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887e660>
2025-01-10T13:49:05.3907011Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>
2025-01-10T13:49:05.3907091Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.3907095Z 
2025-01-10T13:49:05.3907226Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3907341Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3907420Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3907493Z         try:
2025-01-10T13:49:05.3907626Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3907713Z         except KeyError:
2025-01-10T13:49:05.3907846Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3907916Z     
2025-01-10T13:49:05.3908000Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3908096Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3908191Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3908322Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3908414Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3908503Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3908614Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3908682Z             else:
2025-01-10T13:49:05.3908783Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3908892Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3908896Z 
2025-01-10T13:49:05.3909023Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3909137Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3909287Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3909355Z     ???
2025-01-10T13:49:05.3909470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3909478Z 
2025-01-10T13:49:05.3909548Z >   ???
2025-01-10T13:49:05.3909677Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3909750Z E   
2025-01-10T13:49:05.3909877Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3909991Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3910061Z E          ...
2025-01-10T13:49:05.3910152Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3910283Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3910398Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3910467Z E          ...
2025-01-10T13:49:05.3910555Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3910675Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3910785Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3910789Z 
2025-01-10T13:49:05.3910883Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3911105Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-beta_sobolev] _
2025-01-10T13:49:05.3911200Z 
2025-01-10T13:49:05.3911336Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3911468Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3911593Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3911836Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3912063Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3912226Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3912359Z err_msg = None
2025-01-10T13:49:05.3912365Z 
2025-01-10T13:49:05.3912551Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3912804Z         if err_msg is None:
2025-01-10T13:49:05.3912963Z             if left.shape != right.shape:
2025-01-10T13:49:05.3913108Z                 raise_assert_detail(
2025-01-10T13:49:05.3913261Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3913331Z                 )
2025-01-10T13:49:05.3913402Z     
2025-01-10T13:49:05.3913472Z             diff = 0
2025-01-10T13:49:05.3913587Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3913780Z                 # count up differences
2025-01-10T13:49:05.3913956Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3914032Z                     diff += 1
2025-01-10T13:49:05.3914104Z     
2025-01-10T13:49:05.3914191Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3914331Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3914503Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3914622Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3914700Z E           
2025-01-10T13:49:05.3914812Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3915077Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3915336Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3915347Z 
2025-01-10T13:49:05.3915656Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3915666Z 
2025-01-10T13:49:05.3915841Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3915846Z 
2025-01-10T13:49:05.3916068Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887e720>
2025-01-10T13:49:05.3916243Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>
2025-01-10T13:49:05.3916319Z attr = 'beta_sobolev'
2025-01-10T13:49:05.3916323Z 
2025-01-10T13:49:05.3916465Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3916585Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3916667Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3916742Z         try:
2025-01-10T13:49:05.3916880Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3916966Z         except KeyError:
2025-01-10T13:49:05.3917100Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3917176Z     
2025-01-10T13:49:05.3917389Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3917486Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3917573Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3917708Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3917790Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3917883Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3917990Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3918069Z             else:
2025-01-10T13:49:05.3918167Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3918272Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3918277Z 
2025-01-10T13:49:05.3918403Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3918515Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3918770Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3918842Z     ???
2025-01-10T13:49:05.3918957Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3918962Z 
2025-01-10T13:49:05.3919027Z >   ???
2025-01-10T13:49:05.3919155Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3919222Z E   
2025-01-10T13:49:05.3919354Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3919469Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3919537Z E          ...
2025-01-10T13:49:05.3919627Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3919755Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3919869Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3919937Z E          ...
2025-01-10T13:49:05.3920024Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3920147Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3920257Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3920262Z 
2025-01-10T13:49:05.3920348Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3920557Z __ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-j_blues] __
2025-01-10T13:49:05.3920562Z 
2025-01-10T13:49:05.3920692Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3920820Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3920919Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3921050Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3921176Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3921269Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3921348Z err_msg = None
2025-01-10T13:49:05.3921357Z 
2025-01-10T13:49:05.3921466Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3921551Z         if err_msg is None:
2025-01-10T13:49:05.3921645Z             if left.shape != right.shape:
2025-01-10T13:49:05.3921731Z                 raise_assert_detail(
2025-01-10T13:49:05.3921883Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3921953Z                 )
2025-01-10T13:49:05.3922024Z     
2025-01-10T13:49:05.3922094Z             diff = 0
2025-01-10T13:49:05.3922210Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3922296Z                 # count up differences
2025-01-10T13:49:05.3922471Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3922546Z                     diff += 1
2025-01-10T13:49:05.3922617Z     
2025-01-10T13:49:05.3922709Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3922855Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3923119Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3923235Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3923304Z E           
2025-01-10T13:49:05.3923417Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3923777Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3924040Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3924177Z 
2025-01-10T13:49:05.3924491Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3924497Z 
2025-01-10T13:49:05.3924669Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3924674Z 
2025-01-10T13:49:05.3924896Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887e8a0>
2025-01-10T13:49:05.3925067Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfc2ee10>
2025-01-10T13:49:05.3925140Z attr = 'j_blues'
2025-01-10T13:49:05.3925144Z 
2025-01-10T13:49:05.3925282Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3925394Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3925482Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3925556Z         try:
2025-01-10T13:49:05.3925698Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3925783Z         except KeyError:
2025-01-10T13:49:05.3925924Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3925996Z     
2025-01-10T13:49:05.3926082Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3926177Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3926263Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3926397Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3926480Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3926577Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3926684Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3926757Z             else:
2025-01-10T13:49:05.3926849Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3926956Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3926964Z 
2025-01-10T13:49:05.3927085Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3927205Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3927351Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3927419Z     ???
2025-01-10T13:49:05.3927532Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3927536Z 
2025-01-10T13:49:05.3927601Z >   ???
2025-01-10T13:49:05.3927731Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3927799Z E   
2025-01-10T13:49:05.3927929Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3928040Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3928115Z E          ...
2025-01-10T13:49:05.3928202Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3928333Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3928447Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3928710Z E          ...
2025-01-10T13:49:05.3928798Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3928922Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3929025Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3929030Z 
2025-01-10T13:49:05.3929115Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3929325Z __ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines] ___
2025-01-10T13:49:05.3929329Z 
2025-01-10T13:49:05.3929455Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3929585Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3929677Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3929812Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3930061Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3930225Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3930370Z err_msg = None
2025-01-10T13:49:05.3930377Z 
2025-01-10T13:49:05.3930563Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3930705Z         if err_msg is None:
2025-01-10T13:49:05.3930843Z             if left.shape != right.shape:
2025-01-10T13:49:05.3930932Z                 raise_assert_detail(
2025-01-10T13:49:05.3931077Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3931153Z                 )
2025-01-10T13:49:05.3931218Z     
2025-01-10T13:49:05.3931293Z             diff = 0
2025-01-10T13:49:05.3931401Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3931494Z                 # count up differences
2025-01-10T13:49:05.3931673Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3931753Z                     diff += 1
2025-01-10T13:49:05.3931825Z     
2025-01-10T13:49:05.3931911Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3932050Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3932217Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3932330Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3932400Z E           
2025-01-10T13:49:05.3932511Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3932769Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3933035Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3933045Z 
2025-01-10T13:49:05.3933352Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3933356Z 
2025-01-10T13:49:05.3933522Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3933527Z 
2025-01-10T13:49:05.3933899Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887f620>
2025-01-10T13:49:05.3934066Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>
2025-01-10T13:49:05.3934147Z attr = 'lines'
2025-01-10T13:49:05.3934152Z 
2025-01-10T13:49:05.3934300Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3934554Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3934643Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3934712Z         try:
2025-01-10T13:49:05.3934859Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3934940Z         except KeyError:
2025-01-10T13:49:05.3935084Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3935154Z     
2025-01-10T13:49:05.3935244Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3935334Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3935426Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3935554Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3935643Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3935739Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3935850Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3936038Z             else:
2025-01-10T13:49:05.3936134Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.3936241Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.3936246Z 
2025-01-10T13:49:05.3936428Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.3936612Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3936834Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3936944Z     ???
2025-01-10T13:49:05.3937116Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3937123Z 
2025-01-10T13:49:05.3937231Z >   ???
2025-01-10T13:49:05.3937430Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3937541Z E   
2025-01-10T13:49:05.3937748Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3937919Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3938051Z E          ...
2025-01-10T13:49:05.3938194Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3938416Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3938600Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3938726Z E          ...
2025-01-10T13:49:05.3938872Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3939101Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3939285Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3939294Z 
2025-01-10T13:49:05.3939456Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3939939Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index] _
2025-01-10T13:49:05.3939950Z 
2025-01-10T13:49:05.3940345Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887f6e0>
2025-01-10T13:49:05.3940659Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>
2025-01-10T13:49:05.3940821Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.3940830Z 
2025-01-10T13:49:05.3941070Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3941262Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3941399Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3941502Z         try:
2025-01-10T13:49:05.3941719Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3941837Z         except KeyError:
2025-01-10T13:49:05.3942048Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3942154Z     
2025-01-10T13:49:05.3942279Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3942423Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3942552Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3942762Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3942900Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3943041Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3943353Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3943362Z 
2025-01-10T13:49:05.3957130Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3957383Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3957391Z 
2025-01-10T13:49:05.3957608Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3957742Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3957906Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3958031Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3958246Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.3958370Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.3958742Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3958870Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.3958977Z err_msg = None
2025-01-10T13:49:05.3958995Z 
2025-01-10T13:49:05.3959159Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3959295Z         if err_msg is None:
2025-01-10T13:49:05.3959452Z             if left.shape != right.shape:
2025-01-10T13:49:05.3959588Z                 raise_assert_detail(
2025-01-10T13:49:05.3959802Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3959908Z                 )
2025-01-10T13:49:05.3960009Z     
2025-01-10T13:49:05.3960118Z             diff = 0
2025-01-10T13:49:05.3960278Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3960406Z                 # count up differences
2025-01-10T13:49:05.3960655Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3960778Z                     diff += 1
2025-01-10T13:49:05.3960875Z     
2025-01-10T13:49:05.3961012Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3961206Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3961462Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3961619Z E           AssertionError: Series are different
2025-01-10T13:49:05.3961722Z E           
2025-01-10T13:49:05.3961871Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.3962434Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3962946Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3963461Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3963469Z 
2025-01-10T13:49:05.3964095Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3964502Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index] _
2025-01-10T13:49:05.3964659Z 
2025-01-10T13:49:05.3965006Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887f7a0>
2025-01-10T13:49:05.3965252Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>
2025-01-10T13:49:05.3965384Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.3965390Z 
2025-01-10T13:49:05.3965588Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3965763Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3965879Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3965983Z         try:
2025-01-10T13:49:05.3966194Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3966316Z         except KeyError:
2025-01-10T13:49:05.3966517Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3966620Z     
2025-01-10T13:49:05.3966740Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3967083Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3967219Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3967409Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3967539Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3967671Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3967837Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3967843Z 
2025-01-10T13:49:05.3968024Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3968197Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3968204Z 
2025-01-10T13:49:05.3968405Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3968535Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3968695Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3968828Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3969050Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.3969169Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.3969331Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.3969443Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.3969560Z err_msg = None
2025-01-10T13:49:05.3969566Z 
2025-01-10T13:49:05.3969729Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3969852Z         if err_msg is None:
2025-01-10T13:49:05.3969988Z             if left.shape != right.shape:
2025-01-10T13:49:05.3970110Z                 raise_assert_detail(
2025-01-10T13:49:05.3970332Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3970443Z                 )
2025-01-10T13:49:05.3970542Z     
2025-01-10T13:49:05.3970651Z             diff = 0
2025-01-10T13:49:05.3970821Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3970960Z                 # count up differences
2025-01-10T13:49:05.3971218Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3971334Z                     diff += 1
2025-01-10T13:49:05.3971434Z     
2025-01-10T13:49:05.3971561Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3971761Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3972024Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3972173Z E           AssertionError: Series are different
2025-01-10T13:49:05.3972279Z E           
2025-01-10T13:49:05.3972429Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.3973014Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.3973930Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3974568Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.3974741Z 
2025-01-10T13:49:05.3975243Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3975578Z ____ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-nu] ____
2025-01-10T13:49:05.3975585Z 
2025-01-10T13:49:05.3975785Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3975991Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3976146Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3976355Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3976553Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3976703Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3976827Z err_msg = None
2025-01-10T13:49:05.3976834Z 
2025-01-10T13:49:05.3976999Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3977127Z         if err_msg is None:
2025-01-10T13:49:05.3977267Z             if left.shape != right.shape:
2025-01-10T13:49:05.3977397Z                 raise_assert_detail(
2025-01-10T13:49:05.3977630Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3977741Z                 )
2025-01-10T13:49:05.3977844Z     
2025-01-10T13:49:05.3977959Z             diff = 0
2025-01-10T13:49:05.3978139Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3978271Z                 # count up differences
2025-01-10T13:49:05.3978545Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3978653Z                     diff += 1
2025-01-10T13:49:05.3978760Z     
2025-01-10T13:49:05.3978879Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3979082Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3979344Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3979520Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3979627Z E           
2025-01-10T13:49:05.3979803Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3980212Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3980618Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3980780Z 
2025-01-10T13:49:05.3981255Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3981262Z 
2025-01-10T13:49:05.3981507Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3981519Z 
2025-01-10T13:49:05.3981851Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887f9e0>
2025-01-10T13:49:05.3982157Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>, attr = 'nu'
2025-01-10T13:49:05.3982163Z 
2025-01-10T13:49:05.3982362Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3982536Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3982652Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3982881Z         try:
2025-01-10T13:49:05.3983110Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3983251Z         except KeyError:
2025-01-10T13:49:05.3983464Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3983572Z     
2025-01-10T13:49:05.3983849Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3984005Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3984148Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3984361Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3984501Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3984642Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3984823Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3984830Z 
2025-01-10T13:49:05.3985030Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3985215Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3985456Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3985580Z     ???
2025-01-10T13:49:05.3985758Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3985764Z 
2025-01-10T13:49:05.3985878Z >   ???
2025-01-10T13:49:05.3986067Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3986163Z E   
2025-01-10T13:49:05.3986352Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3986514Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3986628Z E          ...
2025-01-10T13:49:05.3986758Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3986965Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3987142Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3987256Z E          ...
2025-01-10T13:49:05.3987386Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3987594Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.3987761Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.3987768Z 
2025-01-10T13:49:05.3987912Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.3988301Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-wavelength_cm] _
2025-01-10T13:49:05.3988309Z 
2025-01-10T13:49:05.3988514Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3988726Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3988873Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3989068Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.3989249Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.3989396Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.3989668Z err_msg = None
2025-01-10T13:49:05.3989675Z 
2025-01-10T13:49:05.3989855Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.3989986Z         if err_msg is None:
2025-01-10T13:49:05.3990131Z             if left.shape != right.shape:
2025-01-10T13:49:05.3990272Z                 raise_assert_detail(
2025-01-10T13:49:05.3990492Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.3990599Z                 )
2025-01-10T13:49:05.3990699Z     
2025-01-10T13:49:05.3990808Z             diff = 0
2025-01-10T13:49:05.3990970Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.3991101Z                 # count up differences
2025-01-10T13:49:05.3991353Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.3991464Z                     diff += 1
2025-01-10T13:49:05.3991715Z     
2025-01-10T13:49:05.3991856Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.3992062Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.3992325Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.3992488Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.3992588Z E           
2025-01-10T13:49:05.3992757Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.3993164Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3993728Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.3993756Z 
2025-01-10T13:49:05.3994274Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.3994282Z 
2025-01-10T13:49:05.3994531Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.3994538Z 
2025-01-10T13:49:05.3994890Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887faa0>
2025-01-10T13:49:05.3995152Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>
2025-01-10T13:49:05.3995272Z attr = 'wavelength_cm'
2025-01-10T13:49:05.3995278Z 
2025-01-10T13:49:05.3995478Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.3995654Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.3995779Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.3995885Z         try:
2025-01-10T13:49:05.3996099Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.3996226Z         except KeyError:
2025-01-10T13:49:05.3996444Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.3996551Z     
2025-01-10T13:49:05.3996692Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.3996833Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.3996971Z             if attr == "selected_atoms":
2025-01-10T13:49:05.3997178Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.3997310Z             elif actual.ndim == 1:
2025-01-10T13:49:05.3997445Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.3997628Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.3997635Z 
2025-01-10T13:49:05.3997844Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.3998024Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3998248Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.3998537Z     ???
2025-01-10T13:49:05.3998718Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.3998725Z 
2025-01-10T13:49:05.3998824Z >   ???
2025-01-10T13:49:05.3999022Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.3999121Z E   
2025-01-10T13:49:05.3999320Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.3999497Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.3999618Z E          ...
2025-01-10T13:49:05.3999748Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.3999943Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4000121Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4000234Z E          ...
2025-01-10T13:49:05.4000523Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4000720Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4000881Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4000888Z 
2025-01-10T13:49:05.4001028Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4001359Z ___ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-f_lu] ___
2025-01-10T13:49:05.4001365Z 
2025-01-10T13:49:05.4001572Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4001788Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4001940Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4002160Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4002372Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4002532Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4002666Z err_msg = None
2025-01-10T13:49:05.4002672Z 
2025-01-10T13:49:05.4002848Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4002979Z         if err_msg is None:
2025-01-10T13:49:05.4003129Z             if left.shape != right.shape:
2025-01-10T13:49:05.4003273Z                 raise_assert_detail(
2025-01-10T13:49:05.4003514Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4003754Z                 )
2025-01-10T13:49:05.4003853Z     
2025-01-10T13:49:05.4003961Z             diff = 0
2025-01-10T13:49:05.4004122Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4004256Z                 # count up differences
2025-01-10T13:49:05.4004525Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4004636Z                     diff += 1
2025-01-10T13:49:05.4004747Z     
2025-01-10T13:49:05.4004883Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4005118Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4005407Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4005593Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4005707Z E           
2025-01-10T13:49:05.4005894Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4006358Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4006828Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4006993Z 
2025-01-10T13:49:05.4007539Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4007547Z 
2025-01-10T13:49:05.4007831Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4007838Z 
2025-01-10T13:49:05.4008218Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf887fb60>
2025-01-10T13:49:05.4008562Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>, attr = 'f_lu'
2025-01-10T13:49:05.4008575Z 
2025-01-10T13:49:05.4008798Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4009000Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4009132Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4009402Z         try:
2025-01-10T13:49:05.4009632Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4009768Z         except KeyError:
2025-01-10T13:49:05.4009992Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4010109Z     
2025-01-10T13:49:05.4010248Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4010405Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4010536Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4010728Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4010859Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4010995Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4011171Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4011179Z 
2025-01-10T13:49:05.4011386Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4011578Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4011828Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4011949Z     ???
2025-01-10T13:49:05.4012128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4012135Z 
2025-01-10T13:49:05.4012243Z >   ???
2025-01-10T13:49:05.4012448Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4012560Z E   
2025-01-10T13:49:05.4012770Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4012954Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4013075Z E          ...
2025-01-10T13:49:05.4013216Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4013432Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4013768Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4013896Z E          ...
2025-01-10T13:49:05.4014037Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4014250Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4014414Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4014421Z 
2025-01-10T13:49:05.4014550Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4014912Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs] _
2025-01-10T13:49:05.4014919Z 
2025-01-10T13:49:05.4015140Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4015355Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4015509Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4015737Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4015942Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4016107Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4016382Z err_msg = None
2025-01-10T13:49:05.4016389Z 
2025-01-10T13:49:05.4016570Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4016697Z         if err_msg is None:
2025-01-10T13:49:05.4016853Z             if left.shape != right.shape:
2025-01-10T13:49:05.4016986Z                 raise_assert_detail(
2025-01-10T13:49:05.4017229Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4017350Z                 )
2025-01-10T13:49:05.4017461Z     
2025-01-10T13:49:05.4017579Z             diff = 0
2025-01-10T13:49:05.4017759Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4017905Z                 # count up differences
2025-01-10T13:49:05.4018193Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4018327Z                     diff += 1
2025-01-10T13:49:05.4018615Z     
2025-01-10T13:49:05.4018760Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4018986Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4019279Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4019459Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4019575Z E           
2025-01-10T13:49:05.4019751Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4020161Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4020587Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4020608Z 
2025-01-10T13:49:05.4021076Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4021089Z 
2025-01-10T13:49:05.4021341Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4021347Z 
2025-01-10T13:49:05.4021698Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a8320>
2025-01-10T13:49:05.4021974Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>
2025-01-10T13:49:05.4022102Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4022107Z 
2025-01-10T13:49:05.4022302Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4022473Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4022601Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4022712Z         try:
2025-01-10T13:49:05.4022946Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4023080Z         except KeyError:
2025-01-10T13:49:05.4023310Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4023416Z     
2025-01-10T13:49:05.4023558Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4023834Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4023981Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4024181Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4024310Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4024443Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4024610Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4024716Z             else:
2025-01-10T13:49:05.4024873Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4025053Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4025206Z 
2025-01-10T13:49:05.4025397Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4025568Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4025781Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4025885Z     ???
2025-01-10T13:49:05.4026049Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4026055Z 
2025-01-10T13:49:05.4026164Z >   ???
2025-01-10T13:49:05.4026363Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4026477Z E   
2025-01-10T13:49:05.4026686Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4026871Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4026987Z E          ...
2025-01-10T13:49:05.4027129Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4027491Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4027688Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4027806Z E          ...
2025-01-10T13:49:05.4027945Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4028156Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4028322Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4028329Z 
2025-01-10T13:49:05.4028478Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4028861Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-beta_sobolev] _
2025-01-10T13:49:05.4028868Z 
2025-01-10T13:49:05.4029061Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4029246Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4029386Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4029594Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4029794Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4029939Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4030049Z err_msg = None
2025-01-10T13:49:05.4030054Z 
2025-01-10T13:49:05.4030228Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4030355Z         if err_msg is None:
2025-01-10T13:49:05.4030508Z             if left.shape != right.shape:
2025-01-10T13:49:05.4030642Z                 raise_assert_detail(
2025-01-10T13:49:05.4030884Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4030994Z                 )
2025-01-10T13:49:05.4031112Z     
2025-01-10T13:49:05.4031230Z             diff = 0
2025-01-10T13:49:05.4031416Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4031566Z                 # count up differences
2025-01-10T13:49:05.4031865Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4031994Z                     diff += 1
2025-01-10T13:49:05.4032104Z     
2025-01-10T13:49:05.4032250Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4032474Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4032770Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4032952Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4033069Z E           
2025-01-10T13:49:05.4033251Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4033852Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4034512Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4034522Z 
2025-01-10T13:49:05.4035049Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4035056Z 
2025-01-10T13:49:05.4035337Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4035344Z 
2025-01-10T13:49:05.4035720Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a83e0>
2025-01-10T13:49:05.4036005Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>
2025-01-10T13:49:05.4036286Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4036292Z 
2025-01-10T13:49:05.4036518Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4036716Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4036848Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4036966Z         try:
2025-01-10T13:49:05.4037195Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4037329Z         except KeyError:
2025-01-10T13:49:05.4037555Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4037670Z     
2025-01-10T13:49:05.4037809Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4037970Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4038109Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4038335Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4038480Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4038624Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4038815Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4038938Z             else:
2025-01-10T13:49:05.4039095Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4039272Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4039278Z 
2025-01-10T13:49:05.4039487Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4039672Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4039922Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4040033Z     ???
2025-01-10T13:49:05.4040222Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4040229Z 
2025-01-10T13:49:05.4040347Z >   ???
2025-01-10T13:49:05.4040555Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4040670Z E   
2025-01-10T13:49:05.4040883Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4041074Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4041197Z E          ...
2025-01-10T13:49:05.4041341Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4041552Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4041739Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4041853Z E          ...
2025-01-10T13:49:05.4041996Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4042201Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4042376Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4042383Z 
2025-01-10T13:49:05.4042530Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4042895Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-j_blues] __
2025-01-10T13:49:05.4042902Z 
2025-01-10T13:49:05.4043120Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4043339Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4043786Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4044014Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4044222Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4044372Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4044499Z err_msg = None
2025-01-10T13:49:05.4044505Z 
2025-01-10T13:49:05.4044686Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4044817Z         if err_msg is None:
2025-01-10T13:49:05.4044973Z             if left.shape != right.shape:
2025-01-10T13:49:05.4045108Z                 raise_assert_detail(
2025-01-10T13:49:05.4045349Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4045615Z                 )
2025-01-10T13:49:05.4045734Z     
2025-01-10T13:49:05.4045858Z             diff = 0
2025-01-10T13:49:05.4046052Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4046189Z                 # count up differences
2025-01-10T13:49:05.4046483Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4046605Z                     diff += 1
2025-01-10T13:49:05.4046719Z     
2025-01-10T13:49:05.4046860Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4047088Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4047381Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4047562Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4047682Z E           
2025-01-10T13:49:05.4047856Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4048291Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4048749Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4048765Z 
2025-01-10T13:49:05.4049261Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4049269Z 
2025-01-10T13:49:05.4049558Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4049572Z 
2025-01-10T13:49:05.4049929Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a8560>
2025-01-10T13:49:05.4050223Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbbd98b0>
2025-01-10T13:49:05.4050345Z attr = 'j_blues'
2025-01-10T13:49:05.4050351Z 
2025-01-10T13:49:05.4050581Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4050768Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4050908Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4051022Z         try:
2025-01-10T13:49:05.4051245Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4051377Z         except KeyError:
2025-01-10T13:49:05.4051604Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4051720Z     
2025-01-10T13:49:05.4051859Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4052016Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4052159Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4052391Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4052704Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4052852Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4053029Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4053150Z             else:
2025-01-10T13:49:05.4053299Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4053478Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4053484Z 
2025-01-10T13:49:05.4053823Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4053992Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4054212Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4054308Z     ???
2025-01-10T13:49:05.4054474Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4054628Z 
2025-01-10T13:49:05.4054730Z >   ???
2025-01-10T13:49:05.4054924Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4055032Z E   
2025-01-10T13:49:05.4055230Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4055409Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4055526Z E          ...
2025-01-10T13:49:05.4055668Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4055877Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4056062Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4056176Z E          ...
2025-01-10T13:49:05.4056321Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4056528Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4056703Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4056709Z 
2025-01-10T13:49:05.4056852Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4057225Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines] ___
2025-01-10T13:49:05.4057239Z 
2025-01-10T13:49:05.4057450Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4057672Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4057833Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4058052Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4058263Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4058414Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4058540Z err_msg = None
2025-01-10T13:49:05.4058546Z 
2025-01-10T13:49:05.4058720Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4058855Z         if err_msg is None:
2025-01-10T13:49:05.4059010Z             if left.shape != right.shape:
2025-01-10T13:49:05.4059159Z                 raise_assert_detail(
2025-01-10T13:49:05.4059395Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4059515Z                 )
2025-01-10T13:49:05.4059625Z     
2025-01-10T13:49:05.4059740Z             diff = 0
2025-01-10T13:49:05.4059923Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4060061Z                 # count up differences
2025-01-10T13:49:05.4060351Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4060476Z                     diff += 1
2025-01-10T13:49:05.4060591Z     
2025-01-10T13:49:05.4060728Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4060953Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4061242Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4061440Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4061716Z E           
2025-01-10T13:49:05.4061903Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4062361Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4062839Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4062847Z 
2025-01-10T13:49:05.4063384Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4063523Z 
2025-01-10T13:49:05.4063966Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4063982Z 
2025-01-10T13:49:05.4064359Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a92e0>
2025-01-10T13:49:05.4064639Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>
2025-01-10T13:49:05.4064760Z attr = 'lines'
2025-01-10T13:49:05.4064766Z 
2025-01-10T13:49:05.4064995Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4065184Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4065326Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4065436Z         try:
2025-01-10T13:49:05.4065665Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4065794Z         except KeyError:
2025-01-10T13:49:05.4066029Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4066148Z     
2025-01-10T13:49:05.4066294Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4066458Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4066599Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4066823Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4066959Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4067107Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4067284Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4067405Z             else:
2025-01-10T13:49:05.4067557Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4067738Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4067746Z 
2025-01-10T13:49:05.4067954Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4068145Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4068397Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4068516Z     ???
2025-01-10T13:49:05.4068710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4068716Z 
2025-01-10T13:49:05.4068825Z >   ???
2025-01-10T13:49:05.4069039Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4069151Z E   
2025-01-10T13:49:05.4069370Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4069549Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4069672Z E          ...
2025-01-10T13:49:05.4069813Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4070014Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4070196Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4070303Z E          ...
2025-01-10T13:49:05.4070431Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4070652Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4070824Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4070983Z 
2025-01-10T13:49:05.4071128Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4071579Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index] _
2025-01-10T13:49:05.4071587Z 
2025-01-10T13:49:05.4071951Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a93a0>
2025-01-10T13:49:05.4072196Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>
2025-01-10T13:49:05.4072321Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4072328Z 
2025-01-10T13:49:05.4072530Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4072701Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4072844Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4072962Z         try:
2025-01-10T13:49:05.4073189Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4073511Z         except KeyError:
2025-01-10T13:49:05.4073873Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4073988Z     
2025-01-10T13:49:05.4074113Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4074263Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4074398Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4074621Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4074758Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4074906Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4075080Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4075087Z 
2025-01-10T13:49:05.4075298Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4075492Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4075498Z 
2025-01-10T13:49:05.4075713Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4075844Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4076000Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4076120Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4076331Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4076459Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4076625Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4076756Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4076877Z err_msg = None
2025-01-10T13:49:05.4076889Z 
2025-01-10T13:49:05.4077063Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4077196Z         if err_msg is None:
2025-01-10T13:49:05.4077341Z             if left.shape != right.shape:
2025-01-10T13:49:05.4077478Z                 raise_assert_detail(
2025-01-10T13:49:05.4077723Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4077850Z                 )
2025-01-10T13:49:05.4077960Z     
2025-01-10T13:49:05.4078083Z             diff = 0
2025-01-10T13:49:05.4078259Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4078397Z                 # count up differences
2025-01-10T13:49:05.4078657Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4078772Z                     diff += 1
2025-01-10T13:49:05.4078872Z     
2025-01-10T13:49:05.4079002Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4079211Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4079509Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4079683Z E           AssertionError: Series are different
2025-01-10T13:49:05.4079796Z E           
2025-01-10T13:49:05.4079972Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4080799Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4081394Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4081990Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4082156Z 
2025-01-10T13:49:05.4082695Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4083154Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index] _
2025-01-10T13:49:05.4083162Z 
2025-01-10T13:49:05.4083547Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a9460>
2025-01-10T13:49:05.4083969Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>
2025-01-10T13:49:05.4084125Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4084131Z 
2025-01-10T13:49:05.4084348Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4084546Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4084685Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4084803Z         try:
2025-01-10T13:49:05.4085037Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4085170Z         except KeyError:
2025-01-10T13:49:05.4085396Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4085515Z     
2025-01-10T13:49:05.4085652Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4085812Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4085960Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4086176Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4086317Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4086459Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4086641Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4086655Z 
2025-01-10T13:49:05.4086857Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4087055Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4087061Z 
2025-01-10T13:49:05.4087285Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4087426Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4087604Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4087738Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4087974Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4088104Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4088281Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4088408Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4088537Z err_msg = None
2025-01-10T13:49:05.4088551Z 
2025-01-10T13:49:05.4088724Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4089015Z         if err_msg is None:
2025-01-10T13:49:05.4089168Z             if left.shape != right.shape:
2025-01-10T13:49:05.4089311Z                 raise_assert_detail(
2025-01-10T13:49:05.4089560Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4089679Z                 )
2025-01-10T13:49:05.4089790Z     
2025-01-10T13:49:05.4089915Z             diff = 0
2025-01-10T13:49:05.4090102Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4090243Z                 # count up differences
2025-01-10T13:49:05.4090539Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4090662Z                     diff += 1
2025-01-10T13:49:05.4090779Z     
2025-01-10T13:49:05.4090917Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4091145Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4091585Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4091763Z E           AssertionError: Series are different
2025-01-10T13:49:05.4091877Z E           
2025-01-10T13:49:05.4092047Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4092706Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4093315Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4094047Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4094058Z 
2025-01-10T13:49:05.4094532Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4094840Z ____ TestPlasma.test_plasma_properties[disable_electron_scattering:True-nu] ____
2025-01-10T13:49:05.4094846Z 
2025-01-10T13:49:05.4095038Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4095227Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4095378Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4095567Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4095750Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4095886Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4095988Z err_msg = None
2025-01-10T13:49:05.4095994Z 
2025-01-10T13:49:05.4096153Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4096269Z         if err_msg is None:
2025-01-10T13:49:05.4096404Z             if left.shape != right.shape:
2025-01-10T13:49:05.4096521Z                 raise_assert_detail(
2025-01-10T13:49:05.4096732Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4096836Z                 )
2025-01-10T13:49:05.4097090Z     
2025-01-10T13:49:05.4097195Z             diff = 0
2025-01-10T13:49:05.4097362Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4097486Z                 # count up differences
2025-01-10T13:49:05.4097748Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4097860Z                     diff += 1
2025-01-10T13:49:05.4097958Z     
2025-01-10T13:49:05.4098089Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4098285Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4098545Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4098710Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4098817Z E           
2025-01-10T13:49:05.4098977Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4099565Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4099989Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4099996Z 
2025-01-10T13:49:05.4100467Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4100474Z 
2025-01-10T13:49:05.4100735Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4100748Z 
2025-01-10T13:49:05.4101088Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a96a0>
2025-01-10T13:49:05.4101407Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>, attr = 'nu'
2025-01-10T13:49:05.4101414Z 
2025-01-10T13:49:05.4101628Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4101799Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4101928Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4102031Z         try:
2025-01-10T13:49:05.4102243Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4102358Z         except KeyError:
2025-01-10T13:49:05.4102570Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4102670Z     
2025-01-10T13:49:05.4102805Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4102946Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4103085Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4103301Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4103445Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4103585Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4103883Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4103891Z 
2025-01-10T13:49:05.4104089Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4104266Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4104503Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4104608Z     ???
2025-01-10T13:49:05.4104781Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4104788Z 
2025-01-10T13:49:05.4104892Z >   ???
2025-01-10T13:49:05.4105092Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4105197Z E   
2025-01-10T13:49:05.4105407Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4105594Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4105862Z E          ...
2025-01-10T13:49:05.4106006Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4106211Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4106390Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4106498Z E          ...
2025-01-10T13:49:05.4106634Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4106832Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4106996Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4107002Z 
2025-01-10T13:49:05.4107137Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4107524Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-wavelength_cm] _
2025-01-10T13:49:05.4107532Z 
2025-01-10T13:49:05.4107732Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4108095Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4108254Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4108464Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4108668Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4108812Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4108932Z err_msg = None
2025-01-10T13:49:05.4108938Z 
2025-01-10T13:49:05.4109108Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4109237Z         if err_msg is None:
2025-01-10T13:49:05.4109378Z             if left.shape != right.shape:
2025-01-10T13:49:05.4109512Z                 raise_assert_detail(
2025-01-10T13:49:05.4109744Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4109859Z                 )
2025-01-10T13:49:05.4109977Z     
2025-01-10T13:49:05.4110086Z             diff = 0
2025-01-10T13:49:05.4110263Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4110393Z                 # count up differences
2025-01-10T13:49:05.4110670Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4110788Z                     diff += 1
2025-01-10T13:49:05.4110897Z     
2025-01-10T13:49:05.4111032Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4111262Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4111548Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4111733Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4111843Z E           
2025-01-10T13:49:05.4112026Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4112496Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4112967Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4112976Z 
2025-01-10T13:49:05.4113504Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4113512Z 
2025-01-10T13:49:05.4113936Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4113953Z 
2025-01-10T13:49:05.4114334Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a9760>
2025-01-10T13:49:05.4114769Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>
2025-01-10T13:49:05.4114900Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4114906Z 
2025-01-10T13:49:05.4115131Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4115316Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4115454Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4115566Z         try:
2025-01-10T13:49:05.4115798Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4115925Z         except KeyError:
2025-01-10T13:49:05.4116165Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4116281Z     
2025-01-10T13:49:05.4116420Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4116580Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4116872Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4117101Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4117246Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4117394Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4117578Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4117586Z 
2025-01-10T13:49:05.4117795Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4117984Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4118231Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4118344Z     ???
2025-01-10T13:49:05.4118532Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4118539Z 
2025-01-10T13:49:05.4118654Z >   ???
2025-01-10T13:49:05.4118865Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4118982Z E   
2025-01-10T13:49:05.4119204Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4119397Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4119513Z E          ...
2025-01-10T13:49:05.4119659Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4119870Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4120059Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4120172Z E          ...
2025-01-10T13:49:05.4120319Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4120525Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4120701Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4120708Z 
2025-01-10T13:49:05.4120858Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4121214Z ___ TestPlasma.test_plasma_properties[disable_electron_scattering:True-f_lu] ___
2025-01-10T13:49:05.4121221Z 
2025-01-10T13:49:05.4121449Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4121668Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4121808Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4122009Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4122197Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4122327Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4122436Z err_msg = None
2025-01-10T13:49:05.4122441Z 
2025-01-10T13:49:05.4122603Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4122715Z         if err_msg is None:
2025-01-10T13:49:05.4122850Z             if left.shape != right.shape:
2025-01-10T13:49:05.4122964Z                 raise_assert_detail(
2025-01-10T13:49:05.4123199Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4123423Z                 )
2025-01-10T13:49:05.4123539Z     
2025-01-10T13:49:05.4123791Z             diff = 0
2025-01-10T13:49:05.4123982Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4124123Z                 # count up differences
2025-01-10T13:49:05.4124420Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4124545Z                     diff += 1
2025-01-10T13:49:05.4124661Z     
2025-01-10T13:49:05.4124802Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4125031Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4125332Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4125518Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4125642Z E           
2025-01-10T13:49:05.4125823Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4126446Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4126927Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4126946Z 
2025-01-10T13:49:05.4127482Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4127491Z 
2025-01-10T13:49:05.4127783Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4127798Z 
2025-01-10T13:49:05.4128185Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a9820>
2025-01-10T13:49:05.4128546Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>, attr = 'f_lu'
2025-01-10T13:49:05.4128553Z 
2025-01-10T13:49:05.4128778Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4128975Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4129118Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4129236Z         try:
2025-01-10T13:49:05.4129477Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4129608Z         except KeyError:
2025-01-10T13:49:05.4129845Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4129958Z     
2025-01-10T13:49:05.4130104Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4130256Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4130410Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4130629Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4130780Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4130924Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4131110Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4131116Z 
2025-01-10T13:49:05.4131327Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4131512Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4131760Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4131873Z     ???
2025-01-10T13:49:05.4132060Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4132066Z 
2025-01-10T13:49:05.4132177Z >   ???
2025-01-10T13:49:05.4132392Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4132504Z E   
2025-01-10T13:49:05.4132729Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4132909Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4133204Z E          ...
2025-01-10T13:49:05.4133347Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4133565Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4133895Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4134013Z E          ...
2025-01-10T13:49:05.4134154Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4134358Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4134533Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4134541Z 
2025-01-10T13:49:05.4134684Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4135087Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-tau_sobolevs] _
2025-01-10T13:49:05.4135094Z 
2025-01-10T13:49:05.4135460Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4135687Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4135840Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4136069Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4136282Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4136435Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4136561Z err_msg = None
2025-01-10T13:49:05.4136567Z 
2025-01-10T13:49:05.4136746Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4136884Z         if err_msg is None:
2025-01-10T13:49:05.4137033Z             if left.shape != right.shape:
2025-01-10T13:49:05.4137172Z                 raise_assert_detail(
2025-01-10T13:49:05.4137410Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4137538Z                 )
2025-01-10T13:49:05.4137656Z     
2025-01-10T13:49:05.4137779Z             diff = 0
2025-01-10T13:49:05.4137964Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4138105Z                 # count up differences
2025-01-10T13:49:05.4138398Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4138523Z                     diff += 1
2025-01-10T13:49:05.4138645Z     
2025-01-10T13:49:05.4138787Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4139023Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4139315Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4139504Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4139620Z E           
2025-01-10T13:49:05.4139813Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4140277Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4140748Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4140757Z 
2025-01-10T13:49:05.4141290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4141298Z 
2025-01-10T13:49:05.4141575Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4141599Z 
2025-01-10T13:49:05.4141977Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88a9fa0>
2025-01-10T13:49:05.4142444Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>
2025-01-10T13:49:05.4142570Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4142576Z 
2025-01-10T13:49:05.4142799Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4142970Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4143094Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4143200Z         try:
2025-01-10T13:49:05.4143423Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4143540Z         except KeyError:
2025-01-10T13:49:05.4143909Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4144015Z     
2025-01-10T13:49:05.4144141Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4144281Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4144566Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4144772Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4144912Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4145060Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4145229Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4145350Z             else:
2025-01-10T13:49:05.4145496Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4145669Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4145676Z 
2025-01-10T13:49:05.4145879Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4146068Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4146305Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4146424Z     ???
2025-01-10T13:49:05.4146605Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4146624Z 
2025-01-10T13:49:05.4146735Z >   ???
2025-01-10T13:49:05.4146955Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4147057Z E   
2025-01-10T13:49:05.4147264Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4147441Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4147554Z E          ...
2025-01-10T13:49:05.4147680Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4147888Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4148053Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4148161Z E          ...
2025-01-10T13:49:05.4148288Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4148476Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4148634Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4148653Z 
2025-01-10T13:49:05.4148789Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4149174Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-beta_sobolev] _
2025-01-10T13:49:05.4149188Z 
2025-01-10T13:49:05.4149387Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4149577Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4149731Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4149944Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4150122Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4150271Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4150387Z err_msg = None
2025-01-10T13:49:05.4150392Z 
2025-01-10T13:49:05.4150542Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4150668Z         if err_msg is None:
2025-01-10T13:49:05.4150816Z             if left.shape != right.shape:
2025-01-10T13:49:05.4151107Z                 raise_assert_detail(
2025-01-10T13:49:05.4151333Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4151443Z                 )
2025-01-10T13:49:05.4151546Z     
2025-01-10T13:49:05.4151671Z             diff = 0
2025-01-10T13:49:05.4151839Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4151976Z                 # count up differences
2025-01-10T13:49:05.4152251Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4152378Z                     diff += 1
2025-01-10T13:49:05.4152476Z     
2025-01-10T13:49:05.4152603Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4152813Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4153066Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4153343Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4153451Z E           
2025-01-10T13:49:05.4153781Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4154189Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4154595Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4154603Z 
2025-01-10T13:49:05.4155089Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4155104Z 
2025-01-10T13:49:05.4155363Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4155369Z 
2025-01-10T13:49:05.4155738Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88aa060>
2025-01-10T13:49:05.4156005Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>
2025-01-10T13:49:05.4156126Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4156132Z 
2025-01-10T13:49:05.4156330Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4156502Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4156623Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4156732Z         try:
2025-01-10T13:49:05.4156966Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4157093Z         except KeyError:
2025-01-10T13:49:05.4157303Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4157409Z     
2025-01-10T13:49:05.4157558Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4157689Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4157819Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4158011Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4158137Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4158264Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4158424Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4158533Z             else:
2025-01-10T13:49:05.4158669Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4158833Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4158839Z 
2025-01-10T13:49:05.4159015Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4159185Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4159416Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4159672Z     ???
2025-01-10T13:49:05.4159842Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4159849Z 
2025-01-10T13:49:05.4159962Z >   ???
2025-01-10T13:49:05.4160167Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4160278Z E   
2025-01-10T13:49:05.4160482Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4160664Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4160785Z E          ...
2025-01-10T13:49:05.4160919Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4161130Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4161308Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4161426Z E          ...
2025-01-10T13:49:05.4161562Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4161924Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4162096Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4162103Z 
2025-01-10T13:49:05.4162241Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4162560Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-j_blues] __
2025-01-10T13:49:05.4162571Z 
2025-01-10T13:49:05.4162755Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4162948Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4163082Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4163297Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4163494Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4163783Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4163908Z err_msg = None
2025-01-10T13:49:05.4163914Z 
2025-01-10T13:49:05.4164077Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4164192Z         if err_msg is None:
2025-01-10T13:49:05.4164342Z             if left.shape != right.shape:
2025-01-10T13:49:05.4164478Z                 raise_assert_detail(
2025-01-10T13:49:05.4164709Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4164823Z                 )
2025-01-10T13:49:05.4164924Z     
2025-01-10T13:49:05.4165039Z             diff = 0
2025-01-10T13:49:05.4165210Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4165355Z                 # count up differences
2025-01-10T13:49:05.4165639Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4165765Z                     diff += 1
2025-01-10T13:49:05.4165878Z     
2025-01-10T13:49:05.4166014Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4166229Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4166506Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4166677Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4166782Z E           
2025-01-10T13:49:05.4166946Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4167353Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4167787Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4167976Z 
2025-01-10T13:49:05.4168475Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4168489Z 
2025-01-10T13:49:05.4168741Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4168747Z 
2025-01-10T13:49:05.4169081Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88aa1e0>
2025-01-10T13:49:05.4169328Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81acb90>
2025-01-10T13:49:05.4169444Z attr = 'j_blues'
2025-01-10T13:49:05.4169450Z 
2025-01-10T13:49:05.4169654Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4169845Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4169977Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4170239Z         try:
2025-01-10T13:49:05.4170451Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4170592Z         except KeyError:
2025-01-10T13:49:05.4170810Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4170907Z     
2025-01-10T13:49:05.4171032Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4171162Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4171290Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4171483Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4171609Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4171739Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4171910Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4172012Z             else:
2025-01-10T13:49:05.4172150Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4172312Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4172326Z 
2025-01-10T13:49:05.4172520Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4172683Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4172909Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4173015Z     ???
2025-01-10T13:49:05.4173179Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4173185Z 
2025-01-10T13:49:05.4173288Z >   ???
2025-01-10T13:49:05.4173516Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4173767Z E   
2025-01-10T13:49:05.4173957Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4174129Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4174231Z E          ...
2025-01-10T13:49:05.4174360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4174545Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4174725Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4174842Z E          ...
2025-01-10T13:49:05.4174971Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4175169Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4175326Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4175332Z 
2025-01-10T13:49:05.4175465Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4175797Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines] __
2025-01-10T13:49:05.4175804Z 
2025-01-10T13:49:05.4176007Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4176206Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4176355Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4176568Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4176942Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4177092Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4177205Z err_msg = None
2025-01-10T13:49:05.4177211Z 
2025-01-10T13:49:05.4177385Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4177507Z         if err_msg is None:
2025-01-10T13:49:05.4177653Z             if left.shape != right.shape:
2025-01-10T13:49:05.4177778Z                 raise_assert_detail(
2025-01-10T13:49:05.4178005Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4178111Z                 )
2025-01-10T13:49:05.4178217Z     
2025-01-10T13:49:05.4178325Z             diff = 0
2025-01-10T13:49:05.4178495Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4178621Z                 # count up differences
2025-01-10T13:49:05.4179041Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4179166Z                     diff += 1
2025-01-10T13:49:05.4179266Z     
2025-01-10T13:49:05.4179397Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4179590Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4179850Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4180014Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4180124Z E           
2025-01-10T13:49:05.4180292Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4180721Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4181166Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4181181Z 
2025-01-10T13:49:05.4181670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4181678Z 
2025-01-10T13:49:05.4181943Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4181950Z 
2025-01-10T13:49:05.4182299Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88aaf60>
2025-01-10T13:49:05.4182566Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>
2025-01-10T13:49:05.4182681Z attr = 'lines'
2025-01-10T13:49:05.4182692Z 
2025-01-10T13:49:05.4182902Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4183089Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4183213Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4183324Z         try:
2025-01-10T13:49:05.4183527Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4183795Z         except KeyError:
2025-01-10T13:49:05.4183997Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4184105Z     
2025-01-10T13:49:05.4184232Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4184372Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4184501Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4184717Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4184845Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4184977Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4185154Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4185258Z             else:
2025-01-10T13:49:05.4185556Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4185717Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4185723Z 
2025-01-10T13:49:05.4185918Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4186089Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4186314Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4186416Z     ???
2025-01-10T13:49:05.4186593Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4186599Z 
2025-01-10T13:49:05.4186711Z >   ???
2025-01-10T13:49:05.4186902Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4187009Z E   
2025-01-10T13:49:05.4187198Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4187500Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4187604Z E          ...
2025-01-10T13:49:05.4187737Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4187922Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4188087Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4188186Z E          ...
2025-01-10T13:49:05.4188308Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4188485Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4188636Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4188642Z 
2025-01-10T13:49:05.4188773Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4189167Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index] _
2025-01-10T13:49:05.4189173Z 
2025-01-10T13:49:05.4189502Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88ab020>
2025-01-10T13:49:05.4189747Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>
2025-01-10T13:49:05.4189887Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4189893Z 
2025-01-10T13:49:05.4190081Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4190248Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4190361Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4190464Z         try:
2025-01-10T13:49:05.4190663Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4190777Z         except KeyError:
2025-01-10T13:49:05.4190974Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4191068Z     
2025-01-10T13:49:05.4191191Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4191326Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4191453Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4191644Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4191781Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4191919Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4192096Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4192103Z 
2025-01-10T13:49:05.4192298Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4192485Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4192492Z 
2025-01-10T13:49:05.4192716Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4192857Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4193037Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4193168Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4193400Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4193522Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4193837Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4194119Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4194237Z err_msg = None
2025-01-10T13:49:05.4194242Z 
2025-01-10T13:49:05.4194408Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4194531Z         if err_msg is None:
2025-01-10T13:49:05.4194662Z             if left.shape != right.shape:
2025-01-10T13:49:05.4194789Z                 raise_assert_detail(
2025-01-10T13:49:05.4195002Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4195099Z                 )
2025-01-10T13:49:05.4195198Z     
2025-01-10T13:49:05.4195301Z             diff = 0
2025-01-10T13:49:05.4195461Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4195581Z                 # count up differences
2025-01-10T13:49:05.4195839Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4196123Z                     diff += 1
2025-01-10T13:49:05.4196241Z     
2025-01-10T13:49:05.4196367Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4196564Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4196834Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4197004Z E           AssertionError: Series are different
2025-01-10T13:49:05.4197114Z E           
2025-01-10T13:49:05.4197262Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4197856Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4198370Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4198912Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4198920Z 
2025-01-10T13:49:05.4199437Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4199874Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index] _
2025-01-10T13:49:05.4199886Z 
2025-01-10T13:49:05.4200263Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88ab0e0>
2025-01-10T13:49:05.4200534Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>
2025-01-10T13:49:05.4200688Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4200694Z 
2025-01-10T13:49:05.4200897Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4201075Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4201201Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4201301Z         try:
2025-01-10T13:49:05.4201519Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4201640Z         except KeyError:
2025-01-10T13:49:05.4201861Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4201969Z     
2025-01-10T13:49:05.4202119Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4202262Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4202521Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4202723Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4202848Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4202977Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4203150Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4203156Z 
2025-01-10T13:49:05.4203348Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4203524Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4203530Z 
2025-01-10T13:49:05.4203872Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4203997Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4204160Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4204448Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4204676Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4204808Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4204964Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4205079Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4205182Z err_msg = None
2025-01-10T13:49:05.4205188Z 
2025-01-10T13:49:05.4205343Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4205459Z         if err_msg is None:
2025-01-10T13:49:05.4205592Z             if left.shape != right.shape:
2025-01-10T13:49:05.4205706Z                 raise_assert_detail(
2025-01-10T13:49:05.4205925Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4206023Z                 )
2025-01-10T13:49:05.4206124Z     
2025-01-10T13:49:05.4206237Z             diff = 0
2025-01-10T13:49:05.4206400Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4206528Z                 # count up differences
2025-01-10T13:49:05.4206799Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4206915Z                     diff += 1
2025-01-10T13:49:05.4207019Z     
2025-01-10T13:49:05.4207147Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4207342Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4207606Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4207758Z E           AssertionError: Series are different
2025-01-10T13:49:05.4207869Z E           
2025-01-10T13:49:05.4208016Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4208623Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4209222Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4209812Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4209976Z 
2025-01-10T13:49:05.4210452Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4210759Z ___ TestPlasma.test_plasma_properties[disable_electron_scattering:False-nu] ____
2025-01-10T13:49:05.4210764Z 
2025-01-10T13:49:05.4210944Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4211130Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4211264Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4211458Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4211651Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4211913Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4212041Z err_msg = None
2025-01-10T13:49:05.4212055Z 
2025-01-10T13:49:05.4212232Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4212368Z         if err_msg is None:
2025-01-10T13:49:05.4212519Z             if left.shape != right.shape:
2025-01-10T13:49:05.4212662Z                 raise_assert_detail(
2025-01-10T13:49:05.4212901Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4213025Z                 )
2025-01-10T13:49:05.4213138Z     
2025-01-10T13:49:05.4213261Z             diff = 0
2025-01-10T13:49:05.4228613Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4228793Z                 # count up differences
2025-01-10T13:49:05.4229065Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4229172Z                     diff += 1
2025-01-10T13:49:05.4229281Z     
2025-01-10T13:49:05.4229404Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4229616Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4229870Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4230029Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4230129Z E           
2025-01-10T13:49:05.4230289Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4230687Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4231088Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4231109Z 
2025-01-10T13:49:05.4231575Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4231582Z 
2025-01-10T13:49:05.4231836Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4231843Z 
2025-01-10T13:49:05.4232173Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88ab320>
2025-01-10T13:49:05.4232471Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>, attr = 'nu'
2025-01-10T13:49:05.4232477Z 
2025-01-10T13:49:05.4232671Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4232838Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4232956Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4233059Z         try:
2025-01-10T13:49:05.4233269Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4233756Z         except KeyError:
2025-01-10T13:49:05.4233967Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4234061Z     
2025-01-10T13:49:05.4234181Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4234309Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4234431Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4234617Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4234738Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4234858Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4235012Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4235018Z 
2025-01-10T13:49:05.4235197Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4235365Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4235786Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4235901Z     ???
2025-01-10T13:49:05.4236062Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4236067Z 
2025-01-10T13:49:05.4236165Z >   ???
2025-01-10T13:49:05.4236344Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4236444Z E   
2025-01-10T13:49:05.4236628Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4236783Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4236884Z E          ...
2025-01-10T13:49:05.4237003Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4237187Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4237342Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4237441Z E          ...
2025-01-10T13:49:05.4237564Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4237744Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4237893Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4237899Z 
2025-01-10T13:49:05.4238023Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4238367Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-wavelength_cm] _
2025-01-10T13:49:05.4238376Z 
2025-01-10T13:49:05.4238565Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4238771Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4238918Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4239129Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4239315Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4239466Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4239579Z err_msg = None
2025-01-10T13:49:05.4239585Z 
2025-01-10T13:49:05.4239756Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4239871Z         if err_msg is None:
2025-01-10T13:49:05.4240013Z             if left.shape != right.shape:
2025-01-10T13:49:05.4240153Z                 raise_assert_detail(
2025-01-10T13:49:05.4240382Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4240499Z                 )
2025-01-10T13:49:05.4240604Z     
2025-01-10T13:49:05.4240725Z             diff = 0
2025-01-10T13:49:05.4240887Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4241020Z                 # count up differences
2025-01-10T13:49:05.4241293Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4241421Z                     diff += 1
2025-01-10T13:49:05.4241533Z     
2025-01-10T13:49:05.4241672Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4242077Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4242350Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4242531Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4242649Z E           
2025-01-10T13:49:05.4242830Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4243272Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4243842Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4244006Z 
2025-01-10T13:49:05.4244514Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4244531Z 
2025-01-10T13:49:05.4244816Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4244823Z 
2025-01-10T13:49:05.4245167Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88ab3e0>
2025-01-10T13:49:05.4245420Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>
2025-01-10T13:49:05.4245540Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4245546Z 
2025-01-10T13:49:05.4245745Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4245915Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4246035Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4246139Z         try:
2025-01-10T13:49:05.4246347Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4246469Z         except KeyError:
2025-01-10T13:49:05.4246674Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4246772Z     
2025-01-10T13:49:05.4246900Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4247033Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4247163Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4247355Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4247481Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4247608Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4247772Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4247778Z 
2025-01-10T13:49:05.4247958Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4248135Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4248354Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4248460Z     ???
2025-01-10T13:49:05.4248627Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4248634Z 
2025-01-10T13:49:05.4248729Z >   ???
2025-01-10T13:49:05.4248918Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4249019Z E   
2025-01-10T13:49:05.4249215Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4249374Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4249481Z E          ...
2025-01-10T13:49:05.4249603Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4249798Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4249959Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4250073Z E          ...
2025-01-10T13:49:05.4250194Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4250535Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4250694Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4250700Z 
2025-01-10T13:49:05.4250823Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4251165Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:False-f_lu] ___
2025-01-10T13:49:05.4251171Z 
2025-01-10T13:49:05.4251374Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4251570Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4251710Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4251916Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4252102Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4252373Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4252501Z err_msg = None
2025-01-10T13:49:05.4252506Z 
2025-01-10T13:49:05.4252665Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4252789Z         if err_msg is None:
2025-01-10T13:49:05.4252931Z             if left.shape != right.shape:
2025-01-10T13:49:05.4253056Z                 raise_assert_detail(
2025-01-10T13:49:05.4253260Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4253364Z                 )
2025-01-10T13:49:05.4253462Z     
2025-01-10T13:49:05.4253568Z             diff = 0
2025-01-10T13:49:05.4253873Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4254007Z                 # count up differences
2025-01-10T13:49:05.4254275Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4254399Z                     diff += 1
2025-01-10T13:49:05.4254500Z     
2025-01-10T13:49:05.4254624Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4254826Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4255072Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4255235Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4255333Z E           
2025-01-10T13:49:05.4255501Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4255936Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4256344Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4256360Z 
2025-01-10T13:49:05.4256839Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4256846Z 
2025-01-10T13:49:05.4257096Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4257102Z 
2025-01-10T13:49:05.4257472Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88ab4a0>
2025-01-10T13:49:05.4257781Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>, attr = 'f_lu'
2025-01-10T13:49:05.4257793Z 
2025-01-10T13:49:05.4258014Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4258204Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4258336Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4258445Z         try:
2025-01-10T13:49:05.4258822Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4258953Z         except KeyError:
2025-01-10T13:49:05.4259157Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4259258Z     
2025-01-10T13:49:05.4259389Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4259528Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4259651Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4259846Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4259970Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4260119Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4260298Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4260312Z 
2025-01-10T13:49:05.4260510Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4260833Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4261057Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4261172Z     ???
2025-01-10T13:49:05.4261349Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4261356Z 
2025-01-10T13:49:05.4261471Z >   ???
2025-01-10T13:49:05.4261667Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4261772Z E   
2025-01-10T13:49:05.4261968Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4262154Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4262270Z E          ...
2025-01-10T13:49:05.4262415Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4262616Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4262774Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4262878Z E          ...
2025-01-10T13:49:05.4263002Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4263194Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4263348Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4263354Z 
2025-01-10T13:49:05.4263484Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4263969Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-tau_sobolevs] _
2025-01-10T13:49:05.4263978Z 
2025-01-10T13:49:05.4264187Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4264369Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4264524Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4264745Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4264923Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4265073Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4265192Z err_msg = None
2025-01-10T13:49:05.4265198Z 
2025-01-10T13:49:05.4265371Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4265483Z         if err_msg is None:
2025-01-10T13:49:05.4265618Z             if left.shape != right.shape:
2025-01-10T13:49:05.4265746Z                 raise_assert_detail(
2025-01-10T13:49:05.4265983Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4266102Z                 )
2025-01-10T13:49:05.4266214Z     
2025-01-10T13:49:05.4266331Z             diff = 0
2025-01-10T13:49:05.4266511Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4266657Z                 # count up differences
2025-01-10T13:49:05.4266945Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4267080Z                     diff += 1
2025-01-10T13:49:05.4267183Z     
2025-01-10T13:49:05.4267328Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4267702Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4268001Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4268170Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4268285Z E           
2025-01-10T13:49:05.4268453Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4268854Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4269267Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4269419Z 
2025-01-10T13:49:05.4269946Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4269953Z 
2025-01-10T13:49:05.4270224Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4270231Z 
2025-01-10T13:49:05.4270584Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88abc20>
2025-01-10T13:49:05.4270835Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>
2025-01-10T13:49:05.4270954Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4270960Z 
2025-01-10T13:49:05.4271160Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4271331Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4271453Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4271558Z         try:
2025-01-10T13:49:05.4271772Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4271892Z         except KeyError:
2025-01-10T13:49:05.4272104Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4272209Z     
2025-01-10T13:49:05.4272334Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4272471Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4272608Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4272800Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4272927Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4273058Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4273216Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4273318Z             else:
2025-01-10T13:49:05.4273524Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4273837Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4273850Z 
2025-01-10T13:49:05.4274040Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4274202Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4274421Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4274523Z     ???
2025-01-10T13:49:05.4274679Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4274685Z 
2025-01-10T13:49:05.4274784Z >   ???
2025-01-10T13:49:05.4274983Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4275091Z E   
2025-01-10T13:49:05.4275289Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4275461Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4275571Z E          ...
2025-01-10T13:49:05.4275713Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4275910Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4276265Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4276376Z E          ...
2025-01-10T13:49:05.4276512Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4276715Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4276875Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4276882Z 
2025-01-10T13:49:05.4277018Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4277393Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-beta_sobolev] _
2025-01-10T13:49:05.4277401Z 
2025-01-10T13:49:05.4277605Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4277800Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4277948Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4278374Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4278552Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4278655Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4278732Z err_msg = None
2025-01-10T13:49:05.4278736Z 
2025-01-10T13:49:05.4278852Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4278932Z         if err_msg is None:
2025-01-10T13:49:05.4279032Z             if left.shape != right.shape:
2025-01-10T13:49:05.4279114Z                 raise_assert_detail(
2025-01-10T13:49:05.4279274Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4279343Z                 )
2025-01-10T13:49:05.4279415Z     
2025-01-10T13:49:05.4279486Z             diff = 0
2025-01-10T13:49:05.4279606Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4279697Z                 # count up differences
2025-01-10T13:49:05.4279885Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4279966Z                     diff += 1
2025-01-10T13:49:05.4280032Z     
2025-01-10T13:49:05.4280123Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4280264Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4280443Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4280558Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4280632Z E           
2025-01-10T13:49:05.4280743Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4281010Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4281273Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4281285Z 
2025-01-10T13:49:05.4281608Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4281613Z 
2025-01-10T13:49:05.4281789Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4281794Z 
2025-01-10T13:49:05.4282020Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88abce0>
2025-01-10T13:49:05.4282191Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>
2025-01-10T13:49:05.4282271Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4282280Z 
2025-01-10T13:49:05.4282521Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4282644Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4282726Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4282799Z         try:
2025-01-10T13:49:05.4282939Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4283022Z         except KeyError:
2025-01-10T13:49:05.4283161Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4283233Z     
2025-01-10T13:49:05.4283317Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4283414Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4283499Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4283833Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4283942Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4284170Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4284290Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4284364Z             else:
2025-01-10T13:49:05.4284461Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4284567Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4284571Z 
2025-01-10T13:49:05.4284707Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4284822Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4284976Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4285045Z     ???
2025-01-10T13:49:05.4285160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4285164Z 
2025-01-10T13:49:05.4285229Z >   ???
2025-01-10T13:49:05.4285363Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4285434Z E   
2025-01-10T13:49:05.4285559Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4285692Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4285766Z E          ...
2025-01-10T13:49:05.4285859Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4285984Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4286096Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4286164Z E          ...
2025-01-10T13:49:05.4286252Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4286371Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4286477Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4286481Z 
2025-01-10T13:49:05.4286567Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4286782Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-j_blues] _
2025-01-10T13:49:05.4286787Z 
2025-01-10T13:49:05.4286919Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4287054Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4287159Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4287296Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4287449Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4287544Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4287628Z err_msg = None
2025-01-10T13:49:05.4287633Z 
2025-01-10T13:49:05.4287749Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4287837Z         if err_msg is None:
2025-01-10T13:49:05.4287936Z             if left.shape != right.shape:
2025-01-10T13:49:05.4288018Z                 raise_assert_detail(
2025-01-10T13:49:05.4288168Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4288240Z                 )
2025-01-10T13:49:05.4288430Z     
2025-01-10T13:49:05.4288501Z             diff = 0
2025-01-10T13:49:05.4288614Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4288699Z                 # count up differences
2025-01-10T13:49:05.4288875Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4288950Z                     diff += 1
2025-01-10T13:49:05.4289021Z     
2025-01-10T13:49:05.4289105Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4289247Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4289419Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4289535Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4289609Z E           
2025-01-10T13:49:05.4289719Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4290065Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4290328Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4290334Z 
2025-01-10T13:49:05.4290641Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4290647Z 
2025-01-10T13:49:05.4290826Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4290833Z 
2025-01-10T13:49:05.4291058Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88abe60>
2025-01-10T13:49:05.4291229Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcf3d4b30>
2025-01-10T13:49:05.4291302Z attr = 'j_blues'
2025-01-10T13:49:05.4291306Z 
2025-01-10T13:49:05.4291445Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4291558Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4291645Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4291713Z         try:
2025-01-10T13:49:05.4291858Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4291941Z         except KeyError:
2025-01-10T13:49:05.4292080Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4292152Z     
2025-01-10T13:49:05.4292238Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4292334Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4292423Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4292563Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4292650Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4292741Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4292848Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4292923Z             else:
2025-01-10T13:49:05.4293017Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4293126Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4293130Z 
2025-01-10T13:49:05.4293259Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4293368Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4293516Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4293582Z     ???
2025-01-10T13:49:05.4293874Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4293890Z 
2025-01-10T13:49:05.4293958Z >   ???
2025-01-10T13:49:05.4294089Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4294276Z E   
2025-01-10T13:49:05.4294408Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4294515Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4294589Z E          ...
2025-01-10T13:49:05.4294674Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4294802Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4294916Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4294987Z E          ...
2025-01-10T13:49:05.4295072Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4295191Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4295296Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4295300Z 
2025-01-10T13:49:05.4295522Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4295793Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] _
2025-01-10T13:49:05.4295803Z 
2025-01-10T13:49:05.4295928Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4296060Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4296159Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4296289Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4296415Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4296507Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4296584Z err_msg = None
2025-01-10T13:49:05.4296588Z 
2025-01-10T13:49:05.4296698Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4296784Z         if err_msg is None:
2025-01-10T13:49:05.4296876Z             if left.shape != right.shape:
2025-01-10T13:49:05.4296965Z                 raise_assert_detail(
2025-01-10T13:49:05.4297108Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4297182Z                 )
2025-01-10T13:49:05.4297248Z     
2025-01-10T13:49:05.4297322Z             diff = 0
2025-01-10T13:49:05.4297434Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4297522Z                 # count up differences
2025-01-10T13:49:05.4297695Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4297768Z                     diff += 1
2025-01-10T13:49:05.4297837Z     
2025-01-10T13:49:05.4297920Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4298057Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4298225Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4298342Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4298415Z E           
2025-01-10T13:49:05.4298530Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4298789Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4299054Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4299059Z 
2025-01-10T13:49:05.4299372Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4299461Z 
2025-01-10T13:49:05.4299630Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4299635Z 
2025-01-10T13:49:05.4299862Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d4c20>
2025-01-10T13:49:05.4300031Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4300103Z attr = 'lines'
2025-01-10T13:49:05.4300108Z 
2025-01-10T13:49:05.4300244Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4300358Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4300443Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4300511Z         try:
2025-01-10T13:49:05.4300653Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4300733Z         except KeyError:
2025-01-10T13:49:05.4300876Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4301020Z     
2025-01-10T13:49:05.4301114Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4301207Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4301298Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4301431Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4301512Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4301608Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4301714Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4301788Z             else:
2025-01-10T13:49:05.4301879Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4301985Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4301990Z 
2025-01-10T13:49:05.4302112Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4302229Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4302378Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4302454Z     ???
2025-01-10T13:49:05.4302562Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4302573Z 
2025-01-10T13:49:05.4302638Z >   ???
2025-01-10T13:49:05.4302765Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4302836Z E   
2025-01-10T13:49:05.4302967Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4303076Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4303149Z E          ...
2025-01-10T13:49:05.4303233Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4303360Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4303470Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4303545Z E          ...
2025-01-10T13:49:05.4303790Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4303931Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4304040Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4304049Z 
2025-01-10T13:49:05.4304134Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4304450Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] _
2025-01-10T13:49:05.4304456Z 
2025-01-10T13:49:05.4304673Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d4ce0>
2025-01-10T13:49:05.4304841Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4304925Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4304929Z 
2025-01-10T13:49:05.4305065Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4305175Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4305262Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4305330Z         try:
2025-01-10T13:49:05.4305474Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4305679Z         except KeyError:
2025-01-10T13:49:05.4305814Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4305893Z     
2025-01-10T13:49:05.4305978Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4306074Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4306159Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4306293Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4306373Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4306465Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4306569Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4306574Z 
2025-01-10T13:49:05.4306700Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4306808Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4306945Z 
2025-01-10T13:49:05.4307080Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4307171Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4307277Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4307359Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4307494Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4307579Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4307679Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4307760Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4307832Z err_msg = None
2025-01-10T13:49:05.4307836Z 
2025-01-10T13:49:05.4307949Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4308032Z         if err_msg is None:
2025-01-10T13:49:05.4308122Z             if left.shape != right.shape:
2025-01-10T13:49:05.4308212Z                 raise_assert_detail(
2025-01-10T13:49:05.4308356Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4308429Z                 )
2025-01-10T13:49:05.4308495Z     
2025-01-10T13:49:05.4308568Z             diff = 0
2025-01-10T13:49:05.4308676Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4308766Z                 # count up differences
2025-01-10T13:49:05.4308932Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4309012Z                     diff += 1
2025-01-10T13:49:05.4309079Z     
2025-01-10T13:49:05.4309175Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4309314Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4309494Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4309603Z E           AssertionError: Series are different
2025-01-10T13:49:05.4309676Z E           
2025-01-10T13:49:05.4309782Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4310153Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4310490Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4310830Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4310920Z 
2025-01-10T13:49:05.4311229Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4311543Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] _
2025-01-10T13:49:05.4311549Z 
2025-01-10T13:49:05.4311772Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d4da0>
2025-01-10T13:49:05.4311944Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4312040Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4312115Z 
2025-01-10T13:49:05.4312259Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4312382Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4312464Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4312539Z         try:
2025-01-10T13:49:05.4312682Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4312766Z         except KeyError:
2025-01-10T13:49:05.4312902Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4312974Z     
2025-01-10T13:49:05.4313057Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4313154Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4313241Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4313379Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4313468Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4313556Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4313835Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4313843Z 
2025-01-10T13:49:05.4313982Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4314102Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4314107Z 
2025-01-10T13:49:05.4314240Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4314329Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4314434Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4314518Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4314661Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4314741Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4314849Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4314925Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4315014Z err_msg = None
2025-01-10T13:49:05.4315019Z 
2025-01-10T13:49:05.4315130Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4315214Z         if err_msg is None:
2025-01-10T13:49:05.4315308Z             if left.shape != right.shape:
2025-01-10T13:49:05.4315396Z                 raise_assert_detail(
2025-01-10T13:49:05.4315538Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4315612Z                 )
2025-01-10T13:49:05.4315679Z     
2025-01-10T13:49:05.4315755Z             diff = 0
2025-01-10T13:49:05.4315871Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4315960Z                 # count up differences
2025-01-10T13:49:05.4316132Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4316207Z                     diff += 1
2025-01-10T13:49:05.4316279Z     
2025-01-10T13:49:05.4316362Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4316502Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4316793Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4316900Z E           AssertionError: Series are different
2025-01-10T13:49:05.4316970Z E           
2025-01-10T13:49:05.4317074Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4317441Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4317818Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4318316Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4318323Z 
2025-01-10T13:49:05.4318630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4318886Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] _
2025-01-10T13:49:05.4318895Z 
2025-01-10T13:49:05.4319026Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4319155Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4319255Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4319385Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4319508Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4319603Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4319677Z err_msg = None
2025-01-10T13:49:05.4319681Z 
2025-01-10T13:49:05.4319792Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4319871Z         if err_msg is None:
2025-01-10T13:49:05.4319967Z             if left.shape != right.shape:
2025-01-10T13:49:05.4320052Z                 raise_assert_detail(
2025-01-10T13:49:05.4320198Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4320271Z                 )
2025-01-10T13:49:05.4320343Z     
2025-01-10T13:49:05.4320414Z             diff = 0
2025-01-10T13:49:05.4320527Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4320612Z                 # count up differences
2025-01-10T13:49:05.4320783Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4320862Z                     diff += 1
2025-01-10T13:49:05.4320929Z     
2025-01-10T13:49:05.4321018Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4321149Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4321321Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4321437Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4321515Z E           
2025-01-10T13:49:05.4321624Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4321977Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4322236Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4322246Z 
2025-01-10T13:49:05.4322543Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4322619Z 
2025-01-10T13:49:05.4322793Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4322802Z 
2025-01-10T13:49:05.4323023Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d4fe0>
2025-01-10T13:49:05.4323229Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>, attr = 'nu'
2025-01-10T13:49:05.4323234Z 
2025-01-10T13:49:05.4323378Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4323492Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4323578Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4323833Z         try:
2025-01-10T13:49:05.4323984Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4324063Z         except KeyError:
2025-01-10T13:49:05.4324206Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4324272Z     
2025-01-10T13:49:05.4324362Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4324466Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4324558Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4324694Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4324785Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4324870Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4324981Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4324985Z 
2025-01-10T13:49:05.4325112Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4325225Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4325374Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4325443Z     ???
2025-01-10T13:49:05.4325558Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4325563Z 
2025-01-10T13:49:05.4325628Z >   ???
2025-01-10T13:49:05.4325759Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4325830Z E   
2025-01-10T13:49:05.4325961Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4326074Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4326149Z E          ...
2025-01-10T13:49:05.4326241Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4326370Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4326486Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4326561Z E          ...
2025-01-10T13:49:05.4326651Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4326774Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4326882Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4326888Z 
2025-01-10T13:49:05.4326974Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4327262Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] _
2025-01-10T13:49:05.4327270Z 
2025-01-10T13:49:05.4327539Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4327668Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4327765Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4327894Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4328020Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4328111Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4328190Z err_msg = None
2025-01-10T13:49:05.4328195Z 
2025-01-10T13:49:05.4328302Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4328388Z         if err_msg is None:
2025-01-10T13:49:05.4328478Z             if left.shape != right.shape:
2025-01-10T13:49:05.4328671Z                 raise_assert_detail(
2025-01-10T13:49:05.4328820Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4328890Z                 )
2025-01-10T13:49:05.4328961Z     
2025-01-10T13:49:05.4329029Z             diff = 0
2025-01-10T13:49:05.4329141Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4329225Z                 # count up differences
2025-01-10T13:49:05.4329398Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4329470Z                     diff += 1
2025-01-10T13:49:05.4329543Z     
2025-01-10T13:49:05.4329626Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4329763Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4329931Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4330045Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4330118Z E           
2025-01-10T13:49:05.4330229Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4330494Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4330751Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4330756Z 
2025-01-10T13:49:05.4331061Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4331069Z 
2025-01-10T13:49:05.4331242Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4331250Z 
2025-01-10T13:49:05.4331473Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d50a0>
2025-01-10T13:49:05.4331644Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4331722Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4331727Z 
2025-01-10T13:49:05.4331867Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4331980Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4332067Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4332135Z         try:
2025-01-10T13:49:05.4332278Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4332356Z         except KeyError:
2025-01-10T13:49:05.4332496Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4332568Z     
2025-01-10T13:49:05.4332655Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4332749Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4332927Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4333063Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4333145Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4333238Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4333346Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4333350Z 
2025-01-10T13:49:05.4333476Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4333589Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4333990Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4334062Z     ???
2025-01-10T13:49:05.4334176Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4334181Z 
2025-01-10T13:49:05.4334396Z >   ???
2025-01-10T13:49:05.4334522Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4334604Z E   
2025-01-10T13:49:05.4334733Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4334849Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4334919Z E          ...
2025-01-10T13:49:05.4335009Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4335134Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4335249Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4335318Z E          ...
2025-01-10T13:49:05.4335408Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4335530Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4335638Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4335642Z 
2025-01-10T13:49:05.4335734Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4336000Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] _
2025-01-10T13:49:05.4336010Z 
2025-01-10T13:49:05.4336144Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4336268Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4336366Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4336498Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4336624Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4336716Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4336793Z err_msg = None
2025-01-10T13:49:05.4336798Z 
2025-01-10T13:49:05.4336910Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4336988Z         if err_msg is None:
2025-01-10T13:49:05.4337086Z             if left.shape != right.shape:
2025-01-10T13:49:05.4337168Z                 raise_assert_detail(
2025-01-10T13:49:05.4337320Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4337389Z                 )
2025-01-10T13:49:05.4337461Z     
2025-01-10T13:49:05.4337532Z             diff = 0
2025-01-10T13:49:05.4337645Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4337729Z                 # count up differences
2025-01-10T13:49:05.4337901Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4337976Z                     diff += 1
2025-01-10T13:49:05.4338047Z     
2025-01-10T13:49:05.4338136Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4338270Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4338445Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4338559Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4338633Z E           
2025-01-10T13:49:05.4338887Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4339155Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4339416Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4339427Z 
2025-01-10T13:49:05.4339727Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4339803Z 
2025-01-10T13:49:05.4339976Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4339981Z 
2025-01-10T13:49:05.4340201Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d5160>
2025-01-10T13:49:05.4340409Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>, attr = 'f_lu'
2025-01-10T13:49:05.4340413Z 
2025-01-10T13:49:05.4340545Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4340660Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4340751Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4340819Z         try:
2025-01-10T13:49:05.4340961Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4341041Z         except KeyError:
2025-01-10T13:49:05.4341182Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4341249Z     
2025-01-10T13:49:05.4341341Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4341432Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4341525Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4341654Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4341741Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4341827Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4341938Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4341943Z 
2025-01-10T13:49:05.4342071Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4342180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4342331Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4342402Z     ???
2025-01-10T13:49:05.4342514Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4342519Z 
2025-01-10T13:49:05.4342587Z >   ???
2025-01-10T13:49:05.4342720Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4342790Z E   
2025-01-10T13:49:05.4342921Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4343030Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4343106Z E          ...
2025-01-10T13:49:05.4343190Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4343321Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4343436Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4343505Z E          ...
2025-01-10T13:49:05.4343731Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4343858Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4343963Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4343967Z 
2025-01-10T13:49:05.4344052Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4344378Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] _
2025-01-10T13:49:05.4344497Z 
2025-01-10T13:49:05.4344719Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d5760>
2025-01-10T13:49:05.4344890Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4344984Z attr = 'stimulated_emission_factor'
2025-01-10T13:49:05.4344989Z 
2025-01-10T13:49:05.4345120Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4345236Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4345317Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4345390Z         try:
2025-01-10T13:49:05.4345526Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4345607Z         except KeyError:
2025-01-10T13:49:05.4345740Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4345814Z     
2025-01-10T13:49:05.4346003Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4346100Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4346191Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4346326Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4346413Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4346499Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4346608Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4346677Z             else:
2025-01-10T13:49:05.4346774Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4346879Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4346884Z 
2025-01-10T13:49:05.4347013Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4347123Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4347268Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4347340Z     ???
2025-01-10T13:49:05.4347451Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4347458Z 
2025-01-10T13:49:05.4347525Z >   ???
2025-01-10T13:49:05.4347705Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.4347781Z E   
2025-01-10T13:49:05.4347945Z E   DataFrame.iloc[:, 0] (column name="0") values are different (0.80972 %)
2025-01-10T13:49:05.4348314Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4352890Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995981197664222, 0.9995995247961845, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812817, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235593, ...]
2025-01-10T13:49:05.4357649Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995995247961845, 0.9995981197664222, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812795, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235604, ...]
2025-01-10T13:49:05.4357962Z E   At positional index 124, first diff: 0.9928779361771577 != 0.9929028359129612
2025-01-10T13:49:05.4357967Z 
2025-01-10T13:49:05.4358061Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4358360Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] _
2025-01-10T13:49:05.4358366Z 
2025-01-10T13:49:05.4358496Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4358622Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4358733Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4358874Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4358995Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4359091Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4359165Z err_msg = None
2025-01-10T13:49:05.4359169Z 
2025-01-10T13:49:05.4359282Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4359362Z         if err_msg is None:
2025-01-10T13:49:05.4359459Z             if left.shape != right.shape:
2025-01-10T13:49:05.4359542Z                 raise_assert_detail(
2025-01-10T13:49:05.4359689Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4359758Z                 )
2025-01-10T13:49:05.4359828Z     
2025-01-10T13:49:05.4359901Z             diff = 0
2025-01-10T13:49:05.4360015Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4360223Z                 # count up differences
2025-01-10T13:49:05.4360393Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4360473Z                     diff += 1
2025-01-10T13:49:05.4360540Z     
2025-01-10T13:49:05.4360632Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4360765Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4360940Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4361052Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4361126Z E           
2025-01-10T13:49:05.4361234Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4361500Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4361846Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4361853Z 
2025-01-10T13:49:05.4362156Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4362160Z 
2025-01-10T13:49:05.4362333Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4362338Z 
2025-01-10T13:49:05.4362558Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d5820>
2025-01-10T13:49:05.4362730Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4362826Z attr = 'previous_beta_sobolev'
2025-01-10T13:49:05.4362830Z 
2025-01-10T13:49:05.4362966Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4363083Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4363164Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4363238Z         try:
2025-01-10T13:49:05.4363376Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4363459Z         except KeyError:
2025-01-10T13:49:05.4363718Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4363794Z     
2025-01-10T13:49:05.4363880Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4363978Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4364064Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4364203Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4364296Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4364386Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4364502Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4364571Z             else:
2025-01-10T13:49:05.4364668Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4364772Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4364777Z 
2025-01-10T13:49:05.4364904Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4365019Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4365167Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4365235Z     ???
2025-01-10T13:49:05.4365348Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4365352Z 
2025-01-10T13:49:05.4365423Z >   ???
2025-01-10T13:49:05.4365549Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4365624Z E   
2025-01-10T13:49:05.4365749Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4366029Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4366099Z E          ...
2025-01-10T13:49:05.4366193Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4366318Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4366431Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4366500Z E          ...
2025-01-10T13:49:05.4366586Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4366707Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4366814Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4366819Z 
2025-01-10T13:49:05.4366910Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4367181Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] _
2025-01-10T13:49:05.4367290Z 
2025-01-10T13:49:05.4367426Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4367548Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4367647Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4367778Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4367902Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4367992Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4368071Z err_msg = None
2025-01-10T13:49:05.4368075Z 
2025-01-10T13:49:05.4368187Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4368265Z         if err_msg is None:
2025-01-10T13:49:05.4368361Z             if left.shape != right.shape:
2025-01-10T13:49:05.4368446Z                 raise_assert_detail(
2025-01-10T13:49:05.4368597Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4368666Z                 )
2025-01-10T13:49:05.4368736Z     
2025-01-10T13:49:05.4368806Z             diff = 0
2025-01-10T13:49:05.4368925Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4369009Z                 # count up differences
2025-01-10T13:49:05.4369180Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4369256Z                     diff += 1
2025-01-10T13:49:05.4369327Z     
2025-01-10T13:49:05.4369412Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4369549Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4369724Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4369836Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4369912Z E           
2025-01-10T13:49:05.4370022Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4370290Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4370550Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4370561Z 
2025-01-10T13:49:05.4370863Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4370871Z 
2025-01-10T13:49:05.4371040Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4371130Z 
2025-01-10T13:49:05.4371351Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d58e0>
2025-01-10T13:49:05.4371520Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4371601Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4371606Z 
2025-01-10T13:49:05.4371748Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4371865Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4371947Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4372021Z         try:
2025-01-10T13:49:05.4372161Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4372244Z         except KeyError:
2025-01-10T13:49:05.4372379Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4372451Z     
2025-01-10T13:49:05.4372612Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4372709Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4372799Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4372935Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4373019Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4373112Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4373221Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4373297Z             else:
2025-01-10T13:49:05.4373394Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4373497Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4373536Z 
2025-01-10T13:49:05.4373753Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4373871Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4374016Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4374088Z     ???
2025-01-10T13:49:05.4374202Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4374210Z 
2025-01-10T13:49:05.4374275Z >   ???
2025-01-10T13:49:05.4374404Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4374471Z E   
2025-01-10T13:49:05.4374598Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4374712Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4374781Z E          ...
2025-01-10T13:49:05.4374870Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4374996Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4375111Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4375186Z E          ...
2025-01-10T13:49:05.4375273Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4375394Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4375503Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4375511Z 
2025-01-10T13:49:05.4375598Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4375876Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] _
2025-01-10T13:49:05.4375880Z 
2025-01-10T13:49:05.4376011Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4376135Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4376233Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4376365Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4376489Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4376580Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4376662Z err_msg = None
2025-01-10T13:49:05.4376666Z 
2025-01-10T13:49:05.4376775Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4376977Z         if err_msg is None:
2025-01-10T13:49:05.4377073Z             if left.shape != right.shape:
2025-01-10T13:49:05.4377167Z                 raise_assert_detail(
2025-01-10T13:49:05.4377313Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4377383Z                 )
2025-01-10T13:49:05.4377454Z     
2025-01-10T13:49:05.4377524Z             diff = 0
2025-01-10T13:49:05.4377636Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4377724Z                 # count up differences
2025-01-10T13:49:05.4377897Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4377972Z                     diff += 1
2025-01-10T13:49:05.4378042Z     
2025-01-10T13:49:05.4378129Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4378373Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4378547Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4378666Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4378736Z E           
2025-01-10T13:49:05.4378851Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4379116Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4379374Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4379386Z 
2025-01-10T13:49:05.4379689Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4379694Z 
2025-01-10T13:49:05.4379866Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4379871Z 
2025-01-10T13:49:05.4380092Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d59a0>
2025-01-10T13:49:05.4381152Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4381245Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4381250Z 
2025-01-10T13:49:05.4381393Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4381506Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4381593Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4381661Z         try:
2025-01-10T13:49:05.4381805Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4381897Z         except KeyError:
2025-01-10T13:49:05.4382037Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4382109Z     
2025-01-10T13:49:05.4382194Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4382291Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4382376Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4382511Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4382594Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4382692Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4382800Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4382877Z             else:
2025-01-10T13:49:05.4382971Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4383081Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4383086Z 
2025-01-10T13:49:05.4383218Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4383330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4383580Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4383763Z     ???
2025-01-10T13:49:05.4383882Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4383887Z 
2025-01-10T13:49:05.4383954Z >   ???
2025-01-10T13:49:05.4384088Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4384156Z E   
2025-01-10T13:49:05.4384285Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4384394Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4384469Z E          ...
2025-01-10T13:49:05.4384555Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4384686Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4384800Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4385027Z E          ...
2025-01-10T13:49:05.4385122Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4385243Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4385349Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4385354Z 
2025-01-10T13:49:05.4385439Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4385709Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] _
2025-01-10T13:49:05.4385715Z 
2025-01-10T13:49:05.4385841Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4385974Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4386072Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4386203Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4386332Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4386426Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4386504Z err_msg = None
2025-01-10T13:49:05.4386508Z 
2025-01-10T13:49:05.4386616Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4386700Z         if err_msg is None:
2025-01-10T13:49:05.4386793Z             if left.shape != right.shape:
2025-01-10T13:49:05.4386880Z                 raise_assert_detail(
2025-01-10T13:49:05.4387023Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4387100Z                 )
2025-01-10T13:49:05.4387168Z     
2025-01-10T13:49:05.4387244Z             diff = 0
2025-01-10T13:49:05.4387358Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4387443Z                 # count up differences
2025-01-10T13:49:05.4387617Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4387700Z                     diff += 1
2025-01-10T13:49:05.4387773Z     
2025-01-10T13:49:05.4387859Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4387996Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4388165Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4388280Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4388348Z E           
2025-01-10T13:49:05.4388462Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4388722Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4388990Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4389112Z 
2025-01-10T13:49:05.4389419Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4389424Z 
2025-01-10T13:49:05.4389590Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4389594Z 
2025-01-10T13:49:05.4389819Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d5b20>
2025-01-10T13:49:05.4389987Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be83d5eb0>
2025-01-10T13:49:05.4390061Z attr = 'j_blues'
2025-01-10T13:49:05.4390065Z 
2025-01-10T13:49:05.4390203Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4390388Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4390479Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4390548Z         try:
2025-01-10T13:49:05.4390692Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4390770Z         except KeyError:
2025-01-10T13:49:05.4390910Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4390977Z     
2025-01-10T13:49:05.4391066Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4391157Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4391247Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4391383Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4391465Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4391556Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4391664Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4391741Z             else:
2025-01-10T13:49:05.4391832Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4391944Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4391949Z 
2025-01-10T13:49:05.4392074Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4392190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4392331Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4392405Z     ???
2025-01-10T13:49:05.4392512Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4392521Z 
2025-01-10T13:49:05.4392589Z >   ???
2025-01-10T13:49:05.4392718Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4392785Z E   
2025-01-10T13:49:05.4392915Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4393023Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4393103Z E          ...
2025-01-10T13:49:05.4393187Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4393321Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4393432Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4393506Z E          ...
2025-01-10T13:49:05.4393589Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4393837Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4393940Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4393949Z 
2025-01-10T13:49:05.4394034Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4394289Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] _
2025-01-10T13:49:05.4394295Z 
2025-01-10T13:49:05.4394419Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4394551Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4394769Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4394909Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4395029Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4395125Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4395203Z err_msg = None
2025-01-10T13:49:05.4395207Z 
2025-01-10T13:49:05.4395314Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4395397Z         if err_msg is None:
2025-01-10T13:49:05.4395487Z             if left.shape != right.shape:
2025-01-10T13:49:05.4395572Z                 raise_assert_detail(
2025-01-10T13:49:05.4395713Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4395786Z                 )
2025-01-10T13:49:05.4395957Z     
2025-01-10T13:49:05.4396034Z             diff = 0
2025-01-10T13:49:05.4396141Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4396233Z                 # count up differences
2025-01-10T13:49:05.4396401Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4396483Z                     diff += 1
2025-01-10T13:49:05.4396549Z     
2025-01-10T13:49:05.4396641Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4396778Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4396946Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4397059Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4397127Z E           
2025-01-10T13:49:05.4397243Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4397501Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4397772Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4397778Z 
2025-01-10T13:49:05.4398080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4398085Z 
2025-01-10T13:49:05.4398253Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4398257Z 
2025-01-10T13:49:05.4398483Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d68a0>
2025-01-10T13:49:05.4398650Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4398734Z attr = 'lines'
2025-01-10T13:49:05.4398738Z 
2025-01-10T13:49:05.4398872Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4398988Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4399076Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4399145Z         try:
2025-01-10T13:49:05.4399286Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4399365Z         except KeyError:
2025-01-10T13:49:05.4399505Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4399572Z     
2025-01-10T13:49:05.4399659Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4399750Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4399841Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4399969Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4400059Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4400231Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4400344Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4400420Z             else:
2025-01-10T13:49:05.4400511Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4400621Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4400626Z 
2025-01-10T13:49:05.4400747Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4400862Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4401003Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4401075Z     ???
2025-01-10T13:49:05.4401183Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4401187Z 
2025-01-10T13:49:05.4401258Z >   ???
2025-01-10T13:49:05.4401383Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4401531Z E   
2025-01-10T13:49:05.4401656Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4401771Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4401847Z E          ...
2025-01-10T13:49:05.4401932Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4402061Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4402172Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4402246Z E          ...
2025-01-10T13:49:05.4402327Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4402451Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4402553Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4402557Z 
2025-01-10T13:49:05.4402647Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4402940Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] _
2025-01-10T13:49:05.4402954Z 
2025-01-10T13:49:05.4403176Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d6960>
2025-01-10T13:49:05.4403344Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4403430Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4403434Z 
2025-01-10T13:49:05.4403571Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4403809Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4403896Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4403964Z         try:
2025-01-10T13:49:05.4404104Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4404182Z         except KeyError:
2025-01-10T13:49:05.4404320Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4404387Z     
2025-01-10T13:49:05.4404476Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4404569Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4404662Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4404799Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4404882Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4404974Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4405081Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4405086Z 
2025-01-10T13:49:05.4405213Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4405325Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4405329Z 
2025-01-10T13:49:05.4405467Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4405552Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4405662Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4405746Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4405887Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4406090Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4406194Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4406275Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4406348Z err_msg = None
2025-01-10T13:49:05.4406352Z 
2025-01-10T13:49:05.4406464Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4406541Z         if err_msg is None:
2025-01-10T13:49:05.4406637Z             if left.shape != right.shape:
2025-01-10T13:49:05.4406720Z                 raise_assert_detail(
2025-01-10T13:49:05.4406870Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4406939Z                 )
2025-01-10T13:49:05.4407008Z     
2025-01-10T13:49:05.4407083Z             diff = 0
2025-01-10T13:49:05.4407190Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4407403Z                 # count up differences
2025-01-10T13:49:05.4407574Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4407655Z                     diff += 1
2025-01-10T13:49:05.4407721Z     
2025-01-10T13:49:05.4407808Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4407940Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4408114Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4408215Z E           AssertionError: Series are different
2025-01-10T13:49:05.4408290Z E           
2025-01-10T13:49:05.4408388Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4408762Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4409102Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4409432Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4409446Z 
2025-01-10T13:49:05.4409750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4410048Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] _
2025-01-10T13:49:05.4410053Z 
2025-01-10T13:49:05.4410277Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d6a20>
2025-01-10T13:49:05.4410446Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4410532Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4410536Z 
2025-01-10T13:49:05.4410674Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4410786Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4410872Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4410948Z         try:
2025-01-10T13:49:05.4411086Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4411171Z         except KeyError:
2025-01-10T13:49:05.4411305Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4411461Z     
2025-01-10T13:49:05.4411544Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4411639Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4411723Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4411857Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4411939Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4412033Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4412138Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4412143Z 
2025-01-10T13:49:05.4412268Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4412384Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4412389Z 
2025-01-10T13:49:05.4412521Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4412683Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4412790Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4412876Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4413017Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4413103Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4413206Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4413287Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4413361Z err_msg = None
2025-01-10T13:49:05.4413374Z 
2025-01-10T13:49:05.4413477Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4413560Z         if err_msg is None:
2025-01-10T13:49:05.4413769Z             if left.shape != right.shape:
2025-01-10T13:49:05.4413856Z                 raise_assert_detail(
2025-01-10T13:49:05.4414008Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4414084Z                 )
2025-01-10T13:49:05.4414150Z     
2025-01-10T13:49:05.4414223Z             diff = 0
2025-01-10T13:49:05.4414332Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4414422Z                 # count up differences
2025-01-10T13:49:05.4414589Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4414669Z                     diff += 1
2025-01-10T13:49:05.4414736Z     
2025-01-10T13:49:05.4414823Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4414959Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4415127Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4415233Z E           AssertionError: Series are different
2025-01-10T13:49:05.4415302Z E           
2025-01-10T13:49:05.4415409Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4415778Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4416158Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4416537Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4416663Z 
2025-01-10T13:49:05.4416965Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4417211Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] _
2025-01-10T13:49:05.4417217Z 
2025-01-10T13:49:05.4417348Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4417472Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4417572Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4417801Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4417929Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4418020Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4427054Z err_msg = None
2025-01-10T13:49:05.4427077Z 
2025-01-10T13:49:05.4427236Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4427328Z         if err_msg is None:
2025-01-10T13:49:05.4427427Z             if left.shape != right.shape:
2025-01-10T13:49:05.4427513Z                 raise_assert_detail(
2025-01-10T13:49:05.4427664Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4427737Z                 )
2025-01-10T13:49:05.4427807Z     
2025-01-10T13:49:05.4427883Z             diff = 0
2025-01-10T13:49:05.4428004Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4428101Z                 # count up differences
2025-01-10T13:49:05.4428285Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4428360Z                     diff += 1
2025-01-10T13:49:05.4428431Z     
2025-01-10T13:49:05.4428520Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4428670Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4428844Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4428961Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4429033Z E           
2025-01-10T13:49:05.4429150Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4429414Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4429695Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4429702Z 
2025-01-10T13:49:05.4430034Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4430039Z 
2025-01-10T13:49:05.4430210Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4430216Z 
2025-01-10T13:49:05.4430454Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d6c60>
2025-01-10T13:49:05.4430658Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>, attr = 'nu'
2025-01-10T13:49:05.4430667Z 
2025-01-10T13:49:05.4430813Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4431129Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4431220Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4431299Z         try:
2025-01-10T13:49:05.4431441Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4431524Z         except KeyError:
2025-01-10T13:49:05.4431663Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4431737Z     
2025-01-10T13:49:05.4431822Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4431921Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4432008Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4432146Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4432229Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4432320Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4432540Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4432549Z 
2025-01-10T13:49:05.4432681Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4432799Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4432946Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4433023Z     ???
2025-01-10T13:49:05.4433130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4433134Z 
2025-01-10T13:49:05.4433207Z >   ???
2025-01-10T13:49:05.4433334Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4433406Z E   
2025-01-10T13:49:05.4433530Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4433768Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4433840Z E          ...
2025-01-10T13:49:05.4433936Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4434067Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4434186Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4434261Z E          ...
2025-01-10T13:49:05.4434344Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4434473Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4434578Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4434582Z 
2025-01-10T13:49:05.4434676Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4434949Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] _
2025-01-10T13:49:05.4434954Z 
2025-01-10T13:49:05.4435088Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4435219Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4435321Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4435463Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4435587Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4435686Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4435758Z err_msg = None
2025-01-10T13:49:05.4435762Z 
2025-01-10T13:49:05.4435881Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4435960Z         if err_msg is None:
2025-01-10T13:49:05.4436060Z             if left.shape != right.shape:
2025-01-10T13:49:05.4436143Z                 raise_assert_detail(
2025-01-10T13:49:05.4436292Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4436360Z                 )
2025-01-10T13:49:05.4436434Z     
2025-01-10T13:49:05.4436504Z             diff = 0
2025-01-10T13:49:05.4436628Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4436727Z                 # count up differences
2025-01-10T13:49:05.4437044Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4437128Z                     diff += 1
2025-01-10T13:49:05.4437194Z     
2025-01-10T13:49:05.4437286Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4437420Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4437594Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4437705Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4437780Z E           
2025-01-10T13:49:05.4437888Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4438157Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4438533Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4438540Z 
2025-01-10T13:49:05.4438844Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4438849Z 
2025-01-10T13:49:05.4439024Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4439029Z 
2025-01-10T13:49:05.4439249Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d6d20>
2025-01-10T13:49:05.4439423Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4439510Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4439515Z 
2025-01-10T13:49:05.4439651Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4439771Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4439853Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4439927Z         try:
2025-01-10T13:49:05.4440064Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4440152Z         except KeyError:
2025-01-10T13:49:05.4440289Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4440362Z     
2025-01-10T13:49:05.4440446Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4440544Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4440631Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4440768Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4440856Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4440945Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4441057Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4441064Z 
2025-01-10T13:49:05.4441185Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4441298Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4441441Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4441508Z     ???
2025-01-10T13:49:05.4441620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4441625Z 
2025-01-10T13:49:05.4441690Z >   ???
2025-01-10T13:49:05.4441822Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4441888Z E   
2025-01-10T13:49:05.4442015Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4442122Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4442197Z E          ...
2025-01-10T13:49:05.4442289Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4442418Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4442635Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4442703Z E          ...
2025-01-10T13:49:05.4442789Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4442908Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4443013Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4443017Z 
2025-01-10T13:49:05.4443102Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4443355Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] _
2025-01-10T13:49:05.4443360Z 
2025-01-10T13:49:05.4443485Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4443749Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4443971Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4444106Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4444230Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4444319Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4444398Z err_msg = None
2025-01-10T13:49:05.4444402Z 
2025-01-10T13:49:05.4444509Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4444592Z         if err_msg is None:
2025-01-10T13:49:05.4444681Z             if left.shape != right.shape:
2025-01-10T13:49:05.4444767Z                 raise_assert_detail(
2025-01-10T13:49:05.4444913Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4444981Z                 )
2025-01-10T13:49:05.4445054Z     
2025-01-10T13:49:05.4445124Z             diff = 0
2025-01-10T13:49:05.4445238Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4445322Z                 # count up differences
2025-01-10T13:49:05.4445500Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4445575Z                     diff += 1
2025-01-10T13:49:05.4445646Z     
2025-01-10T13:49:05.4445730Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4445868Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4446034Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4446148Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4446218Z E           
2025-01-10T13:49:05.4446329Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4446592Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4446859Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4446865Z 
2025-01-10T13:49:05.4447168Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4447173Z 
2025-01-10T13:49:05.4447341Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4447345Z 
2025-01-10T13:49:05.4447564Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d6de0>
2025-01-10T13:49:05.4447770Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>, attr = 'f_lu'
2025-01-10T13:49:05.4447778Z 
2025-01-10T13:49:05.4448027Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4448145Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4448226Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4448298Z         try:
2025-01-10T13:49:05.4448435Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4448516Z         except KeyError:
2025-01-10T13:49:05.4448651Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4448722Z     
2025-01-10T13:49:05.4448809Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4448901Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4448990Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4449119Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4449207Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4449372Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4449482Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4449491Z 
2025-01-10T13:49:05.4449615Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4449732Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4449874Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4449946Z     ???
2025-01-10T13:49:05.4450051Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4450061Z 
2025-01-10T13:49:05.4450125Z >   ???
2025-01-10T13:49:05.4450255Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4450321Z E   
2025-01-10T13:49:05.4450448Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4450553Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4450628Z E          ...
2025-01-10T13:49:05.4450715Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4450845Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4450956Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4451030Z E          ...
2025-01-10T13:49:05.4451111Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4451233Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4451332Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4451342Z 
2025-01-10T13:49:05.4451427Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4451736Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] _
2025-01-10T13:49:05.4451742Z 
2025-01-10T13:49:05.4451961Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d73e0>
2025-01-10T13:49:05.4452131Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4452223Z attr = 'stimulated_emission_factor'
2025-01-10T13:49:05.4452228Z 
2025-01-10T13:49:05.4452361Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4452472Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4452554Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4452619Z         try:
2025-01-10T13:49:05.4452757Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4452838Z         except KeyError:
2025-01-10T13:49:05.4452972Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4453043Z     
2025-01-10T13:49:05.4453126Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4453218Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4453303Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4453436Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4453519Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4453720Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4453827Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4454021Z             else:
2025-01-10T13:49:05.4454122Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4454230Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4454234Z 
2025-01-10T13:49:05.4454360Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4454467Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4454612Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4454678Z     ???
2025-01-10T13:49:05.4454787Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4454792Z 
2025-01-10T13:49:05.4454858Z >   ???
2025-01-10T13:49:05.4455039Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.4455105Z E   
2025-01-10T13:49:05.4455378Z E   DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:49:05.4455748Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4460640Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
2025-01-10T13:49:05.4465653Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:49:05.4466064Z E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:49:05.4466069Z 
2025-01-10T13:49:05.4466159Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4466445Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] _
2025-01-10T13:49:05.4466451Z 
2025-01-10T13:49:05.4466580Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4466705Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4466803Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4466934Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4467062Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4467161Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4467233Z err_msg = None
2025-01-10T13:49:05.4467238Z 
2025-01-10T13:49:05.4467352Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4467430Z         if err_msg is None:
2025-01-10T13:49:05.4467524Z             if left.shape != right.shape:
2025-01-10T13:49:05.4467605Z                 raise_assert_detail(
2025-01-10T13:49:05.4467751Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4467818Z                 )
2025-01-10T13:49:05.4467891Z     
2025-01-10T13:49:05.4467960Z             diff = 0
2025-01-10T13:49:05.4468076Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4468161Z                 # count up differences
2025-01-10T13:49:05.4468334Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4468412Z                     diff += 1
2025-01-10T13:49:05.4468483Z     
2025-01-10T13:49:05.4468573Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4468706Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4468879Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4468989Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4469064Z E           
2025-01-10T13:49:05.4469169Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4469433Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4469695Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4469794Z 
2025-01-10T13:49:05.4470098Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4470103Z 
2025-01-10T13:49:05.4470271Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4470276Z 
2025-01-10T13:49:05.4470495Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d74a0>
2025-01-10T13:49:05.4470666Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4470753Z attr = 'previous_beta_sobolev'
2025-01-10T13:49:05.4470762Z 
2025-01-10T13:49:05.4470979Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4471098Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4471181Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4471254Z         try:
2025-01-10T13:49:05.4471390Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4471473Z         except KeyError:
2025-01-10T13:49:05.4471607Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4471678Z     
2025-01-10T13:49:05.4471762Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4471858Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4471943Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4472075Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4472157Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4472247Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4472354Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4472432Z             else:
2025-01-10T13:49:05.4472532Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4472637Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4472642Z 
2025-01-10T13:49:05.4472767Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4472878Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4473025Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4473093Z     ???
2025-01-10T13:49:05.4473205Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4473209Z 
2025-01-10T13:49:05.4473274Z >   ???
2025-01-10T13:49:05.4473402Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4473469Z E   
2025-01-10T13:49:05.4473716Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4473831Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4473905Z E          ...
2025-01-10T13:49:05.4474003Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4474131Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4474244Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4474313Z E          ...
2025-01-10T13:49:05.4474401Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4474521Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4474627Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4474632Z 
2025-01-10T13:49:05.4474717Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4474993Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] _
2025-01-10T13:49:05.4474999Z 
2025-01-10T13:49:05.4475134Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4475261Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4475486Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4475618Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4475742Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4475832Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4475909Z err_msg = None
2025-01-10T13:49:05.4475914Z 
2025-01-10T13:49:05.4476020Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4476104Z         if err_msg is None:
2025-01-10T13:49:05.4476203Z             if left.shape != right.shape:
2025-01-10T13:49:05.4476284Z                 raise_assert_detail(
2025-01-10T13:49:05.4476439Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4476611Z                 )
2025-01-10T13:49:05.4476682Z     
2025-01-10T13:49:05.4476754Z             diff = 0
2025-01-10T13:49:05.4476870Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4476956Z                 # count up differences
2025-01-10T13:49:05.4477131Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4477205Z                     diff += 1
2025-01-10T13:49:05.4477275Z     
2025-01-10T13:49:05.4477359Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4477499Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4477669Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4477785Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4477858Z E           
2025-01-10T13:49:05.4477965Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4478225Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4478489Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4478495Z 
2025-01-10T13:49:05.4478799Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4478804Z 
2025-01-10T13:49:05.4478971Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4478976Z 
2025-01-10T13:49:05.4479196Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d7560>
2025-01-10T13:49:05.4479371Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4479453Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4479458Z 
2025-01-10T13:49:05.4479598Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4479713Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4479799Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4479866Z         try:
2025-01-10T13:49:05.4480009Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4480096Z         except KeyError:
2025-01-10T13:49:05.4480233Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4480305Z     
2025-01-10T13:49:05.4480390Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4480485Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4480574Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4480713Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4480884Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4480976Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4481083Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4481156Z             else:
2025-01-10T13:49:05.4481246Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4481353Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4481358Z 
2025-01-10T13:49:05.4481483Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4481595Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4481745Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4481813Z     ???
2025-01-10T13:49:05.4481925Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4481930Z 
2025-01-10T13:49:05.4481996Z >   ???
2025-01-10T13:49:05.4482221Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4482290Z E   
2025-01-10T13:49:05.4482419Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4482527Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4482600Z E          ...
2025-01-10T13:49:05.4482685Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4482817Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4482930Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4482997Z E          ...
2025-01-10T13:49:05.4483086Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4483206Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4483314Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4483318Z 
2025-01-10T13:49:05.4483403Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4483830Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] _
2025-01-10T13:49:05.4483846Z 
2025-01-10T13:49:05.4483972Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4484101Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4484198Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4484325Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4484451Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4484542Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4484617Z err_msg = None
2025-01-10T13:49:05.4484622Z 
2025-01-10T13:49:05.4484728Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4484812Z         if err_msg is None:
2025-01-10T13:49:05.4484908Z             if left.shape != right.shape:
2025-01-10T13:49:05.4484995Z                 raise_assert_detail(
2025-01-10T13:49:05.4485138Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4485210Z                 )
2025-01-10T13:49:05.4485275Z     
2025-01-10T13:49:05.4485352Z             diff = 0
2025-01-10T13:49:05.4485467Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4485550Z                 # count up differences
2025-01-10T13:49:05.4485722Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4485796Z                     diff += 1
2025-01-10T13:49:05.4485867Z     
2025-01-10T13:49:05.4485953Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4486090Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4486255Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4486373Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4486439Z E           
2025-01-10T13:49:05.4486673Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4486930Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4487196Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4487202Z 
2025-01-10T13:49:05.4487508Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4487644Z 
2025-01-10T13:49:05.4487814Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4487820Z 
2025-01-10T13:49:05.4488049Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d7620>
2025-01-10T13:49:05.4488216Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4488292Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4488297Z 
2025-01-10T13:49:05.4488434Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4488544Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4488629Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4488695Z         try:
2025-01-10T13:49:05.4488836Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4488913Z         except KeyError:
2025-01-10T13:49:05.4489053Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4489123Z     
2025-01-10T13:49:05.4489210Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4489307Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4489398Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4489532Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4489615Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4489708Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4489813Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4489888Z             else:
2025-01-10T13:49:05.4489980Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4490087Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4490092Z 
2025-01-10T13:49:05.4490213Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4490329Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4490470Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4490547Z     ???
2025-01-10T13:49:05.4490655Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4490666Z 
2025-01-10T13:49:05.4490732Z >   ???
2025-01-10T13:49:05.4490865Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4490931Z E   
2025-01-10T13:49:05.4491061Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4491169Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4491241Z E          ...
2025-01-10T13:49:05.4491326Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4491454Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4491564Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4491638Z E          ...
2025-01-10T13:49:05.4491720Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4491847Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4491956Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4492066Z 
2025-01-10T13:49:05.4492155Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4492420Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] _
2025-01-10T13:49:05.4492427Z 
2025-01-10T13:49:05.4492553Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4492684Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4492808Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4492944Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4493082Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4493177Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4493345Z err_msg = None
2025-01-10T13:49:05.4493354Z 
2025-01-10T13:49:05.4493464Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4493546Z         if err_msg is None:
2025-01-10T13:49:05.4493748Z             if left.shape != right.shape:
2025-01-10T13:49:05.4493837Z                 raise_assert_detail(
2025-01-10T13:49:05.4493984Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4494059Z                 )
2025-01-10T13:49:05.4494126Z     
2025-01-10T13:49:05.4494201Z             diff = 0
2025-01-10T13:49:05.4494310Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4494401Z                 # count up differences
2025-01-10T13:49:05.4494572Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4494651Z                     diff += 1
2025-01-10T13:49:05.4494721Z     
2025-01-10T13:49:05.4494807Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4494954Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4495126Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4495241Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4495310Z E           
2025-01-10T13:49:05.4495426Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4495684Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4495948Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4495960Z 
2025-01-10T13:49:05.4496269Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4496274Z 
2025-01-10T13:49:05.4496439Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4496444Z 
2025-01-10T13:49:05.4496669Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88d77a0>
2025-01-10T13:49:05.4496833Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcfa03200>
2025-01-10T13:49:05.4496912Z attr = 'j_blues'
2025-01-10T13:49:05.4496916Z 
2025-01-10T13:49:05.4497055Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4497170Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4497255Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4497323Z         try:
2025-01-10T13:49:05.4497468Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4497672Z         except KeyError:
2025-01-10T13:49:05.4497812Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4497878Z     
2025-01-10T13:49:05.4497965Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4498057Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4498148Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4498278Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4498367Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4498452Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4498563Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4498637Z             else:
2025-01-10T13:49:05.4498734Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4498842Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4498959Z 
2025-01-10T13:49:05.4499083Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4499206Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4499349Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4499421Z     ???
2025-01-10T13:49:05.4499528Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4499533Z 
2025-01-10T13:49:05.4499602Z >   ???
2025-01-10T13:49:05.4499726Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4499798Z E   
2025-01-10T13:49:05.4499927Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4500034Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4500107Z E          ...
2025-01-10T13:49:05.4500191Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4500321Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4500432Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4500508Z E          ...
2025-01-10T13:49:05.4500590Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4500716Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4500817Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4500820Z 
2025-01-10T13:49:05.4500916Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4501110Z _____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines] ______
2025-01-10T13:49:05.4501120Z 
2025-01-10T13:49:05.4501243Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4501370Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4501462Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4501599Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4501722Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4501818Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4501889Z err_msg = None
2025-01-10T13:49:05.4501893Z 
2025-01-10T13:49:05.4502005Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4502084Z         if err_msg is None:
2025-01-10T13:49:05.4502185Z             if left.shape != right.shape:
2025-01-10T13:49:05.4502271Z                 raise_assert_detail(
2025-01-10T13:49:05.4502410Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4502483Z                 )
2025-01-10T13:49:05.4502548Z     
2025-01-10T13:49:05.4502623Z             diff = 0
2025-01-10T13:49:05.4502730Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4502818Z                 # count up differences
2025-01-10T13:49:05.4502987Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4503163Z                     diff += 1
2025-01-10T13:49:05.4503229Z     
2025-01-10T13:49:05.4503320Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4503449Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4503727Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4503837Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4503912Z E           
2025-01-10T13:49:05.4504024Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4504281Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4504679Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4504689Z 
2025-01-10T13:49:05.4504985Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4504996Z 
2025-01-10T13:49:05.4505161Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4505166Z 
2025-01-10T13:49:05.4505390Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fc560>
2025-01-10T13:49:05.4505552Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4505628Z attr = 'lines'
2025-01-10T13:49:05.4505632Z 
2025-01-10T13:49:05.4505764Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4505885Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4505970Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4506046Z         try:
2025-01-10T13:49:05.4506182Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4506266Z         except KeyError:
2025-01-10T13:49:05.4506406Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4506471Z     
2025-01-10T13:49:05.4506557Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4506648Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4506740Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4506870Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4506956Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4507042Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4507154Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4507227Z             else:
2025-01-10T13:49:05.4507323Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4507430Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4507435Z 
2025-01-10T13:49:05.4507562Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4507679Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4507820Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4507892Z     ???
2025-01-10T13:49:05.4507998Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4508002Z 
2025-01-10T13:49:05.4508073Z >   ???
2025-01-10T13:49:05.4508197Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4508269Z E   
2025-01-10T13:49:05.4508394Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4508508Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4508579Z E          ...
2025-01-10T13:49:05.4508667Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4508939Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4509059Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4509133Z E          ...
2025-01-10T13:49:05.4509214Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4509340Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4509442Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4509446Z 
2025-01-10T13:49:05.4509543Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4509776Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] _
2025-01-10T13:49:05.4509782Z 
2025-01-10T13:49:05.4510008Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fc620>
2025-01-10T13:49:05.4510171Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4510343Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4510351Z 
2025-01-10T13:49:05.4510490Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4510601Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4510688Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4510757Z         try:
2025-01-10T13:49:05.4510896Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4510973Z         except KeyError:
2025-01-10T13:49:05.4511110Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4511175Z     
2025-01-10T13:49:05.4511261Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4511351Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4511443Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4511572Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4511658Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4511746Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4511857Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4511862Z 
2025-01-10T13:49:05.4511985Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4512090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4512095Z 
2025-01-10T13:49:05.4512228Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4512312Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4512430Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4512508Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4512651Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4512732Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4512839Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4512923Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4513007Z err_msg = None
2025-01-10T13:49:05.4513011Z 
2025-01-10T13:49:05.4513125Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4513206Z         if err_msg is None:
2025-01-10T13:49:05.4513302Z             if left.shape != right.shape:
2025-01-10T13:49:05.4513384Z                 raise_assert_detail(
2025-01-10T13:49:05.4513529Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4513769Z                 )
2025-01-10T13:49:05.4513844Z     
2025-01-10T13:49:05.4513917Z             diff = 0
2025-01-10T13:49:05.4514028Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4514114Z                 # count up differences
2025-01-10T13:49:05.4514286Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4514364Z                     diff += 1
2025-01-10T13:49:05.4514432Z     
2025-01-10T13:49:05.4514519Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4514788Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4514962Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4515063Z E           AssertionError: Series are different
2025-01-10T13:49:05.4515135Z E           
2025-01-10T13:49:05.4515231Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4515607Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4516045Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4516382Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4516388Z 
2025-01-10T13:49:05.4516700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4516935Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] _
2025-01-10T13:49:05.4516943Z 
2025-01-10T13:49:05.4517165Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fc6e0>
2025-01-10T13:49:05.4517333Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4517419Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4517424Z 
2025-01-10T13:49:05.4517560Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4517669Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4517755Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4517822Z         try:
2025-01-10T13:49:05.4517964Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4518041Z         except KeyError:
2025-01-10T13:49:05.4518181Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4518251Z     
2025-01-10T13:49:05.4518337Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4518434Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4518520Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4518658Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4518739Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4518831Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4518937Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4518942Z 
2025-01-10T13:49:05.4519067Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4519177Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4519182Z 
2025-01-10T13:49:05.4519315Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4519401Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4519504Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4519585Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4519724Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4519914Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4520015Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4520095Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4520165Z err_msg = None
2025-01-10T13:49:05.4520169Z 
2025-01-10T13:49:05.4520279Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4520355Z         if err_msg is None:
2025-01-10T13:49:05.4520454Z             if left.shape != right.shape:
2025-01-10T13:49:05.4520539Z                 raise_assert_detail(
2025-01-10T13:49:05.4520677Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4520750Z                 )
2025-01-10T13:49:05.4520815Z     
2025-01-10T13:49:05.4520891Z             diff = 0
2025-01-10T13:49:05.4520998Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4521169Z                 # count up differences
2025-01-10T13:49:05.4521338Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4521417Z                     diff += 1
2025-01-10T13:49:05.4521482Z     
2025-01-10T13:49:05.4521571Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4521702Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4521873Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4521972Z E           AssertionError: Series are different
2025-01-10T13:49:05.4522045Z E           
2025-01-10T13:49:05.4522147Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4522516Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4522898Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4523271Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4523288Z 
2025-01-10T13:49:05.4523588Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4524029Z _______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-nu] _______
2025-01-10T13:49:05.4524036Z 
2025-01-10T13:49:05.4524161Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4524289Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4524388Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4524516Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4524642Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4524738Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4524815Z err_msg = None
2025-01-10T13:49:05.4524963Z 
2025-01-10T13:49:05.4525072Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4525157Z         if err_msg is None:
2025-01-10T13:49:05.4525247Z             if left.shape != right.shape:
2025-01-10T13:49:05.4525332Z                 raise_assert_detail(
2025-01-10T13:49:05.4525469Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4525541Z                 )
2025-01-10T13:49:05.4525609Z     
2025-01-10T13:49:05.4525679Z             diff = 0
2025-01-10T13:49:05.4525789Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4525871Z                 # count up differences
2025-01-10T13:49:05.4526047Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4526121Z                     diff += 1
2025-01-10T13:49:05.4526192Z     
2025-01-10T13:49:05.4526382Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4526517Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4526687Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4526801Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4526869Z E           
2025-01-10T13:49:05.4526985Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4527243Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4527508Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4527520Z 
2025-01-10T13:49:05.4527818Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4527823Z 
2025-01-10T13:49:05.4527991Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4528000Z 
2025-01-10T13:49:05.4528221Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fc920>
2025-01-10T13:49:05.4528424Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>, attr = 'nu'
2025-01-10T13:49:05.4528429Z 
2025-01-10T13:49:05.4528562Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4528679Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4528759Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4528833Z         try:
2025-01-10T13:49:05.4528973Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4529061Z         except KeyError:
2025-01-10T13:49:05.4529197Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4529269Z     
2025-01-10T13:49:05.4529351Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4529447Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4529536Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4529667Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4529755Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4529843Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4529954Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4529958Z 
2025-01-10T13:49:05.4530079Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4530195Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4530341Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4530511Z     ???
2025-01-10T13:49:05.4530618Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4530623Z 
2025-01-10T13:49:05.4530693Z >   ???
2025-01-10T13:49:05.4530823Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4530889Z E   
2025-01-10T13:49:05.4531018Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4531126Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4531200Z E          ...
2025-01-10T13:49:05.4531284Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4531416Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4531524Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4531597Z E          ...
2025-01-10T13:49:05.4531677Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4531881Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4531986Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4531990Z 
2025-01-10T13:49:05.4532082Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4532285Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] __
2025-01-10T13:49:05.4532294Z 
2025-01-10T13:49:05.4532417Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4532545Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4532637Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4532771Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4532890Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4532983Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4533057Z err_msg = None
2025-01-10T13:49:05.4533064Z 
2025-01-10T13:49:05.4533175Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4533259Z         if err_msg is None:
2025-01-10T13:49:05.4533348Z             if left.shape != right.shape:
2025-01-10T13:49:05.4533433Z                 raise_assert_detail(
2025-01-10T13:49:05.4533571Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4533762Z                 )
2025-01-10T13:49:05.4533830Z     
2025-01-10T13:49:05.4533904Z             diff = 0
2025-01-10T13:49:05.4534011Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4534100Z                 # count up differences
2025-01-10T13:49:05.4534267Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4534345Z                     diff += 1
2025-01-10T13:49:05.4534412Z     
2025-01-10T13:49:05.4534504Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4534642Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4534818Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4534932Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4535000Z E           
2025-01-10T13:49:05.4535113Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4535372Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4535635Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4535764Z 
2025-01-10T13:49:05.4536073Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4536078Z 
2025-01-10T13:49:05.4536241Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4536246Z 
2025-01-10T13:49:05.4536475Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fc9e0>
2025-01-10T13:49:05.4536638Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4536721Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4536727Z 
2025-01-10T13:49:05.4536858Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4536972Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4537052Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4537226Z         try:
2025-01-10T13:49:05.4537366Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4537448Z         except KeyError:
2025-01-10T13:49:05.4537588Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4537653Z     
2025-01-10T13:49:05.4537739Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4537828Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4537921Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4538047Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4538135Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4538219Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4538329Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4538338Z 
2025-01-10T13:49:05.4538459Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4538575Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4538726Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4538797Z     ???
2025-01-10T13:49:05.4538913Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4538918Z 
2025-01-10T13:49:05.4538983Z >   ???
2025-01-10T13:49:05.4539111Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4539177Z E   
2025-01-10T13:49:05.4539305Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4539413Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4539489Z E          ...
2025-01-10T13:49:05.4539574Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4539703Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4539813Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4539890Z E          ...
2025-01-10T13:49:05.4539977Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4540102Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4540212Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4540217Z 
2025-01-10T13:49:05.4540304Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4540506Z ______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-f_lu] ______
2025-01-10T13:49:05.4540510Z 
2025-01-10T13:49:05.4540633Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4540761Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4540853Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4540987Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4541111Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4541204Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4541280Z err_msg = None
2025-01-10T13:49:05.4541373Z 
2025-01-10T13:49:05.4541483Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4541566Z         if err_msg is None:
2025-01-10T13:49:05.4541654Z             if left.shape != right.shape:
2025-01-10T13:49:05.4541737Z                 raise_assert_detail(
2025-01-10T13:49:05.4541874Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4541948Z                 )
2025-01-10T13:49:05.4542013Z     
2025-01-10T13:49:05.4542086Z             diff = 0
2025-01-10T13:49:05.4542194Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4542283Z                 # count up differences
2025-01-10T13:49:05.4542453Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4542527Z                     diff += 1
2025-01-10T13:49:05.4542599Z     
2025-01-10T13:49:05.4542791Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4542927Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4543096Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4543223Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4543295Z E           
2025-01-10T13:49:05.4543407Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4543774Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4544041Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4544052Z 
2025-01-10T13:49:05.4544352Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4544356Z 
2025-01-10T13:49:05.4544518Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4544522Z 
2025-01-10T13:49:05.4544747Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fcaa0>
2025-01-10T13:49:05.4544948Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>, attr = 'f_lu'
2025-01-10T13:49:05.4544958Z 
2025-01-10T13:49:05.4545091Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4545206Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4545286Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4545360Z         try:
2025-01-10T13:49:05.4545498Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4545582Z         except KeyError:
2025-01-10T13:49:05.4545715Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4545785Z     
2025-01-10T13:49:05.4545868Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4545962Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4546047Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4546180Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4546262Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4546354Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4546465Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4546470Z 
2025-01-10T13:49:05.4546589Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4546702Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4546846Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4547054Z     ???
2025-01-10T13:49:05.4547163Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4547168Z 
2025-01-10T13:49:05.4547239Z >   ???
2025-01-10T13:49:05.4547363Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4547435Z E   
2025-01-10T13:49:05.4547559Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4547671Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4547746Z E          ...
2025-01-10T13:49:05.4547828Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4547955Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4548061Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4548134Z E          ...
2025-01-10T13:49:05.4548214Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4548447Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4548549Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4548554Z 
2025-01-10T13:49:05.4548645Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4548885Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] _
2025-01-10T13:49:05.4548890Z 
2025-01-10T13:49:05.4549113Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fd0a0>
2025-01-10T13:49:05.4549279Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4549367Z attr = 'stimulated_emission_factor'
2025-01-10T13:49:05.4549372Z 
2025-01-10T13:49:05.4549506Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4549615Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4549699Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4549767Z         try:
2025-01-10T13:49:05.4549908Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4549986Z         except KeyError:
2025-01-10T13:49:05.4550126Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4550191Z     
2025-01-10T13:49:05.4550277Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4550369Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4550461Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4550591Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4550673Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4550764Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4550867Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4550940Z             else:
2025-01-10T13:49:05.4551032Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4551139Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4551143Z 
2025-01-10T13:49:05.4551268Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4551381Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4551518Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4551589Z     ???
2025-01-10T13:49:05.4551694Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4551703Z 
2025-01-10T13:49:05.4551768Z >   ???
2025-01-10T13:49:05.4551952Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.4552018Z E   
2025-01-10T13:49:05.4552187Z E   DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:49:05.4552554Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4557656Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
2025-01-10T13:49:05.4562669Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:49:05.4562865Z E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:49:05.4562873Z 
2025-01-10T13:49:05.4562959Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4563288Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] _
2025-01-10T13:49:05.4563294Z 
2025-01-10T13:49:05.4563424Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4563551Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4563773Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4563908Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4564035Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4564124Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4564202Z err_msg = None
2025-01-10T13:49:05.4564207Z 
2025-01-10T13:49:05.4564313Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4564511Z         if err_msg is None:
2025-01-10T13:49:05.4564606Z             if left.shape != right.shape:
2025-01-10T13:49:05.4564698Z                 raise_assert_detail(
2025-01-10T13:49:05.4564843Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4564911Z                 )
2025-01-10T13:49:05.4564982Z     
2025-01-10T13:49:05.4565051Z             diff = 0
2025-01-10T13:49:05.4565161Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4565246Z                 # count up differences
2025-01-10T13:49:05.4565416Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4565491Z                     diff += 1
2025-01-10T13:49:05.4565562Z     
2025-01-10T13:49:05.4565647Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4565783Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4565955Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4566073Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4566142Z E           
2025-01-10T13:49:05.4566255Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4566518Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4566778Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4566787Z 
2025-01-10T13:49:05.4567089Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4567097Z 
2025-01-10T13:49:05.4567269Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4567273Z 
2025-01-10T13:49:05.4567491Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fd160>
2025-01-10T13:49:05.4567662Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4567747Z attr = 'previous_beta_sobolev'
2025-01-10T13:49:05.4567751Z 
2025-01-10T13:49:05.4567889Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4568002Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4568087Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4568154Z         try:
2025-01-10T13:49:05.4568296Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4568375Z         except KeyError:
2025-01-10T13:49:05.4568519Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4568709Z     
2025-01-10T13:49:05.4568792Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4568894Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4568979Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4569112Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4569192Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4569288Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4569394Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4569470Z             else:
2025-01-10T13:49:05.4569561Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4569672Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4569677Z 
2025-01-10T13:49:05.4569798Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4569914Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4570158Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4570229Z     ???
2025-01-10T13:49:05.4570341Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4570346Z 
2025-01-10T13:49:05.4570410Z >   ???
2025-01-10T13:49:05.4570542Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4570608Z E   
2025-01-10T13:49:05.4570741Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4570852Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4570927Z E          ...
2025-01-10T13:49:05.4571013Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4571143Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4571253Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4571329Z E          ...
2025-01-10T13:49:05.4571423Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4571543Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4571655Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4571660Z 
2025-01-10T13:49:05.4571744Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4571948Z __ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] __
2025-01-10T13:49:05.4571953Z 
2025-01-10T13:49:05.4572078Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4572208Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4572300Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4572439Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4572564Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4572659Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4572738Z err_msg = None
2025-01-10T13:49:05.4572742Z 
2025-01-10T13:49:05.4572850Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4572933Z         if err_msg is None:
2025-01-10T13:49:05.4573024Z             if left.shape != right.shape:
2025-01-10T13:49:05.4573112Z                 raise_assert_detail(
2025-01-10T13:49:05.4573252Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4573325Z                 )
2025-01-10T13:49:05.4573389Z     
2025-01-10T13:49:05.4573463Z             diff = 0
2025-01-10T13:49:05.4573686Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4573782Z                 # count up differences
2025-01-10T13:49:05.4573953Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4574028Z                     diff += 1
2025-01-10T13:49:05.4574102Z     
2025-01-10T13:49:05.4574187Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4574463Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4574631Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4574745Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4574816Z E           
2025-01-10T13:49:05.4574928Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4575186Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4575451Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4575564Z 
2025-01-10T13:49:05.4575870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4575875Z 
2025-01-10T13:49:05.4576040Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4576045Z 
2025-01-10T13:49:05.4576270Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fd220>
2025-01-10T13:49:05.4576443Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4576520Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4576524Z 
2025-01-10T13:49:05.4576668Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4576783Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4576873Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4576940Z         try:
2025-01-10T13:49:05.4577081Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4577161Z         except KeyError:
2025-01-10T13:49:05.4577301Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4577366Z     
2025-01-10T13:49:05.4577456Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4577547Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4577640Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4577769Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4577856Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4577946Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4578056Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4578131Z             else:
2025-01-10T13:49:05.4578221Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4578334Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4578341Z 
2025-01-10T13:49:05.4578465Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4578581Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4578730Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4578801Z     ???
2025-01-10T13:49:05.4578909Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4578919Z 
2025-01-10T13:49:05.4578985Z >   ???
2025-01-10T13:49:05.4579114Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4579183Z E   
2025-01-10T13:49:05.4579312Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4579422Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4579494Z E          ...
2025-01-10T13:49:05.4579580Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4579710Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4579913Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4579987Z E          ...
2025-01-10T13:49:05.4580067Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4580194Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4580296Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4580300Z 
2025-01-10T13:49:05.4580393Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4580594Z __ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] __
2025-01-10T13:49:05.4580599Z 
2025-01-10T13:49:05.4580724Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4580856Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4580949Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4581161Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4581284Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4581376Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4581448Z err_msg = None
2025-01-10T13:49:05.4581457Z 
2025-01-10T13:49:05.4581564Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4581647Z         if err_msg is None:
2025-01-10T13:49:05.4581738Z             if left.shape != right.shape:
2025-01-10T13:49:05.4581825Z                 raise_assert_detail(
2025-01-10T13:49:05.4581967Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4582040Z                 )
2025-01-10T13:49:05.4582105Z     
2025-01-10T13:49:05.4582181Z             diff = 0
2025-01-10T13:49:05.4582288Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4582381Z                 # count up differences
2025-01-10T13:49:05.4582546Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4582629Z                     diff += 1
2025-01-10T13:49:05.4582695Z     
2025-01-10T13:49:05.4582786Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4582918Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4583091Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4583208Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4583278Z E           
2025-01-10T13:49:05.4583389Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4583761Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4584034Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4584040Z 
2025-01-10T13:49:05.4584342Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4584347Z 
2025-01-10T13:49:05.4584513Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4584517Z 
2025-01-10T13:49:05.4584744Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fd2e0>
2025-01-10T13:49:05.4584908Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4584995Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4585000Z 
2025-01-10T13:49:05.4585132Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4585367Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4585455Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4585522Z         try:
2025-01-10T13:49:05.4585663Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4585742Z         except KeyError:
2025-01-10T13:49:05.4585881Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4585947Z     
2025-01-10T13:49:05.4586033Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4586122Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4586212Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4586345Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4586431Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4586519Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4586735Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4586807Z             else:
2025-01-10T13:49:05.4586903Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4587012Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4587017Z 
2025-01-10T13:49:05.4587137Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4587255Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4587394Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4587466Z     ???
2025-01-10T13:49:05.4587573Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4587578Z 
2025-01-10T13:49:05.4587652Z >   ???
2025-01-10T13:49:05.4587776Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4587850Z E   
2025-01-10T13:49:05.4587972Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4588089Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4588161Z E          ...
2025-01-10T13:49:05.4588250Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4588381Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4588488Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4588562Z E          ...
2025-01-10T13:49:05.4588644Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4588773Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4588873Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4588878Z 
2025-01-10T13:49:05.4588968Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4589163Z ____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues] _____
2025-01-10T13:49:05.4589168Z 
2025-01-10T13:49:05.4589300Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4589428Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4589529Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4589664Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4589784Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4589881Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4589954Z err_msg = None
2025-01-10T13:49:05.4589958Z 
2025-01-10T13:49:05.4590068Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4590147Z         if err_msg is None:
2025-01-10T13:49:05.4590245Z             if left.shape != right.shape:
2025-01-10T13:49:05.4590328Z                 raise_assert_detail(
2025-01-10T13:49:05.4590479Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4590555Z                 )
2025-01-10T13:49:05.4590620Z     
2025-01-10T13:49:05.4590790Z             diff = 0
2025-01-10T13:49:05.4590899Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4590988Z                 # count up differences
2025-01-10T13:49:05.4591155Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4591236Z                     diff += 1
2025-01-10T13:49:05.4591301Z     
2025-01-10T13:49:05.4591390Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4591522Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4591694Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4591804Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4591877Z E           
2025-01-10T13:49:05.4591984Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4592345Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4592610Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4592615Z 
2025-01-10T13:49:05.4592914Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4592919Z 
2025-01-10T13:49:05.4593086Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4593091Z 
2025-01-10T13:49:05.4593319Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fd460>
2025-01-10T13:49:05.4593486Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bc883fad0>
2025-01-10T13:49:05.4593563Z attr = 'j_blues'
2025-01-10T13:49:05.4593567Z 
2025-01-10T13:49:05.4593794Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4593912Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4593994Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4594066Z         try:
2025-01-10T13:49:05.4594202Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4594284Z         except KeyError:
2025-01-10T13:49:05.4594419Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4594492Z     
2025-01-10T13:49:05.4594575Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4594669Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4594757Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4594892Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4594981Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4595067Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4595181Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4595249Z             else:
2025-01-10T13:49:05.4595348Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4595452Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4595457Z 
2025-01-10T13:49:05.4595587Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4595695Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4595842Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4595914Z     ???
2025-01-10T13:49:05.4596019Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4596026Z 
2025-01-10T13:49:05.4596096Z >   ???
2025-01-10T13:49:05.4596223Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4596426Z E   
2025-01-10T13:49:05.4596549Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4596661Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4596730Z E          ...
2025-01-10T13:49:05.4596820Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4596945Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4597058Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4597125Z E          ...
2025-01-10T13:49:05.4597213Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4597333Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4597439Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4597443Z 
2025-01-10T13:49:05.4597531Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4597858Z _______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines] _______
2025-01-10T13:49:05.4597866Z 
2025-01-10T13:49:05.4597996Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4598121Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4598217Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4598345Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4598467Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4598562Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4598637Z err_msg = None
2025-01-10T13:49:05.4598641Z 
2025-01-10T13:49:05.4598753Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4598830Z         if err_msg is None:
2025-01-10T13:49:05.4598928Z             if left.shape != right.shape:
2025-01-10T13:49:05.4599010Z                 raise_assert_detail(
2025-01-10T13:49:05.4599159Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4599226Z                 )
2025-01-10T13:49:05.4599297Z     
2025-01-10T13:49:05.4599367Z             diff = 0
2025-01-10T13:49:05.4599482Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4599567Z                 # count up differences
2025-01-10T13:49:05.4599737Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4599812Z                     diff += 1
2025-01-10T13:49:05.4599887Z     
2025-01-10T13:49:05.4599977Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4600109Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4600280Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4600391Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4600467Z E           
2025-01-10T13:49:05.4600576Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4600838Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4601098Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4601109Z 
2025-01-10T13:49:05.4601402Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4601409Z 
2025-01-10T13:49:05.4601695Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4601701Z 
2025-01-10T13:49:05.4601920Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fe1e0>
2025-01-10T13:49:05.4602087Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>
2025-01-10T13:49:05.4602157Z attr = 'lines'
2025-01-10T13:49:05.4602167Z 
2025-01-10T13:49:05.4602297Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4602415Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4602496Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4602570Z         try:
2025-01-10T13:49:05.4602709Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4602791Z         except KeyError:
2025-01-10T13:49:05.4602926Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4603076Z     
2025-01-10T13:49:05.4603157Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4603256Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4603340Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4603472Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4603554Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4603831Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4603968Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4604038Z             else:
2025-01-10T13:49:05.4604135Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4604239Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4604244Z 
2025-01-10T13:49:05.4604385Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4604494Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4604643Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4604717Z     ???
2025-01-10T13:49:05.4604837Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4604843Z 
2025-01-10T13:49:05.4604909Z >   ???
2025-01-10T13:49:05.4605044Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4605118Z E   
2025-01-10T13:49:05.4605243Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4605358Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4605427Z E          ...
2025-01-10T13:49:05.4605517Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4605643Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4605758Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4605830Z E          ...
2025-01-10T13:49:05.4605919Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4606044Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4606150Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4606157Z 
2025-01-10T13:49:05.4606243Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4606471Z _ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index] _
2025-01-10T13:49:05.4606476Z 
2025-01-10T13:49:05.4606693Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fe2a0>
2025-01-10T13:49:05.4615247Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>
2025-01-10T13:49:05.4615350Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4615356Z 
2025-01-10T13:49:05.4615511Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4615645Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4615729Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4615804Z         try:
2025-01-10T13:49:05.4615958Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4616054Z         except KeyError:
2025-01-10T13:49:05.4616373Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4616451Z     
2025-01-10T13:49:05.4616535Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4616633Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4616720Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4616868Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4616958Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4617051Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4617172Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4617177Z 
2025-01-10T13:49:05.4617304Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4617427Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4617432Z 
2025-01-10T13:49:05.4617571Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4617772Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4617886Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4617974Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4618117Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4618205Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4618314Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4618392Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4618472Z err_msg = None
2025-01-10T13:49:05.4618477Z 
2025-01-10T13:49:05.4618593Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4618676Z         if err_msg is None:
2025-01-10T13:49:05.4618770Z             if left.shape != right.shape:
2025-01-10T13:49:05.4618858Z                 raise_assert_detail(
2025-01-10T13:49:05.4619011Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4619090Z                 )
2025-01-10T13:49:05.4619160Z     
2025-01-10T13:49:05.4619235Z             diff = 0
2025-01-10T13:49:05.4619349Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4619442Z                 # count up differences
2025-01-10T13:49:05.4619623Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4619698Z                     diff += 1
2025-01-10T13:49:05.4619769Z     
2025-01-10T13:49:05.4619856Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4619998Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4620170Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4620280Z E           AssertionError: Series are different
2025-01-10T13:49:05.4620349Z E           
2025-01-10T13:49:05.4620458Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4620837Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4621181Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4621518Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4621649Z 
2025-01-10T13:49:05.4621975Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4622203Z _ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index] _
2025-01-10T13:49:05.4622208Z 
2025-01-10T13:49:05.4622433Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fe360>
2025-01-10T13:49:05.4622600Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>
2025-01-10T13:49:05.4622692Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4622697Z 
2025-01-10T13:49:05.4622835Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4623031Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4623112Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4623190Z         try:
2025-01-10T13:49:05.4623330Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4623414Z         except KeyError:
2025-01-10T13:49:05.4623556Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4623776Z     
2025-01-10T13:49:05.4623871Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4623964Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4624057Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4624189Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4624280Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4624367Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4624481Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4624486Z 
2025-01-10T13:49:05.4624618Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4624740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4624748Z 
2025-01-10T13:49:05.4624887Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4624972Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4625083Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4625159Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4625301Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4625380Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4625486Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4625561Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4625639Z err_msg = None
2025-01-10T13:49:05.4625643Z 
2025-01-10T13:49:05.4625754Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4625838Z         if err_msg is None:
2025-01-10T13:49:05.4625936Z             if left.shape != right.shape:
2025-01-10T13:49:05.4626018Z                 raise_assert_detail(
2025-01-10T13:49:05.4626166Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4626235Z                 )
2025-01-10T13:49:05.4626306Z     
2025-01-10T13:49:05.4626378Z             diff = 0
2025-01-10T13:49:05.4626495Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4626582Z                 # count up differences
2025-01-10T13:49:05.4626760Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4626834Z                     diff += 1
2025-01-10T13:49:05.4626907Z     
2025-01-10T13:49:05.4626991Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4627130Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4627302Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4627538Z E           AssertionError: Series are different
2025-01-10T13:49:05.4627612Z E           
2025-01-10T13:49:05.4627711Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4628086Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4628458Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4628941Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4628947Z 
2025-01-10T13:49:05.4629259Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4629449Z ________ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-nu] _________
2025-01-10T13:49:05.4629453Z 
2025-01-10T13:49:05.4629584Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4629721Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4629820Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4629955Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4630075Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4630170Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4630243Z err_msg = None
2025-01-10T13:49:05.4630247Z 
2025-01-10T13:49:05.4630358Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4630436Z         if err_msg is None:
2025-01-10T13:49:05.4630533Z             if left.shape != right.shape:
2025-01-10T13:49:05.4630612Z                 raise_assert_detail(
2025-01-10T13:49:05.4630758Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4630836Z                 )
2025-01-10T13:49:05.4630908Z     
2025-01-10T13:49:05.4630982Z             diff = 0
2025-01-10T13:49:05.4631091Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4631183Z                 # count up differences
2025-01-10T13:49:05.4631351Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4631430Z                     diff += 1
2025-01-10T13:49:05.4631497Z     
2025-01-10T13:49:05.4631586Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4631714Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4631885Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4631994Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4632068Z E           
2025-01-10T13:49:05.4632177Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4632445Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4632798Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4632803Z 
2025-01-10T13:49:05.4633095Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4633105Z 
2025-01-10T13:49:05.4633269Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4633345Z 
2025-01-10T13:49:05.4633571Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fe5a0>
2025-01-10T13:49:05.4633873Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>, attr = 'nu'
2025-01-10T13:49:05.4633879Z 
2025-01-10T13:49:05.4634018Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4634131Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4634221Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4634288Z         try:
2025-01-10T13:49:05.4634427Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4634506Z         except KeyError:
2025-01-10T13:49:05.4634648Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4634719Z     
2025-01-10T13:49:05.4634802Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4634897Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4634983Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4635120Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4635205Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4635297Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4635404Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4635408Z 
2025-01-10T13:49:05.4635534Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4635644Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4635794Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4635861Z     ???
2025-01-10T13:49:05.4635972Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4635976Z 
2025-01-10T13:49:05.4636046Z >   ???
2025-01-10T13:49:05.4636174Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4636245Z E   
2025-01-10T13:49:05.4636371Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4636493Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4636565Z E          ...
2025-01-10T13:49:05.4636658Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4636789Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4636903Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4636972Z E          ...
2025-01-10T13:49:05.4637060Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4637180Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4637290Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4637295Z 
2025-01-10T13:49:05.4637388Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4637591Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-wavelength_cm] ___
2025-01-10T13:49:05.4637595Z 
2025-01-10T13:49:05.4637729Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4637860Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4638116Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4638246Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4638371Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4638463Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4638541Z err_msg = None
2025-01-10T13:49:05.4638545Z 
2025-01-10T13:49:05.4638658Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4638736Z         if err_msg is None:
2025-01-10T13:49:05.4638833Z             if left.shape != right.shape:
2025-01-10T13:49:05.4638914Z                 raise_assert_detail(
2025-01-10T13:49:05.4639061Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4639237Z                 )
2025-01-10T13:49:05.4639309Z     
2025-01-10T13:49:05.4639383Z             diff = 0
2025-01-10T13:49:05.4639498Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4639583Z                 # count up differences
2025-01-10T13:49:05.4639755Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4639828Z                     diff += 1
2025-01-10T13:49:05.4639900Z     
2025-01-10T13:49:05.4639984Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4640122Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4640294Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4640411Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4640486Z E           
2025-01-10T13:49:05.4640595Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4640867Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4641131Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4641141Z 
2025-01-10T13:49:05.4641444Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4641449Z 
2025-01-10T13:49:05.4641622Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4641630Z 
2025-01-10T13:49:05.4641855Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fe660>
2025-01-10T13:49:05.4642028Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>
2025-01-10T13:49:05.4642105Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4642110Z 
2025-01-10T13:49:05.4642248Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4642365Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4642447Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4642520Z         try:
2025-01-10T13:49:05.4642656Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4642740Z         except KeyError:
2025-01-10T13:49:05.4642876Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4642949Z     
2025-01-10T13:49:05.4643032Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4643131Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4643216Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4643354Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4643549Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4643773Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4643885Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4643894Z 
2025-01-10T13:49:05.4644016Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4644134Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4644276Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4644349Z     ???
2025-01-10T13:49:05.4644458Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4644462Z 
2025-01-10T13:49:05.4644533Z >   ???
2025-01-10T13:49:05.4644657Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4644730Z E   
2025-01-10T13:49:05.4644855Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4645085Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4645158Z E          ...
2025-01-10T13:49:05.4645247Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4645373Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4645488Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4645562Z E          ...
2025-01-10T13:49:05.4645643Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4645769Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4645870Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4645875Z 
2025-01-10T13:49:05.4645965Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4646169Z _______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-f_lu] ________
2025-01-10T13:49:05.4646174Z 
2025-01-10T13:49:05.4646308Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4646441Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4646544Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4646681Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4646802Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4646898Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4646971Z err_msg = None
2025-01-10T13:49:05.4646976Z 
2025-01-10T13:49:05.4647089Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4647167Z         if err_msg is None:
2025-01-10T13:49:05.4647262Z             if left.shape != right.shape:
2025-01-10T13:49:05.4647345Z                 raise_assert_detail(
2025-01-10T13:49:05.4647494Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4647566Z                 )
2025-01-10T13:49:05.4647640Z     
2025-01-10T13:49:05.4647709Z             diff = 0
2025-01-10T13:49:05.4647826Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4647916Z                 # count up differences
2025-01-10T13:49:05.4648084Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4648164Z                     diff += 1
2025-01-10T13:49:05.4648230Z     
2025-01-10T13:49:05.4648321Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4648457Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4648633Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4648744Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4648817Z E           
2025-01-10T13:49:05.4648925Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4649195Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4649582Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4649588Z 
2025-01-10T13:49:05.4649891Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4649896Z 
2025-01-10T13:49:05.4650069Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4650146Z 
2025-01-10T13:49:05.4650375Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fe720>
2025-01-10T13:49:05.4650578Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>, attr = 'f_lu'
2025-01-10T13:49:05.4650583Z 
2025-01-10T13:49:05.4650723Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4650841Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4650925Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4650994Z         try:
2025-01-10T13:49:05.4651137Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4651216Z         except KeyError:
2025-01-10T13:49:05.4651354Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4651420Z     
2025-01-10T13:49:05.4651511Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4651603Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4651699Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4651836Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4651922Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4652013Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4652125Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4652130Z 
2025-01-10T13:49:05.4652256Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4652367Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4652517Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4652585Z     ???
2025-01-10T13:49:05.4652696Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4652700Z 
2025-01-10T13:49:05.4652767Z >   ???
2025-01-10T13:49:05.4652899Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4652971Z E   
2025-01-10T13:49:05.4653094Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4653212Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4653285Z E          ...
2025-01-10T13:49:05.4653377Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4653504Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4653727Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4653798Z E          ...
2025-01-10T13:49:05.4653886Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4654009Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4654116Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4654121Z 
2025-01-10T13:49:05.4654206Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4654410Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs] ____
2025-01-10T13:49:05.4654414Z 
2025-01-10T13:49:05.4654543Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4654672Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4654896Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4655027Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4655151Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4655241Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4655318Z err_msg = None
2025-01-10T13:49:05.4655323Z 
2025-01-10T13:49:05.4655432Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4655515Z         if err_msg is None:
2025-01-10T13:49:05.4655611Z             if left.shape != right.shape:
2025-01-10T13:49:05.4655693Z                 raise_assert_detail(
2025-01-10T13:49:05.4655838Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4656014Z                 )
2025-01-10T13:49:05.4656092Z     
2025-01-10T13:49:05.4656162Z             diff = 0
2025-01-10T13:49:05.4656275Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4656359Z                 # count up differences
2025-01-10T13:49:05.4656530Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4656604Z                     diff += 1
2025-01-10T13:49:05.4656674Z     
2025-01-10T13:49:05.4656760Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4656898Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4657064Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4657178Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4657251Z E           
2025-01-10T13:49:05.4657360Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4657625Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4657886Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4657896Z 
2025-01-10T13:49:05.4658194Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4658199Z 
2025-01-10T13:49:05.4658369Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4658376Z 
2025-01-10T13:49:05.4658596Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88feea0>
2025-01-10T13:49:05.4658770Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>
2025-01-10T13:49:05.4658849Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4658853Z 
2025-01-10T13:49:05.4658995Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4659107Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4659195Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4659262Z         try:
2025-01-10T13:49:05.4659405Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4659488Z         except KeyError:
2025-01-10T13:49:05.4659626Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4659698Z     
2025-01-10T13:49:05.4659781Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4659875Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4659965Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4660099Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4660270Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4660362Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4660468Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4660542Z             else:
2025-01-10T13:49:05.4660633Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4660741Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4660746Z 
2025-01-10T13:49:05.4660873Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4660985Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4661132Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4661200Z     ???
2025-01-10T13:49:05.4661314Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4661412Z 
2025-01-10T13:49:05.4661479Z >   ???
2025-01-10T13:49:05.4661607Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4661677Z E   
2025-01-10T13:49:05.4661806Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4661914Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4661989Z E          ...
2025-01-10T13:49:05.4662073Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4662203Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4662317Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4662384Z E          ...
2025-01-10T13:49:05.4662470Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4662588Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4662693Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4662698Z 
2025-01-10T13:49:05.4662790Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4662989Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-beta_sobolev] ____
2025-01-10T13:49:05.4662997Z 
2025-01-10T13:49:05.4663123Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4663254Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4663352Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4663480Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4663733Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4663826Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4663905Z err_msg = None
2025-01-10T13:49:05.4663909Z 
2025-01-10T13:49:05.4664017Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4664105Z         if err_msg is None:
2025-01-10T13:49:05.4664195Z             if left.shape != right.shape:
2025-01-10T13:49:05.4664282Z                 raise_assert_detail(
2025-01-10T13:49:05.4664420Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4664493Z                 )
2025-01-10T13:49:05.4664559Z     
2025-01-10T13:49:05.4664635Z             diff = 0
2025-01-10T13:49:05.4664746Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4664827Z                 # count up differences
2025-01-10T13:49:05.4664997Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4665071Z                     diff += 1
2025-01-10T13:49:05.4665142Z     
2025-01-10T13:49:05.4665225Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4665364Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4665535Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4665650Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4665894Z E           
2025-01-10T13:49:05.4666007Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4666265Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4666528Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4666534Z 
2025-01-10T13:49:05.4666836Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4666945Z 
2025-01-10T13:49:05.4667113Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4667127Z 
2025-01-10T13:49:05.4667346Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fef60>
2025-01-10T13:49:05.4667514Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>
2025-01-10T13:49:05.4667589Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4667594Z 
2025-01-10T13:49:05.4667730Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4667840Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4667925Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4667993Z         try:
2025-01-10T13:49:05.4668133Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4668211Z         except KeyError:
2025-01-10T13:49:05.4668349Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4668423Z     
2025-01-10T13:49:05.4668511Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4668605Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4668697Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4668829Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4668911Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4669001Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4669106Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4669179Z             else:
2025-01-10T13:49:05.4669275Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4669384Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4669390Z 
2025-01-10T13:49:05.4669512Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4669626Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4669768Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4669844Z     ???
2025-01-10T13:49:05.4669953Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4669962Z 
2025-01-10T13:49:05.4670029Z >   ???
2025-01-10T13:49:05.4670158Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4670225Z E   
2025-01-10T13:49:05.4670355Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4670462Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4670536Z E          ...
2025-01-10T13:49:05.4670620Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4670750Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4670859Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4670936Z E          ...
2025-01-10T13:49:05.4671018Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4671147Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4671339Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4671349Z 
2025-01-10T13:49:05.4671433Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4671629Z ______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-j_blues] ______
2025-01-10T13:49:05.4671633Z 
2025-01-10T13:49:05.4671757Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4671887Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4671980Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4672115Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4672235Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4672328Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4672486Z err_msg = None
2025-01-10T13:49:05.4672493Z 
2025-01-10T13:49:05.4672600Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4672681Z         if err_msg is None:
2025-01-10T13:49:05.4672772Z             if left.shape != right.shape:
2025-01-10T13:49:05.4672859Z                 raise_assert_detail(
2025-01-10T13:49:05.4672997Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4673070Z                 )
2025-01-10T13:49:05.4673135Z     
2025-01-10T13:49:05.4673209Z             diff = 0
2025-01-10T13:49:05.4673317Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4673405Z                 # count up differences
2025-01-10T13:49:05.4673724Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4673812Z                     diff += 1
2025-01-10T13:49:05.4673878Z     
2025-01-10T13:49:05.4673971Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4674108Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4674278Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4674388Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4674458Z E           
2025-01-10T13:49:05.4674568Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4674825Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4675090Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4675102Z 
2025-01-10T13:49:05.4675405Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4675410Z 
2025-01-10T13:49:05.4675574Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4675578Z 
2025-01-10T13:49:05.4675804Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88ff0e0>
2025-01-10T13:49:05.4675967Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bf8597050>
2025-01-10T13:49:05.4676044Z attr = 'j_blues'
2025-01-10T13:49:05.4676049Z 
2025-01-10T13:49:05.4676179Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4676294Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4676379Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4676451Z         try:
2025-01-10T13:49:05.4676592Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4676788Z         except KeyError:
2025-01-10T13:49:05.4676929Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4676996Z     
2025-01-10T13:49:05.4677084Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4677173Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4677263Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4677390Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4677478Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4677564Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4677676Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4677749Z             else:
2025-01-10T13:49:05.4677839Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4677949Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4678059Z 
2025-01-10T13:49:05.4678184Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4678303Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4678443Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4678514Z     ???
2025-01-10T13:49:05.4678623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4678628Z 
2025-01-10T13:49:05.4678698Z >   ???
2025-01-10T13:49:05.4678820Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4678892Z E   
2025-01-10T13:49:05.4679018Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4679130Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4679204Z E          ...
2025-01-10T13:49:05.4679288Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4679420Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4679533Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4679613Z E          ...
2025-01-10T13:49:05.4679697Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4679824Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4679926Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4679930Z 
2025-01-10T13:49:05.4680020Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4680208Z ________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines] ________
2025-01-10T13:49:05.4680213Z 
2025-01-10T13:49:05.4680342Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4680469Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4680560Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4680695Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4680819Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4680917Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4680989Z err_msg = None
2025-01-10T13:49:05.4680993Z 
2025-01-10T13:49:05.4681103Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4681180Z         if err_msg is None:
2025-01-10T13:49:05.4681274Z             if left.shape != right.shape:
2025-01-10T13:49:05.4681355Z                 raise_assert_detail(
2025-01-10T13:49:05.4681501Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4681574Z                 )
2025-01-10T13:49:05.4681640Z     
2025-01-10T13:49:05.4681717Z             diff = 0
2025-01-10T13:49:05.4681825Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4681914Z                 # count up differences
2025-01-10T13:49:05.4682083Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4682253Z                     diff += 1
2025-01-10T13:49:05.4682319Z     
2025-01-10T13:49:05.4682409Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4682542Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4682713Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4682823Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4682898Z E           
2025-01-10T13:49:05.4683010Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4683268Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4683750Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4683761Z 
2025-01-10T13:49:05.4684059Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4684069Z 
2025-01-10T13:49:05.4684233Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4684237Z 
2025-01-10T13:49:05.4684464Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88ffe60>
2025-01-10T13:49:05.4684626Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>
2025-01-10T13:49:05.4684702Z attr = 'lines'
2025-01-10T13:49:05.4684707Z 
2025-01-10T13:49:05.4684846Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4684962Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4685045Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4685118Z         try:
2025-01-10T13:49:05.4685254Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4685336Z         except KeyError:
2025-01-10T13:49:05.4685476Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4685541Z     
2025-01-10T13:49:05.4685628Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4685717Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4685807Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4685934Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4686020Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4686106Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4686216Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4686287Z             else:
2025-01-10T13:49:05.4686383Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4686488Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4686493Z 
2025-01-10T13:49:05.4686618Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4686728Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4686874Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4686950Z     ???
2025-01-10T13:49:05.4687057Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4687061Z 
2025-01-10T13:49:05.4687131Z >   ???
2025-01-10T13:49:05.4687252Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4687325Z E   
2025-01-10T13:49:05.4687451Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4687564Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4687639Z E          ...
2025-01-10T13:49:05.4687729Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4687972Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4688086Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4688160Z E          ...
2025-01-10T13:49:05.4688243Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4688367Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4688467Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4688472Z 
2025-01-10T13:49:05.4688561Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4688778Z _ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index] _
2025-01-10T13:49:05.4688784Z 
2025-01-10T13:49:05.4689006Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fff20>
2025-01-10T13:49:05.4689165Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>
2025-01-10T13:49:05.4689359Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4689368Z 
2025-01-10T13:49:05.4689498Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4689611Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4689696Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4689764Z         try:
2025-01-10T13:49:05.4689904Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4689980Z         except KeyError:
2025-01-10T13:49:05.4690118Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4690187Z     
2025-01-10T13:49:05.4690277Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4690367Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4690457Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4690585Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4690674Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4690764Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4690878Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4690883Z 
2025-01-10T13:49:05.4691013Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4691120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4691125Z 
2025-01-10T13:49:05.4691261Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4691343Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4691452Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4691529Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4691668Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4691748Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4691859Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4691939Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4692019Z err_msg = None
2025-01-10T13:49:05.4692023Z 
2025-01-10T13:49:05.4692134Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4692210Z         if err_msg is None:
2025-01-10T13:49:05.4692306Z             if left.shape != right.shape:
2025-01-10T13:49:05.4692387Z                 raise_assert_detail(
2025-01-10T13:49:05.4692530Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4692599Z                 )
2025-01-10T13:49:05.4692669Z     
2025-01-10T13:49:05.4692739Z             diff = 0
2025-01-10T13:49:05.4692850Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4692934Z                 # count up differences
2025-01-10T13:49:05.4693101Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4693180Z                     diff += 1
2025-01-10T13:49:05.4693252Z     
2025-01-10T13:49:05.4693340Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4693561Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4693834Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4693935Z E           AssertionError: Series are different
2025-01-10T13:49:05.4694008Z E           
2025-01-10T13:49:05.4694107Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4694482Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4694921Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4695258Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4695264Z 
2025-01-10T13:49:05.4695568Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4695788Z _ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index] _
2025-01-10T13:49:05.4695800Z 
2025-01-10T13:49:05.4696020Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf88fffe0>
2025-01-10T13:49:05.4696188Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>
2025-01-10T13:49:05.4696273Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4696278Z 
2025-01-10T13:49:05.4696415Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4696526Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4696612Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4696679Z         try:
2025-01-10T13:49:05.4696820Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4696901Z         except KeyError:
2025-01-10T13:49:05.4697041Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4697107Z     
2025-01-10T13:49:05.4697194Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4697292Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4697378Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4697516Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4697598Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4697686Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4697792Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4697796Z 
2025-01-10T13:49:05.4697920Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4698031Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4698035Z 
2025-01-10T13:49:05.4698171Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4698252Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4698361Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4698442Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4698582Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4698784Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4698888Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4698968Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4699040Z err_msg = None
2025-01-10T13:49:05.4699043Z 
2025-01-10T13:49:05.4699153Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4699231Z         if err_msg is None:
2025-01-10T13:49:05.4699325Z             if left.shape != right.shape:
2025-01-10T13:49:05.4699404Z                 raise_assert_detail(
2025-01-10T13:49:05.4699547Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4699620Z                 )
2025-01-10T13:49:05.4699686Z     
2025-01-10T13:49:05.4699763Z             diff = 0
2025-01-10T13:49:05.4699869Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4700036Z                 # count up differences
2025-01-10T13:49:05.4700205Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4700285Z                     diff += 1
2025-01-10T13:49:05.4700352Z     
2025-01-10T13:49:05.4700440Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4700574Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4700746Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4700849Z E           AssertionError: Series are different
2025-01-10T13:49:05.4700923Z E           
2025-01-10T13:49:05.4701022Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4701393Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4701776Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4702148Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4702165Z 
2025-01-10T13:49:05.4702463Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4702654Z _________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-nu] __________
2025-01-10T13:49:05.4702659Z 
2025-01-10T13:49:05.4702782Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4702910Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4703004Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4703141Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4703265Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4703359Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4703439Z err_msg = None
2025-01-10T13:49:05.4703540Z 
2025-01-10T13:49:05.4703841Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4703942Z         if err_msg is None:
2025-01-10T13:49:05.4704035Z             if left.shape != right.shape:
2025-01-10T13:49:05.4704123Z                 raise_assert_detail(
2025-01-10T13:49:05.4704262Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4704337Z                 )
2025-01-10T13:49:05.4704402Z     
2025-01-10T13:49:05.4704476Z             diff = 0
2025-01-10T13:49:05.4704583Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4704672Z                 # count up differences
2025-01-10T13:49:05.4704842Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4704916Z                     diff += 1
2025-01-10T13:49:05.4704987Z     
2025-01-10T13:49:05.4705193Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4705328Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4705498Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4705611Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4705679Z E           
2025-01-10T13:49:05.4705791Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4706054Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4706318Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4706330Z 
2025-01-10T13:49:05.4706641Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4706646Z 
2025-01-10T13:49:05.4706814Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4706819Z 
2025-01-10T13:49:05.4707044Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8924260>
2025-01-10T13:49:05.4707246Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>, attr = 'nu'
2025-01-10T13:49:05.4707250Z 
2025-01-10T13:49:05.4707380Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4707499Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4707579Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4707652Z         try:
2025-01-10T13:49:05.4707792Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4707879Z         except KeyError:
2025-01-10T13:49:05.4708012Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4708083Z     
2025-01-10T13:49:05.4708165Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4708262Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4708349Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4708483Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4708570Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4708658Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4708770Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4708775Z 
2025-01-10T13:49:05.4708896Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4709017Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4709166Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4709357Z     ???
2025-01-10T13:49:05.4709467Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4709472Z 
2025-01-10T13:49:05.4709546Z >   ???
2025-01-10T13:49:05.4709669Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4709740Z E   
2025-01-10T13:49:05.4709870Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4709980Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4710056Z E          ...
2025-01-10T13:49:05.4710143Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4710275Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4710385Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4710458Z E          ...
2025-01-10T13:49:05.4710542Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4710751Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4710855Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4710860Z 
2025-01-10T13:49:05.4710951Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4711151Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-wavelength_cm] ____
2025-01-10T13:49:05.4711161Z 
2025-01-10T13:49:05.4711286Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4711417Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4711508Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4711646Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4711767Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4711861Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4711936Z err_msg = None
2025-01-10T13:49:05.4711943Z 
2025-01-10T13:49:05.4712053Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4712130Z         if err_msg is None:
2025-01-10T13:49:05.4712226Z             if left.shape != right.shape:
2025-01-10T13:49:05.4712310Z                 raise_assert_detail(
2025-01-10T13:49:05.4712449Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4712521Z                 )
2025-01-10T13:49:05.4712587Z     
2025-01-10T13:49:05.4712662Z             diff = 0
2025-01-10T13:49:05.4712769Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4712859Z                 # count up differences
2025-01-10T13:49:05.4713025Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4713103Z                     diff += 1
2025-01-10T13:49:05.4713170Z     
2025-01-10T13:49:05.4713265Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4713396Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4713573Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4713788Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4713864Z E           
2025-01-10T13:49:05.4713976Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4714233Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4714497Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4714622Z 
2025-01-10T13:49:05.4714921Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4714931Z 
2025-01-10T13:49:05.4715098Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4715102Z 
2025-01-10T13:49:05.4715327Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8924320>
2025-01-10T13:49:05.4715493Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>
2025-01-10T13:49:05.4715575Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4715579Z 
2025-01-10T13:49:05.4715711Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4715826Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4715907Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4716106Z         try:
2025-01-10T13:49:05.4716242Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4716329Z         except KeyError:
2025-01-10T13:49:05.4716467Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4716534Z     
2025-01-10T13:49:05.4716620Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4716709Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4716800Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4716927Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4717015Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4717100Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4717211Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4717216Z 
2025-01-10T13:49:05.4717336Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4717449Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4717595Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4717671Z     ???
2025-01-10T13:49:05.4717782Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4717786Z 
2025-01-10T13:49:05.4717851Z >   ???
2025-01-10T13:49:05.4717978Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4718046Z E   
2025-01-10T13:49:05.4718175Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4718281Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4718355Z E          ...
2025-01-10T13:49:05.4718440Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4718567Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4718675Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4718748Z E          ...
2025-01-10T13:49:05.4718831Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4718959Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4719068Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4719072Z 
2025-01-10T13:49:05.4719161Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4719353Z ________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-f_lu] _________
2025-01-10T13:49:05.4719357Z 
2025-01-10T13:49:05.4719481Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4719607Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4719698Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4719830Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4719950Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4720047Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4720219Z err_msg = None
2025-01-10T13:49:05.4720224Z 
2025-01-10T13:49:05.4720332Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4720415Z         if err_msg is None:
2025-01-10T13:49:05.4720503Z             if left.shape != right.shape:
2025-01-10T13:49:05.4720588Z                 raise_assert_detail(
2025-01-10T13:49:05.4720725Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4720797Z                 )
2025-01-10T13:49:05.4720862Z     
2025-01-10T13:49:05.4720937Z             diff = 0
2025-01-10T13:49:05.4721047Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4721135Z                 # count up differences
2025-01-10T13:49:05.4721300Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4721379Z                     diff += 1
2025-01-10T13:49:05.4721450Z     
2025-01-10T13:49:05.4721616Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4721758Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4721926Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4722041Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4722108Z E           
2025-01-10T13:49:05.4722219Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4722474Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4722737Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4722748Z 
2025-01-10T13:49:05.4723049Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4723054Z 
2025-01-10T13:49:05.4723219Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4723224Z 
2025-01-10T13:49:05.4723454Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89243e0>
2025-01-10T13:49:05.4723765Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>, attr = 'f_lu'
2025-01-10T13:49:05.4723776Z 
2025-01-10T13:49:05.4723911Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4724027Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4724108Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4724184Z         try:
2025-01-10T13:49:05.4724319Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4724405Z         except KeyError:
2025-01-10T13:49:05.4724539Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4724613Z     
2025-01-10T13:49:05.4724694Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4724788Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4724872Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4725004Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4725087Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4725177Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4725283Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4725293Z 
2025-01-10T13:49:05.4725413Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4725525Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4725670Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4725883Z     ???
2025-01-10T13:49:05.4725995Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4726000Z 
2025-01-10T13:49:05.4726070Z >   ???
2025-01-10T13:49:05.4726195Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4726268Z E   
2025-01-10T13:49:05.4726393Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4726506Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4726575Z E          ...
2025-01-10T13:49:05.4726665Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4726792Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4726902Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4726974Z E          ...
2025-01-10T13:49:05.4727055Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4727289Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4727392Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4727397Z 
2025-01-10T13:49:05.4727486Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4727680Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs] _____
2025-01-10T13:49:05.4727684Z 
2025-01-10T13:49:05.4727813Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4727935Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4728031Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4728166Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4728284Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4728383Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4728455Z err_msg = None
2025-01-10T13:49:05.4728462Z 
2025-01-10T13:49:05.4728572Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4728650Z         if err_msg is None:
2025-01-10T13:49:05.4728743Z             if left.shape != right.shape:
2025-01-10T13:49:05.4728823Z                 raise_assert_detail(
2025-01-10T13:49:05.4728965Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4729037Z                 )
2025-01-10T13:49:05.4729103Z     
2025-01-10T13:49:05.4729179Z             diff = 0
2025-01-10T13:49:05.4729286Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4729378Z                 # count up differences
2025-01-10T13:49:05.4729544Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4729623Z                     diff += 1
2025-01-10T13:49:05.4729691Z     
2025-01-10T13:49:05.4729789Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4729922Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4730098Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4730205Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4730279Z E           
2025-01-10T13:49:05.4730386Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4730648Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4730915Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4731010Z 
2025-01-10T13:49:05.4731307Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4731311Z 
2025-01-10T13:49:05.4731480Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4731484Z 
2025-01-10T13:49:05.4731709Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8924b60>
2025-01-10T13:49:05.4731874Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>
2025-01-10T13:49:05.4731962Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4731968Z 
2025-01-10T13:49:05.4732100Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4732217Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4732297Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4732447Z         try:
2025-01-10T13:49:05.4732582Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4732669Z         except KeyError:
2025-01-10T13:49:05.4732803Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4732874Z     
2025-01-10T13:49:05.4732964Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4733053Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4733142Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4733270Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4733357Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4733443Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4733553Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4733718Z             else:
2025-01-10T13:49:05.4733816Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4733921Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4733929Z 
2025-01-10T13:49:05.4734055Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4734169Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4734314Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4734387Z     ???
2025-01-10T13:49:05.4734501Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4734505Z 
2025-01-10T13:49:05.4734576Z >   ???
2025-01-10T13:49:05.4734698Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4734772Z E   
2025-01-10T13:49:05.4734894Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4735008Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4735076Z E          ...
2025-01-10T13:49:05.4735168Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4735293Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4735408Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4735480Z E          ...
2025-01-10T13:49:05.4735568Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4735694Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4735792Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4735797Z 
2025-01-10T13:49:05.4735886Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4736080Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-beta_sobolev] _____
2025-01-10T13:49:05.4736084Z 
2025-01-10T13:49:05.4736212Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4736335Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4736431Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4736561Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4736807Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4736903Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4736975Z err_msg = None
2025-01-10T13:49:05.4736979Z 
2025-01-10T13:49:05.4737090Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4737168Z         if err_msg is None:
2025-01-10T13:49:05.4737262Z             if left.shape != right.shape:
2025-01-10T13:49:05.4737343Z                 raise_assert_detail(
2025-01-10T13:49:05.4737484Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4737554Z                 )
2025-01-10T13:49:05.4737627Z     
2025-01-10T13:49:05.4737696Z             diff = 0
2025-01-10T13:49:05.4737807Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4737890Z                 # count up differences
2025-01-10T13:49:05.4738170Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4738253Z                     diff += 1
2025-01-10T13:49:05.4738318Z     
2025-01-10T13:49:05.4738407Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4738539Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4738711Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4738819Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4738894Z E           
2025-01-10T13:49:05.4738999Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4739260Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4739524Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4739538Z 
2025-01-10T13:49:05.4739834Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4739839Z 
2025-01-10T13:49:05.4740009Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4740013Z 
2025-01-10T13:49:05.4740233Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8924c20>
2025-01-10T13:49:05.4740401Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>
2025-01-10T13:49:05.4740477Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4740489Z 
2025-01-10T13:49:05.4740619Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4740737Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4740817Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4740890Z         try:
2025-01-10T13:49:05.4741026Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4741108Z         except KeyError:
2025-01-10T13:49:05.4741241Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4741313Z     
2025-01-10T13:49:05.4741396Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4741496Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4741583Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4741714Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4741795Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4741886Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4742000Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4742070Z             else:
2025-01-10T13:49:05.4742257Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4742358Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4742362Z 
2025-01-10T13:49:05.4742488Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4742598Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4742742Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4742809Z     ???
2025-01-10T13:49:05.4742920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4742924Z 
2025-01-10T13:49:05.4742990Z >   ???
2025-01-10T13:49:05.4743120Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4743191Z E   
2025-01-10T13:49:05.4743314Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4743427Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4743590Z E          ...
2025-01-10T13:49:05.4743786Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4743911Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4744028Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4744096Z E          ...
2025-01-10T13:49:05.4744184Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4744301Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4744412Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4744417Z 
2025-01-10T13:49:05.4744501Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4744694Z _______ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-j_blues] _______
2025-01-10T13:49:05.4744698Z 
2025-01-10T13:49:05.4744827Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4744952Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4745052Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4745183Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4745308Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4745398Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4745475Z err_msg = None
2025-01-10T13:49:05.4745479Z 
2025-01-10T13:49:05.4745583Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4745667Z         if err_msg is None:
2025-01-10T13:49:05.4745760Z             if left.shape != right.shape:
2025-01-10T13:49:05.4745840Z                 raise_assert_detail(
2025-01-10T13:49:05.4745983Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4746051Z                 )
2025-01-10T13:49:05.4746126Z     
2025-01-10T13:49:05.4746194Z             diff = 0
2025-01-10T13:49:05.4746309Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4746393Z                 # count up differences
2025-01-10T13:49:05.4746561Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4746636Z                     diff += 1
2025-01-10T13:49:05.4746707Z     
2025-01-10T13:49:05.4746795Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4746935Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4747103Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4747215Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4747289Z E           
2025-01-10T13:49:05.4747395Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4747656Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4748038Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4748045Z 
2025-01-10T13:49:05.4748345Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4748349Z 
2025-01-10T13:49:05.4748517Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4748522Z 
2025-01-10T13:49:05.4748740Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8924da0>
2025-01-10T13:49:05.4749007Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bcbc60e00>
2025-01-10T13:49:05.4749083Z attr = 'j_blues'
2025-01-10T13:49:05.4749087Z 
2025-01-10T13:49:05.4749224Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4749336Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4749421Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4749489Z         try:
2025-01-10T13:49:05.4749628Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4749711Z         except KeyError:
2025-01-10T13:49:05.4749843Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4749914Z     
2025-01-10T13:49:05.4749997Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4750092Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4750176Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4750309Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4750393Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4750488Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4750595Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4750669Z             else:
2025-01-10T13:49:05.4750759Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4750864Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4750869Z 
2025-01-10T13:49:05.4750994Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4751105Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4751254Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4751321Z     ???
2025-01-10T13:49:05.4751433Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4751438Z 
2025-01-10T13:49:05.4751504Z >   ???
2025-01-10T13:49:05.4751633Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4751703Z E   
2025-01-10T13:49:05.4751832Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4751940Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4752014Z E          ...
2025-01-10T13:49:05.4752098Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4752229Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4752344Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4752412Z E          ...
2025-01-10T13:49:05.4752503Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4752622Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4752727Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4752731Z 
2025-01-10T13:49:05.4752816Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4753021Z ____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines] _____
2025-01-10T13:49:05.4753029Z 
2025-01-10T13:49:05.4753243Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4753370Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4753462Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4753696Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4753836Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4753932Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4754009Z err_msg = None
2025-01-10T13:49:05.4754013Z 
2025-01-10T13:49:05.4754120Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4754202Z         if err_msg is None:
2025-01-10T13:49:05.4754294Z             if left.shape != right.shape:
2025-01-10T13:49:05.4754501Z                 raise_assert_detail(
2025-01-10T13:49:05.4754651Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4754726Z                 )
2025-01-10T13:49:05.4754792Z     
2025-01-10T13:49:05.4754866Z             diff = 0
2025-01-10T13:49:05.4754976Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4755066Z                 # count up differences
2025-01-10T13:49:05.4755238Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4755313Z                     diff += 1
2025-01-10T13:49:05.4755383Z     
2025-01-10T13:49:05.4755469Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4755608Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4755781Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4755895Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4755967Z E           
2025-01-10T13:49:05.4756085Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4756345Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4756608Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4756615Z 
2025-01-10T13:49:05.4756919Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4756927Z 
2025-01-10T13:49:05.4757096Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4757103Z 
2025-01-10T13:49:05.4757331Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8925b20>
2025-01-10T13:49:05.4757503Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>
2025-01-10T13:49:05.4757574Z attr = 'lines'
2025-01-10T13:49:05.4757578Z 
2025-01-10T13:49:05.4757717Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4757828Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4757914Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4757983Z         try:
2025-01-10T13:49:05.4758124Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4758203Z         except KeyError:
2025-01-10T13:49:05.4758341Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4758409Z     
2025-01-10T13:49:05.4758501Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4758591Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4758805Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4758938Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4759020Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4759116Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4759230Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4759307Z             else:
2025-01-10T13:49:05.4759400Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4759515Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4759519Z 
2025-01-10T13:49:05.4759644Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4759765Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4759910Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4760065Z     ???
2025-01-10T13:49:05.4760175Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4760188Z 
2025-01-10T13:49:05.4760254Z >   ???
2025-01-10T13:49:05.4760384Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4760452Z E   
2025-01-10T13:49:05.4760582Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4760693Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4760768Z E          ...
2025-01-10T13:49:05.4760853Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4760989Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4761100Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4761174Z E          ...
2025-01-10T13:49:05.4761256Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4761383Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4761489Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4761502Z 
2025-01-10T13:49:05.4761591Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4761846Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index] _
2025-01-10T13:49:05.4761851Z 
2025-01-10T13:49:05.4762072Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8925be0>
2025-01-10T13:49:05.4762243Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>
2025-01-10T13:49:05.4762332Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4762337Z 
2025-01-10T13:49:05.4762476Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4762586Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4762673Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4762742Z         try:
2025-01-10T13:49:05.4762888Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4762975Z         except KeyError:
2025-01-10T13:49:05.4763113Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4763188Z     
2025-01-10T13:49:05.4763273Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4763373Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4763459Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4763709Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4763797Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4763889Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4763994Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4763999Z 
2025-01-10T13:49:05.4764126Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4764235Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4764245Z 
2025-01-10T13:49:05.4764379Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4764470Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4764711Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4764796Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4764934Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4765020Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4765124Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4765207Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4765281Z err_msg = None
2025-01-10T13:49:05.4765286Z 
2025-01-10T13:49:05.4765397Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4765474Z         if err_msg is None:
2025-01-10T13:49:05.4765570Z             if left.shape != right.shape:
2025-01-10T13:49:05.4765656Z                 raise_assert_detail(
2025-01-10T13:49:05.4765796Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4766010Z                 )
2025-01-10T13:49:05.4766079Z     
2025-01-10T13:49:05.4766154Z             diff = 0
2025-01-10T13:49:05.4766267Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4766358Z                 # count up differences
2025-01-10T13:49:05.4766527Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4766607Z                     diff += 1
2025-01-10T13:49:05.4766673Z     
2025-01-10T13:49:05.4766762Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4766898Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4767073Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4767180Z E           AssertionError: Series are different
2025-01-10T13:49:05.4767249Z E           
2025-01-10T13:49:05.4767354Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4767728Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4768067Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4768402Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4768414Z 
2025-01-10T13:49:05.4768721Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4768971Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index] _
2025-01-10T13:49:05.4768976Z 
2025-01-10T13:49:05.4769197Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8925ca0>
2025-01-10T13:49:05.4769369Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>
2025-01-10T13:49:05.4769462Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4769466Z 
2025-01-10T13:49:05.4769601Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4769719Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4769805Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4769963Z         try:
2025-01-10T13:49:05.4770103Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4770188Z         except KeyError:
2025-01-10T13:49:05.4770324Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4770397Z     
2025-01-10T13:49:05.4770480Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4770576Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4770661Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4770794Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4770882Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4770971Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4771082Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4771088Z 
2025-01-10T13:49:05.4771209Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4771432Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4771441Z 
2025-01-10T13:49:05.4771575Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4771664Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4771769Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4771853Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4771989Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4772075Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4772187Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4772264Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4772343Z err_msg = None
2025-01-10T13:49:05.4772348Z 
2025-01-10T13:49:05.4772454Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4772546Z         if err_msg is None:
2025-01-10T13:49:05.4772644Z             if left.shape != right.shape:
2025-01-10T13:49:05.4772732Z                 raise_assert_detail(
2025-01-10T13:49:05.4772873Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4772950Z                 )
2025-01-10T13:49:05.4773016Z     
2025-01-10T13:49:05.4773093Z             diff = 0
2025-01-10T13:49:05.4773205Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4773297Z                 # count up differences
2025-01-10T13:49:05.4773473Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4773547Z                     diff += 1
2025-01-10T13:49:05.4773735Z     
2025-01-10T13:49:05.4773821Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4773958Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4774133Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4774242Z E           AssertionError: Series are different
2025-01-10T13:49:05.4774313Z E           
2025-01-10T13:49:05.4774416Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4774784Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4775161Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4775665Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4775671Z 
2025-01-10T13:49:05.4775974Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4776175Z ______ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-nu] ______
2025-01-10T13:49:05.4776180Z 
2025-01-10T13:49:05.4776311Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4776540Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4776646Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4776775Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4776901Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4776993Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4797114Z err_msg = None
2025-01-10T13:49:05.4797157Z 
2025-01-10T13:49:05.4797419Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4797549Z         if err_msg is None:
2025-01-10T13:49:05.4797694Z             if left.shape != right.shape:
2025-01-10T13:49:05.4797812Z                 raise_assert_detail(
2025-01-10T13:49:05.4798041Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4798172Z                 )
2025-01-10T13:49:05.4798276Z     
2025-01-10T13:49:05.4798403Z             diff = 0
2025-01-10T13:49:05.4798566Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4798656Z                 # count up differences
2025-01-10T13:49:05.4798844Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4798919Z                     diff += 1
2025-01-10T13:49:05.4798989Z     
2025-01-10T13:49:05.4799078Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4799229Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4799417Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4799538Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4799613Z E           
2025-01-10T13:49:05.4799727Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4799996Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4800270Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4800281Z 
2025-01-10T13:49:05.4800607Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4800613Z 
2025-01-10T13:49:05.4800794Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4800800Z 
2025-01-10T13:49:05.4801031Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8925ee0>
2025-01-10T13:49:05.4801440Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>, attr = 'nu'
2025-01-10T13:49:05.4801446Z 
2025-01-10T13:49:05.4801585Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4801708Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4801797Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4801865Z         try:
2025-01-10T13:49:05.4802014Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4802094Z         except KeyError:
2025-01-10T13:49:05.4802239Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4802306Z     
2025-01-10T13:49:05.4802397Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4802491Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4802584Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4802718Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4802930Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4803022Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4803137Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4803142Z 
2025-01-10T13:49:05.4803272Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4803388Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4803543Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4803824Z     ???
2025-01-10T13:49:05.4803967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4803973Z 
2025-01-10T13:49:05.4804039Z >   ???
2025-01-10T13:49:05.4804173Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4804238Z E   
2025-01-10T13:49:05.4804369Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4804482Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4804554Z E          ...
2025-01-10T13:49:05.4804650Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4804782Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4804896Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4804965Z E          ...
2025-01-10T13:49:05.4805051Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4805169Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4805275Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4805281Z 
2025-01-10T13:49:05.4805367Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4805589Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm] _
2025-01-10T13:49:05.4805594Z 
2025-01-10T13:49:05.4805720Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4805858Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4805957Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4806094Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4806220Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4806310Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4806386Z err_msg = None
2025-01-10T13:49:05.4806391Z 
2025-01-10T13:49:05.4806505Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4806589Z         if err_msg is None:
2025-01-10T13:49:05.4806684Z             if left.shape != right.shape:
2025-01-10T13:49:05.4806774Z                 raise_assert_detail(
2025-01-10T13:49:05.4806922Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4807002Z                 )
2025-01-10T13:49:05.4807068Z     
2025-01-10T13:49:05.4807143Z             diff = 0
2025-01-10T13:49:05.4807383Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4807470Z                 # count up differences
2025-01-10T13:49:05.4807651Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4807730Z                     diff += 1
2025-01-10T13:49:05.4807800Z     
2025-01-10T13:49:05.4807888Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4808029Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4808200Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4808319Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4808388Z E           
2025-01-10T13:49:05.4808502Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4808769Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4809148Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4809154Z 
2025-01-10T13:49:05.4809466Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4809471Z 
2025-01-10T13:49:05.4809639Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4809644Z 
2025-01-10T13:49:05.4809874Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8925fa0>
2025-01-10T13:49:05.4810055Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>
2025-01-10T13:49:05.4810133Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4810138Z 
2025-01-10T13:49:05.4810278Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4810393Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4810482Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4810550Z         try:
2025-01-10T13:49:05.4810692Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4810773Z         except KeyError:
2025-01-10T13:49:05.4810919Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4810984Z     
2025-01-10T13:49:05.4811074Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4811169Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4811261Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4811400Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4811485Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4811576Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4811682Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4811687Z 
2025-01-10T13:49:05.4811817Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4811928Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4812074Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4812141Z     ???
2025-01-10T13:49:05.4812252Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4812256Z 
2025-01-10T13:49:05.4812321Z >   ???
2025-01-10T13:49:05.4812452Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4812521Z E   
2025-01-10T13:49:05.4812646Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4812763Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4812924Z E          ...
2025-01-10T13:49:05.4813019Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4813145Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4813260Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4813328Z E          ...
2025-01-10T13:49:05.4813415Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4813532Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4813807Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4813815Z 
2025-01-10T13:49:05.4813905Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4814111Z _____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-f_lu] _____
2025-01-10T13:49:05.4814116Z 
2025-01-10T13:49:05.4814251Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4814505Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4814611Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4814748Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4814883Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4814974Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4815048Z err_msg = None
2025-01-10T13:49:05.4815052Z 
2025-01-10T13:49:05.4815160Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4815239Z         if err_msg is None:
2025-01-10T13:49:05.4815335Z             if left.shape != right.shape:
2025-01-10T13:49:05.4815416Z                 raise_assert_detail(
2025-01-10T13:49:05.4815568Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4815640Z                 )
2025-01-10T13:49:05.4815712Z     
2025-01-10T13:49:05.4815786Z             diff = 0
2025-01-10T13:49:05.4815899Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4815984Z                 # count up differences
2025-01-10T13:49:05.4816156Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4816229Z                     diff += 1
2025-01-10T13:49:05.4816300Z     
2025-01-10T13:49:05.4816385Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4816525Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4816692Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4816812Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4816886Z E           
2025-01-10T13:49:05.4816996Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4817265Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4817528Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4817534Z 
2025-01-10T13:49:05.4817846Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4817851Z 
2025-01-10T13:49:05.4818026Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4818030Z 
2025-01-10T13:49:05.4818258Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8926060>
2025-01-10T13:49:05.4818603Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>, attr = 'f_lu'
2025-01-10T13:49:05.4818608Z 
2025-01-10T13:49:05.4818744Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4818865Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4818946Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4819020Z         try:
2025-01-10T13:49:05.4819160Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4819243Z         except KeyError:
2025-01-10T13:49:05.4819382Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4819449Z     
2025-01-10T13:49:05.4819539Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4819630Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4819721Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4819941Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4820028Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4820119Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4820230Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4820235Z 
2025-01-10T13:49:05.4820357Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4820472Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4820621Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4820688Z     ???
2025-01-10T13:49:05.4820799Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4820804Z 
2025-01-10T13:49:05.4820869Z >   ???
2025-01-10T13:49:05.4820999Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4821065Z E   
2025-01-10T13:49:05.4821195Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4821307Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4821384Z E          ...
2025-01-10T13:49:05.4821469Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4821600Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4821710Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4821788Z E          ...
2025-01-10T13:49:05.4821869Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4821995Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4822103Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4822108Z 
2025-01-10T13:49:05.4822195Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4822408Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs] _
2025-01-10T13:49:05.4822412Z 
2025-01-10T13:49:05.4822541Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4822677Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4822775Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4822913Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4823035Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4823130Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4823211Z err_msg = None
2025-01-10T13:49:05.4823215Z 
2025-01-10T13:49:05.4823322Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4823404Z         if err_msg is None:
2025-01-10T13:49:05.4823496Z             if left.shape != right.shape:
2025-01-10T13:49:05.4823582Z                 raise_assert_detail(
2025-01-10T13:49:05.4823911Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4823992Z                 )
2025-01-10T13:49:05.4824059Z     
2025-01-10T13:49:05.4824253Z             diff = 0
2025-01-10T13:49:05.4824363Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4824454Z                 # count up differences
2025-01-10T13:49:05.4824619Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4824699Z                     diff += 1
2025-01-10T13:49:05.4824772Z     
2025-01-10T13:49:05.4824856Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4824994Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4825163Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4825278Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4825347Z E           
2025-01-10T13:49:05.4825462Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4825720Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4826098Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4826104Z 
2025-01-10T13:49:05.4826409Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4826414Z 
2025-01-10T13:49:05.4826576Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4826581Z 
2025-01-10T13:49:05.4826809Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89267e0>
2025-01-10T13:49:05.4826977Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>
2025-01-10T13:49:05.4827059Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4827063Z 
2025-01-10T13:49:05.4827201Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4827313Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4827401Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4827469Z         try:
2025-01-10T13:49:05.4827610Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4827688Z         except KeyError:
2025-01-10T13:49:05.4827829Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4827895Z     
2025-01-10T13:49:05.4827982Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4828075Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4828165Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4828297Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4828389Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4828477Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4828591Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4828664Z             else:
2025-01-10T13:49:05.4828755Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4828864Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4828868Z 
2025-01-10T13:49:05.4828991Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4829107Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4829250Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4829322Z     ???
2025-01-10T13:49:05.4829430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4829435Z 
2025-01-10T13:49:05.4829512Z >   ???
2025-01-10T13:49:05.4829637Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4829813Z E   
2025-01-10T13:49:05.4829945Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4830053Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4830128Z E          ...
2025-01-10T13:49:05.4830211Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4830342Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4830450Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4830525Z E          ...
2025-01-10T13:49:05.4830606Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4830730Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4830831Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4830836Z 
2025-01-10T13:49:05.4830926Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4831219Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev] _
2025-01-10T13:49:05.4831232Z 
2025-01-10T13:49:05.4831357Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4831484Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4831578Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4831713Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4831832Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4831925Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4831996Z err_msg = None
2025-01-10T13:49:05.4832000Z 
2025-01-10T13:49:05.4832111Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4832189Z         if err_msg is None:
2025-01-10T13:49:05.4832289Z             if left.shape != right.shape:
2025-01-10T13:49:05.4832375Z                 raise_assert_detail(
2025-01-10T13:49:05.4832521Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4832593Z                 )
2025-01-10T13:49:05.4832657Z     
2025-01-10T13:49:05.4832731Z             diff = 0
2025-01-10T13:49:05.4832837Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4832925Z                 # count up differences
2025-01-10T13:49:05.4833092Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4833173Z                     diff += 1
2025-01-10T13:49:05.4833239Z     
2025-01-10T13:49:05.4833328Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4833463Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4833807Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4833934Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4834003Z E           
2025-01-10T13:49:05.4834118Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4834377Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4834644Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4834650Z 
2025-01-10T13:49:05.4834952Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4834965Z 
2025-01-10T13:49:05.4835339Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4835344Z 
2025-01-10T13:49:05.4835570Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89268a0>
2025-01-10T13:49:05.4835731Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>
2025-01-10T13:49:05.4835810Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4835814Z 
2025-01-10T13:49:05.4835947Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4836065Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4836146Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4836220Z         try:
2025-01-10T13:49:05.4836357Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4836439Z         except KeyError:
2025-01-10T13:49:05.4836580Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4836772Z     
2025-01-10T13:49:05.4836861Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4836954Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4837046Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4837174Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4837260Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4837346Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4837456Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4837523Z             else:
2025-01-10T13:49:05.4837622Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4837726Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4837735Z 
2025-01-10T13:49:05.4837856Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4837969Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4838110Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4838185Z     ???
2025-01-10T13:49:05.4838296Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4838301Z 
2025-01-10T13:49:05.4838370Z >   ???
2025-01-10T13:49:05.4838502Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4838573Z E   
2025-01-10T13:49:05.4838696Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4838808Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4838877Z E          ...
2025-01-10T13:49:05.4838965Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4839088Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4839201Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4839273Z E          ...
2025-01-10T13:49:05.4839354Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4839481Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4839586Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4839594Z 
2025-01-10T13:49:05.4839685Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4839888Z ___ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-j_blues] ____
2025-01-10T13:49:05.4839893Z 
2025-01-10T13:49:05.4840023Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4840145Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4840242Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4840376Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4840495Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4840590Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4840665Z err_msg = None
2025-01-10T13:49:05.4840669Z 
2025-01-10T13:49:05.4840868Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4840947Z         if err_msg is None:
2025-01-10T13:49:05.4841044Z             if left.shape != right.shape:
2025-01-10T13:49:05.4841124Z                 raise_assert_detail(
2025-01-10T13:49:05.4841271Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4841339Z                 )
2025-01-10T13:49:05.4841409Z     
2025-01-10T13:49:05.4841478Z             diff = 0
2025-01-10T13:49:05.4841590Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4841678Z                 # count up differences
2025-01-10T13:49:05.4841842Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4841921Z                     diff += 1
2025-01-10T13:49:05.4841987Z     
2025-01-10T13:49:05.4842077Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4842287Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4842462Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4842570Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4842644Z E           
2025-01-10T13:49:05.4842753Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4843014Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4843279Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4843291Z 
2025-01-10T13:49:05.4843589Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4843777Z 
2025-01-10T13:49:05.4843977Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4843983Z 
2025-01-10T13:49:05.4844206Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8926a20>
2025-01-10T13:49:05.4844368Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3bea948da0>
2025-01-10T13:49:05.4844445Z attr = 'j_blues'
2025-01-10T13:49:05.4844449Z 
2025-01-10T13:49:05.4844589Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4844707Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4844789Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4844861Z         try:
2025-01-10T13:49:05.4845003Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4845089Z         except KeyError:
2025-01-10T13:49:05.4845223Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4845294Z     
2025-01-10T13:49:05.4845376Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4845469Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4845559Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4845689Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4845776Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4845861Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4845971Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4846040Z             else:
2025-01-10T13:49:05.4846138Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4846241Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4846249Z 
2025-01-10T13:49:05.4846376Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4846652Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4846799Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4846867Z     ???
2025-01-10T13:49:05.4846982Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4846986Z 
2025-01-10T13:49:05.4847056Z >   ???
2025-01-10T13:49:05.4847177Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4847247Z E   
2025-01-10T13:49:05.4847371Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4847484Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4847553Z E          ...
2025-01-10T13:49:05.4847640Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4847764Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4847989Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4848058Z E          ...
2025-01-10T13:49:05.4848149Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4848269Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4848376Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4848381Z 
2025-01-10T13:49:05.4848472Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4848728Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines] _
2025-01-10T13:49:05.4848733Z 
2025-01-10T13:49:05.4848863Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4848986Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4849081Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4849209Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4849335Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4849426Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4849504Z err_msg = None
2025-01-10T13:49:05.4849508Z 
2025-01-10T13:49:05.4849620Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4849698Z         if err_msg is None:
2025-01-10T13:49:05.4849793Z             if left.shape != right.shape:
2025-01-10T13:49:05.4849873Z                 raise_assert_detail(
2025-01-10T13:49:05.4850017Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4850085Z                 )
2025-01-10T13:49:05.4850155Z     
2025-01-10T13:49:05.4850224Z             diff = 0
2025-01-10T13:49:05.4850333Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4850414Z                 # count up differences
2025-01-10T13:49:05.4850589Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4850665Z                     diff += 1
2025-01-10T13:49:05.4850738Z     
2025-01-10T13:49:05.4850829Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4850961Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4851134Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4851241Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4851314Z E           
2025-01-10T13:49:05.4851420Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4851681Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4851943Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4852043Z 
2025-01-10T13:49:05.4852344Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4852349Z 
2025-01-10T13:49:05.4852515Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4852521Z 
2025-01-10T13:49:05.4852739Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf89277a0>
2025-01-10T13:49:05.4852904Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>
2025-01-10T13:49:05.4852975Z attr = 'lines'
2025-01-10T13:49:05.4852980Z 
2025-01-10T13:49:05.4853118Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4853309Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4853393Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4853466Z         try:
2025-01-10T13:49:05.4853846Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4853935Z         except KeyError:
2025-01-10T13:49:05.4854072Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4854143Z     
2025-01-10T13:49:05.4854224Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4854319Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4854403Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4854535Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4854619Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4854709Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4854814Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4854893Z             else:
2025-01-10T13:49:05.4854989Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4855097Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4855101Z 
2025-01-10T13:49:05.4855228Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4855335Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4855480Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4855547Z     ???
2025-01-10T13:49:05.4855658Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4855663Z 
2025-01-10T13:49:05.4855728Z >   ???
2025-01-10T13:49:05.4855855Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4855920Z E   
2025-01-10T13:49:05.4856050Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4856161Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4856238Z E          ...
2025-01-10T13:49:05.4856326Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4856453Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4856566Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4856634Z E          ...
2025-01-10T13:49:05.4856721Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4856844Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4856948Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4856952Z 
2025-01-10T13:49:05.4857037Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4857350Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index] _
2025-01-10T13:49:05.4857355Z 
2025-01-10T13:49:05.4857579Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8927860>
2025-01-10T13:49:05.4857744Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>
2025-01-10T13:49:05.4857837Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4857963Z 
2025-01-10T13:49:05.4858098Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4858212Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4858291Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4858366Z         try:
2025-01-10T13:49:05.4858500Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4858587Z         except KeyError:
2025-01-10T13:49:05.4858720Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4858792Z     
2025-01-10T13:49:05.4858874Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4858969Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4859057Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4859185Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4859396Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4859483Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4859595Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4859600Z 
2025-01-10T13:49:05.4859723Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4859837Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4859841Z 
2025-01-10T13:49:05.4859972Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4860059Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4860165Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4860246Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4860387Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:49:05.4860467Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:49:05.4860577Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4860657Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:49:05.4860734Z err_msg = None
2025-01-10T13:49:05.4860738Z 
2025-01-10T13:49:05.4860845Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4860929Z         if err_msg is None:
2025-01-10T13:49:05.4861020Z             if left.shape != right.shape:
2025-01-10T13:49:05.4861106Z                 raise_assert_detail(
2025-01-10T13:49:05.4861244Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4861321Z                 )
2025-01-10T13:49:05.4861385Z     
2025-01-10T13:49:05.4861461Z             diff = 0
2025-01-10T13:49:05.4861575Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4861659Z                 # count up differences
2025-01-10T13:49:05.4861830Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4861908Z                     diff += 1
2025-01-10T13:49:05.4861977Z     
2025-01-10T13:49:05.4862065Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4862206Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4862373Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4862478Z E           AssertionError: Series are different
2025-01-10T13:49:05.4862547Z E           
2025-01-10T13:49:05.4862650Z E           Series values are different (4.04858 %)
2025-01-10T13:49:05.4863018Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4863356Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4863944Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4863953Z 
2025-01-10T13:49:05.4864263Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4864571Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index] _
2025-01-10T13:49:05.4864691Z 
2025-01-10T13:49:05.4864919Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8927920>
2025-01-10T13:49:05.4865083Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>
2025-01-10T13:49:05.4865178Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4865182Z 
2025-01-10T13:49:05.4865315Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4865430Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4865517Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4865585Z         try:
2025-01-10T13:49:05.4865725Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4865801Z         except KeyError:
2025-01-10T13:49:05.4865942Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4866008Z     
2025-01-10T13:49:05.4866096Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4866190Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4866284Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4866414Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4866505Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4866591Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4866702Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4866707Z 
2025-01-10T13:49:05.4866834Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4866944Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4866948Z 
2025-01-10T13:49:05.4867083Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4867165Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4867274Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4867354Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4867495Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:49:05.4867577Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:49:05.4867683Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:49:05.4867760Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:49:05.4867841Z err_msg = None
2025-01-10T13:49:05.4867845Z 
2025-01-10T13:49:05.4867955Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4868032Z         if err_msg is None:
2025-01-10T13:49:05.4868125Z             if left.shape != right.shape:
2025-01-10T13:49:05.4868204Z                 raise_assert_detail(
2025-01-10T13:49:05.4868351Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4868420Z                 )
2025-01-10T13:49:05.4868492Z     
2025-01-10T13:49:05.4868561Z             diff = 0
2025-01-10T13:49:05.4868677Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4868761Z                 # count up differences
2025-01-10T13:49:05.4869049Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4869123Z                     diff += 1
2025-01-10T13:49:05.4869192Z     
2025-01-10T13:49:05.4869275Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4869409Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4869583Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4869683Z E           AssertionError: Series are different
2025-01-10T13:49:05.4869756Z E           
2025-01-10T13:49:05.4869855Z E           Series values are different (6.47773 %)
2025-01-10T13:49:05.4870225Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.4870680Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4871057Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.4871068Z 
2025-01-10T13:49:05.4871371Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4871610Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu] _
2025-01-10T13:49:05.4871621Z 
2025-01-10T13:49:05.4871748Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4871876Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4871970Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4872104Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4872223Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4872322Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4872395Z err_msg = None
2025-01-10T13:49:05.4872400Z 
2025-01-10T13:49:05.4872507Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4872583Z         if err_msg is None:
2025-01-10T13:49:05.4872676Z             if left.shape != right.shape:
2025-01-10T13:49:05.4872761Z                 raise_assert_detail(
2025-01-10T13:49:05.4872900Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4872971Z                 )
2025-01-10T13:49:05.4873043Z     
2025-01-10T13:49:05.4873117Z             diff = 0
2025-01-10T13:49:05.4873225Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4873312Z                 # count up differences
2025-01-10T13:49:05.4873479Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4873557Z                     diff += 1
2025-01-10T13:49:05.4873796Z     
2025-01-10T13:49:05.4873892Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4874142Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4874315Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4874428Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4874496Z E           
2025-01-10T13:49:05.4874607Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4874867Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4875132Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4875243Z 
2025-01-10T13:49:05.4875538Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4875548Z 
2025-01-10T13:49:05.4875715Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4875719Z 
2025-01-10T13:49:05.4875945Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8927b60>
2025-01-10T13:49:05.4876143Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>, attr = 'nu'
2025-01-10T13:49:05.4876148Z 
2025-01-10T13:49:05.4876285Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4876396Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4876482Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4876554Z         try:
2025-01-10T13:49:05.4876694Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4876779Z         except KeyError:
2025-01-10T13:49:05.4876912Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4876982Z     
2025-01-10T13:49:05.4877065Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4877163Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4877248Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4877381Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4877461Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4877552Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4877662Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4877667Z 
2025-01-10T13:49:05.4877792Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4877903Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4878054Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4878126Z     ???
2025-01-10T13:49:05.4878234Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4878239Z 
2025-01-10T13:49:05.4878309Z >   ???
2025-01-10T13:49:05.4878435Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4878505Z E   
2025-01-10T13:49:05.4878629Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4878743Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4878813Z E          ...
2025-01-10T13:49:05.4878902Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4879027Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4879140Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4879208Z E          ...
2025-01-10T13:49:05.4879299Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4879431Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4879639Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4879644Z 
2025-01-10T13:49:05.4879734Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4880017Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm] _
2025-01-10T13:49:05.4880022Z 
2025-01-10T13:49:05.4880153Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4880279Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4880375Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4880503Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4880627Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4880803Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4880879Z err_msg = None
2025-01-10T13:49:05.4880884Z 
2025-01-10T13:49:05.4880998Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4881074Z         if err_msg is None:
2025-01-10T13:49:05.4881168Z             if left.shape != right.shape:
2025-01-10T13:49:05.4881248Z                 raise_assert_detail(
2025-01-10T13:49:05.4881394Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4881460Z                 )
2025-01-10T13:49:05.4881530Z     
2025-01-10T13:49:05.4881602Z             diff = 0
2025-01-10T13:49:05.4881715Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4881799Z                 # count up differences
2025-01-10T13:49:05.4881969Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4882046Z                     diff += 1
2025-01-10T13:49:05.4882115Z     
2025-01-10T13:49:05.4882203Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4882338Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4882515Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4882626Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4882704Z E           
2025-01-10T13:49:05.4882810Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4883073Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4883331Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4883349Z 
2025-01-10T13:49:05.4883847Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4883857Z 
2025-01-10T13:49:05.4884040Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4884046Z 
2025-01-10T13:49:05.4884269Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8927c20>
2025-01-10T13:49:05.4884437Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>
2025-01-10T13:49:05.4884512Z attr = 'wavelength_cm'
2025-01-10T13:49:05.4884522Z 
2025-01-10T13:49:05.4884654Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4884772Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4884856Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4884928Z         try:
2025-01-10T13:49:05.4885186Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4885269Z         except KeyError:
2025-01-10T13:49:05.4885407Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4885479Z     
2025-01-10T13:49:05.4885561Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4885656Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4885743Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4885875Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4885957Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4886049Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4886158Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4886162Z 
2025-01-10T13:49:05.4886286Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4886509Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4886656Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4886727Z     ???
2025-01-10T13:49:05.4886838Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4886842Z 
2025-01-10T13:49:05.4886912Z >   ???
2025-01-10T13:49:05.4887038Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4887110Z E   
2025-01-10T13:49:05.4887237Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4887350Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4887423Z E          ...
2025-01-10T13:49:05.4887506Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4887638Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4887746Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4887819Z E          ...
2025-01-10T13:49:05.4887905Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4888034Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4888135Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4888140Z 
2025-01-10T13:49:05.4888230Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4888479Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu] _
2025-01-10T13:49:05.4888485Z 
2025-01-10T13:49:05.4888617Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4888743Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4888834Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4888968Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4889087Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4889184Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4889260Z err_msg = None
2025-01-10T13:49:05.4889264Z 
2025-01-10T13:49:05.4889374Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4889452Z         if err_msg is None:
2025-01-10T13:49:05.4889548Z             if left.shape != right.shape:
2025-01-10T13:49:05.4889629Z                 raise_assert_detail(
2025-01-10T13:49:05.4889772Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4889845Z                 )
2025-01-10T13:49:05.4889913Z     
2025-01-10T13:49:05.4889988Z             diff = 0
2025-01-10T13:49:05.4890096Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4890185Z                 # count up differences
2025-01-10T13:49:05.4890352Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4890434Z                     diff += 1
2025-01-10T13:49:05.4890499Z     
2025-01-10T13:49:05.4890588Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4890812Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4890985Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4891093Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4891168Z E           
2025-01-10T13:49:05.4891275Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4891536Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4891800Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4891881Z 
2025-01-10T13:49:05.4892182Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4892187Z 
2025-01-10T13:49:05.4892355Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4892360Z 
2025-01-10T13:49:05.4892586Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf8927ce0>
2025-01-10T13:49:05.4892784Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>, attr = 'f_lu'
2025-01-10T13:49:05.4892788Z 
2025-01-10T13:49:05.4892926Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4893036Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4893125Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4893192Z         try:
2025-01-10T13:49:05.4893334Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4893411Z         except KeyError:
2025-01-10T13:49:05.4893549Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4893726Z     
2025-01-10T13:49:05.4893810Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4893904Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4893989Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4894122Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4894203Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4894294Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4894400Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4894405Z 
2025-01-10T13:49:05.4894530Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:49:05.4894640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4894789Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4894856Z     ???
2025-01-10T13:49:05.4894966Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4894970Z 
2025-01-10T13:49:05.4895040Z >   ???
2025-01-10T13:49:05.4895163Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4895234Z E   
2025-01-10T13:49:05.4895357Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4895468Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4895535Z E          ...
2025-01-10T13:49:05.4895624Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4895747Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4895859Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4895928Z E          ...
2025-01-10T13:49:05.4896019Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4896261Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4896367Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4896371Z 
2025-01-10T13:49:05.4896461Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4896740Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs] _
2025-01-10T13:49:05.4896746Z 
2025-01-10T13:49:05.4896876Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4896999Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4897098Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4897227Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4897354Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4897551Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4897636Z err_msg = None
2025-01-10T13:49:05.4897641Z 
2025-01-10T13:49:05.4897756Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4897834Z         if err_msg is None:
2025-01-10T13:49:05.4897931Z             if left.shape != right.shape:
2025-01-10T13:49:05.4898013Z                 raise_assert_detail(
2025-01-10T13:49:05.4898158Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4898226Z                 )
2025-01-10T13:49:05.4898296Z     
2025-01-10T13:49:05.4898365Z             diff = 0
2025-01-10T13:49:05.4898477Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4898561Z                 # count up differences
2025-01-10T13:49:05.4898736Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4898813Z                     diff += 1
2025-01-10T13:49:05.4898883Z     
2025-01-10T13:49:05.4898971Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4899109Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4899282Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4899391Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4899464Z E           
2025-01-10T13:49:05.4899572Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4899836Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4900095Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4900112Z 
2025-01-10T13:49:05.4900409Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4900414Z 
2025-01-10T13:49:05.4900582Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4900586Z 
2025-01-10T13:49:05.4900806Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf874c4a0>
2025-01-10T13:49:05.4900977Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>
2025-01-10T13:49:05.4901057Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4901062Z 
2025-01-10T13:49:05.4901203Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4901320Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4901404Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4901617Z         try:
2025-01-10T13:49:05.4901756Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4901838Z         except KeyError:
2025-01-10T13:49:05.4901972Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4902042Z     
2025-01-10T13:49:05.4902124Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4902220Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4902306Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4902445Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4902525Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4902616Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4902723Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4902798Z             else:
2025-01-10T13:49:05.4902894Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4903081Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4903089Z 
2025-01-10T13:49:05.4903219Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4903329Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4903475Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4903543Z     ???
2025-01-10T13:49:05.4903750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4903755Z 
2025-01-10T13:49:05.4903821Z >   ???
2025-01-10T13:49:05.4903949Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4904016Z E   
2025-01-10T13:49:05.4904146Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4904253Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4904328Z E          ...
2025-01-10T13:49:05.4904414Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4904541Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4904658Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4904725Z E          ...
2025-01-10T13:49:05.4904811Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4904931Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4905036Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4905040Z 
2025-01-10T13:49:05.4905124Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4905403Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev] _
2025-01-10T13:49:05.4905408Z 
2025-01-10T13:49:05.4905533Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4905661Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4905766Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4905900Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4906025Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4906114Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4906191Z err_msg = None
2025-01-10T13:49:05.4906196Z 
2025-01-10T13:49:05.4906300Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4906381Z         if err_msg is None:
2025-01-10T13:49:05.4906474Z             if left.shape != right.shape:
2025-01-10T13:49:05.4906559Z                 raise_assert_detail(
2025-01-10T13:49:05.4906703Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4906771Z                 )
2025-01-10T13:49:05.4906842Z     
2025-01-10T13:49:05.4906912Z             diff = 0
2025-01-10T13:49:05.4907026Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4907110Z                 # count up differences
2025-01-10T13:49:05.4907411Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4907486Z                     diff += 1
2025-01-10T13:49:05.4907555Z     
2025-01-10T13:49:05.4907639Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4907772Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4907941Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4908054Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4908123Z E           
2025-01-10T13:49:05.4908236Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4908500Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4908871Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4908877Z 
2025-01-10T13:49:05.4909180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4909185Z 
2025-01-10T13:49:05.4909358Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4909363Z 
2025-01-10T13:49:05.4909583Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf874c560>
2025-01-10T13:49:05.4909750Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>
2025-01-10T13:49:05.4909831Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4909839Z 
2025-01-10T13:49:05.4909978Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4910089Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4910175Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4910243Z         try:
2025-01-10T13:49:05.4910384Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4910461Z         except KeyError:
2025-01-10T13:49:05.4910601Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4910672Z     
2025-01-10T13:49:05.4910754Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4910849Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4910934Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4911067Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4911150Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4911246Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4911352Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4911429Z             else:
2025-01-10T13:49:05.4911521Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4911631Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4911635Z 
2025-01-10T13:49:05.4911755Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4911869Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4912017Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4912084Z     ???
2025-01-10T13:49:05.4912194Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4912198Z 
2025-01-10T13:49:05.4912264Z >   ???
2025-01-10T13:49:05.4912390Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4912456Z E   
2025-01-10T13:49:05.4912587Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4912783Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4912857Z E          ...
2025-01-10T13:49:05.4912940Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4913069Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4913178Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4913251Z E          ...
2025-01-10T13:49:05.4913337Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4913456Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4913560Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4913565Z 
2025-01-10T13:49:05.4913742Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4914011Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues] _
2025-01-10T13:49:05.4914016Z 
2025-01-10T13:49:05.4914254Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4914386Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4914478Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4914610Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:49:05.4914739Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:49:05.4914827Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:49:05.4914902Z err_msg = None
2025-01-10T13:49:05.4914907Z 
2025-01-10T13:49:05.4915011Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:49:05.4915094Z         if err_msg is None:
2025-01-10T13:49:05.4915184Z             if left.shape != right.shape:
2025-01-10T13:49:05.4915269Z                 raise_assert_detail(
2025-01-10T13:49:05.4915412Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:49:05.4915490Z                 )
2025-01-10T13:49:05.4915555Z     
2025-01-10T13:49:05.4915629Z             diff = 0
2025-01-10T13:49:05.4915737Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:49:05.4915826Z                 # count up differences
2025-01-10T13:49:05.4915997Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:49:05.4916071Z                     diff += 1
2025-01-10T13:49:05.4916141Z     
2025-01-10T13:49:05.4916225Z             diff = diff * 100.0 / left.size
2025-01-10T13:49:05.4916359Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:49:05.4916525Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:49:05.4916637Z E           AssertionError: numpy array are different
2025-01-10T13:49:05.4916705Z E           
2025-01-10T13:49:05.4916822Z E           numpy array values are different (4.04858 %)
2025-01-10T13:49:05.4917078Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4917346Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.4917351Z 
2025-01-10T13:49:05.4917650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:49:05.4917655Z 
2025-01-10T13:49:05.4917821Z During handling of the above exception, another exception occurred:
2025-01-10T13:49:05.4917829Z 
2025-01-10T13:49:05.4918053Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f3bf874c6e0>
2025-01-10T13:49:05.4918333Z plasma = <tardis.plasma.base.BasePlasma object at 0x7f3be81b1400>
2025-01-10T13:49:05.4918413Z attr = 'j_blues'
2025-01-10T13:49:05.4918417Z 
2025-01-10T13:49:05.4918553Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:49:05.4918665Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:49:05.4918748Z         key = f"plasma/{attr}"
2025-01-10T13:49:05.4918815Z         try:
2025-01-10T13:49:05.4918956Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:49:05.4919033Z         except KeyError:
2025-01-10T13:49:05.4919171Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:49:05.4919237Z     
2025-01-10T13:49:05.4919324Z         if hasattr(plasma, attr):
2025-01-10T13:49:05.4919415Z             actual = getattr(plasma, attr)
2025-01-10T13:49:05.4919608Z             if attr == "selected_atoms":
2025-01-10T13:49:05.4919743Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:49:05.4919837Z             elif actual.ndim == 1:
2025-01-10T13:49:05.4919931Z                 actual = pd.Series(actual)
2025-01-10T13:49:05.4920037Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:49:05.4920113Z             else:
2025-01-10T13:49:05.4920205Z                 actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4920316Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:49:05.4920321Z 
2025-01-10T13:49:05.4920445Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:49:05.4920561Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4920702Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4920776Z     ???
2025-01-10T13:49:05.4920883Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4920892Z 
2025-01-10T13:49:05.4920969Z >   ???
2025-01-10T13:49:05.4921101Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.4921170Z E   
2025-01-10T13:49:05.4921300Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.4921408Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4921485Z E          ...
2025-01-10T13:49:05.4921569Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4921697Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4921805Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.4921878Z E          ...
2025-01-10T13:49:05.4921960Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.4922083Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.4922183Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.4922190Z 
2025-01-10T13:49:05.4922284Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4922456Z _________________ test_hdf_plasma[stimulated_emission_factor] __________________
2025-01-10T13:49:05.4922462Z 
2025-01-10T13:49:05.4922694Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3bf8129040>
2025-01-10T13:49:05.4922787Z attr = 'stimulated_emission_factor'
2025-01-10T13:49:05.4923056Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bf2436bd0>
2025-01-10T13:49:05.4923061Z 
2025-01-10T13:49:05.4923209Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:49:05.4923376Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:49:05.4923499Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:49:05.4923761Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:49:05.4923887Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:49:05.4923981Z             if hasattr(actual, "cgs"):
2025-01-10T13:49:05.4924068Z                 actual = actual.cgs.value
2025-01-10T13:49:05.4924290Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:49:05.4924296Z 
2025-01-10T13:49:05.4924399Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:49:05.4924513Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4924518Z 
2025-01-10T13:49:05.4924833Z args = (<function assert_allclose.<locals>.compare at 0x7f3bf2999da0>, array([[0.        , 0.        , 0.        , ..., 0.   ...1,
2025-01-10T13:49:05.4924911Z         0.01476858],
2025-01-10T13:49:05.4925041Z        [0.01433244, 0.01435378, 0.01437513, ..., 0.0146952 , 0.01471653,
2025-01-10T13:49:05.4925116Z         0.01473787]]))
2025-01-10T13:49:05.4925370Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.4925382Z 
2025-01-10T13:49:05.4925558Z     @wraps(func)
2025-01-10T13:49:05.4925646Z     def inner(*args, **kwds):
2025-01-10T13:49:05.4925728Z         with self._recreate_cm():
2025-01-10T13:49:05.4925821Z >           return func(*args, **kwds)
2025-01-10T13:49:05.4925903Z E           AssertionError: 
2025-01-10T13:49:05.4926015Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.4926084Z E           
2025-01-10T13:49:05.4926190Z E           Mismatched elements: 120 / 584480 (0.0205%)
2025-01-10T13:49:05.4926304Z E           Max absolute difference among violations: 1.
2025-01-10T13:49:05.4926418Z E           Max relative difference among violations: 1.
2025-01-10T13:49:05.4926563Z E            ACTUAL: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:49:05.4926673Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:49:05.4926783Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:49:05.4926928Z E            DESIRED: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:49:05.4927041Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:49:05.4927143Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:49:05.4927147Z 
2025-01-10T13:49:05.4927355Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.4927513Z ___________________ test_hdf_plasma[lines_lower_level_index] ___________________
2025-01-10T13:49:05.4927517Z 
2025-01-10T13:49:05.4927745Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3bf8129040>
2025-01-10T13:49:05.4927831Z attr = 'lines_lower_level_index'
2025-01-10T13:49:05.4928177Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bc93b0d70>
2025-01-10T13:49:05.4928183Z 
2025-01-10T13:49:05.4928573Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:49:05.4928787Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:49:05.4928995Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:49:05.4929157Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:49:05.4929336Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:49:05.4929436Z             if hasattr(actual, "cgs"):
2025-01-10T13:49:05.4929663Z                 actual = actual.cgs.value
2025-01-10T13:49:05.4929814Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:49:05.4929819Z 
2025-01-10T13:49:05.4929987Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:49:05.4930128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4930168Z 
2025-01-10T13:49:05.4930576Z args = (<function assert_allclose.<locals>.compare at 0x7f3bcb6d28e0>, array([2577, 2577, 2577, ..., 3886, 3846, 3885]), array([2577, 2577, 2577, ..., 3886, 3846, 3885]))
2025-01-10T13:49:05.4930957Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.4931065Z 
2025-01-10T13:49:05.4931172Z     @wraps(func)
2025-01-10T13:49:05.4931320Z     def inner(*args, **kwds):
2025-01-10T13:49:05.4931436Z         with self._recreate_cm():
2025-01-10T13:49:05.4931571Z >           return func(*args, **kwds)
2025-01-10T13:49:05.4931734Z E           AssertionError: 
2025-01-10T13:49:05.4931938Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.4932073Z E           
2025-01-10T13:49:05.4932206Z E           Mismatched elements: 748 / 29224 (2.56%)
2025-01-10T13:49:05.4932372Z E           Max absolute difference among violations: 4005
2025-01-10T13:49:05.4932594Z E           Max relative difference among violations: 26.00649351
2025-01-10T13:49:05.4932805Z E            ACTUAL: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:49:05.4932958Z E            DESIRED: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:49:05.4933044Z 
2025-01-10T13:49:05.4933316Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.4933525Z ___________________ test_hdf_plasma[lines_upper_level_index] ___________________
2025-01-10T13:49:05.4933529Z 
2025-01-10T13:49:05.4934013Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3bf8129040>
2025-01-10T13:49:05.4934185Z attr = 'lines_upper_level_index'
2025-01-10T13:49:05.4934483Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bd0013440>
2025-01-10T13:49:05.4934489Z 
2025-01-10T13:49:05.4934696Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:49:05.4934906Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:49:05.4935122Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:49:05.4935298Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:49:05.4935486Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:49:05.4935609Z             if hasattr(actual, "cgs"):
2025-01-10T13:49:05.4935783Z                 actual = actual.cgs.value
2025-01-10T13:49:05.4935978Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:49:05.4935983Z 
2025-01-10T13:49:05.4936130Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:49:05.4936306Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4936311Z 
2025-01-10T13:49:05.4936730Z args = (<function assert_allclose.<locals>.compare at 0x7f3bd04ca340>, array([2613, 2612, 2611, ..., 3899, 3852, 3898]), array([2613, 2612, 2611, ..., 3899, 3852, 3898]))
2025-01-10T13:49:05.4937060Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.4937065Z 
2025-01-10T13:49:05.4937153Z     @wraps(func)
2025-01-10T13:49:05.4937361Z     def inner(*args, **kwds):
2025-01-10T13:49:05.4937514Z         with self._recreate_cm():
2025-01-10T13:49:05.4937653Z >           return func(*args, **kwds)
2025-01-10T13:49:05.4937799Z E           AssertionError: 
2025-01-10T13:49:05.4937920Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.4938110Z E           
2025-01-10T13:49:05.4938240Z E           Mismatched elements: 1847 / 29224 (6.32%)
2025-01-10T13:49:05.4938439Z E           Max absolute difference among violations: 4046
2025-01-10T13:49:05.4938599Z E           Max relative difference among violations: 24.82208589
2025-01-10T13:49:05.4938771Z E            ACTUAL: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:49:05.4938968Z E            DESIRED: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:49:05.4939024Z 
2025-01-10T13:49:05.4939251Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.4939483Z ________________________ test_hdf_plasma[beta_sobolev] _________________________
2025-01-10T13:49:05.4939490Z 
2025-01-10T13:49:05.4939748Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3bf8129040>
2025-01-10T13:49:05.4940000Z attr = 'beta_sobolev'
2025-01-10T13:49:05.4940343Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3be3e71640>
2025-01-10T13:49:05.4940348Z 
2025-01-10T13:49:05.4940591Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:49:05.4940779Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:49:05.4940962Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:49:05.4941144Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:49:05.4941335Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:49:05.4941521Z             if hasattr(actual, "cgs"):
2025-01-10T13:49:05.4941640Z                 actual = actual.cgs.value
2025-01-10T13:49:05.4941808Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:49:05.4941921Z 
2025-01-10T13:49:05.4942059Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:49:05.4942291Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4942297Z 
2025-01-10T13:49:05.4942610Z args = (<function assert_allclose.<locals>.compare at 0x7f3bd04c9940>, array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.4942746Z        [1., 1., .....,
2025-01-10T13:49:05.4942888Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.4942991Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.4943178Z        [1., 1., 1., ..., 1., 1., 1.]]))
2025-01-10T13:49:05.4943471Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.4943476Z 
2025-01-10T13:49:05.4943726Z     @wraps(func)
2025-01-10T13:49:05.4943840Z     def inner(*args, **kwds):
2025-01-10T13:49:05.4943989Z         with self._recreate_cm():
2025-01-10T13:49:05.4944249Z >           return func(*args, **kwds)
2025-01-10T13:49:05.4944425Z E           AssertionError: 
2025-01-10T13:49:05.4944564Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.4944739Z E           
2025-01-10T13:49:05.4944947Z E           Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:49:05.4945105Z E           Max absolute difference among violations: 0.99984222
2025-01-10T13:49:05.4945301Z E           Max relative difference among violations: 6337.12154973
2025-01-10T13:49:05.4945435Z E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.4945612Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.4945762Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:49:05.4945931Z E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.4946043Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.4946193Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:49:05.4946202Z 
2025-01-10T13:49:05.4946492Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.4946699Z ____________________________ test_hdf_plasma[lines] ____________________________
2025-01-10T13:49:05.4946704Z 
2025-01-10T13:49:05.4946993Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3bf8129040>
2025-01-10T13:49:05.4947100Z attr = 'lines'
2025-01-10T13:49:05.4947435Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bcba6a270>
2025-01-10T13:49:05.4947441Z 
2025-01-10T13:49:05.4947616Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:49:05.4947916Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:49:05.4948063Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:49:05.4948253Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:49:05.4948435Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:49:05.4948542Z             if hasattr(actual, "cgs"):
2025-01-10T13:49:05.4948896Z                 actual = actual.cgs.value
2025-01-10T13:49:05.4949029Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:49:05.4949033Z 
2025-01-10T13:49:05.4949200Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:49:05.4949338Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4949343Z 
2025-01-10T13:49:05.4949859Z args = (<function assert_allclose.<locals>.compare at 0x7f3bccab3ec0>, array([[6.78130000e+04, 6.67720000e+01, 2.70301683e-02...       [1.04462000e+05, 9.99900019e+05, 2.64868307e-04, ...,
2025-01-10T13:49:05.4950088Z         4.44653904e+09, 1.76709163e+00, 9.99900019e-03]]))
2025-01-10T13:49:05.4950367Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.4950372Z 
2025-01-10T13:49:05.4950510Z     @wraps(func)
2025-01-10T13:49:05.4950746Z     def inner(*args, **kwds):
2025-01-10T13:49:05.4950882Z         with self._recreate_cm():
2025-01-10T13:49:05.4951058Z >           return func(*args, **kwds)
2025-01-10T13:49:05.4951227Z E           AssertionError: 
2025-01-10T13:49:05.4951363Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.4951514Z E           
2025-01-10T13:49:05.4951644Z E           Mismatched elements: 13335 / 263016 (5.07%)
2025-01-10T13:49:05.4951873Z E           Max absolute difference among violations: 4.25260542e+12
2025-01-10T13:49:05.4952088Z E           Max relative difference among violations: 18196.0085861
2025-01-10T13:49:05.4952286Z E            ACTUAL: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:49:05.4952452Z E                   4.043917e+10, 6.677200e-07],
2025-01-10T13:49:05.4952624Z E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:49:05.4952886Z E            DESIRED: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:49:05.4953022Z E                   4.043917e+10, 6.677200e-07],
2025-01-10T13:49:05.4953240Z E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:49:05.4953246Z 
2025-01-10T13:49:05.4953474Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.4954872Z ____________________________ test_hdf_plasma[f_lu] _____________________________
2025-01-10T13:49:05.4954879Z 
2025-01-10T13:49:05.4955214Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3bf8129040>
2025-01-10T13:49:05.4955332Z attr = 'f_lu'
2025-01-10T13:49:05.4955685Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bcba68410>
2025-01-10T13:49:05.4955691Z 
2025-01-10T13:49:05.4955863Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:49:05.4956090Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:49:05.4956306Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:49:05.4956500Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:49:05.4956684Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:49:05.4956800Z             if hasattr(actual, "cgs"):
2025-01-10T13:49:05.4956952Z                 actual = actual.cgs.value
2025-01-10T13:49:05.4957066Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:49:05.4957070Z 
2025-01-10T13:49:05.4957311Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:49:05.4957450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4957455Z 
2025-01-10T13:49:05.4957979Z args = (<function assert_allclose.<locals>.compare at 0x7f3bccab2340>, array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02,...), array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02, ...,
2025-01-10T13:49:05.4958152Z        9.93184643e-04, 1.12688279e+00, 4.41447178e-04]))
2025-01-10T13:49:05.4958418Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.4958542Z 
2025-01-10T13:49:05.4958776Z     @wraps(func)
2025-01-10T13:49:05.4958886Z     def inner(*args, **kwds):
2025-01-10T13:49:05.4959034Z         with self._recreate_cm():
2025-01-10T13:49:05.4959149Z >           return func(*args, **kwds)
2025-01-10T13:49:05.4959298Z E           AssertionError: 
2025-01-10T13:49:05.4959472Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.4959620Z E           
2025-01-10T13:49:05.4959751Z E           Mismatched elements: 2221 / 29224 (7.6%)
2025-01-10T13:49:05.4959943Z E           Max absolute difference among violations: 2.92713618
2025-01-10T13:49:05.4960140Z E           Max relative difference among violations: 18196.0085861
2025-01-10T13:49:05.4960383Z E            ACTUAL: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:49:05.4960662Z E                  1.126883e+00, 4.414472e-04])
2025-01-10T13:49:05.4960860Z E            DESIRED: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:49:05.4961030Z E                  1.126883e+00, 4.414472e-04])
2025-01-10T13:49:05.4961035Z 
2025-01-10T13:49:05.4961264Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.4961517Z ________________________ test_hdf_plasma[tau_sobolevs] _________________________
2025-01-10T13:49:05.4961522Z 
2025-01-10T13:49:05.4961825Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f3bf8129040>
2025-01-10T13:49:05.4961934Z attr = 'tau_sobolevs'
2025-01-10T13:49:05.4962282Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bf2ba6390>
2025-01-10T13:49:05.4962287Z 
2025-01-10T13:49:05.4962457Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:49:05.4962711Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:49:05.4962878Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:49:05.4963074Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:49:05.4963238Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:49:05.4963388Z             if hasattr(actual, "cgs"):
2025-01-10T13:49:05.4963568Z                 actual = actual.cgs.value
2025-01-10T13:49:05.4963853Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:49:05.4963859Z 
2025-01-10T13:49:05.4964045Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:49:05.4964185Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4964190Z 
2025-01-10T13:49:05.4964706Z args = (<function assert_allclose.<locals>.compare at 0x7f3bf2998ae0>, array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00...       [7.57366002e-14, 3.42661945e-14, 1.59795775e-14, ...,
2025-01-10T13:49:05.4964828Z         2.25618458e-18, 1.41426559e-18, 8.96636158e-19]]))
2025-01-10T13:49:05.4965224Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.4965233Z 
2025-01-10T13:49:05.4965385Z     @wraps(func)
2025-01-10T13:49:05.4965494Z     def inner(*args, **kwds):
2025-01-10T13:49:05.4965646Z         with self._recreate_cm():
2025-01-10T13:49:05.4965745Z >           return func(*args, **kwds)
2025-01-10T13:49:05.4965956Z E           AssertionError: 
2025-01-10T13:49:05.4966107Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.4966240Z E           
2025-01-10T13:49:05.4966371Z E           Mismatched elements: 39620 / 584480 (6.78%)
2025-01-10T13:49:05.4966558Z E           Max absolute difference among violations: 282815.33818472
2025-01-10T13:49:05.4966767Z E           Max relative difference among violations: 4.12352828e+47
2025-01-10T13:49:05.4967030Z E            ACTUAL: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:49:05.4967185Z E                   0.000000e+00, 0.000000e+00],
2025-01-10T13:49:05.4967351Z E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:49:05.4967691Z E            DESIRED: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:49:05.4967852Z E                   0.000000e+00, 0.000000e+00],
2025-01-10T13:49:05.4968081Z E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:49:05.4968087Z 
2025-01-10T13:49:05.4968312Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.4968540Z __________________ test_plasma_state_iterations[iterations_w] __________________
2025-01-10T13:49:05.4968544Z 
2025-01-10T13:49:05.4968788Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.4968978Z attr = 'iterations_w'
2025-01-10T13:49:05.4969325Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3be797e810>
2025-01-10T13:49:05.4969455Z 
2025-01-10T13:49:05.4969582Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.4969721Z         "attr",
2025-01-10T13:49:05.4969835Z         [
2025-01-10T13:49:05.4970008Z             "iterations_w",
2025-01-10T13:49:05.4970133Z             "iterations_t_rad",
2025-01-10T13:49:05.4970316Z             "iterations_electron_densities",
2025-01-10T13:49:05.4970445Z             "iterations_t_inner",
2025-01-10T13:49:05.4970656Z         ],
2025-01-10T13:49:05.4970761Z     )
2025-01-10T13:49:05.4971021Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.4971182Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:49:05.4971351Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.4971530Z             actual = actual.value
2025-01-10T13:49:05.4971651Z         actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4971836Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.4972049Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.4972059Z 
2025-01-10T13:49:05.4972269Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:49:05.4972438Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4972646Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4972778Z     ???
2025-01-10T13:49:05.4972916Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4972921Z 
2025-01-10T13:49:05.4973116Z >   ???
2025-01-10T13:49:05.4973339Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.4973469Z E   
2025-01-10T13:49:05.4973779Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:49:05.4973921Z E   [index]: [0, 1]
2025-01-10T13:49:05.4974038Z E   [left]:  [0.40039163797855976, 0.45013644671958974]
2025-01-10T13:49:05.4974322Z E   [right]: [0.40039163797855976, 0.4500690173218345]
2025-01-10T13:49:05.4974521Z E   At positional index 1, first diff: 0.45013644671958974 != 0.4500690173218345
2025-01-10T13:49:05.4974565Z 
2025-01-10T13:49:05.4974682Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4974905Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.4975360Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:49:05.4975933Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:49:05.4976119Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:49:05.4976123Z 
2025-01-10T13:49:05.4976127Z 
2025-01-10T13:49:05.4976428Z Packets:                                                                                   4031/? [04:49<00:00,  7.41it/s] [A
2025-01-10T13:49:05.4976435Z 
2025-01-10T13:49:05.4976737Z Packets:                                                                                   14317/? [04:49<00:00, 58.83it/s][A
2025-01-10T13:49:05.4976866Z 
2025-01-10T13:49:05.4977113Z Packets:                                                                                   24936/? [04:49<00:00, 134.58it/s][A
2025-01-10T13:49:05.4977119Z 
2025-01-10T13:49:05.4977468Z Packets:                                                                                   35660/? [04:49<00:00, 243.67it/s][A
2025-01-10T13:49:05.4978100Z Iterations:████████████████████████████████████████████████████████████████████████████████5/5 [04:49<00:00, 101.83s/it]
2025-01-10T13:49:05.4978109Z 
2025-01-10T13:49:05.4978410Z Packets:                                                                                   44030/? [04:49<00:00, 243.67it/s][A
2025-01-10T13:49:05.4978415Z 
2025-01-10T13:49:05.4978718Z Packets:                                                                                   0/40000 [00:00<?, ?it/s]         [A
2025-01-10T13:49:05.4978859Z 
2025-01-10T13:49:05.4979142Z Packets:   ███████████████████▏                                                            9614/40000 [00:00<00:00, 34813.69it/s][A
2025-01-10T13:49:05.4979163Z 
2025-01-10T13:49:05.4979562Z Packets:   ██████████████████████████▏                                                     13096/40000 [00:00<00:00, 34643.21it/s][A
2025-01-10T13:49:05.4979568Z 
2025-01-10T13:49:05.4979868Z Packets:   █████████████████████████████████▎                                              16634/40000 [00:00<00:00, 34878.68it/s][A
2025-01-10T13:49:05.4979927Z 
2025-01-10T13:49:05.4980234Z Packets:   ████████████████████████████████████████▎                                       20125/40000 [00:00<00:00, 34880.32it/s][A
2025-01-10T13:49:05.4980240Z 
2025-01-10T13:49:05.4980585Z Packets:   ███████████████████████████████████████████████▎                                23644/40000 [00:00<00:00, 34975.65it/s][A
2025-01-10T13:49:05.4980590Z 
2025-01-10T13:49:05.4980895Z Packets:   ██████████████████████████████████████████████████████▍                         27234/40000 [00:00<00:00, 35260.29it/s][A
2025-01-10T13:49:05.4980926Z 
2025-01-10T13:49:05.4981356Z Packets:   █████████████████████████████████████████████████████████████▌                  30765/40000 [00:00<00:00, 35236.98it/s][A
2025-01-10T13:49:05.4981363Z 
2025-01-10T13:49:05.4981749Z Packets:   ████████████████████████████████████████████████████████████████████▌           34296/40000 [00:00<00:00, 35256.78it/s][A
2025-01-10T13:49:05.4981755Z 
2025-01-10T13:49:05.4982092Z Packets:   ███████████████████████████████████████████████████████████████████████████▋    37871/40000 [00:01<00:00, 35404.70it/s][A
2025-01-10T13:49:05.4982305Z Iterations:                                                                                6/? [04:51<00:00, 68.01s/it] 
2025-01-10T13:49:05.4982311Z 
2025-01-10T13:49:05.4988841Z Packets:   ████████████████████████████████████████████████████████████████████████████████40000/40000 [00:01<00:00, 35404.70it/s][A
2025-01-10T13:49:05.4989216Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.4989997Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:49:05.4990188Z ________________ test_plasma_state_iterations[iterations_t_rad] ________________
2025-01-10T13:49:05.4990194Z 
2025-01-10T13:49:05.4990417Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.4990508Z attr = 'iterations_t_rad'
2025-01-10T13:49:05.4990779Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3becaa1040>
2025-01-10T13:49:05.4990785Z 
2025-01-10T13:49:05.4990886Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.4990956Z         "attr",
2025-01-10T13:49:05.4991029Z         [
2025-01-10T13:49:05.4991113Z             "iterations_w",
2025-01-10T13:49:05.4991307Z             "iterations_t_rad",
2025-01-10T13:49:05.4991412Z             "iterations_electron_densities",
2025-01-10T13:49:05.4991503Z             "iterations_t_inner",
2025-01-10T13:49:05.4991575Z         ],
2025-01-10T13:49:05.4991642Z     )
2025-01-10T13:49:05.4991847Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.4991958Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:49:05.4992048Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.4992129Z             actual = actual.value
2025-01-10T13:49:05.4992223Z         actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4992347Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.4992528Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.4992533Z 
2025-01-10T13:49:05.4992657Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:49:05.4992774Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4992932Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4993005Z     ???
2025-01-10T13:49:05.4993122Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4993127Z 
2025-01-10T13:49:05.4993192Z >   ???
2025-01-10T13:49:05.4993375Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.4993441Z E   
2025-01-10T13:49:05.4993764Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:49:05.4993842Z E   [index]: [0, 1]
2025-01-10T13:49:05.4993946Z E   [left]:  [9967.488442185557, 10090.925208074616]
2025-01-10T13:49:05.4994044Z E   [right]: [9967.488442185557, 10091.396322818851]
2025-01-10T13:49:05.4994225Z E   At positional index 1, first diff: 10090.925208074616 != 10091.396322818851
2025-01-10T13:49:05.4994230Z 
2025-01-10T13:49:05.4994321Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4994506Z _________ test_plasma_state_iterations[iterations_electron_densities] __________
2025-01-10T13:49:05.4994515Z 
2025-01-10T13:49:05.4994738Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.4994833Z attr = 'iterations_electron_densities'
2025-01-10T13:49:05.4995111Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bebed3c80>
2025-01-10T13:49:05.4995117Z 
2025-01-10T13:49:05.4995208Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.4995282Z         "attr",
2025-01-10T13:49:05.4995349Z         [
2025-01-10T13:49:05.4995431Z             "iterations_w",
2025-01-10T13:49:05.4995508Z             "iterations_t_rad",
2025-01-10T13:49:05.4995609Z             "iterations_electron_densities",
2025-01-10T13:49:05.4995694Z             "iterations_t_inner",
2025-01-10T13:49:05.4995761Z         ],
2025-01-10T13:49:05.4995832Z     )
2025-01-10T13:49:05.4996028Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.4996150Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:49:05.4996356Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.4996442Z             actual = actual.value
2025-01-10T13:49:05.4996532Z         actual = pd.DataFrame(actual)
2025-01-10T13:49:05.4996659Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.4996837Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.4996841Z 
2025-01-10T13:49:05.4996962Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:49:05.4997071Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4997228Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.4997299Z     ???
2025-01-10T13:49:05.4997405Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.4997412Z 
2025-01-10T13:49:05.4997482Z >   ???
2025-01-10T13:49:05.4997657Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.4997857Z E   
2025-01-10T13:49:05.4998019Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:49:05.4998096Z E   [index]: [0, 1]
2025-01-10T13:49:05.4998193Z E   [left]:  [2869544645.3209715, 2880986026.9779425]
2025-01-10T13:49:05.4998294Z E   [right]: [2869544645.3209715, 2881024886.0882792]
2025-01-10T13:49:05.4998458Z E   At positional index 1, first diff: 2880986026.9779425 != 2881024886.0882792
2025-01-10T13:49:05.4998462Z 
2025-01-10T13:49:05.4998552Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.4998718Z ___________________ test_plasma_estimates[nu_bar_estimator] ____________________
2025-01-10T13:49:05.4998723Z 
2025-01-10T13:49:05.4998936Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.4999022Z attr = 'nu_bar_estimator'
2025-01-10T13:49:05.4999291Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bebeb2f90>
2025-01-10T13:49:05.4999300Z 
2025-01-10T13:49:05.4999393Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.4999466Z         "attr",
2025-01-10T13:49:05.4999537Z         [
2025-01-10T13:49:05.4999615Z             "nu_bar_estimator",
2025-01-10T13:49:05.4999695Z             "j_estimator",
2025-01-10T13:49:05.4999768Z             "t_radiative",
2025-01-10T13:49:05.4999851Z             "dilution_factor",
2025-01-10T13:49:05.4999927Z             "output_nus",
2025-01-10T13:49:05.5000009Z             "output_energies",
2025-01-10T13:49:05.5000085Z         ],
2025-01-10T13:49:05.5000150Z     )
2025-01-10T13:49:05.5000331Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.5000446Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:49:05.5000528Z             actual = getattr(
2025-01-10T13:49:05.5000716Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:49:05.5000792Z                 attr,
2025-01-10T13:49:05.5000862Z             )
2025-01-10T13:49:05.5000982Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:49:05.5001132Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:49:05.5001247Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:49:05.5001322Z             actual = getattr(
2025-01-10T13:49:05.5001496Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:49:05.5001570Z                 attr,
2025-01-10T13:49:05.5001639Z             )
2025-01-10T13:49:05.5001711Z         else:
2025-01-10T13:49:05.5001842Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:49:05.5001913Z     
2025-01-10T13:49:05.5001997Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.5002079Z             actual = actual.value
2025-01-10T13:49:05.5002163Z         actual = pd.Series(actual)
2025-01-10T13:49:05.5002284Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.5002462Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.5002555Z 
2025-01-10T13:49:05.5002676Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:49:05.5002785Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5002931Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.5003001Z     ???
2025-01-10T13:49:05.5003105Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5003109Z 
2025-01-10T13:49:05.5003181Z >   ???
2025-01-10T13:49:05.5003278Z E   AssertionError: Series are different
2025-01-10T13:49:05.5003347Z E   
2025-01-10T13:49:05.5003438Z E   Series values are different (100.0 %)
2025-01-10T13:49:05.5003567Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:49:05.5004900Z E   [left]:  [1.0190851489144414e+29, 8.620293210130916e+28, 7.627182111494611e+28, 6.892948616165262e+28, 6.33792769094367e+28, 5.96002040258715e+28, 5.586558872212224e+28, 5.256359181780157e+28, 5.018051447190144e+28, 4.80142717097284e+28, 4.635443103818662e+28, 4.42760082209026e+28, 4.266701646003403e+28, 4.095148200480327e+28, 3.973054136677623e+28, 3.881348463924801e+28, 3.749648114483988e+28, 3.6669667839395174e+28, 3.5309131816469346e+28, 3.4364426470451254e+28]
2025-01-10T13:49:05.5006223Z E   [right]: [1.0202042777991753e+29, 8.604643039338655e+28, 7.621843612415326e+28, 6.887796775939633e+28, 6.338143063845967e+28, 5.961770832970249e+28, 5.583215038688499e+28, 5.26214201104387e+28, 5.00719468999816e+28, 4.795144203550334e+28, 4.630537292368217e+28, 4.425690259081018e+28, 4.270865369572798e+28, 4.094544283657345e+28, 3.972280940559004e+28, 3.884152385274923e+28, 3.7498225331847723e+28, 3.6666118688506634e+28, 3.5319738797726287e+28, 3.437270715325205e+28]
2025-01-10T13:49:05.5006418Z E   At positional index 0, first diff: 1.0190851489144414e+29 != 1.0202042777991753e+29
2025-01-10T13:49:05.5006427Z 
2025-01-10T13:49:05.5006513Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.5006676Z ______________________ test_plasma_estimates[j_estimator] ______________________
2025-01-10T13:49:05.5006680Z 
2025-01-10T13:49:05.5006896Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.5006977Z attr = 'j_estimator'
2025-01-10T13:49:05.5007252Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bebee0380>
2025-01-10T13:49:05.5007257Z 
2025-01-10T13:49:05.5007344Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5007417Z         "attr",
2025-01-10T13:49:05.5007484Z         [
2025-01-10T13:49:05.5007570Z             "nu_bar_estimator",
2025-01-10T13:49:05.5007647Z             "j_estimator",
2025-01-10T13:49:05.5007728Z             "t_radiative",
2025-01-10T13:49:05.5007805Z             "dilution_factor",
2025-01-10T13:49:05.5007884Z             "output_nus",
2025-01-10T13:49:05.5007962Z             "output_energies",
2025-01-10T13:49:05.5008038Z         ],
2025-01-10T13:49:05.5008103Z     )
2025-01-10T13:49:05.5008282Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.5008393Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:49:05.5008473Z             actual = getattr(
2025-01-10T13:49:05.5008666Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:49:05.5008735Z                 attr,
2025-01-10T13:49:05.5008807Z             )
2025-01-10T13:49:05.5008921Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:49:05.5009073Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:49:05.5009183Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:49:05.5009264Z             actual = getattr(
2025-01-10T13:49:05.5009431Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:49:05.5009509Z                 attr,
2025-01-10T13:49:05.5009576Z             )
2025-01-10T13:49:05.5009650Z         else:
2025-01-10T13:49:05.5009894Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:49:05.5009967Z     
2025-01-10T13:49:05.5010050Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.5010133Z             actual = actual.value
2025-01-10T13:49:05.5010220Z         actual = pd.Series(actual)
2025-01-10T13:49:05.5010338Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.5010519Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.5010523Z 
2025-01-10T13:49:05.5010636Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:49:05.5010748Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5010889Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.5010959Z     ???
2025-01-10T13:49:05.5011063Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5011143Z 
2025-01-10T13:49:05.5011220Z >   ???
2025-01-10T13:49:05.5011315Z E   AssertionError: Series are different
2025-01-10T13:49:05.5011387Z E   
2025-01-10T13:49:05.5011482Z E   Series values are different (100.0 %)
2025-01-10T13:49:05.5011608Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:49:05.5012569Z E   [left]:  [116548101693134.0, 98287497352449.0, 86880176732435.3, 78272950854373.0, 72163814877095.83, 67694196332568.8, 63443304042094.88, 60039709300008.766, 57626147839330.93, 55320363334244.24, 53407234761435.555, 51398562237742.71, 49867122015465.38, 48237829093150.86, 46995101666576.03, 46046276744657.68, 44990423974887.06, 44175537951010.664, 43032079683987.45, 42141581527839.66]
2025-01-10T13:49:05.5013516Z E   [right]: [116635492761989.08, 98171051632121.94, 86872515261186.84, 78289696965690.05, 72209193315676.42, 67743848273202.76, 63510940656108.0, 60117004438842.5, 57572723670164.91, 55316097836075.18, 53398108009568.71, 51391839595543.54, 49914799926154.195, 48252386019894.61, 46984233483222.1, 46076787175987.44, 45005288890715.74, 44179675761283.02, 43040066710169.69, 42141149121109.82]
2025-01-10T13:49:05.5013799Z E   At positional index 0, first diff: 116548101693134.0 != 116635492761989.08
2025-01-10T13:49:05.5013804Z 
2025-01-10T13:49:05.5013894Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.5014047Z ______________________ test_plasma_estimates[t_radiative] ______________________
2025-01-10T13:49:05.5014051Z 
2025-01-10T13:49:05.5014265Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.5014344Z attr = 't_radiative'
2025-01-10T13:49:05.5014611Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bebee97c0>
2025-01-10T13:49:05.5014616Z 
2025-01-10T13:49:05.5014703Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5014776Z         "attr",
2025-01-10T13:49:05.5014846Z         [
2025-01-10T13:49:05.5014935Z             "nu_bar_estimator",
2025-01-10T13:49:05.5015016Z             "j_estimator",
2025-01-10T13:49:05.5015094Z             "t_radiative",
2025-01-10T13:49:05.5015176Z             "dilution_factor",
2025-01-10T13:49:05.5015252Z             "output_nus",
2025-01-10T13:49:05.5015334Z             "output_energies",
2025-01-10T13:49:05.5015401Z         ],
2025-01-10T13:49:05.5015471Z     )
2025-01-10T13:49:05.5015643Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.5015754Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:49:05.5015832Z             actual = getattr(
2025-01-10T13:49:05.5016020Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:49:05.5016088Z                 attr,
2025-01-10T13:49:05.5016160Z             )
2025-01-10T13:49:05.5016274Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:49:05.5016424Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:49:05.5016541Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:49:05.5016741Z             actual = getattr(
2025-01-10T13:49:05.5016911Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:49:05.5016982Z                 attr,
2025-01-10T13:49:05.5017053Z             )
2025-01-10T13:49:05.5017119Z         else:
2025-01-10T13:49:05.5017253Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:49:05.5017319Z     
2025-01-10T13:49:05.5017408Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.5017489Z             actual = actual.value
2025-01-10T13:49:05.5017576Z         actual = pd.Series(actual)
2025-01-10T13:49:05.5017695Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.5017871Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.5017876Z 
2025-01-10T13:49:05.5018103Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:49:05.5018208Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5018355Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.5018422Z     ???
2025-01-10T13:49:05.5018531Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5018535Z 
2025-01-10T13:49:05.5018600Z >   ???
2025-01-10T13:49:05.5018698Z E   AssertionError: Series are different
2025-01-10T13:49:05.5018764Z E   
2025-01-10T13:49:05.5018862Z E   Series values are different (90.0 %)
2025-01-10T13:49:05.5018983Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:49:05.5019977Z E   [left]:  [10090.925208074616, 10114.284007169754, 10139.419400388753, 10142.763627360704, 10149.780795955081, 10123.09844072696, 10084.70389705666, 10058.012622231076, 10075.221831273808, 10032.602564737463, 10029.923783575228, 9982.400974610373, 9943.057719983486, 9914.605779635785, 9894.245392559053, 9854.911578885576, 9802.511064512953, 9775.252526407034, 9735.554945100961, 9699.295793920262]
2025-01-10T13:49:05.5020967Z E   [right]: [10091.396322818851, 10113.672762424394, 10138.57214647089, 10142.40782954104, 10149.471061360664, 10124.731447668686, 10084.96501000204, 10057.88480134284, 10073.983914823793, 10031.924501830883, 10029.890159447663, 9982.658841271636, 9943.375727608092, 9914.259749796103, 9893.924180562475, 9854.860600288932, 9802.891513260798, 9774.848565783677, 9735.162327402864, 9698.911095826039]
2025-01-10T13:49:05.5021134Z E   At positional index 0, first diff: 10090.925208074616 != 10091.396322818851
2025-01-10T13:49:05.5021139Z 
2025-01-10T13:49:05.5021228Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.5021388Z ____________________ test_plasma_estimates[dilution_factor] ____________________
2025-01-10T13:49:05.5021398Z 
2025-01-10T13:49:05.5021608Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.5021696Z attr = 'dilution_factor'
2025-01-10T13:49:05.5021959Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bebee8d70>
2025-01-10T13:49:05.5021967Z 
2025-01-10T13:49:05.5022062Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5022130Z         "attr",
2025-01-10T13:49:05.5022201Z         [
2025-01-10T13:49:05.5022277Z             "nu_bar_estimator",
2025-01-10T13:49:05.5022355Z             "j_estimator",
2025-01-10T13:49:05.5022427Z             "t_radiative",
2025-01-10T13:49:05.5022510Z             "dilution_factor",
2025-01-10T13:49:05.5022583Z             "output_nus",
2025-01-10T13:49:05.5022666Z             "output_energies",
2025-01-10T13:49:05.5022732Z         ],
2025-01-10T13:49:05.5022803Z     )
2025-01-10T13:49:05.5022977Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.5023089Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:49:05.5023170Z             actual = getattr(
2025-01-10T13:49:05.5023356Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:49:05.5023532Z                 attr,
2025-01-10T13:49:05.5023907Z             )
2025-01-10T13:49:05.5024028Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:49:05.5024173Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:49:05.5024285Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:49:05.5024360Z             actual = getattr(
2025-01-10T13:49:05.5024530Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:49:05.5024599Z                 attr,
2025-01-10T13:49:05.5024669Z             )
2025-01-10T13:49:05.5024736Z         else:
2025-01-10T13:49:05.5024870Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:49:05.5024940Z     
2025-01-10T13:49:05.5025023Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.5025226Z             actual = actual.value
2025-01-10T13:49:05.5025308Z         actual = pd.Series(actual)
2025-01-10T13:49:05.5025436Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.5025609Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.5025613Z 
2025-01-10T13:49:05.5025731Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:49:05.5025838Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5025983Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.5026049Z     ???
2025-01-10T13:49:05.5026156Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5026161Z 
2025-01-10T13:49:05.5026230Z >   ???
2025-01-10T13:49:05.5026322Z E   AssertionError: Series are different
2025-01-10T13:49:05.5026394Z E   
2025-01-10T13:49:05.5026485Z E   Series values are different (95.0 %)
2025-01-10T13:49:05.5026609Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:49:05.5027691Z E   [left]:  [0.45013644671958974, 0.3590876501536774, 0.29922866259325875, 0.2578248359585449, 0.22541895309871685, 0.2011998403594266, 0.1825952857379094, 0.16657898370897484, 0.15044998950385866, 0.13972884748944558, 0.12862444897046627, 0.12093391136570561, 0.1134368459236266, 0.1064936133229687, 0.1001521163428717, 0.09484336636678078, 0.090537247519663, 0.08584829670213995, 0.08202005255449264, 0.07823319609488677]
2025-01-10T13:49:05.5028771Z E   [right]: [0.4500690173218345, 0.3591778672440072, 0.299315794490968, 0.2578615845098735, 0.2254422032786788, 0.20109997630618956, 0.18257381854718482, 0.166581017494628, 0.15049754388199085, 0.13975435818105286, 0.12862206084807348, 0.12092168181342122, 0.1134233405695467, 0.10650389106044364, 0.10016109465785483, 0.09484390983006763, 0.09052533757303871, 0.08585912682814001, 0.0820302832176511, 0.07824287530618068]
2025-01-10T13:49:05.5028944Z E   At positional index 0, first diff: 0.45013644671958974 != 0.4500690173218345
2025-01-10T13:49:05.5028952Z 
2025-01-10T13:49:05.5029038Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.5029196Z ______________________ test_plasma_estimates[output_nus] _______________________
2025-01-10T13:49:05.5029200Z 
2025-01-10T13:49:05.5029409Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.5029490Z attr = 'output_nus'
2025-01-10T13:49:05.5029753Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bebeeb800>
2025-01-10T13:49:05.5029763Z 
2025-01-10T13:49:05.5029851Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5029923Z         "attr",
2025-01-10T13:49:05.5029988Z         [
2025-01-10T13:49:05.5030071Z             "nu_bar_estimator",
2025-01-10T13:49:05.5030145Z             "j_estimator",
2025-01-10T13:49:05.5030225Z             "t_radiative",
2025-01-10T13:49:05.5030301Z             "dilution_factor",
2025-01-10T13:49:05.5030383Z             "output_nus",
2025-01-10T13:49:05.5030459Z             "output_energies",
2025-01-10T13:49:05.5030644Z         ],
2025-01-10T13:49:05.5030713Z     )
2025-01-10T13:49:05.5030890Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.5030997Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:49:05.5031079Z             actual = getattr(
2025-01-10T13:49:05.5031265Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:49:05.5031341Z                 attr,
2025-01-10T13:49:05.5031411Z             )
2025-01-10T13:49:05.5031527Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:49:05.5031677Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:49:05.5031783Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:49:05.5031865Z             actual = getattr(
2025-01-10T13:49:05.5032031Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:49:05.5032184Z                 attr,
2025-01-10T13:49:05.5032255Z             )
2025-01-10T13:49:05.5032327Z         else:
2025-01-10T13:49:05.5032454Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:49:05.5032527Z     
2025-01-10T13:49:05.5032611Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.5032696Z             actual = actual.value
2025-01-10T13:49:05.5032779Z         actual = pd.Series(actual)
2025-01-10T13:49:05.5032903Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.5033080Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.5033090Z 
2025-01-10T13:49:05.5033211Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:49:05.5033319Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5033465Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.5033537Z     ???
2025-01-10T13:49:05.5033753Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5033762Z 
2025-01-10T13:49:05.5033830Z >   ???
2025-01-10T13:49:05.5033930Z E   AssertionError: Series are different
2025-01-10T13:49:05.5034001Z E   
2025-01-10T13:49:05.5034101Z E   Series values are different (5.1125 %)
2025-01-10T13:49:05.5034474Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5039613Z E   [left]:  [1806497964363691.5, 620824050797791.0, 651557470803973.5, 320924283401155.06, 561113873787112.25, 241798291122606.1, 676659115957490.4, 599043646843299.5, 607330789848065.1, 916915882531221.8, 944436308170835.4, 768263702028831.1, 3180981513893847.5, 2598977918829023.0, 857730899770804.0, 618923179519891.8, 551416875835854.44, 1086541433542293.5, 754833971959408.2, 491317193158596.1, 463436938874983.3, 1490288028825510.8, 820033385297487.8, 2452394921854276.0, 735345782477539.2, 754787342662615.8, 1199748305923909.8, 555498342552241.7, 1389852333652706.2, 1385846435296470.8, 368679109418251.0, 1912095724903033.2, 2017769542518466.0, 627651232172153.5, 1067422242306306.2, 948629480189651.8, 1978325812571257.2, 445358814403560.5, 1003063944118045.1, 849728144317407.0, 967658015948004.0, 1280663773931335.5, 1146264300342218.8, 1001861030074981.8, 1119183834838938.5, 508263982580230.94, 1892628101399911.5, 781537280613827.0, 1151086326674402.2, 604499180764604.0, 725902034055549.9, 457814698066574.3, 527262173332999.9, 341748821526544.94, 562192309822701.44, 1275142789503603.2, 657025184715239.1, 723852885328246.5, 1885538050889659.0, 585984121054452.8, 917026429989072.4, 696897964334913.8, 267976306885906.9, 343747179020909.4, 96582762885197.0, 1296746601148043.2, 491334710156273.4, 1492212625817827.0, 764003012375887.5, 1572736205466074.5, 1559683657845856.8, 476769967588303.4, 1860056739912971.5, 702994366583567.1, 1017518348351587.6, 484486056936689.44, 453148114829195.1, 717528815454204.8, 508993320531592.06, 1838746711006649.2, 663648932445292.6, 1322073114843600.0, 601612805662424.9, 1840374275823067.5, 440721373409527.9, 1641950783987409.2, 1588043382663297.8, 1174117968839014.5, 1215683099165958.0, 997747131579365.4, 1168546500179118.0, 1048569696680261.6, 1513832752764706.8, 1363140908755187.5, 430233648082889.1, 386057265404197.6, 1139144647809848.2, 307473380309096.1, 403471109559731.6, 1156219784137886.0, ...]
2025-01-10T13:49:05.5044997Z E   [right]: [1806512041912368.8, 620828912578783.0, 651561681514283.2, 320926793622792.2, 561113831783033.0, 241800185490365.7, 676657497080704.5, 599041295479916.1, 607335547665201.9, 916923063058785.2, 944437910067241.0, 768263081009078.1, 3180974191574679.5, 2598971968757746.0, 857737633068955.4, 618928023168687.5, 551416803496124.25, 1086549942730966.9, 754833333392143.2, 491321027587878.7, 463440568130160.4, 1490299638092356.5, 820039899773855.1, 2452391211684156.5, 735351500669317.2, 754784724695130.1, 1199750254428993.5, 555501175228475.94, 1389863217827777.5, 1385857288100655.8, 368681996608404.06, 1912110698856825.8, 2017785344022282.2, 627651183748411.8, 1067430591325981.9, 948623864004036.0, 1978326785288413.0, 445362302085804.25, 1003071799286044.6, 849734798686120.6, 967665593846029.1, 1280673803031827.2, 1146262107204918.5, 1001868875822752.4, 1119192629281446.4, 508267969421775.25, 1892642922899362.8, 781543400968040.9, 1151095341031394.2, 604503914702702.6, 725907718720482.8, 457818283293006.9, 527261796217634.44, 341748696489478.8, 562196737455386.1, 1275152810939863.2, 657003154645147.8, 723858331274613.6, 1885552835316985.5, 585988709997902.4, 917033611382352.2, 696895494383372.0, 267978405454919.2, 343749870964784.4, 96583519241591.61, 1296758039945233.8, 491338550899887.9, 1492219434855197.0, 764008995416200.5, 1572724795429636.2, 1559695871999531.0, 476770259286661.5, 1860071011741526.8, 702999878183188.2, 1017511963264823.4, 484489851031166.6, 453151663510803.5, 717543258409877.6, 508990329432545.4, 1838756496639701.8, 663654129595372.2, 1322083461079532.0, 601616268613591.0, 1840388688113732.8, 440724823612140.5, 1641895920313314.8, 1588055811374384.5, 1174127163560797.5, 1215687723496508.2, 997743048820577.1, 1168560411536350.2, 1048577905256173.4, 1513844599143900.5, 1363151613665534.0, 430237017317327.8, 386060300653508.2, 1139153568649478.2, 307475792296687.0, 403474269212082.0, 1156228838695875.2, ...]
2025-01-10T13:49:05.5045299Z E   At positional index 56, first diff: 657025184715239.1 != 657003154645147.8
2025-01-10T13:49:05.5045305Z 
2025-01-10T13:49:05.5045398Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.5045567Z ____________________ test_plasma_estimates[output_energies] ____________________
2025-01-10T13:49:05.5045575Z 
2025-01-10T13:49:05.5045799Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f3becaa5460>
2025-01-10T13:49:05.5045884Z attr = 'output_energies'
2025-01-10T13:49:05.5046158Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bebee9520>
2025-01-10T13:49:05.5046163Z 
2025-01-10T13:49:05.5046249Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5046324Z         "attr",
2025-01-10T13:49:05.5046390Z         [
2025-01-10T13:49:05.5046472Z             "nu_bar_estimator",
2025-01-10T13:49:05.5046550Z             "j_estimator",
2025-01-10T13:49:05.5046624Z             "t_radiative",
2025-01-10T13:49:05.5046709Z             "dilution_factor",
2025-01-10T13:49:05.5046783Z             "output_nus",
2025-01-10T13:49:05.5046865Z             "output_energies",
2025-01-10T13:49:05.5046932Z         ],
2025-01-10T13:49:05.5047002Z     )
2025-01-10T13:49:05.5047182Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:49:05.5047306Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:49:05.5047383Z             actual = getattr(
2025-01-10T13:49:05.5047690Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:49:05.5047763Z                 attr,
2025-01-10T13:49:05.5047836Z             )
2025-01-10T13:49:05.5047950Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:49:05.5048104Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:49:05.5048220Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:49:05.5048294Z             actual = getattr(
2025-01-10T13:49:05.5048475Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:49:05.5048545Z                 attr,
2025-01-10T13:49:05.5048617Z             )
2025-01-10T13:49:05.5048684Z         else:
2025-01-10T13:49:05.5048823Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:49:05.5048995Z     
2025-01-10T13:49:05.5049084Z         if hasattr(actual, "value"):
2025-01-10T13:49:05.5049171Z             actual = actual.value
2025-01-10T13:49:05.5049260Z         actual = pd.Series(actual)
2025-01-10T13:49:05.5049384Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:49:05.5049566Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:49:05.5049572Z 
2025-01-10T13:49:05.5049686Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:49:05.5049800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5049949Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:49:05.5050017Z     ???
2025-01-10T13:49:05.5050128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5050133Z 
2025-01-10T13:49:05.5050199Z >   ???
2025-01-10T13:49:05.5050299Z E   AssertionError: Series are different
2025-01-10T13:49:05.5050370Z E   
2025-01-10T13:49:05.5050472Z E   Series values are different (1.3025 %)
2025-01-10T13:49:05.5050841Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5057192Z E   [left]:  [2.5801871599548787e-05, 2.5615305276449435e-05, 2.5858344017372144e-05, -2.4286539750273696e-05, 2.4924524325725243e-05, -2.456230824810029e-05, 2.4103043153710077e-05, -2.438655094434287e-05, -2.4539054537501715e-05, 2.5417984817525785e-05, 2.512000535197746e-05, -2.4642582656280976e-05, -2.423335106855554e-05, -2.4507743780475822e-05, 2.4958490988042172e-05, -2.4193730330394604e-05, 2.5671484002468758e-05, 2.571778434062277e-05, 2.464945535255098e-05, -2.422773639583352e-05, 2.5447471360622184e-05, -2.409627635116542e-05, 2.5614844040255083e-05, -2.4320523596905817e-05, 2.5377784576172196e-05, -2.3457066675560312e-05, 2.4369140190445265e-05, 2.5580782093694832e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4679185862134628e-05, 2.5692099696671885e-05, 2.2709368608835504e-05, -2.422769024282858e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.221435871493417e-05, 2.588758262836899e-05, -2.4715605747432618e-05, 2.5511122157387355e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127536098161385e-05, -2.468141895326209e-05, -2.47043179761032e-05, -2.3740908691907106e-05, 2.4832442492096064e-05, -2.413156183708872e-05, -2.4208444730823924e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.413785571902468e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.4718848796409172e-05, 2.5235644879553273e-05, 2.5660116818809676e-05, 2.5705887025490933e-05, -2.3537055466673638e-05, 2.5942471740302383e-05, 2.4779255435154302e-05, -2.4437171482408422e-05, -2.488587475102296e-05, -2.461817145541738e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721589006402834e-05, -2.3916183924792534e-05, -2.4073277575252532e-05, 2.5426114770306902e-05, 2.504304506604637e-05, -2.365600824332809e-05, 2.564649452803889e-05, -2.3899135529642785e-05, 2.5338970275810367e-05, 2.484858251486878e-05, 2.5806793260333468e-05, 2.538037983050111e-05, -2.4207571237562553e-05, 2.4527910111281257e-05, 2.4916625382690475e-05, -2.4248093976538034e-05, -2.4259084902202997e-05, 2.5042343244083765e-05, -2.4184000110453416e-05, 2.534949108326902e-05, -2.438918660146681e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:49:05.5063539Z E   [right]: [2.580187060760512e-05, 2.5615305276449435e-05, 2.585830862681326e-05, -2.4286539523836896e-05, 2.4924327273178824e-05, -2.4562308329704016e-05, 2.4102796735064873e-05, -2.4386264249292878e-05, -2.4539054606359595e-05, 2.5417984817525785e-05, 2.5119851241109903e-05, -2.464236975797002e-05, -2.423310551200988e-05, -2.4507495750261827e-05, 2.4958491461131913e-05, -2.4193730203503752e-05, 2.5671279598406848e-05, 2.571778434758039e-05, 2.464924146734715e-05, -2.4227735746845522e-05, 2.5447471360622184e-05, -2.409627535779648e-05, 2.5614846934356755e-05, -2.4320296346496788e-05, 2.5377783180930537e-05, -2.345680162082186e-05, 2.436898893045542e-05, 2.5580712211859562e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4678990692654424e-05, 2.5692099452386407e-05, 2.270905632364821e-05, -2.4227512425411162e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.2214142249592017e-05, 2.588758262836899e-05, -2.4715606408157026e-05, 2.5511122485544443e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127338442376704e-05, -2.4681216640073288e-05, -2.4704319074974646e-05, -2.3740909354181544e-05, 2.4831415400580145e-05, -2.4131554413805748e-05, -2.420844496771843e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.4137581143845235e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.471887326730884e-05, 2.5235644520855386e-05, 2.5660032958970583e-05, 2.5705887025490933e-05, -2.3536700387812003e-05, 2.5942471740302383e-05, 2.4779076546395e-05, -2.4437167612038533e-05, -2.4885874975052928e-05, -2.461782418608366e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721880722086934e-05, -2.391585609212342e-05, -2.407321716937353e-05, 2.5426114770306902e-05, 2.5043044930642476e-05, -2.3655959156054043e-05, 2.564649452803889e-05, -2.389913546657555e-05, 2.533792518100767e-05, 2.4848582397006154e-05, 2.5806793260333468e-05, 2.5380277617431415e-05, -2.4207282609290893e-05, 2.4528010028979532e-05, 2.491662531246e-05, -2.4248093837055892e-05, -2.4259085434617066e-05, 2.5042343244083765e-05, -2.4184000860153038e-05, 2.534949108326902e-05, -2.4389186927485497e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:49:05.5064075Z E   At positional index 414, first diff: 2.5347525852067693e-05 != 2.5657552576608082e-05
2025-01-10T13:49:05.5064087Z 
2025-01-10T13:49:05.5064176Z testing.pyx:173: AssertionError
2025-01-10T13:49:05.5064367Z ________________ TestSpectrumSolver.test_spectrum_real_packets _________________
2025-01-10T13:49:05.5064372Z 
2025-01-10T13:49:05.5064628Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f3bf866eed0>
2025-01-10T13:49:05.5064827Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bc665c140>
2025-01-10T13:49:05.5064832Z 
2025-01-10T13:49:05.5064954Z     def test_spectrum_real_packets(self, simulation):
2025-01-10T13:49:05.5065106Z         transport_state = simulation.transport.transport_state
2025-01-10T13:49:05.5065299Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:49:05.5065478Z     
2025-01-10T13:49:05.5065664Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:49:05.5065792Z         result = solver.spectrum_real_packets.luminosity
2025-01-10T13:49:05.5065969Z         key = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:49:05.5066067Z         expected = self.get_expected_data(key)
2025-01-10T13:49:05.5066139Z     
2025-01-10T13:49:05.5066244Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5066316Z     
2025-01-10T13:49:05.5066401Z >       assert_quantity_allclose(
2025-01-10T13:49:05.5066480Z             result,
2025-01-10T13:49:05.5066555Z             luminosity,
2025-01-10T13:49:05.5066629Z         )
2025-01-10T13:49:05.5066633Z 
2025-01-10T13:49:05.5066758Z tardis/spectrum/tests/test_spectrum_solver.py:71: 
2025-01-10T13:49:05.5066968Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5067315Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5067410Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5067524Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5067529Z 
2025-01-10T13:49:05.5067991Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc64e51c0>, array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38,...), array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, ...,
2025-01-10T13:49:05.5068095Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5068350Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5068355Z 
2025-01-10T13:49:05.5068433Z     @wraps(func)
2025-01-10T13:49:05.5068514Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5068602Z         with self._recreate_cm():
2025-01-10T13:49:05.5068691Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5068782Z E           AssertionError: 
2025-01-10T13:49:05.5068894Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5068963Z E           
2025-01-10T13:49:05.5069068Z E           Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:49:05.5069207Z E           Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:49:05.5069321Z E           Max relative difference among violations: 1.
2025-01-10T13:49:05.5069489Z E            ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5069579Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5069746Z E            DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5069831Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5069839Z 
2025-01-10T13:49:05.5070036Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5070241Z ___________ TestSpectrumSolver.test_spectrum_real_packets_reabsorbed ___________
2025-01-10T13:49:05.5070246Z 
2025-01-10T13:49:05.5070505Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f3bf866f440>
2025-01-10T13:49:05.5070697Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bc665c140>
2025-01-10T13:49:05.5070702Z 
2025-01-10T13:49:05.5070850Z     def test_spectrum_real_packets_reabsorbed(self, simulation):
2025-01-10T13:49:05.5070992Z         transport_state = simulation.transport.transport_state
2025-01-10T13:49:05.5071184Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:49:05.5071249Z     
2025-01-10T13:49:05.5071437Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:49:05.5071585Z         result = solver.spectrum_real_packets_reabsorbed.luminosity
2025-01-10T13:49:05.5071793Z         key = "simulation/spectrum_solver/spectrum_real_packets_reabsorbed/luminosity"
2025-01-10T13:49:05.5071982Z         expected = self.get_expected_data(key)
2025-01-10T13:49:05.5072048Z     
2025-01-10T13:49:05.5072157Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5072223Z     
2025-01-10T13:49:05.5072308Z >       assert_quantity_allclose(
2025-01-10T13:49:05.5072377Z             result,
2025-01-10T13:49:05.5072458Z             luminosity,
2025-01-10T13:49:05.5072525Z         )
2025-01-10T13:49:05.5072529Z 
2025-01-10T13:49:05.5072654Z tardis/spectrum/tests/test_spectrum_solver.py:87: 
2025-01-10T13:49:05.5072761Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5073091Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5073179Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5073375Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5073386Z 
2025-01-10T13:49:05.5073972Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc8f51260>, array([2.03920412e+38, 3.72882494e+38, 2.29646943e+38,...), array([2.03920412e+38, 3.72882494e+38, 2.29646943e+38, ...,
2025-01-10T13:49:05.5074074Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5074354Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5074360Z 
2025-01-10T13:49:05.5074432Z     @wraps(func)
2025-01-10T13:49:05.5074516Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5074596Z         with self._recreate_cm():
2025-01-10T13:49:05.5074687Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5074769Z E           AssertionError: 
2025-01-10T13:49:05.5074878Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5074949Z E           
2025-01-10T13:49:05.5075054Z E           Mismatched elements: 252 / 10000 (2.52%)
2025-01-10T13:49:05.5075198Z E           Max absolute difference among violations: 4.15247374e+37
2025-01-10T13:49:05.5075323Z E           Max relative difference among violations: 1.03027212
2025-01-10T13:49:05.5075491Z E            ACTUAL: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5075575Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5075743Z E            DESIRED: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5075824Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5075829Z 
2025-01-10T13:49:05.5076032Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5076199Z ________________________ TestSpectrumSolver.test_solve _________________________
2025-01-10T13:49:05.5076209Z 
2025-01-10T13:49:05.5076470Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f3bf866f680>
2025-01-10T13:49:05.5076673Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bc665c140>
2025-01-10T13:49:05.5076681Z 
2025-01-10T13:49:05.5076773Z     def test_solve(self, simulation):
2025-01-10T13:49:05.5076922Z         transport_state = simulation.transport.transport_state
2025-01-10T13:49:05.5077108Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:49:05.5077179Z     
2025-01-10T13:49:05.5077361Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:49:05.5077521Z         result_real, result_virtual, result_integrated = solver.solve(
2025-01-10T13:49:05.5077602Z             transport_state
2025-01-10T13:49:05.5077675Z         )
2025-01-10T13:49:05.5077853Z         key_real = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:49:05.5077975Z         expected_real = self.get_expected_data(key_real)
2025-01-10T13:49:05.5078047Z     
2025-01-10T13:49:05.5078181Z         luminosity_real = u.Quantity(expected_real, "erg /s")
2025-01-10T13:49:05.5078384Z     
2025-01-10T13:49:05.5078470Z >       assert_quantity_allclose(
2025-01-10T13:49:05.5078562Z             result_real.luminosity,
2025-01-10T13:49:05.5078644Z             luminosity_real,
2025-01-10T13:49:05.5078719Z         )
2025-01-10T13:49:05.5078724Z 
2025-01-10T13:49:05.5078850Z tardis/spectrum/tests/test_spectrum_solver.py:105: 
2025-01-10T13:49:05.5078966Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5079304Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5079396Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5079506Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5079510Z 
2025-01-10T13:49:05.5079972Z args = (<function assert_allclose.<locals>.compare at 0x7f3bf299ade0>, array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38,...), array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, ...,
2025-01-10T13:49:05.5080206Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5080457Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5080462Z 
2025-01-10T13:49:05.5080541Z     @wraps(func)
2025-01-10T13:49:05.5080621Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5080709Z         with self._recreate_cm():
2025-01-10T13:49:05.5080794Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5080880Z E           AssertionError: 
2025-01-10T13:49:05.5080990Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5081059Z E           
2025-01-10T13:49:05.5081164Z E           Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:49:05.5081301Z E           Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:49:05.5081414Z E           Max relative difference among violations: 1.
2025-01-10T13:49:05.5081583Z E            ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5081676Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5081840Z E            DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5081927Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5081932Z 
2025-01-10T13:49:05.5082130Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5082307Z __________________ TestTransportSimple.test_j_blue_estimators __________________
2025-01-10T13:49:05.5082312Z 
2025-01-10T13:49:05.5082525Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f3bf8674260>
2025-01-10T13:49:05.5082715Z simulation = <tardis.simulation.base.Simulation object at 0x7f3be97d1f70>
2025-01-10T13:49:05.5082720Z 
2025-01-10T13:49:05.5082829Z     def test_j_blue_estimators(self, simulation):
2025-01-10T13:49:05.5082982Z         key = "simulation/transport/transport_state/j_blue_estimator"
2025-01-10T13:49:05.5083089Z         expected = self.get_expected_data(key)
2025-01-10T13:49:05.5083156Z     
2025-01-10T13:49:05.5083243Z >       npt.assert_allclose(
2025-01-10T13:49:05.5083457Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator,
2025-01-10T13:49:05.5083542Z             expected.values,
2025-01-10T13:49:05.5083740Z         )
2025-01-10T13:49:05.5083752Z 
2025-01-10T13:49:05.5083845Z tardis/tests/test_tardis_full.py:70: 
2025-01-10T13:49:05.5083957Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5083963Z 
2025-01-10T13:49:05.5084229Z args = (<function assert_allclose.<locals>.compare at 0x7f3beae51580>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5084306Z        [0., 0., .....,
2025-01-10T13:49:05.5084379Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5084457Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5084535Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:49:05.5084907Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5084912Z 
2025-01-10T13:49:05.5084984Z     @wraps(func)
2025-01-10T13:49:05.5085068Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5085154Z         with self._recreate_cm():
2025-01-10T13:49:05.5085239Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5085324Z E           AssertionError: 
2025-01-10T13:49:05.5085427Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5085502Z E           
2025-01-10T13:49:05.5085605Z E           Mismatched elements: 491895 / 584480 (84.2%)
2025-01-10T13:49:05.5085749Z E           Max absolute difference among violations: 5.32418652e-19
2025-01-10T13:49:05.5085875Z E           Max relative difference among violations: 8.78746214
2025-01-10T13:49:05.5085983Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5086173Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5086268Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5086372Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5086458Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5086541Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5086551Z 
2025-01-10T13:49:05.5086746Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5086903Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5087192Z [[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5087270Z 	
2025-01-10T13:49:05.5087826Z 	Reading Atomic Data from /home/runner/work/tardis/tardis/tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
2025-01-10T13:49:05.5088003Z [[1mtardis.io.atom_data.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5088431Z 	Reading Atom Data with: UUID = 6f7b09e887a311e7a06b246e96350010 MD5  = 864f1753714343c41f99cb065710cace  ([1mbase.py[0m:258)
2025-01-10T13:49:05.5088607Z [[1mtardis.io.atom_data.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5089078Z 	Non provided Atomic Data: synpp_refs, photoionization_data, yg_data, two_photon_data, linelist_atoms, linelist_molecules ([1mbase.py[0m:262)
2025-01-10T13:49:05.5089323Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:49:05.5089766Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:49:05.5089944Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5090165Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:49:05.5090329Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5090406Z 	
2025-01-10T13:49:05.5090559Z 	Starting iteration 1 of 5 ([1mbase.py[0m:444)
2025-01-10T13:49:05.5090727Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5090795Z 	
2025-01-10T13:49:05.5090895Z 	Luminosity emitted   = 8.104e+42 erg / s
2025-01-10T13:49:05.5090985Z 	Luminosity absorbed  = 2.674e+42 erg / s
2025-01-10T13:49:05.5091078Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5091186Z  ([1mbase.py[0m:657)
2025-01-10T13:49:05.5091343Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5091415Z 	
2025-01-10T13:49:05.5091562Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:49:05.5091725Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5091791Z 	
2025-01-10T13:49:05.5091903Z 	Shell No.    t_rad    next_t_rad    w   next_w
2025-01-10T13:49:05.5091988Z 	0         9.97e+03 K  1.01e+04 K   0.4   0.449
2025-01-10T13:49:05.5092075Z 	5         9.89e+03 K  1.01e+04 K 0.211   0.201
2025-01-10T13:49:05.5092160Z 	10        9.82e+03 K     1e+04 K 0.143   0.129
2025-01-10T13:49:05.5092245Z 	15        9.75e+03 K  9.85e+03 K 0.105  0.0953
2025-01-10T13:49:05.5092434Z  ([1mbase.py[0m:650)
2025-01-10T13:49:05.5092597Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5092663Z 	
2025-01-10T13:49:05.5092747Z 	Current t_inner = 9974.969 K
2025-01-10T13:49:05.5092867Z 	Expected t_inner for next iteration = 10736.783 K
2025-01-10T13:49:05.5092972Z  ([1mbase.py[0m:652)
2025-01-10T13:49:05.5093136Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5093201Z 	
2025-01-10T13:49:05.5093357Z 	Starting iteration 2 of 5 ([1mbase.py[0m:444)
2025-01-10T13:49:05.5093514Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5093587Z 	
2025-01-10T13:49:05.5093786Z 	Luminosity emitted   = 1.084e+43 erg / s
2025-01-10T13:49:05.5093881Z 	Luminosity absorbed  = 3.624e+42 erg / s
2025-01-10T13:49:05.5093969Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5094190Z  ([1mbase.py[0m:657)
2025-01-10T13:49:05.5094347Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5094421Z 	
2025-01-10T13:49:05.5094566Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:49:05.5094730Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5094797Z 	
2025-01-10T13:49:05.5094905Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:49:05.5094994Z 	0         1.01e+04 K  1.05e+04 K  0.449   0.481
2025-01-10T13:49:05.5095073Z 	5         1.01e+04 K  1.06e+04 K  0.201   0.202
2025-01-10T13:49:05.5095159Z 	10           1e+04 K  1.04e+04 K  0.129   0.127
2025-01-10T13:49:05.5095239Z 	15        9.85e+03 K  1.02e+04 K 0.0953  0.0935
2025-01-10T13:49:05.5095347Z  ([1mbase.py[0m:650)
2025-01-10T13:49:05.5095503Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5095573Z 	
2025-01-10T13:49:05.5095656Z 	Current t_inner = 10736.783 K
2025-01-10T13:49:05.5095773Z 	Expected t_inner for next iteration = 10718.619 K
2025-01-10T13:49:05.5095878Z  ([1mbase.py[0m:652)
2025-01-10T13:49:05.5096046Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5096117Z 	
2025-01-10T13:49:05.5096269Z 	Starting iteration 3 of 5 ([1mbase.py[0m:444)
2025-01-10T13:49:05.5096423Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5096493Z 	
2025-01-10T13:49:05.5096584Z 	Luminosity emitted   = 1.086e+43 erg / s
2025-01-10T13:49:05.5096679Z 	Luminosity absorbed  = 3.514e+42 erg / s
2025-01-10T13:49:05.5096775Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5096876Z  ([1mbase.py[0m:657)
2025-01-10T13:49:05.5097042Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5097261Z 	Iteration converged 1/4 consecutive times. ([1mbase.py[0m:260)
2025-01-10T13:49:05.5097428Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5097495Z 	
2025-01-10T13:49:05.5097645Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:49:05.5097805Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5097878Z 	
2025-01-10T13:49:05.5097984Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:49:05.5098074Z 	0         1.05e+04 K  1.07e+04 K  0.481   0.491
2025-01-10T13:49:05.5098156Z 	5         1.06e+04 K  1.09e+04 K  0.202   0.198
2025-01-10T13:49:05.5098243Z 	10        1.04e+04 K  1.07e+04 K  0.127   0.124
2025-01-10T13:49:05.5098322Z 	15        1.02e+04 K  1.04e+04 K 0.0935  0.0921
2025-01-10T13:49:05.5098430Z  ([1mbase.py[0m:650)
2025-01-10T13:49:05.5098592Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5098659Z 	
2025-01-10T13:49:05.5098747Z 	Current t_inner = 10718.619 K
2025-01-10T13:49:05.5098863Z 	Expected t_inner for next iteration = 10696.651 K
2025-01-10T13:49:05.5098968Z  ([1mbase.py[0m:652)
2025-01-10T13:49:05.5099123Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5099193Z 	
2025-01-10T13:49:05.5099341Z 	Starting iteration 4 of 5 ([1mbase.py[0m:444)
2025-01-10T13:49:05.5099504Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5099690Z 	
2025-01-10T13:49:05.5099787Z 	Luminosity emitted   = 1.082e+43 erg / s
2025-01-10T13:49:05.5099875Z 	Luminosity absorbed  = 3.437e+42 erg / s
2025-01-10T13:49:05.5099967Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5100070Z  ([1mbase.py[0m:657)
2025-01-10T13:49:05.5100230Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5100443Z 	Iteration converged 2/4 consecutive times. ([1mbase.py[0m:260)
2025-01-10T13:49:05.5100599Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5100669Z 	
2025-01-10T13:49:05.5100810Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:49:05.5100974Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5101039Z 	
2025-01-10T13:49:05.5101144Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:49:05.5101228Z 	0         1.07e+04 K  1.09e+04 K  0.491    0.49
2025-01-10T13:49:05.5101399Z 	5         1.09e+04 K   1.1e+04 K  0.198   0.193
2025-01-10T13:49:05.5101486Z 	10        1.07e+04 K  1.08e+04 K  0.124   0.122
2025-01-10T13:49:05.5101571Z 	15        1.04e+04 K  1.05e+04 K 0.0921  0.0902
2025-01-10T13:49:05.5101673Z  ([1mbase.py[0m:650)
2025-01-10T13:49:05.5101840Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5101905Z 	
2025-01-10T13:49:05.5101991Z 	Current t_inner = 10696.651 K
2025-01-10T13:49:05.5102111Z 	Expected t_inner for next iteration = 10684.004 K
2025-01-10T13:49:05.5102210Z  ([1mbase.py[0m:652)
2025-01-10T13:49:05.5102377Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5102443Z 	
2025-01-10T13:49:05.5102540Z 	Simulation finished in 4 iterations 
2025-01-10T13:49:05.5102621Z 	Simulation took 12.56 s
2025-01-10T13:49:05.5102724Z  ([1mbase.py[0m:542)
2025-01-10T13:49:05.5102880Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5102951Z 	
2025-01-10T13:49:05.5103104Z 	Starting iteration 5 of 5 ([1mbase.py[0m:444)
2025-01-10T13:49:05.5103265Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5103334Z 	
2025-01-10T13:49:05.5103430Z 	Luminosity emitted   = 1.074e+43 erg / s
2025-01-10T13:49:05.5103518Z 	Luminosity absorbed  = 3.447e+42 erg / s
2025-01-10T13:49:05.5103726Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5103830Z  ([1mbase.py[0m:657)
2025-01-10T13:49:05.5103997Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:49:05.5104002Z 
2025-01-10T13:49:05.5104006Z 
2025-01-10T13:49:05.5104257Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                [A
2025-01-10T13:49:05.5104263Z 
2025-01-10T13:49:05.5104483Z Packets:                                                                                   0/200000 [00:00<?, ?it/s][A
2025-01-10T13:49:05.5104488Z 
2025-01-10T13:49:05.5104745Z Packets:   ████▎                                                                           10668/200000 [00:00<00:01, 106671.20it/s][A
2025-01-10T13:49:05.5104761Z 
2025-01-10T13:49:05.5105006Z Packets:   ████████▋                                                                       21611/200000 [00:00<00:01, 108290.69it/s][A
2025-01-10T13:49:05.5105017Z 
2025-01-10T13:49:05.5105260Z Packets:   █████████████                                                                   32685/200000 [00:00<00:01, 109404.70it/s][A
2025-01-10T13:49:05.5105266Z 
2025-01-10T13:49:05.5105521Z Packets:   █████████████████▍                                                              43684/200000 [00:00<00:01, 109634.77it/s][A
2025-01-10T13:49:05.5105526Z 
2025-01-10T13:49:05.5105778Z Packets:   █████████████████████▉                                                          54756/200000 [00:00<00:01, 110022.92it/s][A
2025-01-10T13:49:05.5105784Z 
2025-01-10T13:49:05.5106049Z Packets:   ██████████████████████████▎                                                     65759/200000 [00:00<00:01, 109448.25it/s][A
2025-01-10T13:49:05.5106185Z 
2025-01-10T13:49:05.5106460Z Packets:   ██████████████████████████████▋                                                 76705/200000 [00:00<00:01, 109123.95it/s][A
2025-01-10T13:49:05.5106466Z 
2025-01-10T13:49:05.5106732Z Packets:   ███████████████████████████████████                                             87618/200000 [00:00<00:01, 108205.35it/s][A
2025-01-10T13:49:05.5106738Z 
2025-01-10T13:49:05.5107021Z Packets:   ███████████████████████████████████████▍                                        98604/200000 [00:00<00:00, 108713.72it/s][A
2025-01-10T13:49:05.5107026Z 
2025-01-10T13:49:05.5107309Z Packets:   ███████████████████████████████████████████▊                                    109568/200000 [00:01<00:00, 108997.38it/s][A
2025-01-10T13:49:05.5107319Z 
2025-01-10T13:49:05.5107603Z Packets:   ████████████████████████████████████████████████▏                               120491/200000 [00:01<00:00, 109066.95it/s][A
2025-01-10T13:49:05.5107740Z 
2025-01-10T13:49:05.5108040Z Packets:   ████████████████████████████████████████████████████▋                           131606/200000 [00:01<00:00, 109697.18it/s][A
2025-01-10T13:49:05.5108058Z 
2025-01-10T13:49:05.5108350Z Packets:   █████████████████████████████████████████████████████████                       142577/200000 [00:01<00:00, 109686.07it/s][A
2025-01-10T13:49:05.5108355Z 
2025-01-10T13:49:05.5108659Z Packets:   █████████████████████████████████████████████████████████████▍                  153713/200000 [00:01<00:00, 110187.59it/s][A
2025-01-10T13:49:05.5108664Z 
2025-01-10T13:49:05.5108974Z Packets:   █████████████████████████████████████████████████████████████████▉              164733/200000 [00:01<00:00, 110031.72it/s][A
2025-01-10T13:49:05.5108978Z 
2025-01-10T13:49:05.5109287Z Packets:   ██████████████████████████████████████████████████████████████████████▎         175737/200000 [00:01<00:00, 109732.15it/s][A
2025-01-10T13:49:05.5109307Z 
2025-01-10T13:49:05.5109630Z Packets:   ██████████████████████████████████████████████████████████████████████████▋     186711/200000 [00:01<00:00, 109620.79it/s][A
2025-01-10T13:49:05.5109649Z 
2025-01-10T13:49:05.5109963Z Packets:   ███████████████████████████████████████████████████████████████████████████████ 197674/200000 [00:01<00:00, 109613.24it/s][A
2025-01-10T13:49:05.5110118Z Iterations:                                                                                13/? [05:52<00:00, 12.16s/it]
2025-01-10T13:49:05.5110123Z 
2025-01-10T13:49:05.5110460Z Packets:   ███████████████████████████████████████████████████████████████████████████████▉199999/200000 [00:01<00:00, 109613.24it/s][A
2025-01-10T13:49:05.5110466Z 
2025-01-10T13:49:05.5110699Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
2025-01-10T13:49:05.5110705Z 
2025-01-10T13:49:05.5110944Z Packets:   ████▍                                                                           10962/200000 [00:00<00:01, 109413.76it/s][A
2025-01-10T13:49:05.5111047Z 
2025-01-10T13:49:05.5111292Z Packets:   ████████▊                                                                       21929/200000 [00:00<00:01, 109559.21it/s][A
2025-01-10T13:49:05.5111303Z 
2025-01-10T13:49:05.5111544Z Packets:   █████████████▏                                                                  32927/200000 [00:00<00:01, 109750.60it/s][A
2025-01-10T13:49:05.5111550Z 
2025-01-10T13:49:05.5111800Z Packets:   █████████████████▌                                                              43903/200000 [00:00<00:01, 109725.85it/s][A
2025-01-10T13:49:05.5111805Z 
2025-01-10T13:49:05.5112063Z Packets:   █████████████████████▉                                                          54876/200000 [00:00<00:01, 109436.75it/s][A
2025-01-10T13:49:05.5112069Z 
2025-01-10T13:49:05.5112336Z Packets:   ██████████████████████████▎                                                     65865/200000 [00:00<00:01, 109588.99it/s][A
2025-01-10T13:49:05.5112422Z 
2025-01-10T13:49:05.5112694Z Packets:   ██████████████████████████████▋                                                 76842/200000 [00:00<00:01, 109644.79it/s][A
2025-01-10T13:49:05.5112708Z 
2025-01-10T13:49:05.5112978Z Packets:   ███████████████████████████████████▏                                            87877/200000 [00:00<00:01, 109868.54it/s][A
2025-01-10T13:49:05.5112984Z 
2025-01-10T13:49:05.5113260Z Packets:   ███████████████████████████████████████▌                                        98864/200000 [00:00<00:00, 109777.12it/s][A
2025-01-10T13:49:05.5113265Z 
2025-01-10T13:49:05.5113550Z Packets:   ███████████████████████████████████████████▉                                    109917/200000 [00:01<00:00, 110007.81it/s][A
2025-01-10T13:49:05.5113561Z 
2025-01-10T13:49:05.5113967Z Packets:   ████████████████████████████████████████████████▎                               120918/200000 [00:01<00:00, 109977.08it/s][A
2025-01-10T13:49:05.5113986Z 
2025-01-10T13:49:05.5114284Z Packets:   ████████████████████████████████████████████████████▊                           131935/200000 [00:01<00:00, 110034.24it/s][A
2025-01-10T13:49:05.5114301Z 
2025-01-10T13:49:05.5114603Z Packets:   █████████████████████████████████████████████████████████▏                      142939/200000 [00:01<00:00, 110017.91it/s][A
2025-01-10T13:49:05.5114608Z 
2025-01-10T13:49:05.5114911Z Packets:   █████████████████████████████████████████████████████████████▌                  153941/200000 [00:01<00:00, 109950.67it/s][A
2025-01-10T13:49:05.5114917Z 
2025-01-10T13:49:05.5115225Z Packets:   █████████████████████████████████████████████████████████████████▉              164937/200000 [00:01<00:00, 109824.09it/s][A
2025-01-10T13:49:05.5115230Z 
2025-01-10T13:49:05.5115540Z Packets:   ██████████████████████████████████████████████████████████████████████▎         175920/200000 [00:01<00:00, 109502.80it/s][A
2025-01-10T13:49:05.5115545Z 
2025-01-10T13:49:05.5116012Z Packets:   ██████████████████████████████████████████████████████████████████████████▊     186953/200000 [00:01<00:00, 109750.12it/s][A
2025-01-10T13:49:05.5116130Z 
2025-01-10T13:49:05.5116456Z Packets:   ███████████████████████████████████████████████████████████████████████████████▏197933/200000 [00:01<00:00, 109763.38it/s][A
2025-01-10T13:49:05.5116610Z Iterations:                                                                                14/? [05:55<00:00,  9.43s/it]
2025-01-10T13:49:05.5116615Z 
2025-01-10T13:49:05.5116937Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 109763.38it/s][A
2025-01-10T13:49:05.5116942Z 
2025-01-10T13:49:05.5117172Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
2025-01-10T13:49:05.5117177Z 
2025-01-10T13:49:05.5117418Z Packets:   ████▍                                                                           10985/200000 [00:00<00:01, 109849.58it/s][A
2025-01-10T13:49:05.5117437Z 
2025-01-10T13:49:05.5117685Z Packets:   ████████▊                                                                       22030/200000 [00:00<00:01, 110197.73it/s][A
2025-01-10T13:49:05.5117696Z 
2025-01-10T13:49:05.5117940Z Packets:   █████████████▏                                                                  33052/200000 [00:00<00:01, 110207.59it/s][A
2025-01-10T13:49:05.5117946Z 
2025-01-10T13:49:05.5118198Z Packets:   █████████████████▋                                                              44073/200000 [00:00<00:01, 110125.14it/s][A
2025-01-10T13:49:05.5118204Z 
2025-01-10T13:49:05.5118457Z Packets:   ██████████████████████                                                          55086/200000 [00:00<00:01, 110060.35it/s][A
2025-01-10T13:49:05.5118462Z 
2025-01-10T13:49:05.5118725Z Packets:   ██████████████████████████▍                                                     66113/200000 [00:00<00:01, 110131.08it/s][A
2025-01-10T13:49:05.5118741Z 
2025-01-10T13:49:05.5119007Z Packets:   ██████████████████████████████▊                                                 77156/200000 [00:00<00:01, 110226.04it/s][A
2025-01-10T13:49:05.5119096Z 
2025-01-10T13:49:05.5119370Z Packets:   ███████████████████████████████████▎                                            88206/200000 [00:00<00:01, 110312.84it/s][A
2025-01-10T13:49:05.5119376Z 
2025-01-10T13:49:05.5119654Z Packets:   ███████████████████████████████████████▋                                        99270/200000 [00:00<00:00, 110409.28it/s][A
2025-01-10T13:49:05.5119659Z 
2025-01-10T13:49:05.5119943Z Packets:   ████████████████████████████████████████████▏                                   110395/200000 [00:01<00:00, 110668.56it/s][A
2025-01-10T13:49:05.5119955Z 
2025-01-10T13:49:05.5120243Z Packets:   ████████████████████████████████████████████████▌                               121493/200000 [00:01<00:00, 110762.93it/s][A
2025-01-10T13:49:05.5120248Z 
2025-01-10T13:49:05.5120629Z Packets:   █████████████████████████████████████████████████████                           132602/200000 [00:01<00:00, 110862.21it/s][A
2025-01-10T13:49:05.5120647Z 
2025-01-10T13:49:05.5120944Z Packets:   █████████████████████████████████████████████████████████▍                      143689/200000 [00:01<00:00, 110624.68it/s][A
2025-01-10T13:49:05.5120950Z 
2025-01-10T13:49:05.5121258Z Packets:   █████████████████████████████████████████████████████████████▉                  154778/200000 [00:01<00:00, 110704.09it/s][A
2025-01-10T13:49:05.5121264Z 
2025-01-10T13:49:05.5121574Z Packets:   ██████████████████████████████████████████████████████████████████▎             165849/200000 [00:01<00:00, 110507.18it/s][A
2025-01-10T13:49:05.5121579Z 
2025-01-10T13:49:05.5121887Z Packets:   ██████████████████████████████████████████████████████████████████████▊         176900/200000 [00:01<00:00, 110205.92it/s][A
2025-01-10T13:49:05.5121892Z 
2025-01-10T13:49:05.5122212Z Packets:   ███████████████████████████████████████████████████████████████████████████▏    187921/200000 [00:01<00:00, 109977.63it/s][A
2025-01-10T13:49:05.5122246Z 
2025-01-10T13:49:05.5122563Z Packets:   ███████████████████████████████████████████████████████████████████████████████▌198923/200000 [00:01<00:00, 109988.78it/s][A
2025-01-10T13:49:05.5122712Z Iterations:                                                                                15/? [05:58<00:00,  7.53s/it]
2025-01-10T13:49:05.5122716Z 
2025-01-10T13:49:05.5123036Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 109988.78it/s][A
2025-01-10T13:49:05.5123042Z 
2025-01-10T13:49:05.5123272Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
2025-01-10T13:49:05.5123277Z 
2025-01-10T13:49:05.5123517Z Packets:   ████▍                                                                           11000/200000 [00:00<00:01, 109578.18it/s][A
2025-01-10T13:49:05.5123535Z 
2025-01-10T13:49:05.5123928Z Packets:   ████████▊                                                                       22047/200000 [00:00<00:01, 110101.09it/s][A
2025-01-10T13:49:05.5124084Z 
2025-01-10T13:49:05.5124343Z Packets:   █████████████▎                                                                  33132/200000 [00:00<00:01, 110439.80it/s][A
2025-01-10T13:49:05.5124349Z 
2025-01-10T13:49:05.5124599Z Packets:   █████████████████▋                                                              44177/200000 [00:00<00:01, 109645.40it/s][A
2025-01-10T13:49:05.5124605Z 
2025-01-10T13:49:05.5124857Z Packets:   ██████████████████████                                                          55234/200000 [00:00<00:01, 109976.35it/s][A
2025-01-10T13:49:05.5124862Z 
2025-01-10T13:49:05.5125128Z Packets:   ██████████████████████████▍                                                     66233/200000 [00:00<00:01, 109980.39it/s][A
2025-01-10T13:49:05.5125241Z 
2025-01-10T13:49:05.5125515Z Packets:   ██████████████████████████████▉                                                 77259/200000 [00:00<00:01, 110071.12it/s][A
2025-01-10T13:49:05.5125531Z 
2025-01-10T13:49:05.5125803Z Packets:   ███████████████████████████████████▎                                            88293/200000 [00:00<00:01, 110156.45it/s][A
2025-01-10T13:49:05.5125809Z 
2025-01-10T13:49:05.5126085Z Packets:   ███████████████████████████████████████▋                                        99309/200000 [00:00<00:00, 109475.27it/s][A
2025-01-10T13:49:05.5126091Z 
2025-01-10T13:49:05.5126372Z Packets:   ████████████████████████████████████████████                                    110258/200000 [00:01<00:00, 109239.18it/s][A
2025-01-10T13:49:05.5126383Z 
2025-01-10T13:49:05.5126669Z Packets:   ████████████████████████████████████████████████▍                               121183/200000 [00:01<00:00, 108897.40it/s][A
2025-01-10T13:49:05.5126675Z 
2025-01-10T13:49:05.5126969Z Packets:   ████████████████████████████████████████████████████▊                           132074/200000 [00:01<00:00, 108814.76it/s][A
2025-01-10T13:49:05.5126997Z 
2025-01-10T13:49:05.5127294Z Packets:   █████████████████████████████████████████████████████████▏                      142963/200000 [00:01<00:00, 108836.07it/s][A
2025-01-10T13:49:05.5127300Z 
2025-01-10T13:49:05.5127603Z Packets:   █████████████████████████████████████████████████████████████▌                  153847/200000 [00:01<00:00, 108605.35it/s][A
2025-01-10T13:49:05.5127608Z 
2025-01-10T13:49:05.5127912Z Packets:   █████████████████████████████████████████████████████████████████▉              164738/200000 [00:01<00:00, 108696.79it/s][A
2025-01-10T13:49:05.5127919Z 
2025-01-10T13:49:05.5128230Z Packets:   ██████████████████████████████████████████████████████████████████████▎         175687/200000 [00:01<00:00, 108932.86it/s][A
2025-01-10T13:49:05.5128235Z 
2025-01-10T13:49:05.5128551Z Packets:   ██████████████████████████████████████████████████████████████████████████▋     186581/200000 [00:01<00:00, 108798.86it/s][A
2025-01-10T13:49:05.5128660Z 
2025-01-10T13:49:05.5128981Z Packets:   ██████████████████████████████████████████████████████████████████████████████▉ 197489/200000 [00:01<00:00, 108880.85it/s][A
2025-01-10T13:49:05.5129128Z Iterations:                                                                                16/? [06:01<00:00,  6.21s/it]
2025-01-10T13:49:05.5129133Z 
2025-01-10T13:49:05.5129454Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 108880.85it/s][A
2025-01-10T13:49:05.5129459Z 
2025-01-10T13:49:05.5129692Z Packets:                                                                                   0/500000 [00:00<?, ?it/s]                 [A
2025-01-10T13:49:05.5129698Z 
2025-01-10T13:49:05.5129937Z Packets:   █▋                                                                              10889/500000 [00:00<00:14, 34139.52it/s][A
2025-01-10T13:49:05.5130025Z 
2025-01-10T13:49:05.5130263Z Packets:   ██▎                                                                             14357/500000 [00:00<00:14, 34305.53it/s][A
2025-01-10T13:49:05.5130283Z 
2025-01-10T13:49:05.5130512Z Packets:   ██▊                                                                             17826/500000 [00:00<00:14, 34422.77it/s][A
2025-01-10T13:49:05.5130518Z 
2025-01-10T13:49:05.5130760Z Packets:   ███▍                                                                            21283/500000 [00:00<00:13, 34372.68it/s][A
2025-01-10T13:49:05.5130765Z 
2025-01-10T13:49:05.5130993Z Packets:   ███▉                                                                            24728/500000 [00:00<00:13, 34365.67it/s][A
2025-01-10T13:49:05.5130998Z 
2025-01-10T13:49:05.5131239Z Packets:   ████▌                                                                           28169/500000 [00:00<00:13, 34218.60it/s][A
2025-01-10T13:49:05.5131244Z 
2025-01-10T13:49:05.5131482Z Packets:   █████                                                                           31595/500000 [00:00<00:13, 34229.52it/s][A
2025-01-10T13:49:05.5131501Z 
2025-01-10T13:49:05.5131735Z Packets:   █████▌                                                                          35025/500000 [00:01<00:13, 34249.67it/s][A
2025-01-10T13:49:05.5131741Z 
2025-01-10T13:49:05.5131977Z Packets:   ██████▏                                                                         38477/500000 [00:01<00:13, 34329.47it/s][A
2025-01-10T13:49:05.5131982Z 
2025-01-10T13:49:05.5132211Z Packets:   ██████▋                                                                         41911/500000 [00:01<00:13, 33444.68it/s][A
2025-01-10T13:49:05.5132222Z 
2025-01-10T13:49:05.5132452Z Packets:   ███████▎                                                                        45444/500000 [00:01<00:13, 33996.45it/s][A
2025-01-10T13:49:05.5132458Z 
2025-01-10T13:49:05.5132699Z Packets:   ███████▊                                                                        48975/500000 [00:01<00:13, 34382.76it/s][A
2025-01-10T13:49:05.5132712Z 
2025-01-10T13:49:05.5133036Z Packets:   ████████▍                                                                       52510/500000 [00:01<00:12, 34664.45it/s][A
2025-01-10T13:49:05.5133041Z 
2025-01-10T13:49:05.5133281Z Packets:   ████████▉                                                                       55982/500000 [00:01<00:12, 34679.47it/s][A
2025-01-10T13:49:05.5133286Z 
2025-01-10T13:49:05.5133525Z Packets:   █████████▌                                                                      59484/500000 [00:01<00:12, 34780.13it/s][A
2025-01-10T13:49:05.5133531Z 
2025-01-10T13:49:05.5133882Z Packets:   ██████████                                                                      62985/500000 [00:01<00:12, 34848.15it/s][A
2025-01-10T13:49:05.5133888Z 
2025-01-10T13:49:05.5134134Z Packets:   ██████████▋                                                                     66512/500000 [00:01<00:12, 34972.46it/s][A
2025-01-10T13:49:05.5134254Z 
2025-01-10T13:49:05.5134499Z Packets:   ███████████▏                                                                    70011/500000 [00:02<00:12, 34776.05it/s][A
2025-01-10T13:49:05.5134519Z 
2025-01-10T13:49:05.5134756Z Packets:   ███████████▊                                                                    73490/500000 [00:02<00:12, 34635.09it/s][A
2025-01-10T13:49:05.5134762Z 
2025-01-10T13:49:05.5135008Z Packets:   ████████████▎                                                                   76955/500000 [00:02<00:12, 33399.95it/s][A
2025-01-10T13:49:05.5135013Z 
2025-01-10T13:49:05.5135251Z Packets:   ████████████▊                                                                   80377/500000 [00:02<00:12, 33633.87it/s][A
2025-01-10T13:49:05.5135256Z 
2025-01-10T13:49:05.5135501Z Packets:   █████████████▍                                                                  83789/500000 [00:02<00:12, 33775.61it/s][A
2025-01-10T13:49:05.5135506Z 
2025-01-10T13:49:05.5135761Z Packets:   █████████████▉                                                                  87184/500000 [00:02<00:12, 33825.39it/s][A
2025-01-10T13:49:05.5135776Z 
2025-01-10T13:49:05.5136020Z Packets:   ██████████████▍                                                                 90578/500000 [00:02<00:12, 33856.91it/s][A
2025-01-10T13:49:05.5136026Z 
2025-01-10T13:49:05.5136273Z Packets:   ███████████████                                                                 94006/500000 [00:02<00:11, 33973.76it/s][A
2025-01-10T13:49:05.5136278Z 
2025-01-10T13:49:05.5136522Z Packets:   ███████████████▌                                                                97406/500000 [00:02<00:11, 33835.54it/s][A
2025-01-10T13:49:05.5136533Z 
2025-01-10T13:49:05.5136783Z Packets:   ████████████████▏                                                               100791/500000 [00:02<00:11, 33737.66it/s][A
2025-01-10T13:49:05.5136788Z 
2025-01-10T13:49:05.5137044Z Packets:   ████████████████▋                                                               104214/500000 [00:03<00:11, 33882.67it/s][A
2025-01-10T13:49:05.5137067Z 
2025-01-10T13:49:05.5137314Z Packets:   █████████████████▏                                                              107633/500000 [00:03<00:11, 33972.47it/s][A
2025-01-10T13:49:05.5137319Z 
2025-01-10T13:49:05.5137572Z Packets:   █████████████████▊                                                              111031/500000 [00:03<00:11, 32887.27it/s][A
2025-01-10T13:49:05.5137578Z 
2025-01-10T13:49:05.5137832Z Packets:   ██████████████████▎                                                             114483/500000 [00:03<00:11, 33363.83it/s][A
2025-01-10T13:49:05.5137837Z 
2025-01-10T13:49:05.5138087Z Packets:   ██████████████████▊                                                             117911/500000 [00:03<00:11, 33631.47it/s][A
2025-01-10T13:49:05.5138092Z 
2025-01-10T13:49:05.5138347Z Packets:   ███████████████████▍                                                            121370/500000 [00:03<00:11, 33912.70it/s][A
2025-01-10T13:49:05.5138361Z 
2025-01-10T13:49:05.5138731Z Packets:   ███████████████████▉                                                            124853/500000 [00:03<00:10, 34185.16it/s][A
2025-01-10T13:49:05.5138736Z 
2025-01-10T13:49:05.5138994Z Packets:   ████████████████████▌                                                           128379/500000 [00:03<00:10, 34505.28it/s][A
2025-01-10T13:49:05.5139000Z 
2025-01-10T13:49:05.5139257Z Packets:   █████████████████████                                                           131853/500000 [00:03<00:10, 34574.86it/s][A
2025-01-10T13:49:05.5139263Z 
2025-01-10T13:49:05.5139511Z Packets:   █████████████████████▋                                                          135321/500000 [00:03<00:10, 34604.76it/s][A
2025-01-10T13:49:05.5139515Z 
2025-01-10T13:49:05.5139774Z Packets:   ██████████████████████▏                                                         138808/500000 [00:04<00:10, 34682.14it/s][A
2025-01-10T13:49:05.5139865Z 
2025-01-10T13:49:05.5140120Z Packets:   ██████████████████████▊                                                         142318/500000 [00:04<00:10, 34806.96it/s][A
2025-01-10T13:49:05.5140140Z 
2025-01-10T13:49:05.5140393Z Packets:   ███████████████████████▎                                                        145800/500000 [00:04<00:10, 33569.87it/s][A
2025-01-10T13:49:05.5140399Z 
2025-01-10T13:49:05.5140659Z Packets:   ███████████████████████▉                                                        149334/500000 [00:04<00:10, 34085.29it/s][A
2025-01-10T13:49:05.5140664Z 
2025-01-10T13:49:05.5140919Z Packets:   ████████████████████████▍                                                       152879/500000 [00:04<00:10, 34486.78it/s][A
2025-01-10T13:49:05.5140924Z 
2025-01-10T13:49:05.5141187Z Packets:   █████████████████████████                                                       156402/500000 [00:04<00:09, 34706.53it/s][A
2025-01-10T13:49:05.5141192Z 
2025-01-10T13:49:05.5141466Z Packets:   █████████████████████████▌                                                      159936/500000 [00:04<00:09, 34894.21it/s][A
2025-01-10T13:49:05.5141482Z 
2025-01-10T13:49:05.5141739Z Packets:   ██████████████████████████▏                                                     163429/500000 [00:04<00:09, 34841.60it/s][A
2025-01-10T13:49:05.5141745Z 
2025-01-10T13:49:05.5142008Z Packets:   ██████████████████████████▋                                                     166954/500000 [00:04<00:09, 34963.25it/s][A
2025-01-10T13:49:05.5142013Z 
2025-01-10T13:49:05.5142272Z Packets:   ███████████████████████████▎                                                    170525/500000 [00:04<00:09, 35183.65it/s][A
2025-01-10T13:49:05.5142282Z 
2025-01-10T13:49:05.5142539Z Packets:   ███████████████████████████▊                                                    174045/500000 [00:05<00:09, 35103.58it/s][A
2025-01-10T13:49:05.5142544Z 
2025-01-10T13:49:05.5142808Z Packets:   ████████████████████████████▍                                                   177557/500000 [00:05<00:09, 35037.29it/s][A
2025-01-10T13:49:05.5142924Z 
2025-01-10T13:49:05.5143188Z Packets:   ████████████████████████████▉                                                   181062/500000 [00:05<00:09, 33566.80it/s][A
2025-01-10T13:49:05.5143193Z 
2025-01-10T13:49:05.5143457Z Packets:   █████████████████████████████▌                                                  184521/500000 [00:05<00:09, 33859.78it/s][A
2025-01-10T13:49:05.5143462Z 
2025-01-10T13:49:05.5143838Z Packets:   ██████████████████████████████                                                  188026/500000 [00:05<00:09, 34206.67it/s][A
2025-01-10T13:49:05.5143843Z 
2025-01-10T13:49:05.5144108Z Packets:   ██████████████████████████████▋                                                 191552/500000 [00:05<00:08, 34516.18it/s][A
2025-01-10T13:49:05.5144114Z 
2025-01-10T13:49:05.5144384Z Packets:   ███████████████████████████████▏                                                195010/500000 [00:05<00:08, 34522.10it/s][A
2025-01-10T13:49:05.5144512Z 
2025-01-10T13:49:05.5144792Z Packets:   ███████████████████████████████▊                                                198519/500000 [00:05<00:08, 34690.49it/s][A
2025-01-10T13:49:05.5144804Z 
2025-01-10T13:49:05.5145067Z Packets:   ████████████████████████████████▎                                               201992/500000 [00:05<00:08, 34566.66it/s][A
2025-01-10T13:49:05.5145072Z 
2025-01-10T13:49:05.5145344Z Packets:   ████████████████████████████████▉                                               205482/500000 [00:05<00:08, 34664.88it/s][A
2025-01-10T13:49:05.5145349Z 
2025-01-10T13:49:05.5145617Z Packets:   █████████████████████████████████▍                                              208977/500000 [00:06<00:08, 34747.88it/s][A
2025-01-10T13:49:05.5145622Z 
2025-01-10T13:49:05.5145894Z Packets:   █████████████████████████████████▉                                              212474/500000 [00:06<00:08, 34810.78it/s][A
2025-01-10T13:49:05.5145910Z 
2025-01-10T13:49:05.5146184Z Packets:   ██████████████████████████████████▌                                             215956/500000 [00:06<00:08, 33574.01it/s][A
2025-01-10T13:49:05.5146199Z 
2025-01-10T13:49:05.5146468Z Packets:   ███████████████████████████████████                                             219412/500000 [00:06<00:08, 33853.43it/s][A
2025-01-10T13:49:05.5146473Z 
2025-01-10T13:49:05.5146746Z Packets:   ███████████████████████████████████▋                                            222859/500000 [00:06<00:08, 34034.67it/s][A
2025-01-10T13:49:05.5146751Z 
2025-01-10T13:49:05.5147020Z Packets:   ████████████████████████████████████▏                                           226351/500000 [00:06<00:07, 34292.59it/s][A
2025-01-10T13:49:05.5147031Z 
2025-01-10T13:49:05.5147297Z Packets:   ████████████████████████████████████▊                                           229801/500000 [00:06<00:07, 34354.18it/s][A
2025-01-10T13:49:05.5147302Z 
2025-01-10T13:49:05.5147590Z Packets:   █████████████████████████████████████▎                                          233347/500000 [00:06<00:07, 34682.65it/s][A
2025-01-10T13:49:05.5147707Z 
2025-01-10T13:49:05.5147982Z Packets:   █████████████████████████████████████▉                                          236850/500000 [00:06<00:07, 34782.38it/s][A
2025-01-10T13:49:05.5147987Z 
2025-01-10T13:49:05.5148261Z Packets:   ██████████████████████████████████████▍                                         240330/500000 [00:07<00:07, 34699.83it/s][A
2025-01-10T13:49:05.5148266Z 
2025-01-10T13:49:05.5148543Z Packets:   ███████████████████████████████████████                                         243814/500000 [00:07<00:07, 34737.68it/s][A
2025-01-10T13:49:05.5148548Z 
2025-01-10T13:49:05.5148821Z Packets:   ███████████████████████████████████████▌                                        247289/500000 [00:07<00:07, 34661.61it/s][A
2025-01-10T13:49:05.5148825Z 
2025-01-10T13:49:05.5149106Z Packets:   ████████████████████████████████████████                                        250771/500000 [00:07<00:07, 34707.48it/s][A
2025-01-10T13:49:05.5149202Z 
2025-01-10T13:49:05.5149479Z Packets:   ████████████████████████████████████████▋                                       254243/500000 [00:07<00:07, 33369.82it/s][A
2025-01-10T13:49:05.5149484Z 
2025-01-10T13:49:05.5149762Z Packets:   █████████████████████████████████████████▏                                      257728/500000 [00:07<00:07, 33797.95it/s][A
2025-01-10T13:49:05.5149768Z 
2025-01-10T13:49:05.5150047Z Packets:   █████████████████████████████████████████▊                                      261274/500000 [00:07<00:06, 34284.52it/s][A
2025-01-10T13:49:05.5150052Z 
2025-01-10T13:49:05.5150327Z Packets:   ██████████████████████████████████████████▎                                     264782/500000 [00:07<00:06, 34518.18it/s][A
2025-01-10T13:49:05.5150332Z 
2025-01-10T13:49:05.5150610Z Packets:   ██████████████████████████████████████████▉                                     268310/500000 [00:07<00:06, 34741.51it/s][A
2025-01-10T13:49:05.5150628Z 
2025-01-10T13:49:05.5150913Z Packets:   ███████████████████████████████████████████▍                                    271807/500000 [00:07<00:06, 34808.63it/s][A
2025-01-10T13:49:05.5150924Z 
2025-01-10T13:49:05.5151197Z Packets:   ████████████████████████████████████████████                                    275291/500000 [00:08<00:06, 34781.82it/s][A
2025-01-10T13:49:05.5151202Z 
2025-01-10T13:49:05.5151486Z Packets:   ████████████████████████████████████████████▌                                   278772/500000 [00:08<00:06, 34705.69it/s][A
2025-01-10T13:49:05.5151492Z 
2025-01-10T13:49:05.5151772Z Packets:   █████████████████████████████████████████████▏                                  282304/500000 [00:08<00:06, 34888.95it/s][A
2025-01-10T13:49:05.5151777Z 
2025-01-10T13:49:05.5152061Z Packets:   █████████████████████████████████████████████▋                                  285794/500000 [00:08<00:06, 34773.42it/s][A
2025-01-10T13:49:05.5152079Z 
2025-01-10T13:49:05.5152365Z Packets:   ██████████████████████████████████████████████▎                                 289273/500000 [00:08<00:06, 33296.38it/s][A
2025-01-10T13:49:05.5152455Z 
2025-01-10T13:49:05.5152741Z Packets:   ██████████████████████████████████████████████▊                                 292745/500000 [00:08<00:06, 33708.81it/s][A
2025-01-10T13:49:05.5152746Z 
2025-01-10T13:49:05.5153036Z Packets:   ███████████████████████████████████████████████▍                                296174/500000 [00:08<00:06, 33877.68it/s][A
2025-01-10T13:49:05.5153041Z 
2025-01-10T13:49:05.5153324Z Packets:   ███████████████████████████████████████████████▉                                299641/500000 [00:08<00:05, 34109.97it/s][A
2025-01-10T13:49:05.5153333Z 
2025-01-10T13:49:05.5153738Z Packets:   ████████████████████████████████████████████████▌                               303182/500000 [00:08<00:05, 34494.66it/s][A
2025-01-10T13:49:05.5153745Z 
2025-01-10T13:49:05.5154164Z Packets:   █████████████████████████████████████████████████                               306724/500000 [00:08<00:05, 34764.40it/s][A
2025-01-10T13:49:05.5154184Z 
2025-01-10T13:49:05.5154469Z Packets:   █████████████████████████████████████████████████▋                              310204/500000 [00:09<00:05, 34716.75it/s][A
2025-01-10T13:49:05.5154475Z 
2025-01-10T13:49:05.5154767Z Packets:   ██████████████████████████████████████████████████▏                             313679/500000 [00:09<00:05, 34708.11it/s][A
2025-01-10T13:49:05.5154772Z 
2025-01-10T13:49:05.5155061Z Packets:   ██████████████████████████████████████████████████▊                             317188/500000 [00:09<00:05, 34816.74it/s][A
2025-01-10T13:49:05.5155066Z 
2025-01-10T13:49:05.5155351Z Packets:   ███████████████████████████████████████████████████▎                            320677/500000 [00:09<00:05, 34837.02it/s][A
2025-01-10T13:49:05.5155356Z 
2025-01-10T13:49:05.5155646Z Packets:   ███████████████████████████████████████████████████▊                            324162/500000 [00:09<00:05, 33124.84it/s][A
2025-01-10T13:49:05.5155676Z 
2025-01-10T13:49:05.5155963Z Packets:   ████████████████████████████████████████████████████▍                           327617/500000 [00:09<00:05, 33536.14it/s][A
2025-01-10T13:49:05.5155974Z 
2025-01-10T13:49:05.5156257Z Packets:   ████████████████████████████████████████████████████▉                           331055/500000 [00:09<00:05, 33778.02it/s][A
2025-01-10T13:49:05.5156262Z 
2025-01-10T13:49:05.5156555Z Packets:   █████████████████████████████████████████████████████▌                          334568/500000 [00:09<00:04, 34174.44it/s][A
2025-01-10T13:49:05.5156561Z 
2025-01-10T13:49:05.5156846Z Packets:   ██████████████████████████████████████████████████████                          338070/500000 [00:09<00:04, 34423.00it/s][A
2025-01-10T13:49:05.5156851Z 
2025-01-10T13:49:05.5157144Z Packets:   ██████████████████████████████████████████████████████▋                         341552/500000 [00:09<00:04, 34540.38it/s][A
2025-01-10T13:49:05.5157240Z 
2025-01-10T13:49:05.5157668Z Packets:   ███████████████████████████████████████████████████████▏                        345067/500000 [00:10<00:04, 34719.37it/s][A
2025-01-10T13:49:05.5157674Z 
2025-01-10T13:49:05.5157964Z Packets:   ███████████████████████████████████████████████████████▊                        348543/500000 [00:10<00:04, 34622.41it/s][A
2025-01-10T13:49:05.5157969Z 
2025-01-10T13:49:05.5158261Z Packets:   ████████████████████████████████████████████████████████▎                       352017/500000 [00:10<00:04, 34653.16it/s][A
2025-01-10T13:49:05.5158267Z 
2025-01-10T13:49:05.5158557Z Packets:   ████████████████████████████████████████████████████████▉                       355525/500000 [00:10<00:04, 34778.80it/s][A
2025-01-10T13:49:05.5158567Z 
2025-01-10T13:49:05.5158859Z Packets:   █████████████████████████████████████████████████████████▍                      359005/500000 [00:10<00:04, 32977.56it/s][A
2025-01-10T13:49:05.5158878Z 
2025-01-10T13:49:05.5159175Z Packets:   █████████████████████████████████████████████████████████▉                      362445/500000 [00:10<00:04, 33381.44it/s][A
2025-01-10T13:49:05.5159194Z 
2025-01-10T13:49:05.5159488Z Packets:   ██████████████████████████████████████████████████████████▌                     365799/500000 [00:10<00:04, 33405.47it/s][A
2025-01-10T13:49:05.5159493Z 
2025-01-10T13:49:05.5159790Z Packets:   ███████████████████████████████████████████████████████████                     369373/500000 [00:10<00:03, 34088.10it/s][A
2025-01-10T13:49:05.5159795Z 
2025-01-10T13:49:05.5160091Z Packets:   ███████████████████████████████████████████████████████████▋                    372898/500000 [00:10<00:03, 34430.83it/s][A
2025-01-10T13:49:05.5160096Z 
2025-01-10T13:49:05.5160388Z Packets:   ████████████████████████████████████████████████████████████▏                   376393/500000 [00:10<00:03, 34582.67it/s][A
2025-01-10T13:49:05.5160393Z 
2025-01-10T13:49:05.5160708Z Packets:   ████████████████████████████████████████████████████████████▊                   379857/500000 [00:11<00:03, 34545.88it/s][A
2025-01-10T13:49:05.5160822Z 
2025-01-10T13:49:05.5161125Z Packets:   █████████████████████████████████████████████████████████████▎                  383316/500000 [00:11<00:03, 34507.62it/s][A
2025-01-10T13:49:05.5161130Z 
2025-01-10T13:49:05.5161435Z Packets:   █████████████████████████████████████████████████████████████▉                  386807/500000 [00:11<00:03, 34625.94it/s][A
2025-01-10T13:49:05.5161440Z 
2025-01-10T13:49:05.5161742Z Packets:   ██████████████████████████████████████████████████████████████▍                 390287/500000 [00:11<00:03, 34677.82it/s][A
2025-01-10T13:49:05.5161748Z 
2025-01-10T13:49:05.5162198Z Packets:   ███████████████████████████████████████████████████████████████                 393757/500000 [00:11<00:03, 33300.46it/s][A
2025-01-10T13:49:05.5162215Z 
2025-01-10T13:49:05.5162806Z Packets:   ███████████████████████████████████████████████████████████████▌                397259/500000 [00:11<00:03, 33799.46it/s][A
2025-01-10T13:49:05.5163001Z 
2025-01-10T13:49:05.5163745Z Packets:   ████████████████████████████████████████████████████████████████                400712/500000 [00:11<00:02, 34013.07it/s][A
2025-01-10T13:49:05.5163772Z 
2025-01-10T13:49:05.5164387Z Packets:   ████████████████████████████████████████████████████████████████▋               404181/500000 [00:11<00:02, 34212.53it/s][A
2025-01-10T13:49:05.5164402Z 
2025-01-10T13:49:05.5165017Z Packets:   █████████████████████████████████████████████████████████████████▏              407644/500000 [00:11<00:02, 34334.42it/s][A
2025-01-10T13:49:05.5165031Z 
2025-01-10T13:49:05.5165627Z Packets:   █████████████████████████████████████████████████████████████████▊              411145/500000 [00:11<00:02, 34534.78it/s][A
2025-01-10T13:49:05.5165640Z 
2025-01-10T13:49:05.5166243Z Packets:   ██████████████████████████████████████████████████████████████████▎             414634/500000 [00:12<00:02, 34639.79it/s][A
2025-01-10T13:49:05.5166283Z 
2025-01-10T13:49:05.5166905Z Packets:   ██████████████████████████████████████████████████████████████████▉             418135/500000 [00:12<00:02, 34749.04it/s][A
2025-01-10T13:49:05.5166917Z 
2025-01-10T13:49:05.5167522Z Packets:   ███████████████████████████████████████████████████████████████████▍            421646/500000 [00:12<00:02, 34850.02it/s][A
2025-01-10T13:49:05.5167536Z 
2025-01-10T13:49:05.5168151Z Packets:   ████████████████████████████████████████████████████████████████████            425168/500000 [00:12<00:02, 34960.25it/s][A
2025-01-10T13:49:05.5168164Z 
2025-01-10T13:49:05.5168768Z Packets:   ████████████████████████████████████████████████████████████████████▌           428665/500000 [00:12<00:02, 33102.96it/s][A
2025-01-10T13:49:05.5168785Z 
2025-01-10T13:49:05.5169242Z Packets:   █████████████████████████████████████████████████████████████████████▏          432145/500000 [00:12<00:02, 33591.45it/s][A
2025-01-10T13:49:05.5169468Z 
2025-01-10T13:49:05.5170124Z Packets:   █████████████████████████████████████████████████████████████████████▋          435651/500000 [00:12<00:01, 34012.62it/s][A
2025-01-10T13:49:05.5170315Z 
2025-01-10T13:49:05.5170906Z Packets:   ██████████████████████████████████████████████████████████████████████▎         439106/500000 [00:12<00:01, 34168.97it/s][A
2025-01-10T13:49:05.5170913Z 
2025-01-10T13:49:05.5171242Z Packets:   ██████████████████████████████████████████████████████████████████████▊         442615/500000 [00:12<00:01, 34439.46it/s][A
2025-01-10T13:49:05.5171248Z 
2025-01-10T13:49:05.5171568Z Packets:   ███████████████████████████████████████████████████████████████████████▎        446066/500000 [00:13<00:01, 34369.35it/s][A
2025-01-10T13:49:05.5171573Z 
2025-01-10T13:49:05.5171882Z Packets:   ███████████████████████████████████████████████████████████████████████▉        449523/500000 [00:13<00:01, 34427.79it/s][A
2025-01-10T13:49:05.5171887Z 
2025-01-10T13:49:05.5172220Z Packets:   ████████████████████████████████████████████████████████████████████████▍       453053/500000 [00:13<00:01, 34687.52it/s][A
2025-01-10T13:49:05.5172242Z 
2025-01-10T13:49:05.5172549Z Packets:   █████████████████████████████████████████████████████████████████████████       456565/500000 [00:13<00:01, 34816.47it/s][A
2025-01-10T13:49:05.5172560Z 
2025-01-10T13:49:05.5172867Z Packets:   █████████████████████████████████████████████████████████████████████████▌      460058/500000 [00:13<00:01, 34849.36it/s][A
2025-01-10T13:49:05.5172873Z 
2025-01-10T13:49:05.5173188Z Packets:   ██████████████████████████████████████████████████████████████████████████▏     463545/500000 [00:13<00:01, 34247.81it/s][A
2025-01-10T13:49:05.5173193Z 
2025-01-10T13:49:05.5173505Z Packets:   ██████████████████████████████████████████████████████████████████████████▋     466973/500000 [00:13<00:00, 33554.26it/s][A
2025-01-10T13:49:05.5173510Z 
2025-01-10T13:49:05.5173985Z Packets:   ███████████████████████████████████████████████████████████████████████████▎    470484/500000 [00:13<00:00, 34008.82it/s][A
2025-01-10T13:49:05.5174160Z 
2025-01-10T13:49:05.5174520Z Packets:   ███████████████████████████████████████████████████████████████████████████▊    473973/500000 [00:13<00:00, 34267.95it/s][A
2025-01-10T13:49:05.5174526Z 
2025-01-10T13:49:05.5174843Z Packets:   ████████████████████████████████████████████████████████████████████████████▍   477420/500000 [00:13<00:00, 34327.27it/s][A
2025-01-10T13:49:05.5174848Z 
2025-01-10T13:49:05.5175167Z Packets:   ████████████████████████████████████████████████████████████████████████████▉   480943/500000 [00:14<00:00, 34594.47it/s][A
2025-01-10T13:49:05.5175173Z 
2025-01-10T13:49:05.5175485Z Packets:   █████████████████████████████████████████████████████████████████████████████▌  484437/500000 [00:14<00:00, 34697.08it/s][A
2025-01-10T13:49:05.5175509Z 
2025-01-10T13:49:05.5175819Z Packets:   ██████████████████████████████████████████████████████████████████████████████  487922/500000 [00:14<00:00, 34741.86it/s][A
2025-01-10T13:49:05.5175947Z 
2025-01-10T13:49:05.5176287Z Packets:   ██████████████████████████████████████████████████████████████████████████████▋ 491455/500000 [00:14<00:00, 34914.80it/s][A
2025-01-10T13:49:05.5176293Z 
2025-01-10T13:49:05.5176612Z Packets:   ███████████████████████████████████████████████████████████████████████████████▏495005/500000 [00:14<00:00, 35089.28it/s][A
2025-01-10T13:49:05.5176617Z 
2025-01-10T13:49:05.5176937Z Packets:   ███████████████████████████████████████████████████████████████████████████████▊498526/500000 [00:14<00:00, 35124.72it/s][A
2025-01-10T13:49:05.5177093Z Iterations:                                                                                17/? [06:18<00:00,  9.32s/it]
2025-01-10T13:49:05.5177099Z 
2025-01-10T13:49:05.5177419Z Packets:   ████████████████████████████████████████████████████████████████████████████████500000/500000 [00:15<00:00, 35124.72it/s][A
2025-01-10T13:49:05.5177588Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5177764Z INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
2025-01-10T13:49:05.5178210Z 	Reading Atomic Data from /home/runner/work/tardis/tardis/tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
2025-01-10T13:49:05.5178597Z INFO     tardis.io.atom_data.base:base.py:258 Reading Atom Data with: UUID = 6f7b09e887a311e7a06b246e96350010 MD5  = 864f1753714343c41f99cb065710cace 
2025-01-10T13:49:05.5179039Z INFO     tardis.io.atom_data.base:base.py:262 Non provided Atomic Data: synpp_refs, photoionization_data, yg_data, two_photon_data, linelist_atoms, linelist_molecules
2025-01-10T13:49:05.5179735Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:49:05.5180038Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:49:05.5180294Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:49:05.5180383Z 	Starting iteration 1 of 5
2025-01-10T13:49:05.5180496Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:49:05.5180590Z 	Luminosity emitted   = 8.104e+42 erg / s
2025-01-10T13:49:05.5180685Z 	Luminosity absorbed  = 2.674e+42 erg / s
2025-01-10T13:49:05.5180773Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5180778Z 
2025-01-10T13:49:05.5180884Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:49:05.5180976Z 	Plasma stratification:
2025-01-10T13:49:05.5181078Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:49:05.5181189Z 	Shell No.    t_rad    next_t_rad    w   next_w
2025-01-10T13:49:05.5181275Z 	0         9.97e+03 K  1.01e+04 K   0.4   0.449
2025-01-10T13:49:05.5181360Z 	5         9.89e+03 K  1.01e+04 K 0.211   0.201
2025-01-10T13:49:05.5181441Z 	10        9.82e+03 K     1e+04 K 0.143   0.129
2025-01-10T13:49:05.5181530Z 	15        9.75e+03 K  9.85e+03 K 0.105  0.0953
2025-01-10T13:49:05.5181538Z 
2025-01-10T13:49:05.5181638Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:49:05.5181729Z 	Current t_inner = 9974.969 K
2025-01-10T13:49:05.5181848Z 	Expected t_inner for next iteration = 10736.783 K
2025-01-10T13:49:05.5181853Z 
2025-01-10T13:49:05.5181960Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:49:05.5182042Z 	Starting iteration 2 of 5
2025-01-10T13:49:05.5182148Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:49:05.5182244Z 	Luminosity emitted   = 1.084e+43 erg / s
2025-01-10T13:49:05.5182332Z 	Luminosity absorbed  = 3.624e+42 erg / s
2025-01-10T13:49:05.5182426Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5182430Z 
2025-01-10T13:49:05.5182529Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:49:05.5182616Z 	Plasma stratification:
2025-01-10T13:49:05.5182721Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:49:05.5182832Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:49:05.5182922Z 	0         1.01e+04 K  1.05e+04 K  0.449   0.481
2025-01-10T13:49:05.5183009Z 	5         1.01e+04 K  1.06e+04 K  0.201   0.202
2025-01-10T13:49:05.5183096Z 	10           1e+04 K  1.04e+04 K  0.129   0.127
2025-01-10T13:49:05.5183182Z 	15        9.85e+03 K  1.02e+04 K 0.0953  0.0935
2025-01-10T13:49:05.5183186Z 
2025-01-10T13:49:05.5183291Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:49:05.5183373Z 	Current t_inner = 10736.783 K
2025-01-10T13:49:05.5183493Z 	Expected t_inner for next iteration = 10718.619 K
2025-01-10T13:49:05.5183497Z 
2025-01-10T13:49:05.5183713Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:49:05.5183806Z 	Starting iteration 3 of 5
2025-01-10T13:49:05.5183908Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:49:05.5184003Z 	Luminosity emitted   = 1.086e+43 erg / s
2025-01-10T13:49:05.5184091Z 	Luminosity absorbed  = 3.514e+42 erg / s
2025-01-10T13:49:05.5184188Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5184192Z 
2025-01-10T13:49:05.5184418Z INFO     tardis.simulation.base:base.py:260 Iteration converged 1/4 consecutive times.
2025-01-10T13:49:05.5184649Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:49:05.5184737Z 	Plasma stratification:
2025-01-10T13:49:05.5184837Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:49:05.5184944Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:49:05.5185026Z 	0         1.05e+04 K  1.07e+04 K  0.481   0.491
2025-01-10T13:49:05.5185111Z 	5         1.06e+04 K  1.09e+04 K  0.202   0.198
2025-01-10T13:49:05.5185193Z 	10        1.04e+04 K  1.07e+04 K  0.127   0.124
2025-01-10T13:49:05.5185279Z 	15        1.02e+04 K  1.04e+04 K 0.0935  0.0921
2025-01-10T13:49:05.5185283Z 
2025-01-10T13:49:05.5185382Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:49:05.5185469Z 	Current t_inner = 10718.619 K
2025-01-10T13:49:05.5185580Z 	Expected t_inner for next iteration = 10696.651 K
2025-01-10T13:49:05.5185584Z 
2025-01-10T13:49:05.5185690Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:49:05.5185892Z 	Starting iteration 4 of 5
2025-01-10T13:49:05.5185998Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:49:05.5186096Z 	Luminosity emitted   = 1.082e+43 erg / s
2025-01-10T13:49:05.5186184Z 	Luminosity absorbed  = 3.437e+42 erg / s
2025-01-10T13:49:05.5186276Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5186280Z 
2025-01-10T13:49:05.5186505Z INFO     tardis.simulation.base:base.py:260 Iteration converged 2/4 consecutive times.
2025-01-10T13:49:05.5186612Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:49:05.5186695Z 	Plasma stratification:
2025-01-10T13:49:05.5186804Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:49:05.5186905Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:49:05.5186993Z 	0         1.07e+04 K  1.09e+04 K  0.491    0.49
2025-01-10T13:49:05.5187073Z 	5         1.09e+04 K   1.1e+04 K  0.198   0.193
2025-01-10T13:49:05.5187163Z 	10        1.07e+04 K  1.08e+04 K  0.124   0.122
2025-01-10T13:49:05.5187249Z 	15        1.04e+04 K  1.05e+04 K 0.0921  0.0902
2025-01-10T13:49:05.5187258Z 
2025-01-10T13:49:05.5187364Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:49:05.5187449Z 	Current t_inner = 10696.651 K
2025-01-10T13:49:05.5187562Z 	Expected t_inner for next iteration = 10684.004 K
2025-01-10T13:49:05.5187566Z 
2025-01-10T13:49:05.5187672Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:49:05.5187764Z 	Simulation finished in 4 iterations 
2025-01-10T13:49:05.5187851Z 	Simulation took 12.56 s
2025-01-10T13:49:05.5187855Z 
2025-01-10T13:49:05.5187954Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:49:05.5188041Z 	Starting iteration 5 of 5
2025-01-10T13:49:05.5188142Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:49:05.5188235Z 	Luminosity emitted   = 1.074e+43 erg / s
2025-01-10T13:49:05.5188322Z 	Luminosity absorbed  = 3.447e+42 erg / s
2025-01-10T13:49:05.5188415Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5188598Z ______________________ TestTransportSimple.test_spectrum _______________________
2025-01-10T13:49:05.5188606Z 
2025-01-10T13:49:05.5188825Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f3bf86746b0>
2025-01-10T13:49:05.5189025Z simulation = <tardis.simulation.base.Simulation object at 0x7f3be97d1f70>
2025-01-10T13:49:05.5189030Z 
2025-01-10T13:49:05.5189123Z     def test_spectrum(self, simulation):
2025-01-10T13:49:05.5189297Z         key = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:49:05.5189395Z         expected = self.get_expected_data(key)
2025-01-10T13:49:05.5189467Z     
2025-01-10T13:49:05.5189575Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5189648Z     
2025-01-10T13:49:05.5189732Z >       assert_quantity_allclose(
2025-01-10T13:49:05.5189904Z             simulation.spectrum_solver.spectrum_real_packets.luminosity,
2025-01-10T13:49:05.5189984Z             luminosity,
2025-01-10T13:49:05.5190052Z         )
2025-01-10T13:49:05.5190060Z 
2025-01-10T13:49:05.5190157Z tardis/tests/test_tardis_full.py:81: 
2025-01-10T13:49:05.5190272Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5190705Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5190795Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5190907Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5190912Z 
2025-01-10T13:49:05.5191377Z args = (<function assert_allclose.<locals>.compare at 0x7f3beae50220>, array([1.41445923e+39, 1.75365002e+39, 1.41304405e+39,...), array([1.47119190e+39, 1.69564189e+39, 1.35368464e+39, ...,
2025-01-10T13:49:05.5191487Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5191748Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5191753Z 
2025-01-10T13:49:05.5191903Z     @wraps(func)
2025-01-10T13:49:05.5191989Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5192075Z         with self._recreate_cm():
2025-01-10T13:49:05.5192166Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5192248Z E           AssertionError: 
2025-01-10T13:49:05.5192363Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5192432Z E           
2025-01-10T13:49:05.5192537Z E           Mismatched elements: 4832 / 10000 (48.3%)
2025-01-10T13:49:05.5192677Z E           Max absolute difference among violations: 1.38672909e+39
2025-01-10T13:49:05.5192808Z E           Max relative difference among violations: 5.17890748
2025-01-10T13:49:05.5192978Z E            ACTUAL: array([1.414459e+39, 1.753650e+39, 1.413044e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5193069Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5193241Z E            DESIRED: array([1.471192e+39, 1.695642e+39, 1.353685e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5193328Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5193333Z 
2025-01-10T13:49:05.5193540Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5193840Z __________________ TestTransportSimple.test_virtual_spectrum ___________________
2025-01-10T13:49:05.5193846Z 
2025-01-10T13:49:05.5194063Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f3bf86748f0>
2025-01-10T13:49:05.5194256Z simulation = <tardis.simulation.base.Simulation object at 0x7f3be97d1f70>
2025-01-10T13:49:05.5194267Z 
2025-01-10T13:49:05.5194374Z     def test_virtual_spectrum(self, simulation):
2025-01-10T13:49:05.5194553Z         key = "simulation/spectrum_solver/spectrum_virtual_packets/luminosity"
2025-01-10T13:49:05.5194652Z         expected = self.get_expected_data(key)
2025-01-10T13:49:05.5194723Z     
2025-01-10T13:49:05.5194827Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5194897Z     
2025-01-10T13:49:05.5194979Z >       assert_quantity_allclose(
2025-01-10T13:49:05.5195164Z             simulation.spectrum_solver.spectrum_virtual_packets.luminosity,
2025-01-10T13:49:05.5195242Z             luminosity,
2025-01-10T13:49:05.5195315Z         )
2025-01-10T13:49:05.5195319Z 
2025-01-10T13:49:05.5195413Z tardis/tests/test_tardis_full.py:92: 
2025-01-10T13:49:05.5195526Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5195856Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5195947Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5196058Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5196063Z 
2025-01-10T13:49:05.5196523Z args = (<function assert_allclose.<locals>.compare at 0x7f3bcd5c7c40>, array([1.45484259e+39, 1.36306291e+39, 1.38939833e+39,...), array([1.44033177e+39, 1.35611403e+39, 1.39755698e+39, ...,
2025-01-10T13:49:05.5196634Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5196884Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5197019Z 
2025-01-10T13:49:05.5197103Z     @wraps(func)
2025-01-10T13:49:05.5197184Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5197269Z         with self._recreate_cm():
2025-01-10T13:49:05.5197360Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5197441Z E           AssertionError: 
2025-01-10T13:49:05.5197548Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5197618Z E           
2025-01-10T13:49:05.5197720Z E           Mismatched elements: 5933 / 10000 (59.3%)
2025-01-10T13:49:05.5197857Z E           Max absolute difference among violations: 5.26760031e+38
2025-01-10T13:49:05.5197991Z E           Max relative difference among violations: 23978.84555943
2025-01-10T13:49:05.5198157Z E            ACTUAL: array([1.454843e+39, 1.363063e+39, 1.389398e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5198353Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5198521Z E            DESIRED: array([1.440332e+39, 1.356114e+39, 1.397557e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5198608Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5198613Z 
2025-01-10T13:49:05.5198806Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5199054Z ___ TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-downbranch] ____
2025-01-10T13:49:05.5199059Z 
2025-01-10T13:49:05.5199384Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf8675250>
2025-01-10T13:49:05.5199576Z simulation = <tardis.simulation.base.Simulation object at 0x7f3be8719010>
2025-01-10T13:49:05.5199782Z request = <FixtureRequest for <Function test_j_blue_estimators[-1-downbranch]>>
2025-01-10T13:49:05.5199787Z 
2025-01-10T13:49:05.5199916Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:49:05.5200030Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5200111Z         j_blue_estimator = (
2025-01-10T13:49:05.5200330Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:49:05.5200402Z         )
2025-01-10T13:49:05.5200545Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:49:05.5200668Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:49:05.5200672Z 
2025-01-10T13:49:05.5200803Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:49:05.5200918Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5200922Z 
2025-01-10T13:49:05.5201184Z args = (<function assert_allclose.<locals>.compare at 0x7f3bbdfd4040>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5201262Z        [0., 0., .....,
2025-01-10T13:49:05.5201338Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5201420Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5201497Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:49:05.5201753Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5201758Z 
2025-01-10T13:49:05.5201839Z     @wraps(func)
2025-01-10T13:49:05.5201919Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5202007Z         with self._recreate_cm():
2025-01-10T13:49:05.5202095Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5202181Z E           AssertionError: 
2025-01-10T13:49:05.5202285Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5202359Z E           
2025-01-10T13:49:05.5202463Z E           Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:49:05.5202606Z E           Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:49:05.5202732Z E           Max relative difference among violations: 8.35741234
2025-01-10T13:49:05.5202843Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5202929Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5203125Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5203235Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5203320Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5203406Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5203410Z 
2025-01-10T13:49:05.5203783Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5204045Z ________ TestTransportSimpleFormalIntegral.test_spectrum[-1-downbranch] ________
2025-01-10T13:49:05.5204052Z 
2025-01-10T13:49:05.5204373Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf8675880>
2025-01-10T13:49:05.5204571Z simulation = <tardis.simulation.base.Simulation object at 0x7f3be8719010>
2025-01-10T13:49:05.5204870Z request = <FixtureRequest for <Function test_spectrum[-1-downbranch]>>
2025-01-10T13:49:05.5204885Z 
2025-01-10T13:49:05.5204990Z     def test_spectrum(self, simulation, request):
2025-01-10T13:49:05.5205097Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5205293Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:49:05.5205454Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:49:05.5205553Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5205675Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:49:05.5205680Z 
2025-01-10T13:49:05.5205809Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:49:05.5205921Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5206250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5206347Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5206459Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5206467Z 
2025-01-10T13:49:05.5206931Z args = (<function assert_allclose.<locals>.compare at 0x7f3bda9127a0>, array([2.01862731e+39, 1.44100026e+39, 1.28363764e+39,...), array([2.16554068e+39, 1.29492551e+39, 1.28560928e+39, ...,
2025-01-10T13:49:05.5207040Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5207293Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5207298Z 
2025-01-10T13:49:05.5207374Z     @wraps(func)
2025-01-10T13:49:05.5207455Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5207542Z         with self._recreate_cm():
2025-01-10T13:49:05.5207628Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5207715Z E           AssertionError: 
2025-01-10T13:49:05.5207823Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5207895Z E           
2025-01-10T13:49:05.5207996Z E           Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:49:05.5208133Z E           Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:49:05.5208264Z E           Max relative difference among violations: 5.83764686
2025-01-10T13:49:05.5208430Z E            ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5208520Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5208685Z E            DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5208776Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5208780Z 
2025-01-10T13:49:05.5208978Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5209212Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-downbranch] ___
2025-01-10T13:49:05.5209217Z 
2025-01-10T13:49:05.5209545Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf8676000>
2025-01-10T13:49:05.5209854Z simulation = <tardis.simulation.base.Simulation object at 0x7f3be8719010>
2025-01-10T13:49:05.5210064Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-downbranch]>>
2025-01-10T13:49:05.5210070Z 
2025-01-10T13:49:05.5210205Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:49:05.5210313Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5210498Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:49:05.5210661Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:49:05.5210766Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5210880Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:49:05.5210884Z 
2025-01-10T13:49:05.5211017Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:49:05.5211203Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5211543Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5211629Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5211741Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5211745Z 
2025-01-10T13:49:05.5212202Z args = (<function assert_allclose.<locals>.compare at 0x7f3bbdfd7b00>, array([1.54178275e+39, 1.54564497e+39, 1.54031038e+39,...), array([1.55114238e+39, 1.55522613e+39, 1.54887955e+39, ...,
2025-01-10T13:49:05.5212309Z        2.25671263e+31, 2.27943572e+31, 2.24394350e+31]))
2025-01-10T13:49:05.5212567Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5212572Z 
2025-01-10T13:49:05.5212642Z     @wraps(func)
2025-01-10T13:49:05.5212727Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5212814Z         with self._recreate_cm():
2025-01-10T13:49:05.5212907Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5212987Z E           AssertionError: 
2025-01-10T13:49:05.5213094Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5213162Z E           
2025-01-10T13:49:05.5213263Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:49:05.5213399Z E           Max absolute difference among violations: 5.00661745e+37
2025-01-10T13:49:05.5213531Z E           Max relative difference among violations: 6.79985816
2025-01-10T13:49:05.5213846Z E            ACTUAL: array([1.541783e+39, 1.545645e+39, 1.540310e+39, ..., 2.274707e+31,
2025-01-10T13:49:05.5213931Z E                  2.292907e+31, 2.257206e+31])
2025-01-10T13:49:05.5214102Z E            DESIRED: array([1.551142e+39, 1.555226e+39, 1.548880e+39, ..., 2.256713e+31,
2025-01-10T13:49:05.5214183Z E                  2.279436e+31, 2.243943e+31])
2025-01-10T13:49:05.5214194Z 
2025-01-10T13:49:05.5214394Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5214550Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:49:05.5214555Z 
2025-01-10T13:49:05.5214558Z 
2025-01-10T13:49:05.5214943Z Packets:   ████████████████████████████████████████████████████████████████████████████████100000/100000 [00:14<00:00, 111051.64it/s][A
2025-01-10T13:49:05.5215173Z ____ TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-macroatom] ____
2025-01-10T13:49:05.5215178Z 
2025-01-10T13:49:05.5215500Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf8675a60>
2025-01-10T13:49:05.5215696Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bcbae6030>
2025-01-10T13:49:05.5215890Z request = <FixtureRequest for <Function test_j_blue_estimators[-1-macroatom]>>
2025-01-10T13:49:05.5215894Z 
2025-01-10T13:49:05.5216022Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:49:05.5216133Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5216345Z         j_blue_estimator = (
2025-01-10T13:49:05.5216560Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:49:05.5216634Z         )
2025-01-10T13:49:05.5216779Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:49:05.5216902Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:49:05.5216907Z 
2025-01-10T13:49:05.5217039Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:49:05.5217147Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5217152Z 
2025-01-10T13:49:05.5217416Z args = (<function assert_allclose.<locals>.compare at 0x7f3bd04cb7e0>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5217487Z        [0., 0., .....,
2025-01-10T13:49:05.5217566Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5217768Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5217848Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:49:05.5218101Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5218111Z 
2025-01-10T13:49:05.5218183Z     @wraps(func)
2025-01-10T13:49:05.5218265Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5218346Z         with self._recreate_cm():
2025-01-10T13:49:05.5218434Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5218514Z E           AssertionError: 
2025-01-10T13:49:05.5218619Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5218688Z E           
2025-01-10T13:49:05.5218797Z E           Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:49:05.5218931Z E           Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:49:05.5219058Z E           Max relative difference among violations: 4.08461732
2025-01-10T13:49:05.5219162Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5219254Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5219339Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5219448Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5219535Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5219618Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5219622Z 
2025-01-10T13:49:05.5219823Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5220042Z ________ TestTransportSimpleFormalIntegral.test_spectrum[-1-macroatom] _________
2025-01-10T13:49:05.5220047Z 
2025-01-10T13:49:05.5220370Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf86761b0>
2025-01-10T13:49:05.5220562Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bcbae6030>
2025-01-10T13:49:05.5220739Z request = <FixtureRequest for <Function test_spectrum[-1-macroatom]>>
2025-01-10T13:49:05.5220747Z 
2025-01-10T13:49:05.5220860Z     def test_spectrum(self, simulation, request):
2025-01-10T13:49:05.5220962Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5221161Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:49:05.5221315Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:49:05.5221419Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5221534Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:49:05.5221538Z 
2025-01-10T13:49:05.5221671Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:49:05.5221778Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5222110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5222201Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5222312Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5222403Z 
2025-01-10T13:49:05.5222868Z args = (<function assert_allclose.<locals>.compare at 0x7f3be2cdb4c0>, array([1.74566518e+39, 1.44733560e+39, 1.29388426e+39,...), array([1.74559473e+39, 1.44727718e+39, 1.29383198e+39, ...,
2025-01-10T13:49:05.5222969Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5223224Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5223228Z 
2025-01-10T13:49:05.5223300Z     @wraps(func)
2025-01-10T13:49:05.5223386Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5223471Z         with self._recreate_cm():
2025-01-10T13:49:05.5223559Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5224073Z E           AssertionError: 
2025-01-10T13:49:05.5224271Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5224499Z E           
2025-01-10T13:49:05.5224670Z E           Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:49:05.5224858Z E           Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:49:05.5225090Z E           Max relative difference among violations: 3.08310014
2025-01-10T13:49:05.5225305Z E            ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5225456Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5225655Z E            DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5225821Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5225826Z 
2025-01-10T13:49:05.5226118Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5226392Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-macroatom] ___
2025-01-10T13:49:05.5226397Z 
2025-01-10T13:49:05.5226785Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf86767e0>
2025-01-10T13:49:05.5227015Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bcbae6030>
2025-01-10T13:49:05.5227296Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-macroatom]>>
2025-01-10T13:49:05.5227300Z 
2025-01-10T13:49:05.5227450Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:49:05.5227676Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5227894Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:49:05.5237933Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:49:05.5238076Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5238202Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:49:05.5238208Z 
2025-01-10T13:49:05.5238355Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:49:05.5238486Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5238859Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5238952Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5239070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5239075Z 
2025-01-10T13:49:05.5239544Z args = (<function assert_allclose.<locals>.compare at 0x7f3bda603060>, array([1.54634964e+39, 1.55739996e+39, 1.54657082e+39,...), array([1.54556181e+39, 1.55660766e+39, 1.54591210e+39, ...,
2025-01-10T13:49:05.5239658Z        1.35260736e+31, 1.33049749e+31, 1.29446216e+31]))
2025-01-10T13:49:05.5239921Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5239926Z 
2025-01-10T13:49:05.5239999Z     @wraps(func)
2025-01-10T13:49:05.5240091Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5240174Z         with self._recreate_cm():
2025-01-10T13:49:05.5240436Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5240522Z E           AssertionError: 
2025-01-10T13:49:05.5240640Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5240709Z E           
2025-01-10T13:49:05.5240812Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:49:05.5240952Z E           Max absolute difference among violations: 2.90101642e+37
2025-01-10T13:49:05.5241085Z E           Max relative difference among violations: 96.4428449
2025-01-10T13:49:05.5241259Z E            ACTUAL: array([1.546350e+39, 1.557400e+39, 1.546571e+39, ..., 1.400403e+31,
2025-01-10T13:49:05.5241347Z E                  1.375141e+31, 1.337928e+31])
2025-01-10T13:49:05.5241519Z E            DESIRED: array([1.545562e+39, 1.556608e+39, 1.545912e+39, ..., 1.352607e+31,
2025-01-10T13:49:05.5241602Z E                  1.330497e+31, 1.294462e+31])
2025-01-10T13:49:05.5241712Z 
2025-01-10T13:49:05.5241932Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5242176Z ____ TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-macroatom] ____
2025-01-10T13:49:05.5242181Z 
2025-01-10T13:49:05.5242518Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf8675d00>
2025-01-10T13:49:05.5242715Z simulation = <tardis.simulation.base.Simulation object at 0x7f3beae3dc10>
2025-01-10T13:49:05.5242916Z request = <FixtureRequest for <Function test_j_blue_estimators[30-macroatom]>>
2025-01-10T13:49:05.5242920Z 
2025-01-10T13:49:05.5243054Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:49:05.5243163Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5243253Z         j_blue_estimator = (
2025-01-10T13:49:05.5243472Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:49:05.5243549Z         )
2025-01-10T13:49:05.5243823Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:49:05.5243953Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:49:05.5243958Z 
2025-01-10T13:49:05.5244093Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:49:05.5244215Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5244218Z 
2025-01-10T13:49:05.5244493Z args = (<function assert_allclose.<locals>.compare at 0x7f3becce5120>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5244565Z        [0., 0., .....,
2025-01-10T13:49:05.5244648Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5244721Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5244801Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:49:05.5245057Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5245062Z 
2025-01-10T13:49:05.5245144Z     @wraps(func)
2025-01-10T13:49:05.5245226Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5245316Z         with self._recreate_cm():
2025-01-10T13:49:05.5245409Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5245497Z E           AssertionError: 
2025-01-10T13:49:05.5245601Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5245675Z E           
2025-01-10T13:49:05.5245789Z E           Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:49:05.5245928Z E           Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:49:05.5246059Z E           Max relative difference among violations: 4.08461732
2025-01-10T13:49:05.5246162Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5246251Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5246337Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5246444Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5246530Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5246767Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5246772Z 
2025-01-10T13:49:05.5246974Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5247198Z ________ TestTransportSimpleFormalIntegral.test_spectrum[30-macroatom] _________
2025-01-10T13:49:05.5247202Z 
2025-01-10T13:49:05.5247529Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf86763f0>
2025-01-10T13:49:05.5247726Z simulation = <tardis.simulation.base.Simulation object at 0x7f3beae3dc10>
2025-01-10T13:49:05.5247904Z request = <FixtureRequest for <Function test_spectrum[30-macroatom]>>
2025-01-10T13:49:05.5247909Z 
2025-01-10T13:49:05.5248016Z     def test_spectrum(self, simulation, request):
2025-01-10T13:49:05.5248121Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5248314Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:49:05.5248579Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:49:05.5248683Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5248803Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:49:05.5248808Z 
2025-01-10T13:49:05.5248943Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:49:05.5249051Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5249388Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5249475Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5249586Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5249590Z 
2025-01-10T13:49:05.5250053Z args = (<function assert_allclose.<locals>.compare at 0x7f3becce71a0>, array([1.74566518e+39, 1.44733560e+39, 1.29388426e+39,...), array([1.74559473e+39, 1.44727718e+39, 1.29383198e+39, ...,
2025-01-10T13:49:05.5250168Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5250425Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5250430Z 
2025-01-10T13:49:05.5250502Z     @wraps(func)
2025-01-10T13:49:05.5250588Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5250671Z         with self._recreate_cm():
2025-01-10T13:49:05.5250761Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5250842Z E           AssertionError: 
2025-01-10T13:49:05.5250951Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5251020Z E           
2025-01-10T13:49:05.5251121Z E           Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:49:05.5251255Z E           Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:49:05.5251386Z E           Max relative difference among violations: 3.08310014
2025-01-10T13:49:05.5251557Z E            ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5251654Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5251823Z E            DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5251906Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5251910Z 
2025-01-10T13:49:05.5252111Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5252339Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-macroatom] ___
2025-01-10T13:49:05.5252344Z 
2025-01-10T13:49:05.5252670Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf86769f0>
2025-01-10T13:49:05.5252862Z simulation = <tardis.simulation.base.Simulation object at 0x7f3beae3dc10>
2025-01-10T13:49:05.5253067Z request = <FixtureRequest for <Function test_spectrum_integrated[30-macroatom]>>
2025-01-10T13:49:05.5253075Z 
2025-01-10T13:49:05.5253217Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:49:05.5253403Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5253721Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:49:05.5253883Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:49:05.5253990Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5254105Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:49:05.5254109Z 
2025-01-10T13:49:05.5254245Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:49:05.5254353Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5254684Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5254777Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5254998Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5255008Z 
2025-01-10T13:49:05.5255471Z args = (<function assert_allclose.<locals>.compare at 0x7f3c02ea25c0>, array([1.54506418e+39, 1.55336544e+39, 1.54364274e+39,...), array([1.54421084e+39, 1.55253343e+39, 1.54295780e+39, ...,
2025-01-10T13:49:05.5255578Z        1.27325829e+31, 1.26097974e+31, 1.22258748e+31]))
2025-01-10T13:49:05.5255837Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5255842Z 
2025-01-10T13:49:05.5255912Z     @wraps(func)
2025-01-10T13:49:05.5255998Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5256079Z         with self._recreate_cm():
2025-01-10T13:49:05.5256169Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5256257Z E           AssertionError: 
2025-01-10T13:49:05.5256360Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5256438Z E           
2025-01-10T13:49:05.5256532Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:49:05.5256674Z E           Max absolute difference among violations: 2.99183385e+37
2025-01-10T13:49:05.5256804Z E           Max relative difference among violations: 98.22574798
2025-01-10T13:49:05.5256975Z E            ACTUAL: array([1.545064e+39, 1.553365e+39, 1.543643e+39, ..., 1.222961e+31,
2025-01-10T13:49:05.5257060Z E                  1.193005e+31, 1.164854e+31])
2025-01-10T13:49:05.5257235Z E            DESIRED: array([1.544211e+39, 1.552533e+39, 1.542958e+39, ..., 1.273258e+31,
2025-01-10T13:49:05.5257317Z E                  1.260980e+31, 1.222587e+31])
2025-01-10T13:49:05.5257321Z 
2025-01-10T13:49:05.5257521Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5257681Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:49:05.5257686Z 
2025-01-10T13:49:05.5257689Z 
2025-01-10T13:49:05.5258103Z Packets:   ████████████████████████████████████████████████████████████████████████████████100000/100000 [00:11<00:00, 108794.38it/s][A
2025-01-10T13:49:05.5258345Z ___ TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-downbranch] ____
2025-01-10T13:49:05.5258351Z 
2025-01-10T13:49:05.5258671Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf8675c10>
2025-01-10T13:49:05.5258872Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bebe5a9c0>
2025-01-10T13:49:05.5259069Z request = <FixtureRequest for <Function test_j_blue_estimators[30-downbranch]>>
2025-01-10T13:49:05.5259079Z 
2025-01-10T13:49:05.5259208Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:49:05.5259319Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5259400Z         j_blue_estimator = (
2025-01-10T13:49:05.5259624Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:49:05.5259700Z         )
2025-01-10T13:49:05.5259849Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:49:05.5260088Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:49:05.5260093Z 
2025-01-10T13:49:05.5260228Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:49:05.5260342Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5260355Z 
2025-01-10T13:49:05.5260627Z args = (<function assert_allclose.<locals>.compare at 0x7f3be2cdae80>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5260703Z        [0., 0., .....,
2025-01-10T13:49:05.5260779Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5260856Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5260931Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:49:05.5261192Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5261280Z 
2025-01-10T13:49:05.5261353Z     @wraps(func)
2025-01-10T13:49:05.5261440Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5261526Z         with self._recreate_cm():
2025-01-10T13:49:05.5261618Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5261699Z E           AssertionError: 
2025-01-10T13:49:05.5261810Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5261882Z E           
2025-01-10T13:49:05.5261987Z E           Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:49:05.5262129Z E           Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:49:05.5262255Z E           Max relative difference among violations: 8.35741234
2025-01-10T13:49:05.5262362Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5262447Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5262537Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5262642Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5262733Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.5262818Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.5262822Z 
2025-01-10T13:49:05.5263028Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5263244Z ________ TestTransportSimpleFormalIntegral.test_spectrum[30-downbranch] ________
2025-01-10T13:49:05.5263254Z 
2025-01-10T13:49:05.5263572Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf8676330>
2025-01-10T13:49:05.5263879Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bebe5a9c0>
2025-01-10T13:49:05.5264058Z request = <FixtureRequest for <Function test_spectrum[30-downbranch]>>
2025-01-10T13:49:05.5264063Z 
2025-01-10T13:49:05.5264174Z     def test_spectrum(self, simulation, request):
2025-01-10T13:49:05.5264274Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5264469Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:49:05.5264630Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:49:05.5264735Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5264858Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:49:05.5264862Z 
2025-01-10T13:49:05.5264989Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:49:05.5265102Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5265437Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5265534Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5265640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5265644Z 
2025-01-10T13:49:05.5266116Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc658a700>, array([2.01862731e+39, 1.44100026e+39, 1.28363764e+39,...), array([2.16554068e+39, 1.29492551e+39, 1.28560928e+39, ...,
2025-01-10T13:49:05.5266339Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5266595Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5266599Z 
2025-01-10T13:49:05.5266676Z     @wraps(func)
2025-01-10T13:49:05.5266758Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5266845Z         with self._recreate_cm():
2025-01-10T13:49:05.5266928Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5267013Z E           AssertionError: 
2025-01-10T13:49:05.5267115Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5267189Z E           
2025-01-10T13:49:05.5267284Z E           Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:49:05.5267424Z E           Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:49:05.5267548Z E           Max relative difference among violations: 5.83764686
2025-01-10T13:49:05.5267843Z E            ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5267942Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5268111Z E            DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.5268199Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5268202Z 
2025-01-10T13:49:05.5268398Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5268632Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-downbranch] ___
2025-01-10T13:49:05.5268637Z 
2025-01-10T13:49:05.5268956Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f3bf8676930>
2025-01-10T13:49:05.5269153Z simulation = <tardis.simulation.base.Simulation object at 0x7f3bebe5a9c0>
2025-01-10T13:49:05.5269356Z request = <FixtureRequest for <Function test_spectrum_integrated[30-downbranch]>>
2025-01-10T13:49:05.5269370Z 
2025-01-10T13:49:05.5269506Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:49:05.5269620Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5269808Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:49:05.5269967Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:49:05.5270067Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:49:05.5270187Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:49:05.5270192Z 
2025-01-10T13:49:05.5270320Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:49:05.5270433Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5270762Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:49:05.5270854Z     np.testing.assert_allclose(
2025-01-10T13:49:05.5270968Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5270975Z 
2025-01-10T13:49:05.5271432Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc6589300>, array([1.54059874e+39, 1.54119479e+39, 1.53707604e+39,...), array([1.54917411e+39, 1.55043938e+39, 1.54507053e+39, ...,
2025-01-10T13:49:05.5271544Z        2.08252810e+31, 2.08867593e+31, 2.06027793e+31]))
2025-01-10T13:49:05.5271793Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5271798Z 
2025-01-10T13:49:05.5271877Z     @wraps(func)
2025-01-10T13:49:05.5271957Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5272043Z         with self._recreate_cm():
2025-01-10T13:49:05.5272127Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5272213Z E           AssertionError: 
2025-01-10T13:49:05.5272321Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5272394Z E           
2025-01-10T13:49:05.5272494Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:49:05.5272718Z E           Max absolute difference among violations: 5.0153284e+37
2025-01-10T13:49:05.5272849Z E           Max relative difference among violations: 5.96359613
2025-01-10T13:49:05.5273010Z E            ACTUAL: array([1.540599e+39, 1.541195e+39, 1.537076e+39, ..., 2.120497e+31,
2025-01-10T13:49:05.5273098Z E                  2.124305e+31, 2.101081e+31])
2025-01-10T13:49:05.5273260Z E            DESIRED: array([1.549174e+39, 1.550439e+39, 1.545071e+39, ..., 2.082528e+31,
2025-01-10T13:49:05.5273350Z E                  2.088676e+31, 2.060278e+31])
2025-01-10T13:49:05.5273355Z 
2025-01-10T13:49:05.5273548Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5273802Z __________________________ test_montecarlo_main_loop ___________________________
2025-01-10T13:49:05.5273807Z 
2025-01-10T13:49:05.5274552Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:49:05.5274955Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3bcee50080>
2025-01-10T13:49:05.5275309Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:49:05.5275315Z 
2025-01-10T13:49:05.5275403Z     def test_montecarlo_main_loop(
2025-01-10T13:49:05.5275494Z         montecarlo_main_loop_config,
2025-01-10T13:49:05.5275576Z         regression_data,
2025-01-10T13:49:05.5275651Z         atomic_dataset,
2025-01-10T13:49:05.5275722Z     ):
2025-01-10T13:49:05.5275827Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:49:05.5275980Z         montecarlo_main_loop_simulation = Simulation.from_config(
2025-01-10T13:49:05.5276074Z             montecarlo_main_loop_config,
2025-01-10T13:49:05.5276164Z             atom_data=atomic_dataset,
2025-01-10T13:49:05.5276258Z             virtual_packet_logging=False,
2025-01-10T13:49:05.5276346Z             legacy_mode_enabled=True,
2025-01-10T13:49:05.5276414Z         )
2025-01-10T13:49:05.5276543Z         montecarlo_main_loop_simulation.run_convergence()
2025-01-10T13:49:05.5276650Z         montecarlo_main_loop_simulation.run_final()
2025-01-10T13:49:05.5276722Z     
2025-01-10T13:49:05.5276849Z         expected_hdf_store = regression_data.sync_hdf_store(
2025-01-10T13:49:05.5276949Z             montecarlo_main_loop_simulation
2025-01-10T13:49:05.5277016Z         )
2025-01-10T13:49:05.5277086Z     
2025-01-10T13:49:05.5277176Z         # Load compare data from refdata
2025-01-10T13:49:05.5277250Z     
2025-01-10T13:49:05.5277344Z         expected_nu = expected_hdf_store[
2025-01-10T13:49:05.5277467Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:49:05.5277543Z         ]
2025-01-10T13:49:05.5277638Z         expected_energy = expected_hdf_store[
2025-01-10T13:49:05.5277777Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:49:05.5277850Z         ]
2025-01-10T13:49:05.5277964Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:49:05.5278113Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:49:05.5278180Z         ]
2025-01-10T13:49:05.5278290Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:49:05.5278414Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:49:05.5278488Z         ]
2025-01-10T13:49:05.5278571Z         expected_hdf_store.close()
2025-01-10T13:49:05.5278784Z         transport_state = montecarlo_main_loop_simulation.transport.transport_state
2025-01-10T13:49:05.5278957Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:49:05.5279099Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:49:05.5279186Z         actual_nu_bar_estimator = (
2025-01-10T13:49:05.5279447Z             transport_state.radfield_mc_estimators.nu_bar_estimator
2025-01-10T13:49:05.5279520Z         )
2025-01-10T13:49:05.5279699Z         actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
2025-01-10T13:49:05.5279772Z     
2025-01-10T13:49:05.5279843Z         # Compare
2025-01-10T13:49:05.5279932Z >       npt.assert_allclose(
2025-01-10T13:49:05.5280086Z             actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-13
2025-01-10T13:49:05.5280157Z         )
2025-01-10T13:49:05.5280162Z 
2025-01-10T13:49:05.5280343Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:57: 
2025-01-10T13:49:05.5280457Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5280462Z 
2025-01-10T13:49:05.5280897Z args = (<function assert_allclose.<locals>.compare at 0x7f3bd1b2b880>, array([9.40997647e+28, 8.06632443e+28, 7.20256533e+28,....88449508e+28, 3.76156653e+28, 3.64401717e+28,
2025-01-10T13:49:05.5281116Z        3.53517538e+28, 3.45355503e+28, 3.34541304e+28, 3.26838651e+28]))
2025-01-10T13:49:05.5281378Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-13, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5281382Z 
2025-01-10T13:49:05.5281454Z     @wraps(func)
2025-01-10T13:49:05.5281538Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5281620Z         with self._recreate_cm():
2025-01-10T13:49:05.5281708Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5281791Z E           AssertionError: 
2025-01-10T13:49:05.5281903Z E           Not equal to tolerance rtol=1e-13, atol=0
2025-01-10T13:49:05.5281972Z E           
2025-01-10T13:49:05.5282073Z E           Mismatched elements: 20 / 20 (100%)
2025-01-10T13:49:05.5282210Z E           Max absolute difference among violations: 2.25821059e+25
2025-01-10T13:49:05.5282337Z E           Max relative difference among violations: 0.00054397
2025-01-10T13:49:05.5282493Z E            ACTUAL: array([9.409976e+28, 8.066324e+28, 7.202565e+28, 6.545908e+28,
2025-01-10T13:49:05.5282618Z E                  6.032330e+28, 5.614178e+28, 5.250313e+28, 4.984748e+28,
2025-01-10T13:49:05.5282745Z E                  4.725851e+28, 4.508107e+28, 4.318094e+28, 4.149110e+28,...
2025-01-10T13:49:05.5282899Z E            DESIRED: array([9.408704e+28, 8.067118e+28, 7.202414e+28, 6.547518e+28,
2025-01-10T13:49:05.5283013Z E                  6.033670e+28, 5.613552e+28, 5.249857e+28, 4.984256e+28,
2025-01-10T13:49:05.5283130Z E                  4.726016e+28, 4.509481e+28, 4.319969e+28, 4.151368e+28,...
2025-01-10T13:49:05.5283135Z 
2025-01-10T13:49:05.5283339Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5283491Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:49:05.5283856Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:49:05.5284307Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:49:05.5284501Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5284718Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:49:05.5284882Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5284956Z 	
2025-01-10T13:49:05.5285048Z 	Simulation finished in 0 iterations 
2025-01-10T13:49:05.5285132Z 	Simulation took 0.00 s
2025-01-10T13:49:05.5285237Z  ([1mbase.py[0m:542)
2025-01-10T13:49:05.5285403Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5285469Z 	
2025-01-10T13:49:05.5285627Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:49:05.5285784Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5285855Z 	
2025-01-10T13:49:05.5285945Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:49:05.5286039Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:49:05.5286135Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5286375Z  ([1mbase.py[0m:657)
2025-01-10T13:49:05.5286533Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:49:05.5286539Z 
2025-01-10T13:49:05.5286542Z 
2025-01-10T13:49:05.5286774Z Packets:                                                                                   11353/? [00:10<00:00, 1047.01it/s][A
2025-01-10T13:49:05.5286780Z 
2025-01-10T13:49:05.5287004Z Packets:                                                                                   21816/? [00:10<00:00, 2393.95it/s][A
2025-01-10T13:49:05.5287008Z 
2025-01-10T13:49:05.5287221Z Packets:                                                                                   32601/? [00:11<00:00, 4317.20it/s][A
2025-01-10T13:49:05.5287234Z 
2025-01-10T13:49:05.5287448Z Packets:                                                                                   43253/? [00:11<00:00, 6871.44it/s][A
2025-01-10T13:49:05.5287558Z 
2025-01-10T13:49:05.5287791Z Packets:                                                                                   54112/? [00:11<00:00, 10411.70it/s][A
2025-01-10T13:49:05.5287800Z 
2025-01-10T13:49:05.5288018Z Packets:                                                                                   64984/? [00:11<00:00, 15068.12it/s][A
2025-01-10T13:49:05.5288023Z 
2025-01-10T13:49:05.5288243Z Packets:                                                                                   75738/? [00:11<00:00, 20928.67it/s][A
2025-01-10T13:49:05.5288248Z 
2025-01-10T13:49:05.5288468Z Packets:                                                                                   86568/? [00:11<00:00, 28182.31it/s][A
2025-01-10T13:49:05.5288473Z 
2025-01-10T13:49:05.5288688Z Packets:                                                                                   97456/? [00:11<00:00, 36738.39it/s][A
2025-01-10T13:49:05.5288838Z Iterations:                                                                                40/? [07:57<00:00,  5.64s/it]
2025-01-10T13:49:05.5288849Z 
2025-01-10T13:49:05.5289076Z Packets:                                                                                   104009/? [00:11<00:00, 36738.39it/s][A
2025-01-10T13:49:05.5289229Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:49:05.5289726Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:49:05.5289949Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:49:05.5290062Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:49:05.5290155Z 	Simulation finished in 0 iterations 
2025-01-10T13:49:05.5290237Z 	Simulation took 0.00 s
2025-01-10T13:49:05.5290243Z 
2025-01-10T13:49:05.5290347Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:49:05.5290438Z 	Starting iteration 1 of 1
2025-01-10T13:49:05.5290538Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:49:05.5290635Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:49:05.5290722Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:49:05.5290815Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5290975Z ____________________ test_montecarlo_main_loop_vpacket_log _____________________
2025-01-10T13:49:05.5290986Z 
2025-01-10T13:49:05.5291662Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:49:05.5291942Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3be798f260>
2025-01-10T13:49:05.5292289Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:49:05.5292297Z 
2025-01-10T13:49:05.5292405Z     def test_montecarlo_main_loop_vpacket_log(
2025-01-10T13:49:05.5292575Z         montecarlo_main_loop_config,
2025-01-10T13:49:05.5292662Z         regression_data,
2025-01-10T13:49:05.5292736Z         atomic_dataset,
2025-01-10T13:49:05.5292807Z     ):
2025-01-10T13:49:05.5292917Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:49:05.5293090Z         montecarlo_main_loop_config.montecarlo.no_of_virtual_packets = 5
2025-01-10T13:49:05.5293163Z     
2025-01-10T13:49:05.5293314Z         montecarlo_main_loop_simulation = Simulation.from_config(
2025-01-10T13:49:05.5293410Z             montecarlo_main_loop_config,
2025-01-10T13:49:05.5293496Z             atom_data=atomic_dataset,
2025-01-10T13:49:05.5293590Z             virtual_packet_logging=True,
2025-01-10T13:49:05.5293809Z             legacy_mode_enabled=True,
2025-01-10T13:49:05.5293884Z         )
2025-01-10T13:49:05.5294009Z         montecarlo_main_loop_simulation.run_convergence()
2025-01-10T13:49:05.5294304Z         montecarlo_main_loop_simulation.run_final()
2025-01-10T13:49:05.5294377Z     
2025-01-10T13:49:05.5294518Z         transport = montecarlo_main_loop_simulation.transport
2025-01-10T13:49:05.5294583Z     
2025-01-10T13:49:05.5294792Z         assert transport.montecarlo_configuration.ENABLE_VPACKET_TRACKING is True
2025-01-10T13:49:05.5294863Z     
2025-01-10T13:49:05.5294989Z         expected_hdf_store = regression_data.sync_hdf_store(
2025-01-10T13:49:05.5295089Z             montecarlo_main_loop_simulation
2025-01-10T13:49:05.5295157Z         )
2025-01-10T13:49:05.5295227Z     
2025-01-10T13:49:05.5295317Z         expected_nu = expected_hdf_store[
2025-01-10T13:49:05.5295445Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:49:05.5295513Z         ]
2025-01-10T13:49:05.5295613Z         expected_energy = expected_hdf_store[
2025-01-10T13:49:05.5295745Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:49:05.5295822Z         ]
2025-01-10T13:49:05.5295938Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:49:05.5296089Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:49:05.5296157Z         ]
2025-01-10T13:49:05.5296266Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:49:05.5296396Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:49:05.5296463Z         ]
2025-01-10T13:49:05.5296580Z         expected_vpacket_log_nus = expected_hdf_store[
2025-01-10T13:49:05.5296717Z             "/simulation/transport/transport_state/virt_packet_nus"
2025-01-10T13:49:05.5296789Z         ]
2025-01-10T13:49:05.5296913Z         expected_vpacket_log_energies = expected_hdf_store[
2025-01-10T13:49:05.5297071Z             "/simulation/transport/transport_state/virt_packet_energies"
2025-01-10T13:49:05.5297139Z         ]
2025-01-10T13:49:05.5297210Z     
2025-01-10T13:49:05.5297318Z         transport_state = transport.transport_state
2025-01-10T13:49:05.5297393Z     
2025-01-10T13:49:05.5297561Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:49:05.5297706Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:49:05.5297847Z         actual_nu_bar_estimator = transport_state.nu_bar_estimator
2025-01-10T13:49:05.5297969Z         actual_j_estimator = transport_state.j_estimator
2025-01-10T13:49:05.5298121Z         actual_vpacket_log_nus = transport_state.vpacket_tracker.nus
2025-01-10T13:49:05.5298295Z         actual_vpacket_log_energies = transport_state.vpacket_tracker.energies
2025-01-10T13:49:05.5298367Z     
2025-01-10T13:49:05.5298454Z         expected_hdf_store.close()
2025-01-10T13:49:05.5298530Z         # Compare
2025-01-10T13:49:05.5298612Z >       npt.assert_allclose(
2025-01-10T13:49:05.5298702Z             actual_nu_bar_estimator,
2025-01-10T13:49:05.5298788Z             expected_nu_bar_estimator,
2025-01-10T13:49:05.5298867Z             rtol=1e-12,
2025-01-10T13:49:05.5298943Z             atol=1e-15,
2025-01-10T13:49:05.5299014Z         )
2025-01-10T13:49:05.5299131Z 
2025-01-10T13:49:05.5299320Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:120: 
2025-01-10T13:49:05.5299440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5299445Z 
2025-01-10T13:49:05.5299884Z args = (<function assert_allclose.<locals>.compare at 0x7f3bea4bfce0>, array([9.39540882e+28, 8.06337668e+28, 7.18835599e+28,....86491193e+28, 3.76603462e+28, 3.65184134e+28,
2025-01-10T13:49:05.5300020Z        3.55625311e+28, 3.45809153e+28, 3.35093337e+28, 3.25549805e+28]))
2025-01-10T13:49:05.5300295Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-12, atol=1e-15', 'strict': False, ...}
2025-01-10T13:49:05.5300300Z 
2025-01-10T13:49:05.5300372Z     @wraps(func)
2025-01-10T13:49:05.5300461Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5300543Z         with self._recreate_cm():
2025-01-10T13:49:05.5300713Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5300795Z E           AssertionError: 
2025-01-10T13:49:05.5300920Z E           Not equal to tolerance rtol=1e-12, atol=1e-15
2025-01-10T13:49:05.5300989Z E           
2025-01-10T13:49:05.5301089Z E           Mismatched elements: 20 / 20 (100%)
2025-01-10T13:49:05.5301227Z E           Max absolute difference among violations: 1.93283629e+25
2025-01-10T13:49:05.5301353Z E           Max relative difference among violations: 0.00029157
2025-01-10T13:49:05.5301514Z E            ACTUAL: array([9.395409e+28, 8.063377e+28, 7.188356e+28, 6.549146e+28,
2025-01-10T13:49:05.5301629Z E                  6.034629e+28, 5.628414e+28, 5.283421e+28, 4.953453e+28,
2025-01-10T13:49:05.5301755Z E                  4.716735e+28, 4.492320e+28, 4.302194e+28, 4.140106e+28,...
2025-01-10T13:49:05.5301910Z E            DESIRED: array([9.397342e+28, 8.064372e+28, 7.189479e+28, 6.549756e+28,
2025-01-10T13:49:05.5302027Z E                  6.033450e+28, 5.626927e+28, 5.281881e+28, 4.952089e+28,
2025-01-10T13:49:05.5302148Z E                  4.716388e+28, 4.491655e+28, 4.302267e+28, 4.139741e+28,...
2025-01-10T13:49:05.5302156Z 
2025-01-10T13:49:05.5302361Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5302519Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:49:05.5302772Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:49:05.5303217Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:49:05.5303394Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5303736Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:49:05.5303907Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5303980Z 	
2025-01-10T13:49:05.5304073Z 	Simulation finished in 0 iterations 
2025-01-10T13:49:05.5304161Z 	Simulation took 0.00 s
2025-01-10T13:49:05.5304264Z  ([1mbase.py[0m:542)
2025-01-10T13:49:05.5304432Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5304498Z 	
2025-01-10T13:49:05.5304658Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:49:05.5304819Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5304885Z 	
2025-01-10T13:49:05.5304981Z 	Luminosity emitted   = 8.135e+42 erg / s
2025-01-10T13:49:05.5305069Z 	Luminosity absorbed  = 2.646e+42 erg / s
2025-01-10T13:49:05.5305163Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5305264Z  ([1mbase.py[0m:657)
2025-01-10T13:49:05.5305422Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:49:05.5305427Z 
2025-01-10T13:49:05.5305430Z 
2025-01-10T13:49:05.5305667Z Packets:                                                                                   108171/? [00:14<00:00, 10302.09it/s][A
2025-01-10T13:49:05.5305675Z 
2025-01-10T13:49:05.5305903Z Packets:                                                                                   115659/? [00:14<00:00, 12358.18it/s][A
2025-01-10T13:49:05.5306028Z 
2025-01-10T13:49:05.5306260Z Packets:                                                                                   121933/? [00:14<00:00, 14368.62it/s][A
2025-01-10T13:49:05.5306265Z 
2025-01-10T13:49:05.5306485Z Packets:                                                                                   127335/? [00:14<00:00, 16440.58it/s][A
2025-01-10T13:49:05.5306490Z 
2025-01-10T13:49:05.5306715Z Packets:                                                                                   132170/? [00:15<00:00, 18521.23it/s][A
2025-01-10T13:49:05.5306720Z 
2025-01-10T13:49:05.5306939Z Packets:                                                                                   136592/? [00:15<00:00, 20537.38it/s][A
2025-01-10T13:49:05.5306949Z 
2025-01-10T13:49:05.5307168Z Packets:                                                                                   140696/? [00:15<00:00, 22654.92it/s][A
2025-01-10T13:49:05.5307281Z 
2025-01-10T13:49:05.5307511Z Packets:                                                                                   144625/? [00:15<00:00, 24723.52it/s][A
2025-01-10T13:49:05.5307516Z 
2025-01-10T13:49:05.5307738Z Packets:                                                                                   148431/? [00:15<00:00, 26631.57it/s][A
2025-01-10T13:49:05.5307742Z 
2025-01-10T13:49:05.5307968Z Packets:                                                                                   152143/? [00:15<00:00, 28342.72it/s][A
2025-01-10T13:49:05.5307972Z 
2025-01-10T13:49:05.5308194Z Packets:                                                                                   155789/? [00:15<00:00, 29706.07it/s][A
2025-01-10T13:49:05.5308199Z 
2025-01-10T13:49:05.5308417Z Packets:                                                                                   159371/? [00:15<00:00, 30987.32it/s][A
2025-01-10T13:49:05.5308425Z 
2025-01-10T13:49:05.5308648Z Packets:                                                                                   162931/? [00:15<00:00, 31862.25it/s][A
2025-01-10T13:49:05.5308656Z 
2025-01-10T13:49:05.5308871Z Packets:                                                                                   166475/? [00:16<00:00, 32796.05it/s][A
2025-01-10T13:49:05.5308880Z 
2025-01-10T13:49:05.5309097Z Packets:                                                                                   170005/? [00:16<00:00, 33449.67it/s][A
2025-01-10T13:49:05.5309102Z 
2025-01-10T13:49:05.5309326Z Packets:                                                                                   173532/? [00:16<00:00, 33645.83it/s][A
2025-01-10T13:49:05.5309330Z 
2025-01-10T13:49:05.5309549Z Packets:                                                                                   177075/? [00:16<00:00, 34148.71it/s][A
2025-01-10T13:49:05.5309554Z 
2025-01-10T13:49:05.5309780Z Packets:                                                                                   180598/? [00:16<00:00, 34460.16it/s][A
2025-01-10T13:49:05.5309787Z 
2025-01-10T13:49:05.5310010Z Packets:                                                                                   184146/? [00:16<00:00, 34756.14it/s][A
2025-01-10T13:49:05.5310015Z 
2025-01-10T13:49:05.5310233Z Packets:                                                                                   187669/? [00:16<00:00, 34850.70it/s][A
2025-01-10T13:49:05.5310238Z 
2025-01-10T13:49:05.5310463Z Packets:                                                                                   191192/? [00:16<00:00, 34962.66it/s][A
2025-01-10T13:49:05.5310468Z 
2025-01-10T13:49:05.5310687Z Packets:                                                                                   194712/? [00:16<00:00, 34912.46it/s][A
2025-01-10T13:49:05.5310691Z 
2025-01-10T13:49:05.5310916Z Packets:                                                                                   198220/? [00:16<00:00, 34623.93it/s][A
2025-01-10T13:49:05.5310924Z 
2025-01-10T13:49:05.5311230Z Packets:                                                                                   201732/? [00:17<00:00, 34763.05it/s][A
2025-01-10T13:49:05.5311376Z Iterations:                                                                                41/? [08:02<00:00,  5.59s/it]
2025-01-10T13:49:05.5311382Z 
2025-01-10T13:49:05.5311607Z Packets:                                                                                   204009/? [00:17<00:00, 34763.05it/s][A
2025-01-10T13:49:05.5311757Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:49:05.5312262Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:49:05.5312485Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:49:05.5312669Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:49:05.5312769Z 	Simulation finished in 0 iterations 
2025-01-10T13:49:05.5312851Z 	Simulation took 0.00 s
2025-01-10T13:49:05.5312855Z 
2025-01-10T13:49:05.5312960Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:49:05.5313043Z 	Starting iteration 1 of 1
2025-01-10T13:49:05.5313151Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:49:05.5313239Z 	Luminosity emitted   = 8.135e+42 erg / s
2025-01-10T13:49:05.5313331Z 	Luminosity absorbed  = 2.646e+42 erg / s
2025-01-10T13:49:05.5313419Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5313573Z __________________________ test_boundary_interactions __________________________
2025-01-10T13:49:05.5313578Z 
2025-01-10T13:49:05.5314495Z rpacket_tracker = ListType[instance.jitclass.RPacketTracker#7f3c02d24620<seed:int64,index:int64,status:array(int64, 1d, A),r:array(float...PacketTracker object at 0x7f3be8f8b430>, <numba.experimental.jitclass.boxing.RPacketTracker object at 0x7f3bcfc59b10>])
2025-01-10T13:49:05.5314779Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3beaa00680>
2025-01-10T13:49:05.5314788Z 
2025-01-10T13:49:05.5314958Z     def test_boundary_interactions(rpacket_tracker, regression_data):
2025-01-10T13:49:05.5315053Z         no_of_packets = len(rpacket_tracker)
2025-01-10T13:49:05.5315123Z     
2025-01-10T13:49:05.5315401Z         max_boundary_interaction_size = max([tracker.boundary_interaction.size for tracker in rpacket_tracker])
2025-01-10T13:49:05.5315510Z         obtained_boundary_interaction = np.full(
2025-01-10T13:49:05.5315626Z             (no_of_packets, max_boundary_interaction_size),
2025-01-10T13:49:05.5315704Z             [-1],
2025-01-10T13:49:05.5315841Z             dtype=rpacket_tracker[0].boundary_interaction.dtype,
2025-01-10T13:49:05.5315909Z         )
2025-01-10T13:49:05.5315979Z     
2025-01-10T13:49:05.5316091Z         for i, tracker in enumerate(rpacket_tracker):
2025-01-10T13:49:05.5316194Z             obtained_boundary_interaction[
2025-01-10T13:49:05.5316303Z                 i, : tracker.boundary_interaction.size
2025-01-10T13:49:05.5316400Z             ] = tracker.boundary_interaction
2025-01-10T13:49:05.5316466Z     
2025-01-10T13:49:05.5316626Z         expected_boundary_interaction = regression_data.sync_ndarray(
2025-01-10T13:49:05.5316714Z             obtained_boundary_interaction
2025-01-10T13:49:05.5316786Z         )
2025-01-10T13:49:05.5316869Z >       npt.assert_array_equal(
2025-01-10T13:49:05.5317029Z             obtained_boundary_interaction, expected_boundary_interaction
2025-01-10T13:49:05.5317096Z         )
2025-01-10T13:49:05.5317100Z 
2025-01-10T13:49:05.5317276Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py:153: 
2025-01-10T13:49:05.5317395Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5317665Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/numpy/_utils/__init__.py:85: in wrapper
2025-01-10T13:49:05.5317755Z     return fun(*args, **kwargs)
2025-01-10T13:49:05.5318006Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5318011Z 
2025-01-10T13:49:05.5318237Z args = (<built-in function eq>, array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:49:05.5318338Z         (-1, -1, -1), (-...-1, -1, -1), (-1, -1, -1)]],
2025-01-10T13:49:05.5318523Z       dtype=[('event_id', '<i8'), ('current_shell_id', '<i8'), ('next_shell_id', '<i8')]))
2025-01-10T13:49:05.5318712Z kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}
2025-01-10T13:49:05.5318722Z 
2025-01-10T13:49:05.5318795Z     @wraps(func)
2025-01-10T13:49:05.5318881Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5318964Z         with self._recreate_cm():
2025-01-10T13:49:05.5319054Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5319135Z E           AssertionError: 
2025-01-10T13:49:05.5319326Z E           Arrays are not equal
2025-01-10T13:49:05.5319395Z E           
2025-01-10T13:49:05.5319501Z E           (shapes (4000, 62), (4000, 64) mismatch)
2025-01-10T13:49:05.5319645Z E            ACTUAL: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:49:05.5319742Z E                   (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:49:05.5319850Z E                  [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:49:05.5320001Z E            DESIRED: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:49:05.5320087Z E                   (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:49:05.5320192Z E                  [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:49:05.5320197Z 
2025-01-10T13:49:05.5320405Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5320562Z ______________________ test_montecarlo_main_loop_weighted ______________________
2025-01-10T13:49:05.5320570Z 
2025-01-10T13:49:05.5321264Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:49:05.5321541Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f3be952db80>
2025-01-10T13:49:05.5321895Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:49:05.5322299Z simple_weighted_packet_source = <tardis.transport.montecarlo.weighted_packet_source.BlackBodyWeightedSource object at 0x7f3bea4f5bb0>
2025-01-10T13:49:05.5322305Z 
2025-01-10T13:49:05.5322404Z     def test_montecarlo_main_loop_weighted(
2025-01-10T13:49:05.5322495Z         montecarlo_main_loop_config,
2025-01-10T13:49:05.5322573Z         regression_data,
2025-01-10T13:49:05.5322657Z         atomic_dataset,
2025-01-10T13:49:05.5322746Z         simple_weighted_packet_source,
2025-01-10T13:49:05.5322822Z     ):
2025-01-10T13:49:05.5322927Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:49:05.5323103Z         montecarlo_main_loop_simulation_weighted = Simulation.from_config(
2025-01-10T13:49:05.5323193Z             montecarlo_main_loop_config,
2025-01-10T13:49:05.5323282Z             atom_data=atomic_dataset,
2025-01-10T13:49:05.5323369Z             virtual_packet_logging=False,
2025-01-10T13:49:05.5323458Z             legacy_mode_enabled=True,
2025-01-10T13:49:05.5323531Z         )
2025-01-10T13:49:05.5323827Z         montecarlo_main_loop_simulation_weighted.packet_source = (
2025-01-10T13:49:05.5323922Z             simple_weighted_packet_source
2025-01-10T13:49:05.5323988Z         )
2025-01-10T13:49:05.5324140Z         montecarlo_main_loop_simulation_weighted.run_convergence()
2025-01-10T13:49:05.5324273Z         montecarlo_main_loop_simulation_weighted.run_final()
2025-01-10T13:49:05.5324349Z     
2025-01-10T13:49:05.5324455Z         # Get the montecarlo simple regression data
2025-01-10T13:49:05.5324658Z         regression_data_dir = (
2025-01-10T13:49:05.5324832Z             regression_data.absolute_regression_data_dir.absolute().parents[0]
2025-01-10T13:49:05.5324978Z             / "test_montecarlo_main_loop/test_montecarlo_main_loop.h5"
2025-01-10T13:49:05.5325045Z         )
2025-01-10T13:49:05.5325208Z         expected_hdf_store = pd.HDFStore(regression_data_dir, mode="r")
2025-01-10T13:49:05.5325283Z     
2025-01-10T13:49:05.5325369Z         # Load compare data from refdata
2025-01-10T13:49:05.5325441Z     
2025-01-10T13:49:05.5325528Z         expected_nu = expected_hdf_store[
2025-01-10T13:49:05.5325658Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:49:05.5325725Z         ]
2025-01-10T13:49:05.5325825Z         expected_energy = expected_hdf_store[
2025-01-10T13:49:05.5325956Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:49:05.5326132Z         ]
2025-01-10T13:49:05.5326248Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:49:05.5326397Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:49:05.5326464Z         ]
2025-01-10T13:49:05.5326574Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:49:05.5326699Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:49:05.5326777Z         ]
2025-01-10T13:49:05.5326865Z         expected_hdf_store.close()
2025-01-10T13:49:05.5326951Z         transport_state = (
2025-01-10T13:49:05.5327135Z             montecarlo_main_loop_simulation_weighted.transport.transport_state
2025-01-10T13:49:05.5327203Z         )
2025-01-10T13:49:05.5327374Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:49:05.5327512Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:49:05.5327601Z         actual_nu_bar_estimator = (
2025-01-10T13:49:05.5327745Z             transport_state.radfield_mc_estimators.nu_bar_estimator
2025-01-10T13:49:05.5327821Z         )
2025-01-10T13:49:05.5328000Z         actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
2025-01-10T13:49:05.5328072Z     
2025-01-10T13:49:05.5328142Z         # Compare
2025-01-10T13:49:05.5328229Z         npt.assert_allclose(
2025-01-10T13:49:05.5328378Z             actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-2
2025-01-10T13:49:05.5328450Z         )
2025-01-10T13:49:05.5328639Z         npt.assert_allclose(actual_j_estimator, expected_j_estimator, rtol=1e-2)
2025-01-10T13:49:05.5328801Z >       npt.assert_allclose(actual_energy, expected_energy, rtol=1e-2)
2025-01-10T13:49:05.5328806Z 
2025-01-10T13:49:05.5329043Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py:65: 
2025-01-10T13:49:05.5329157Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5329161Z 
2025-01-10T13:49:05.5329632Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc88222a0>, array([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-...ay([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-05, ...,
2025-01-10T13:49:05.5329750Z         1.03375439e-05, -9.75713585e-06,  1.01976360e-05]))
2025-01-10T13:49:05.5330014Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.01, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5330019Z 
2025-01-10T13:49:05.5330100Z     @wraps(func)
2025-01-10T13:49:05.5330181Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5330270Z         with self._recreate_cm():
2025-01-10T13:49:05.5330356Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5330446Z E           AssertionError: 
2025-01-10T13:49:05.5330553Z E           Not equal to tolerance rtol=0.01, atol=0
2025-01-10T13:49:05.5330628Z E           
2025-01-10T13:49:05.5330730Z E           Mismatched elements: 33 / 100000 (0.033%)
2025-01-10T13:49:05.5330876Z E           Max absolute difference among violations: 2.00640487e-05
2025-01-10T13:49:05.5331007Z E           Max relative difference among violations: 2.11614526
2025-01-10T13:49:05.5331277Z E            ACTUAL: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:49:05.5331371Z E                  -9.757136e-06,  1.019764e-05])
2025-01-10T13:49:05.5331555Z E            DESIRED: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:49:05.5331648Z E                  -9.757136e-06,  1.019764e-05])
2025-01-10T13:49:05.5331653Z 
2025-01-10T13:49:05.5331856Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5332015Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:49:05.5332278Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:49:05.5332730Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:49:05.5332991Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5333215Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:49:05.5333380Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5333454Z 	
2025-01-10T13:49:05.5333546Z 	Simulation finished in 0 iterations 
2025-01-10T13:49:05.5333753Z 	Simulation took 0.00 s
2025-01-10T13:49:05.5333866Z  ([1mbase.py[0m:542)
2025-01-10T13:49:05.5334031Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5334102Z 	
2025-01-10T13:49:05.5334257Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:49:05.5334424Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5334491Z 	
2025-01-10T13:49:05.5334589Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:49:05.5334680Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:49:05.5334775Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5334881Z  ([1mbase.py[0m:657)
2025-01-10T13:49:05.5335043Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:49:05.5335051Z 
2025-01-10T13:49:05.5335054Z 
2025-01-10T13:49:05.5335294Z Packets:                                                                                   0/100000 [00:00<?, ?it/s]            [A
2025-01-10T13:49:05.5335304Z 
2025-01-10T13:49:05.5335525Z Packets:                                                                                   0/100000 [00:00<?, ?it/s][A
2025-01-10T13:49:05.5335530Z 
2025-01-10T13:49:05.5335786Z Packets:   ████████▍                                                                       10469/100000 [00:00<00:00, 104674.88it/s][A
2025-01-10T13:49:05.5335793Z 
2025-01-10T13:49:05.5336046Z Packets:   █████████████████                                                               21318/100000 [00:00<00:00, 106915.09it/s][A
2025-01-10T13:49:05.5336052Z 
2025-01-10T13:49:05.5336318Z Packets:   █████████████████████████▋                                                      32040/100000 [00:00<00:00, 107050.51it/s][A
2025-01-10T13:49:05.5336339Z 
2025-01-10T13:49:05.5336616Z Packets:   ██████████████████████████████████▏                                             42759/100000 [00:00<00:00, 107105.01it/s][A
2025-01-10T13:49:05.5336622Z 
2025-01-10T13:49:05.5336900Z Packets:   ██████████████████████████████████████████▊                                     53508/100000 [00:00<00:00, 107242.68it/s][A
2025-01-10T13:49:05.5336906Z 
2025-01-10T13:49:05.5337199Z Packets:   ███████████████████████████████████████████████████▍                            64310/100000 [00:00<00:00, 107505.69it/s][A
2025-01-10T13:49:05.5337204Z 
2025-01-10T13:49:05.5337500Z Packets:   ████████████████████████████████████████████████████████████                    75061/100000 [00:00<00:00, 107477.31it/s][A
2025-01-10T13:49:05.5337510Z 
2025-01-10T13:49:05.5337814Z Packets:   ████████████████████████████████████████████████████████████████████▋           85908/100000 [00:00<00:00, 107790.27it/s][A
2025-01-10T13:49:05.5337950Z 
2025-01-10T13:49:05.5338380Z Packets:   █████████████████████████████████████████████████████████████████████████████▎  96688/100000 [00:00<00:00, 104295.76it/s][A
2025-01-10T13:49:05.5338529Z Iterations:                                                                                45/? [08:53<00:00,  8.26s/it]
2025-01-10T13:49:05.5338534Z 
2025-01-10T13:49:05.5338867Z Packets:   ███████████████████████████████████████████████████████████████████████████████▉99999/100000 [00:01<00:00, 104295.76it/s][A
2025-01-10T13:49:05.5339021Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:49:05.5339528Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:49:05.5339751Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:49:05.5339870Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:49:05.5339979Z 	Simulation finished in 0 iterations 
2025-01-10T13:49:05.5340059Z 	Simulation took 0.00 s
2025-01-10T13:49:05.5340063Z 
2025-01-10T13:49:05.5340172Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:49:05.5340255Z 	Starting iteration 1 of 1
2025-01-10T13:49:05.5340365Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:49:05.5340454Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:49:05.5340549Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:49:05.5340639Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:49:05.5340857Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data0-plot_data] __
2025-01-10T13:49:05.5340862Z 
2025-01-10T13:49:05.5341128Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf843ac30>
2025-01-10T13:49:05.5341409Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>
2025-01-10T13:49:05.5341684Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data0-plot_data]>>
2025-01-10T13:49:05.5341768Z attribute = 'plot_data'
2025-01-10T13:49:05.5341772Z 
2025-01-10T13:49:05.5341866Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5341940Z         "attribute",
2025-01-10T13:49:05.5342013Z         [
2025-01-10T13:49:05.5342088Z             "plot_data",
2025-01-10T13:49:05.5342168Z             "plot_colors",
2025-01-10T13:49:05.5342244Z             "new_bin_edges",
2025-01-10T13:49:05.5342317Z         ],
2025-01-10T13:49:05.5342389Z     )
2025-01-10T13:49:05.5342474Z     def test_prepare_plot_data(
2025-01-10T13:49:05.5342552Z         self,
2025-01-10T13:49:05.5342640Z         plotter_prepare_plot_data,
2025-01-10T13:49:05.5342716Z         request,
2025-01-10T13:49:05.5342787Z         attribute,
2025-01-10T13:49:05.5342858Z     ):
2025-01-10T13:49:05.5342926Z         """
2025-01-10T13:49:05.5343066Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:49:05.5343137Z     
2025-01-10T13:49:05.5343322Z         Parameters:
2025-01-10T13:49:05.5343398Z         -----------
2025-01-10T13:49:05.5343583Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:49:05.5343776Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5343945Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:49:05.5344012Z         """
2025-01-10T13:49:05.5344122Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5344259Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:49:05.5344409Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:49:05.5344572Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:49:05.5344718Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:49:05.5344842Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:49:05.5345076Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:49:05.5345205Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:49:05.5345210Z 
2025-01-10T13:49:05.5345352Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:49:05.5345467Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5345472Z 
2025-01-10T13:49:05.5345913Z args = (<function assert_allclose.<locals>.compare at 0x7f3bcb6d00e0>, array([11843.96225504, 11843.96225504, 11843.96225504,...1104.14894249, 11194.10880903, 12818.679236  ,
2025-01-10T13:49:05.5346049Z        12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
2025-01-10T13:49:05.5346310Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5346315Z 
2025-01-10T13:49:05.5346389Z     @wraps(func)
2025-01-10T13:49:05.5346477Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5346560Z         with self._recreate_cm():
2025-01-10T13:49:05.5346653Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5346734Z E           AssertionError: 
2025-01-10T13:49:05.5346844Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5346914Z E           
2025-01-10T13:49:05.5347008Z E           (shapes (515,), (508,) mismatch)
2025-01-10T13:49:05.5347167Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:49:05.5347290Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:49:05.5347415Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:49:05.5347572Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:49:05.5347688Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:49:05.5347806Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:49:05.5347814Z 
2025-01-10T13:49:05.5348021Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5348175Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5348409Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5348662Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5348810Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5349113Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5349319Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data1-plot_data] __
2025-01-10T13:49:05.5349324Z 
2025-01-10T13:49:05.5349591Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf843b0b0>
2025-01-10T13:49:05.5349874Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>
2025-01-10T13:49:05.5350266Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data1-plot_data]>>
2025-01-10T13:49:05.5350348Z attribute = 'plot_data'
2025-01-10T13:49:05.5350357Z 
2025-01-10T13:49:05.5350447Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5350527Z         "attribute",
2025-01-10T13:49:05.5350594Z         [
2025-01-10T13:49:05.5350674Z             "plot_data",
2025-01-10T13:49:05.5350750Z             "plot_colors",
2025-01-10T13:49:05.5350832Z             "new_bin_edges",
2025-01-10T13:49:05.5350900Z         ],
2025-01-10T13:49:05.5350973Z     )
2025-01-10T13:49:05.5351060Z     def test_prepare_plot_data(
2025-01-10T13:49:05.5351135Z         self,
2025-01-10T13:49:05.5351221Z         plotter_prepare_plot_data,
2025-01-10T13:49:05.5351297Z         request,
2025-01-10T13:49:05.5351371Z         attribute,
2025-01-10T13:49:05.5351524Z     ):
2025-01-10T13:49:05.5351592Z         """
2025-01-10T13:49:05.5351737Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:49:05.5351804Z     
2025-01-10T13:49:05.5351883Z         Parameters:
2025-01-10T13:49:05.5351960Z         -----------
2025-01-10T13:49:05.5352138Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:49:05.5352244Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5352404Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:49:05.5352479Z         """
2025-01-10T13:49:05.5352584Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5352725Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:49:05.5352871Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:49:05.5353033Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:49:05.5353183Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:49:05.5353314Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:49:05.5353432Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:49:05.5353555Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:49:05.5353560Z 
2025-01-10T13:49:05.5353805Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:49:05.5353915Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5353919Z 
2025-01-10T13:49:05.5354260Z args = (<function assert_allclose.<locals>.compare at 0x7f3bf2863b00>, array([11843.96225504, 11843.96225504, 11843.96225504,...47464 ,
2025-01-10T13:49:05.5354395Z        12229.96880815, 12113.40540961, 12605.43283975, 12605.43283975,
2025-01-10T13:49:05.5354481Z        11152.96259546, 11172.04481521]))
2025-01-10T13:49:05.5354734Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5354745Z 
2025-01-10T13:49:05.5354823Z     @wraps(func)
2025-01-10T13:49:05.5354903Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5354994Z         with self._recreate_cm():
2025-01-10T13:49:05.5355082Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5355164Z E           AssertionError: 
2025-01-10T13:49:05.5355274Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5355344Z E           
2025-01-10T13:49:05.5355438Z E           (shapes (560,), (558,) mismatch)
2025-01-10T13:49:05.5355591Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:49:05.5355711Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:49:05.5355831Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:49:05.5355989Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:49:05.5356106Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:49:05.5356376Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:49:05.5356381Z 
2025-01-10T13:49:05.5356584Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5356794Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data2-plot_data] __
2025-01-10T13:49:05.5356798Z 
2025-01-10T13:49:05.5357059Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf843b2f0>
2025-01-10T13:49:05.5357338Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>
2025-01-10T13:49:05.5357612Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data2-plot_data]>>
2025-01-10T13:49:05.5357694Z attribute = 'plot_data'
2025-01-10T13:49:05.5357698Z 
2025-01-10T13:49:05.5357790Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5357967Z         "attribute",
2025-01-10T13:49:05.5358040Z         [
2025-01-10T13:49:05.5358125Z             "plot_data",
2025-01-10T13:49:05.5358200Z             "plot_colors",
2025-01-10T13:49:05.5358281Z             "new_bin_edges",
2025-01-10T13:49:05.5358347Z         ],
2025-01-10T13:49:05.5358419Z     )
2025-01-10T13:49:05.5358502Z     def test_prepare_plot_data(
2025-01-10T13:49:05.5358578Z         self,
2025-01-10T13:49:05.5358668Z         plotter_prepare_plot_data,
2025-01-10T13:49:05.5358743Z         request,
2025-01-10T13:49:05.5358815Z         attribute,
2025-01-10T13:49:05.5358889Z     ):
2025-01-10T13:49:05.5358956Z         """
2025-01-10T13:49:05.5359091Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:49:05.5359158Z     
2025-01-10T13:49:05.5359235Z         Parameters:
2025-01-10T13:49:05.5359307Z         -----------
2025-01-10T13:49:05.5359487Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:49:05.5359585Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5359749Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:49:05.5359826Z         """
2025-01-10T13:49:05.5359932Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5360074Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:49:05.5360218Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:49:05.5360382Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:49:05.5360526Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:49:05.5360652Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:49:05.5360770Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:49:05.5360891Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:49:05.5360896Z 
2025-01-10T13:49:05.5361034Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:49:05.5361153Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5361160Z 
2025-01-10T13:49:05.5361640Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc8f536a0>, array([11202.14920452, 13552.38987987, 11630.95782059,...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
2025-01-10T13:49:05.5361740Z        15754.62784966, 13174.4766832 , 11238.83568899]))
2025-01-10T13:49:05.5362000Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5362005Z 
2025-01-10T13:49:05.5362080Z     @wraps(func)
2025-01-10T13:49:05.5362165Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5362248Z         with self._recreate_cm():
2025-01-10T13:49:05.5362336Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5362415Z E           AssertionError: 
2025-01-10T13:49:05.5362525Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5362605Z E           
2025-01-10T13:49:05.5362694Z E           (shapes (136,), (147,) mismatch)
2025-01-10T13:49:05.5362936Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:49:05.5363052Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:49:05.5363176Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:49:05.5363332Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:49:05.5363448Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:49:05.5363568Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:49:05.5363574Z 
2025-01-10T13:49:05.5363868Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5364078Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data3-plot_data] __
2025-01-10T13:49:05.5364212Z 
2025-01-10T13:49:05.5364475Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf843b530>
2025-01-10T13:49:05.5364765Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>
2025-01-10T13:49:05.5365032Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data3-plot_data]>>
2025-01-10T13:49:05.5365116Z attribute = 'plot_data'
2025-01-10T13:49:05.5365121Z 
2025-01-10T13:49:05.5365207Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5365287Z         "attribute",
2025-01-10T13:49:05.5365356Z         [
2025-01-10T13:49:05.5365434Z             "plot_data",
2025-01-10T13:49:05.5365509Z             "plot_colors",
2025-01-10T13:49:05.5365591Z             "new_bin_edges",
2025-01-10T13:49:05.5365658Z         ],
2025-01-10T13:49:05.5365734Z     )
2025-01-10T13:49:05.5365823Z     def test_prepare_plot_data(
2025-01-10T13:49:05.5365892Z         self,
2025-01-10T13:49:05.5365984Z         plotter_prepare_plot_data,
2025-01-10T13:49:05.5366055Z         request,
2025-01-10T13:49:05.5366134Z         attribute,
2025-01-10T13:49:05.5366202Z     ):
2025-01-10T13:49:05.5366274Z         """
2025-01-10T13:49:05.5366405Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:49:05.5366475Z     
2025-01-10T13:49:05.5366547Z         Parameters:
2025-01-10T13:49:05.5366628Z         -----------
2025-01-10T13:49:05.5366798Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:49:05.5366898Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5367058Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:49:05.5367130Z         """
2025-01-10T13:49:05.5367238Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5367379Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:49:05.5367527Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:49:05.5367692Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:49:05.5367844Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:49:05.5367964Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:49:05.5368084Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:49:05.5368199Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:49:05.5368203Z 
2025-01-10T13:49:05.5368348Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:49:05.5368456Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5368461Z 
2025-01-10T13:49:05.5368933Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc939d3a0>, array([11202.14920452, 13552.38987987, 11630.95782059,...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
2025-01-10T13:49:05.5369036Z        12229.96880815, 12113.40540961, 11152.96259546]))
2025-01-10T13:49:05.5369291Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5369410Z 
2025-01-10T13:49:05.5369494Z     @wraps(func)
2025-01-10T13:49:05.5369574Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5369663Z         with self._recreate_cm():
2025-01-10T13:49:05.5369749Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5369835Z E           AssertionError: 
2025-01-10T13:49:05.5369937Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5370011Z E           
2025-01-10T13:49:05.5370100Z E           (shapes (153,), (159,) mismatch)
2025-01-10T13:49:05.5370256Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:49:05.5370376Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:49:05.5370495Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:49:05.5370729Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:49:05.5370843Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:49:05.5370966Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:49:05.5370971Z 
2025-01-10T13:49:05.5371166Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5371376Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data4-plot_data] __
2025-01-10T13:49:05.5371381Z 
2025-01-10T13:49:05.5371639Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf843b7a0>
2025-01-10T13:49:05.5371921Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>
2025-01-10T13:49:05.5372188Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data4-plot_data]>>
2025-01-10T13:49:05.5372272Z attribute = 'plot_data'
2025-01-10T13:49:05.5372276Z 
2025-01-10T13:49:05.5372368Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5372445Z         "attribute",
2025-01-10T13:49:05.5372517Z         [
2025-01-10T13:49:05.5372590Z             "plot_data",
2025-01-10T13:49:05.5372670Z             "plot_colors",
2025-01-10T13:49:05.5372746Z             "new_bin_edges",
2025-01-10T13:49:05.5372819Z         ],
2025-01-10T13:49:05.5372885Z     )
2025-01-10T13:49:05.5372973Z     def test_prepare_plot_data(
2025-01-10T13:49:05.5373042Z         self,
2025-01-10T13:49:05.5373134Z         plotter_prepare_plot_data,
2025-01-10T13:49:05.5373219Z         request,
2025-01-10T13:49:05.5373293Z         attribute,
2025-01-10T13:49:05.5373370Z     ):
2025-01-10T13:49:05.5373441Z         """
2025-01-10T13:49:05.5373585Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:49:05.5373773Z     
2025-01-10T13:49:05.5373856Z         Parameters:
2025-01-10T13:49:05.5373928Z         -----------
2025-01-10T13:49:05.5374113Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:49:05.5374239Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5374405Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:49:05.5374473Z         """
2025-01-10T13:49:05.5374585Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5374720Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:49:05.5374872Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:49:05.5375030Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:49:05.5375181Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:49:05.5375310Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:49:05.5375427Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:49:05.5375550Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:49:05.5375559Z 
2025-01-10T13:49:05.5375824Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:49:05.5375945Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5375949Z 
2025-01-10T13:49:05.5376380Z args = (<function assert_allclose.<locals>.compare at 0x7f3bcf98a020>, array([11843.96225504, 11843.96225504, 11843.96225504,...1104.14894249, 11194.10880903, 12818.679236  ,
2025-01-10T13:49:05.5376522Z        12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
2025-01-10T13:49:05.5376775Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5376780Z 
2025-01-10T13:49:05.5376853Z     @wraps(func)
2025-01-10T13:49:05.5376939Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5377021Z         with self._recreate_cm():
2025-01-10T13:49:05.5377111Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5377297Z E           AssertionError: 
2025-01-10T13:49:05.5377408Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5377483Z E           
2025-01-10T13:49:05.5377575Z E           (shapes (515,), (508,) mismatch)
2025-01-10T13:49:05.5377729Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:49:05.5377847Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:49:05.5377969Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:49:05.5378130Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:49:05.5378247Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:49:05.5378366Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:49:05.5378371Z 
2025-01-10T13:49:05.5378571Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5378723Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5378969Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5379213Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5379365Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5379667Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5379874Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data5-plot_data] __
2025-01-10T13:49:05.5379879Z 
2025-01-10T13:49:05.5380142Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf843b9e0>
2025-01-10T13:49:05.5380420Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>
2025-01-10T13:49:05.5380693Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data5-plot_data]>>
2025-01-10T13:49:05.5380779Z attribute = 'plot_data'
2025-01-10T13:49:05.5380784Z 
2025-01-10T13:49:05.5380878Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5380952Z         "attribute",
2025-01-10T13:49:05.5381025Z         [
2025-01-10T13:49:05.5381101Z             "plot_data",
2025-01-10T13:49:05.5381185Z             "plot_colors",
2025-01-10T13:49:05.5381267Z             "new_bin_edges",
2025-01-10T13:49:05.5381336Z         ],
2025-01-10T13:49:05.5381409Z     )
2025-01-10T13:49:05.5381518Z     def test_prepare_plot_data(
2025-01-10T13:49:05.5381654Z         self,
2025-01-10T13:49:05.5381809Z         plotter_prepare_plot_data,
2025-01-10T13:49:05.5381943Z         request,
2025-01-10T13:49:05.5382026Z         attribute,
2025-01-10T13:49:05.5382102Z     ):
2025-01-10T13:49:05.5382172Z         """
2025-01-10T13:49:05.5382311Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:49:05.5382387Z     
2025-01-10T13:49:05.5382467Z         Parameters:
2025-01-10T13:49:05.5382544Z         -----------
2025-01-10T13:49:05.5382829Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:49:05.5382924Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5383089Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:49:05.5383169Z         """
2025-01-10T13:49:05.5383276Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5383418Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:49:05.5383562Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:49:05.5383832Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:49:05.5383985Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:49:05.5384110Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:49:05.5384345Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:49:05.5384472Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:49:05.5384477Z 
2025-01-10T13:49:05.5384622Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:49:05.5384738Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5384742Z 
2025-01-10T13:49:05.5385212Z args = (<function assert_allclose.<locals>.compare at 0x7f3bcb668220>, array([12467.89648692, 12467.89648692, 12357.74827994,...), array([13692.75973672, 11362.93720064, 12466.53861691, ...,
2025-01-10T13:49:05.5385310Z        12605.43283975, 11152.96259546, 11172.04481521]))
2025-01-10T13:49:05.5385569Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5385575Z 
2025-01-10T13:49:05.5385649Z     @wraps(func)
2025-01-10T13:49:05.5385736Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5385825Z         with self._recreate_cm():
2025-01-10T13:49:05.5385917Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5386006Z E           AssertionError: 
2025-01-10T13:49:05.5386116Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5386195Z E           
2025-01-10T13:49:05.5386288Z E           (shapes (1481,), (1466,) mismatch)
2025-01-10T13:49:05.5386464Z E            ACTUAL: array([12467.896487, 12467.896487, 12357.74828 , ..., 13068.120893,
2025-01-10T13:49:05.5386549Z E                  11398.237865, 11111.204868])
2025-01-10T13:49:05.5386720Z E            DESIRED: array([13692.759737, 11362.937201, 12466.538617, ..., 12605.43284 ,
2025-01-10T13:49:05.5386801Z E                  11152.962595, 11172.044815])
2025-01-10T13:49:05.5386806Z 
2025-01-10T13:49:05.5387008Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5387160Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5387411Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5387754Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5387918Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5388279Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5388491Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data6-plot_data] __
2025-01-10T13:49:05.5388496Z 
2025-01-10T13:49:05.5388762Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf843bc20>
2025-01-10T13:49:05.5389053Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>
2025-01-10T13:49:05.5389329Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data6-plot_data]>>
2025-01-10T13:49:05.5389413Z attribute = 'plot_data'
2025-01-10T13:49:05.5389535Z 
2025-01-10T13:49:05.5389629Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5389709Z         "attribute",
2025-01-10T13:49:05.5389778Z         [
2025-01-10T13:49:05.5389862Z             "plot_data",
2025-01-10T13:49:05.5389940Z             "plot_colors",
2025-01-10T13:49:05.5390023Z             "new_bin_edges",
2025-01-10T13:49:05.5390092Z         ],
2025-01-10T13:49:05.5390163Z     )
2025-01-10T13:49:05.5390249Z     def test_prepare_plot_data(
2025-01-10T13:49:05.5390323Z         self,
2025-01-10T13:49:05.5390412Z         plotter_prepare_plot_data,
2025-01-10T13:49:05.5390488Z         request,
2025-01-10T13:49:05.5390559Z         attribute,
2025-01-10T13:49:05.5390632Z     ):
2025-01-10T13:49:05.5390700Z         """
2025-01-10T13:49:05.5390841Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:49:05.5390908Z     
2025-01-10T13:49:05.5391086Z         Parameters:
2025-01-10T13:49:05.5391158Z         -----------
2025-01-10T13:49:05.5391345Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:49:05.5391446Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5391611Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:49:05.5391684Z         """
2025-01-10T13:49:05.5391789Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5391936Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:49:05.5392085Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:49:05.5392253Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:49:05.5392401Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:49:05.5392533Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:49:05.5392654Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:49:05.5392783Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:49:05.5392792Z 
2025-01-10T13:49:05.5392942Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:49:05.5393056Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5393060Z 
2025-01-10T13:49:05.5393538Z args = (<function assert_allclose.<locals>.compare at 0x7f3bcb6d19e0>, array([11202.14920452, 13552.38987987, 11630.95782059,...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
2025-01-10T13:49:05.5393831Z        15754.62784966, 13174.4766832 , 11238.83568899]))
2025-01-10T13:49:05.5394101Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5394106Z 
2025-01-10T13:49:05.5394180Z     @wraps(func)
2025-01-10T13:49:05.5394273Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5394358Z         with self._recreate_cm():
2025-01-10T13:49:05.5394457Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5394552Z E           AssertionError: 
2025-01-10T13:49:05.5394659Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5394736Z E           
2025-01-10T13:49:05.5394826Z E           (shapes (136,), (147,) mismatch)
2025-01-10T13:49:05.5394987Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:49:05.5395105Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:49:05.5395232Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:49:05.5395388Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:49:05.5395509Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:49:05.5395628Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:49:05.5395644Z 
2025-01-10T13:49:05.5395845Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5396196Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data7-plot_data] __
2025-01-10T13:49:05.5396202Z 
2025-01-10T13:49:05.5396465Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf843be00>
2025-01-10T13:49:05.5396752Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>
2025-01-10T13:49:05.5397023Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data7-plot_data]>>
2025-01-10T13:49:05.5397112Z attribute = 'plot_data'
2025-01-10T13:49:05.5397116Z 
2025-01-10T13:49:05.5397206Z     @pytest.mark.parametrize(
2025-01-10T13:49:05.5397289Z         "attribute",
2025-01-10T13:49:05.5397359Z         [
2025-01-10T13:49:05.5397443Z             "plot_data",
2025-01-10T13:49:05.5397528Z             "plot_colors",
2025-01-10T13:49:05.5397605Z             "new_bin_edges",
2025-01-10T13:49:05.5397787Z         ],
2025-01-10T13:49:05.5397857Z     )
2025-01-10T13:49:05.5397955Z     def test_prepare_plot_data(
2025-01-10T13:49:05.5398029Z         self,
2025-01-10T13:49:05.5398129Z         plotter_prepare_plot_data,
2025-01-10T13:49:05.5398201Z         request,
2025-01-10T13:49:05.5398278Z         attribute,
2025-01-10T13:49:05.5398347Z     ):
2025-01-10T13:49:05.5398424Z         """
2025-01-10T13:49:05.5398557Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:49:05.5398632Z     
2025-01-10T13:49:05.5398707Z         Parameters:
2025-01-10T13:49:05.5398788Z         -----------
2025-01-10T13:49:05.5398965Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:49:05.5399069Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5399229Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:49:05.5399304Z         """
2025-01-10T13:49:05.5399414Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5399551Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:49:05.5399709Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:49:05.5399868Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:49:05.5400023Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:49:05.5400145Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:49:05.5400269Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:49:05.5400387Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:49:05.5400392Z 
2025-01-10T13:49:05.5400541Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:49:05.5400652Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5400662Z 
2025-01-10T13:49:05.5401137Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc8f53920>, array([12467.89648692, 12357.74827994, 11118.74739262,...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
2025-01-10T13:49:05.5401249Z        12229.96880815, 12113.40540961, 11152.96259546]))
2025-01-10T13:49:05.5401507Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5401512Z 
2025-01-10T13:49:05.5401593Z     @wraps(func)
2025-01-10T13:49:05.5401672Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5401763Z         with self._recreate_cm():
2025-01-10T13:49:05.5401847Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5401934Z E           AssertionError: 
2025-01-10T13:49:05.5402042Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5402116Z E           
2025-01-10T13:49:05.5402211Z E           (shapes (381,), (379,) mismatch)
2025-01-10T13:49:05.5402367Z E            ACTUAL: array([12467.896487, 12357.74828 , 11118.747393, 11202.149205,
2025-01-10T13:49:05.5402491Z E                  13552.38988 , 11630.957821, 12006.254109, 15295.708346,
2025-01-10T13:49:05.5402696Z E                  11660.899663, 11789.640304, 15161.117263, 12697.545823,...
2025-01-10T13:49:05.5402855Z E            DESIRED: array([12466.538617, 14269.760975, 11910.794005, 11196.260702,
2025-01-10T13:49:05.5402970Z E                  11633.386223, 12079.529869, 11966.991343, 11263.637708,
2025-01-10T13:49:05.5403094Z E                  14098.493392, 13656.398245, 12124.454378, 11838.909334,...
2025-01-10T13:49:05.5403098Z 
2025-01-10T13:49:05.5403297Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5403458Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5403795Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5404049Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5404318Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5404625Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5404833Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl0] _______
2025-01-10T13:49:05.5404838Z 
2025-01-10T13:49:05.5405098Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851c0b0>
2025-01-10T13:49:05.5405409Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3bbdcdde50>
2025-01-10T13:49:05.5405893Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5406142Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl0]>>
2025-01-10T13:49:05.5406146Z 
2025-01-10T13:49:05.5406243Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5406405Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:49:05.5406482Z     ):
2025-01-10T13:49:05.5406552Z         """
2025-01-10T13:49:05.5406686Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5406752Z     
2025-01-10T13:49:05.5406885Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5406954Z     
2025-01-10T13:49:05.5407036Z         Parameters:
2025-01-10T13:49:05.5407108Z         -----------
2025-01-10T13:49:05.5407268Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:49:05.5407421Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:49:05.5407522Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5407599Z         """
2025-01-10T13:49:05.5407690Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:49:05.5407802Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5407973Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:49:05.5408128Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5408224Z             expected_values = expected.get(
2025-01-10T13:49:05.5408314Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5408398Z             ).values.flatten()
2025-01-10T13:49:05.5408532Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:49:05.5408599Z     
2025-01-10T13:49:05.5408736Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5408913Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5409052Z                     expected_values,
2025-01-10T13:49:05.5409201Z                     actual_values,
2025-01-10T13:49:05.5409314Z                     rtol=0.3,
2025-01-10T13:49:05.5409399Z                     atol=3,
2025-01-10T13:49:05.5409470Z                 )
2025-01-10T13:49:05.5409474Z 
2025-01-10T13:49:05.5409631Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:49:05.5409882Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5409887Z 
2025-01-10T13:49:05.5410297Z args = (<function assert_allclose.<locals>.compare at 0x7f3bea4bf740>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5410379Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:49:05.5410643Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5410648Z 
2025-01-10T13:49:05.5410732Z     @wraps(func)
2025-01-10T13:49:05.5410815Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5410907Z         with self._recreate_cm():
2025-01-10T13:49:05.5410993Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5411082Z E           AssertionError: 
2025-01-10T13:49:05.5411264Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5411342Z E           
2025-01-10T13:49:05.5411440Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.5411560Z E           Max absolute difference among violations: 26
2025-01-10T13:49:05.5411686Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.5411846Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.5411935Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.5412095Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5412187Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.5412192Z 
2025-01-10T13:49:05.5412395Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5412553Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5412799Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5413236Z 	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:420)
2025-01-10T13:49:05.5413387Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5413994Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:420 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
2025-01-10T13:49:05.5414203Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl1] _______
2025-01-10T13:49:05.5414207Z 
2025-01-10T13:49:05.5414468Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851c170>
2025-01-10T13:49:05.5414775Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3be3919250>
2025-01-10T13:49:05.5415259Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5415516Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl1]>>
2025-01-10T13:49:05.5415521Z 
2025-01-10T13:49:05.5415607Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5415769Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:49:05.5415846Z     ):
2025-01-10T13:49:05.5415915Z         """
2025-01-10T13:49:05.5416051Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5416119Z     
2025-01-10T13:49:05.5416249Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5416318Z     
2025-01-10T13:49:05.5416398Z         Parameters:
2025-01-10T13:49:05.5416471Z         -----------
2025-01-10T13:49:05.5416639Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:49:05.5416790Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:49:05.5416893Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5417107Z         """
2025-01-10T13:49:05.5417209Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:49:05.5417317Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5417488Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:49:05.5417637Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5417739Z             expected_values = expected.get(
2025-01-10T13:49:05.5417834Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5417916Z             ).values.flatten()
2025-01-10T13:49:05.5418051Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:49:05.5418120Z     
2025-01-10T13:49:05.5418253Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5418347Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5418543Z                     expected_values,
2025-01-10T13:49:05.5418622Z                     actual_values,
2025-01-10T13:49:05.5418706Z                     rtol=0.3,
2025-01-10T13:49:05.5418780Z                     atol=3,
2025-01-10T13:49:05.5418858Z                 )
2025-01-10T13:49:05.5418863Z 
2025-01-10T13:49:05.5419004Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:49:05.5419122Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5419127Z 
2025-01-10T13:49:05.5419530Z args = (<function assert_allclose.<locals>.compare at 0x7f3bda6e4a40>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5419614Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:49:05.5419877Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5419882Z 
2025-01-10T13:49:05.5419958Z     @wraps(func)
2025-01-10T13:49:05.5420049Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5420135Z         with self._recreate_cm():
2025-01-10T13:49:05.5420230Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5420314Z E           AssertionError: 
2025-01-10T13:49:05.5420423Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5420500Z E           
2025-01-10T13:49:05.5420592Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.5420713Z E           Max absolute difference among violations: 26
2025-01-10T13:49:05.5420848Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.5421006Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.5421098Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.5421261Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5421348Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.5421356Z 
2025-01-10T13:49:05.5421566Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5421768Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl4] _______
2025-01-10T13:49:05.5421779Z 
2025-01-10T13:49:05.5422040Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851c560>
2025-01-10T13:49:05.5422353Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3be3918380>
2025-01-10T13:49:05.5422838Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5423084Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl4]>>
2025-01-10T13:49:05.5423089Z 
2025-01-10T13:49:05.5423176Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5423342Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:49:05.5423520Z     ):
2025-01-10T13:49:05.5423718Z         """
2025-01-10T13:49:05.5423851Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5423926Z     
2025-01-10T13:49:05.5424126Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5424227Z     
2025-01-10T13:49:05.5424367Z         Parameters:
2025-01-10T13:49:05.5424475Z         -----------
2025-01-10T13:49:05.5424822Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:49:05.5425057Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:49:05.5425184Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5425320Z         """
2025-01-10T13:49:05.5425443Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:49:05.5425666Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5425925Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:49:05.5426240Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5426407Z             expected_values = expected.get(
2025-01-10T13:49:05.5426543Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5426724Z             ).values.flatten()
2025-01-10T13:49:05.5426900Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:49:05.5427032Z     
2025-01-10T13:49:05.5427191Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5427372Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5427469Z                     expected_values,
2025-01-10T13:49:05.5427673Z                     actual_values,
2025-01-10T13:49:05.5427779Z                     rtol=0.3,
2025-01-10T13:49:05.5427919Z                     atol=3,
2025-01-10T13:49:05.5428072Z                 )
2025-01-10T13:49:05.5428077Z 
2025-01-10T13:49:05.5428236Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:49:05.5428483Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5428492Z 
2025-01-10T13:49:05.5428930Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc6428540>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   ...]), array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:49:05.5429102Z          2,   5,   5,   5,   5,   0,   0]))
2025-01-10T13:49:05.5429390Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5429431Z 
2025-01-10T13:49:05.5429522Z     @wraps(func)
2025-01-10T13:49:05.5429723Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5429839Z         with self._recreate_cm():
2025-01-10T13:49:05.5430006Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5430118Z E           AssertionError: 
2025-01-10T13:49:05.5430271Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5430421Z E           
2025-01-10T13:49:05.5430600Z E           Mismatched elements: 4 / 20 (20%)
2025-01-10T13:49:05.5430768Z E           Max absolute difference among violations: 24
2025-01-10T13:49:05.5430949Z E           Max relative difference among violations: 0.65
2025-01-10T13:49:05.5431138Z E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:49:05.5431321Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:49:05.5431561Z E            DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:49:05.5431693Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:49:05.5431698Z 
2025-01-10T13:49:05.5431966Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5432150Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5432491Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5432797Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5433156Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5433488Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5433875Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl5] _______
2025-01-10T13:49:05.5433881Z 
2025-01-10T13:49:05.5434253Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851c620>
2025-01-10T13:49:05.5434624Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3be3e4a4e0>
2025-01-10T13:49:05.5435181Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5435581Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl5]>>
2025-01-10T13:49:05.5435591Z 
2025-01-10T13:49:05.5442975Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5443199Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:49:05.5443277Z     ):
2025-01-10T13:49:05.5443347Z         """
2025-01-10T13:49:05.5443493Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5443561Z     
2025-01-10T13:49:05.5443856Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5443930Z     
2025-01-10T13:49:05.5444005Z         Parameters:
2025-01-10T13:49:05.5444088Z         -----------
2025-01-10T13:49:05.5444260Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:49:05.5444421Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:49:05.5444519Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5444594Z         """
2025-01-10T13:49:05.5444696Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:49:05.5444808Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5444982Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:49:05.5445135Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5445231Z             expected_values = expected.get(
2025-01-10T13:49:05.5445322Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5445406Z             ).values.flatten()
2025-01-10T13:49:05.5445546Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:49:05.5445618Z     
2025-01-10T13:49:05.5445749Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5445847Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5445935Z                     expected_values,
2025-01-10T13:49:05.5446019Z                     actual_values,
2025-01-10T13:49:05.5446094Z                     rtol=0.3,
2025-01-10T13:49:05.5446175Z                     atol=3,
2025-01-10T13:49:05.5446246Z                 )
2025-01-10T13:49:05.5446254Z 
2025-01-10T13:49:05.5446410Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:49:05.5446528Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5446533Z 
2025-01-10T13:49:05.5446943Z args = (<function assert_allclose.<locals>.compare at 0x7f3be9642340>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5447032Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:49:05.5447294Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5447299Z 
2025-01-10T13:49:05.5447379Z     @wraps(func)
2025-01-10T13:49:05.5447462Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5447549Z         with self._recreate_cm():
2025-01-10T13:49:05.5447641Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5447730Z E           AssertionError: 
2025-01-10T13:49:05.5448009Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5448087Z E           
2025-01-10T13:49:05.5448180Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.5448302Z E           Max absolute difference among violations: 26
2025-01-10T13:49:05.5448431Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.5448598Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.5448695Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.5448848Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5448938Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.5448943Z 
2025-01-10T13:49:05.5449151Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5449441Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5449720Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5450069Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5450220Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5450581Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5450786Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl7] _______
2025-01-10T13:49:05.5450790Z 
2025-01-10T13:49:05.5451056Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851c7a0>
2025-01-10T13:49:05.5451366Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3be9610860>
2025-01-10T13:49:05.5451864Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5452113Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl7]>>
2025-01-10T13:49:05.5452117Z 
2025-01-10T13:49:05.5452210Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5452370Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:49:05.5452447Z     ):
2025-01-10T13:49:05.5452514Z         """
2025-01-10T13:49:05.5452646Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5452713Z     
2025-01-10T13:49:05.5452846Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5452912Z     
2025-01-10T13:49:05.5452991Z         Parameters:
2025-01-10T13:49:05.5453063Z         -----------
2025-01-10T13:49:05.5453230Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:49:05.5453381Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:49:05.5453481Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5453548Z         """
2025-01-10T13:49:05.5453797Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:49:05.5453914Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5454080Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:49:05.5454234Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5454329Z             expected_values = expected.get(
2025-01-10T13:49:05.5454418Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5454500Z             ).values.flatten()
2025-01-10T13:49:05.5454637Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:49:05.5454703Z     
2025-01-10T13:49:05.5454843Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5454935Z                 np.testing.assert_allclose(
2025-01-10T13:49:05.5455155Z                     expected_values,
2025-01-10T13:49:05.5455234Z                     actual_values,
2025-01-10T13:49:05.5455313Z                     rtol=0.3,
2025-01-10T13:49:05.5455386Z                     atol=3,
2025-01-10T13:49:05.5455459Z                 )
2025-01-10T13:49:05.5455532Z             else:
2025-01-10T13:49:05.5455667Z                 assert np.array_equal(expected_values, actual_values)
2025-01-10T13:49:05.5455746Z     
2025-01-10T13:49:05.5455852Z         labels = expected["plot_data_hdf/scalars"]
2025-01-10T13:49:05.5455976Z         for index1, data in enumerate(fig.get_children()):
2025-01-10T13:49:05.5456074Z             if isinstance(data.get_label(), str):
2025-01-10T13:49:05.5456153Z                 assert (
2025-01-10T13:49:05.5456272Z                     getattr(labels, "label" + str(index1)).decode()
2025-01-10T13:49:05.5456465Z                     == data.get_label()
2025-01-10T13:49:05.5456534Z                 )
2025-01-10T13:49:05.5456636Z             if isinstance(data, Line2D):
2025-01-10T13:49:05.5456726Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5456814Z                     data.get_xydata(),
2025-01-10T13:49:05.5456947Z                     expected.get("plot_data_hdf/" + "data" + str(index1)),
2025-01-10T13:49:05.5457026Z                     rtol=0.3,
2025-01-10T13:49:05.5457103Z                     atol=3,
2025-01-10T13:49:05.5457170Z                 )
2025-01-10T13:49:05.5457174Z 
2025-01-10T13:49:05.5457323Z tardis/visualization/tools/tests/test_liv_plot.py:335: 
2025-01-10T13:49:05.5457438Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5457443Z 
2025-01-10T13:49:05.5457697Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc657dd00>, array([[1.10e+04, 9.00e+00],
2025-01-10T13:49:05.5457771Z        [1.19e+04, 9.00e+0...,
2025-01-10T13:49:05.5457853Z        [1.82e+04, 0.00e+00],
2025-01-10T13:49:05.5457924Z        [1.91e+04, 0.00e+00],
2025-01-10T13:49:05.5458003Z        [1.91e+04, 0.00e+00],
2025-01-10T13:49:05.5458078Z        [2.00e+04, 0.00e+00]]))
2025-01-10T13:49:05.5458334Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5458339Z 
2025-01-10T13:49:05.5458417Z     @wraps(func)
2025-01-10T13:49:05.5458496Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5458585Z         with self._recreate_cm():
2025-01-10T13:49:05.5458667Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5458752Z E           AssertionError: 
2025-01-10T13:49:05.5458852Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5458925Z E           
2025-01-10T13:49:05.5459018Z E           Mismatched elements: 2 / 40 (5%)
2025-01-10T13:49:05.5459137Z E           Max absolute difference among violations: 4.
2025-01-10T13:49:05.5459267Z E           Max relative difference among violations: 1.33333333
2025-01-10T13:49:05.5459364Z E            ACTUAL: array([[1.10e+04, 9.00e+00],
2025-01-10T13:49:05.5459447Z E                  [1.19e+04, 9.00e+00],
2025-01-10T13:49:05.5459533Z E                  [1.19e+04, 5.00e+00],...
2025-01-10T13:49:05.5459624Z E            DESIRED: array([[1.10e+04, 1.10e+01],
2025-01-10T13:49:05.5459707Z E                  [1.19e+04, 1.10e+01],
2025-01-10T13:49:05.5459792Z E                  [1.19e+04, 5.00e+00],...
2025-01-10T13:49:05.5459796Z 
2025-01-10T13:49:05.5459996Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5460156Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5460390Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5460645Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5460793Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5461105Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5461400Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply0] _______
2025-01-10T13:49:05.5461410Z 
2025-01-10T13:49:05.5461670Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851d490>
2025-01-10T13:49:05.5461989Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3be31106e0>
2025-01-10T13:49:05.5462083Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5462234Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:49:05.5462366Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:49:05.5462574Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5462887Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply0]>>
2025-01-10T13:49:05.5462895Z 
2025-01-10T13:49:05.5462992Z     def test_generate_plot_ply(
2025-01-10T13:49:05.5463161Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5463229Z     ):
2025-01-10T13:49:05.5463305Z         """
2025-01-10T13:49:05.5463431Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5463503Z     
2025-01-10T13:49:05.5463763Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5463837Z     
2025-01-10T13:49:05.5463913Z         Parameters:
2025-01-10T13:49:05.5463992Z         ----------
2025-01-10T13:49:05.5464147Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:49:05.5464288Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:49:05.5464382Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5464456Z         """
2025-01-10T13:49:05.5464549Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5464656Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5464831Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5464903Z     
2025-01-10T13:49:05.5465053Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5465146Z             expected_values = expected.get(
2025-01-10T13:49:05.5465234Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5465313Z             ).values.flatten()
2025-01-10T13:49:05.5465456Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:49:05.5465523Z     
2025-01-10T13:49:05.5465656Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5465748Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5465833Z                     expected_values,
2025-01-10T13:49:05.5465912Z                     actual_values,
2025-01-10T13:49:05.5465995Z                     rtol=0.3,
2025-01-10T13:49:05.5466071Z                     atol=3,
2025-01-10T13:49:05.5466148Z                 )
2025-01-10T13:49:05.5466152Z 
2025-01-10T13:49:05.5466299Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:49:05.5466411Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5466415Z 
2025-01-10T13:49:05.5466815Z args = (<function assert_allclose.<locals>.compare at 0x7f3bd995ea20>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5466895Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:49:05.5467148Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5467153Z 
2025-01-10T13:49:05.5467223Z     @wraps(func)
2025-01-10T13:49:05.5467308Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5467394Z         with self._recreate_cm():
2025-01-10T13:49:05.5467483Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5467686Z E           AssertionError: 
2025-01-10T13:49:05.5467786Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5467860Z E           
2025-01-10T13:49:05.5467954Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.5468075Z E           Max absolute difference among violations: 26
2025-01-10T13:49:05.5468200Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.5468354Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.5468443Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.5468601Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5468685Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.5468690Z 
2025-01-10T13:49:05.5468893Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5469157Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5469393Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5469818Z 	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:522)
2025-01-10T13:49:05.5469966Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5470400Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:522 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
2025-01-10T13:49:05.5470600Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply1] _______
2025-01-10T13:49:05.5470605Z 
2025-01-10T13:49:05.5470865Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851d580>
2025-01-10T13:49:05.5471177Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3bbdce5430>
2025-01-10T13:49:05.5471281Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5471433Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:49:05.5471562Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:49:05.5471767Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5472006Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply1]>>
2025-01-10T13:49:05.5472010Z 
2025-01-10T13:49:05.5472102Z     def test_generate_plot_ply(
2025-01-10T13:49:05.5472263Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5472335Z     ):
2025-01-10T13:49:05.5472402Z         """
2025-01-10T13:49:05.5472532Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5472598Z     
2025-01-10T13:49:05.5472729Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5472801Z     
2025-01-10T13:49:05.5472877Z         Parameters:
2025-01-10T13:49:05.5472956Z         ----------
2025-01-10T13:49:05.5473112Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:49:05.5473251Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:49:05.5473345Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5473416Z         """
2025-01-10T13:49:05.5473505Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5473720Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5473893Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5473965Z     
2025-01-10T13:49:05.5474109Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5474207Z             expected_values = expected.get(
2025-01-10T13:49:05.5474320Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5474411Z             ).values.flatten()
2025-01-10T13:49:05.5474694Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:49:05.5474762Z     
2025-01-10T13:49:05.5474894Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5474984Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5475071Z                     expected_values,
2025-01-10T13:49:05.5475147Z                     actual_values,
2025-01-10T13:49:05.5475228Z                     rtol=0.3,
2025-01-10T13:49:05.5475300Z                     atol=3,
2025-01-10T13:49:05.5475372Z                 )
2025-01-10T13:49:05.5475377Z 
2025-01-10T13:49:05.5475518Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:49:05.5475634Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5475639Z 
2025-01-10T13:49:05.5476040Z args = (<function assert_allclose.<locals>.compare at 0x7f3bca45f880>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5476250Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:49:05.5476505Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5476510Z 
2025-01-10T13:49:05.5476582Z     @wraps(func)
2025-01-10T13:49:05.5476666Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5476747Z         with self._recreate_cm():
2025-01-10T13:49:05.5476836Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5476915Z E           AssertionError: 
2025-01-10T13:49:05.5477021Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5477089Z E           
2025-01-10T13:49:05.5477187Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.5477299Z E           Max absolute difference among violations: 26
2025-01-10T13:49:05.5477429Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.5477585Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.5477691Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.5477846Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5477942Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.5477946Z 
2025-01-10T13:49:05.5478144Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5478352Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply4] _______
2025-01-10T13:49:05.5478357Z 
2025-01-10T13:49:05.5478624Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851d9a0>
2025-01-10T13:49:05.5478934Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3bd9ab6360>
2025-01-10T13:49:05.5479033Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5479182Z     'data': [{'line': {'color': 'rgb(127, 0, 0)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:49:05.5479330Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:49:05.5479542Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5479791Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply4]>>
2025-01-10T13:49:05.5479796Z 
2025-01-10T13:49:05.5479888Z     def test_generate_plot_ply(
2025-01-10T13:49:05.5480055Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5480129Z     ):
2025-01-10T13:49:05.5480200Z         """
2025-01-10T13:49:05.5480339Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5480407Z     
2025-01-10T13:49:05.5480546Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5480614Z     
2025-01-10T13:49:05.5480699Z         Parameters:
2025-01-10T13:49:05.5480775Z         ----------
2025-01-10T13:49:05.5480939Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:49:05.5481164Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:49:05.5481263Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5481332Z         """
2025-01-10T13:49:05.5481432Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5481537Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5481715Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5481788Z     
2025-01-10T13:49:05.5481935Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5482034Z             expected_values = expected.get(
2025-01-10T13:49:05.5482117Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5482204Z             ).values.flatten()
2025-01-10T13:49:05.5482341Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:49:05.5482491Z     
2025-01-10T13:49:05.5482620Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5482720Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5482799Z                     expected_values,
2025-01-10T13:49:05.5482882Z                     actual_values,
2025-01-10T13:49:05.5482956Z                     rtol=0.3,
2025-01-10T13:49:05.5483035Z                     atol=3,
2025-01-10T13:49:05.5483104Z                 )
2025-01-10T13:49:05.5483114Z 
2025-01-10T13:49:05.5483255Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:49:05.5483373Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5483378Z 
2025-01-10T13:49:05.5483894Z args = (<function assert_allclose.<locals>.compare at 0x7f3bd995fce0>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   ...]), array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:49:05.5483985Z          2,   5,   5,   5,   5,   0,   0]))
2025-01-10T13:49:05.5484238Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5484246Z 
2025-01-10T13:49:05.5484323Z     @wraps(func)
2025-01-10T13:49:05.5484402Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5484493Z         with self._recreate_cm():
2025-01-10T13:49:05.5484582Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5484664Z E           AssertionError: 
2025-01-10T13:49:05.5484771Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5484840Z E           
2025-01-10T13:49:05.5484938Z E           Mismatched elements: 4 / 20 (20%)
2025-01-10T13:49:05.5485052Z E           Max absolute difference among violations: 24
2025-01-10T13:49:05.5485174Z E           Max relative difference among violations: 0.65
2025-01-10T13:49:05.5485328Z E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:49:05.5485430Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:49:05.5485594Z E            DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:49:05.5485684Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:49:05.5485688Z 
2025-01-10T13:49:05.5485894Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5486046Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5486282Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5486529Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5486681Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5486980Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5487186Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply5] _______
2025-01-10T13:49:05.5487310Z 
2025-01-10T13:49:05.5487570Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851da60>
2025-01-10T13:49:05.5487893Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3be8511700>
2025-01-10T13:49:05.5487995Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5488142Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:49:05.5488279Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:49:05.5488478Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5488723Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply5]>>
2025-01-10T13:49:05.5488728Z 
2025-01-10T13:49:05.5488814Z     def test_generate_plot_ply(
2025-01-10T13:49:05.5489087Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5489160Z     ):
2025-01-10T13:49:05.5489235Z         """
2025-01-10T13:49:05.5489362Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5489436Z     
2025-01-10T13:49:05.5489566Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5489632Z     
2025-01-10T13:49:05.5489714Z         Parameters:
2025-01-10T13:49:05.5489787Z         ----------
2025-01-10T13:49:05.5489953Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:49:05.5490089Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:49:05.5490190Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5490261Z         """
2025-01-10T13:49:05.5490358Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5490462Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5490642Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5490718Z     
2025-01-10T13:49:05.5490867Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5490964Z             expected_values = expected.get(
2025-01-10T13:49:05.5491054Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5491140Z             ).values.flatten()
2025-01-10T13:49:05.5491273Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:49:05.5491346Z     
2025-01-10T13:49:05.5491472Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5491571Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5491652Z                     expected_values,
2025-01-10T13:49:05.5491738Z                     actual_values,
2025-01-10T13:49:05.5491813Z                     rtol=0.3,
2025-01-10T13:49:05.5491891Z                     atol=3,
2025-01-10T13:49:05.5491959Z                 )
2025-01-10T13:49:05.5491963Z 
2025-01-10T13:49:05.5492112Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:49:05.5492225Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5492233Z 
2025-01-10T13:49:05.5492634Z args = (<function assert_allclose.<locals>.compare at 0x7f3bca45f420>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5492719Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:49:05.5492973Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5492978Z 
2025-01-10T13:49:05.5493055Z     @wraps(func)
2025-01-10T13:49:05.5493135Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5493221Z         with self._recreate_cm():
2025-01-10T13:49:05.5493304Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5493390Z E           AssertionError: 
2025-01-10T13:49:05.5493490Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5493568Z E           
2025-01-10T13:49:05.5493802Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.5494065Z E           Max absolute difference among violations: 26
2025-01-10T13:49:05.5494197Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.5494349Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.5494445Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.5494600Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.5494688Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.5494693Z 
2025-01-10T13:49:05.5494891Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5495048Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5495280Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5495762Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5495920Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5496268Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5496472Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply7] _______
2025-01-10T13:49:05.5496477Z 
2025-01-10T13:49:05.5496739Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f3bf851dc10>
2025-01-10T13:49:05.5497059Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f3be9608c50>
2025-01-10T13:49:05.5497151Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5497305Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:49:05.5497442Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:49:05.5497642Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f3bcba69160>)
2025-01-10T13:49:05.5497884Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply7]>>
2025-01-10T13:49:05.5497889Z 
2025-01-10T13:49:05.5497975Z     def test_generate_plot_ply(
2025-01-10T13:49:05.5498145Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5498214Z     ):
2025-01-10T13:49:05.5498288Z         """
2025-01-10T13:49:05.5498412Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:49:05.5498486Z     
2025-01-10T13:49:05.5498611Z         Compares generated plot data with regression data.
2025-01-10T13:49:05.5498684Z     
2025-01-10T13:49:05.5498760Z         Parameters:
2025-01-10T13:49:05.5498838Z         ----------
2025-01-10T13:49:05.5498996Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:49:05.5499140Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:49:05.5499241Z         request: Pytest's request fixture.
2025-01-10T13:49:05.5499309Z         """
2025-01-10T13:49:05.5499409Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5499514Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5499690Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5499757Z     
2025-01-10T13:49:05.5499905Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:49:05.5499998Z             expected_values = expected.get(
2025-01-10T13:49:05.5500091Z                 "plot_data_hdf/" + item
2025-01-10T13:49:05.5500174Z             ).values.flatten()
2025-01-10T13:49:05.5500316Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:49:05.5500388Z     
2025-01-10T13:49:05.5500521Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:49:05.5500724Z                 np.testing.assert_allclose(
2025-01-10T13:49:05.5500806Z                     expected_values,
2025-01-10T13:49:05.5500891Z                     actual_values,
2025-01-10T13:49:05.5500966Z                     rtol=0.3,
2025-01-10T13:49:05.5501050Z                     atol=3,
2025-01-10T13:49:05.5501121Z                 )
2025-01-10T13:49:05.5501197Z             else:
2025-01-10T13:49:05.5501329Z                 assert np.array_equal(expected_values, actual_values)
2025-01-10T13:49:05.5501437Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5501542Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5501632Z             if data.stackgroup:
2025-01-10T13:49:05.5501706Z                 assert (
2025-01-10T13:49:05.5501794Z                     data.stackgroup
2025-01-10T13:49:05.5501865Z                     == getattr(
2025-01-10T13:49:05.5502057Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5502166Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5502240Z                     ).decode()
2025-01-10T13:49:05.5502314Z                 )
2025-01-10T13:49:05.5502391Z             if data.name:
2025-01-10T13:49:05.5502470Z                 assert (
2025-01-10T13:49:05.5502546Z                     data.name
2025-01-10T13:49:05.5502624Z                     == getattr(
2025-01-10T13:49:05.5502726Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5502822Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5502896Z                     ).decode()
2025-01-10T13:49:05.5502968Z                 )
2025-01-10T13:49:05.5503061Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5503137Z                 data.x,
2025-01-10T13:49:05.5503244Z                 expected.get(group + "x").values.flatten(),
2025-01-10T13:49:05.5503326Z                 rtol=0.3,
2025-01-10T13:49:05.5503396Z                 atol=3,
2025-01-10T13:49:05.5503472Z             )
2025-01-10T13:49:05.5503565Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5503833Z                 data.y,
2025-01-10T13:49:05.5503945Z                 expected.get(group + "y").values.flatten(),
2025-01-10T13:49:05.5504018Z                 rtol=0.3,
2025-01-10T13:49:05.5504094Z                 atol=3,
2025-01-10T13:49:05.5504160Z             )
2025-01-10T13:49:05.5504164Z 
2025-01-10T13:49:05.5504310Z tardis/visualization/tools/tests/test_liv_plot.py:518: 
2025-01-10T13:49:05.5504421Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5504426Z 
2025-01-10T13:49:05.5504820Z args = (<function assert_allclose.<locals>.compare at 0x7f3bca45ea20>, array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]), array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5504891Z         0,  0,  0]))
2025-01-10T13:49:05.5505152Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:49:05.5505161Z 
2025-01-10T13:49:05.5505236Z     @wraps(func)
2025-01-10T13:49:05.5505319Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5505406Z         with self._recreate_cm():
2025-01-10T13:49:05.5505490Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5505575Z E           AssertionError: 
2025-01-10T13:49:05.5505675Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.5505750Z E           
2025-01-10T13:49:05.5505842Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.5505958Z E           Max absolute difference among violations: 4
2025-01-10T13:49:05.5506086Z E           Max relative difference among violations: 1.33333333
2025-01-10T13:49:05.5506232Z E            ACTUAL: array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
2025-01-10T13:49:05.5506382Z E            DESIRED: array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5506588Z E                   0,  0,  0])
2025-01-10T13:49:05.5506592Z 
2025-01-10T13:49:05.5506798Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5506951Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:49:05.5507186Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:49:05.5507435Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:49:05.5507590Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:49:05.5507890Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:49:05.5508120Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data0] _
2025-01-10T13:49:05.5508125Z 
2025-01-10T13:49:05.5508509Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf8528fe0>
2025-01-10T13:49:05.5508821Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5509149Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bd1bcafc0>
2025-01-10T13:49:05.5509428Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data0]>>
2025-01-10T13:49:05.5509434Z 
2025-01-10T13:49:05.5509532Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5509602Z         self,
2025-01-10T13:49:05.5509702Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5509788Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5509862Z         request,
2025-01-10T13:49:05.5509928Z     ):
2025-01-10T13:49:05.5510040Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5510224Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5510313Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5510499Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5510584Z             plot_object = getattr(
2025-01-10T13:49:05.5510712Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5510781Z             )
2025-01-10T13:49:05.5510883Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5511041Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5511149Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5511245Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5511377Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5511447Z                 )
2025-01-10T13:49:05.5511458Z 
2025-01-10T13:49:05.5511605Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5511724Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5511731Z 
2025-01-10T13:49:05.5512199Z args = (<function assert_allclose.<locals>.compare at 0x7f3bd9c48fe0>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:49:05.5512306Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5512562Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5512567Z 
2025-01-10T13:49:05.5512644Z     @wraps(func)
2025-01-10T13:49:05.5512724Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5512818Z         with self._recreate_cm():
2025-01-10T13:49:05.5512909Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5512991Z E           AssertionError: 
2025-01-10T13:49:05.5513104Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5513177Z E           
2025-01-10T13:49:05.5513281Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.5513503Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:49:05.5513749Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.5513919Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5514012Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5514178Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5514268Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5514272Z 
2025-01-10T13:49:05.5514473Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5514696Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data1] _
2025-01-10T13:49:05.5514701Z 
2025-01-10T13:49:05.5514969Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf8529760>
2025-01-10T13:49:05.5515390Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5515726Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bce927ec0>
2025-01-10T13:49:05.5516003Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data1]>>
2025-01-10T13:49:05.5516008Z 
2025-01-10T13:49:05.5516102Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5516171Z         self,
2025-01-10T13:49:05.5516268Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5516360Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5516429Z         request,
2025-01-10T13:49:05.5516500Z     ):
2025-01-10T13:49:05.5516600Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5516785Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5516871Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5517048Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5517136Z             plot_object = getattr(
2025-01-10T13:49:05.5517265Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5517332Z             )
2025-01-10T13:49:05.5517435Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5517590Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5517702Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5517802Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5517926Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5518003Z                 )
2025-01-10T13:49:05.5518007Z 
2025-01-10T13:49:05.5518148Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5518262Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5518270Z 
2025-01-10T13:49:05.5518740Z args = (<function assert_allclose.<locals>.compare at 0x7f3bbe83aa20>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:49:05.5518847Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5519100Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5519110Z 
2025-01-10T13:49:05.5519185Z     @wraps(func)
2025-01-10T13:49:05.5519270Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5519354Z         with self._recreate_cm():
2025-01-10T13:49:05.5519447Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5519527Z E           AssertionError: 
2025-01-10T13:49:05.5519637Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5519705Z E           
2025-01-10T13:49:05.5519813Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.5519946Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:49:05.5520195Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.5520361Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5520451Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5520617Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5520705Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5520710Z 
2025-01-10T13:49:05.5520910Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5521126Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data2] _
2025-01-10T13:49:05.5521131Z 
2025-01-10T13:49:05.5521397Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf8529bb0>
2025-01-10T13:49:05.5521778Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5522115Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc8348440>
2025-01-10T13:49:05.5522392Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data2]>>
2025-01-10T13:49:05.5522402Z 
2025-01-10T13:49:05.5522492Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5522571Z         self,
2025-01-10T13:49:05.5522666Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5522760Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5522830Z         request,
2025-01-10T13:49:05.5522902Z     ):
2025-01-10T13:49:05.5523003Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5523187Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5523269Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5523451Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5523537Z             plot_object = getattr(
2025-01-10T13:49:05.5523780Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5523849Z             )
2025-01-10T13:49:05.5523949Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5524114Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5524218Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5524316Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5524440Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5524513Z                 )
2025-01-10T13:49:05.5524518Z 
2025-01-10T13:49:05.5524659Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5524772Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5524780Z 
2025-01-10T13:49:05.5525237Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc8315260>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:49:05.5525344Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5525599Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5525604Z 
2025-01-10T13:49:05.5525675Z     @wraps(func)
2025-01-10T13:49:05.5525760Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5525843Z         with self._recreate_cm():
2025-01-10T13:49:05.5525934Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5526014Z E           AssertionError: 
2025-01-10T13:49:05.5526123Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5526191Z E           
2025-01-10T13:49:05.5526292Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.5526431Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:49:05.5526696Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.5526859Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5526948Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5527115Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5527199Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5527203Z 
2025-01-10T13:49:05.5527402Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5527620Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data3] _
2025-01-10T13:49:05.5527625Z 
2025-01-10T13:49:05.5527894Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf8529ca0>
2025-01-10T13:49:05.5528311Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5528645Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3b85561fa0>
2025-01-10T13:49:05.5528924Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data3]>>
2025-01-10T13:49:05.5528930Z 
2025-01-10T13:49:05.5529017Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5529090Z         self,
2025-01-10T13:49:05.5529180Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5529270Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5529340Z         request,
2025-01-10T13:49:05.5529412Z     ):
2025-01-10T13:49:05.5529514Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5529695Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5529776Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5529956Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5530041Z             plot_object = getattr(
2025-01-10T13:49:05.5530165Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5530237Z             )
2025-01-10T13:49:05.5530334Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5530497Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5530597Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5530693Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5530816Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5530889Z                 )
2025-01-10T13:49:05.5530894Z 
2025-01-10T13:49:05.5531038Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5531151Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5531159Z 
2025-01-10T13:49:05.5531624Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795ea20>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:49:05.5531724Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5531981Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5531987Z 
2025-01-10T13:49:05.5532060Z     @wraps(func)
2025-01-10T13:49:05.5532142Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5532223Z         with self._recreate_cm():
2025-01-10T13:49:05.5532313Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5532394Z E           AssertionError: 
2025-01-10T13:49:05.5532504Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5532571Z E           
2025-01-10T13:49:05.5532670Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.5532807Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:49:05.5532936Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.5533196Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5533280Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5533445Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5533526Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5533530Z 
2025-01-10T13:49:05.5533866Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5534088Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data4] _
2025-01-10T13:49:05.5534092Z 
2025-01-10T13:49:05.5534357Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf8529d60>
2025-01-10T13:49:05.5534666Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5535106Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc834acc0>
2025-01-10T13:49:05.5535389Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data4]>>
2025-01-10T13:49:05.5535393Z 
2025-01-10T13:49:05.5535485Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5535558Z         self,
2025-01-10T13:49:05.5535649Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5535739Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5535808Z         request,
2025-01-10T13:49:05.5535881Z     ):
2025-01-10T13:49:05.5535983Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5536164Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5536251Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5536421Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5536514Z             plot_object = getattr(
2025-01-10T13:49:05.5536635Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5536711Z             )
2025-01-10T13:49:05.5536804Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5536965Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5537064Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5537159Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5537282Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5537355Z                 )
2025-01-10T13:49:05.5537359Z 
2025-01-10T13:49:05.5537501Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5537615Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5537619Z 
2025-01-10T13:49:05.5538083Z args = (<function assert_allclose.<locals>.compare at 0x7f3bbe83bec0>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:49:05.5538187Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5538443Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5538447Z 
2025-01-10T13:49:05.5538517Z     @wraps(func)
2025-01-10T13:49:05.5538602Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5538684Z         with self._recreate_cm():
2025-01-10T13:49:05.5538775Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5538853Z E           AssertionError: 
2025-01-10T13:49:05.5538963Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5539037Z E           
2025-01-10T13:49:05.5539132Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.5539274Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:49:05.5539409Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.5539692Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5539775Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5539946Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5540027Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5540032Z 
2025-01-10T13:49:05.5540229Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5540447Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data5] _
2025-01-10T13:49:05.5540457Z 
2025-01-10T13:49:05.5540720Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf8529e50>
2025-01-10T13:49:05.5541027Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5541425Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc8348ef0>
2025-01-10T13:49:05.5541708Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data5]>>
2025-01-10T13:49:05.5541713Z 
2025-01-10T13:49:05.5541800Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5541873Z         self,
2025-01-10T13:49:05.5541963Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5542054Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5542123Z         request,
2025-01-10T13:49:05.5542193Z     ):
2025-01-10T13:49:05.5542299Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5542476Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5542563Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5542733Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5542823Z             plot_object = getattr(
2025-01-10T13:49:05.5542940Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5543015Z             )
2025-01-10T13:49:05.5543109Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5543269Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5543371Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5543470Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5543753Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5543832Z                 )
2025-01-10T13:49:05.5543836Z 
2025-01-10T13:49:05.5543983Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5544094Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5544100Z 
2025-01-10T13:49:05.5544561Z args = (<function assert_allclose.<locals>.compare at 0x7f3b855e5940>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:49:05.5544665Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5544921Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5544925Z 
2025-01-10T13:49:05.5544995Z     @wraps(func)
2025-01-10T13:49:05.5545079Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5545165Z         with self._recreate_cm():
2025-01-10T13:49:05.5545249Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5545334Z E           AssertionError: 
2025-01-10T13:49:05.5545437Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5545510Z E           
2025-01-10T13:49:05.5545606Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.5545745Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:49:05.5545879Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.5546045Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5546261Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5546431Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5546512Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5546522Z 
2025-01-10T13:49:05.5546719Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5546939Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data6] _
2025-01-10T13:49:05.5546944Z 
2025-01-10T13:49:05.5547205Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf8529f10>
2025-01-10T13:49:05.5547515Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5547962Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc835d3d0>
2025-01-10T13:49:05.5548248Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data6]>>
2025-01-10T13:49:05.5548253Z 
2025-01-10T13:49:05.5548342Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5548417Z         self,
2025-01-10T13:49:05.5548512Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5548598Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5548673Z         request,
2025-01-10T13:49:05.5548740Z     ):
2025-01-10T13:49:05.5548846Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5549025Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5549111Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5549282Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5549369Z             plot_object = getattr(
2025-01-10T13:49:05.5549492Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5549569Z             )
2025-01-10T13:49:05.5549663Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5549826Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5549926Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5550023Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5550150Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5550219Z                 )
2025-01-10T13:49:05.5550223Z 
2025-01-10T13:49:05.5550369Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5550478Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5550483Z 
2025-01-10T13:49:05.5550946Z args = (<function assert_allclose.<locals>.compare at 0x7f3b855e59e0>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:49:05.5551050Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5551305Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5551310Z 
2025-01-10T13:49:05.5551386Z     @wraps(func)
2025-01-10T13:49:05.5551464Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5551550Z         with self._recreate_cm():
2025-01-10T13:49:05.5551635Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5551719Z E           AssertionError: 
2025-01-10T13:49:05.5551823Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5551896Z E           
2025-01-10T13:49:05.5551992Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.5552131Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:49:05.5552263Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.5552433Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5552606Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5552773Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5552859Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5552864Z 
2025-01-10T13:49:05.5553057Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5553280Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data7] _
2025-01-10T13:49:05.5553284Z 
2025-01-10T13:49:05.5553548Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a030>
2025-01-10T13:49:05.5553965Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5554287Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc834cef0>
2025-01-10T13:49:05.5554686Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data7]>>
2025-01-10T13:49:05.5554692Z 
2025-01-10T13:49:05.5554786Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5554858Z         self,
2025-01-10T13:49:05.5554953Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5555038Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5555114Z         request,
2025-01-10T13:49:05.5555181Z     ):
2025-01-10T13:49:05.5555285Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5555461Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5555550Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5555723Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5555812Z             plot_object = getattr(
2025-01-10T13:49:05.5555933Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5556006Z             )
2025-01-10T13:49:05.5556109Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5556267Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5556372Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5556462Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5556590Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5556659Z                 )
2025-01-10T13:49:05.5556664Z 
2025-01-10T13:49:05.5556809Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5556916Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5556921Z 
2025-01-10T13:49:05.5557388Z args = (<function assert_allclose.<locals>.compare at 0x7f3b855e5bc0>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:49:05.5557495Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5557748Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5557754Z 
2025-01-10T13:49:05.5557830Z     @wraps(func)
2025-01-10T13:49:05.5557909Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5557996Z         with self._recreate_cm():
2025-01-10T13:49:05.5558079Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5558168Z E           AssertionError: 
2025-01-10T13:49:05.5558272Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5558346Z E           
2025-01-10T13:49:05.5558441Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.5558579Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:49:05.5558708Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.5558878Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5559084Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5559246Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.5559335Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5559340Z 
2025-01-10T13:49:05.5559533Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5559753Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data8] _
2025-01-10T13:49:05.5559758Z 
2025-01-10T13:49:05.5560017Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a0f0>
2025-01-10T13:49:05.5560330Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5560657Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bbd3e6990>
2025-01-10T13:49:05.5561030Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data8]>>
2025-01-10T13:49:05.5561039Z 
2025-01-10T13:49:05.5561133Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5561201Z         self,
2025-01-10T13:49:05.5561296Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5561384Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5561461Z         request,
2025-01-10T13:49:05.5561527Z     ):
2025-01-10T13:49:05.5561634Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5561810Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5561902Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5562072Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5562160Z             plot_object = getattr(
2025-01-10T13:49:05.5562285Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5562356Z             )
2025-01-10T13:49:05.5562458Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5562617Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5562723Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5562816Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5562942Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5563010Z                 )
2025-01-10T13:49:05.5563015Z 
2025-01-10T13:49:05.5563158Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5563267Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5563276Z 
2025-01-10T13:49:05.5563850Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795ea20>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:49:05.5563959Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5564211Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5564216Z 
2025-01-10T13:49:05.5564296Z     @wraps(func)
2025-01-10T13:49:05.5564375Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5564461Z         with self._recreate_cm():
2025-01-10T13:49:05.5564545Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5564630Z E           AssertionError: 
2025-01-10T13:49:05.5564735Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5564810Z E           
2025-01-10T13:49:05.5564905Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.5565041Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:49:05.5565170Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.5565333Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5565427Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5565712Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5565800Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5565804Z 
2025-01-10T13:49:05.5566002Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5566223Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data9] _
2025-01-10T13:49:05.5566228Z 
2025-01-10T13:49:05.5566495Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a1b0>
2025-01-10T13:49:05.5566799Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5567123Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bdac574a0>
2025-01-10T13:49:05.5567501Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data9]>>
2025-01-10T13:49:05.5567509Z 
2025-01-10T13:49:05.5567604Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5567673Z         self,
2025-01-10T13:49:05.5567768Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5567851Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5567928Z         request,
2025-01-10T13:49:05.5567994Z     ):
2025-01-10T13:49:05.5568101Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5568283Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5568364Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5568539Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5568620Z             plot_object = getattr(
2025-01-10T13:49:05.5568746Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5568817Z             )
2025-01-10T13:49:05.5568917Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5569076Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5569186Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5569282Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5569410Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5569479Z                 )
2025-01-10T13:49:05.5569483Z 
2025-01-10T13:49:05.5569628Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5569742Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5569747Z 
2025-01-10T13:49:05.5570203Z args = (<function assert_allclose.<locals>.compare at 0x7f3b855e6520>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:49:05.5570309Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5570560Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5570568Z 
2025-01-10T13:49:05.5570644Z     @wraps(func)
2025-01-10T13:49:05.5570723Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5570811Z         with self._recreate_cm():
2025-01-10T13:49:05.5570894Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5570980Z E           AssertionError: 
2025-01-10T13:49:05.5571089Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5571158Z E           
2025-01-10T13:49:05.5571259Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.5571400Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:49:05.5571533Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.5571696Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5571792Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5572059Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5572147Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5572151Z 
2025-01-10T13:49:05.5572346Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5572576Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data10] _
2025-01-10T13:49:05.5572580Z 
2025-01-10T13:49:05.5572848Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a270>
2025-01-10T13:49:05.5573152Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5573477Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc83bae10>
2025-01-10T13:49:05.5573863Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data10]>>
2025-01-10T13:49:05.5573998Z 
2025-01-10T13:49:05.5574096Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5574166Z         self,
2025-01-10T13:49:05.5574293Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5574384Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5574455Z         request,
2025-01-10T13:49:05.5574526Z     ):
2025-01-10T13:49:05.5574627Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5574811Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5574894Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5575066Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5575148Z             plot_object = getattr(
2025-01-10T13:49:05.5575271Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5575338Z             )
2025-01-10T13:49:05.5575441Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5575597Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5575712Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5575803Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5575930Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5576008Z                 )
2025-01-10T13:49:05.5576012Z 
2025-01-10T13:49:05.5576152Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5576265Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5576270Z 
2025-01-10T13:49:05.5576727Z args = (<function assert_allclose.<locals>.compare at 0x7f3b855e4b80>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:49:05.5576829Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5577082Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5577095Z 
2025-01-10T13:49:05.5577167Z     @wraps(func)
2025-01-10T13:49:05.5577252Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5577334Z         with self._recreate_cm():
2025-01-10T13:49:05.5577421Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5577501Z E           AssertionError: 
2025-01-10T13:49:05.5577610Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5577678Z E           
2025-01-10T13:49:05.5577780Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.5577914Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:49:05.5578046Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.5578210Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5578302Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5578463Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5578664Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5578669Z 
2025-01-10T13:49:05.5578871Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5579093Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data11] _
2025-01-10T13:49:05.5579098Z 
2025-01-10T13:49:05.5579364Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a330>
2025-01-10T13:49:05.5579667Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5579994Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bdacafc80>
2025-01-10T13:49:05.5580271Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data11]>>
2025-01-10T13:49:05.5580354Z 
2025-01-10T13:49:05.5580447Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5580522Z         self,
2025-01-10T13:49:05.5580615Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5580705Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5580775Z         request,
2025-01-10T13:49:05.5580849Z     ):
2025-01-10T13:49:05.5580950Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5581131Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5581213Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5581389Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5581472Z             plot_object = getattr(
2025-01-10T13:49:05.5581596Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5581666Z             )
2025-01-10T13:49:05.5581765Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5581924Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5582035Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5582131Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5582253Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5582327Z                 )
2025-01-10T13:49:05.5582332Z 
2025-01-10T13:49:05.5582471Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5582586Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5582591Z 
2025-01-10T13:49:05.5583047Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc8316700>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:49:05.5583149Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5583407Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5583415Z 
2025-01-10T13:49:05.5583486Z     @wraps(func)
2025-01-10T13:49:05.5583570Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5583770Z         with self._recreate_cm():
2025-01-10T13:49:05.5583860Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5583939Z E           AssertionError: 
2025-01-10T13:49:05.5584048Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5584115Z E           
2025-01-10T13:49:05.5584217Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.5584348Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:49:05.5584478Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.5584640Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5584728Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5584901Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5585113Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5585118Z 
2025-01-10T13:49:05.5585321Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5585542Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data12] _
2025-01-10T13:49:05.5585546Z 
2025-01-10T13:49:05.5585813Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a3f0>
2025-01-10T13:49:05.5586114Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5586442Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc830fe00>
2025-01-10T13:49:05.5586723Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data12]>>
2025-01-10T13:49:05.5586829Z 
2025-01-10T13:49:05.5586919Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5586997Z         self,
2025-01-10T13:49:05.5587089Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5587180Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5587250Z         request,
2025-01-10T13:49:05.5587320Z     ):
2025-01-10T13:49:05.5587420Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5587601Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5587683Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5587860Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5587940Z             plot_object = getattr(
2025-01-10T13:49:05.5588065Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5588137Z             )
2025-01-10T13:49:05.5588232Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5588397Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5588502Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5588597Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5588720Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5588794Z                 )
2025-01-10T13:49:05.5588798Z 
2025-01-10T13:49:05.5588936Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5589049Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5589054Z 
2025-01-10T13:49:05.5589514Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc8317560>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:49:05.5589619Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5589871Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5589882Z 
2025-01-10T13:49:05.5589954Z     @wraps(func)
2025-01-10T13:49:05.5590037Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5590118Z         with self._recreate_cm():
2025-01-10T13:49:05.5590208Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5590289Z E           AssertionError: 
2025-01-10T13:49:05.5590398Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5590465Z E           
2025-01-10T13:49:05.5590565Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.5590701Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:49:05.5590836Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.5591006Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5591089Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5591262Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5591428Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5591433Z 
2025-01-10T13:49:05.5591633Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5591853Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data13] _
2025-01-10T13:49:05.5591857Z 
2025-01-10T13:49:05.5592125Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a510>
2025-01-10T13:49:05.5592433Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5592752Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc830f530>
2025-01-10T13:49:05.5593035Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data13]>>
2025-01-10T13:49:05.5593116Z 
2025-01-10T13:49:05.5593208Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5593284Z         self,
2025-01-10T13:49:05.5593378Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5593467Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5593537Z         request,
2025-01-10T13:49:05.5593721Z     ):
2025-01-10T13:49:05.5593827Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5594010Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5594091Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5594267Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5594353Z             plot_object = getattr(
2025-01-10T13:49:05.5594471Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5594543Z             )
2025-01-10T13:49:05.5594637Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5594799Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5594906Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5595008Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5595134Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5595207Z                 )
2025-01-10T13:49:05.5595211Z 
2025-01-10T13:49:05.5595350Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5595465Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5595470Z 
2025-01-10T13:49:05.5595936Z args = (<function assert_allclose.<locals>.compare at 0x7f3bbe83bec0>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:49:05.5596037Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5596291Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5596298Z 
2025-01-10T13:49:05.5596368Z     @wraps(func)
2025-01-10T13:49:05.5596454Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5596536Z         with self._recreate_cm():
2025-01-10T13:49:05.5596628Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5596708Z E           AssertionError: 
2025-01-10T13:49:05.5596816Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5596890Z E           
2025-01-10T13:49:05.5596984Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.5597125Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:49:05.5597255Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.5597424Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5597507Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5597675Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5597759Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5597904Z 
2025-01-10T13:49:05.5598107Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5598326Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data14] _
2025-01-10T13:49:05.5598336Z 
2025-01-10T13:49:05.5598600Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a660>
2025-01-10T13:49:05.5598907Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5599224Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3b85562480>
2025-01-10T13:49:05.5599502Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data14]>>
2025-01-10T13:49:05.5599507Z 
2025-01-10T13:49:05.5599596Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5599775Z         self,
2025-01-10T13:49:05.5599870Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5599961Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5600031Z         request,
2025-01-10T13:49:05.5600101Z     ):
2025-01-10T13:49:05.5600207Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5600384Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5600472Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5600643Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5600729Z             plot_object = getattr(
2025-01-10T13:49:05.5600847Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5600920Z             )
2025-01-10T13:49:05.5601016Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5601175Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5601280Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5601378Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5601500Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5601574Z                 )
2025-01-10T13:49:05.5601578Z 
2025-01-10T13:49:05.5601727Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5602604Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5602610Z 
2025-01-10T13:49:05.5603265Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply5__.h5
2025-01-10T13:49:05.5603271Z 
2025-01-10T13:49:05.5603583Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5603591Z 
2025-01-10T13:49:05.5604352Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply10__.h5
2025-01-10T13:49:05.5604361Z 
2025-01-10T13:49:05.5604665Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5604669Z 
2025-01-10T13:49:05.5605306Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl0__.h5
2025-01-10T13:49:05.5605312Z 
2025-01-10T13:49:05.5605612Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5605622Z 
2025-01-10T13:49:05.5606259Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply6__.h5
2025-01-10T13:49:05.5606267Z 
2025-01-10T13:49:05.5606695Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5606700Z 
2025-01-10T13:49:05.5607393Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data14__.h5
2025-01-10T13:49:05.5607399Z 
2025-01-10T13:49:05.5607705Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5607710Z 
2025-01-10T13:49:05.5608367Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply11__.h5
2025-01-10T13:49:05.5608373Z 
2025-01-10T13:49:05.5608675Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5608782Z 
2025-01-10T13:49:05.5609435Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply4__.h5
2025-01-10T13:49:05.5609440Z 
2025-01-10T13:49:05.5609747Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5609752Z 
2025-01-10T13:49:05.5610389Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply0__.h5
2025-01-10T13:49:05.5610394Z 
2025-01-10T13:49:05.5610697Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5610701Z 
2025-01-10T13:49:05.5611341Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply12__.h5
2025-01-10T13:49:05.5611357Z 
2025-01-10T13:49:05.5611661Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5611666Z 
2025-01-10T13:49:05.5612352Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data7__.h5
2025-01-10T13:49:05.5612357Z 
2025-01-10T13:49:05.5612656Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5612660Z 
2025-01-10T13:49:05.5613310Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply8__.h5
2025-01-10T13:49:05.5613318Z 
2025-01-10T13:49:05.5613719Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5613727Z 
2025-01-10T13:49:05.5614362Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl4__.h5
2025-01-10T13:49:05.5614368Z 
2025-01-10T13:49:05.5614673Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5614678Z 
2025-01-10T13:49:05.5615318Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply15__.h5
2025-01-10T13:49:05.5615328Z 
2025-01-10T13:49:05.5615630Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5615638Z 
2025-01-10T13:49:05.5616283Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply14__.h5
2025-01-10T13:49:05.5616403Z 
2025-01-10T13:49:05.5616710Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5616715Z 
2025-01-10T13:49:05.5617364Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply7__.h5
2025-01-10T13:49:05.5617369Z 
2025-01-10T13:49:05.5617676Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5617680Z 
2025-01-10T13:49:05.5618319Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply2__.h5
2025-01-10T13:49:05.5618430Z 
2025-01-10T13:49:05.5618741Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5618745Z 
2025-01-10T13:49:05.5619438Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data12__.h5
2025-01-10T13:49:05.5619443Z 
2025-01-10T13:49:05.5619743Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5619747Z 
2025-01-10T13:49:05.5620388Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply1__.h5
2025-01-10T13:49:05.5620396Z 
2025-01-10T13:49:05.5620697Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5620710Z 
2025-01-10T13:49:05.5621399Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data10__.h5
2025-01-10T13:49:05.5621405Z 
2025-01-10T13:49:05.5621708Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5621713Z 
2025-01-10T13:49:05.5622395Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data3__.h5
2025-01-10T13:49:05.5622400Z 
2025-01-10T13:49:05.5622711Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5622718Z 
2025-01-10T13:49:05.5623402Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data8__.h5
2025-01-10T13:49:05.5623410Z 
2025-01-10T13:49:05.5623834Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5623839Z 
2025-01-10T13:49:05.5624529Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data15__.h5
2025-01-10T13:49:05.5624534Z 
2025-01-10T13:49:05.5624838Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5624842Z 
2025-01-10T13:49:05.5625521Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data6__.h5
2025-01-10T13:49:05.5625639Z 
2025-01-10T13:49:05.5625950Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5625954Z 
2025-01-10T13:49:05.5626589Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl1__.h5
2025-01-10T13:49:05.5626602Z 
2025-01-10T13:49:05.5626903Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5626907Z 
2025-01-10T13:49:05.5627592Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data2__.h5
2025-01-10T13:49:05.5627696Z 
2025-01-10T13:49:05.5628001Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5628009Z 
2025-01-10T13:49:05.5628655Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply1__.h5
2025-01-10T13:49:05.5628659Z 
2025-01-10T13:49:05.5628964Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5628968Z 
2025-01-10T13:49:05.5629605Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply0__.h5
2025-01-10T13:49:05.5629610Z 
2025-01-10T13:49:05.5629918Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5629925Z 
2025-01-10T13:49:05.5630602Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data9__.h5
2025-01-10T13:49:05.5630615Z 
2025-01-10T13:49:05.5630915Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5630920Z 
2025-01-10T13:49:05.5631555Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl5__.h5
2025-01-10T13:49:05.5631559Z 
2025-01-10T13:49:05.5631861Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5631866Z 
2025-01-10T13:49:05.5632502Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply4__.h5
2025-01-10T13:49:05.5632512Z 
2025-01-10T13:49:05.5632818Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5632822Z 
2025-01-10T13:49:05.5633501Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data4__.h5
2025-01-10T13:49:05.5633507Z 
2025-01-10T13:49:05.5633921Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5633926Z 
2025-01-10T13:49:05.5634579Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply13__.h5
2025-01-10T13:49:05.5634584Z 
2025-01-10T13:49:05.5634887Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5635048Z 
2025-01-10T13:49:05.5635689Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply7__.h5
2025-01-10T13:49:05.5635694Z 
2025-01-10T13:49:05.5635997Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5636008Z 
2025-01-10T13:49:05.5636685Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data0__.h5
2025-01-10T13:49:05.5636691Z 
2025-01-10T13:49:05.5636999Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5637003Z 
2025-01-10T13:49:05.5637805Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data5__.h5
2025-01-10T13:49:05.5637813Z 
2025-01-10T13:49:05.5638119Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5638123Z 
2025-01-10T13:49:05.5638771Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply3__.h5
2025-01-10T13:49:05.5638775Z 
2025-01-10T13:49:05.5639077Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5639082Z 
2025-01-10T13:49:05.5639719Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply5__.h5
2025-01-10T13:49:05.5639727Z 
2025-01-10T13:49:05.5640032Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5640041Z 
2025-01-10T13:49:05.5640720Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data1__.h5
2025-01-10T13:49:05.5640725Z 
2025-01-10T13:49:05.5641035Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5641040Z 
2025-01-10T13:49:05.5641722Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data13__.h5
2025-01-10T13:49:05.5641732Z 
2025-01-10T13:49:05.5642032Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5642042Z 
2025-01-10T13:49:05.5642682Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl7__.h5
2025-01-10T13:49:05.5642687Z 
2025-01-10T13:49:05.5642989Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5642993Z 
2025-01-10T13:49:05.5643778Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data11__.h5
2025-01-10T13:49:05.5643785Z 
2025-01-10T13:49:05.5644095Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:49:05.5644099Z 
2025-01-10T13:49:05.5644742Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply9__.h5
2025-01-10T13:49:05.5644862Z 
2025-01-10T13:49:05.5644985Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5644990Z 
2025-01-10T13:49:05.5645450Z args = (<function assert_allclose.<locals>.compare at 0x7f3b855e53a0>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:49:05.5645557Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5645815Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5645820Z 
2025-01-10T13:49:05.5645891Z     @wraps(func)
2025-01-10T13:49:05.5645975Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5646057Z         with self._recreate_cm():
2025-01-10T13:49:05.5646252Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5646337Z E           AssertionError: 
2025-01-10T13:49:05.5646449Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5646517Z E           
2025-01-10T13:49:05.5646619Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.5646757Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:49:05.5646891Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.5647064Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5647149Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5647320Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5647405Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5647409Z 
2025-01-10T13:49:05.5647612Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5647839Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data15] _
2025-01-10T13:49:05.5647847Z 
2025-01-10T13:49:05.5648115Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852a750>
2025-01-10T13:49:05.5648421Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>
2025-01-10T13:49:05.5648768Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc834ed50>
2025-01-10T13:49:05.5649050Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data15]>>
2025-01-10T13:49:05.5649055Z 
2025-01-10T13:49:05.5649145Z     def test_calculate_plotting_data(
2025-01-10T13:49:05.5649224Z         self,
2025-01-10T13:49:05.5649317Z         plotter_calculate_plotting_data,
2025-01-10T13:49:05.5649409Z         calculate_plotting_data_hdf,
2025-01-10T13:49:05.5649482Z         request,
2025-01-10T13:49:05.5649557Z     ):
2025-01-10T13:49:05.5649662Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5649851Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:49:05.5649937Z         group = "plot_data_hdf/"
2025-01-10T13:49:05.5650116Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:49:05.5650207Z             plot_object = getattr(
2025-01-10T13:49:05.5650330Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:49:05.5650405Z             )
2025-01-10T13:49:05.5650502Z             if attribute_type == "attributes_np":
2025-01-10T13:49:05.5650666Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:49:05.5650769Z                     plot_object = plot_object.cgs.value
2025-01-10T13:49:05.5650874Z >               np.testing.assert_allclose(
2025-01-10T13:49:05.5651005Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:49:05.5651083Z                 )
2025-01-10T13:49:05.5651171Z 
2025-01-10T13:49:05.5651315Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:49:05.5651431Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5651437Z 
2025-01-10T13:49:05.5651904Z args = (<function assert_allclose.<locals>.compare at 0x7f3bc8315a80>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:49:05.5652002Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5652259Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5652264Z 
2025-01-10T13:49:05.5652337Z     @wraps(func)
2025-01-10T13:49:05.5652423Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5652506Z         with self._recreate_cm():
2025-01-10T13:49:05.5652672Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5652752Z E           AssertionError: 
2025-01-10T13:49:05.5652868Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5652937Z E           
2025-01-10T13:49:05.5653042Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.5653185Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:49:05.5653316Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.5653491Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5653579Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5653866Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.5653951Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5653955Z 
2025-01-10T13:49:05.5654163Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5654369Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply0] ______
2025-01-10T13:49:05.5654376Z 
2025-01-10T13:49:05.5654651Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf85296a0>
2025-01-10T13:49:05.5654977Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bdac55040>
2025-01-10T13:49:05.5655072Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5655163Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5655265Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5655404Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:49:05.5655619Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5655871Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply0]>>
2025-01-10T13:49:05.5655876Z 
2025-01-10T13:49:05.5655962Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5656146Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5656218Z     ):
2025-01-10T13:49:05.5656318Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5656431Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5656604Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5656675Z     
2025-01-10T13:49:05.5656784Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5656887Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5657030Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5657144Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5657215Z             )
2025-01-10T13:49:05.5657289Z     
2025-01-10T13:49:05.5657389Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5657503Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5657590Z             if data.stackgroup:
2025-01-10T13:49:05.5657670Z                 assert (
2025-01-10T13:49:05.5657877Z                     data.stackgroup
2025-01-10T13:49:05.5657957Z                     == getattr(
2025-01-10T13:49:05.5658068Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5658163Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5658328Z                     ).decode()
2025-01-10T13:49:05.5658452Z                 )
2025-01-10T13:49:05.5658775Z             if data.name:
2025-01-10T13:49:05.5665599Z                 assert (
2025-01-10T13:49:05.5665726Z                     data.name
2025-01-10T13:49:05.5665807Z                     == getattr(
2025-01-10T13:49:05.5665925Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5666017Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5666091Z                     ).decode()
2025-01-10T13:49:05.5666160Z                 )
2025-01-10T13:49:05.5666431Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5666581Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5666649Z             )
2025-01-10T13:49:05.5666744Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5666871Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5666940Z             )
2025-01-10T13:49:05.5666944Z 
2025-01-10T13:49:05.5667102Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5667229Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5667234Z 
2025-01-10T13:49:05.5667722Z args = (<function assert_allclose.<locals>.compare at 0x7f3bced1a480>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:49:05.5667827Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5668090Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5668102Z 
2025-01-10T13:49:05.5668176Z     @wraps(func)
2025-01-10T13:49:05.5668263Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5668346Z         with self._recreate_cm():
2025-01-10T13:49:05.5668440Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5668523Z E           AssertionError: 
2025-01-10T13:49:05.5668635Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5668708Z E           
2025-01-10T13:49:05.5668806Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.5668953Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:49:05.5669079Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.5669254Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5669342Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5669513Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5669600Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5669606Z 
2025-01-10T13:49:05.5669823Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5670033Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply1] ______
2025-01-10T13:49:05.5670044Z 
2025-01-10T13:49:05.5670317Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852ab40>
2025-01-10T13:49:05.5670639Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3b85562c60>
2025-01-10T13:49:05.5670733Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5670823Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5670924Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5671027Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:49:05.5671234Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5671598Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply1]>>
2025-01-10T13:49:05.5671604Z 
2025-01-10T13:49:05.5671695Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5671862Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5671935Z     ):
2025-01-10T13:49:05.5672029Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5672137Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5672307Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5672377Z     
2025-01-10T13:49:05.5672484Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5672583Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5672721Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5672911Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5672983Z             )
2025-01-10T13:49:05.5673053Z     
2025-01-10T13:49:05.5673150Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5673262Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5673350Z             if data.stackgroup:
2025-01-10T13:49:05.5673422Z                 assert (
2025-01-10T13:49:05.5673507Z                     data.stackgroup
2025-01-10T13:49:05.5673580Z                     == getattr(
2025-01-10T13:49:05.5673827Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5673923Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5674002Z                     ).decode()
2025-01-10T13:49:05.5674069Z                 )
2025-01-10T13:49:05.5674151Z             if data.name:
2025-01-10T13:49:05.5674221Z                 assert (
2025-01-10T13:49:05.5674330Z                     data.name
2025-01-10T13:49:05.5674410Z                     == getattr(
2025-01-10T13:49:05.5674517Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5674610Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5674689Z                     ).decode()
2025-01-10T13:49:05.5674756Z                 )
2025-01-10T13:49:05.5674853Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5674986Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5675054Z             )
2025-01-10T13:49:05.5675145Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5675263Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5675335Z             )
2025-01-10T13:49:05.5675339Z 
2025-01-10T13:49:05.5675484Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5675599Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5675603Z 
2025-01-10T13:49:05.5676071Z args = (<function assert_allclose.<locals>.compare at 0x7f3b855e53a0>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:49:05.5676177Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5676442Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5676447Z 
2025-01-10T13:49:05.5676518Z     @wraps(func)
2025-01-10T13:49:05.5676602Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5676683Z         with self._recreate_cm():
2025-01-10T13:49:05.5676771Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5676851Z E           AssertionError: 
2025-01-10T13:49:05.5676961Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5677029Z E           
2025-01-10T13:49:05.5677130Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.5677268Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:49:05.5677403Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.5677690Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5677779Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5677945Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5678026Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5678030Z 
2025-01-10T13:49:05.5678235Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5678435Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply2] ______
2025-01-10T13:49:05.5678440Z 
2025-01-10T13:49:05.5678707Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852afc0>
2025-01-10T13:49:05.5679021Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bced33890>
2025-01-10T13:49:05.5679242Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5679336Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5679437Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5679537Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:49:05.5679736Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5679977Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply2]>>
2025-01-10T13:49:05.5679981Z 
2025-01-10T13:49:05.5680064Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5680233Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5680299Z     ):
2025-01-10T13:49:05.5680397Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5680499Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5680674Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5680747Z     
2025-01-10T13:49:05.5680855Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5680952Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5681092Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5681202Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5681272Z             )
2025-01-10T13:49:05.5681341Z     
2025-01-10T13:49:05.5681437Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5681543Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5681625Z             if data.stackgroup:
2025-01-10T13:49:05.5681704Z                 assert (
2025-01-10T13:49:05.5681785Z                     data.stackgroup
2025-01-10T13:49:05.5681861Z                     == getattr(
2025-01-10T13:49:05.5681965Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5682065Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5682138Z                     ).decode()
2025-01-10T13:49:05.5682213Z                 )
2025-01-10T13:49:05.5682293Z             if data.name:
2025-01-10T13:49:05.5682367Z                 assert (
2025-01-10T13:49:05.5682444Z                     data.name
2025-01-10T13:49:05.5682516Z                     == getattr(
2025-01-10T13:49:05.5682618Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5682705Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5682784Z                     ).decode()
2025-01-10T13:49:05.5682851Z                 )
2025-01-10T13:49:05.5682943Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5683067Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5683139Z             )
2025-01-10T13:49:05.5683226Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5683347Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5683417Z             )
2025-01-10T13:49:05.5683426Z 
2025-01-10T13:49:05.5683760Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5683885Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5683890Z 
2025-01-10T13:49:05.5684348Z args = (<function assert_allclose.<locals>.compare at 0x7f3bced1ab60>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:49:05.5684450Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5684703Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5684708Z 
2025-01-10T13:49:05.5684784Z     @wraps(func)
2025-01-10T13:49:05.5684864Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5684951Z         with self._recreate_cm():
2025-01-10T13:49:05.5685043Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5685235Z E           AssertionError: 
2025-01-10T13:49:05.5685349Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5685418Z E           
2025-01-10T13:49:05.5685519Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.5685655Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:49:05.5685782Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.5685944Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5686032Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5686196Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5686282Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5686286Z 
2025-01-10T13:49:05.5686490Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5686698Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply3] ______
2025-01-10T13:49:05.5686705Z 
2025-01-10T13:49:05.5686973Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852b080>
2025-01-10T13:49:05.5687287Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bdac65fa0>
2025-01-10T13:49:05.5687383Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5687466Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5687573Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5687666Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:49:05.5687869Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5688106Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply3]>>
2025-01-10T13:49:05.5688116Z 
2025-01-10T13:49:05.5688197Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5688369Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5688438Z     ):
2025-01-10T13:49:05.5688536Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5688640Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5688814Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5688879Z     
2025-01-10T13:49:05.5688989Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5689080Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5689223Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5689325Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5689398Z             )
2025-01-10T13:49:05.5689462Z     
2025-01-10T13:49:05.5689563Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5689668Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5689754Z             if data.stackgroup:
2025-01-10T13:49:05.5689830Z                 assert (
2025-01-10T13:49:05.5690025Z                     data.stackgroup
2025-01-10T13:49:05.5690103Z                     == getattr(
2025-01-10T13:49:05.5690204Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5690299Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5690370Z                     ).decode()
2025-01-10T13:49:05.5690443Z                 )
2025-01-10T13:49:05.5690516Z             if data.name:
2025-01-10T13:49:05.5690591Z                 assert (
2025-01-10T13:49:05.5690662Z                     data.name
2025-01-10T13:49:05.5690738Z                     == getattr(
2025-01-10T13:49:05.5690836Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5690929Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5691007Z                     ).decode()
2025-01-10T13:49:05.5691075Z                 )
2025-01-10T13:49:05.5691246Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5691369Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5691444Z             )
2025-01-10T13:49:05.5691529Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5691650Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5691718Z             )
2025-01-10T13:49:05.5691722Z 
2025-01-10T13:49:05.5691867Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5691975Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5691979Z 
2025-01-10T13:49:05.5692441Z args = (<function assert_allclose.<locals>.compare at 0x7f3bced1b560>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:49:05.5692543Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5692793Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5692805Z 
2025-01-10T13:49:05.5692882Z     @wraps(func)
2025-01-10T13:49:05.5692961Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5693046Z         with self._recreate_cm():
2025-01-10T13:49:05.5693129Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5693213Z E           AssertionError: 
2025-01-10T13:49:05.5693315Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5693388Z E           
2025-01-10T13:49:05.5693482Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.5693730Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:49:05.5693856Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.5694022Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5694110Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5694277Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5694365Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5694369Z 
2025-01-10T13:49:05.5694565Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5694767Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply4] ______
2025-01-10T13:49:05.5694771Z 
2025-01-10T13:49:05.5695036Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf8529460>
2025-01-10T13:49:05.5695354Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bced52900>
2025-01-10T13:49:05.5695450Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5695534Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5695639Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5695730Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:49:05.5695942Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5696299Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply4]>>
2025-01-10T13:49:05.5696304Z 
2025-01-10T13:49:05.5696400Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5696562Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5696633Z     ):
2025-01-10T13:49:05.5696723Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5696830Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5696998Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5697068Z     
2025-01-10T13:49:05.5697177Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5697269Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5697412Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5697620Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5697693Z             )
2025-01-10T13:49:05.5697760Z     
2025-01-10T13:49:05.5697864Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5697965Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5698050Z             if data.stackgroup:
2025-01-10T13:49:05.5698121Z                 assert (
2025-01-10T13:49:05.5698204Z                     data.stackgroup
2025-01-10T13:49:05.5698278Z                     == getattr(
2025-01-10T13:49:05.5698383Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5698473Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5698552Z                     ).decode()
2025-01-10T13:49:05.5698624Z                 )
2025-01-10T13:49:05.5698697Z             if data.name:
2025-01-10T13:49:05.5698772Z                 assert (
2025-01-10T13:49:05.5698844Z                     data.name
2025-01-10T13:49:05.5698922Z                     == getattr(
2025-01-10T13:49:05.5699019Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5699116Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5699188Z                     ).decode()
2025-01-10T13:49:05.5699266Z                 )
2025-01-10T13:49:05.5699360Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5699481Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5699552Z             )
2025-01-10T13:49:05.5699640Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5699763Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5699831Z             )
2025-01-10T13:49:05.5699835Z 
2025-01-10T13:49:05.5699981Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5700088Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5700092Z 
2025-01-10T13:49:05.5700556Z args = (<function assert_allclose.<locals>.compare at 0x7f3bced69440>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:49:05.5700659Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5700915Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5700920Z 
2025-01-10T13:49:05.5700995Z     @wraps(func)
2025-01-10T13:49:05.5701073Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5701160Z         with self._recreate_cm():
2025-01-10T13:49:05.5701243Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5701328Z E           AssertionError: 
2025-01-10T13:49:05.5701429Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5701501Z E           
2025-01-10T13:49:05.5701600Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.5701741Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:49:05.5701874Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:49:05.5702199Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5702287Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5702451Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5702537Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5702541Z 
2025-01-10T13:49:05.5702738Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5702940Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply5] ______
2025-01-10T13:49:05.5702944Z 
2025-01-10T13:49:05.5703207Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf85287a0>
2025-01-10T13:49:05.5703523Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bd04c6120>
2025-01-10T13:49:05.5703896Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5703993Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5704096Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5704187Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:49:05.5704392Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5704627Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply5]>>
2025-01-10T13:49:05.5704632Z 
2025-01-10T13:49:05.5704722Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5704886Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5704958Z     ):
2025-01-10T13:49:05.5705049Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5705157Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5705323Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5705397Z     
2025-01-10T13:49:05.5705507Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5705602Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5705746Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5705848Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5705920Z             )
2025-01-10T13:49:05.5705985Z     
2025-01-10T13:49:05.5706085Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5706195Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5706281Z             if data.stackgroup:
2025-01-10T13:49:05.5706353Z                 assert (
2025-01-10T13:49:05.5706436Z                     data.stackgroup
2025-01-10T13:49:05.5706509Z                     == getattr(
2025-01-10T13:49:05.5706615Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5706707Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5706793Z                     ).decode()
2025-01-10T13:49:05.5706868Z                 )
2025-01-10T13:49:05.5706942Z             if data.name:
2025-01-10T13:49:05.5707017Z                 assert (
2025-01-10T13:49:05.5707090Z                     data.name
2025-01-10T13:49:05.5707166Z                     == getattr(
2025-01-10T13:49:05.5707262Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5707355Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5707427Z                     ).decode()
2025-01-10T13:49:05.5707499Z                 )
2025-01-10T13:49:05.5707587Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5707712Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5707779Z             )
2025-01-10T13:49:05.5707870Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5707987Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5708067Z             )
2025-01-10T13:49:05.5708071Z 
2025-01-10T13:49:05.5708215Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5708484Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5708488Z 
2025-01-10T13:49:05.5708951Z args = (<function assert_allclose.<locals>.compare at 0x7f3bf2a73420>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:49:05.5709047Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5709299Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5709304Z 
2025-01-10T13:49:05.5709375Z     @wraps(func)
2025-01-10T13:49:05.5709458Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5709538Z         with self._recreate_cm():
2025-01-10T13:49:05.5709629Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5709818Z E           AssertionError: 
2025-01-10T13:49:05.5709922Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5709998Z E           
2025-01-10T13:49:05.5710094Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.5710233Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:49:05.5710364Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:49:05.5710531Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5710613Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5710780Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5710861Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5710865Z 
2025-01-10T13:49:05.5711067Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5711270Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply6] ______
2025-01-10T13:49:05.5711278Z 
2025-01-10T13:49:05.5711539Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852b500>
2025-01-10T13:49:05.5711852Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc83f8bf0>
2025-01-10T13:49:05.5711945Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5712034Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5712131Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5712227Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:49:05.5712426Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5712668Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply6]>>
2025-01-10T13:49:05.5712673Z 
2025-01-10T13:49:05.5712760Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5712923Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5712997Z     ):
2025-01-10T13:49:05.5713088Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5713197Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5713364Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5713435Z     
2025-01-10T13:49:05.5713537Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5713772Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5713914Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5714018Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5714086Z             )
2025-01-10T13:49:05.5714156Z     
2025-01-10T13:49:05.5714253Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5714361Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5714446Z             if data.stackgroup:
2025-01-10T13:49:05.5714520Z                 assert (
2025-01-10T13:49:05.5714724Z                     data.stackgroup
2025-01-10T13:49:05.5714796Z                     == getattr(
2025-01-10T13:49:05.5714899Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5714993Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5715070Z                     ).decode()
2025-01-10T13:49:05.5715139Z                 )
2025-01-10T13:49:05.5715217Z             if data.name:
2025-01-10T13:49:05.5715286Z                 assert (
2025-01-10T13:49:05.5715364Z                     data.name
2025-01-10T13:49:05.5715435Z                     == getattr(
2025-01-10T13:49:05.5715537Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5715628Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5715706Z                     ).decode()
2025-01-10T13:49:05.5715777Z                 )
2025-01-10T13:49:05.5715865Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5716098Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5716169Z             )
2025-01-10T13:49:05.5716261Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5716378Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5716451Z             )
2025-01-10T13:49:05.5716455Z 
2025-01-10T13:49:05.5716596Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5716710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5716714Z 
2025-01-10T13:49:05.5717175Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795cfe0>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:49:05.5717275Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5717528Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5717536Z 
2025-01-10T13:49:05.5717612Z     @wraps(func)
2025-01-10T13:49:05.5717695Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5717776Z         with self._recreate_cm():
2025-01-10T13:49:05.5717866Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5717946Z E           AssertionError: 
2025-01-10T13:49:05.5718053Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5718122Z E           
2025-01-10T13:49:05.5718223Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.5718357Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:49:05.5718491Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:49:05.5718658Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5718742Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5718909Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5718996Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5719001Z 
2025-01-10T13:49:05.5719203Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5719399Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply7] ______
2025-01-10T13:49:05.5719404Z 
2025-01-10T13:49:05.5719670Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852b5c0>
2025-01-10T13:49:05.5719981Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc838a930>
2025-01-10T13:49:05.5720077Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5720167Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5720265Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5720363Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:49:05.5720565Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5720893Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply7]>>
2025-01-10T13:49:05.5720898Z 
2025-01-10T13:49:05.5720981Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5721146Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5721213Z     ):
2025-01-10T13:49:05.5721309Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5721411Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5721587Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5721657Z     
2025-01-10T13:49:05.5721761Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5721858Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5721994Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5722180Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5722248Z             )
2025-01-10T13:49:05.5722321Z     
2025-01-10T13:49:05.5722417Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5722523Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5722603Z             if data.stackgroup:
2025-01-10T13:49:05.5722678Z                 assert (
2025-01-10T13:49:05.5722757Z                     data.stackgroup
2025-01-10T13:49:05.5722834Z                     == getattr(
2025-01-10T13:49:05.5722933Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5723029Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5723108Z                     ).decode()
2025-01-10T13:49:05.5723175Z                 )
2025-01-10T13:49:05.5723254Z             if data.name:
2025-01-10T13:49:05.5723324Z                 assert (
2025-01-10T13:49:05.5723401Z                     data.name
2025-01-10T13:49:05.5723472Z                     == getattr(
2025-01-10T13:49:05.5723577Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5723785Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5723866Z                     ).decode()
2025-01-10T13:49:05.5723933Z                 )
2025-01-10T13:49:05.5724026Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5724149Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5724221Z             )
2025-01-10T13:49:05.5724307Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5724429Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5724501Z             )
2025-01-10T13:49:05.5724506Z 
2025-01-10T13:49:05.5724647Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5724760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5724764Z 
2025-01-10T13:49:05.5725221Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795db20>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:49:05.5725329Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5725578Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5725583Z 
2025-01-10T13:49:05.5725658Z     @wraps(func)
2025-01-10T13:49:05.5725737Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5725824Z         with self._recreate_cm():
2025-01-10T13:49:05.5725910Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5725989Z E           AssertionError: 
2025-01-10T13:49:05.5726093Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5726161Z E           
2025-01-10T13:49:05.5726261Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.5726393Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:49:05.5726528Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:49:05.5726836Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5726927Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5727086Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.5727173Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5727177Z 
2025-01-10T13:49:05.5727376Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5727573Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply8] ______
2025-01-10T13:49:05.5727578Z 
2025-01-10T13:49:05.5727843Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852b680>
2025-01-10T13:49:05.5728155Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc835d8e0>
2025-01-10T13:49:05.5728354Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5728443Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5728544Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5728644Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:49:05.5728853Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5729094Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply8]>>
2025-01-10T13:49:05.5729099Z 
2025-01-10T13:49:05.5729181Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5729348Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5729415Z     ):
2025-01-10T13:49:05.5729511Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5729615Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5729788Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5729858Z     
2025-01-10T13:49:05.5729967Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5730063Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5730291Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5730467Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5730570Z             )
2025-01-10T13:49:05.5730670Z     
2025-01-10T13:49:05.5730823Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5730993Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5731082Z             if data.stackgroup:
2025-01-10T13:49:05.5731159Z                 assert (
2025-01-10T13:49:05.5731241Z                     data.stackgroup
2025-01-10T13:49:05.5731317Z                     == getattr(
2025-01-10T13:49:05.5731418Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5731514Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5731591Z                     ).decode()
2025-01-10T13:49:05.5731667Z                 )
2025-01-10T13:49:05.5731741Z             if data.name:
2025-01-10T13:49:05.5731816Z                 assert (
2025-01-10T13:49:05.5731887Z                     data.name
2025-01-10T13:49:05.5731964Z                     == getattr(
2025-01-10T13:49:05.5732064Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5732155Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5732235Z                     ).decode()
2025-01-10T13:49:05.5732303Z                 )
2025-01-10T13:49:05.5732395Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5732518Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5732590Z             )
2025-01-10T13:49:05.5732676Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5732797Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5732868Z             )
2025-01-10T13:49:05.5732873Z 
2025-01-10T13:49:05.5733024Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5733276Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5733282Z 
2025-01-10T13:49:05.5733900Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795c680>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:49:05.5734005Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5734254Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5734260Z 
2025-01-10T13:49:05.5734337Z     @wraps(func)
2025-01-10T13:49:05.5734414Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5734500Z         with self._recreate_cm():
2025-01-10T13:49:05.5734583Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5734810Z E           AssertionError: 
2025-01-10T13:49:05.5734913Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5734992Z E           
2025-01-10T13:49:05.5735087Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.5735227Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:49:05.5735357Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.5735520Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5735608Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5735770Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5735856Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5735860Z 
2025-01-10T13:49:05.5736058Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5736260Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply9] ______
2025-01-10T13:49:05.5736268Z 
2025-01-10T13:49:05.5736533Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852b740>
2025-01-10T13:49:05.5736849Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc8391190>
2025-01-10T13:49:05.5736945Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5737029Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5737132Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5737227Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:49:05.5737434Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5737672Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply9]>>
2025-01-10T13:49:05.5737677Z 
2025-01-10T13:49:05.5737765Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5737927Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5738003Z     ):
2025-01-10T13:49:05.5738096Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5738206Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5738380Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5738446Z     
2025-01-10T13:49:05.5738555Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5738646Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5738790Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5738893Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5738965Z             )
2025-01-10T13:49:05.5739029Z     
2025-01-10T13:49:05.5739131Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5739232Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5739318Z             if data.stackgroup:
2025-01-10T13:49:05.5739392Z                 assert (
2025-01-10T13:49:05.5739478Z                     data.stackgroup
2025-01-10T13:49:05.5739685Z                     == getattr(
2025-01-10T13:49:05.5739793Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5739892Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5739965Z                     ).decode()
2025-01-10T13:49:05.5740036Z                 )
2025-01-10T13:49:05.5740111Z             if data.name:
2025-01-10T13:49:05.5740186Z                 assert (
2025-01-10T13:49:05.5740259Z                     data.name
2025-01-10T13:49:05.5740335Z                     == getattr(
2025-01-10T13:49:05.5740431Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5740526Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5740596Z                     ).decode()
2025-01-10T13:49:05.5740669Z                 )
2025-01-10T13:49:05.5740762Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5740969Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5741040Z             )
2025-01-10T13:49:05.5741132Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5741257Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5741325Z             )
2025-01-10T13:49:05.5741330Z 
2025-01-10T13:49:05.5741476Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5741587Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5741591Z 
2025-01-10T13:49:05.5742055Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795ff60>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:49:05.5742152Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5742406Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5742414Z 
2025-01-10T13:49:05.5742493Z     @wraps(func)
2025-01-10T13:49:05.5742571Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5742658Z         with self._recreate_cm():
2025-01-10T13:49:05.5742742Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5742828Z E           AssertionError: 
2025-01-10T13:49:05.5742930Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5743004Z E           
2025-01-10T13:49:05.5743097Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.5743234Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:49:05.5743358Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.5743528Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5743723Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5743899Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5743992Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5744000Z 
2025-01-10T13:49:05.5744196Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5744403Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply10] ______
2025-01-10T13:49:05.5744407Z 
2025-01-10T13:49:05.5744669Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852b800>
2025-01-10T13:49:05.5744987Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bdacadd60>
2025-01-10T13:49:05.5745079Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5745168Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5745266Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5745363Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:49:05.5745569Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5745954Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply10]>>
2025-01-10T13:49:05.5745960Z 
2025-01-10T13:49:05.5746047Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5746211Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5746283Z     ):
2025-01-10T13:49:05.5746374Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5746481Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5746652Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5746724Z     
2025-01-10T13:49:05.5746827Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5746923Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5747059Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5747166Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5747344Z             )
2025-01-10T13:49:05.5747414Z     
2025-01-10T13:49:05.5747515Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5747616Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5747702Z             if data.stackgroup:
2025-01-10T13:49:05.5747772Z                 assert (
2025-01-10T13:49:05.5747855Z                     data.stackgroup
2025-01-10T13:49:05.5747927Z                     == getattr(
2025-01-10T13:49:05.5748033Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5748124Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5748202Z                     ).decode()
2025-01-10T13:49:05.5748272Z                 )
2025-01-10T13:49:05.5748354Z             if data.name:
2025-01-10T13:49:05.5748423Z                 assert (
2025-01-10T13:49:05.5748501Z                     data.name
2025-01-10T13:49:05.5748577Z                     == getattr(
2025-01-10T13:49:05.5748679Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5748776Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5748847Z                     ).decode()
2025-01-10T13:49:05.5748919Z                 )
2025-01-10T13:49:05.5749015Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5749150Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5749218Z             )
2025-01-10T13:49:05.5749313Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5749432Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5749505Z             )
2025-01-10T13:49:05.5749509Z 
2025-01-10T13:49:05.5749657Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5749771Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5749775Z 
2025-01-10T13:49:05.5750247Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795cea0>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:49:05.5750352Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5750608Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5750614Z 
2025-01-10T13:49:05.5750685Z     @wraps(func)
2025-01-10T13:49:05.5750772Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5750854Z         with self._recreate_cm():
2025-01-10T13:49:05.5750941Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5751021Z E           AssertionError: 
2025-01-10T13:49:05.5751129Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5751198Z E           
2025-01-10T13:49:05.5751298Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.5751440Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:49:05.5751565Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.5751865Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5751948Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5752116Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5752198Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5752203Z 
2025-01-10T13:49:05.5752407Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5752607Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply11] ______
2025-01-10T13:49:05.5752612Z 
2025-01-10T13:49:05.5752882Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852b8c0>
2025-01-10T13:49:05.5753203Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc83507d0>
2025-01-10T13:49:05.5753371Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5753459Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5753562Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5753772Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:49:05.5753981Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5754231Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply11]>>
2025-01-10T13:49:05.5754236Z 
2025-01-10T13:49:05.5754318Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5754486Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5754559Z     ):
2025-01-10T13:49:05.5754648Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5754754Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5754923Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5754998Z     
2025-01-10T13:49:05.5755102Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5755201Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5755340Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5755449Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5755516Z             )
2025-01-10T13:49:05.5755588Z     
2025-01-10T13:49:05.5755684Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5755790Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5755871Z             if data.stackgroup:
2025-01-10T13:49:05.5755946Z                 assert (
2025-01-10T13:49:05.5756031Z                     data.stackgroup
2025-01-10T13:49:05.5756103Z                     == getattr(
2025-01-10T13:49:05.5756209Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5756300Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5756381Z                     ).decode()
2025-01-10T13:49:05.5756447Z                 )
2025-01-10T13:49:05.5756530Z             if data.name:
2025-01-10T13:49:05.5756600Z                 assert (
2025-01-10T13:49:05.5756675Z                     data.name
2025-01-10T13:49:05.5756748Z                     == getattr(
2025-01-10T13:49:05.5756855Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5756942Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5757021Z                     ).decode()
2025-01-10T13:49:05.5757088Z                 )
2025-01-10T13:49:05.5757181Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5757303Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5757376Z             )
2025-01-10T13:49:05.5757471Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5757590Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5757662Z             )
2025-01-10T13:49:05.5757669Z 
2025-01-10T13:49:05.5757810Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5758050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5758054Z 
2025-01-10T13:49:05.5758518Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795d080>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:49:05.5758619Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5758870Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5758881Z 
2025-01-10T13:49:05.5758953Z     @wraps(func)
2025-01-10T13:49:05.5759038Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5759119Z         with self._recreate_cm():
2025-01-10T13:49:05.5759208Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5759288Z E           AssertionError: 
2025-01-10T13:49:05.5759503Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5759577Z E           
2025-01-10T13:49:05.5759678Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.5759812Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:49:05.5759942Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.5760105Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5760196Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5760367Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5760453Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5760458Z 
2025-01-10T13:49:05.5760663Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5760862Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply12] ______
2025-01-10T13:49:05.5760870Z 
2025-01-10T13:49:05.5761142Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852b980>
2025-01-10T13:49:05.5761461Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc83252e0>
2025-01-10T13:49:05.5761558Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5761644Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5761746Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5761848Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:49:05.5762055Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5762304Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply12]>>
2025-01-10T13:49:05.5762309Z 
2025-01-10T13:49:05.5762390Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5762558Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5762628Z     ):
2025-01-10T13:49:05.5762723Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5762830Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5763005Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5763071Z     
2025-01-10T13:49:05.5763182Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5763278Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5763427Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5763533Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5763719Z             )
2025-01-10T13:49:05.5763791Z     
2025-01-10T13:49:05.5763887Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5763992Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5764073Z             if data.stackgroup:
2025-01-10T13:49:05.5764156Z                 assert (
2025-01-10T13:49:05.5764235Z                     data.stackgroup
2025-01-10T13:49:05.5764445Z                     == getattr(
2025-01-10T13:49:05.5764549Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5764646Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5764720Z                     ).decode()
2025-01-10T13:49:05.5764792Z                 )
2025-01-10T13:49:05.5764866Z             if data.name:
2025-01-10T13:49:05.5764941Z                 assert (
2025-01-10T13:49:05.5765020Z                     data.name
2025-01-10T13:49:05.5765092Z                     == getattr(
2025-01-10T13:49:05.5765195Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5765284Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5765361Z                     ).decode()
2025-01-10T13:49:05.5765428Z                 )
2025-01-10T13:49:05.5765521Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5765787Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5765866Z             )
2025-01-10T13:49:05.5765953Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5766077Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5766143Z             )
2025-01-10T13:49:05.5766147Z 
2025-01-10T13:49:05.5766294Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5766406Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5766419Z 
2025-01-10T13:49:05.5766882Z args = (<function assert_allclose.<locals>.compare at 0x7f3be8913ba0>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:49:05.5766984Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5767238Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5767248Z 
2025-01-10T13:49:05.5767325Z     @wraps(func)
2025-01-10T13:49:05.5767407Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5767494Z         with self._recreate_cm():
2025-01-10T13:49:05.5767577Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5767662Z E           AssertionError: 
2025-01-10T13:49:05.5767765Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5767840Z E           
2025-01-10T13:49:05.5767946Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.5768083Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:49:05.5768218Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:49:05.5768386Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5768475Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5768641Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5768732Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5768740Z 
2025-01-10T13:49:05.5768938Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5769140Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply13] ______
2025-01-10T13:49:05.5769145Z 
2025-01-10T13:49:05.5769411Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852ba40>
2025-01-10T13:49:05.5769726Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3b855a62a0>
2025-01-10T13:49:05.5769824Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5769906Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5770009Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5770103Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:49:05.5770309Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5770551Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply13]>>
2025-01-10T13:49:05.5770640Z 
2025-01-10T13:49:05.5770732Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5770898Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5770966Z     ):
2025-01-10T13:49:05.5771061Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5771166Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5771344Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5771409Z     
2025-01-10T13:49:05.5771520Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5771612Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5771755Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5771857Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5772024Z             )
2025-01-10T13:49:05.5772088Z     
2025-01-10T13:49:05.5772194Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5772295Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5772384Z             if data.stackgroup:
2025-01-10T13:49:05.5772462Z                 assert (
2025-01-10T13:49:05.5772542Z                     data.stackgroup
2025-01-10T13:49:05.5772618Z                     == getattr(
2025-01-10T13:49:05.5772718Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5772816Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5772889Z                     ).decode()
2025-01-10T13:49:05.5772961Z                 )
2025-01-10T13:49:05.5773036Z             if data.name:
2025-01-10T13:49:05.5773111Z                 assert (
2025-01-10T13:49:05.5773184Z                     data.name
2025-01-10T13:49:05.5773264Z                     == getattr(
2025-01-10T13:49:05.5773365Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5773460Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5773532Z                     ).decode()
2025-01-10T13:49:05.5773704Z                 )
2025-01-10T13:49:05.5773796Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5773924Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5773998Z             )
2025-01-10T13:49:05.5774083Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5774207Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5774303Z             )
2025-01-10T13:49:05.5774308Z 
2025-01-10T13:49:05.5774453Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5774564Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5774568Z 
2025-01-10T13:49:05.5775029Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795eb60>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:49:05.5775135Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5775390Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5775396Z 
2025-01-10T13:49:05.5775472Z     @wraps(func)
2025-01-10T13:49:05.5775550Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5775636Z         with self._recreate_cm():
2025-01-10T13:49:05.5775719Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5775802Z E           AssertionError: 
2025-01-10T13:49:05.5775905Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5775977Z E           
2025-01-10T13:49:05.5776074Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.5776212Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:49:05.5776341Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:49:05.5776516Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5776734Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5776900Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5776985Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5776990Z 
2025-01-10T13:49:05.5777188Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5777393Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply14] ______
2025-01-10T13:49:05.5777398Z 
2025-01-10T13:49:05.5777662Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852bb00>
2025-01-10T13:49:05.5777979Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3bc835ee10>
2025-01-10T13:49:05.5778178Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5778268Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5778377Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5778469Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:49:05.5778675Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5778914Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply14]>>
2025-01-10T13:49:05.5778918Z 
2025-01-10T13:49:05.5779007Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5779172Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5779244Z     ):
2025-01-10T13:49:05.5779336Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5779446Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5779620Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5779696Z     
2025-01-10T13:49:05.5779807Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5779901Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5780044Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5780149Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5780223Z             )
2025-01-10T13:49:05.5780288Z     
2025-01-10T13:49:05.5780388Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5780488Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5780575Z             if data.stackgroup:
2025-01-10T13:49:05.5780646Z                 assert (
2025-01-10T13:49:05.5780730Z                     data.stackgroup
2025-01-10T13:49:05.5780803Z                     == getattr(
2025-01-10T13:49:05.5780911Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5781004Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5781087Z                     ).decode()
2025-01-10T13:49:05.5781159Z                 )
2025-01-10T13:49:05.5781239Z             if data.name:
2025-01-10T13:49:05.5781314Z                 assert (
2025-01-10T13:49:05.5781385Z                     data.name
2025-01-10T13:49:05.5781461Z                     == getattr(
2025-01-10T13:49:05.5781559Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5781653Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5781725Z                     ).decode()
2025-01-10T13:49:05.5781796Z                 )
2025-01-10T13:49:05.5781887Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5782027Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5782098Z             )
2025-01-10T13:49:05.5782194Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5782314Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5782388Z             )
2025-01-10T13:49:05.5782395Z 
2025-01-10T13:49:05.5782541Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5782737Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5782742Z 
2025-01-10T13:49:05.5783208Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795cb80>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:49:05.5783305Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5783565Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5783570Z 
2025-01-10T13:49:05.5783832Z     @wraps(func)
2025-01-10T13:49:05.5783923Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5784006Z         with self._recreate_cm():
2025-01-10T13:49:05.5784096Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5784182Z E           AssertionError: 
2025-01-10T13:49:05.5784399Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5784480Z E           
2025-01-10T13:49:05.5784578Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.5784721Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:49:05.5784852Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:49:05.5785021Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5785103Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5785273Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5785355Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5785359Z 
2025-01-10T13:49:05.5785563Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5785770Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply15] ______
2025-01-10T13:49:05.5785778Z 
2025-01-10T13:49:05.5786040Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f3bf852bbc0>
2025-01-10T13:49:05.5786365Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f3b855658b0>
2025-01-10T13:49:05.5786456Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:49:05.5786547Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:49:05.5786646Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:49:05.5786746Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:49:05.5786949Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f3b855632c0>)
2025-01-10T13:49:05.5787195Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply15]>>
2025-01-10T13:49:05.5787200Z 
2025-01-10T13:49:05.5787287Z     def test_generate_plot_mpl(
2025-01-10T13:49:05.5787451Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:49:05.5787525Z     ):
2025-01-10T13:49:05.5787617Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:49:05.5787729Z         regression_data = RegressionData(request)
2025-01-10T13:49:05.5787900Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:49:05.5787973Z     
2025-01-10T13:49:05.5788078Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:49:05.5788177Z             np.testing.assert_array_equal(
2025-01-10T13:49:05.5788314Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:49:05.5788425Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:49:05.5788493Z             )
2025-01-10T13:49:05.5788563Z     
2025-01-10T13:49:05.5788661Z         for index, data in enumerate(fig.data):
2025-01-10T13:49:05.5788767Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:49:05.5788854Z             if data.stackgroup:
2025-01-10T13:49:05.5788929Z                 assert (
2025-01-10T13:49:05.5789016Z                     data.stackgroup
2025-01-10T13:49:05.5789215Z                     == getattr(
2025-01-10T13:49:05.5789324Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5789416Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:49:05.5789495Z                     ).decode()
2025-01-10T13:49:05.5789562Z                 )
2025-01-10T13:49:05.5789643Z             if data.name:
2025-01-10T13:49:05.5789716Z                 assert (
2025-01-10T13:49:05.5789798Z                     data.name
2025-01-10T13:49:05.5789870Z                     == getattr(
2025-01-10T13:49:05.5789975Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:49:05.5790064Z                         "_" + str(index) + "name",
2025-01-10T13:49:05.5790145Z                     ).decode()
2025-01-10T13:49:05.5790219Z                 )
2025-01-10T13:49:05.5790309Z             np.testing.assert_allclose(
2025-01-10T13:49:05.5790523Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:49:05.5790596Z             )
2025-01-10T13:49:05.5790689Z >           np.testing.assert_allclose(
2025-01-10T13:49:05.5790809Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:49:05.5790880Z             )
2025-01-10T13:49:05.5790884Z 
2025-01-10T13:49:05.5791024Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:49:05.5791142Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:49:05.5791147Z 
2025-01-10T13:49:05.5791612Z args = (<function assert_allclose.<locals>.compare at 0x7f3be795d3a0>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:49:05.5791714Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:49:05.5791970Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:49:05.5791978Z 
2025-01-10T13:49:05.5792049Z     @wraps(func)
2025-01-10T13:49:05.5792137Z     def inner(*args, **kwds):
2025-01-10T13:49:05.5792223Z         with self._recreate_cm():
2025-01-10T13:49:05.5792312Z >           return func(*args, **kwds)
2025-01-10T13:49:05.5792392Z E           AssertionError: 
2025-01-10T13:49:05.5792499Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5792568Z E           
2025-01-10T13:49:05.5792670Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.5792806Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:49:05.5792941Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:49:05.5793113Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5793200Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5793375Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.5793460Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.5793467Z 
2025-01-10T13:49:05.5793785Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:49:05.5793902Z =============================== warnings summary ===============================
2025-01-10T13:49:05.5794024Z tardis/io/configuration/config_validator.py:6
2025-01-10T13:49:05.5794131Z tardis/io/configuration/config_validator.py:6
2025-01-10T13:49:05.5794448Z   /home/runner/work/tardis/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
2025-01-10T13:49:05.5794525Z   
2025-01-10T13:49:05.5795654Z   jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
2025-01-10T13:49:05.5795665Z 
2025-01-10T13:49:05.5796025Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22
2025-01-10T13:49:05.5796383Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
2025-01-10T13:49:05.5796456Z   
2025-01-10T13:49:05.5796607Z   Jupyter is migrating its paths to use standard platformdirs
2025-01-10T13:49:05.5796766Z   given by the platformdirs library.  To remove this warning and
2025-01-10T13:49:05.5796928Z   see the appropriate new directories, set the environment variable
2025-01-10T13:49:05.5797078Z   `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
2025-01-10T13:49:05.5797233Z   The use of platformdirs will be the default in `jupyter_core` v6
2025-01-10T13:49:05.5797238Z 
2025-01-10T13:49:05.5797332Z tardis/plasma/properties/__init__.py:17
2025-01-10T13:49:05.5797613Z   /home/runner/work/tardis/tardis/tardis/plasma/properties/__init__.py:17: DeprecationWarning:
2025-01-10T13:49:05.5797804Z   
2025-01-10T13:49:05.5798362Z   The numpy.linalg.linalg has been made private and renamed to numpy.linalg._linalg. All public functions exported by it are available from numpy.linalg. Please use numpy.linalg.LinAlgError instead.
2025-01-10T13:49:05.5798368Z 
2025-01-10T13:49:05.5802623Z tardis/io/tests/test_HDFWriter.py::test_multi_index_write
2025-01-10T13:49:05.5802938Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:49:05.5803173Z   /home/runner/work/tardis/tardis/tardis/io/util.py:276: PerformanceWarning:
2025-01-10T13:49:05.5803244Z   
2025-01-10T13:49:05.5803314Z   
2025-01-10T13:49:05.5803528Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:49:05.5803972Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-10T13:49:05.5803979Z 
2025-01-10T13:49:05.5804185Z tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
2025-01-10T13:49:05.5804419Z tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
2025-01-10T13:49:05.5804656Z tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
2025-01-10T13:49:05.5804844Z tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
2025-01-10T13:49:05.5805162Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
2025-01-10T13:49:05.5805236Z   
2025-01-10T13:49:05.5805354Z   The current CMFGEN model parser is deprecated
2025-01-10T13:49:05.5805359Z 
2025-01-10T13:49:05.5805469Z tardis/io/tests/test_model_reader.py: 1 warning
2025-01-10T13:49:05.5805653Z tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
2025-01-10T13:49:05.5805956Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
2025-01-10T13:49:05.5806029Z   
2025-01-10T13:49:05.5806136Z   The current CMFGEN model parser is deprecated
2025-01-10T13:49:05.5806140Z 
2025-01-10T13:49:05.5806354Z tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
2025-01-10T13:49:05.5806740Z   /home/runner/work/tardis/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
2025-01-10T13:49:05.5806810Z   
2025-01-10T13:49:05.5807229Z   [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m
2025-01-10T13:49:05.5807242Z 
2025-01-10T13:49:05.5807344Z tardis/model/tests/test_base.py: 6 warnings
2025-01-10T13:49:05.5807466Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-10T13:49:05.5807642Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-10T13:49:05.5807918Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
2025-01-10T13:49:05.5807985Z   
2025-01-10T13:49:05.5808093Z   v_inner_boundary < 0, assuming default value
2025-01-10T13:49:05.5808098Z 
2025-01-10T13:49:05.5808200Z tardis/model/tests/test_base.py: 6 warnings
2025-01-10T13:49:05.5808317Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-10T13:49:05.5808676Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-10T13:49:05.5808946Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
2025-01-10T13:49:05.5809017Z   
2025-01-10T13:49:05.5809114Z   v_outer_boundary < 0, assuming default value
2025-01-10T13:49:05.5809119Z 
2025-01-10T13:49:05.5809448Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:49:05.5809760Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:49:05.5810072Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:49:05.5810375Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:49:05.5811036Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_simple[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:49:05.5811572Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_empty[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:49:05.5812104Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_zeros[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:49:05.5812551Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:49:05.5812915Z tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:49:05.5813173Z   /home/runner/micromamba/envs/tardis/lib/python3.12/pickle.py:323: DeprecationWarning:
2025-01-10T13:49:05.5813246Z   
2025-01-10T13:49:05.5814775Z   numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
2025-01-10T13:49:05.5814783Z 
2025-01-10T13:49:05.5815238Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:49:05.5815535Z   /home/runner/work/tardis/tardis/tardis/plasma/equilibrium/level_populations.py:65: FutureWarning:
2025-01-10T13:49:05.5815606Z   
2025-01-10T13:49:05.5815877Z   A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
2025-01-10T13:49:05.5816328Z   The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.
2025-01-10T13:49:05.5816399Z   
2025-01-10T13:49:05.5816922Z   For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.
2025-01-10T13:49:05.5816929Z 
2025-01-10T13:49:05.5817300Z tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:49:05.5817624Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1374: DeprecationWarning:
2025-01-10T13:49:05.5817697Z   
2025-01-10T13:49:05.5819072Z   numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
2025-01-10T13:49:05.5819206Z 
2025-01-10T13:49:05.5819354Z tardis/plasma/tests/test_complete_plasmas.py: 20 warnings
2025-01-10T13:49:05.5819646Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:49:05.5819713Z   
2025-01-10T13:49:05.5819812Z   Property "atomic_mass" not found
2025-01-10T13:49:05.5819817Z 
2025-01-10T13:49:05.5820246Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
2025-01-10T13:49:05.5820730Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
2025-01-10T13:49:05.5821019Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:49:05.5821084Z   
2025-01-10T13:49:05.5821187Z   Property "j_blues_norm_factor" not found
2025-01-10T13:49:05.5821192Z 
2025-01-10T13:49:05.5821603Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
2025-01-10T13:49:05.5821974Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
2025-01-10T13:49:05.5822247Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:49:05.5822319Z   
2025-01-10T13:49:05.5822411Z   Property "j_blue_estimator" not found
2025-01-10T13:49:05.5822416Z 
2025-01-10T13:49:05.5822802Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
2025-01-10T13:49:05.5823151Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
2025-01-10T13:49:05.5823422Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:49:05.5823494Z   
2025-01-10T13:49:05.5823578Z   Property "volume" not found
2025-01-10T13:49:05.5823583Z 
2025-01-10T13:49:05.5824121Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
2025-01-10T13:49:05.5824459Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
2025-01-10T13:49:05.5824733Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:49:05.5824803Z   
2025-01-10T13:49:05.5824885Z   Property "r_inner" not found
2025-01-10T13:49:05.5824893Z 
2025-01-10T13:49:05.5825108Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
2025-01-10T13:49:05.5825314Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
2025-01-10T13:49:05.5825523Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
2025-01-10T13:49:05.5825759Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
2025-01-10T13:49:05.5825827Z   
2025-01-10T13:49:05.5826013Z   Requesting inner boundary below inner shell. Extrapolating the inner cell
2025-01-10T13:49:05.5826019Z 
2025-01-10T13:49:05.5826255Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100.0]
2025-01-10T13:49:05.5826484Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[1000.0]
2025-01-10T13:49:05.5826723Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[10000.0]
2025-01-10T13:49:05.5826971Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100000.0]
2025-01-10T13:49:05.5827427Z   /home/runner/work/tardis/tardis/tardis/spectrum/tests/test_numba_formal_integral.py:35: DeprecationWarning:
2025-01-10T13:49:05.5827499Z   
2025-01-10T13:49:05.5827789Z   `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
2025-01-10T13:49:05.5827795Z 
2025-01-10T13:49:05.5828009Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-10T13:49:05.5828206Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:70: UserWarning:
2025-01-10T13:49:05.5828277Z   
2025-01-10T13:49:05.5828599Z   SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0
2025-01-10T13:49:05.5828612Z 
2025-01-10T13:49:05.5828813Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-10T13:49:05.5829012Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:111: UserWarning:
2025-01-10T13:49:05.5829182Z   
2025-01-10T13:49:05.5829535Z   SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.
2025-01-10T13:49:05.5829540Z 
2025-01-10T13:49:05.5829738Z tardis/tests/test_util.py::test_calculate_luminosity[string_io0-100 km-result0]
2025-01-10T13:49:05.5829935Z tardis/tests/test_util.py::test_calculate_luminosity[string_io1-500 km-result1]
2025-01-10T13:49:05.5830144Z   /home/runner/work/tardis/tardis/tardis/util/base.py:188: DeprecationWarning:
2025-01-10T13:49:05.5830216Z   
2025-01-10T13:49:05.5830495Z   `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
2025-01-10T13:49:05.5830505Z 
2025-01-10T13:49:05.5830672Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:49:05.5830969Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:736: DeprecationWarning:
2025-01-10T13:49:05.5831037Z   
2025-01-10T13:49:05.5831144Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:49:05.5831152Z 
2025-01-10T13:49:05.5831313Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:49:05.5831605Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:758: DeprecationWarning:
2025-01-10T13:49:05.5831670Z   
2025-01-10T13:49:05.5831772Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:49:05.5831777Z 
2025-01-10T13:49:05.5831932Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:49:05.5832224Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:779: DeprecationWarning:
2025-01-10T13:49:05.5832295Z   
2025-01-10T13:49:05.5832389Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:49:05.5832393Z 
2025-01-10T13:49:05.5832727Z tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
2025-01-10T13:49:05.5833009Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
2025-01-10T13:49:05.5833083Z   
2025-01-10T13:49:05.5834036Z   More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
2025-01-10T13:49:05.5834051Z 
2025-01-10T13:49:05.5834404Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5834756Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5835098Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5835441Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5835779Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5836265Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5836618Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:49:05.5836689Z   
2025-01-10T13:49:05.5836891Z   Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
2025-01-10T13:49:05.5837068Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:49:05.5837309Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:49:05.5837314Z 
2025-01-10T13:49:05.5837658Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5838111Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5838455Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:49:05.5838529Z   
2025-01-10T13:49:05.5838702Z   Passing unrecognized arguments to super(FloatText).__init__(min=0).
2025-01-10T13:49:05.5838876Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:49:05.5839115Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:49:05.5839120Z 
2025-01-10T13:49:05.5839460Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:49:05.5839807Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:49:05.5839872Z   
2025-01-10T13:49:05.5840057Z   Passing unrecognized arguments to super(HTML).__init__(indent=True).
2025-01-10T13:49:05.5840225Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:49:05.5840461Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:49:05.5840465Z 
2025-01-10T13:49:05.5840897Z tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
2025-01-10T13:49:05.5841219Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/qgridnext/grid.py:825: DeprecationWarning:
2025-01-10T13:49:05.5841291Z   
2025-01-10T13:49:05.5841567Z   QgridWidget._grid_options_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.
2025-01-10T13:49:05.5841575Z 
2025-01-10T13:49:05.5841839Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:49:05.5842048Z   /home/runner/work/tardis/tardis/tardis/io/util.py:289: PerformanceWarning:
2025-01-10T13:49:05.5842122Z   
2025-01-10T13:49:05.5842188Z   
2025-01-10T13:49:05.5842394Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:49:05.5842647Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-10T13:49:05.5842656Z 
2025-01-10T13:49:05.5842906Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:49:05.5843117Z   /home/runner/work/tardis/tardis/tardis/io/util.py:292: PerformanceWarning:
2025-01-10T13:49:05.5843183Z   
2025-01-10T13:49:05.5843250Z   
2025-01-10T13:49:05.5843445Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:49:05.5843726Z   map directly to c-types [inferred_type->mixed,key->values] [items->None]
2025-01-10T13:49:05.5843732Z 
2025-01-10T13:49:05.5843984Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:49:05.5844239Z   /home/runner/work/tardis/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
2025-01-10T13:49:05.5844423Z   
2025-01-10T13:49:05.5844617Z   The number of interpolate_shells was not specified. The value was set to 80.
2025-01-10T13:49:05.5844622Z 
2025-01-10T13:49:05.5844822Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-01-10T13:49:05.5844827Z 
2025-01-10T13:49:05.5844990Z ---------- coverage: platform linux, python 3.12.4-final-0 -----------
2025-01-10T13:49:05.5845117Z Coverage HTML written to dir coverage_html_report
2025-01-10T13:49:05.5845213Z Coverage XML written to file coverage.xml
2025-01-10T13:49:05.5845218Z 
2025-01-10T13:49:05.5845347Z =========================== short test summary info ============================
2025-01-10T13:49:05.5845758Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_sobolev_line_opacity - AssertionError: MultiIndex level [0] are different
2025-01-10T13:49:05.5845898Z 
2025-01-10T13:49:05.5846026Z MultiIndex level [0] values are different (0.09581 %)
2025-01-10T13:49:05.5846149Z [left]:  Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:49:05.5846216Z        ...
2025-01-10T13:49:05.5846308Z        20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:49:05.5846426Z       dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:49:05.5846539Z [right]: Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:49:05.5846605Z        ...
2025-01-10T13:49:05.5846690Z        20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:49:05.5846804Z       dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:49:05.5846911Z At positional index 54, first diff: 12 != 14
2025-01-10T13:49:05.5847193Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_beta_sobolevs - AssertionError: 
2025-01-10T13:49:05.5847294Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.5847298Z 
2025-01-10T13:49:05.5847393Z Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:49:05.5847517Z Max absolute difference among violations: 0.99984222
2025-01-10T13:49:05.5847648Z Max relative difference among violations: 6337.12154973
2025-01-10T13:49:05.5847741Z  ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.5847825Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.5847901Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:49:05.5848001Z  DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.5848072Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.5848153Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:49:05.5848648Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5848654Z 
2025-01-10T13:49:05.5848785Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5848897Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5848967Z        ...
2025-01-10T13:49:05.5849049Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5849178Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5849288Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5849353Z        ...
2025-01-10T13:49:05.5849438Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5849556Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5849662Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5850176Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5850182Z 
2025-01-10T13:49:05.5850281Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5850659Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5851081Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5851418Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5852009Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5852017Z 
2025-01-10T13:49:05.5852105Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5852475Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5852846Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5853230Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5853822Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5853828Z 
2025-01-10T13:49:05.5853957Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5854069Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5854143Z        ...
2025-01-10T13:49:05.5854221Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5854354Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5854459Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5854530Z        ...
2025-01-10T13:49:05.5854608Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5854730Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5854827Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5855351Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5855357Z 
2025-01-10T13:49:05.5855483Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5855583Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5855657Z        ...
2025-01-10T13:49:05.5855739Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5855862Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5856084Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5856155Z        ...
2025-01-10T13:49:05.5856233Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5856353Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5856447Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5856931Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5856937Z 
2025-01-10T13:49:05.5857059Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5857159Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5857231Z        ...
2025-01-10T13:49:05.5857309Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5857542Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5857649Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5857720Z        ...
2025-01-10T13:49:05.5857796Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5857917Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5858009Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5858523Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5858529Z 
2025-01-10T13:49:05.5858653Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5858753Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5858824Z        ...
2025-01-10T13:49:05.5858900Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5859022Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5859128Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5859204Z        ...
2025-01-10T13:49:05.5859280Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5859400Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5859497Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5860008Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5860013Z 
2025-01-10T13:49:05.5860138Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5860236Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5860304Z        ...
2025-01-10T13:49:05.5860380Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5860500Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5860604Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5860674Z        ...
2025-01-10T13:49:05.5860754Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5860874Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5860966Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5861457Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5861463Z 
2025-01-10T13:49:05.5861588Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5861687Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5861759Z        ...
2025-01-10T13:49:05.5861835Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5861956Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5862058Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5868150Z        ...
2025-01-10T13:49:05.5868285Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5868629Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5868738Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5869247Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5869255Z 
2025-01-10T13:49:05.5869388Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5869504Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5869574Z        ...
2025-01-10T13:49:05.5869662Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5869787Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5869897Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5869967Z        ...
2025-01-10T13:49:05.5870160Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5870282Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5870386Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5870883Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5870889Z 
2025-01-10T13:49:05.5870979Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5871350Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5871685Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5872019Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5872520Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5872525Z 
2025-01-10T13:49:05.5872617Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5872981Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5873356Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5873884Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5874522Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5874528Z 
2025-01-10T13:49:05.5874662Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5874772Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5874843Z        ...
2025-01-10T13:49:05.5874924Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5875052Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5875162Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5875231Z        ...
2025-01-10T13:49:05.5875313Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5875536Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5875642Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5876148Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5876154Z 
2025-01-10T13:49:05.5876282Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5876383Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5876454Z        ...
2025-01-10T13:49:05.5876531Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5876656Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5876778Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5876842Z        ...
2025-01-10T13:49:05.5876923Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5877043Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5877146Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5877622Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5877627Z 
2025-01-10T13:49:05.5877749Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5877850Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5877922Z        ...
2025-01-10T13:49:05.5877997Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5878121Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5878229Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5878293Z        ...
2025-01-10T13:49:05.5878373Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5878486Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5878589Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5879078Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5879087Z 
2025-01-10T13:49:05.5879210Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5879309Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5879379Z        ...
2025-01-10T13:49:05.5879455Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5879574Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5879676Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5879744Z        ...
2025-01-10T13:49:05.5879828Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5879943Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5880042Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5880536Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5880626Z 
2025-01-10T13:49:05.5880753Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5880855Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5880924Z        ...
2025-01-10T13:49:05.5881000Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5881121Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5881223Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5881294Z        ...
2025-01-10T13:49:05.5881376Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5881487Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5881586Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5882057Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5882140Z 
2025-01-10T13:49:05.5882265Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5882363Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5882434Z        ...
2025-01-10T13:49:05.5882512Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5882630Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5882732Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5882803Z        ...
2025-01-10T13:49:05.5882883Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5882996Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5883093Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5883557Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5883568Z 
2025-01-10T13:49:05.5883797Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5883899Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5883968Z        ...
2025-01-10T13:49:05.5884043Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5884160Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5884260Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5884330Z        ...
2025-01-10T13:49:05.5884409Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5884522Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5884619Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5885097Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5885106Z 
2025-01-10T13:49:05.5885199Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5885565Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5885894Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5886219Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5886831Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5886842Z 
2025-01-10T13:49:05.5886928Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5887291Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5887773Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5888146Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5888606Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5888617Z 
2025-01-10T13:49:05.5888735Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5888844Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5888909Z        ...
2025-01-10T13:49:05.5888995Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5889111Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5889218Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5889287Z        ...
2025-01-10T13:49:05.5889364Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5889482Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5889574Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5890076Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5890085Z 
2025-01-10T13:49:05.5890206Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5890315Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5890379Z        ...
2025-01-10T13:49:05.5890459Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5890573Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5890678Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5890746Z        ...
2025-01-10T13:49:05.5890821Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5890940Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5891031Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5891492Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5891497Z 
2025-01-10T13:49:05.5891616Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5891720Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5891869Z        ...
2025-01-10T13:49:05.5891949Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5892063Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5892169Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5892237Z        ...
2025-01-10T13:49:05.5892313Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5892430Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5892523Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5893019Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5893024Z 
2025-01-10T13:49:05.5893138Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5893318Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5893387Z        ...
2025-01-10T13:49:05.5893507Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5893847Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5894019Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5894133Z        ...
2025-01-10T13:49:05.5894266Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5894476Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5894588Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5895092Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5895098Z 
2025-01-10T13:49:05.5895221Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5895331Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5895402Z        ...
2025-01-10T13:49:05.5895488Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5895609Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5895718Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5895788Z        ...
2025-01-10T13:49:05.5895865Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5895984Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5896078Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5896559Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5896564Z 
2025-01-10T13:49:05.5896688Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5896801Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5896870Z        ...
2025-01-10T13:49:05.5896956Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5897080Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5897189Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5897259Z        ...
2025-01-10T13:49:05.5897337Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5897459Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5897556Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5898061Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5898066Z 
2025-01-10T13:49:05.5898182Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5898289Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5898354Z        ...
2025-01-10T13:49:05.5898439Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5898559Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5898809Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5898880Z        ...
2025-01-10T13:49:05.5898956Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5899075Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5899170Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5899684Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5899689Z 
2025-01-10T13:49:05.5899778Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5900145Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5900582Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5900906Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5901419Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5901430Z 
2025-01-10T13:49:05.5901521Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5901881Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5902251Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5902627Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5903105Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5903111Z 
2025-01-10T13:49:05.5903236Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5903338Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5903409Z        ...
2025-01-10T13:49:05.5903487Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5903739Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5903981Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5904047Z        ...
2025-01-10T13:49:05.5904129Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5904246Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5904345Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5904861Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5904867Z 
2025-01-10T13:49:05.5904993Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5905093Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5905163Z        ...
2025-01-10T13:49:05.5905239Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5905467Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5905580Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5905644Z        ...
2025-01-10T13:49:05.5905728Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5905843Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5905940Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5906420Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5906426Z 
2025-01-10T13:49:05.5906548Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5906646Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5906715Z        ...
2025-01-10T13:49:05.5906799Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5906919Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5907029Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5907096Z        ...
2025-01-10T13:49:05.5907178Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5907295Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5907395Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5907909Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5907915Z 
2025-01-10T13:49:05.5908036Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5908137Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5908208Z        ...
2025-01-10T13:49:05.5908283Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5908404Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5908511Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5908579Z        ...
2025-01-10T13:49:05.5908663Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5908779Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5908878Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5909389Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5909394Z 
2025-01-10T13:49:05.5909516Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5909615Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5909686Z        ...
2025-01-10T13:49:05.5909761Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5909880Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5909988Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5910056Z        ...
2025-01-10T13:49:05.5910136Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5910366Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5910463Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5910960Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5910965Z 
2025-01-10T13:49:05.5911087Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5911188Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5911258Z        ...
2025-01-10T13:49:05.5911334Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5911455Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5911558Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5911628Z        ...
2025-01-10T13:49:05.5911807Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5911922Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5912024Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5912585Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5912590Z 
2025-01-10T13:49:05.5912715Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5912815Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5912893Z        ...
2025-01-10T13:49:05.5912978Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5913098Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5913211Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5913279Z        ...
2025-01-10T13:49:05.5913363Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5913481Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5913587Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5914286Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5914292Z 
2025-01-10T13:49:05.5914389Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5914762Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5915088Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5915429Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5916007Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5916013Z 
2025-01-10T13:49:05.5916100Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5916468Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5916958Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5917331Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5917985Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5917990Z 
2025-01-10T13:49:05.5918117Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5918218Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5918287Z        ...
2025-01-10T13:49:05.5918367Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5918489Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5918592Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5918666Z        ...
2025-01-10T13:49:05.5918743Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5918868Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5918962Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5919553Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5919559Z 
2025-01-10T13:49:05.5919682Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5919781Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5919850Z        ...
2025-01-10T13:49:05.5919931Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5920051Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5920154Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5920228Z        ...
2025-01-10T13:49:05.5920308Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5920431Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5920525Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5921079Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5921085Z 
2025-01-10T13:49:05.5921206Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5921305Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5921376Z        ...
2025-01-10T13:49:05.5921451Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5921573Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5921675Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5921748Z        ...
2025-01-10T13:49:05.5921829Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5921950Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5922154Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5922742Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5922747Z 
2025-01-10T13:49:05.5922870Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5922969Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5923039Z        ...
2025-01-10T13:49:05.5923113Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5923240Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5923344Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5923415Z        ...
2025-01-10T13:49:05.5923492Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5923794Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5923895Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5924480Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5924485Z 
2025-01-10T13:49:05.5924606Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5924706Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5924777Z        ...
2025-01-10T13:49:05.5924854Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5924975Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5925080Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5925151Z        ...
2025-01-10T13:49:05.5925229Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5925357Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5925459Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5926042Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5926047Z 
2025-01-10T13:49:05.5926172Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5926273Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5926345Z        ...
2025-01-10T13:49:05.5926423Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5926545Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5926654Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5926723Z        ...
2025-01-10T13:49:05.5926800Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5926920Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5927017Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5927545Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5927550Z 
2025-01-10T13:49:05.5927677Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5927779Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5927852Z        ...
2025-01-10T13:49:05.5927929Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5928052Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5928154Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5928226Z        ...
2025-01-10T13:49:05.5928303Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5928424Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5928523Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5929060Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5929182Z 
2025-01-10T13:49:05.5929279Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5929645Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5929975Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5930411Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5930950Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5930955Z 
2025-01-10T13:49:05.5931052Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5931413Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5931793Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5932170Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5932681Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5932687Z 
2025-01-10T13:49:05.5932804Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5932907Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5932972Z        ...
2025-01-10T13:49:05.5933053Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5933170Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5933277Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5933342Z        ...
2025-01-10T13:49:05.5933425Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5933539Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5933791Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5934480Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5934486Z 
2025-01-10T13:49:05.5934605Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5934711Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5934776Z        ...
2025-01-10T13:49:05.5934856Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5934974Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5935084Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5935148Z        ...
2025-01-10T13:49:05.5935232Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5935346Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5935552Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5936065Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5936074Z 
2025-01-10T13:49:05.5936191Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5936295Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5936359Z        ...
2025-01-10T13:49:05.5936443Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5936558Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5936665Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5936731Z        ...
2025-01-10T13:49:05.5936812Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5936924Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5937022Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5937571Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5937579Z 
2025-01-10T13:49:05.5937697Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5937800Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5937866Z        ...
2025-01-10T13:49:05.5937949Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5938067Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5938175Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5938240Z        ...
2025-01-10T13:49:05.5938324Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5938438Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5938538Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5939087Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5939096Z 
2025-01-10T13:49:05.5939216Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5939323Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5939387Z        ...
2025-01-10T13:49:05.5939470Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5939587Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5939699Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5939765Z        ...
2025-01-10T13:49:05.5939846Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5939960Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5940058Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5940582Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5940671Z 
2025-01-10T13:49:05.5940795Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5940901Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5940965Z        ...
2025-01-10T13:49:05.5941048Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5941164Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5941274Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5941340Z        ...
2025-01-10T13:49:05.5941428Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5941542Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5941642Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5942171Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5942254Z 
2025-01-10T13:49:05.5942376Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5942482Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5942547Z        ...
2025-01-10T13:49:05.5942633Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5942747Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5942855Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5942921Z        ...
2025-01-10T13:49:05.5943004Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5943118Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5943218Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5943875Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5943885Z 
2025-01-10T13:49:05.5943974Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5944349Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5944671Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5944999Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5945546Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5945551Z 
2025-01-10T13:49:05.5945640Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5946006Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5946381Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5946867Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5947383Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5947490Z 
2025-01-10T13:49:05.5947619Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5947720Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5947791Z        ...
2025-01-10T13:49:05.5947867Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5947989Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5948091Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5948160Z        ...
2025-01-10T13:49:05.5948236Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5948355Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5948453Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5948998Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5949009Z 
2025-01-10T13:49:05.5949133Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5949232Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5949304Z        ...
2025-01-10T13:49:05.5949380Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5949501Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5949604Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5949675Z        ...
2025-01-10T13:49:05.5949752Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5949871Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5949970Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5950477Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5950485Z 
2025-01-10T13:49:05.5950608Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5950712Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5950782Z        ...
2025-01-10T13:49:05.5950858Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5950981Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5951082Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5951151Z        ...
2025-01-10T13:49:05.5951230Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5951349Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5951448Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5951988Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5951997Z 
2025-01-10T13:49:05.5952120Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5952310Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5952381Z        ...
2025-01-10T13:49:05.5952456Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5952578Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5952679Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5952750Z        ...
2025-01-10T13:49:05.5952826Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5952949Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5953047Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5953591Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5953712Z 
2025-01-10T13:49:05.5953950Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5954049Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5954124Z        ...
2025-01-10T13:49:05.5954202Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5954323Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5954426Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5954497Z        ...
2025-01-10T13:49:05.5954573Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5954692Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5954794Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5955319Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5955324Z 
2025-01-10T13:49:05.5955448Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5955551Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5955627Z        ...
2025-01-10T13:49:05.5955704Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5955825Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5955928Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5955998Z        ...
2025-01-10T13:49:05.5956076Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5956197Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5956295Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5956845Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5956851Z 
2025-01-10T13:49:05.5956976Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5957084Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5957156Z        ...
2025-01-10T13:49:05.5957235Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5957354Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5957454Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5957526Z        ...
2025-01-10T13:49:05.5957601Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5957721Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5957819Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5958378Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5958384Z 
2025-01-10T13:49:05.5958478Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5958841Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5959309Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5959638Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5960272Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5960283Z 
2025-01-10T13:49:05.5960372Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5960738Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5961104Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5961488Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5962027Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5962033Z 
2025-01-10T13:49:05.5962149Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5962256Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5962323Z        ...
2025-01-10T13:49:05.5962404Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5962519Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5962628Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5962699Z        ...
2025-01-10T13:49:05.5962775Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5962895Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5962989Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5963571Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5963577Z 
2025-01-10T13:49:05.5963798Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5963907Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5964088Z        ...
2025-01-10T13:49:05.5964171Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5964288Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5964396Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5964467Z        ...
2025-01-10T13:49:05.5964545Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5964668Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5964762Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5965305Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5965311Z 
2025-01-10T13:49:05.5965428Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5965534Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5965709Z        ...
2025-01-10T13:49:05.5965797Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5965910Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5966020Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5966092Z        ...
2025-01-10T13:49:05.5966168Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5966289Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5966381Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5966955Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5966960Z 
2025-01-10T13:49:05.5967077Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5967183Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5967251Z        ...
2025-01-10T13:49:05.5967333Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5967451Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5967560Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5967632Z        ...
2025-01-10T13:49:05.5967709Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5967832Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5967927Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5968497Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5968502Z 
2025-01-10T13:49:05.5968619Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5968725Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5968791Z        ...
2025-01-10T13:49:05.5968880Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5969000Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5969110Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5969180Z        ...
2025-01-10T13:49:05.5969256Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5969376Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5969470Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5970027Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5970033Z 
2025-01-10T13:49:05.5970148Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5970251Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5970316Z        ...
2025-01-10T13:49:05.5970396Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5970514Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5970730Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5970801Z        ...
2025-01-10T13:49:05.5970877Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5970996Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5971088Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5971607Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5971612Z 
2025-01-10T13:49:05.5971730Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5971837Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5971901Z        ...
2025-01-10T13:49:05.5971983Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5972181Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5972297Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5972370Z        ...
2025-01-10T13:49:05.5972449Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5972575Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5972673Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5973211Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5973216Z 
2025-01-10T13:49:05.5973307Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5973776Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5974118Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5974469Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5975003Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5975014Z 
2025-01-10T13:49:05.5975110Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5975474Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5975848Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5976344Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5976855Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5976862Z 
2025-01-10T13:49:05.5976992Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5977098Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5977168Z        ...
2025-01-10T13:49:05.5977256Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5977495Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5977609Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5977675Z        ...
2025-01-10T13:49:05.5977756Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5977873Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5977973Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5978517Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5978524Z 
2025-01-10T13:49:05.5978649Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5978750Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5978821Z        ...
2025-01-10T13:49:05.5978903Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5979022Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5979137Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5979204Z        ...
2025-01-10T13:49:05.5979286Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5979400Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5979501Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5980007Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5980013Z 
2025-01-10T13:49:05.5980134Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5980234Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5980305Z        ...
2025-01-10T13:49:05.5980387Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5980505Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5980619Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5980687Z        ...
2025-01-10T13:49:05.5980769Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5980882Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5980985Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5981524Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5981529Z 
2025-01-10T13:49:05.5981652Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5981752Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5981822Z        ...
2025-01-10T13:49:05.5981904Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5982020Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5982131Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5982197Z        ...
2025-01-10T13:49:05.5982363Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5982479Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5982581Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5983098Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5983103Z 
2025-01-10T13:49:05.5983226Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5983328Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5983401Z        ...
2025-01-10T13:49:05.5983485Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5983713Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5983832Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5984010Z        ...
2025-01-10T13:49:05.5984099Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5984221Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5984326Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5984861Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5984866Z 
2025-01-10T13:49:05.5984994Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5985102Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5985173Z        ...
2025-01-10T13:49:05.5985253Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5985373Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5985481Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5985553Z        ...
2025-01-10T13:49:05.5985636Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5985755Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5985856Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5986396Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5986401Z 
2025-01-10T13:49:05.5986497Z Series values are different (4.04858 %)
2025-01-10T13:49:05.5986867Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5987209Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5987544Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.5988087Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.5988092Z 
2025-01-10T13:49:05.5988183Z Series values are different (6.47773 %)
2025-01-10T13:49:05.5988553Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.5989030Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5989404Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.5989998Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5990003Z 
2025-01-10T13:49:05.5990125Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5990233Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5990305Z        ...
2025-01-10T13:49:05.5990383Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5990508Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5990612Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5990687Z        ...
2025-01-10T13:49:05.5990765Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5990889Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5990985Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5991540Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5991545Z 
2025-01-10T13:49:05.5991669Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5991776Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5991847Z        ...
2025-01-10T13:49:05.5991924Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5992045Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5992149Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5992223Z        ...
2025-01-10T13:49:05.5992301Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5992422Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5992518Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5993043Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5993048Z 
2025-01-10T13:49:05.5993167Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5993272Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5993342Z        ...
2025-01-10T13:49:05.5993420Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5993545Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5993750Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5993824Z        ...
2025-01-10T13:49:05.5993901Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5994027Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5994241Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5994794Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5994799Z 
2025-01-10T13:49:05.5994917Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5995021Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5995091Z        ...
2025-01-10T13:49:05.5995168Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5995293Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5995397Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5995467Z        ...
2025-01-10T13:49:05.5995544Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5995768Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5995867Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5996414Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5996419Z 
2025-01-10T13:49:05.5996537Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5996642Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5996713Z        ...
2025-01-10T13:49:05.5996791Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5996914Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5997018Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5997087Z        ...
2025-01-10T13:49:05.5997166Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5997284Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5997383Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5997916Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5997921Z 
2025-01-10T13:49:05.5998041Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5998147Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5998218Z        ...
2025-01-10T13:49:05.5998295Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5998415Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5998518Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5998588Z        ...
2025-01-10T13:49:05.5998663Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5998785Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.5998885Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.5999418Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.5999426Z 
2025-01-10T13:49:05.5999544Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.5999651Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.5999721Z        ...
2025-01-10T13:49:05.5999798Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.5999922Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6000026Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6000096Z        ...
2025-01-10T13:49:05.6000172Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6000291Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6000385Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6000933Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6001027Z 
2025-01-10T13:49:05.6001118Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6001488Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6001817Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6002237Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6002783Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6002788Z 
2025-01-10T13:49:05.6002879Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6003243Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6003737Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6004115Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6004637Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6004647Z 
2025-01-10T13:49:05.6004767Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6004877Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6004943Z        ...
2025-01-10T13:49:05.6005025Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6005142Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6005251Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6005317Z        ...
2025-01-10T13:49:05.6005399Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6005514Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6005618Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6006170Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6006294Z 
2025-01-10T13:49:05.6006417Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6006524Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6006591Z        ...
2025-01-10T13:49:05.6006675Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6006791Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6006900Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6006966Z        ...
2025-01-10T13:49:05.6007048Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6007163Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6007265Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6007887Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6007902Z 
2025-01-10T13:49:05.6008021Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6008126Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6008193Z        ...
2025-01-10T13:49:05.6008273Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6008388Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6008498Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6008563Z        ...
2025-01-10T13:49:05.6008644Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6008760Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6008860Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6009409Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6009421Z 
2025-01-10T13:49:05.6009539Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6009645Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6009710Z        ...
2025-01-10T13:49:05.6009793Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6009908Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6010016Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6010082Z        ...
2025-01-10T13:49:05.6010166Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6010279Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6010379Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6010926Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6010942Z 
2025-01-10T13:49:05.6011060Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6011167Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6011233Z        ...
2025-01-10T13:49:05.6011314Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6011431Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6011540Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6011606Z        ...
2025-01-10T13:49:05.6011687Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6011804Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6011902Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6012432Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6012530Z 
2025-01-10T13:49:05.6012650Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6012755Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6012824Z        ...
2025-01-10T13:49:05.6012906Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6013023Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6013130Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6013195Z        ...
2025-01-10T13:49:05.6013277Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6013392Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6013491Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6014112Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6014238Z 
2025-01-10T13:49:05.6014363Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6014469Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6014535Z        ...
2025-01-10T13:49:05.6014616Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6014732Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6014841Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6014906Z        ...
2025-01-10T13:49:05.6014988Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6015105Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6015204Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6015739Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6015753Z 
2025-01-10T13:49:05.6015840Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6016213Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6016538Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6016868Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6017413Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6017419Z 
2025-01-10T13:49:05.6017506Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6017871Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6018247Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6018728Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6019246Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6019326Z 
2025-01-10T13:49:05.6019452Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6019553Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6019624Z        ...
2025-01-10T13:49:05.6019702Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6019825Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6019928Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6020001Z        ...
2025-01-10T13:49:05.6020079Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6020199Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6020295Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6020856Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6020865Z 
2025-01-10T13:49:05.6020991Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6021092Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6021161Z        ...
2025-01-10T13:49:05.6021239Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6021359Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6021464Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6021535Z        ...
2025-01-10T13:49:05.6021612Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6021732Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6021827Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6022348Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6022356Z 
2025-01-10T13:49:05.6022478Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6022583Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6022655Z        ...
2025-01-10T13:49:05.6022731Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6022851Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6022956Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6023026Z        ...
2025-01-10T13:49:05.6023102Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6023221Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6023315Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6024006Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6024017Z 
2025-01-10T13:49:05.6024140Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6024391Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6024463Z        ...
2025-01-10T13:49:05.6024540Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6024665Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6024768Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6024839Z        ...
2025-01-10T13:49:05.6024915Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6025034Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6025126Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6025678Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6025684Z 
2025-01-10T13:49:05.6025806Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6026028Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6026105Z        ...
2025-01-10T13:49:05.6026183Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6026303Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6026408Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6026478Z        ...
2025-01-10T13:49:05.6026555Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6026673Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6026769Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6027299Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6027304Z 
2025-01-10T13:49:05.6027427Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6027531Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6027605Z        ...
2025-01-10T13:49:05.6027682Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6027802Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6027904Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6027974Z        ...
2025-01-10T13:49:05.6028051Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6028172Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6028265Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6028801Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6028807Z 
2025-01-10T13:49:05.6028931Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6029033Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6029107Z        ...
2025-01-10T13:49:05.6029186Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6029308Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6029411Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6029482Z        ...
2025-01-10T13:49:05.6029558Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6029680Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6029774Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6030329Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6030334Z 
2025-01-10T13:49:05.6030426Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6030788Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6031205Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6031537Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6032161Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6032166Z 
2025-01-10T13:49:05.6032260Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6032624Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6032996Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6033375Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6034002Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6034008Z 
2025-01-10T13:49:05.6034128Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6034238Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6034306Z        ...
2025-01-10T13:49:05.6034389Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6034506Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6034616Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6034680Z        ...
2025-01-10T13:49:05.6034762Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6034879Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6034978Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6035539Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6035544Z 
2025-01-10T13:49:05.6035663Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6035769Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6035840Z        ...
2025-01-10T13:49:05.6036039Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6036159Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6036268Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6036333Z        ...
2025-01-10T13:49:05.6036415Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6036530Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6036629Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6037157Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6037162Z 
2025-01-10T13:49:05.6037281Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6037386Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6037559Z        ...
2025-01-10T13:49:05.6037640Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6037761Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6037869Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6037935Z        ...
2025-01-10T13:49:05.6038018Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6038134Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6038234Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6038790Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6038795Z 
2025-01-10T13:49:05.6038913Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6039019Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6039086Z        ...
2025-01-10T13:49:05.6039171Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6039290Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6039397Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6039463Z        ...
2025-01-10T13:49:05.6039544Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6039661Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6039759Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6040313Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6040318Z 
2025-01-10T13:49:05.6040435Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6040540Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6040606Z        ...
2025-01-10T13:49:05.6040688Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6040807Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6040922Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6040987Z        ...
2025-01-10T13:49:05.6041068Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6041184Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6041284Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6041822Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6041827Z 
2025-01-10T13:49:05.6041946Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6042050Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6042117Z        ...
2025-01-10T13:49:05.6042199Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6042318Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6042514Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6042580Z        ...
2025-01-10T13:49:05.6042664Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6042780Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6042878Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6043454Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6043460Z 
2025-01-10T13:49:05.6043578Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6043797Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6043864Z        ...
2025-01-10T13:49:05.6043947Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6044180Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6044291Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6044361Z        ...
2025-01-10T13:49:05.6044445Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6044560Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6044659Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6045244Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6045249Z 
2025-01-10T13:49:05.6045338Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6045712Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6046043Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6046372Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6046948Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6046959Z 
2025-01-10T13:49:05.6047055Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6047423Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6047797Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6048296Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6048855Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6048862Z 
2025-01-10T13:49:05.6048990Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6049092Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6049236Z        ...
2025-01-10T13:49:05.6049314Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6049440Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6049545Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6049616Z        ...
2025-01-10T13:49:05.6049698Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6049813Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6049912Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6050500Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6050506Z 
2025-01-10T13:49:05.6050632Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6050732Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6050803Z        ...
2025-01-10T13:49:05.6050889Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6051012Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6051120Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6051186Z        ...
2025-01-10T13:49:05.6051268Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6051384Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6051485Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6052038Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6052044Z 
2025-01-10T13:49:05.6052168Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6052268Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6052339Z        ...
2025-01-10T13:49:05.6052420Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6052542Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6052656Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6052723Z        ...
2025-01-10T13:49:05.6052804Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6052918Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6053019Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6053837Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.6053844Z 
2025-01-10T13:49:05.6054014Z DataFrame.iloc[:, 0] (column name="0") values are different (0.80972 %)
2025-01-10T13:49:05.6054377Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6059083Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995981197664222, 0.9995995247961845, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812817, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235593, ...]
2025-01-10T13:49:05.6063909Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995995247961845, 0.9995981197664222, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812795, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235604, ...]
2025-01-10T13:49:05.6064103Z At positional index 124, first diff: 0.9928779361771577 != 0.9929028359129612
2025-01-10T13:49:05.6064725Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6064851Z 
2025-01-10T13:49:05.6064980Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6065089Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6065156Z        ...
2025-01-10T13:49:05.6065243Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6065363Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6065473Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6065540Z        ...
2025-01-10T13:49:05.6065624Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6065743Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6065845Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6066428Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6066560Z 
2025-01-10T13:49:05.6066683Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6066790Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6066856Z        ...
2025-01-10T13:49:05.6066938Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6067055Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6067171Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6067239Z        ...
2025-01-10T13:49:05.6067325Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6067441Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6067542Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6068124Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6068142Z 
2025-01-10T13:49:05.6068261Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6068367Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6068433Z        ...
2025-01-10T13:49:05.6068514Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6068630Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6068738Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6068805Z        ...
2025-01-10T13:49:05.6068888Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6069004Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6069106Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6069667Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6069683Z 
2025-01-10T13:49:05.6069805Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6069910Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6069976Z        ...
2025-01-10T13:49:05.6070057Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6070174Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6070284Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6070350Z        ...
2025-01-10T13:49:05.6070433Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6070549Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6070649Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6071196Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6071295Z 
2025-01-10T13:49:05.6071416Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6071526Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6071592Z        ...
2025-01-10T13:49:05.6071675Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6071790Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6071898Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6071963Z        ...
2025-01-10T13:49:05.6072047Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6072163Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6072262Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6072822Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6072931Z 
2025-01-10T13:49:05.6073025Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6073395Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6073822Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6074161Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6074751Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6074757Z 
2025-01-10T13:49:05.6074844Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6075212Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6075594Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6075963Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6076506Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6076625Z 
2025-01-10T13:49:05.6076754Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6076857Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6076929Z        ...
2025-01-10T13:49:05.6077011Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6077136Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6077240Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6077311Z        ...
2025-01-10T13:49:05.6077392Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6077509Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6077609Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6078282Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6078291Z 
2025-01-10T13:49:05.6078415Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6078517Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6078589Z        ...
2025-01-10T13:49:05.6078667Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6078790Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6078893Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6078966Z        ...
2025-01-10T13:49:05.6079048Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6079163Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6079263Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6079808Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6079816Z 
2025-01-10T13:49:05.6079941Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6080042Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6080113Z        ...
2025-01-10T13:49:05.6080189Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6080311Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6080414Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6080484Z        ...
2025-01-10T13:49:05.6080567Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6080687Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6080791Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6081465Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.6081477Z 
2025-01-10T13:49:05.6081650Z DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:49:05.6082013Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6087011Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
2025-01-10T13:49:05.6092137Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:49:05.6092328Z At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:49:05.6092930Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6092941Z 
2025-01-10T13:49:05.6093064Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6093174Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6093243Z        ...
2025-01-10T13:49:05.6093401Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6093521Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6093748Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6093818Z        ...
2025-01-10T13:49:05.6093901Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6094018Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6094118Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6094683Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6094694Z 
2025-01-10T13:49:05.6094813Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6094920Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6095119Z        ...
2025-01-10T13:49:05.6095206Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6095326Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6095432Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6095497Z        ...
2025-01-10T13:49:05.6095579Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6095694Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6095796Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6096366Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6096371Z 
2025-01-10T13:49:05.6096491Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6096598Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6096670Z        ...
2025-01-10T13:49:05.6096754Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6096873Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6096980Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6097045Z        ...
2025-01-10T13:49:05.6097129Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6097245Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6097343Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6097894Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6097900Z 
2025-01-10T13:49:05.6098017Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6098122Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6098192Z        ...
2025-01-10T13:49:05.6098273Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6098393Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6098501Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6098568Z        ...
2025-01-10T13:49:05.6098650Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6098766Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6098866Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6099347Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6099352Z 
2025-01-10T13:49:05.6099471Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6099588Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6099654Z        ...
2025-01-10T13:49:05.6099737Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6099858Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6100086Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6100156Z        ...
2025-01-10T13:49:05.6100239Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6100356Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6100459Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6100956Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6100960Z 
2025-01-10T13:49:05.6101052Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6101422Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6101845Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6102180Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6102680Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6102691Z 
2025-01-10T13:49:05.6102780Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6103151Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6103525Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6104033Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6104506Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6104511Z 
2025-01-10T13:49:05.6104637Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6104739Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6104817Z        ...
2025-01-10T13:49:05.6104899Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6105022Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6105244Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6105317Z        ...
2025-01-10T13:49:05.6105397Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6105520Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6105622Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6106125Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6106131Z 
2025-01-10T13:49:05.6106256Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6106356Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6106427Z        ...
2025-01-10T13:49:05.6106505Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6106731Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6106841Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6106912Z        ...
2025-01-10T13:49:05.6106991Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6107110Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6107211Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6107675Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6107681Z 
2025-01-10T13:49:05.6107806Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6107908Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6107980Z        ...
2025-01-10T13:49:05.6108057Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6108178Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6108285Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6108362Z        ...
2025-01-10T13:49:05.6108440Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6108562Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6108664Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6109261Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.6109266Z 
2025-01-10T13:49:05.6109434Z DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:49:05.6109797Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6114799Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
2025-01-10T13:49:05.6119922Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:49:05.6120114Z At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:49:05.6120649Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6120660Z 
2025-01-10T13:49:05.6126819Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6126969Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6127043Z        ...
2025-01-10T13:49:05.6127132Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6127275Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6127392Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6127459Z        ...
2025-01-10T13:49:05.6127545Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6127662Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6127769Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6128310Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6128523Z 
2025-01-10T13:49:05.6128664Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6128772Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6128846Z        ...
2025-01-10T13:49:05.6128927Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6129053Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6129165Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6129232Z        ...
2025-01-10T13:49:05.6129315Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6129431Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6129532Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6130030Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6130145Z 
2025-01-10T13:49:05.6130277Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6130382Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6130454Z        ...
2025-01-10T13:49:05.6130533Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6130655Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6130763Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6130828Z        ...
2025-01-10T13:49:05.6130909Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6131024Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6131123Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6131599Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6131610Z 
2025-01-10T13:49:05.6131735Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6131836Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6131906Z        ...
2025-01-10T13:49:05.6131983Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6132104Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6132213Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6132278Z        ...
2025-01-10T13:49:05.6132358Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6132473Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6132572Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6133058Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6133067Z 
2025-01-10T13:49:05.6133199Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6133301Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6133375Z        ...
2025-01-10T13:49:05.6133451Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6133574Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6133811Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6133878Z        ...
2025-01-10T13:49:05.6133958Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6134072Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6134173Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6134681Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6134690Z 
2025-01-10T13:49:05.6134786Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6135325Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6135663Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6135996Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6136625Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6136636Z 
2025-01-10T13:49:05.6136725Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6137093Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6137466Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6137842Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6138324Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6138333Z 
2025-01-10T13:49:05.6138457Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6138566Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6138632Z        ...
2025-01-10T13:49:05.6138714Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6138842Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6138948Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6139020Z        ...
2025-01-10T13:49:05.6139097Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6139220Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6139318Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6139838Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6139847Z 
2025-01-10T13:49:05.6139966Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6140154Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6140221Z        ...
2025-01-10T13:49:05.6140302Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6140422Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6140526Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6140597Z        ...
2025-01-10T13:49:05.6140674Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6140796Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6140891Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6141372Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6141377Z 
2025-01-10T13:49:05.6141571Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6141682Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6141750Z        ...
2025-01-10T13:49:05.6141832Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6141955Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6142059Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6142129Z        ...
2025-01-10T13:49:05.6142204Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6142323Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6142417Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6142929Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6142935Z 
2025-01-10T13:49:05.6143054Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6143161Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6143229Z        ...
2025-01-10T13:49:05.6143311Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6143429Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6143533Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6143720Z        ...
2025-01-10T13:49:05.6143798Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6143919Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6144011Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6144518Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6144523Z 
2025-01-10T13:49:05.6144641Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6144748Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6144814Z        ...
2025-01-10T13:49:05.6144902Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6145023Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6145126Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6145195Z        ...
2025-01-10T13:49:05.6145270Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6145389Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6145484Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6145989Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6145994Z 
2025-01-10T13:49:05.6146118Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6146229Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6146298Z        ...
2025-01-10T13:49:05.6146382Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6146626Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6146731Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6146802Z        ...
2025-01-10T13:49:05.6146879Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6147001Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6147098Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6147585Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6147590Z 
2025-01-10T13:49:05.6147710Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6147817Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6147886Z        ...
2025-01-10T13:49:05.6148072Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6148195Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6148303Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6148374Z        ...
2025-01-10T13:49:05.6148450Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6148572Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6148668Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6149164Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6149169Z 
2025-01-10T13:49:05.6149258Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6149627Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6149965Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6150290Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6150790Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6150798Z 
2025-01-10T13:49:05.6150890Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6151247Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6151614Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6152069Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6152533Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6152538Z 
2025-01-10T13:49:05.6152660Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6152761Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6152834Z        ...
2025-01-10T13:49:05.6152990Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6153117Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6153227Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6153293Z        ...
2025-01-10T13:49:05.6153377Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6153493Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6153703Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6154228Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6154233Z 
2025-01-10T13:49:05.6154359Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6154462Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6154532Z        ...
2025-01-10T13:49:05.6154619Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6154740Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6154854Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6154920Z        ...
2025-01-10T13:49:05.6155002Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6155115Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6155214Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6155679Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6155684Z 
2025-01-10T13:49:05.6155807Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6155908Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6155978Z        ...
2025-01-10T13:49:05.6156059Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6156172Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6156283Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6156352Z        ...
2025-01-10T13:49:05.6156433Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6156545Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6156644Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6157141Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6157146Z 
2025-01-10T13:49:05.6157269Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6157371Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6157451Z        ...
2025-01-10T13:49:05.6157532Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6157646Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6157756Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6157974Z        ...
2025-01-10T13:49:05.6158058Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6158169Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6158268Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6158768Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6158772Z 
2025-01-10T13:49:05.6158893Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6158993Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6159064Z        ...
2025-01-10T13:49:05.6159145Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6159259Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6159366Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6159535Z        ...
2025-01-10T13:49:05.6159623Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6159739Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6159838Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6160319Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6160324Z 
2025-01-10T13:49:05.6160444Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6160544Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6160616Z        ...
2025-01-10T13:49:05.6160698Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6160813Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6160921Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6160990Z        ...
2025-01-10T13:49:05.6161072Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6161188Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6161286Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6161800Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6161805Z 
2025-01-10T13:49:05.6161928Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6162027Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6162098Z        ...
2025-01-10T13:49:05.6162180Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6162293Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6162399Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6162465Z        ...
2025-01-10T13:49:05.6162550Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6162666Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6162767Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6163296Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6163301Z 
2025-01-10T13:49:05.6163396Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6163872Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6164202Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6164686Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6165222Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6165227Z 
2025-01-10T13:49:05.6165313Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6165777Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6166145Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6166519Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6167028Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6167033Z 
2025-01-10T13:49:05.6167151Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6167257Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6167337Z        ...
2025-01-10T13:49:05.6167415Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6167537Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6167639Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6167710Z        ...
2025-01-10T13:49:05.6167792Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6167916Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6168010Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6168557Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6168563Z 
2025-01-10T13:49:05.6168680Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6168787Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6168857Z        ...
2025-01-10T13:49:05.6168934Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6169054Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6169156Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6169230Z        ...
2025-01-10T13:49:05.6169306Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6169430Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6169612Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6170117Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6170123Z 
2025-01-10T13:49:05.6170241Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6170347Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6170417Z        ...
2025-01-10T13:49:05.6170493Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6170613Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6170716Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6170794Z        ...
2025-01-10T13:49:05.6170871Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6171072Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6171170Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6171710Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6171715Z 
2025-01-10T13:49:05.6171837Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6171936Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6172007Z        ...
2025-01-10T13:49:05.6172083Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6172205Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6172308Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6172379Z        ...
2025-01-10T13:49:05.6172454Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6172574Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6172671Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6173217Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6173222Z 
2025-01-10T13:49:05.6173345Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6173446Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6173516Z        ...
2025-01-10T13:49:05.6173592Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6173831Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6173934Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6174004Z        ...
2025-01-10T13:49:05.6174080Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6174201Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6174299Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6174851Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6174859Z 
2025-01-10T13:49:05.6174983Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6175084Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6175153Z        ...
2025-01-10T13:49:05.6175228Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6175348Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6175450Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6175524Z        ...
2025-01-10T13:49:05.6175600Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6175721Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6175816Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6176401Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6176525Z 
2025-01-10T13:49:05.6176654Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6176755Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6176825Z        ...
2025-01-10T13:49:05.6176901Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6177021Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6177123Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6177195Z        ...
2025-01-10T13:49:05.6177271Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6177388Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6177482Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6178198Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6178207Z 
2025-01-10T13:49:05.6178299Z Series values are different (4.04858 %)
2025-01-10T13:49:05.6178663Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6178990Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6179326Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:49:05.6179918Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:49:05.6179923Z 
2025-01-10T13:49:05.6180015Z Series values are different (6.47773 %)
2025-01-10T13:49:05.6180375Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6180750Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6181123Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:49:05.6181771Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6181777Z 
2025-01-10T13:49:05.6181896Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6182007Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6182073Z        ...
2025-01-10T13:49:05.6182156Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6182275Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6182384Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6182449Z        ...
2025-01-10T13:49:05.6182533Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6182654Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6182824Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6183435Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6183444Z 
2025-01-10T13:49:05.6183562Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6183774Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6183843Z        ...
2025-01-10T13:49:05.6183924Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6184040Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6184147Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6184212Z        ...
2025-01-10T13:49:05.6184295Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6184415Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6184517Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6185088Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6185097Z 
2025-01-10T13:49:05.6185214Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6185323Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6185389Z        ...
2025-01-10T13:49:05.6185469Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6185586Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6185694Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6185759Z        ...
2025-01-10T13:49:05.6185839Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6185959Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6186053Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6186666Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6186674Z 
2025-01-10T13:49:05.6186792Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6186899Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6186964Z        ...
2025-01-10T13:49:05.6187048Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6187162Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6187269Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6187335Z        ...
2025-01-10T13:49:05.6187417Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6187538Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6187632Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6188238Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6188370Z 
2025-01-10T13:49:05.6188491Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6188597Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6188661Z        ...
2025-01-10T13:49:05.6188743Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6188855Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6188961Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6189027Z        ...
2025-01-10T13:49:05.6189108Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6189227Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6189323Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6189909Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:49:05.6190021Z 
2025-01-10T13:49:05.6190141Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:49:05.6190250Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6190315Z        ...
2025-01-10T13:49:05.6190396Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6190512Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6190619Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6190686Z        ...
2025-01-10T13:49:05.6190768Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:49:05.6190887Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:49:05.6190983Z At positional index 75, first diff: 7 != 6
2025-01-10T13:49:05.6191292Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[stimulated_emission_factor] - AssertionError: 
2025-01-10T13:49:05.6191392Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6191399Z 
2025-01-10T13:49:05.6191498Z Mismatched elements: 120 / 584480 (0.0205%)
2025-01-10T13:49:05.6191603Z Max absolute difference among violations: 1.
2025-01-10T13:49:05.6191709Z Max relative difference among violations: 1.
2025-01-10T13:49:05.6191849Z  ACTUAL: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:49:05.6191956Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:49:05.6192057Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:49:05.6192201Z  DESIRED: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:49:05.6192301Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:49:05.6192395Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:49:05.6192692Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_lower_level_index] - AssertionError: 
2025-01-10T13:49:05.6192790Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6192795Z 
2025-01-10T13:49:05.6192887Z Mismatched elements: 748 / 29224 (2.56%)
2025-01-10T13:49:05.6192995Z Max absolute difference among violations: 4005
2025-01-10T13:49:05.6193123Z Max relative difference among violations: 26.00649351
2025-01-10T13:49:05.6193240Z  ACTUAL: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:49:05.6193365Z  DESIRED: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:49:05.6193770Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_upper_level_index] - AssertionError: 
2025-01-10T13:49:05.6193867Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6193872Z 
2025-01-10T13:49:05.6193963Z Mismatched elements: 1847 / 29224 (6.32%)
2025-01-10T13:49:05.6194071Z Max absolute difference among violations: 4046
2025-01-10T13:49:05.6194202Z Max relative difference among violations: 24.82208589
2025-01-10T13:49:05.6194432Z  ACTUAL: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:49:05.6194551Z  DESIRED: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:49:05.6194811Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[beta_sobolev] - AssertionError: 
2025-01-10T13:49:05.6194910Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6194915Z 
2025-01-10T13:49:05.6195005Z Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:49:05.6195130Z Max absolute difference among violations: 0.99984222
2025-01-10T13:49:05.6195258Z Max relative difference among violations: 6337.12154973
2025-01-10T13:49:05.6195350Z  ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.6195432Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.6195508Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:49:05.6195605Z  DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.6195784Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:49:05.6195861Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:49:05.6196102Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines] - AssertionError: 
2025-01-10T13:49:05.6196200Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6196204Z 
2025-01-10T13:49:05.6196294Z Mismatched elements: 13335 / 263016 (5.07%)
2025-01-10T13:49:05.6196430Z Max absolute difference among violations: 4.25260542e+12
2025-01-10T13:49:05.6196555Z Max relative difference among violations: 18196.0085861
2025-01-10T13:49:05.6196719Z  ACTUAL: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:49:05.6196799Z         4.043917e+10, 6.677200e-07],
2025-01-10T13:49:05.6196935Z        [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:49:05.6197101Z  DESIRED: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:49:05.6197178Z         4.043917e+10, 6.677200e-07],
2025-01-10T13:49:05.6197312Z        [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:49:05.6197551Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[f_lu] - AssertionError: 
2025-01-10T13:49:05.6197649Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6197653Z 
2025-01-10T13:49:05.6197741Z Mismatched elements: 2221 / 29224 (7.6%)
2025-01-10T13:49:05.6197868Z Max absolute difference among violations: 2.92713618
2025-01-10T13:49:05.6197994Z Max relative difference among violations: 18196.0085861
2025-01-10T13:49:05.6198151Z  ACTUAL: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:49:05.6198231Z        1.126883e+00, 4.414472e-04])
2025-01-10T13:49:05.6198390Z  DESIRED: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:49:05.6198469Z        1.126883e+00, 4.414472e-04])
2025-01-10T13:49:05.6198725Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[tau_sobolevs] - AssertionError: 
2025-01-10T13:49:05.6198826Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6198836Z 
2025-01-10T13:49:05.6198925Z Mismatched elements: 39620 / 584480 (6.78%)
2025-01-10T13:49:05.6199058Z Max absolute difference among violations: 282815.33818472
2025-01-10T13:49:05.6199185Z Max relative difference among violations: 4.12352828e+47
2025-01-10T13:49:05.6199346Z  ACTUAL: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:49:05.6199425Z         0.000000e+00, 0.000000e+00],
2025-01-10T13:49:05.6199554Z        [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:49:05.6199718Z  DESIRED: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:49:05.6199791Z         0.000000e+00, 0.000000e+00],
2025-01-10T13:49:05.6199921Z        [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:49:05.6200407Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_w] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.6200503Z 
2025-01-10T13:49:05.6200670Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:49:05.6200742Z [index]: [0, 1]
2025-01-10T13:49:05.6200846Z [left]:  [0.40039163797855976, 0.45013644671958974]
2025-01-10T13:49:05.6200949Z [right]: [0.40039163797855976, 0.4500690173218345]
2025-01-10T13:49:05.6201121Z At positional index 1, first diff: 0.45013644671958974 != 0.4500690173218345
2025-01-10T13:49:05.6201612Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_t_rad] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.6201618Z 
2025-01-10T13:49:05.6201770Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:49:05.6201845Z [index]: [0, 1]
2025-01-10T13:49:05.6201936Z [left]:  [9967.488442185557, 10090.925208074616]
2025-01-10T13:49:05.6202030Z [right]: [9967.488442185557, 10091.396322818851]
2025-01-10T13:49:05.6202287Z At positional index 1, first diff: 10090.925208074616 != 10091.396322818851
2025-01-10T13:49:05.6202826Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_electron_densities] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:49:05.6202832Z 
2025-01-10T13:49:05.6202989Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:49:05.6203059Z [index]: [0, 1]
2025-01-10T13:49:05.6203153Z [left]:  [2869544645.3209715, 2880986026.9779425]
2025-01-10T13:49:05.6203244Z [right]: [2869544645.3209715, 2881024886.0882792]
2025-01-10T13:49:05.6203409Z At positional index 1, first diff: 2880986026.9779425 != 2881024886.0882792
2025-01-10T13:49:05.6203880Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[nu_bar_estimator] - AssertionError: Series are different
2025-01-10T13:49:05.6203887Z 
2025-01-10T13:49:05.6203980Z Series values are different (100.0 %)
2025-01-10T13:49:05.6204106Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:49:05.6205303Z [left]:  [1.0190851489144414e+29, 8.620293210130916e+28, 7.627182111494611e+28, 6.892948616165262e+28, 6.33792769094367e+28, 5.96002040258715e+28, 5.586558872212224e+28, 5.256359181780157e+28, 5.018051447190144e+28, 4.80142717097284e+28, 4.635443103818662e+28, 4.42760082209026e+28, 4.266701646003403e+28, 4.095148200480327e+28, 3.973054136677623e+28, 3.881348463924801e+28, 3.749648114483988e+28, 3.6669667839395174e+28, 3.5309131816469346e+28, 3.4364426470451254e+28]
2025-01-10T13:49:05.6206510Z [right]: [1.0202042777991753e+29, 8.604643039338655e+28, 7.621843612415326e+28, 6.887796775939633e+28, 6.338143063845967e+28, 5.961770832970249e+28, 5.583215038688499e+28, 5.26214201104387e+28, 5.00719468999816e+28, 4.795144203550334e+28, 4.630537292368217e+28, 4.425690259081018e+28, 4.270865369572798e+28, 4.094544283657345e+28, 3.972280940559004e+28, 3.884152385274923e+28, 3.7498225331847723e+28, 3.6666118688506634e+28, 3.5319738797726287e+28, 3.437270715325205e+28]
2025-01-10T13:49:05.6206706Z At positional index 0, first diff: 1.0190851489144414e+29 != 1.0202042777991753e+29
2025-01-10T13:49:05.6207069Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[j_estimator] - AssertionError: Series are different
2025-01-10T13:49:05.6207075Z 
2025-01-10T13:49:05.6207167Z Series values are different (100.0 %)
2025-01-10T13:49:05.6207288Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:49:05.6208261Z [left]:  [116548101693134.0, 98287497352449.0, 86880176732435.3, 78272950854373.0, 72163814877095.83, 67694196332568.8, 63443304042094.88, 60039709300008.766, 57626147839330.93, 55320363334244.24, 53407234761435.555, 51398562237742.71, 49867122015465.38, 48237829093150.86, 46995101666576.03, 46046276744657.68, 44990423974887.06, 44175537951010.664, 43032079683987.45, 42141581527839.66]
2025-01-10T13:49:05.6209210Z [right]: [116635492761989.08, 98171051632121.94, 86872515261186.84, 78289696965690.05, 72209193315676.42, 67743848273202.76, 63510940656108.0, 60117004438842.5, 57572723670164.91, 55316097836075.18, 53398108009568.71, 51391839595543.54, 49914799926154.195, 48252386019894.61, 46984233483222.1, 46076787175987.44, 45005288890715.74, 44179675761283.02, 43040066710169.69, 42141149121109.82]
2025-01-10T13:49:05.6209497Z At positional index 0, first diff: 116548101693134.0 != 116635492761989.08
2025-01-10T13:49:05.6209856Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[t_radiative] - AssertionError: Series are different
2025-01-10T13:49:05.6209860Z 
2025-01-10T13:49:05.6209944Z Series values are different (90.0 %)
2025-01-10T13:49:05.6210064Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:49:05.6211060Z [left]:  [10090.925208074616, 10114.284007169754, 10139.419400388753, 10142.763627360704, 10149.780795955081, 10123.09844072696, 10084.70389705666, 10058.012622231076, 10075.221831273808, 10032.602564737463, 10029.923783575228, 9982.400974610373, 9943.057719983486, 9914.605779635785, 9894.245392559053, 9854.911578885576, 9802.511064512953, 9775.252526407034, 9735.554945100961, 9699.295793920262]
2025-01-10T13:49:05.6212173Z [right]: [10091.396322818851, 10113.672762424394, 10138.57214647089, 10142.40782954104, 10149.471061360664, 10124.731447668686, 10084.96501000204, 10057.88480134284, 10073.983914823793, 10031.924501830883, 10029.890159447663, 9982.658841271636, 9943.375727608092, 9914.259749796103, 9893.924180562475, 9854.860600288932, 9802.891513260798, 9774.848565783677, 9735.162327402864, 9698.911095826039]
2025-01-10T13:49:05.6212341Z At positional index 0, first diff: 10090.925208074616 != 10091.396322818851
2025-01-10T13:49:05.6212706Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[dilution_factor] - AssertionError: Series are different
2025-01-10T13:49:05.6212711Z 
2025-01-10T13:49:05.6212801Z Series values are different (95.0 %)
2025-01-10T13:49:05.6212917Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:49:05.6214114Z [left]:  [0.45013644671958974, 0.3590876501536774, 0.29922866259325875, 0.2578248359585449, 0.22541895309871685, 0.2011998403594266, 0.1825952857379094, 0.16657898370897484, 0.15044998950385866, 0.13972884748944558, 0.12862444897046627, 0.12093391136570561, 0.1134368459236266, 0.1064936133229687, 0.1001521163428717, 0.09484336636678078, 0.090537247519663, 0.08584829670213995, 0.08202005255449264, 0.07823319609488677]
2025-01-10T13:49:05.6215194Z [right]: [0.4500690173218345, 0.3591778672440072, 0.299315794490968, 0.2578615845098735, 0.2254422032786788, 0.20109997630618956, 0.18257381854718482, 0.166581017494628, 0.15049754388199085, 0.13975435818105286, 0.12862206084807348, 0.12092168181342122, 0.1134233405695467, 0.10650389106044364, 0.10016109465785483, 0.09484390983006763, 0.09052533757303871, 0.08585912682814001, 0.0820302832176511, 0.07824287530618068]
2025-01-10T13:49:05.6215360Z At positional index 0, first diff: 0.45013644671958974 != 0.4500690173218345
2025-01-10T13:49:05.6215719Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_nus] - AssertionError: Series are different
2025-01-10T13:49:05.6215724Z 
2025-01-10T13:49:05.6215816Z Series values are different (5.1125 %)
2025-01-10T13:49:05.6216184Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6221354Z [left]:  [1806497964363691.5, 620824050797791.0, 651557470803973.5, 320924283401155.06, 561113873787112.25, 241798291122606.1, 676659115957490.4, 599043646843299.5, 607330789848065.1, 916915882531221.8, 944436308170835.4, 768263702028831.1, 3180981513893847.5, 2598977918829023.0, 857730899770804.0, 618923179519891.8, 551416875835854.44, 1086541433542293.5, 754833971959408.2, 491317193158596.1, 463436938874983.3, 1490288028825510.8, 820033385297487.8, 2452394921854276.0, 735345782477539.2, 754787342662615.8, 1199748305923909.8, 555498342552241.7, 1389852333652706.2, 1385846435296470.8, 368679109418251.0, 1912095724903033.2, 2017769542518466.0, 627651232172153.5, 1067422242306306.2, 948629480189651.8, 1978325812571257.2, 445358814403560.5, 1003063944118045.1, 849728144317407.0, 967658015948004.0, 1280663773931335.5, 1146264300342218.8, 1001861030074981.8, 1119183834838938.5, 508263982580230.94, 1892628101399911.5, 781537280613827.0, 1151086326674402.2, 604499180764604.0, 725902034055549.9, 457814698066574.3, 527262173332999.9, 341748821526544.94, 562192309822701.44, 1275142789503603.2, 657025184715239.1, 723852885328246.5, 1885538050889659.0, 585984121054452.8, 917026429989072.4, 696897964334913.8, 267976306885906.9, 343747179020909.4, 96582762885197.0, 1296746601148043.2, 491334710156273.4, 1492212625817827.0, 764003012375887.5, 1572736205466074.5, 1559683657845856.8, 476769967588303.4, 1860056739912971.5, 702994366583567.1, 1017518348351587.6, 484486056936689.44, 453148114829195.1, 717528815454204.8, 508993320531592.06, 1838746711006649.2, 663648932445292.6, 1322073114843600.0, 601612805662424.9, 1840374275823067.5, 440721373409527.9, 1641950783987409.2, 1588043382663297.8, 1174117968839014.5, 1215683099165958.0, 997747131579365.4, 1168546500179118.0, 1048569696680261.6, 1513832752764706.8, 1363140908755187.5, 430233648082889.1, 386057265404197.6, 1139144647809848.2, 307473380309096.1, 403471109559731.6, 1156219784137886.0, ...]
2025-01-10T13:49:05.6226803Z [right]: [1806512041912368.8, 620828912578783.0, 651561681514283.2, 320926793622792.2, 561113831783033.0, 241800185490365.7, 676657497080704.5, 599041295479916.1, 607335547665201.9, 916923063058785.2, 944437910067241.0, 768263081009078.1, 3180974191574679.5, 2598971968757746.0, 857737633068955.4, 618928023168687.5, 551416803496124.25, 1086549942730966.9, 754833333392143.2, 491321027587878.7, 463440568130160.4, 1490299638092356.5, 820039899773855.1, 2452391211684156.5, 735351500669317.2, 754784724695130.1, 1199750254428993.5, 555501175228475.94, 1389863217827777.5, 1385857288100655.8, 368681996608404.06, 1912110698856825.8, 2017785344022282.2, 627651183748411.8, 1067430591325981.9, 948623864004036.0, 1978326785288413.0, 445362302085804.25, 1003071799286044.6, 849734798686120.6, 967665593846029.1, 1280673803031827.2, 1146262107204918.5, 1001868875822752.4, 1119192629281446.4, 508267969421775.25, 1892642922899362.8, 781543400968040.9, 1151095341031394.2, 604503914702702.6, 725907718720482.8, 457818283293006.9, 527261796217634.44, 341748696489478.8, 562196737455386.1, 1275152810939863.2, 657003154645147.8, 723858331274613.6, 1885552835316985.5, 585988709997902.4, 917033611382352.2, 696895494383372.0, 267978405454919.2, 343749870964784.4, 96583519241591.61, 1296758039945233.8, 491338550899887.9, 1492219434855197.0, 764008995416200.5, 1572724795429636.2, 1559695871999531.0, 476770259286661.5, 1860071011741526.8, 702999878183188.2, 1017511963264823.4, 484489851031166.6, 453151663510803.5, 717543258409877.6, 508990329432545.4, 1838756496639701.8, 663654129595372.2, 1322083461079532.0, 601616268613591.0, 1840388688113732.8, 440724823612140.5, 1641895920313314.8, 1588055811374384.5, 1174127163560797.5, 1215687723496508.2, 997743048820577.1, 1168560411536350.2, 1048577905256173.4, 1513844599143900.5, 1363151613665534.0, 430237017317327.8, 386060300653508.2, 1139153568649478.2, 307475792296687.0, 403474269212082.0, 1156228838695875.2, ...]
2025-01-10T13:49:05.6226997Z At positional index 56, first diff: 657025184715239.1 != 657003154645147.8
2025-01-10T13:49:05.6227372Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_energies] - AssertionError: Series are different
2025-01-10T13:49:05.6227378Z 
2025-01-10T13:49:05.6227476Z Series values are different (1.3025 %)
2025-01-10T13:49:05.6227843Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:49:05.6234447Z [left]:  [2.5801871599548787e-05, 2.5615305276449435e-05, 2.5858344017372144e-05, -2.4286539750273696e-05, 2.4924524325725243e-05, -2.456230824810029e-05, 2.4103043153710077e-05, -2.438655094434287e-05, -2.4539054537501715e-05, 2.5417984817525785e-05, 2.512000535197746e-05, -2.4642582656280976e-05, -2.423335106855554e-05, -2.4507743780475822e-05, 2.4958490988042172e-05, -2.4193730330394604e-05, 2.5671484002468758e-05, 2.571778434062277e-05, 2.464945535255098e-05, -2.422773639583352e-05, 2.5447471360622184e-05, -2.409627635116542e-05, 2.5614844040255083e-05, -2.4320523596905817e-05, 2.5377784576172196e-05, -2.3457066675560312e-05, 2.4369140190445265e-05, 2.5580782093694832e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4679185862134628e-05, 2.5692099696671885e-05, 2.2709368608835504e-05, -2.422769024282858e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.221435871493417e-05, 2.588758262836899e-05, -2.4715605747432618e-05, 2.5511122157387355e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127536098161385e-05, -2.468141895326209e-05, -2.47043179761032e-05, -2.3740908691907106e-05, 2.4832442492096064e-05, -2.413156183708872e-05, -2.4208444730823924e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.413785571902468e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.4718848796409172e-05, 2.5235644879553273e-05, 2.5660116818809676e-05, 2.5705887025490933e-05, -2.3537055466673638e-05, 2.5942471740302383e-05, 2.4779255435154302e-05, -2.4437171482408422e-05, -2.488587475102296e-05, -2.461817145541738e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721589006402834e-05, -2.3916183924792534e-05, -2.4073277575252532e-05, 2.5426114770306902e-05, 2.504304506604637e-05, -2.365600824332809e-05, 2.564649452803889e-05, -2.3899135529642785e-05, 2.5338970275810367e-05, 2.484858251486878e-05, 2.5806793260333468e-05, 2.538037983050111e-05, -2.4207571237562553e-05, 2.4527910111281257e-05, 2.4916625382690475e-05, -2.4248093976538034e-05, -2.4259084902202997e-05, 2.5042343244083765e-05, -2.4184000110453416e-05, 2.534949108326902e-05, -2.438918660146681e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:49:05.6240816Z [right]: [2.580187060760512e-05, 2.5615305276449435e-05, 2.585830862681326e-05, -2.4286539523836896e-05, 2.4924327273178824e-05, -2.4562308329704016e-05, 2.4102796735064873e-05, -2.4386264249292878e-05, -2.4539054606359595e-05, 2.5417984817525785e-05, 2.5119851241109903e-05, -2.464236975797002e-05, -2.423310551200988e-05, -2.4507495750261827e-05, 2.4958491461131913e-05, -2.4193730203503752e-05, 2.5671279598406848e-05, 2.571778434758039e-05, 2.464924146734715e-05, -2.4227735746845522e-05, 2.5447471360622184e-05, -2.409627535779648e-05, 2.5614846934356755e-05, -2.4320296346496788e-05, 2.5377783180930537e-05, -2.345680162082186e-05, 2.436898893045542e-05, 2.5580712211859562e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4678990692654424e-05, 2.5692099452386407e-05, 2.270905632364821e-05, -2.4227512425411162e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.2214142249592017e-05, 2.588758262836899e-05, -2.4715606408157026e-05, 2.5511122485544443e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127338442376704e-05, -2.4681216640073288e-05, -2.4704319074974646e-05, -2.3740909354181544e-05, 2.4831415400580145e-05, -2.4131554413805748e-05, -2.420844496771843e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.4137581143845235e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.471887326730884e-05, 2.5235644520855386e-05, 2.5660032958970583e-05, 2.5705887025490933e-05, -2.3536700387812003e-05, 2.5942471740302383e-05, 2.4779076546395e-05, -2.4437167612038533e-05, -2.4885874975052928e-05, -2.461782418608366e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721880722086934e-05, -2.391585609212342e-05, -2.407321716937353e-05, 2.5426114770306902e-05, 2.5043044930642476e-05, -2.3655959156054043e-05, 2.564649452803889e-05, -2.389913546657555e-05, 2.533792518100767e-05, 2.4848582397006154e-05, 2.5806793260333468e-05, 2.5380277617431415e-05, -2.4207282609290893e-05, 2.4528010028979532e-05, 2.491662531246e-05, -2.4248093837055892e-05, -2.4259085434617066e-05, 2.5042343244083765e-05, -2.4184000860153038e-05, 2.534949108326902e-05, -2.4389186927485497e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:49:05.6241264Z At positional index 414, first diff: 2.5347525852067693e-05 != 2.5657552576608082e-05
2025-01-10T13:49:05.6241623Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets - AssertionError: 
2025-01-10T13:49:05.6241722Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6241728Z 
2025-01-10T13:49:05.6241815Z Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:49:05.6241952Z Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:49:05.6242055Z Max relative difference among violations: 1.
2025-01-10T13:49:05.6242223Z  ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6242300Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6242468Z  DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6242552Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6242940Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets_reabsorbed - AssertionError: 
2025-01-10T13:49:05.6243039Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6243043Z 
2025-01-10T13:49:05.6243129Z Mismatched elements: 252 / 10000 (2.52%)
2025-01-10T13:49:05.6243260Z Max absolute difference among violations: 4.15247374e+37
2025-01-10T13:49:05.6243381Z Max relative difference among violations: 1.03027212
2025-01-10T13:49:05.6243543Z  ACTUAL: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6243716Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6243880Z  DESIRED: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6243952Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6244254Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve - AssertionError: 
2025-01-10T13:49:05.6244358Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6244364Z 
2025-01-10T13:49:05.6244450Z Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:49:05.6244578Z Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:49:05.6244679Z Max relative difference among violations: 1.
2025-01-10T13:49:05.6244837Z  ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6244908Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6245068Z  DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6245140Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6245430Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_j_blue_estimators - AssertionError: 
2025-01-10T13:49:05.6245522Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6245532Z 
2025-01-10T13:49:05.6245628Z Mismatched elements: 491895 / 584480 (84.2%)
2025-01-10T13:49:05.6245760Z Max absolute difference among violations: 5.32418652e-19
2025-01-10T13:49:05.6246009Z Max relative difference among violations: 8.78746214
2025-01-10T13:49:05.6246111Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6246186Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6246269Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6246367Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6246445Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6246516Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6246780Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_spectrum - AssertionError: 
2025-01-10T13:49:05.6246876Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6246880Z 
2025-01-10T13:49:05.6246972Z Mismatched elements: 4832 / 10000 (48.3%)
2025-01-10T13:49:05.6247099Z Max absolute difference among violations: 1.38672909e+39
2025-01-10T13:49:05.6247323Z Max relative difference among violations: 5.17890748
2025-01-10T13:49:05.6247488Z  ACTUAL: array([1.414459e+39, 1.753650e+39, 1.413044e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6247562Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6247723Z  DESIRED: array([1.471192e+39, 1.695642e+39, 1.353685e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6247794Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6248081Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_virtual_spectrum - AssertionError: 
2025-01-10T13:49:05.6248174Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6248178Z 
2025-01-10T13:49:05.6248271Z Mismatched elements: 5933 / 10000 (59.3%)
2025-01-10T13:49:05.6248392Z Max absolute difference among violations: 5.26760031e+38
2025-01-10T13:49:05.6248519Z Max relative difference among violations: 23978.84555943
2025-01-10T13:49:05.6248676Z  ACTUAL: array([1.454843e+39, 1.363063e+39, 1.389398e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6248751Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6248910Z  DESIRED: array([1.440332e+39, 1.356114e+39, 1.397557e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6248985Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6249437Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-downbranch] - AssertionError: 
2025-01-10T13:49:05.6249529Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6249533Z 
2025-01-10T13:49:05.6249633Z Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:49:05.6249758Z Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:49:05.6249883Z Max relative difference among violations: 8.35741234
2025-01-10T13:49:05.6249974Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6250051Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6250132Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6250226Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6250307Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6250380Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6250810Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-downbranch] - AssertionError: 
2025-01-10T13:49:05.6250901Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6250906Z 
2025-01-10T13:49:05.6250997Z Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:49:05.6251121Z Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:49:05.6251242Z Max relative difference among violations: 5.83764686
2025-01-10T13:49:05.6251395Z  ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6251473Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6251635Z  DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6251708Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6252164Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-downbranch] - AssertionError: 
2025-01-10T13:49:05.6252341Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6252346Z 
2025-01-10T13:49:05.6252438Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:49:05.6252563Z Max absolute difference among violations: 5.00661745e+37
2025-01-10T13:49:05.6252691Z Max relative difference among violations: 6.79985816
2025-01-10T13:49:05.6252846Z  ACTUAL: array([1.541783e+39, 1.545645e+39, 1.540310e+39, ..., 2.274707e+31,
2025-01-10T13:49:05.6252924Z        2.292907e+31, 2.257206e+31])
2025-01-10T13:49:05.6253078Z  DESIRED: array([1.551142e+39, 1.555226e+39, 1.548880e+39, ..., 2.256713e+31,
2025-01-10T13:49:05.6253155Z        2.279436e+31, 2.243943e+31])
2025-01-10T13:49:05.6253700Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-macroatom] - AssertionError: 
2025-01-10T13:49:05.6253914Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6253919Z 
2025-01-10T13:49:05.6254020Z Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:49:05.6254143Z Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:49:05.6254263Z Max relative difference among violations: 4.08461732
2025-01-10T13:49:05.6254354Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6254432Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6254505Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6254603Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6254676Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6254757Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6255176Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-macroatom] - AssertionError: 
2025-01-10T13:49:05.6255268Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6255276Z 
2025-01-10T13:49:05.6255370Z Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:49:05.6255494Z Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:49:05.6255619Z Max relative difference among violations: 3.08310014
2025-01-10T13:49:05.6255773Z  ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6255849Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6256003Z  DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6256082Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6256521Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-macroatom] - AssertionError: 
2025-01-10T13:49:05.6256617Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6256622Z 
2025-01-10T13:49:05.6256712Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:49:05.6256835Z Max absolute difference among violations: 2.90101642e+37
2025-01-10T13:49:05.6256958Z Max relative difference among violations: 96.4428449
2025-01-10T13:49:05.6257114Z  ACTUAL: array([1.546350e+39, 1.557400e+39, 1.546571e+39, ..., 1.400403e+31,
2025-01-10T13:49:05.6257191Z        1.375141e+31, 1.337928e+31])
2025-01-10T13:49:05.6257349Z  DESIRED: array([1.545562e+39, 1.556608e+39, 1.545912e+39, ..., 1.352607e+31,
2025-01-10T13:49:05.6257425Z        1.330497e+31, 1.294462e+31])
2025-01-10T13:49:05.6257860Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-macroatom] - AssertionError: 
2025-01-10T13:49:05.6257961Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6257966Z 
2025-01-10T13:49:05.6258065Z Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:49:05.6258189Z Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:49:05.6258307Z Max relative difference among violations: 4.08461732
2025-01-10T13:49:05.6258399Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6258481Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6258555Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6258770Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6258842Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6258919Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6259330Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-macroatom] - AssertionError: 
2025-01-10T13:49:05.6259427Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6259431Z 
2025-01-10T13:49:05.6259521Z Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:49:05.6259643Z Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:49:05.6259763Z Max relative difference among violations: 3.08310014
2025-01-10T13:49:05.6259920Z  ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6259997Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6260231Z  DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6260312Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6260752Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-macroatom] - AssertionError: 
2025-01-10T13:49:05.6260850Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6260854Z 
2025-01-10T13:49:05.6260940Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:49:05.6261070Z Max absolute difference among violations: 2.99183385e+37
2025-01-10T13:49:05.6261197Z Max relative difference among violations: 98.22574798
2025-01-10T13:49:05.6261351Z  ACTUAL: array([1.545064e+39, 1.553365e+39, 1.543643e+39, ..., 1.222961e+31,
2025-01-10T13:49:05.6261428Z        1.193005e+31, 1.164854e+31])
2025-01-10T13:49:05.6261583Z  DESIRED: array([1.544211e+39, 1.552533e+39, 1.542958e+39, ..., 1.273258e+31,
2025-01-10T13:49:05.6261661Z        1.260980e+31, 1.222587e+31])
2025-01-10T13:49:05.6262098Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-downbranch] - AssertionError: 
2025-01-10T13:49:05.6262200Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6262204Z 
2025-01-10T13:49:05.6262294Z Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:49:05.6262424Z Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:49:05.6262544Z Max relative difference among violations: 8.35741234
2025-01-10T13:49:05.6262635Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6262712Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6262786Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6262883Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6262955Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:49:05.6263032Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:49:05.6263450Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-downbranch] - AssertionError: 
2025-01-10T13:49:05.6263555Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6263560Z 
2025-01-10T13:49:05.6263778Z Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:49:05.6263912Z Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:49:05.6264029Z Max relative difference among violations: 5.83764686
2025-01-10T13:49:05.6264190Z  ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6264269Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6264425Z  DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:49:05.6264503Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6264945Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-downbranch] - AssertionError: 
2025-01-10T13:49:05.6265041Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6265050Z 
2025-01-10T13:49:05.6265135Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:49:05.6265400Z Max absolute difference among violations: 5.0153284e+37
2025-01-10T13:49:05.6265517Z Max relative difference among violations: 5.96359613
2025-01-10T13:49:05.6265674Z  ACTUAL: array([1.540599e+39, 1.541195e+39, 1.537076e+39, ..., 2.120497e+31,
2025-01-10T13:49:05.6265753Z        2.124305e+31, 2.101081e+31])
2025-01-10T13:49:05.6265908Z  DESIRED: array([1.549174e+39, 1.550439e+39, 1.545071e+39, ..., 2.082528e+31,
2025-01-10T13:49:05.6265984Z        2.088676e+31, 2.060278e+31])
2025-01-10T13:49:05.6266324Z FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop - AssertionError: 
2025-01-10T13:49:05.6266426Z Not equal to tolerance rtol=1e-13, atol=0
2025-01-10T13:49:05.6266430Z 
2025-01-10T13:49:05.6266511Z Mismatched elements: 20 / 20 (100%)
2025-01-10T13:49:05.6266639Z Max absolute difference among violations: 2.25821059e+25
2025-01-10T13:49:05.6266869Z Max relative difference among violations: 0.00054397
2025-01-10T13:49:05.6267028Z  ACTUAL: array([9.409976e+28, 8.066324e+28, 7.202565e+28, 6.545908e+28,
2025-01-10T13:49:05.6267143Z        6.032330e+28, 5.614178e+28, 5.250313e+28, 4.984748e+28,
2025-01-10T13:49:05.6267268Z        4.725851e+28, 4.508107e+28, 4.318094e+28, 4.149110e+28,...
2025-01-10T13:49:05.6267423Z  DESIRED: array([9.408704e+28, 8.067118e+28, 7.202414e+28, 6.547518e+28,
2025-01-10T13:49:05.6267532Z        6.033670e+28, 5.613552e+28, 5.249857e+28, 4.984256e+28,
2025-01-10T13:49:05.6267651Z        4.726016e+28, 4.509481e+28, 4.319969e+28, 4.151368e+28,...
2025-01-10T13:49:05.6268029Z FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop_vpacket_log - AssertionError: 
2025-01-10T13:49:05.6268137Z Not equal to tolerance rtol=1e-12, atol=1e-15
2025-01-10T13:49:05.6268142Z 
2025-01-10T13:49:05.6268224Z Mismatched elements: 20 / 20 (100%)
2025-01-10T13:49:05.6268353Z Max absolute difference among violations: 1.93283629e+25
2025-01-10T13:49:05.6268472Z Max relative difference among violations: 0.00029157
2025-01-10T13:49:05.6268628Z  ACTUAL: array([9.395409e+28, 8.063377e+28, 7.188356e+28, 6.549146e+28,
2025-01-10T13:49:05.6268735Z        6.034629e+28, 5.628414e+28, 5.283421e+28, 4.953453e+28,
2025-01-10T13:49:05.6268854Z        4.716735e+28, 4.492320e+28, 4.302194e+28, 4.140106e+28,...
2025-01-10T13:49:05.6269005Z  DESIRED: array([9.397342e+28, 8.064372e+28, 7.189479e+28, 6.549756e+28,
2025-01-10T13:49:05.6269110Z        6.033450e+28, 5.626927e+28, 5.281881e+28, 4.952089e+28,
2025-01-10T13:49:05.6269226Z        4.716388e+28, 4.491655e+28, 4.302267e+28, 4.139741e+28,...
2025-01-10T13:49:05.6269556Z FAILED tardis/transport/montecarlo/tests/test_rpacket_tracker.py::test_boundary_interactions - AssertionError: 
2025-01-10T13:49:05.6269638Z Arrays are not equal
2025-01-10T13:49:05.6269643Z 
2025-01-10T13:49:05.6269727Z (shapes (4000, 62), (4000, 64) mismatch)
2025-01-10T13:49:05.6269877Z  ACTUAL: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:49:05.6269958Z         (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:49:05.6270060Z        [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:49:05.6270200Z  DESIRED: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:49:05.6270282Z         (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:49:05.6270381Z        [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:49:05.6270798Z FAILED tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py::test_montecarlo_main_loop_weighted - AssertionError: 
2025-01-10T13:49:05.6270897Z Not equal to tolerance rtol=0.01, atol=0
2025-01-10T13:49:05.6270902Z 
2025-01-10T13:49:05.6270986Z Mismatched elements: 33 / 100000 (0.033%)
2025-01-10T13:49:05.6271119Z Max absolute difference among violations: 2.00640487e-05
2025-01-10T13:49:05.6271235Z Max relative difference among violations: 2.11614526
2025-01-10T13:49:05.6271416Z  ACTUAL: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:49:05.6271586Z        -9.757136e-06,  1.019764e-05])
2025-01-10T13:49:05.6271761Z  DESIRED: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:49:05.6271841Z        -9.757136e-06,  1.019764e-05])
2025-01-10T13:49:05.6272301Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data0-plot_data] - AssertionError: 
2025-01-10T13:49:05.6272402Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6272406Z 
2025-01-10T13:49:05.6272485Z (shapes (515,), (508,) mismatch)
2025-01-10T13:49:05.6272632Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:49:05.6272741Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:49:05.6272860Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:49:05.6273004Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:49:05.6273190Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:49:05.6273304Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:49:05.6273869Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data1-plot_data] - AssertionError: 
2025-01-10T13:49:05.6273969Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6273973Z 
2025-01-10T13:49:05.6274050Z (shapes (560,), (558,) mismatch)
2025-01-10T13:49:05.6274196Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:49:05.6274300Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:49:05.6274443Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:49:05.6274586Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:49:05.6274694Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:49:05.6274809Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:49:05.6275270Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data2-plot_data] - AssertionError: 
2025-01-10T13:49:05.6275370Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6275374Z 
2025-01-10T13:49:05.6275449Z (shapes (136,), (147,) mismatch)
2025-01-10T13:49:05.6275596Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:49:05.6275701Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:49:05.6275818Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:49:05.6275961Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:49:05.6276069Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:49:05.6276179Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:49:05.6276635Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data3-plot_data] - AssertionError: 
2025-01-10T13:49:05.6276736Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6276740Z 
2025-01-10T13:49:05.6276814Z (shapes (153,), (159,) mismatch)
2025-01-10T13:49:05.6276960Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:49:05.6277065Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:49:05.6277181Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:49:05.6277327Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:49:05.6277435Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:49:05.6277545Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:49:05.6278004Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data4-plot_data] - AssertionError: 
2025-01-10T13:49:05.6278222Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6278226Z 
2025-01-10T13:49:05.6278302Z (shapes (515,), (508,) mismatch)
2025-01-10T13:49:05.6278447Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:49:05.6278552Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:49:05.6278667Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:49:05.6278809Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:49:05.6278918Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:49:05.6279029Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:49:05.6279482Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data5-plot_data] - AssertionError: 
2025-01-10T13:49:05.6279683Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6279691Z 
2025-01-10T13:49:05.6279769Z (shapes (1481,), (1466,) mismatch)
2025-01-10T13:49:05.6279931Z  ACTUAL: array([12467.896487, 12467.896487, 12357.74828 , ..., 13068.120893,
2025-01-10T13:49:05.6280005Z        11398.237865, 11111.204868])
2025-01-10T13:49:05.6280166Z  DESIRED: array([13692.759737, 11362.937201, 12466.538617, ..., 12605.43284 ,
2025-01-10T13:49:05.6280237Z        11152.962595, 11172.044815])
2025-01-10T13:49:05.6280688Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data6-plot_data] - AssertionError: 
2025-01-10T13:49:05.6280781Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6280785Z 
2025-01-10T13:49:05.6280866Z (shapes (136,), (147,) mismatch)
2025-01-10T13:49:05.6281005Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:49:05.6281114Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:49:05.6281235Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:49:05.6281382Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:49:05.6281491Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:49:05.6281601Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:49:05.6282049Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data7-plot_data] - AssertionError: 
2025-01-10T13:49:05.6282140Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6282145Z 
2025-01-10T13:49:05.6282230Z (shapes (381,), (379,) mismatch)
2025-01-10T13:49:05.6282368Z  ACTUAL: array([12467.896487, 12357.74828 , 11118.747393, 11202.149205,
2025-01-10T13:49:05.6282477Z        13552.38988 , 11630.957821, 12006.254109, 15295.708346,
2025-01-10T13:49:05.6282593Z        11660.899663, 11789.640304, 15161.117263, 12697.545823,...
2025-01-10T13:49:05.6282739Z  DESIRED: array([12466.538617, 14269.760975, 11910.794005, 11196.260702,
2025-01-10T13:49:05.6282851Z        11633.386223, 12079.529869, 11966.991343, 11263.637708,
2025-01-10T13:49:05.6282963Z        14098.493392, 13656.398245, 12124.454378, 11838.909334,...
2025-01-10T13:49:05.6283387Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl0] - AssertionError: 
2025-01-10T13:49:05.6283478Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6283483Z 
2025-01-10T13:49:05.6283571Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.6283774Z Max absolute difference among violations: 26
2025-01-10T13:49:05.6283901Z Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.6284054Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.6284133Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.6284288Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.6284481Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.6284908Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl1] - AssertionError: 
2025-01-10T13:49:05.6285001Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6285005Z 
2025-01-10T13:49:05.6285092Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.6285194Z Max absolute difference among violations: 26
2025-01-10T13:49:05.6285317Z Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.6285459Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.6285540Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.6285687Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.6285760Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.6286309Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl4] - AssertionError: 
2025-01-10T13:49:05.6286400Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6286404Z 
2025-01-10T13:49:05.6286491Z Mismatched elements: 4 / 20 (20%)
2025-01-10T13:49:05.6286590Z Max absolute difference among violations: 24
2025-01-10T13:49:05.6286700Z Max relative difference among violations: 0.65
2025-01-10T13:49:05.6286845Z  ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:49:05.6286926Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:49:05.6287073Z  DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:49:05.6287152Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:49:05.6287573Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl5] - AssertionError: 
2025-01-10T13:49:05.6287664Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6287668Z 
2025-01-10T13:49:05.6287757Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.6287857Z Max absolute difference among violations: 26
2025-01-10T13:49:05.6287978Z Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.6288117Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.6288195Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.6288339Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.6288418Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.6288831Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl7] - AssertionError: 
2025-01-10T13:49:05.6288923Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6288927Z 
2025-01-10T13:49:05.6289013Z Mismatched elements: 2 / 40 (5%)
2025-01-10T13:49:05.6289118Z Max absolute difference among violations: 4.
2025-01-10T13:49:05.6289239Z Max relative difference among violations: 1.33333333
2025-01-10T13:49:05.6289324Z  ACTUAL: array([[1.10e+04, 9.00e+00],
2025-01-10T13:49:05.6289403Z        [1.19e+04, 9.00e+00],
2025-01-10T13:49:05.6289476Z        [1.19e+04, 5.00e+00],...
2025-01-10T13:49:05.6289563Z  DESIRED: array([[1.10e+04, 1.10e+01],
2025-01-10T13:49:05.6289636Z        [1.19e+04, 1.10e+01],
2025-01-10T13:49:05.6289715Z        [1.19e+04, 5.00e+00],...
2025-01-10T13:49:05.6290128Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply0] - AssertionError: 
2025-01-10T13:49:05.6290220Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6290225Z 
2025-01-10T13:49:05.6290310Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.6290409Z Max absolute difference among violations: 26
2025-01-10T13:49:05.6290534Z Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.6290676Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.6290856Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.6290998Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.6291078Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.6291494Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply1] - AssertionError: 
2025-01-10T13:49:05.6291587Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6291591Z 
2025-01-10T13:49:05.6291675Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.6291776Z Max absolute difference among violations: 26
2025-01-10T13:49:05.6291897Z Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.6292036Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.6292115Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.6292335Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.6292418Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.6292832Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply4] - AssertionError: 
2025-01-10T13:49:05.6292926Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6292930Z 
2025-01-10T13:49:05.6293009Z Mismatched elements: 4 / 20 (20%)
2025-01-10T13:49:05.6293114Z Max absolute difference among violations: 24
2025-01-10T13:49:05.6293224Z Max relative difference among violations: 0.65
2025-01-10T13:49:05.6293368Z  ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:49:05.6293447Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:49:05.6293591Z  DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:49:05.6293774Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:49:05.6294190Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply5] - AssertionError: 
2025-01-10T13:49:05.6294287Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6294292Z 
2025-01-10T13:49:05.6294372Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.6294481Z Max absolute difference among violations: 26
2025-01-10T13:49:05.6294596Z Max relative difference among violations: 0.44067797
2025-01-10T13:49:05.6294741Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:49:05.6294822Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:49:05.6294962Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:49:05.6295040Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:49:05.6295448Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply7] - AssertionError: 
2025-01-10T13:49:05.6295544Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:49:05.6295552Z 
2025-01-10T13:49:05.6295633Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:49:05.6295739Z Max absolute difference among violations: 4
2025-01-10T13:49:05.6295855Z Max relative difference among violations: 1.33333333
2025-01-10T13:49:05.6295994Z  ACTUAL: array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
2025-01-10T13:49:05.6296138Z  DESIRED: array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:49:05.6296213Z         0,  0,  0])
2025-01-10T13:49:05.6296689Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data0] - AssertionError: 
2025-01-10T13:49:05.6296783Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6296787Z 
2025-01-10T13:49:05.6296876Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.6297001Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:49:05.6297124Z Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.6297399Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6297480Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6297636Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6297716Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6298188Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data1] - AssertionError: 
2025-01-10T13:49:05.6298281Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6298286Z 
2025-01-10T13:49:05.6298373Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.6298494Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:49:05.6298616Z Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.6298771Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6299017Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6299176Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6299253Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6299713Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data2] - AssertionError: 
2025-01-10T13:49:05.6299811Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6299815Z 
2025-01-10T13:49:05.6299903Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.6300025Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:49:05.6300145Z Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.6300296Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6300373Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6300527Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6300607Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6301073Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data3] - AssertionError: 
2025-01-10T13:49:05.6301169Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6301173Z 
2025-01-10T13:49:05.6301261Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.6301382Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:49:05.6301506Z Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.6301656Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6301732Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6301886Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6301962Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6302424Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data4] - AssertionError: 
2025-01-10T13:49:05.6302536Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6302540Z 
2025-01-10T13:49:05.6302632Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.6302763Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:49:05.6302896Z Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.6303051Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6303130Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6303287Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6303368Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6303970Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data5] - AssertionError: 
2025-01-10T13:49:05.6304075Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6304195Z 
2025-01-10T13:49:05.6304284Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.6304417Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:49:05.6304549Z Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.6304704Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6304787Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6304943Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6305025Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6305490Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data6] - AssertionError: 
2025-01-10T13:49:05.6305588Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6305592Z 
2025-01-10T13:49:05.6305676Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.6305912Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:49:05.6306040Z Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.6306198Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6306275Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6306427Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6306506Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6306970Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data7] - AssertionError: 
2025-01-10T13:49:05.6307066Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6307070Z 
2025-01-10T13:49:05.6307153Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.6307286Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:49:05.6307408Z Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.6307569Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6307655Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6307810Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:49:05.6307887Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6308346Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data8] - AssertionError: 
2025-01-10T13:49:05.6308443Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6308448Z 
2025-01-10T13:49:05.6308533Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.6308658Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:49:05.6308774Z Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.6308937Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6309012Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6309176Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6309257Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6309719Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data9] - AssertionError: 
2025-01-10T13:49:05.6309815Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6309820Z 
2025-01-10T13:49:05.6309904Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.6310030Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:49:05.6310147Z Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.6310308Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6310380Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6310541Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6310617Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6311221Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data10] - AssertionError: 
2025-01-10T13:49:05.6311320Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6311324Z 
2025-01-10T13:49:05.6311407Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.6311532Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:49:05.6311648Z Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.6311810Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6311884Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6312046Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6312119Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6312588Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data11] - AssertionError: 
2025-01-10T13:49:05.6312785Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6312790Z 
2025-01-10T13:49:05.6312873Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:49:05.6313000Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:49:05.6313115Z Max relative difference among violations: 4.03140103
2025-01-10T13:49:05.6313277Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6313347Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6313507Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6313578Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6314152Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data12] - AssertionError: 
2025-01-10T13:49:05.6314244Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6314260Z 
2025-01-10T13:49:05.6314344Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.6314480Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:49:05.6314603Z Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.6314763Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6314834Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6314993Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6315065Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6315539Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data13] - AssertionError: 
2025-01-10T13:49:05.6315631Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6315635Z 
2025-01-10T13:49:05.6315725Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.6315856Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:49:05.6315978Z Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.6316145Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6316217Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6316380Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6316452Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6316927Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data14] - AssertionError: 
2025-01-10T13:49:05.6317019Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6317023Z 
2025-01-10T13:49:05.6317117Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.6317241Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:49:05.6317369Z Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.6317531Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6317728Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6317890Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6317961Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6318434Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data15] - AssertionError: 
2025-01-10T13:49:05.6318525Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6318529Z 
2025-01-10T13:49:05.6318620Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:49:05.6318746Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:49:05.6318880Z Max relative difference among violations: 53038.42648305
2025-01-10T13:49:05.6319042Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6319113Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6319386Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:49:05.6319464Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6319900Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply0] - AssertionError: 
2025-01-10T13:49:05.6319992Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6319997Z 
2025-01-10T13:49:05.6320084Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.6320209Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:49:05.6320328Z Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.6320486Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6320562Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6320722Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6320793Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6321228Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply1] - AssertionError: 
2025-01-10T13:49:05.6321322Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6321326Z 
2025-01-10T13:49:05.6321417Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.6321541Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:49:05.6321663Z Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.6321815Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6321892Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6322048Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6322125Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6322556Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply2] - AssertionError: 
2025-01-10T13:49:05.6322655Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6322662Z 
2025-01-10T13:49:05.6322750Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.6322872Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:49:05.6322990Z Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.6323143Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6323219Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6323374Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6323453Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6323971Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply3] - AssertionError: 
2025-01-10T13:49:05.6324070Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6324074Z 
2025-01-10T13:49:05.6324167Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.6324294Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:49:05.6324533Z Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.6324688Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6324766Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6324922Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6325001Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6325419Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply4] - AssertionError: 
2025-01-10T13:49:05.6325518Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6325522Z 
2025-01-10T13:49:05.6325614Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.6325737Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:49:05.6325866Z Max relative difference among violations: 21416.68434824
2025-01-10T13:49:05.6326122Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6326204Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6326358Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6326441Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6326860Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply5] - AssertionError: 
2025-01-10T13:49:05.6326959Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6326963Z 
2025-01-10T13:49:05.6327054Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.6327177Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:49:05.6327307Z Max relative difference among violations: 21416.68434824
2025-01-10T13:49:05.6327460Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6327536Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6327694Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6327776Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6328195Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply6] - AssertionError: 
2025-01-10T13:49:05.6328296Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6328300Z 
2025-01-10T13:49:05.6328384Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.6328517Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:49:05.6328645Z Max relative difference among violations: 21416.68434824
2025-01-10T13:49:05.6328799Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6328880Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6329037Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6329121Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6329541Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply7] - AssertionError: 
2025-01-10T13:49:05.6329644Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6329648Z 
2025-01-10T13:49:05.6329733Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.6329865Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:49:05.6329989Z Max relative difference among violations: 21416.68434824
2025-01-10T13:49:05.6330149Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6330228Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6330384Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:49:05.6330464Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6330886Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply8] - AssertionError: 
2025-01-10T13:49:05.6330988Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6331074Z 
2025-01-10T13:49:05.6331163Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.6331294Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:49:05.6331411Z Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.6331572Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6331650Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6331806Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6331883Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6332300Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply9] - AssertionError: 
2025-01-10T13:49:05.6332398Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6332402Z 
2025-01-10T13:49:05.6332565Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.6332695Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:49:05.6332814Z Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.6332973Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6333046Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6333207Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6333284Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6333830Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply10] - AssertionError: 
2025-01-10T13:49:05.6333931Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6333935Z 
2025-01-10T13:49:05.6334019Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.6334146Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:49:05.6334261Z Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.6334426Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6334500Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6334660Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6334733Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6335168Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply11] - AssertionError: 
2025-01-10T13:49:05.6335267Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6335272Z 
2025-01-10T13:49:05.6335353Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:49:05.6335480Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:49:05.6335594Z Max relative difference among violations: 3.03053629
2025-01-10T13:49:05.6335755Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6335831Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6335992Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6336068Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6336493Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply12] - AssertionError: 
2025-01-10T13:49:05.6336592Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6336596Z 
2025-01-10T13:49:05.6336679Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.6336805Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:49:05.6336929Z Max relative difference among violations: 21416.6843355
2025-01-10T13:49:05.6337089Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6337161Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6337321Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6337397Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6337828Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply13] - AssertionError: 
2025-01-10T13:49:05.6338061Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6338072Z 
2025-01-10T13:49:05.6338157Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.6338286Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:49:05.6338406Z Max relative difference among violations: 21416.6843355
2025-01-10T13:49:05.6338565Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6338638Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6338802Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6338874Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6339303Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply14] - AssertionError: 
2025-01-10T13:49:05.6339499Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6339511Z 
2025-01-10T13:49:05.6339601Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.6339730Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:49:05.6339848Z Max relative difference among violations: 21416.6843355
2025-01-10T13:49:05.6340011Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6340083Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6340243Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6340319Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6340744Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply15] - AssertionError: 
2025-01-10T13:49:05.6340836Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:49:05.6340844Z 
2025-01-10T13:49:05.6340933Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:49:05.6341060Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:49:05.6341184Z Max relative difference among violations: 21416.6843355
2025-01-10T13:49:05.6341343Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6341415Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6341579Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:49:05.6341651Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:49:05.6341929Z = 275 failed, 1163 passed, 329 skipped, 2 deselected, 19 xfailed, 8 xpassed, 251 warnings in 757.08s (0:12:37) =
2025-01-10T13:49:07.8934298Z ##[error]Process completed with exit code 1.
