2025-01-10T13:13:58.1757350Z ##[group]Run pytest tardis --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"
2025-01-10T13:13:58.1758350Z [36;1mpytest tardis --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"[0m
2025-01-10T13:13:58.1812640Z shell: /bin/bash -l {0}
2025-01-10T13:13:58.1812830Z env:
2025-01-10T13:13:58.1812980Z   CACHE_NUMBER: 0
2025-01-10T13:13:58.1813460Z   PYTEST_FLAGS: --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-10T13:13:58.1813950Z   CODECOV_TOKEN: 
2025-01-10T13:13:58.1814130Z   MAMBA_ROOT_PREFIX: /Users/runner/micromamba
2025-01-10T13:13:58.1814380Z   MAMBA_EXE: /Users/runner/micromamba-bin/micromamba
2025-01-10T13:13:58.1814790Z   CONDARC: /Users/runner/work/_temp/setup-micromamba/.condarc
2025-01-10T13:13:58.1815120Z ##[endgroup]
2025-01-10T13:14:11.1186280Z ============================= test session starts ==============================
2025-01-10T13:14:11.1187660Z platform darwin -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
2025-01-10T13:14:11.1187990Z rootdir: /Users/runner/work/tardis/tardis
2025-01-10T13:14:11.1188360Z configfile: pyproject.toml
2025-01-10T13:14:11.1188700Z plugins: cov-5.0.0, html-4.1.1, metadata-3.1.1, doctestplus-1.2.1, anyio-4.4.0
2025-01-10T13:14:11.1189170Z collected 1796 items / 2 deselected / 1794 selected
2025-01-10T13:14:11.1189360Z 
2025-01-10T13:14:14.4718110Z tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
2025-01-10T13:14:16.6445390Z tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
2025-01-10T13:14:18.3355380Z tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
2025-01-10T13:14:19.3976330Z tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
2025-01-10T13:14:19.4077230Z tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
2025-01-10T13:14:20.3500980Z tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
2025-01-10T13:14:20.6162510Z tardis/grid/tests/test_grid.py .                                         [  2%]
2025-01-10T13:14:20.6172990Z tardis/gui/tests/test_gui.py s                                           [  2%]
2025-01-10T13:14:24.2517040Z tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
2025-01-10T13:14:24.2650330Z tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
2025-01-10T13:14:24.2860490Z tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
2025-01-10T13:14:55.2101850Z tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
2025-01-10T13:14:55.2348510Z tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
2025-01-10T13:14:55.2453910Z tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
2025-01-10T13:14:55.2671840Z tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
2025-01-10T13:14:55.2842760Z tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
2025-01-10T13:14:55.5464460Z tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
2025-01-10T13:14:56.1552930Z tardis/io/tests/test_atomic.py .....                                     [  7%]
2025-01-10T13:14:56.1688430Z tardis/io/tests/test_decay.py ..                                         [  7%]
2025-01-10T13:14:56.2914190Z tardis/io/tests/test_model_reader.py ......                              [  7%]
2025-01-10T13:14:56.2955040Z tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
2025-01-10T13:15:30.5938510Z tardis/model/tests/test_base.py ........................................ [ 10%]
2025-01-10T13:15:31.3929450Z ............                                                             [ 10%]
2025-01-10T13:15:33.6853440Z tardis/model/tests/test_csvy_model.py .........                          [ 11%]
2025-01-10T13:15:33.7226450Z tardis/model/tests/test_density.py ..                                    [ 11%]
2025-01-10T13:15:35.2922380Z tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
2025-01-10T13:15:36.4189480Z tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
2025-01-10T13:15:38.2430230Z tardis/opacities/tests/test_tau_sobolev.py FF                            [ 12%]
2025-01-10T13:15:40.9571450Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py ...      [ 12%]
2025-01-10T13:16:22.2043000Z tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
2025-01-10T13:16:30.8912950Z tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
2025-01-10T13:16:32.3554780Z tardis/plasma/tests/test_complete_plasmas.py ...........FFF..FFF..s..... [ 13%]
2025-01-10T13:16:34.9357230Z sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FF [ 18%]
2025-01-10T13:16:36.6524340Z F..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss.... [ 22%]
2025-01-10T13:16:39.2492760Z ........s...FFF..FFF.ss.....sFF.F....ss............s...FFF..FFF.ss.....s [ 26%]
2025-01-10T13:16:41.6971730Z FF.F....ss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF [ 30%]
2025-01-10T13:16:42.6534570Z ..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFssFssssss..... [ 34%]
2025-01-10T13:16:45.4898860Z .......s...FFF..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sF [ 38%]
2025-01-10T13:16:48.7981930Z F.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF. [ 42%]
2025-01-10T13:16:51.8867430Z .FFF.ss.....sFF.Fssssss............s...FFF..FFF.s.....FFFF.Fssssss...... [ 46%]
2025-01-10T13:16:53.9704550Z ......s...FFF..FFF.s.....FFFF.Fssssss............s...FFF..FFF.s.....FFFF [ 50%]
2025-01-10T13:16:56.9388180Z .Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF.. [ 54%]
2025-01-10T13:17:00.0098380Z FFF.ss.....sFF.Fssssss................FFF..FFF..s.....sFF.Fssss......... [ 58%]
2025-01-10T13:17:00.6154900Z .........FFF..FFF..s.....sFF.Fssss.......                                [ 60%]
2025-01-10T13:17:01.0595760Z tardis/plasma/tests/test_hdf_plasma.py ....F..F....F.F..........FFF..... [ 62%]
2025-01-10T13:17:01.0675430Z ......                                                                   [ 62%]
2025-01-10T13:17:01.4897790Z tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
2025-01-10T13:18:58.6285890Z tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
2025-01-10T13:18:58.6421120Z tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
2025-01-10T13:19:35.3215810Z tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
2025-01-10T13:19:51.5719970Z tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
2025-01-10T13:19:52.1829500Z tardis/simulation/tests/test_convergence.py .....                        [ 64%]
2025-01-10T13:20:00.6506270Z tardis/simulation/tests/test_simulation.py FFF.FFFFFF...                 [ 65%]
2025-01-10T13:20:01.9006130Z tardis/spectrum/tests/test_cuda_formal_integral.py sssssssssssssssssssss [ 66%]
2025-01-10T13:20:02.2661440Z ssss...ssssssssssssssssssssss                                            [ 67%]
2025-01-10T13:20:02.2729630Z tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
2025-01-10T13:20:03.3414010Z tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
2025-01-10T13:20:03.3587290Z ..........                                                               [ 69%]
2025-01-10T13:20:03.5299860Z tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
2025-01-10T13:20:03.5538630Z .........                                                                [ 72%]
2025-01-10T13:20:25.5430800Z tardis/spectrum/tests/test_spectrum_solver.py .FFF                       [ 72%]
2025-01-10T13:21:40.9575310Z tardis/tests/test_tardis_full.py .FFF                                    [ 72%]
2025-01-10T13:23:26.7522170Z tardis/tests/test_tardis_full_formal_integral.py .FFF.FFF.FFF.FFF        [ 73%]
2025-01-10T13:23:26.8548160Z tardis/tests/test_util.py .............................................  [ 75%]
2025-01-10T13:23:29.8760240Z tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
2025-01-10T13:23:35.9282400Z tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
2025-01-10T13:23:36.1532650Z tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
2025-01-10T13:23:36.1656820Z tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
2025-01-10T13:23:36.1954250Z sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
2025-01-10T13:23:47.5893890Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py xFF       [ 81%]
2025-01-10T13:23:47.6644930Z tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
2025-01-10T13:23:54.1025570Z tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
2025-01-10T13:23:54.5024760Z tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
2025-01-10T13:23:55.3057530Z tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
2025-01-10T13:23:55.4102790Z XX.........                                                              [ 84%]
2025-01-10T13:23:55.4534650Z tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
2025-01-10T13:23:55.7050340Z tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
2025-01-10T13:23:56.0741270Z .....                                                                    [ 85%]
2025-01-10T13:24:08.8918860Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py ....F.         [ 85%]
2025-01-10T13:24:08.9205860Z tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
2025-01-10T13:24:08.9237500Z tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
2025-01-10T13:24:11.0983820Z tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
2025-01-10T13:24:11.1438020Z tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
2025-01-10T13:24:15.6969460Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py F [ 86%]
2025-01-10T13:24:15.6972970Z                                                                          [ 86%]
2025-01-10T13:24:16.3816640Z tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
2025-01-10T13:24:18.7750540Z tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
2025-01-10T13:24:21.1545880Z ......                                                                   [ 88%]
2025-01-10T13:24:26.1792360Z tardis/visualization/tools/tests/test_liv_plot.py ...F..F..F..F..F..F..F [ 90%]
2025-01-10T13:24:32.8210430Z ..F..FF..FF.F........FF..FF.F                                            [ 91%]
2025-01-10T13:24:36.3821100Z tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
2025-01-10T13:24:44.7257050Z ....                                                                     [ 92%]
2025-01-10T13:24:51.1690260Z tardis/visualization/tools/tests/test_sdec_plot.py ...FFFFFFFFFFFFFFFFFF [ 94%]
2025-01-10T13:24:59.7836530Z FFFFFFFFFFFFFF................                                           [ 95%]
2025-01-10T13:25:00.2871330Z tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
2025-01-10T13:25:00.3355870Z ....                                                                     [ 96%]
2025-01-10T13:25:02.2148510Z tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
2025-01-10T13:25:02.7897850Z ..................                                                       [ 98%]
2025-01-10T13:28:30.6723430Z tardis/visualization/widgets/tests/test_shell_info.py .................. [ 99%]
2025-01-10T13:28:40.0003330Z ......                                                                   [100%]
2025-01-10T13:28:40.0003970Z 
2025-01-10T13:28:40.0004080Z =================================== FAILURES ===================================
2025-01-10T13:28:40.0004500Z _____________________ test_calculate_sobolev_line_opacity ______________________
2025-01-10T13:28:40.0004690Z 
2025-01-10T13:28:40.0004830Z left = array([13, 13, 13, ..., 19, 19, 19], dtype=int8)
2025-01-10T13:28:40.0005190Z right = array([13, 13, 13, ..., 19, 19, 19], dtype=int8), err_msg = None
2025-01-10T13:28:40.0005370Z 
2025-01-10T13:28:40.0020580Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0021000Z         if err_msg is None:
2025-01-10T13:28:40.0021230Z             if left.shape != right.shape:
2025-01-10T13:28:40.0021530Z                 raise_assert_detail(
2025-01-10T13:28:40.0022030Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0022310Z                 )
2025-01-10T13:28:40.0024480Z     
2025-01-10T13:28:40.0024670Z             diff = 0
2025-01-10T13:28:40.0123850Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0124240Z                 # count up differences
2025-01-10T13:28:40.0124510Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0124860Z                     diff += 1
2025-01-10T13:28:40.0125080Z     
2025-01-10T13:28:40.0125350Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0125720Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0126090Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0126420Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0126730Z E           
2025-01-10T13:28:40.0126970Z E           numpy array values are different (0.09581 %)
2025-01-10T13:28:40.0127530Z E           [left]:  [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]
2025-01-10T13:28:40.0128320Z E           [right]: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 13, 11, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]
2025-01-10T13:28:40.0170150Z 
2025-01-10T13:28:40.0170540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0170900Z 
2025-01-10T13:28:40.0175430Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0179550Z 
2025-01-10T13:28:40.0183080Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x3123789e0>
2025-01-10T13:28:40.0184390Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x16e5a7e30>
2025-01-10T13:28:40.0185410Z 
2025-01-10T13:28:40.0185620Z     def test_calculate_sobolev_line_opacity(
2025-01-10T13:28:40.0193050Z         nb_simulation_verysimple, regression_data
2025-01-10T13:28:40.0193400Z     ):
2025-01-10T13:28:40.0193690Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-10T13:28:40.0193940Z     
2025-01-10T13:28:40.0194160Z         actual = calculate_sobolev_line_opacity(
2025-01-10T13:28:40.0194430Z             legacy_plasma.lines,
2025-01-10T13:28:40.0194660Z             legacy_plasma.level_number_density,
2025-01-10T13:28:40.0275510Z             legacy_plasma.time_explosion,
2025-01-10T13:28:40.0275750Z             legacy_plasma.stimulated_emission_factor,
2025-01-10T13:28:40.0276010Z         )
2025-01-10T13:28:40.0276240Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.0276500Z >       pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0276650Z 
2025-01-10T13:28:40.0276750Z tardis/opacities/tests/test_tau_sobolev.py:22: 
2025-01-10T13:28:40.0276990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0277410Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0277640Z     ???
2025-01-10T13:28:40.0277800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0277980Z 
2025-01-10T13:28:40.0278030Z >   ???
2025-01-10T13:28:40.0278220Z E   AssertionError: MultiIndex level [0] are different
2025-01-10T13:28:40.0278510Z E   
2025-01-10T13:28:40.0278740Z E   MultiIndex level [0] values are different (0.09581 %)
2025-01-10T13:28:40.0279090Z E   [left]:  Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:28:40.0279350Z E          ...
2025-01-10T13:28:40.0279550Z E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:28:40.0279890Z E         dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:28:40.0280180Z E   [right]: Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:28:40.0280480Z E          ...
2025-01-10T13:28:40.0280680Z E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:28:40.0280950Z E         dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:28:40.0281180Z E   At positional index 54, first diff: 12 != 14
2025-01-10T13:28:40.0281380Z 
2025-01-10T13:28:40.0281440Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0281750Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.0440960Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:28:40.0441720Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:28:40.0442210Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:28:40.0442460Z 
2025-01-10T13:28:40.0445290Z Iterations:████████████████████████████████████████████████████████████████                4/5 [00:10<00:02,  2.30s/it]
2025-01-10T13:28:40.0445600Z 
2025-01-10T13:28:40.0445800Z Packets:                                                                                   4030/? [00:10<00:00, 32177.42it/s][A
2025-01-10T13:28:40.0446220Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.0446880Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:28:40.0447880Z _________________________ test_calculate_beta_sobolevs _________________________
2025-01-10T13:28:40.0448070Z 
2025-01-10T13:28:40.0448370Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x3123789e0>
2025-01-10T13:28:40.0448880Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x16e37b290>
2025-01-10T13:28:40.0449220Z 
2025-01-10T13:28:40.0449370Z     def test_calculate_beta_sobolevs(nb_simulation_verysimple, regression_data):
2025-01-10T13:28:40.0449750Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-10T13:28:40.0450010Z     
2025-01-10T13:28:40.0450220Z         tau_sobolevs = calculate_sobolev_line_opacity(
2025-01-10T13:28:40.0450480Z             legacy_plasma.lines,
2025-01-10T13:28:40.0450670Z             legacy_plasma.level_number_density,
2025-01-10T13:28:40.0450880Z             legacy_plasma.time_explosion,
2025-01-10T13:28:40.0451090Z             legacy_plasma.stimulated_emission_factor,
2025-01-10T13:28:40.0455990Z         )
2025-01-10T13:28:40.0457150Z         actual = calculate_beta_sobolev(tau_sobolevs)
2025-01-10T13:28:40.0457430Z         expected = regression_data.sync_ndarray(actual)
2025-01-10T13:28:40.0457680Z >       npt.assert_allclose(actual, expected)
2025-01-10T13:28:40.0457830Z 
2025-01-10T13:28:40.0457920Z tardis/opacities/tests/test_tau_sobolev.py:36: 
2025-01-10T13:28:40.0458190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0458400Z 
2025-01-10T13:28:40.0458650Z args = (<function assert_allclose.<locals>.compare at 0x3166dd940>, array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.0459120Z        [1., 1., 1.,.....,
2025-01-10T13:28:40.0459320Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.0464180Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.0464390Z        [1., 1., 1., ..., 1., 1., 1.]]))
2025-01-10T13:28:40.0465500Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.0465850Z 
2025-01-10T13:28:40.0465930Z     @wraps(func)
2025-01-10T13:28:40.0466140Z     def inner(*args, **kwds):
2025-01-10T13:28:40.0466490Z         with self._recreate_cm():
2025-01-10T13:28:40.0466750Z >           return func(*args, **kwds)
2025-01-10T13:28:40.0467020Z E           AssertionError: 
2025-01-10T13:28:40.0467250Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.0469660Z E           
2025-01-10T13:28:40.0470370Z E           Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:28:40.0472720Z E           Max absolute difference among violations: 0.99984222
2025-01-10T13:28:40.0474230Z E           Max relative difference among violations: 6337.12154973
2025-01-10T13:28:40.0474980Z E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.0475280Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.0475800Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:28:40.0477180Z E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.0479570Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.0481520Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:28:40.0483240Z 
2025-01-10T13:28:40.0484420Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.0484920Z _________ TestPlasma.test_plasma_properties[ionization:nebular-lines] __________
2025-01-10T13:28:40.0485340Z 
2025-01-10T13:28:40.0485590Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0486050Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0487400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0491080Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0494690Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0494970Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0495150Z err_msg = None
2025-01-10T13:28:40.0495240Z 
2025-01-10T13:28:40.0495330Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0495530Z         if err_msg is None:
2025-01-10T13:28:40.0500070Z             if left.shape != right.shape:
2025-01-10T13:28:40.0500430Z                 raise_assert_detail(
2025-01-10T13:28:40.0500730Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0501080Z                 )
2025-01-10T13:28:40.0502090Z     
2025-01-10T13:28:40.0508890Z             diff = 0
2025-01-10T13:28:40.0509240Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0509510Z                 # count up differences
2025-01-10T13:28:40.0509880Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0510950Z                     diff += 1
2025-01-10T13:28:40.0511740Z     
2025-01-10T13:28:40.0515960Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0516350Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0516720Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0517130Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0520440Z E           
2025-01-10T13:28:40.0521940Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0524830Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0527580Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0534190Z 
2025-01-10T13:28:40.0534470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0534820Z 
2025-01-10T13:28:40.0535010Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0535200Z 
2025-01-10T13:28:40.0535410Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408a7b0>
2025-01-10T13:28:40.0543130Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>, attr = 'lines'
2025-01-10T13:28:40.0543440Z 
2025-01-10T13:28:40.0554590Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0555440Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0556860Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0557040Z         try:
2025-01-10T13:28:40.0558240Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0558530Z         except KeyError:
2025-01-10T13:28:40.0558790Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0559000Z     
2025-01-10T13:28:40.0559120Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0559300Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0559490Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0559730Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0561410Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0561590Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0561800Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0562000Z             else:
2025-01-10T13:28:40.0562200Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0562800Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0562950Z 
2025-01-10T13:28:40.0563050Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0563290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0563560Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0563780Z     ???
2025-01-10T13:28:40.0563930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0564080Z 
2025-01-10T13:28:40.0564130Z >   ???
2025-01-10T13:28:40.0564290Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0571980Z E   
2025-01-10T13:28:40.0572170Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0573580Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0588120Z E          ...
2025-01-10T13:28:40.0588400Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0592660Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0598200Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0599720Z E          ...
2025-01-10T13:28:40.0599920Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0601390Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0602810Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0607060Z 
2025-01-10T13:28:40.0607160Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0607540Z _ TestPlasma.test_plasma_properties[ionization:nebular-lines_lower_level_index] _
2025-01-10T13:28:40.0607780Z 
2025-01-10T13:28:40.0608030Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408a870>
2025-01-10T13:28:40.0609130Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>
2025-01-10T13:28:40.0613040Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.0613980Z 
2025-01-10T13:28:40.0620140Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0623050Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0626230Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0631650Z         try:
2025-01-10T13:28:40.0631870Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0632140Z         except KeyError:
2025-01-10T13:28:40.0632400Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0632710Z     
2025-01-10T13:28:40.0632850Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0633680Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0634700Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0638530Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0641190Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0641410Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0641830Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0642030Z 
2025-01-10T13:28:40.0642140Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0642650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0642840Z 
2025-01-10T13:28:40.0643900Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.0644220Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.0644820Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0645070Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.0645720Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.0646300Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.0646850Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0647140Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.0647910Z err_msg = None
2025-01-10T13:28:40.0647990Z 
2025-01-10T13:28:40.0648080Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0648280Z         if err_msg is None:
2025-01-10T13:28:40.0648480Z             if left.shape != right.shape:
2025-01-10T13:28:40.0648680Z                 raise_assert_detail(
2025-01-10T13:28:40.0648920Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0649150Z                 )
2025-01-10T13:28:40.0649270Z     
2025-01-10T13:28:40.0649380Z             diff = 0
2025-01-10T13:28:40.0649550Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0649770Z                 # count up differences
2025-01-10T13:28:40.0650070Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0650330Z                     diff += 1
2025-01-10T13:28:40.0650480Z     
2025-01-10T13:28:40.0650610Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0651190Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0651510Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0651790Z E           AssertionError: Series are different
2025-01-10T13:28:40.0651980Z E           
2025-01-10T13:28:40.0652130Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.0652610Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.0653270Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0653880Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0654380Z 
2025-01-10T13:28:40.0654630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0655120Z _ TestPlasma.test_plasma_properties[ionization:nebular-lines_upper_level_index] _
2025-01-10T13:28:40.0655360Z 
2025-01-10T13:28:40.0655530Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408a930>
2025-01-10T13:28:40.0655910Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>
2025-01-10T13:28:40.0656190Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.0656310Z 
2025-01-10T13:28:40.0656480Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0656790Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0657060Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0657390Z         try:
2025-01-10T13:28:40.0657660Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0658090Z         except KeyError:
2025-01-10T13:28:40.0658360Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0658630Z     
2025-01-10T13:28:40.0658850Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0659090Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0659370Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0659800Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0660110Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0660390Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0660660Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0660850Z 
2025-01-10T13:28:40.0661000Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0661300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0661510Z 
2025-01-10T13:28:40.0661610Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.0672580Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.0672870Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.0673180Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.0673430Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.0673760Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.0674540Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.0674750Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.0674920Z err_msg = None
2025-01-10T13:28:40.0675000Z 
2025-01-10T13:28:40.0675080Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0675280Z         if err_msg is None:
2025-01-10T13:28:40.0675450Z             if left.shape != right.shape:
2025-01-10T13:28:40.0675630Z                 raise_assert_detail(
2025-01-10T13:28:40.0675860Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0676090Z                 )
2025-01-10T13:28:40.0676210Z     
2025-01-10T13:28:40.0676310Z             diff = 0
2025-01-10T13:28:40.0676480Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0676690Z                 # count up differences
2025-01-10T13:28:40.0676950Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0677220Z                     diff += 1
2025-01-10T13:28:40.0677360Z     
2025-01-10T13:28:40.0677480Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0677710Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0678010Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0678280Z E           AssertionError: Series are different
2025-01-10T13:28:40.0678470Z E           
2025-01-10T13:28:40.0678610Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.0679050Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.0679740Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.0680390Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.0681300Z 
2025-01-10T13:28:40.0681540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0681990Z ___________ TestPlasma.test_plasma_properties[ionization:nebular-nu] ___________
2025-01-10T13:28:40.0682200Z 
2025-01-10T13:28:40.0682310Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0682580Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0682810Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0683050Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0683320Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0683560Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0683740Z err_msg = None
2025-01-10T13:28:40.0683820Z 
2025-01-10T13:28:40.0683910Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0684260Z         if err_msg is None:
2025-01-10T13:28:40.0684430Z             if left.shape != right.shape:
2025-01-10T13:28:40.0684620Z                 raise_assert_detail(
2025-01-10T13:28:40.0684850Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0685070Z                 )
2025-01-10T13:28:40.0685200Z     
2025-01-10T13:28:40.0685310Z             diff = 0
2025-01-10T13:28:40.0685470Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0685680Z                 # count up differences
2025-01-10T13:28:40.0685930Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0686180Z                     diff += 1
2025-01-10T13:28:40.0686320Z     
2025-01-10T13:28:40.0686440Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0686670Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0686990Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0687280Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0687470Z E           
2025-01-10T13:28:40.0687620Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0687980Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0688450Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0688730Z 
2025-01-10T13:28:40.0688980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0689280Z 
2025-01-10T13:28:40.0689410Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0689630Z 
2025-01-10T13:28:40.0689810Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408ab70>
2025-01-10T13:28:40.0690210Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>, attr = 'nu'
2025-01-10T13:28:40.0690430Z 
2025-01-10T13:28:40.0690540Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0690800Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0691010Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0691160Z         try:
2025-01-10T13:28:40.0691340Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0691560Z         except KeyError:
2025-01-10T13:28:40.0691850Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0692080Z     
2025-01-10T13:28:40.0692200Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0692380Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0692570Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0692790Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0693020Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0693200Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0693410Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0693560Z 
2025-01-10T13:28:40.0693650Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0693890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0694150Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0694370Z     ???
2025-01-10T13:28:40.0694520Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0694820Z 
2025-01-10T13:28:40.0694870Z >   ???
2025-01-10T13:28:40.0695030Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0695240Z E   
2025-01-10T13:28:40.0695460Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0695740Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0695940Z E          ...
2025-01-10T13:28:40.0696080Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0696310Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0696560Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0696770Z E          ...
2025-01-10T13:28:40.0696900Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0697130Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0697370Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0697520Z 
2025-01-10T13:28:40.0697590Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0697860Z _____ TestPlasma.test_plasma_properties[ionization:nebular-wavelength_cm] ______
2025-01-10T13:28:40.0698090Z 
2025-01-10T13:28:40.0698190Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0698450Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0698690Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0698930Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0699200Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0699440Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0699620Z err_msg = None
2025-01-10T13:28:40.0699700Z 
2025-01-10T13:28:40.0699780Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0699980Z         if err_msg is None:
2025-01-10T13:28:40.0700150Z             if left.shape != right.shape:
2025-01-10T13:28:40.0700340Z                 raise_assert_detail(
2025-01-10T13:28:40.0700560Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0700780Z                 )
2025-01-10T13:28:40.0700900Z     
2025-01-10T13:28:40.0701010Z             diff = 0
2025-01-10T13:28:40.0701180Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0701380Z                 # count up differences
2025-01-10T13:28:40.0701630Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0701880Z                     diff += 1
2025-01-10T13:28:40.0702030Z     
2025-01-10T13:28:40.0702150Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0702380Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0702850Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0703140Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0703340Z E           
2025-01-10T13:28:40.0703750Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0704130Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0704630Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0704910Z 
2025-01-10T13:28:40.0705440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0705740Z 
2025-01-10T13:28:40.0705870Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0706070Z 
2025-01-10T13:28:40.0706230Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408ac30>
2025-01-10T13:28:40.0706580Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>
2025-01-10T13:28:40.0706820Z attr = 'wavelength_cm'
2025-01-10T13:28:40.0706920Z 
2025-01-10T13:28:40.0707020Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0707270Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0707480Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0707630Z         try:
2025-01-10T13:28:40.0707810Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0708040Z         except KeyError:
2025-01-10T13:28:40.0708250Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0708460Z     
2025-01-10T13:28:40.0708570Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0708750Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0708950Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0709170Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0709400Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0709580Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0709790Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0709930Z 
2025-01-10T13:28:40.0710020Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0710260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0710520Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0710740Z     ???
2025-01-10T13:28:40.0710890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0711050Z 
2025-01-10T13:28:40.0711100Z >   ???
2025-01-10T13:28:40.0711290Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0711510Z E   
2025-01-10T13:28:40.0711670Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0711910Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0712100Z E          ...
2025-01-10T13:28:40.0712240Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0712570Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0712820Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0713020Z E          ...
2025-01-10T13:28:40.0713150Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0713380Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0713730Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0713890Z 
2025-01-10T13:28:40.0713950Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0714210Z __________ TestPlasma.test_plasma_properties[ionization:nebular-f_lu] __________
2025-01-10T13:28:40.0714420Z 
2025-01-10T13:28:40.0714520Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0714790Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0715030Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0715260Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0715530Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0715770Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0715950Z err_msg = None
2025-01-10T13:28:40.0716030Z 
2025-01-10T13:28:40.0716110Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0716740Z         if err_msg is None:
2025-01-10T13:28:40.0716910Z             if left.shape != right.shape:
2025-01-10T13:28:40.0717090Z                 raise_assert_detail(
2025-01-10T13:28:40.0717320Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0717540Z                 )
2025-01-10T13:28:40.0717660Z     
2025-01-10T13:28:40.0717770Z             diff = 0
2025-01-10T13:28:40.0717930Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0718140Z                 # count up differences
2025-01-10T13:28:40.0718390Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0718640Z                     diff += 1
2025-01-10T13:28:40.0718780Z     
2025-01-10T13:28:40.0718910Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0719140Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0719450Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0719730Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0719930Z E           
2025-01-10T13:28:40.0720090Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0720440Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0720930Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0721210Z 
2025-01-10T13:28:40.0721440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0721740Z 
2025-01-10T13:28:40.0721860Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0722060Z 
2025-01-10T13:28:40.0722220Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408acf0>
2025-01-10T13:28:40.0722610Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>, attr = 'f_lu'
2025-01-10T13:28:40.0722830Z 
2025-01-10T13:28:40.0722930Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0723180Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0723390Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0723550Z         try:
2025-01-10T13:28:40.0723730Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0723960Z         except KeyError:
2025-01-10T13:28:40.0724410Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0724630Z     
2025-01-10T13:28:40.0724750Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0724940Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0725120Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0725350Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0725580Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0725750Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0725960Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0726110Z 
2025-01-10T13:28:40.0726200Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0726440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0726700Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0726910Z     ???
2025-01-10T13:28:40.0727070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0727350Z 
2025-01-10T13:28:40.0727410Z >   ???
2025-01-10T13:28:40.0727600Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0727820Z E   
2025-01-10T13:28:40.0727970Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0728220Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0728410Z E          ...
2025-01-10T13:28:40.0728560Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0728800Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0729060Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0729260Z E          ...
2025-01-10T13:28:40.0729400Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0729630Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0729880Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0730040Z 
2025-01-10T13:28:40.0730100Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0730370Z ______ TestPlasma.test_plasma_properties[ionization:nebular-tau_sobolevs] ______
2025-01-10T13:28:40.0730590Z 
2025-01-10T13:28:40.0730690Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0730950Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0731190Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0731430Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0731690Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0731930Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0732110Z err_msg = None
2025-01-10T13:28:40.0732190Z 
2025-01-10T13:28:40.0732270Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0732630Z         if err_msg is None:
2025-01-10T13:28:40.0732860Z             if left.shape != right.shape:
2025-01-10T13:28:40.0733110Z                 raise_assert_detail(
2025-01-10T13:28:40.0733440Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0733720Z                 )
2025-01-10T13:28:40.0733940Z     
2025-01-10T13:28:40.0734100Z             diff = 0
2025-01-10T13:28:40.0734320Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0734640Z                 # count up differences
2025-01-10T13:28:40.0734940Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0735300Z                     diff += 1
2025-01-10T13:28:40.0735490Z     
2025-01-10T13:28:40.0735660Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0736000Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0736520Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0736930Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0738300Z E           
2025-01-10T13:28:40.0738510Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0739130Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0739660Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0748040Z 
2025-01-10T13:28:40.0748350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0749250Z 
2025-01-10T13:28:40.0757080Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0757330Z 
2025-01-10T13:28:40.0757510Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408b4d0>
2025-01-10T13:28:40.0757870Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>
2025-01-10T13:28:40.0758110Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.0758210Z 
2025-01-10T13:28:40.0758310Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0758570Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0758780Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0758940Z         try:
2025-01-10T13:28:40.0759120Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0759370Z         except KeyError:
2025-01-10T13:28:40.0759590Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0759810Z     
2025-01-10T13:28:40.0759930Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0760110Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0760300Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0760530Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0760760Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0760930Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0761150Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0761340Z             else:
2025-01-10T13:28:40.0761490Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0761700Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0761840Z 
2025-01-10T13:28:40.0761930Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0762180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0762460Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0762680Z     ???
2025-01-10T13:28:40.0762830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0762980Z 
2025-01-10T13:28:40.0763020Z >   ???
2025-01-10T13:28:40.0763180Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0763380Z E   
2025-01-10T13:28:40.0763540Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0763790Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0763980Z E          ...
2025-01-10T13:28:40.0764120Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0764350Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0764600Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0765130Z E          ...
2025-01-10T13:28:40.0765270Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0765500Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0765740Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0765880Z 
2025-01-10T13:28:40.0765940Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0766210Z ______ TestPlasma.test_plasma_properties[ionization:nebular-beta_sobolev] ______
2025-01-10T13:28:40.0766430Z 
2025-01-10T13:28:40.0766530Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0766800Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0767030Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0767280Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0767550Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0768080Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0768260Z err_msg = None
2025-01-10T13:28:40.0768340Z 
2025-01-10T13:28:40.0768420Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0768620Z         if err_msg is None:
2025-01-10T13:28:40.0768790Z             if left.shape != right.shape:
2025-01-10T13:28:40.0768980Z                 raise_assert_detail(
2025-01-10T13:28:40.0769210Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0769430Z                 )
2025-01-10T13:28:40.0769550Z     
2025-01-10T13:28:40.0769660Z             diff = 0
2025-01-10T13:28:40.0769830Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0770030Z                 # count up differences
2025-01-10T13:28:40.0770280Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0770530Z                     diff += 1
2025-01-10T13:28:40.0770690Z     
2025-01-10T13:28:40.0770810Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0771040Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0771350Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0771630Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0771820Z E           
2025-01-10T13:28:40.0771980Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0772320Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0772820Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0773100Z 
2025-01-10T13:28:40.0773340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0773630Z 
2025-01-10T13:28:40.0773760Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0773950Z 
2025-01-10T13:28:40.0774120Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408b590>
2025-01-10T13:28:40.0774470Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>
2025-01-10T13:28:40.0774710Z attr = 'beta_sobolev'
2025-01-10T13:28:40.0774800Z 
2025-01-10T13:28:40.0774910Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0775150Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0775420Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0775580Z         try:
2025-01-10T13:28:40.0775760Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0775990Z         except KeyError:
2025-01-10T13:28:40.0776190Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0776400Z     
2025-01-10T13:28:40.0776520Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0776700Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0776890Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0777110Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0777340Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0777520Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0777720Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0777910Z             else:
2025-01-10T13:28:40.0778060Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0778270Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0778770Z 
2025-01-10T13:28:40.0778870Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0779110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0779370Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0779590Z     ???
2025-01-10T13:28:40.0779740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0779890Z 
2025-01-10T13:28:40.0779940Z >   ???
2025-01-10T13:28:40.0780090Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0780290Z E   
2025-01-10T13:28:40.0780450Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0780790Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0781020Z E          ...
2025-01-10T13:28:40.0781160Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0781390Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0781670Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0781880Z E          ...
2025-01-10T13:28:40.0782020Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0782250Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0782480Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0782620Z 
2025-01-10T13:28:40.0782680Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0782950Z ________ TestPlasma.test_plasma_properties[ionization:nebular-j_blues] _________
2025-01-10T13:28:40.0783190Z 
2025-01-10T13:28:40.0783300Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0783560Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0783800Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0784040Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0784320Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0784560Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0784740Z err_msg = None
2025-01-10T13:28:40.0784810Z 
2025-01-10T13:28:40.0784890Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0785090Z         if err_msg is None:
2025-01-10T13:28:40.0785260Z             if left.shape != right.shape:
2025-01-10T13:28:40.0785460Z                 raise_assert_detail(
2025-01-10T13:28:40.0785690Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0785910Z                 )
2025-01-10T13:28:40.0786030Z     
2025-01-10T13:28:40.0786140Z             diff = 0
2025-01-10T13:28:40.0786310Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0786860Z                 # count up differences
2025-01-10T13:28:40.0787220Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0787480Z                     diff += 1
2025-01-10T13:28:40.0787620Z     
2025-01-10T13:28:40.0787740Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0787980Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0788290Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0788570Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0788770Z E           
2025-01-10T13:28:40.0788930Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0789270Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0789900Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0790170Z 
2025-01-10T13:28:40.0790410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0790700Z 
2025-01-10T13:28:40.0790830Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0791020Z 
2025-01-10T13:28:40.0791190Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14408b710>
2025-01-10T13:28:40.0791580Z plasma = <tardis.plasma.base.BasePlasma object at 0x3050ed010>, attr = 'j_blues'
2025-01-10T13:28:40.0791800Z 
2025-01-10T13:28:40.0791910Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0792160Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0792360Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0792520Z         try:
2025-01-10T13:28:40.0792690Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0792920Z         except KeyError:
2025-01-10T13:28:40.0793120Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0793330Z     
2025-01-10T13:28:40.0793450Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0793630Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0793820Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0794040Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0794260Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0794450Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0794670Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0794880Z             else:
2025-01-10T13:28:40.0795030Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0795250Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0795390Z 
2025-01-10T13:28:40.0795480Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0795720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0795990Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0796200Z     ???
2025-01-10T13:28:40.0796350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0796510Z 
2025-01-10T13:28:40.0796550Z >   ???
2025-01-10T13:28:40.0796700Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0796900Z E   
2025-01-10T13:28:40.0797060Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0797380Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0797580Z E          ...
2025-01-10T13:28:40.0797730Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0797950Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0798200Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0798390Z E          ...
2025-01-10T13:28:40.0798530Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0798760Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0798990Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0799130Z 
2025-01-10T13:28:40.0799190Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0799450Z ___________ TestPlasma.test_plasma_properties[ionization:lte-lines] ____________
2025-01-10T13:28:40.0799660Z 
2025-01-10T13:28:40.0799760Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0800030Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0800340Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0800580Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0800850Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0801080Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0801270Z err_msg = None
2025-01-10T13:28:40.0801350Z 
2025-01-10T13:28:40.0801430Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0801630Z         if err_msg is None:
2025-01-10T13:28:40.0801800Z             if left.shape != right.shape:
2025-01-10T13:28:40.0801980Z                 raise_assert_detail(
2025-01-10T13:28:40.0802220Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0802440Z                 )
2025-01-10T13:28:40.0802560Z     
2025-01-10T13:28:40.0802670Z             diff = 0
2025-01-10T13:28:40.0802840Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0803040Z                 # count up differences
2025-01-10T13:28:40.0803290Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0803540Z                     diff += 1
2025-01-10T13:28:40.0803680Z     
2025-01-10T13:28:40.0803810Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0804040Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0804340Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0804620Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0804810Z E           
2025-01-10T13:28:40.0804970Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0805310Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0805790Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0806060Z 
2025-01-10T13:28:40.0806290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0806580Z 
2025-01-10T13:28:40.0806720Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0806910Z 
2025-01-10T13:28:40.0807130Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b84d0>
2025-01-10T13:28:40.0807520Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>, attr = 'lines'
2025-01-10T13:28:40.0807750Z 
2025-01-10T13:28:40.0807850Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0808110Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0808320Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0808470Z         try:
2025-01-10T13:28:40.0808650Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0808870Z         except KeyError:
2025-01-10T13:28:40.0809070Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0809280Z     
2025-01-10T13:28:40.0809400Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0809580Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0809770Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0809990Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0810280Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0810460Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0810670Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0810860Z             else:
2025-01-10T13:28:40.0811000Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0811210Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0811360Z 
2025-01-10T13:28:40.0811440Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0811690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0811950Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0812170Z     ???
2025-01-10T13:28:40.0812320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0812470Z 
2025-01-10T13:28:40.0812510Z >   ???
2025-01-10T13:28:40.0812670Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0812880Z E   
2025-01-10T13:28:40.0813030Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0813280Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0813470Z E          ...
2025-01-10T13:28:40.0813610Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0813830Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0814080Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0814270Z E          ...
2025-01-10T13:28:40.0814410Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0814640Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0814870Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0815010Z 
2025-01-10T13:28:40.0815080Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0815350Z __ TestPlasma.test_plasma_properties[ionization:lte-lines_lower_level_index] ___
2025-01-10T13:28:40.0815590Z 
2025-01-10T13:28:40.0815750Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b8590>
2025-01-10T13:28:40.0816100Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>
2025-01-10T13:28:40.0816340Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.0816460Z 
2025-01-10T13:28:40.0816560Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0816810Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0817010Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0817160Z         try:
2025-01-10T13:28:40.0817340Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0817560Z         except KeyError:
2025-01-10T13:28:40.0817760Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0817970Z     
2025-01-10T13:28:40.0818340Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0818830Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0819110Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0819650Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0820010Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0820280Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0820780Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0821010Z 
2025-01-10T13:28:40.0821110Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0821490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0821710Z 
2025-01-10T13:28:40.0828040Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.0828320Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.0828530Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0828740Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.0829390Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.0829630Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.0829840Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0830050Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.0830220Z err_msg = None
2025-01-10T13:28:40.0830300Z 
2025-01-10T13:28:40.0830370Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0830570Z         if err_msg is None:
2025-01-10T13:28:40.0830730Z             if left.shape != right.shape:
2025-01-10T13:28:40.0830920Z                 raise_assert_detail(
2025-01-10T13:28:40.0831150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0831370Z                 )
2025-01-10T13:28:40.0831500Z     
2025-01-10T13:28:40.0831600Z             diff = 0
2025-01-10T13:28:40.0831770Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0831980Z                 # count up differences
2025-01-10T13:28:40.0832240Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0832490Z                     diff += 1
2025-01-10T13:28:40.0832630Z     
2025-01-10T13:28:40.0832750Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0832990Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0833290Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0833560Z E           AssertionError: Series are different
2025-01-10T13:28:40.0833750Z E           
2025-01-10T13:28:40.0833890Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.0834320Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.0834970Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0835550Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0836260Z 
2025-01-10T13:28:40.0836500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0836970Z __ TestPlasma.test_plasma_properties[ionization:lte-lines_upper_level_index] ___
2025-01-10T13:28:40.0837210Z 
2025-01-10T13:28:40.0837370Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b8650>
2025-01-10T13:28:40.0837730Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>
2025-01-10T13:28:40.0837980Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.0838090Z 
2025-01-10T13:28:40.0838200Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0838450Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0838660Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0838810Z         try:
2025-01-10T13:28:40.0838990Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0839210Z         except KeyError:
2025-01-10T13:28:40.0839420Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0839700Z     
2025-01-10T13:28:40.0839820Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0840000Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0840190Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0840410Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0840640Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0840820Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0841030Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0841180Z 
2025-01-10T13:28:40.0841270Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0841530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0841690Z 
2025-01-10T13:28:40.0841800Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.0842050Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.0842270Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.0842480Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.0842720Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.0842970Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.0843190Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.0843400Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.0843570Z err_msg = None
2025-01-10T13:28:40.0843660Z 
2025-01-10T13:28:40.0843740Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0843940Z         if err_msg is None:
2025-01-10T13:28:40.0844100Z             if left.shape != right.shape:
2025-01-10T13:28:40.0844290Z                 raise_assert_detail(
2025-01-10T13:28:40.0844510Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0844750Z                 )
2025-01-10T13:28:40.0844870Z     
2025-01-10T13:28:40.0844980Z             diff = 0
2025-01-10T13:28:40.0845150Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0845350Z                 # count up differences
2025-01-10T13:28:40.0845610Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0845860Z                     diff += 1
2025-01-10T13:28:40.0846010Z     
2025-01-10T13:28:40.0846140Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0846360Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0846660Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0846930Z E           AssertionError: Series are different
2025-01-10T13:28:40.0847110Z E           
2025-01-10T13:28:40.0847250Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.0847790Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.0848450Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.0849120Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.0849560Z 
2025-01-10T13:28:40.0849800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0850240Z _____________ TestPlasma.test_plasma_properties[ionization:lte-nu] _____________
2025-01-10T13:28:40.0850450Z 
2025-01-10T13:28:40.0850550Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0850820Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0851060Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0851310Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0851580Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0851820Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0852010Z err_msg = None
2025-01-10T13:28:40.0852090Z 
2025-01-10T13:28:40.0852170Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0852370Z         if err_msg is None:
2025-01-10T13:28:40.0852540Z             if left.shape != right.shape:
2025-01-10T13:28:40.0852730Z                 raise_assert_detail(
2025-01-10T13:28:40.0852960Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0853180Z                 )
2025-01-10T13:28:40.0853300Z     
2025-01-10T13:28:40.0853410Z             diff = 0
2025-01-10T13:28:40.0853580Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0853780Z                 # count up differences
2025-01-10T13:28:40.0854040Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0854290Z                     diff += 1
2025-01-10T13:28:40.0854430Z     
2025-01-10T13:28:40.0854550Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0854780Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0855080Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0855360Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0855550Z E           
2025-01-10T13:28:40.0855710Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0856060Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0856600Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0856880Z 
2025-01-10T13:28:40.0857130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0857430Z 
2025-01-10T13:28:40.0857560Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0857760Z 
2025-01-10T13:28:40.0857930Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b8890>
2025-01-10T13:28:40.0858430Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>, attr = 'nu'
2025-01-10T13:28:40.0858670Z 
2025-01-10T13:28:40.0858770Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0859210Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0859420Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0859580Z         try:
2025-01-10T13:28:40.0859750Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0859980Z         except KeyError:
2025-01-10T13:28:40.0860180Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0860410Z     
2025-01-10T13:28:40.0860530Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0860710Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0860900Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0861130Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0861350Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0861530Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0861760Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0861920Z 
2025-01-10T13:28:40.0862030Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0862290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0862560Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0862770Z     ???
2025-01-10T13:28:40.0862920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0863080Z 
2025-01-10T13:28:40.0863120Z >   ???
2025-01-10T13:28:40.0863280Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0863490Z E   
2025-01-10T13:28:40.0863650Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0863910Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0864110Z E          ...
2025-01-10T13:28:40.0864250Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0864480Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0864730Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0864930Z E          ...
2025-01-10T13:28:40.0865080Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0865300Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0865530Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0865680Z 
2025-01-10T13:28:40.0865740Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0866020Z _______ TestPlasma.test_plasma_properties[ionization:lte-wavelength_cm] ________
2025-01-10T13:28:40.0866240Z 
2025-01-10T13:28:40.0866340Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0866600Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0866840Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0867170Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0867550Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0867780Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0867960Z err_msg = None
2025-01-10T13:28:40.0868040Z 
2025-01-10T13:28:40.0868120Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0868320Z         if err_msg is None:
2025-01-10T13:28:40.0868480Z             if left.shape != right.shape:
2025-01-10T13:28:40.0868670Z                 raise_assert_detail(
2025-01-10T13:28:40.0868900Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0869130Z                 )
2025-01-10T13:28:40.0869250Z     
2025-01-10T13:28:40.0869360Z             diff = 0
2025-01-10T13:28:40.0869520Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0869720Z                 # count up differences
2025-01-10T13:28:40.0869980Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0870570Z                     diff += 1
2025-01-10T13:28:40.0870720Z     
2025-01-10T13:28:40.0870840Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0871080Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0871380Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0871660Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0871850Z E           
2025-01-10T13:28:40.0872000Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0872350Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0872850Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0873120Z 
2025-01-10T13:28:40.0873350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0873640Z 
2025-01-10T13:28:40.0873780Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0873970Z 
2025-01-10T13:28:40.0874140Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b8950>
2025-01-10T13:28:40.0874490Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>
2025-01-10T13:28:40.0874720Z attr = 'wavelength_cm'
2025-01-10T13:28:40.0874810Z 
2025-01-10T13:28:40.0874920Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0875180Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0875390Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0875530Z         try:
2025-01-10T13:28:40.0875710Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0875930Z         except KeyError:
2025-01-10T13:28:40.0876130Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0876340Z     
2025-01-10T13:28:40.0876460Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0876640Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0876830Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0877060Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0877280Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0877450Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0877660Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0878000Z 
2025-01-10T13:28:40.0878100Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0878340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0878610Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0878870Z     ???
2025-01-10T13:28:40.0879030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0879190Z 
2025-01-10T13:28:40.0879240Z >   ???
2025-01-10T13:28:40.0879400Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0879610Z E   
2025-01-10T13:28:40.0879770Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0880030Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0880220Z E          ...
2025-01-10T13:28:40.0880360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0880600Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0880920Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0881120Z E          ...
2025-01-10T13:28:40.0881260Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0881490Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0881730Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0881870Z 
2025-01-10T13:28:40.0881940Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0882190Z ____________ TestPlasma.test_plasma_properties[ionization:lte-f_lu] ____________
2025-01-10T13:28:40.0882400Z 
2025-01-10T13:28:40.0882500Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0882770Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0883010Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0883250Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0883530Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0883770Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0883960Z err_msg = None
2025-01-10T13:28:40.0884040Z 
2025-01-10T13:28:40.0884130Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0884330Z         if err_msg is None:
2025-01-10T13:28:40.0884500Z             if left.shape != right.shape:
2025-01-10T13:28:40.0884690Z                 raise_assert_detail(
2025-01-10T13:28:40.0884930Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0885140Z                 )
2025-01-10T13:28:40.0885190Z     
2025-01-10T13:28:40.0885230Z             diff = 0
2025-01-10T13:28:40.0885320Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0885380Z                 # count up differences
2025-01-10T13:28:40.0885510Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0885570Z                     diff += 1
2025-01-10T13:28:40.0885610Z     
2025-01-10T13:28:40.0885670Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0885770Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0885910Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0885990Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0886030Z E           
2025-01-10T13:28:40.0886120Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0886320Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0886590Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0886590Z 
2025-01-10T13:28:40.0886820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0886830Z 
2025-01-10T13:28:40.0886960Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0886960Z 
2025-01-10T13:28:40.0887120Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b8a10>
2025-01-10T13:28:40.0887280Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>, attr = 'f_lu'
2025-01-10T13:28:40.0887280Z 
2025-01-10T13:28:40.0887380Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0887520Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0887570Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0887620Z         try:
2025-01-10T13:28:40.0887730Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0887780Z         except KeyError:
2025-01-10T13:28:40.0887890Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0887930Z     
2025-01-10T13:28:40.0887990Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0888050Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0888110Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0888210Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0888270Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0888330Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0888420Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0888420Z 
2025-01-10T13:28:40.0888510Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0888600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0888710Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0888750Z     ???
2025-01-10T13:28:40.0888840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0888840Z 
2025-01-10T13:28:40.0888880Z >   ???
2025-01-10T13:28:40.0888980Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0889020Z E   
2025-01-10T13:28:40.0889110Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0889200Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0889240Z E          ...
2025-01-10T13:28:40.0889310Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0889400Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0889490Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0889540Z E          ...
2025-01-10T13:28:40.0889600Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0889690Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0889770Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0889770Z 
2025-01-10T13:28:40.0889830Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0889980Z ________ TestPlasma.test_plasma_properties[ionization:lte-tau_sobolevs] ________
2025-01-10T13:28:40.0889980Z 
2025-01-10T13:28:40.0890080Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0890180Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0890260Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0890360Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0890500Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0890580Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0890630Z err_msg = None
2025-01-10T13:28:40.0890630Z 
2025-01-10T13:28:40.0890710Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0890760Z         if err_msg is None:
2025-01-10T13:28:40.0890830Z             if left.shape != right.shape:
2025-01-10T13:28:40.0890880Z                 raise_assert_detail(
2025-01-10T13:28:40.0890990Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0891040Z                 )
2025-01-10T13:28:40.0891080Z     
2025-01-10T13:28:40.0891130Z             diff = 0
2025-01-10T13:28:40.0891210Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0891280Z                 # count up differences
2025-01-10T13:28:40.0908020Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0909100Z                     diff += 1
2025-01-10T13:28:40.0909240Z     
2025-01-10T13:28:40.0909430Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0909720Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0910090Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0910310Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0910450Z E           
2025-01-10T13:28:40.0910680Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0911240Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0911850Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0911860Z 
2025-01-10T13:28:40.0912510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0912530Z 
2025-01-10T13:28:40.0912880Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0912890Z 
2025-01-10T13:28:40.0913330Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b9190>
2025-01-10T13:28:40.0913660Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>
2025-01-10T13:28:40.0913810Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.0913820Z 
2025-01-10T13:28:40.0914110Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0914340Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0914510Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0914650Z         try:
2025-01-10T13:28:40.0914950Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0915150Z         except KeyError:
2025-01-10T13:28:40.0915430Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0915570Z     
2025-01-10T13:28:40.0915740Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0915920Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0916090Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0916360Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0916530Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0916710Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0916920Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0917320Z             else:
2025-01-10T13:28:40.0917510Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0917730Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0917740Z 
2025-01-10T13:28:40.0917980Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0918210Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0918520Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0918650Z     ???
2025-01-10T13:28:40.0918880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0918890Z 
2025-01-10T13:28:40.0919020Z >   ???
2025-01-10T13:28:40.0919280Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0919410Z E   
2025-01-10T13:28:40.0919670Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0919910Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0920610Z E          ...
2025-01-10T13:28:40.0920790Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0921050Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0921270Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0921410Z E          ...
2025-01-10T13:28:40.0921590Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0921860Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0922070Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0922080Z 
2025-01-10T13:28:40.0922260Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0922670Z ________ TestPlasma.test_plasma_properties[ionization:lte-beta_sobolev] ________
2025-01-10T13:28:40.0922680Z 
2025-01-10T13:28:40.0922940Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0923200Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0923400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0923670Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0923920Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0924110Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0924260Z err_msg = None
2025-01-10T13:28:40.0924270Z 
2025-01-10T13:28:40.0924480Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0924640Z         if err_msg is None:
2025-01-10T13:28:40.0924830Z             if left.shape != right.shape:
2025-01-10T13:28:40.0925000Z                 raise_assert_detail(
2025-01-10T13:28:40.0925300Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0925460Z                 )
2025-01-10T13:28:40.0925600Z     
2025-01-10T13:28:40.0925760Z             diff = 0
2025-01-10T13:28:40.0925980Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0926160Z                 # count up differences
2025-01-10T13:28:40.0926520Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0926670Z                     diff += 1
2025-01-10T13:28:40.0926820Z     
2025-01-10T13:28:40.0926980Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0927260Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0927600Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0927820Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0927970Z E           
2025-01-10T13:28:40.0928190Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0928750Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0929780Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0929800Z 
2025-01-10T13:28:40.0930440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0930450Z 
2025-01-10T13:28:40.0930790Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0930800Z 
2025-01-10T13:28:40.0931250Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b9250>
2025-01-10T13:28:40.0931740Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>
2025-01-10T13:28:40.0931900Z attr = 'beta_sobolev'
2025-01-10T13:28:40.0931910Z 
2025-01-10T13:28:40.0932180Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0932420Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0932580Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0932720Z         try:
2025-01-10T13:28:40.0933010Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0933160Z         except KeyError:
2025-01-10T13:28:40.0933450Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0933580Z     
2025-01-10T13:28:40.0933750Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0933940Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0934110Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0934390Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0934570Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0934740Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0934970Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0935100Z             else:
2025-01-10T13:28:40.0935290Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0935510Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0935510Z 
2025-01-10T13:28:40.0935760Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0935990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0936280Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0936420Z     ???
2025-01-10T13:28:40.0936640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0936640Z 
2025-01-10T13:28:40.0936790Z >   ???
2025-01-10T13:28:40.0937030Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0937180Z E   
2025-01-10T13:28:40.0937440Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0937660Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0937800Z E          ...
2025-01-10T13:28:40.0937970Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0938220Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0938460Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0938600Z E          ...
2025-01-10T13:28:40.0938780Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0939040Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0939250Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0939250Z 
2025-01-10T13:28:40.0939420Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0939810Z __________ TestPlasma.test_plasma_properties[ionization:lte-j_blues] ___________
2025-01-10T13:28:40.0939970Z 
2025-01-10T13:28:40.0940240Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0940490Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0940680Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0940960Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0941210Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0941400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0941540Z err_msg = None
2025-01-10T13:28:40.0941550Z 
2025-01-10T13:28:40.0941770Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0941920Z         if err_msg is None:
2025-01-10T13:28:40.0942110Z             if left.shape != right.shape:
2025-01-10T13:28:40.0942270Z                 raise_assert_detail(
2025-01-10T13:28:40.0942700Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0942850Z                 )
2025-01-10T13:28:40.0942980Z     
2025-01-10T13:28:40.0943120Z             diff = 0
2025-01-10T13:28:40.0943340Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0943510Z                 # count up differences
2025-01-10T13:28:40.0943850Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0944000Z                     diff += 1
2025-01-10T13:28:40.0944130Z     
2025-01-10T13:28:40.0944300Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0944570Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0944920Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0945130Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0945290Z E           
2025-01-10T13:28:40.0945510Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0946080Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0946680Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0946690Z 
2025-01-10T13:28:40.0947340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0947360Z 
2025-01-10T13:28:40.0947910Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0947920Z 
2025-01-10T13:28:40.0948440Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440b93d0>
2025-01-10T13:28:40.0948890Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e546c00>, attr = 'j_blues'
2025-01-10T13:28:40.0948900Z 
2025-01-10T13:28:40.0949190Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0949420Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0949580Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0949720Z         try:
2025-01-10T13:28:40.0950000Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0950170Z         except KeyError:
2025-01-10T13:28:40.0950440Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0950580Z     
2025-01-10T13:28:40.0950750Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0951300Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0951480Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0951750Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0951920Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0952090Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0952310Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0952460Z             else:
2025-01-10T13:28:40.0952660Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0952880Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0952890Z 
2025-01-10T13:28:40.0953150Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0953360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0953670Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0953800Z     ???
2025-01-10T13:28:40.0954040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0954210Z 
2025-01-10T13:28:40.0954350Z >   ???
2025-01-10T13:28:40.0954610Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0954740Z E   
2025-01-10T13:28:40.0955000Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0955230Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0955370Z E          ...
2025-01-10T13:28:40.0955550Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0955800Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0956020Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0956170Z E          ...
2025-01-10T13:28:40.0956330Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0956590Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0956790Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0956810Z 
2025-01-10T13:28:40.0956990Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0957380Z ___________ TestPlasma.test_plasma_properties[excitation:lte-lines] ____________
2025-01-10T13:28:40.0957390Z 
2025-01-10T13:28:40.0957650Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0957910Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0958090Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0958370Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0958620Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0958810Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0958960Z err_msg = None
2025-01-10T13:28:40.0958970Z 
2025-01-10T13:28:40.0959190Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0959360Z         if err_msg is None:
2025-01-10T13:28:40.0959550Z             if left.shape != right.shape:
2025-01-10T13:28:40.0959730Z                 raise_assert_detail(
2025-01-10T13:28:40.0960080Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0960230Z                 )
2025-01-10T13:28:40.0960370Z     
2025-01-10T13:28:40.0960510Z             diff = 0
2025-01-10T13:28:40.0960740Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0960910Z                 # count up differences
2025-01-10T13:28:40.0961260Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0961410Z                     diff += 1
2025-01-10T13:28:40.0961540Z     
2025-01-10T13:28:40.0961710Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0961980Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0962510Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0962730Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0962870Z E           
2025-01-10T13:28:40.0963100Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0963660Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0964230Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0964250Z 
2025-01-10T13:28:40.0965870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0965880Z 
2025-01-10T13:28:40.0966230Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0966240Z 
2025-01-10T13:28:40.0966670Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440ba150>
2025-01-10T13:28:40.0967090Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>, attr = 'lines'
2025-01-10T13:28:40.0967100Z 
2025-01-10T13:28:40.0967370Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0967610Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0967770Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0967910Z         try:
2025-01-10T13:28:40.0968200Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0968350Z         except KeyError:
2025-01-10T13:28:40.0968640Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0968780Z     
2025-01-10T13:28:40.0968950Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0969130Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0969300Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0969570Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0969740Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0969920Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0970140Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0970270Z             else:
2025-01-10T13:28:40.0970460Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.0970670Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.0970680Z 
2025-01-10T13:28:40.0970930Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.0971150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0971460Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0971600Z     ???
2025-01-10T13:28:40.0971820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0971820Z 
2025-01-10T13:28:40.0972000Z >   ???
2025-01-10T13:28:40.0972280Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0972420Z E   
2025-01-10T13:28:40.0972680Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0972900Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0973040Z E          ...
2025-01-10T13:28:40.0973210Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0973470Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0973690Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0973830Z E          ...
2025-01-10T13:28:40.0974570Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0974830Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0975040Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0975050Z 
2025-01-10T13:28:40.0975220Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0975660Z __ TestPlasma.test_plasma_properties[excitation:lte-lines_lower_level_index] ___
2025-01-10T13:28:40.0975670Z 
2025-01-10T13:28:40.0976110Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440ba210>
2025-01-10T13:28:40.0976420Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>
2025-01-10T13:28:40.0976600Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.0976610Z 
2025-01-10T13:28:40.0976890Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0977120Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0977280Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0977420Z         try:
2025-01-10T13:28:40.0977710Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0978040Z         except KeyError:
2025-01-10T13:28:40.0978320Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0978450Z     
2025-01-10T13:28:40.0978630Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0978810Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0978980Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0979250Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0979420Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0979600Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0979810Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0979820Z 
2025-01-10T13:28:40.0980070Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0980300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0980310Z 
2025-01-10T13:28:40.0980590Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.0980760Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.0980970Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0981130Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.0983140Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.0983310Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.0983420Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0983480Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.0983550Z err_msg = None
2025-01-10T13:28:40.0983550Z 
2025-01-10T13:28:40.0983640Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0983710Z         if err_msg is None:
2025-01-10T13:28:40.0983790Z             if left.shape != right.shape:
2025-01-10T13:28:40.0983870Z                 raise_assert_detail(
2025-01-10T13:28:40.0984010Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0984070Z                 )
2025-01-10T13:28:40.0984120Z     
2025-01-10T13:28:40.0984170Z             diff = 0
2025-01-10T13:28:40.0984260Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0984330Z                 # count up differences
2025-01-10T13:28:40.0984490Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0984550Z                     diff += 1
2025-01-10T13:28:40.0984600Z     
2025-01-10T13:28:40.0984660Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0984790Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0984940Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0985020Z E           AssertionError: Series are different
2025-01-10T13:28:40.0985400Z E           
2025-01-10T13:28:40.0985480Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.0985780Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.0986040Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0986310Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0986410Z 
2025-01-10T13:28:40.0986670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0986830Z __ TestPlasma.test_plasma_properties[excitation:lte-lines_upper_level_index] ___
2025-01-10T13:28:40.0986830Z 
2025-01-10T13:28:40.0987010Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440ba2d0>
2025-01-10T13:28:40.0987130Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>
2025-01-10T13:28:40.0987190Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.0987200Z 
2025-01-10T13:28:40.0987300Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0987400Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0987460Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0987610Z         try:
2025-01-10T13:28:40.0987730Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0987780Z         except KeyError:
2025-01-10T13:28:40.0987890Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0987940Z     
2025-01-10T13:28:40.0987990Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0988060Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0988120Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0988230Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0988290Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0988350Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0988440Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0988440Z 
2025-01-10T13:28:40.0988540Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0988640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0988640Z 
2025-01-10T13:28:40.0988740Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.0988800Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.0988890Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.0988950Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.0989060Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.0989120Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.0989200Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.0989260Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.0989370Z err_msg = None
2025-01-10T13:28:40.0989370Z 
2025-01-10T13:28:40.0989460Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0989510Z         if err_msg is None:
2025-01-10T13:28:40.0989580Z             if left.shape != right.shape:
2025-01-10T13:28:40.0989640Z                 raise_assert_detail(
2025-01-10T13:28:40.0989750Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0989800Z                 )
2025-01-10T13:28:40.0989850Z     
2025-01-10T13:28:40.0989890Z             diff = 0
2025-01-10T13:28:40.0989980Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0990040Z                 # count up differences
2025-01-10T13:28:40.0990170Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0990220Z                     diff += 1
2025-01-10T13:28:40.0990270Z     
2025-01-10T13:28:40.0990330Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0990430Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0990630Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0990710Z E           AssertionError: Series are different
2025-01-10T13:28:40.0990750Z E           
2025-01-10T13:28:40.0990830Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.0991120Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.0991420Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.0991720Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.0991730Z 
2025-01-10T13:28:40.0991970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0992110Z _____________ TestPlasma.test_plasma_properties[excitation:lte-nu] _____________
2025-01-10T13:28:40.0992120Z 
2025-01-10T13:28:40.0992220Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0992330Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0992400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0992510Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0992600Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0992670Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0992950Z err_msg = None
2025-01-10T13:28:40.0992960Z 
2025-01-10T13:28:40.0993040Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0993090Z         if err_msg is None:
2025-01-10T13:28:40.0993160Z             if left.shape != right.shape:
2025-01-10T13:28:40.0993220Z                 raise_assert_detail(
2025-01-10T13:28:40.0993410Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.0993460Z                 )
2025-01-10T13:28:40.0993510Z     
2025-01-10T13:28:40.0993550Z             diff = 0
2025-01-10T13:28:40.0993640Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.0993700Z                 # count up differences
2025-01-10T13:28:40.0993830Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.0993880Z                     diff += 1
2025-01-10T13:28:40.0993920Z     
2025-01-10T13:28:40.0993990Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.0994090Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.0994220Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.0994300Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.0994350Z E           
2025-01-10T13:28:40.0994440Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.0994920Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0995130Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.0995130Z 
2025-01-10T13:28:40.0995370Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.0995370Z 
2025-01-10T13:28:40.0995500Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.0995510Z 
2025-01-10T13:28:40.0995680Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440ba510>
2025-01-10T13:28:40.0995840Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>, attr = 'nu'
2025-01-10T13:28:40.0995840Z 
2025-01-10T13:28:40.0995940Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.0996030Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.0996090Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.0996130Z         try:
2025-01-10T13:28:40.0996240Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.0996290Z         except KeyError:
2025-01-10T13:28:40.0996400Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.0996440Z     
2025-01-10T13:28:40.0996500Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.0996570Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.0996630Z             if attr == "selected_atoms":
2025-01-10T13:28:40.0996740Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.0996800Z             elif actual.ndim == 1:
2025-01-10T13:28:40.0996910Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.0997010Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.0997010Z 
2025-01-10T13:28:40.0997100Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.0997200Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0997310Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.0997360Z     ???
2025-01-10T13:28:40.0997450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.0997450Z 
2025-01-10T13:28:40.0997490Z >   ???
2025-01-10T13:28:40.0997590Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.0997630Z E   
2025-01-10T13:28:40.0998160Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.0998250Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0998300Z E          ...
2025-01-10T13:28:40.0998360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0998460Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0998550Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.0998600Z E          ...
2025-01-10T13:28:40.0998660Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.0998790Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.0998870Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.0998870Z 
2025-01-10T13:28:40.0998940Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.0999090Z _______ TestPlasma.test_plasma_properties[excitation:lte-wavelength_cm] ________
2025-01-10T13:28:40.0999090Z 
2025-01-10T13:28:40.0999200Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0999380Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0999450Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0999550Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.0999660Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.0999730Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.0999780Z err_msg = None
2025-01-10T13:28:40.0999780Z 
2025-01-10T13:28:40.0999860Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.0999910Z         if err_msg is None:
2025-01-10T13:28:40.0999980Z             if left.shape != right.shape:
2025-01-10T13:28:40.1000040Z                 raise_assert_detail(
2025-01-10T13:28:40.1000150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1000200Z                 )
2025-01-10T13:28:40.1000240Z     
2025-01-10T13:28:40.1000290Z             diff = 0
2025-01-10T13:28:40.1000380Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1000440Z                 # count up differences
2025-01-10T13:28:40.1000570Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1000620Z                     diff += 1
2025-01-10T13:28:40.1000660Z     
2025-01-10T13:28:40.1000720Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1000830Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1000960Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1001040Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1001090Z E           
2025-01-10T13:28:40.1001170Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1001370Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1001580Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1001580Z 
2025-01-10T13:28:40.1001810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1001820Z 
2025-01-10T13:28:40.1001940Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1002000Z 
2025-01-10T13:28:40.1002170Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440ba5d0>
2025-01-10T13:28:40.1002290Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>
2025-01-10T13:28:40.1002340Z attr = 'wavelength_cm'
2025-01-10T13:28:40.1002340Z 
2025-01-10T13:28:40.1002450Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1002530Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1002590Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1002640Z         try:
2025-01-10T13:28:40.1002740Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1002800Z         except KeyError:
2025-01-10T13:28:40.1004060Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1004130Z     
2025-01-10T13:28:40.1004190Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1004260Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1004330Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1004580Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1004640Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1004700Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1004780Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1004790Z 
2025-01-10T13:28:40.1004880Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1004970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1005080Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1005130Z     ???
2025-01-10T13:28:40.1005220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1005220Z 
2025-01-10T13:28:40.1005270Z >   ???
2025-01-10T13:28:40.1005370Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1005420Z E   
2025-01-10T13:28:40.1005520Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1005610Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1005660Z E          ...
2025-01-10T13:28:40.1005730Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1005830Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1005920Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1005970Z E          ...
2025-01-10T13:28:40.1006030Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1006120Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1006200Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1006200Z 
2025-01-10T13:28:40.1006270Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1006600Z ____________ TestPlasma.test_plasma_properties[excitation:lte-f_lu] ____________
2025-01-10T13:28:40.1006610Z 
2025-01-10T13:28:40.1006710Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1006880Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1007030Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1007200Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1016420Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1016570Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1016620Z err_msg = None
2025-01-10T13:28:40.1016620Z 
2025-01-10T13:28:40.1016710Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1016760Z         if err_msg is None:
2025-01-10T13:28:40.1016830Z             if left.shape != right.shape:
2025-01-10T13:28:40.1016890Z                 raise_assert_detail(
2025-01-10T13:28:40.1017260Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1017320Z                 )
2025-01-10T13:28:40.1017360Z     
2025-01-10T13:28:40.1017410Z             diff = 0
2025-01-10T13:28:40.1017490Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1017560Z                 # count up differences
2025-01-10T13:28:40.1017690Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1017750Z                     diff += 1
2025-01-10T13:28:40.1017790Z     
2025-01-10T13:28:40.1017850Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1017960Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1018090Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1018180Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1018220Z E           
2025-01-10T13:28:40.1018310Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1018620Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1018830Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1018830Z 
2025-01-10T13:28:40.1019080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1019080Z 
2025-01-10T13:28:40.1019210Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1019210Z 
2025-01-10T13:28:40.1024730Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440ba690>
2025-01-10T13:28:40.1024910Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>, attr = 'f_lu'
2025-01-10T13:28:40.1024920Z 
2025-01-10T13:28:40.1025060Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1025150Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1025210Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1025260Z         try:
2025-01-10T13:28:40.1025370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1025420Z         except KeyError:
2025-01-10T13:28:40.1025530Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1025570Z     
2025-01-10T13:28:40.1025640Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1025700Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1025770Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1025880Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1025940Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1026000Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1026080Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1026090Z 
2025-01-10T13:28:40.1026180Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1026260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1026370Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1026410Z     ???
2025-01-10T13:28:40.1026500Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1026500Z 
2025-01-10T13:28:40.1026540Z >   ???
2025-01-10T13:28:40.1026640Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1026680Z E   
2025-01-10T13:28:40.1026930Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1027020Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1027070Z E          ...
2025-01-10T13:28:40.1027130Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1027230Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1027310Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1027360Z E          ...
2025-01-10T13:28:40.1027420Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1027510Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1027580Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1027590Z 
2025-01-10T13:28:40.1027650Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1027800Z ________ TestPlasma.test_plasma_properties[excitation:lte-tau_sobolevs] ________
2025-01-10T13:28:40.1027800Z 
2025-01-10T13:28:40.1027910Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1028410Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1028480Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1028580Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1028680Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1028760Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1028810Z err_msg = None
2025-01-10T13:28:40.1028820Z 
2025-01-10T13:28:40.1028900Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1028950Z         if err_msg is None:
2025-01-10T13:28:40.1029020Z             if left.shape != right.shape:
2025-01-10T13:28:40.1029080Z                 raise_assert_detail(
2025-01-10T13:28:40.1029200Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1029250Z                 )
2025-01-10T13:28:40.1029300Z     
2025-01-10T13:28:40.1029340Z             diff = 0
2025-01-10T13:28:40.1029420Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1029490Z                 # count up differences
2025-01-10T13:28:40.1029620Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1029680Z                     diff += 1
2025-01-10T13:28:40.1029720Z     
2025-01-10T13:28:40.1029790Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1029890Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1030030Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1030110Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1030150Z E           
2025-01-10T13:28:40.1030240Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1030440Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1030650Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1030650Z 
2025-01-10T13:28:40.1030890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1030890Z 
2025-01-10T13:28:40.1031020Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1031290Z 
2025-01-10T13:28:40.1031460Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440bae10>
2025-01-10T13:28:40.1031580Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>
2025-01-10T13:28:40.1031640Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.1031640Z 
2025-01-10T13:28:40.1031740Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1031830Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1031890Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1031940Z         try:
2025-01-10T13:28:40.1032050Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1032100Z         except KeyError:
2025-01-10T13:28:40.1032210Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1032260Z     
2025-01-10T13:28:40.1032320Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1032380Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1032440Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1032600Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1032660Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1032720Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1032810Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1032850Z             else:
2025-01-10T13:28:40.1032920Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1033000Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1033010Z 
2025-01-10T13:28:40.1033100Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1033190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1033300Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1033350Z     ???
2025-01-10T13:28:40.1033430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1033440Z 
2025-01-10T13:28:40.1033490Z >   ???
2025-01-10T13:28:40.1033590Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1033640Z E   
2025-01-10T13:28:40.1033730Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1033820Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1033860Z E          ...
2025-01-10T13:28:40.1033930Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1034030Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1034110Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1034160Z E          ...
2025-01-10T13:28:40.1034220Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1034310Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1034390Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1034390Z 
2025-01-10T13:28:40.1034450Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1034610Z ________ TestPlasma.test_plasma_properties[excitation:lte-beta_sobolev] ________
2025-01-10T13:28:40.1034620Z 
2025-01-10T13:28:40.1034710Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1034820Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1034890Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1034990Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1035100Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1035170Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1035220Z err_msg = None
2025-01-10T13:28:40.1035220Z 
2025-01-10T13:28:40.1035300Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1035410Z         if err_msg is None:
2025-01-10T13:28:40.1035490Z             if left.shape != right.shape:
2025-01-10T13:28:40.1035550Z                 raise_assert_detail(
2025-01-10T13:28:40.1035660Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1035700Z                 )
2025-01-10T13:28:40.1035740Z     
2025-01-10T13:28:40.1035790Z             diff = 0
2025-01-10T13:28:40.1035870Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1035930Z                 # count up differences
2025-01-10T13:28:40.1036070Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1036120Z                     diff += 1
2025-01-10T13:28:40.1036170Z     
2025-01-10T13:28:40.1036230Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1036330Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1036470Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1036610Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1036660Z E           
2025-01-10T13:28:40.1036740Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1036940Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1037140Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1037150Z 
2025-01-10T13:28:40.1037390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1037400Z 
2025-01-10T13:28:40.1037530Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1037530Z 
2025-01-10T13:28:40.1037700Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440baed0>
2025-01-10T13:28:40.1037810Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>
2025-01-10T13:28:40.1037870Z attr = 'beta_sobolev'
2025-01-10T13:28:40.1037870Z 
2025-01-10T13:28:40.1037970Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1038060Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1038110Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1038160Z         try:
2025-01-10T13:28:40.1038260Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1038310Z         except KeyError:
2025-01-10T13:28:40.1038420Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1038470Z     
2025-01-10T13:28:40.1038530Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1038600Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1038650Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1038760Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1038810Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1038880Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1038960Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1039000Z             else:
2025-01-10T13:28:40.1039070Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1039150Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1039150Z 
2025-01-10T13:28:40.1039240Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1039330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1039500Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1039550Z     ???
2025-01-10T13:28:40.1039630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1039630Z 
2025-01-10T13:28:40.1039680Z >   ???
2025-01-10T13:28:40.1039770Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1039820Z E   
2025-01-10T13:28:40.1039920Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1040000Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1040040Z E          ...
2025-01-10T13:28:40.1040100Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1040200Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1040290Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1040340Z E          ...
2025-01-10T13:28:40.1040400Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1040540Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1040620Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1040620Z 
2025-01-10T13:28:40.1040680Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1040840Z __________ TestPlasma.test_plasma_properties[excitation:lte-j_blues] ___________
2025-01-10T13:28:40.1040840Z 
2025-01-10T13:28:40.1040940Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1041040Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1041110Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1041220Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1041320Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1041400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1041450Z err_msg = None
2025-01-10T13:28:40.1041450Z 
2025-01-10T13:28:40.1041530Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1041590Z         if err_msg is None:
2025-01-10T13:28:40.1041660Z             if left.shape != right.shape:
2025-01-10T13:28:40.1041710Z                 raise_assert_detail(
2025-01-10T13:28:40.1041820Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1041870Z                 )
2025-01-10T13:28:40.1041910Z     
2025-01-10T13:28:40.1041960Z             diff = 0
2025-01-10T13:28:40.1042040Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1042100Z                 # count up differences
2025-01-10T13:28:40.1042230Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1042280Z                     diff += 1
2025-01-10T13:28:40.1042330Z     
2025-01-10T13:28:40.1042390Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1042490Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1042620Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1042710Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1042750Z E           
2025-01-10T13:28:40.1042840Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1043030Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1043240Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1043290Z 
2025-01-10T13:28:40.1043520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1043520Z 
2025-01-10T13:28:40.1043660Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1043660Z 
2025-01-10T13:28:40.1043820Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440bb050>
2025-01-10T13:28:40.1044100Z plasma = <tardis.plasma.base.BasePlasma object at 0x316fdf020>, attr = 'j_blues'
2025-01-10T13:28:40.1044100Z 
2025-01-10T13:28:40.1044210Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1044300Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1044360Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1044400Z         try:
2025-01-10T13:28:40.1044510Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1044870Z         except KeyError:
2025-01-10T13:28:40.1044980Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1045020Z     
2025-01-10T13:28:40.1045080Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1045150Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1045210Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1045310Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1045370Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1045430Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1045510Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1045560Z             else:
2025-01-10T13:28:40.1045630Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1045710Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1045720Z 
2025-01-10T13:28:40.1045810Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1045900Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1046010Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1046050Z     ???
2025-01-10T13:28:40.1046140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1046140Z 
2025-01-10T13:28:40.1046180Z >   ???
2025-01-10T13:28:40.1046280Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1046320Z E   
2025-01-10T13:28:40.1046420Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1046500Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1046540Z E          ...
2025-01-10T13:28:40.1046610Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1046700Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1046790Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1046850Z E          ...
2025-01-10T13:28:40.1046910Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1047000Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1047080Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1047080Z 
2025-01-10T13:28:40.1047190Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1047390Z ________ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines] ________
2025-01-10T13:28:40.1047390Z 
2025-01-10T13:28:40.1047490Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1047590Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1047670Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1047770Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1048250Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1048330Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1048380Z err_msg = None
2025-01-10T13:28:40.1048380Z 
2025-01-10T13:28:40.1048460Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1048510Z         if err_msg is None:
2025-01-10T13:28:40.1048590Z             if left.shape != right.shape:
2025-01-10T13:28:40.1048660Z                 raise_assert_detail(
2025-01-10T13:28:40.1048770Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1048820Z                 )
2025-01-10T13:28:40.1048860Z     
2025-01-10T13:28:40.1048910Z             diff = 0
2025-01-10T13:28:40.1048990Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1049060Z                 # count up differences
2025-01-10T13:28:40.1049200Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1049360Z                     diff += 1
2025-01-10T13:28:40.1049400Z     
2025-01-10T13:28:40.1049470Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1049570Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1049700Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1049780Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1049830Z E           
2025-01-10T13:28:40.1049910Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1051540Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1051770Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1051780Z 
2025-01-10T13:28:40.1052010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1052010Z 
2025-01-10T13:28:40.1052140Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1052140Z 
2025-01-10T13:28:40.1052310Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440bbdd0>
2025-01-10T13:28:40.1052470Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>, attr = 'lines'
2025-01-10T13:28:40.1052470Z 
2025-01-10T13:28:40.1052580Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1052670Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1052730Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1052780Z         try:
2025-01-10T13:28:40.1052880Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1052940Z         except KeyError:
2025-01-10T13:28:40.1053040Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1053080Z     
2025-01-10T13:28:40.1053150Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1053210Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1053280Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1053380Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1053430Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1053500Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1053580Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1053810Z             else:
2025-01-10T13:28:40.1053880Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1053970Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1053970Z 
2025-01-10T13:28:40.1054060Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1054140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1054250Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1054300Z     ???
2025-01-10T13:28:40.1054380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1054390Z 
2025-01-10T13:28:40.1054430Z >   ???
2025-01-10T13:28:40.1054520Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1054570Z E   
2025-01-10T13:28:40.1054660Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1054750Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1054790Z E          ...
2025-01-10T13:28:40.1054920Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1055030Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1055110Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1055160Z E          ...
2025-01-10T13:28:40.1055220Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1055310Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1055390Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1055390Z 
2025-01-10T13:28:40.1055450Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1055630Z _ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_lower_level_index] _
2025-01-10T13:28:40.1055630Z 
2025-01-10T13:28:40.1055790Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440bbe90>
2025-01-10T13:28:40.1055910Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>
2025-01-10T13:28:40.1055970Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.1055980Z 
2025-01-10T13:28:40.1056080Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1056160Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1056220Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1056270Z         try:
2025-01-10T13:28:40.1056370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1056430Z         except KeyError:
2025-01-10T13:28:40.1056530Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1056570Z     
2025-01-10T13:28:40.1056630Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1056700Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1056760Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1056860Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1056920Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1056990Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1057070Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1057070Z 
2025-01-10T13:28:40.1057170Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1057250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1057250Z 
2025-01-10T13:28:40.1057360Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1057420Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1057500Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1057560Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1057660Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1057720Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1057800Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1057910Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1057960Z err_msg = None
2025-01-10T13:28:40.1057960Z 
2025-01-10T13:28:40.1058040Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1058090Z         if err_msg is None:
2025-01-10T13:28:40.1058160Z             if left.shape != right.shape:
2025-01-10T13:28:40.1058220Z                 raise_assert_detail(
2025-01-10T13:28:40.1058330Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1058370Z                 )
2025-01-10T13:28:40.1058420Z     
2025-01-10T13:28:40.1058460Z             diff = 0
2025-01-10T13:28:40.1058540Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1058600Z                 # count up differences
2025-01-10T13:28:40.1058730Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1058780Z                     diff += 1
2025-01-10T13:28:40.1058830Z     
2025-01-10T13:28:40.1058950Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1059050Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1059190Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1059260Z E           AssertionError: Series are different
2025-01-10T13:28:40.1059300Z E           
2025-01-10T13:28:40.1059380Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.1059670Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1059940Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1060210Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1060220Z 
2025-01-10T13:28:40.1060450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1060630Z _ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_upper_level_index] _
2025-01-10T13:28:40.1060630Z 
2025-01-10T13:28:40.1060800Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440bbf50>
2025-01-10T13:28:40.1060920Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>
2025-01-10T13:28:40.1060980Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.1060990Z 
2025-01-10T13:28:40.1061090Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1061180Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1061230Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1061280Z         try:
2025-01-10T13:28:40.1061380Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1061430Z         except KeyError:
2025-01-10T13:28:40.1061540Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1061580Z     
2025-01-10T13:28:40.1061640Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1061710Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1061820Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1061930Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1061990Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1062050Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1062130Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1062140Z 
2025-01-10T13:28:40.1062220Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1062310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1062310Z 
2025-01-10T13:28:40.1062410Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1062480Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1062560Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1062620Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1062720Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1063250Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1063340Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1063390Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1063440Z err_msg = None
2025-01-10T13:28:40.1063440Z 
2025-01-10T13:28:40.1063520Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1063570Z         if err_msg is None:
2025-01-10T13:28:40.1063640Z             if left.shape != right.shape:
2025-01-10T13:28:40.1063690Z                 raise_assert_detail(
2025-01-10T13:28:40.1063800Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1063850Z                 )
2025-01-10T13:28:40.1063890Z     
2025-01-10T13:28:40.1063940Z             diff = 0
2025-01-10T13:28:40.1064020Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1064090Z                 # count up differences
2025-01-10T13:28:40.1064220Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1064270Z                     diff += 1
2025-01-10T13:28:40.1064320Z     
2025-01-10T13:28:40.1064380Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1064480Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1065260Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1065690Z E           AssertionError: Series are different
2025-01-10T13:28:40.1065840Z E           
2025-01-10T13:28:40.1066050Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.1066940Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1067820Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1068670Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1069710Z 
2025-01-10T13:28:40.1070390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1070790Z _________ TestPlasma.test_plasma_properties[excitation:dilute-lte-nu] __________
2025-01-10T13:28:40.1070800Z 
2025-01-10T13:28:40.1071070Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1071320Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1071500Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1071780Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1072030Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1072580Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1072720Z err_msg = None
2025-01-10T13:28:40.1073050Z 
2025-01-10T13:28:40.1073160Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1073220Z         if err_msg is None:
2025-01-10T13:28:40.1073290Z             if left.shape != right.shape:
2025-01-10T13:28:40.1073350Z                 raise_assert_detail(
2025-01-10T13:28:40.1073480Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1073530Z                 )
2025-01-10T13:28:40.1073580Z     
2025-01-10T13:28:40.1073630Z             diff = 0
2025-01-10T13:28:40.1073720Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1073780Z                 # count up differences
2025-01-10T13:28:40.1073920Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1073980Z                     diff += 1
2025-01-10T13:28:40.1074020Z     
2025-01-10T13:28:40.1074090Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1074200Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1074340Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1074430Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1074470Z E           
2025-01-10T13:28:40.1074560Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1074760Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1074970Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1074980Z 
2025-01-10T13:28:40.1075230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1075240Z 
2025-01-10T13:28:40.1075370Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1075370Z 
2025-01-10T13:28:40.1075540Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d81d0>
2025-01-10T13:28:40.1075700Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>, attr = 'nu'
2025-01-10T13:28:40.1075700Z 
2025-01-10T13:28:40.1075810Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1075890Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1075950Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1076000Z         try:
2025-01-10T13:28:40.1076100Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1076250Z         except KeyError:
2025-01-10T13:28:40.1076540Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1076580Z     
2025-01-10T13:28:40.1076700Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1076830Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1076900Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1077060Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1077190Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1077260Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1077470Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1077470Z 
2025-01-10T13:28:40.1077650Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1077820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1077930Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1078130Z     ???
2025-01-10T13:28:40.1078280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1078280Z 
2025-01-10T13:28:40.1078390Z >   ???
2025-01-10T13:28:40.1078480Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1078590Z E   
2025-01-10T13:28:40.1078750Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1078830Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1078940Z E          ...
2025-01-10T13:28:40.1079060Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1079160Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1079310Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1079440Z E          ...
2025-01-10T13:28:40.1079560Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1079660Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1079800Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1079800Z 
2025-01-10T13:28:40.1111380Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1112680Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-wavelength_cm] ____
2025-01-10T13:28:40.1112710Z 
2025-01-10T13:28:40.1113030Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1113290Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1113490Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1113920Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1114210Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1114410Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1114600Z err_msg = None
2025-01-10T13:28:40.1114620Z 
2025-01-10T13:28:40.1114860Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1115010Z         if err_msg is None:
2025-01-10T13:28:40.1115200Z             if left.shape != right.shape:
2025-01-10T13:28:40.1115360Z                 raise_assert_detail(
2025-01-10T13:28:40.1115650Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1115780Z                 )
2025-01-10T13:28:40.1116040Z     
2025-01-10T13:28:40.1116180Z             diff = 0
2025-01-10T13:28:40.1116400Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1116570Z                 # count up differences
2025-01-10T13:28:40.1116920Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1117070Z                     diff += 1
2025-01-10T13:28:40.1117200Z     
2025-01-10T13:28:40.1117380Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1118370Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1118740Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1118960Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1119100Z E           
2025-01-10T13:28:40.1119330Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1119890Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1120470Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1120740Z 
2025-01-10T13:28:40.1121390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1121400Z 
2025-01-10T13:28:40.1121750Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1121760Z 
2025-01-10T13:28:40.1122190Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d8290>
2025-01-10T13:28:40.1122520Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>
2025-01-10T13:28:40.1122670Z attr = 'wavelength_cm'
2025-01-10T13:28:40.1122680Z 
2025-01-10T13:28:40.1122950Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1123180Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1123340Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1123490Z         try:
2025-01-10T13:28:40.1123770Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1123940Z         except KeyError:
2025-01-10T13:28:40.1124220Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1124540Z     
2025-01-10T13:28:40.1124740Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1124920Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1125420Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1125700Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1125860Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1126040Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1126260Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1126260Z 
2025-01-10T13:28:40.1126520Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1126740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1127030Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1127190Z     ???
2025-01-10T13:28:40.1127410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1127420Z 
2025-01-10T13:28:40.1127550Z >   ???
2025-01-10T13:28:40.1127800Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1127940Z E   
2025-01-10T13:28:40.1128190Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1128410Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1128550Z E          ...
2025-01-10T13:28:40.1128720Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1128980Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1129200Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1129340Z E          ...
2025-01-10T13:28:40.1129520Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1129770Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1130230Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1130240Z 
2025-01-10T13:28:40.1130410Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1130820Z ________ TestPlasma.test_plasma_properties[excitation:dilute-lte-f_lu] _________
2025-01-10T13:28:40.1130830Z 
2025-01-10T13:28:40.1131090Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1131350Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1131540Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1131810Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1132060Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1132240Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1132400Z err_msg = None
2025-01-10T13:28:40.1132900Z 
2025-01-10T13:28:40.1133130Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1133290Z         if err_msg is None:
2025-01-10T13:28:40.1133480Z             if left.shape != right.shape:
2025-01-10T13:28:40.1133640Z                 raise_assert_detail(
2025-01-10T13:28:40.1133930Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1134070Z                 )
2025-01-10T13:28:40.1134200Z     
2025-01-10T13:28:40.1134350Z             diff = 0
2025-01-10T13:28:40.1134560Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1134730Z                 # count up differences
2025-01-10T13:28:40.1135080Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1135230Z                     diff += 1
2025-01-10T13:28:40.1135360Z     
2025-01-10T13:28:40.1135530Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1135810Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1136160Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1136380Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1136520Z E           
2025-01-10T13:28:40.1136740Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1137300Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1137870Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1137900Z 
2025-01-10T13:28:40.1138530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1138540Z 
2025-01-10T13:28:40.1138880Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1138890Z 
2025-01-10T13:28:40.1139330Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d8350>
2025-01-10T13:28:40.1139720Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>, attr = 'f_lu'
2025-01-10T13:28:40.1139730Z 
2025-01-10T13:28:40.1140010Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1140240Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1140410Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1140540Z         try:
2025-01-10T13:28:40.1140820Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1142240Z         except KeyError:
2025-01-10T13:28:40.1142560Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1142700Z     
2025-01-10T13:28:40.1142870Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1143050Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1143230Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1143530Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1143720Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1143890Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1144120Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1144130Z 
2025-01-10T13:28:40.1144380Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1144610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1144940Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1145320Z     ???
2025-01-10T13:28:40.1145550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1145560Z 
2025-01-10T13:28:40.1145690Z >   ???
2025-01-10T13:28:40.1145940Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1146090Z E   
2025-01-10T13:28:40.1146340Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1146570Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1146710Z E          ...
2025-01-10T13:28:40.1146880Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1147140Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1147360Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1147510Z E          ...
2025-01-10T13:28:40.1147670Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1147930Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1148150Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1148160Z 
2025-01-10T13:28:40.1148330Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1148760Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-tau_sobolevs] _____
2025-01-10T13:28:40.1148770Z 
2025-01-10T13:28:40.1149030Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1149300Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1149480Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1149760Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1150000Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1150190Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1150350Z err_msg = None
2025-01-10T13:28:40.1150390Z 
2025-01-10T13:28:40.1150620Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1150780Z         if err_msg is None:
2025-01-10T13:28:40.1150960Z             if left.shape != right.shape:
2025-01-10T13:28:40.1151130Z                 raise_assert_detail(
2025-01-10T13:28:40.1151420Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1151550Z                 )
2025-01-10T13:28:40.1151690Z     
2025-01-10T13:28:40.1151830Z             diff = 0
2025-01-10T13:28:40.1152050Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1152220Z                 # count up differences
2025-01-10T13:28:40.1152560Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1152710Z                     diff += 1
2025-01-10T13:28:40.1152850Z     
2025-01-10T13:28:40.1153100Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1153580Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1153930Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1154160Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1154290Z E           
2025-01-10T13:28:40.1154520Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1155080Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1155660Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1155820Z 
2025-01-10T13:28:40.1156460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1156470Z 
2025-01-10T13:28:40.1156820Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1156830Z 
2025-01-10T13:28:40.1157260Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d8ad0>
2025-01-10T13:28:40.1157580Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>
2025-01-10T13:28:40.1157730Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.1157740Z 
2025-01-10T13:28:40.1158010Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1158240Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1158400Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1158550Z         try:
2025-01-10T13:28:40.1158820Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1159000Z         except KeyError:
2025-01-10T13:28:40.1159280Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1159410Z     
2025-01-10T13:28:40.1159580Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1159760Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1159940Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1160200Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1160370Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1160550Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1160760Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1160910Z             else:
2025-01-10T13:28:40.1161090Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1161300Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1161310Z 
2025-01-10T13:28:40.1161560Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1161790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1162090Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1162220Z     ???
2025-01-10T13:28:40.1162440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1162450Z 
2025-01-10T13:28:40.1162580Z >   ???
2025-01-10T13:28:40.1162830Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1162960Z E   
2025-01-10T13:28:40.1163220Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1163440Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1163580Z E          ...
2025-01-10T13:28:40.1163750Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1164010Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1164230Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1164530Z E          ...
2025-01-10T13:28:40.1164690Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1164950Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1165150Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1165160Z 
2025-01-10T13:28:40.1165520Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1165960Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-beta_sobolev] _____
2025-01-10T13:28:40.1165970Z 
2025-01-10T13:28:40.1166220Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1166480Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1166660Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1166930Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1167190Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1167560Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1167720Z err_msg = None
2025-01-10T13:28:40.1167730Z 
2025-01-10T13:28:40.1167940Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1168100Z         if err_msg is None:
2025-01-10T13:28:40.1168290Z             if left.shape != right.shape:
2025-01-10T13:28:40.1168450Z                 raise_assert_detail(
2025-01-10T13:28:40.1168740Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1168880Z                 )
2025-01-10T13:28:40.1169020Z     
2025-01-10T13:28:40.1169160Z             diff = 0
2025-01-10T13:28:40.1169380Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1169540Z                 # count up differences
2025-01-10T13:28:40.1169890Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1170050Z                     diff += 1
2025-01-10T13:28:40.1170180Z     
2025-01-10T13:28:40.1170360Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1170620Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1171510Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1171800Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1171940Z E           
2025-01-10T13:28:40.1172170Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1172740Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1173330Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1173350Z 
2025-01-10T13:28:40.1174240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1174260Z 
2025-01-10T13:28:40.1174610Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1174850Z 
2025-01-10T13:28:40.1175310Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d8b90>
2025-01-10T13:28:40.1175630Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>
2025-01-10T13:28:40.1175790Z attr = 'beta_sobolev'
2025-01-10T13:28:40.1175790Z 
2025-01-10T13:28:40.1176060Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1176580Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1176750Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1176890Z         try:
2025-01-10T13:28:40.1177170Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1177340Z         except KeyError:
2025-01-10T13:28:40.1177610Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1177740Z     
2025-01-10T13:28:40.1178140Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1178370Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1178560Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1178840Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1179010Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1179190Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1179410Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1179570Z             else:
2025-01-10T13:28:40.1180430Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1180650Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1180660Z 
2025-01-10T13:28:40.1180930Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1181150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1181470Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1181600Z     ???
2025-01-10T13:28:40.1181830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1181840Z 
2025-01-10T13:28:40.1181970Z >   ???
2025-01-10T13:28:40.1182230Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1182370Z E   
2025-01-10T13:28:40.1182620Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1182850Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1183370Z E          ...
2025-01-10T13:28:40.1183560Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1183820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1184050Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1184190Z E          ...
2025-01-10T13:28:40.1184360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1184620Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1184830Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1184840Z 
2025-01-10T13:28:40.1185010Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1185440Z _______ TestPlasma.test_plasma_properties[excitation:dilute-lte-j_blues] _______
2025-01-10T13:28:40.1185450Z 
2025-01-10T13:28:40.1185700Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1185960Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1186160Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1186440Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1186690Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1186870Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1187030Z err_msg = None
2025-01-10T13:28:40.1187040Z 
2025-01-10T13:28:40.1187260Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1187420Z         if err_msg is None:
2025-01-10T13:28:40.1187600Z             if left.shape != right.shape:
2025-01-10T13:28:40.1187760Z                 raise_assert_detail(
2025-01-10T13:28:40.1188060Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1188200Z                 )
2025-01-10T13:28:40.1188340Z     
2025-01-10T13:28:40.1188470Z             diff = 0
2025-01-10T13:28:40.1189170Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1189360Z                 # count up differences
2025-01-10T13:28:40.1189710Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1189870Z                     diff += 1
2025-01-10T13:28:40.1190000Z     
2025-01-10T13:28:40.1190180Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1190450Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1190800Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1191040Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1191180Z E           
2025-01-10T13:28:40.1191410Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1191990Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1192740Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1192750Z 
2025-01-10T13:28:40.1193410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1193420Z 
2025-01-10T13:28:40.1193780Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1193790Z 
2025-01-10T13:28:40.1198980Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d8d10>
2025-01-10T13:28:40.1199220Z plasma = <tardis.plasma.base.BasePlasma object at 0x164c929c0>, attr = 'j_blues'
2025-01-10T13:28:40.1199230Z 
2025-01-10T13:28:40.1199350Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1199440Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1199510Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1199560Z         try:
2025-01-10T13:28:40.1199670Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1199730Z         except KeyError:
2025-01-10T13:28:40.1199840Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1199890Z     
2025-01-10T13:28:40.1199950Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1200030Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1200090Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1200200Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1200260Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1200330Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1200430Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1200470Z             else:
2025-01-10T13:28:40.1200550Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1200630Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1200630Z 
2025-01-10T13:28:40.1200730Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1200820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1200940Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1200980Z     ???
2025-01-10T13:28:40.1201070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1201070Z 
2025-01-10T13:28:40.1201120Z >   ???
2025-01-10T13:28:40.1201210Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1201250Z E   
2025-01-10T13:28:40.1201650Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1201740Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1201790Z E          ...
2025-01-10T13:28:40.1201850Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1201950Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1202050Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1202090Z E          ...
2025-01-10T13:28:40.1202160Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1202260Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1202330Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1202340Z 
2025-01-10T13:28:40.1202400Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1202590Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines] _
2025-01-10T13:28:40.1202600Z 
2025-01-10T13:28:40.1202710Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1202930Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1203010Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1203110Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1203220Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1203290Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1203350Z err_msg = None
2025-01-10T13:28:40.1203350Z 
2025-01-10T13:28:40.1203430Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1203480Z         if err_msg is None:
2025-01-10T13:28:40.1203560Z             if left.shape != right.shape:
2025-01-10T13:28:40.1203620Z                 raise_assert_detail(
2025-01-10T13:28:40.1203730Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1203790Z                 )
2025-01-10T13:28:40.1203830Z     
2025-01-10T13:28:40.1203880Z             diff = 0
2025-01-10T13:28:40.1203970Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1204030Z                 # count up differences
2025-01-10T13:28:40.1204170Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1204220Z                     diff += 1
2025-01-10T13:28:40.1204270Z     
2025-01-10T13:28:40.1204330Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1204440Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1204580Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1204670Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1204720Z E           
2025-01-10T13:28:40.1204800Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1205020Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1205230Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1205230Z 
2025-01-10T13:28:40.1205550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1205550Z 
2025-01-10T13:28:40.1205680Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1205750Z 
2025-01-10T13:28:40.1205920Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d9a90>
2025-01-10T13:28:40.1206080Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>, attr = 'lines'
2025-01-10T13:28:40.1206080Z 
2025-01-10T13:28:40.1206190Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1206270Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1206330Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1206380Z         try:
2025-01-10T13:28:40.1206490Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1206550Z         except KeyError:
2025-01-10T13:28:40.1206650Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1206700Z     
2025-01-10T13:28:40.1206760Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1206820Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1206890Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1207050Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1207110Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1207180Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1207270Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1207310Z             else:
2025-01-10T13:28:40.1207380Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1207460Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1207460Z 
2025-01-10T13:28:40.1207550Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1207640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1207760Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1207800Z     ???
2025-01-10T13:28:40.1207890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1207900Z 
2025-01-10T13:28:40.1207940Z >   ???
2025-01-10T13:28:40.1208040Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1208080Z E   
2025-01-10T13:28:40.1208180Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1208260Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1208310Z E          ...
2025-01-10T13:28:40.1208370Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1208470Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1208550Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1208600Z E          ...
2025-01-10T13:28:40.1208660Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1208770Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1208840Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1208840Z 
2025-01-10T13:28:40.1208910Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1209140Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index] _
2025-01-10T13:28:40.1209150Z 
2025-01-10T13:28:40.1209310Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d9b50>
2025-01-10T13:28:40.1209440Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>
2025-01-10T13:28:40.1209500Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.1209500Z 
2025-01-10T13:28:40.1209610Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1209690Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1209750Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1209790Z         try:
2025-01-10T13:28:40.1209900Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1209960Z         except KeyError:
2025-01-10T13:28:40.1210060Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1210150Z     
2025-01-10T13:28:40.1210220Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1210290Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1210350Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1210450Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1210520Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1210580Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1210660Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1210670Z 
2025-01-10T13:28:40.1210760Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1210840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1210850Z 
2025-01-10T13:28:40.1210950Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1211010Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1211100Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1211450Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1211570Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1211630Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1211710Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1211770Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1211810Z err_msg = None
2025-01-10T13:28:40.1211820Z 
2025-01-10T13:28:40.1211890Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1211950Z         if err_msg is None:
2025-01-10T13:28:40.1212020Z             if left.shape != right.shape:
2025-01-10T13:28:40.1212080Z                 raise_assert_detail(
2025-01-10T13:28:40.1212190Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1212230Z                 )
2025-01-10T13:28:40.1212280Z     
2025-01-10T13:28:40.1212330Z             diff = 0
2025-01-10T13:28:40.1212410Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1212470Z                 # count up differences
2025-01-10T13:28:40.1212610Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1212660Z                     diff += 1
2025-01-10T13:28:40.1212700Z     
2025-01-10T13:28:40.1212770Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1212870Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1213010Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1213080Z E           AssertionError: Series are different
2025-01-10T13:28:40.1213120Z E           
2025-01-10T13:28:40.1213200Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.1213490Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1213760Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1214020Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1214230Z 
2025-01-10T13:28:40.1214470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1214700Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index] _
2025-01-10T13:28:40.1214710Z 
2025-01-10T13:28:40.1214870Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d9c10>
2025-01-10T13:28:40.1214990Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>
2025-01-10T13:28:40.1215050Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.1215060Z 
2025-01-10T13:28:40.1215160Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1215250Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1215310Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1215350Z         try:
2025-01-10T13:28:40.1215460Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1215560Z         except KeyError:
2025-01-10T13:28:40.1215670Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1215710Z     
2025-01-10T13:28:40.1215770Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1215840Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1215900Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1216060Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1216170Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1216240Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1216320Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1216330Z 
2025-01-10T13:28:40.1216420Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1216510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1216520Z 
2025-01-10T13:28:40.1216620Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1216690Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1216770Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1216820Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1216930Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1216990Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1217220Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1217360Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1217410Z err_msg = None
2025-01-10T13:28:40.1217410Z 
2025-01-10T13:28:40.1217690Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1217810Z         if err_msg is None:
2025-01-10T13:28:40.1217940Z             if left.shape != right.shape:
2025-01-10T13:28:40.1218070Z                 raise_assert_detail(
2025-01-10T13:28:40.1218180Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1218300Z                 )
2025-01-10T13:28:40.1218410Z     
2025-01-10T13:28:40.1218460Z             diff = 0
2025-01-10T13:28:40.1218610Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1218730Z                 # count up differences
2025-01-10T13:28:40.1230120Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1230260Z                     diff += 1
2025-01-10T13:28:40.1230300Z     
2025-01-10T13:28:40.1230370Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1230480Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1230620Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1230690Z E           AssertionError: Series are different
2025-01-10T13:28:40.1231030Z E           
2025-01-10T13:28:40.1231110Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.1231430Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1231760Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1232200Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1232200Z 
2025-01-10T13:28:40.1232450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1232630Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu] _
2025-01-10T13:28:40.1232630Z 
2025-01-10T13:28:40.1232740Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1232840Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1232920Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1233020Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1233120Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1233190Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1233240Z err_msg = None
2025-01-10T13:28:40.1233240Z 
2025-01-10T13:28:40.1233330Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1233380Z         if err_msg is None:
2025-01-10T13:28:40.1233450Z             if left.shape != right.shape:
2025-01-10T13:28:40.1233510Z                 raise_assert_detail(
2025-01-10T13:28:40.1233620Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1233660Z                 )
2025-01-10T13:28:40.1233710Z     
2025-01-10T13:28:40.1233750Z             diff = 0
2025-01-10T13:28:40.1233840Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1233900Z                 # count up differences
2025-01-10T13:28:40.1234030Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1234090Z                     diff += 1
2025-01-10T13:28:40.1234130Z     
2025-01-10T13:28:40.1234190Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1234300Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1234430Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1234510Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1234560Z E           
2025-01-10T13:28:40.1234640Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1234840Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1235110Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1235120Z 
2025-01-10T13:28:40.1235350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1235350Z 
2025-01-10T13:28:40.1235480Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1235480Z 
2025-01-10T13:28:40.1235650Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d9e50>
2025-01-10T13:28:40.1235800Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>, attr = 'nu'
2025-01-10T13:28:40.1235850Z 
2025-01-10T13:28:40.1235960Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1236050Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1236110Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1236150Z         try:
2025-01-10T13:28:40.1236260Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1236310Z         except KeyError:
2025-01-10T13:28:40.1236420Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1236460Z     
2025-01-10T13:28:40.1236520Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1236590Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1236640Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1236750Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1236810Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1236870Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1236960Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1236960Z 
2025-01-10T13:28:40.1237050Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1237140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1237250Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1237290Z     ???
2025-01-10T13:28:40.1237380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1237380Z 
2025-01-10T13:28:40.1237420Z >   ???
2025-01-10T13:28:40.1237520Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1237560Z E   
2025-01-10T13:28:40.1237660Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1237740Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1237790Z E          ...
2025-01-10T13:28:40.1237850Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1237950Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1238030Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1238080Z E          ...
2025-01-10T13:28:40.1238140Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1238240Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1238310Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1238310Z 
2025-01-10T13:28:40.1238370Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1238580Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm] _
2025-01-10T13:28:40.1238590Z 
2025-01-10T13:28:40.1238690Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1238790Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1238900Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1239010Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1239100Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1239180Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1239230Z err_msg = None
2025-01-10T13:28:40.1239230Z 
2025-01-10T13:28:40.1239310Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1239360Z         if err_msg is None:
2025-01-10T13:28:40.1239430Z             if left.shape != right.shape:
2025-01-10T13:28:40.1239490Z                 raise_assert_detail(
2025-01-10T13:28:40.1239590Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1239640Z                 )
2025-01-10T13:28:40.1239680Z     
2025-01-10T13:28:40.1239730Z             diff = 0
2025-01-10T13:28:40.1239810Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1240240Z                 # count up differences
2025-01-10T13:28:40.1240380Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1240430Z                     diff += 1
2025-01-10T13:28:40.1240470Z     
2025-01-10T13:28:40.1240530Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1240640Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1240770Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1240850Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1240900Z E           
2025-01-10T13:28:40.1240980Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1241180Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1241400Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1241400Z 
2025-01-10T13:28:40.1241630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1241630Z 
2025-01-10T13:28:40.1241830Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1241830Z 
2025-01-10T13:28:40.1242000Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d9f10>
2025-01-10T13:28:40.1242130Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>
2025-01-10T13:28:40.1242190Z attr = 'wavelength_cm'
2025-01-10T13:28:40.1242190Z 
2025-01-10T13:28:40.1242310Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1242400Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1242450Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1242500Z         try:
2025-01-10T13:28:40.1242610Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1242680Z         except KeyError:
2025-01-10T13:28:40.1242790Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1242840Z     
2025-01-10T13:28:40.1243380Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1243450Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1243510Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1243620Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1243880Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1243950Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1244040Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1244040Z 
2025-01-10T13:28:40.1244130Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1244220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1244330Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1244370Z     ???
2025-01-10T13:28:40.1244450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1244460Z 
2025-01-10T13:28:40.1244500Z >   ???
2025-01-10T13:28:40.1244590Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1244640Z E   
2025-01-10T13:28:40.1244730Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1244820Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1244860Z E          ...
2025-01-10T13:28:40.1244980Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1245080Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1245160Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1245210Z E          ...
2025-01-10T13:28:40.1245270Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1245360Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1245500Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1245510Z 
2025-01-10T13:28:40.1245570Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1245760Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu] _
2025-01-10T13:28:40.1245760Z 
2025-01-10T13:28:40.1245860Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1245960Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1246040Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1246140Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1246240Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1246310Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1246360Z err_msg = None
2025-01-10T13:28:40.1246360Z 
2025-01-10T13:28:40.1246430Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1246490Z         if err_msg is None:
2025-01-10T13:28:40.1246550Z             if left.shape != right.shape:
2025-01-10T13:28:40.1246610Z                 raise_assert_detail(
2025-01-10T13:28:40.1246720Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1246760Z                 )
2025-01-10T13:28:40.1246810Z     
2025-01-10T13:28:40.1246850Z             diff = 0
2025-01-10T13:28:40.1246940Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1247000Z                 # count up differences
2025-01-10T13:28:40.1247130Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1247180Z                     diff += 1
2025-01-10T13:28:40.1247230Z     
2025-01-10T13:28:40.1247290Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1247390Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1247520Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1247610Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1247650Z E           
2025-01-10T13:28:40.1247730Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1247930Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1248200Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1248210Z 
2025-01-10T13:28:40.1248440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1248440Z 
2025-01-10T13:28:40.1248570Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1248580Z 
2025-01-10T13:28:40.1248740Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440d9fd0>
2025-01-10T13:28:40.1248890Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>, attr = 'f_lu'
2025-01-10T13:28:40.1248940Z 
2025-01-10T13:28:40.1249040Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1249130Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1249190Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1249240Z         try:
2025-01-10T13:28:40.1249340Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1249400Z         except KeyError:
2025-01-10T13:28:40.1249500Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1249540Z     
2025-01-10T13:28:40.1249600Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1249670Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1249720Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1249830Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1249890Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1249960Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1250040Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1250040Z 
2025-01-10T13:28:40.1250130Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1250220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1250330Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1250380Z     ???
2025-01-10T13:28:40.1250460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1250460Z 
2025-01-10T13:28:40.1250510Z >   ???
2025-01-10T13:28:40.1250600Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1250640Z E   
2025-01-10T13:28:40.1250740Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1250820Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1250920Z E          ...
2025-01-10T13:28:40.1251010Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1251100Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1251190Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1251230Z E          ...
2025-01-10T13:28:40.1251290Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1251390Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1251460Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1251460Z 
2025-01-10T13:28:40.1251520Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1251730Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs] _
2025-01-10T13:28:40.1251730Z 
2025-01-10T13:28:40.1251830Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1251930Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1252110Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1252210Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1252310Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1252380Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1252430Z err_msg = None
2025-01-10T13:28:40.1252430Z 
2025-01-10T13:28:40.1252510Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1252560Z         if err_msg is None:
2025-01-10T13:28:40.1252620Z             if left.shape != right.shape:
2025-01-10T13:28:40.1252680Z                 raise_assert_detail(
2025-01-10T13:28:40.1252790Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1252840Z                 )
2025-01-10T13:28:40.1252880Z     
2025-01-10T13:28:40.1252930Z             diff = 0
2025-01-10T13:28:40.1253090Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1253150Z                 # count up differences
2025-01-10T13:28:40.1253280Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1253330Z                     diff += 1
2025-01-10T13:28:40.1253370Z     
2025-01-10T13:28:40.1253440Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1253540Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1253670Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1253760Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1253800Z E           
2025-01-10T13:28:40.1253880Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1254080Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1254290Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1254290Z 
2025-01-10T13:28:40.1254520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1254530Z 
2025-01-10T13:28:40.1254660Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1254660Z 
2025-01-10T13:28:40.1254820Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440da750>
2025-01-10T13:28:40.1254950Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>
2025-01-10T13:28:40.1255000Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.1255010Z 
2025-01-10T13:28:40.1255110Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1255190Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1255250Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1255290Z         try:
2025-01-10T13:28:40.1255400Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1255460Z         except KeyError:
2025-01-10T13:28:40.1255560Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1255600Z     
2025-01-10T13:28:40.1255660Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1255730Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1255790Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1255890Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1255990Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1256060Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1256140Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1256190Z             else:
2025-01-10T13:28:40.1256260Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1256340Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1256340Z 
2025-01-10T13:28:40.1256430Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1256510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1256620Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1256670Z     ???
2025-01-10T13:28:40.1256750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1256750Z 
2025-01-10T13:28:40.1256800Z >   ???
2025-01-10T13:28:40.1256890Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1257150Z E   
2025-01-10T13:28:40.1257250Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1257330Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1257380Z E          ...
2025-01-10T13:28:40.1257440Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1257540Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1257620Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1257660Z E          ...
2025-01-10T13:28:40.1257730Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1257820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1257900Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1257900Z 
2025-01-10T13:28:40.1257960Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1258170Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev] _
2025-01-10T13:28:40.1258180Z 
2025-01-10T13:28:40.1258280Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1258380Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1258450Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1258560Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1258650Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1258730Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1258780Z err_msg = None
2025-01-10T13:28:40.1258780Z 
2025-01-10T13:28:40.1258850Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1258910Z         if err_msg is None:
2025-01-10T13:28:40.1258980Z             if left.shape != right.shape:
2025-01-10T13:28:40.1259040Z                 raise_assert_detail(
2025-01-10T13:28:40.1259140Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1259200Z                 )
2025-01-10T13:28:40.1259240Z     
2025-01-10T13:28:40.1259280Z             diff = 0
2025-01-10T13:28:40.1259370Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1259420Z                 # count up differences
2025-01-10T13:28:40.1259560Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1259610Z                     diff += 1
2025-01-10T13:28:40.1259650Z     
2025-01-10T13:28:40.1259710Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1259820Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1259950Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1260030Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1260430Z E           
2025-01-10T13:28:40.1260530Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1260730Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1260940Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1260940Z 
2025-01-10T13:28:40.1261170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1261180Z 
2025-01-10T13:28:40.1261310Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1261410Z 
2025-01-10T13:28:40.1261620Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440da810>
2025-01-10T13:28:40.1261750Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>
2025-01-10T13:28:40.1261800Z attr = 'beta_sobolev'
2025-01-10T13:28:40.1261800Z 
2025-01-10T13:28:40.1261900Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1261990Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1262040Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1262100Z         try:
2025-01-10T13:28:40.1262220Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1262270Z         except KeyError:
2025-01-10T13:28:40.1262400Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1262450Z     
2025-01-10T13:28:40.1262510Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1262580Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1262650Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1262750Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1262830Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1262890Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1262980Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1263020Z             else:
2025-01-10T13:28:40.1263090Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1263170Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1263170Z 
2025-01-10T13:28:40.1263260Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1263350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1263460Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1263500Z     ???
2025-01-10T13:28:40.1263600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1263600Z 
2025-01-10T13:28:40.1263640Z >   ???
2025-01-10T13:28:40.1263740Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1263790Z E   
2025-01-10T13:28:40.1263880Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1263960Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1264010Z E          ...
2025-01-10T13:28:40.1264070Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1264170Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1264250Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1264300Z E          ...
2025-01-10T13:28:40.1264360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1264450Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1264620Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1264620Z 
2025-01-10T13:28:40.1264690Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1264880Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues] _
2025-01-10T13:28:40.1264890Z 
2025-01-10T13:28:40.1264990Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1265090Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1265150Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1265260Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1265350Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1265430Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1265470Z err_msg = None
2025-01-10T13:28:40.1265480Z 
2025-01-10T13:28:40.1265560Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1265690Z         if err_msg is None:
2025-01-10T13:28:40.1265760Z             if left.shape != right.shape:
2025-01-10T13:28:40.1265820Z                 raise_assert_detail(
2025-01-10T13:28:40.1265930Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1265970Z                 )
2025-01-10T13:28:40.1266010Z     
2025-01-10T13:28:40.1266060Z             diff = 0
2025-01-10T13:28:40.1266140Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1266200Z                 # count up differences
2025-01-10T13:28:40.1266330Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1266390Z                     diff += 1
2025-01-10T13:28:40.1266430Z     
2025-01-10T13:28:40.1266500Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1266600Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1266740Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1266820Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1266870Z E           
2025-01-10T13:28:40.1266950Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1267150Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1267360Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1267370Z 
2025-01-10T13:28:40.1267600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1267600Z 
2025-01-10T13:28:40.1267740Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1267740Z 
2025-01-10T13:28:40.1267900Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440da990>
2025-01-10T13:28:40.1268060Z plasma = <tardis.plasma.base.BasePlasma object at 0x164ba4380>, attr = 'j_blues'
2025-01-10T13:28:40.1268060Z 
2025-01-10T13:28:40.1268170Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1268250Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1268310Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1268350Z         try:
2025-01-10T13:28:40.1268460Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1268560Z         except KeyError:
2025-01-10T13:28:40.1268670Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1268720Z     
2025-01-10T13:28:40.1268770Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1268840Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1268900Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1269010Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1269060Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1269130Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1269210Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1269250Z             else:
2025-01-10T13:28:40.1269320Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1269400Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1269400Z 
2025-01-10T13:28:40.1269500Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1269590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1269750Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1269790Z     ???
2025-01-10T13:28:40.1269880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1269880Z 
2025-01-10T13:28:40.1269930Z >   ???
2025-01-10T13:28:40.1270020Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1270070Z E   
2025-01-10T13:28:40.1270160Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1270250Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1270290Z E          ...
2025-01-10T13:28:40.1270360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1270450Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1270540Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1270580Z E          ...
2025-01-10T13:28:40.1270650Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1270740Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1270820Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1270820Z 
2025-01-10T13:28:40.1270880Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1271040Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines] ____
2025-01-10T13:28:40.1271050Z 
2025-01-10T13:28:40.1271140Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1271240Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1271320Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1271420Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1271520Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1271590Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1271650Z err_msg = None
2025-01-10T13:28:40.1271650Z 
2025-01-10T13:28:40.1271720Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1271780Z         if err_msg is None:
2025-01-10T13:28:40.1271850Z             if left.shape != right.shape:
2025-01-10T13:28:40.1271900Z                 raise_assert_detail(
2025-01-10T13:28:40.1272010Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1272050Z                 )
2025-01-10T13:28:40.1272100Z     
2025-01-10T13:28:40.1272140Z             diff = 0
2025-01-10T13:28:40.1272230Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1272290Z                 # count up differences
2025-01-10T13:28:40.1272420Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1272510Z                     diff += 1
2025-01-10T13:28:40.1272560Z     
2025-01-10T13:28:40.1272630Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1272730Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1272860Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1272940Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1272990Z E           
2025-01-10T13:28:40.1273080Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1273280Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1273480Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1273690Z 
2025-01-10T13:28:40.1273940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1273940Z 
2025-01-10T13:28:40.1274070Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1274070Z 
2025-01-10T13:28:40.1274240Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440db710>
2025-01-10T13:28:40.1274390Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>, attr = 'lines'
2025-01-10T13:28:40.1274390Z 
2025-01-10T13:28:40.1274500Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1274580Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1274640Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1274690Z         try:
2025-01-10T13:28:40.1274800Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1274860Z         except KeyError:
2025-01-10T13:28:40.1274960Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1275000Z     
2025-01-10T13:28:40.1275060Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1275130Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1275190Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1275290Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1275350Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1275410Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1275490Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1275540Z             else:
2025-01-10T13:28:40.1275610Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1275690Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1275700Z 
2025-01-10T13:28:40.1275790Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1275880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1275990Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1276040Z     ???
2025-01-10T13:28:40.1276120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1276130Z 
2025-01-10T13:28:40.1276170Z >   ???
2025-01-10T13:28:40.1276270Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1276310Z E   
2025-01-10T13:28:40.1276410Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1276490Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1276540Z E          ...
2025-01-10T13:28:40.1276610Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1276920Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1277010Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1277060Z E          ...
2025-01-10T13:28:40.1277120Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1277220Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1277290Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1277290Z 
2025-01-10T13:28:40.1277350Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1277550Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index] _
2025-01-10T13:28:40.1277560Z 
2025-01-10T13:28:40.1277750Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440db7d0>
2025-01-10T13:28:40.1277920Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>
2025-01-10T13:28:40.1278190Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.1278190Z 
2025-01-10T13:28:40.1278330Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1279420Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1279640Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1279980Z         try:
2025-01-10T13:28:40.1280130Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1280310Z         except KeyError:
2025-01-10T13:28:40.1280620Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1280680Z     
2025-01-10T13:28:40.1280820Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1281110Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1281470Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1283370Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1283680Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1285040Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1286770Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1286860Z 
2025-01-10T13:28:40.1287210Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1287870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1287880Z 
2025-01-10T13:28:40.1288120Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1288490Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1288650Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1288970Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1289420Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1290060Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1290260Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1290460Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1291170Z err_msg = None
2025-01-10T13:28:40.1291200Z 
2025-01-10T13:28:40.1315480Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1316130Z         if err_msg is None:
2025-01-10T13:28:40.1316370Z             if left.shape != right.shape:
2025-01-10T13:28:40.1316560Z                 raise_assert_detail(
2025-01-10T13:28:40.1316890Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1317050Z                 )
2025-01-10T13:28:40.1317190Z     
2025-01-10T13:28:40.1317330Z             diff = 0
2025-01-10T13:28:40.1317590Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1317790Z                 # count up differences
2025-01-10T13:28:40.1318240Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1318440Z                     diff += 1
2025-01-10T13:28:40.1318600Z     
2025-01-10T13:28:40.1318800Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1320100Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1320570Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1320840Z E           AssertionError: Series are different
2025-01-10T13:28:40.1321010Z E           
2025-01-10T13:28:40.1321280Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.1322220Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1323030Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1324260Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1324290Z 
2025-01-10T13:28:40.1325010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1325670Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index] _
2025-01-10T13:28:40.1325690Z 
2025-01-10T13:28:40.1326220Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440db890>
2025-01-10T13:28:40.1326650Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>
2025-01-10T13:28:40.1326880Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.1326900Z 
2025-01-10T13:28:40.1327260Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1327560Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1327790Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1327970Z         try:
2025-01-10T13:28:40.1328300Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1328550Z         except KeyError:
2025-01-10T13:28:40.1328920Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1329100Z     
2025-01-10T13:28:40.1329340Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1329610Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1329840Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1330250Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1330520Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1330750Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1331000Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1331010Z 
2025-01-10T13:28:40.1331310Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1331590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1331610Z 
2025-01-10T13:28:40.1331950Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1332200Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1332430Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1332640Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1332930Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1333640Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1333930Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1334100Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1334300Z err_msg = None
2025-01-10T13:28:40.1334310Z 
2025-01-10T13:28:40.1334570Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1334770Z         if err_msg is None:
2025-01-10T13:28:40.1335020Z             if left.shape != right.shape:
2025-01-10T13:28:40.1335220Z                 raise_assert_detail(
2025-01-10T13:28:40.1335820Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1336020Z                 )
2025-01-10T13:28:40.1336210Z     
2025-01-10T13:28:40.1336410Z             diff = 0
2025-01-10T13:28:40.1336680Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1336910Z                 # count up differences
2025-01-10T13:28:40.1337330Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1337960Z                     diff += 1
2025-01-10T13:28:40.1338110Z     
2025-01-10T13:28:40.1338320Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1338650Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1339070Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1339360Z E           AssertionError: Series are different
2025-01-10T13:28:40.1339520Z E           
2025-01-10T13:28:40.1339760Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.1340750Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1341710Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1342680Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1342710Z 
2025-01-10T13:28:40.1343440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1343950Z _____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-nu] ______
2025-01-10T13:28:40.1343980Z 
2025-01-10T13:28:40.1344330Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1344650Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1344900Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1345230Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1345530Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1345790Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1345980Z err_msg = None
2025-01-10T13:28:40.1346000Z 
2025-01-10T13:28:40.1346270Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1346820Z         if err_msg is None:
2025-01-10T13:28:40.1347100Z             if left.shape != right.shape:
2025-01-10T13:28:40.1347290Z                 raise_assert_detail(
2025-01-10T13:28:40.1347630Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1347810Z                 )
2025-01-10T13:28:40.1348000Z     
2025-01-10T13:28:40.1348170Z             diff = 0
2025-01-10T13:28:40.1348380Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1348550Z                 # count up differences
2025-01-10T13:28:40.1348920Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1349090Z                     diff += 1
2025-01-10T13:28:40.1349230Z     
2025-01-10T13:28:40.1349450Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1349760Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1350190Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1351550Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1351740Z E           
2025-01-10T13:28:40.1351970Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1352600Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1353180Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1353200Z 
2025-01-10T13:28:40.1353940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1353960Z 
2025-01-10T13:28:40.1354340Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1354360Z 
2025-01-10T13:28:40.1354840Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440dbad0>
2025-01-10T13:28:40.1355270Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>, attr = 'nu'
2025-01-10T13:28:40.1355290Z 
2025-01-10T13:28:40.1355600Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1356470Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1356670Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1356730Z         try:
2025-01-10T13:28:40.1356870Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1356960Z         except KeyError:
2025-01-10T13:28:40.1357120Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1357190Z     
2025-01-10T13:28:40.1357270Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1357350Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1357440Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1357590Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1357660Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1357720Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1357810Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1357810Z 
2025-01-10T13:28:40.1357930Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1358050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1358200Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1358260Z     ???
2025-01-10T13:28:40.1358370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1358970Z 
2025-01-10T13:28:40.1359030Z >   ???
2025-01-10T13:28:40.1359150Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1359210Z E   
2025-01-10T13:28:40.1359330Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1359420Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1359470Z E          ...
2025-01-10T13:28:40.1359550Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1359710Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1359810Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1359860Z E          ...
2025-01-10T13:28:40.1359930Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1360050Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1360130Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1360140Z 
2025-01-10T13:28:40.1360410Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1360620Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-wavelength_cm] _
2025-01-10T13:28:40.1360630Z 
2025-01-10T13:28:40.1360760Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1360890Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1360980Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1361130Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1361240Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1361310Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1361390Z err_msg = None
2025-01-10T13:28:40.1361410Z 
2025-01-10T13:28:40.1361530Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1361600Z         if err_msg is None:
2025-01-10T13:28:40.1361680Z             if left.shape != right.shape:
2025-01-10T13:28:40.1361750Z                 raise_assert_detail(
2025-01-10T13:28:40.1361910Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1361960Z                 )
2025-01-10T13:28:40.1362010Z     
2025-01-10T13:28:40.1362060Z             diff = 0
2025-01-10T13:28:40.1362160Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1362250Z                 # count up differences
2025-01-10T13:28:40.1362390Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1362470Z                     diff += 1
2025-01-10T13:28:40.1362540Z     
2025-01-10T13:28:40.1362620Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1362740Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1362900Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1363030Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1363080Z E           
2025-01-10T13:28:40.1363170Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1363390Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1363620Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1363750Z 
2025-01-10T13:28:40.1364050Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1364060Z 
2025-01-10T13:28:40.1364240Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1364260Z 
2025-01-10T13:28:40.1364440Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440dbb90>
2025-01-10T13:28:40.1364560Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>
2025-01-10T13:28:40.1364620Z attr = 'wavelength_cm'
2025-01-10T13:28:40.1364620Z 
2025-01-10T13:28:40.1364750Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1364840Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1364910Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1364970Z         try:
2025-01-10T13:28:40.1365100Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1365160Z         except KeyError:
2025-01-10T13:28:40.1365270Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1365460Z     
2025-01-10T13:28:40.1365530Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1365620Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1365690Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1365840Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1365930Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1366040Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1366150Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1366160Z 
2025-01-10T13:28:40.1366270Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1366360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1366470Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1366560Z     ???
2025-01-10T13:28:40.1366690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1366700Z 
2025-01-10T13:28:40.1366750Z >   ???
2025-01-10T13:28:40.1366870Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1366940Z E   
2025-01-10T13:28:40.1367090Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1367180Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1367230Z E          ...
2025-01-10T13:28:40.1367320Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1367470Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1367600Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1367680Z E          ...
2025-01-10T13:28:40.1367760Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1367900Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1368020Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1368040Z 
2025-01-10T13:28:40.1368140Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1368360Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-f_lu] _____
2025-01-10T13:28:40.1368360Z 
2025-01-10T13:28:40.1368480Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1368590Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1368700Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1368850Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1369010Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1369130Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1369210Z err_msg = None
2025-01-10T13:28:40.1369220Z 
2025-01-10T13:28:40.1369780Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1369880Z         if err_msg is None:
2025-01-10T13:28:40.1369960Z             if left.shape != right.shape:
2025-01-10T13:28:40.1370020Z                 raise_assert_detail(
2025-01-10T13:28:40.1370170Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1370230Z                 )
2025-01-10T13:28:40.1370280Z     
2025-01-10T13:28:40.1370330Z             diff = 0
2025-01-10T13:28:40.1370450Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1370550Z                 # count up differences
2025-01-10T13:28:40.1370720Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1370780Z                     diff += 1
2025-01-10T13:28:40.1370840Z     
2025-01-10T13:28:40.1370940Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1371100Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1371250Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1371540Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1371600Z E           
2025-01-10T13:28:40.1371690Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1371980Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1372290Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1372300Z 
2025-01-10T13:28:40.1372610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1372620Z 
2025-01-10T13:28:40.1372790Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1372800Z 
2025-01-10T13:28:40.1373010Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1440dbc50>
2025-01-10T13:28:40.1373180Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>, attr = 'f_lu'
2025-01-10T13:28:40.1373180Z 
2025-01-10T13:28:40.1373340Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1373440Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1373490Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1373560Z         try:
2025-01-10T13:28:40.1373730Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1373800Z         except KeyError:
2025-01-10T13:28:40.1373910Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1373960Z     
2025-01-10T13:28:40.1374040Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1374110Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1374170Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1374300Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1374400Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1374480Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1374610Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1374610Z 
2025-01-10T13:28:40.1374720Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1374810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1374920Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1374970Z     ???
2025-01-10T13:28:40.1375110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1375210Z 
2025-01-10T13:28:40.1375270Z >   ???
2025-01-10T13:28:40.1375370Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1375430Z E   
2025-01-10T13:28:40.1375650Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1375780Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1375840Z E          ...
2025-01-10T13:28:40.1375910Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1376030Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1376150Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1376210Z E          ...
2025-01-10T13:28:40.1376270Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1376380Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1376490Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1376510Z 
2025-01-10T13:28:40.1377580Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1377770Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs] _
2025-01-10T13:28:40.1377780Z 
2025-01-10T13:28:40.1377900Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1378030Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1378110Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1378250Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1378400Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1378510Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1378590Z err_msg = None
2025-01-10T13:28:40.1378590Z 
2025-01-10T13:28:40.1378680Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1378770Z         if err_msg is None:
2025-01-10T13:28:40.1378860Z             if left.shape != right.shape:
2025-01-10T13:28:40.1378960Z                 raise_assert_detail(
2025-01-10T13:28:40.1379080Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1379130Z                 )
2025-01-10T13:28:40.1379190Z     
2025-01-10T13:28:40.1379260Z             diff = 0
2025-01-10T13:28:40.1379380Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1379490Z                 # count up differences
2025-01-10T13:28:40.1379650Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1379720Z                     diff += 1
2025-01-10T13:28:40.1379770Z     
2025-01-10T13:28:40.1379840Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1379980Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1380150Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1380240Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1380310Z E           
2025-01-10T13:28:40.1380440Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1380700Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1380950Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1381450Z 
2025-01-10T13:28:40.1381760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1381780Z 
2025-01-10T13:28:40.1381960Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1381980Z 
2025-01-10T13:28:40.1382180Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144200410>
2025-01-10T13:28:40.1382330Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>
2025-01-10T13:28:40.1382420Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.1382420Z 
2025-01-10T13:28:40.1382530Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1382620Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1382700Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1382770Z         try:
2025-01-10T13:28:40.1382940Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1383020Z         except KeyError:
2025-01-10T13:28:40.1383150Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1383350Z     
2025-01-10T13:28:40.1383450Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1383550Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1383670Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1383810Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1383880Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1383940Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1384050Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1384130Z             else:
2025-01-10T13:28:40.1384240Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1384360Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1384360Z 
2025-01-10T13:28:40.1384460Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1384580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1384770Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1384840Z     ???
2025-01-10T13:28:40.1384920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1384930Z 
2025-01-10T13:28:40.1384990Z >   ???
2025-01-10T13:28:40.1385130Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1385210Z E   
2025-01-10T13:28:40.1385350Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1385440Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1385490Z E          ...
2025-01-10T13:28:40.1385580Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1385720Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1385860Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1385930Z E          ...
2025-01-10T13:28:40.1386030Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1386170Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1386290Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1386300Z 
2025-01-10T13:28:40.1386400Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1386620Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-beta_sobolev] _
2025-01-10T13:28:40.1386630Z 
2025-01-10T13:28:40.1386770Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1386920Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1387040Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1387200Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1387350Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1387540Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1387610Z err_msg = None
2025-01-10T13:28:40.1387620Z 
2025-01-10T13:28:40.1387740Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1387840Z         if err_msg is None:
2025-01-10T13:28:40.1387920Z             if left.shape != right.shape:
2025-01-10T13:28:40.1387980Z                 raise_assert_detail(
2025-01-10T13:28:40.1388110Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1388180Z                 )
2025-01-10T13:28:40.1388260Z     
2025-01-10T13:28:40.1388310Z             diff = 0
2025-01-10T13:28:40.1388390Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1388470Z                 # count up differences
2025-01-10T13:28:40.1388660Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1388760Z                     diff += 1
2025-01-10T13:28:40.1388850Z     
2025-01-10T13:28:40.1389070Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1389200Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1389370Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1389470Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1389520Z E           
2025-01-10T13:28:40.1389630Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1389870Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1390160Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1390190Z 
2025-01-10T13:28:40.1390490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1390500Z 
2025-01-10T13:28:40.1390660Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1390660Z 
2025-01-10T13:28:40.1390830Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442004d0>
2025-01-10T13:28:40.1390950Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>
2025-01-10T13:28:40.1391000Z attr = 'beta_sobolev'
2025-01-10T13:28:40.1391000Z 
2025-01-10T13:28:40.1391110Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1391190Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1391260Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1391320Z         try:
2025-01-10T13:28:40.1391490Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1391580Z         except KeyError:
2025-01-10T13:28:40.1391760Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1391830Z     
2025-01-10T13:28:40.1391920Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1391990Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1392070Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1392200Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1392270Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1392330Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1392450Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1392510Z             else:
2025-01-10T13:28:40.1392580Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1392790Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1392810Z 
2025-01-10T13:28:40.1392940Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1393070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1393190Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1393250Z     ???
2025-01-10T13:28:40.1393370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1393380Z 
2025-01-10T13:28:40.1393430Z >   ???
2025-01-10T13:28:40.1393520Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1393600Z E   
2025-01-10T13:28:40.1393720Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1393810Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1393880Z E          ...
2025-01-10T13:28:40.1393990Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1394100Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1394330Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1394400Z E          ...
2025-01-10T13:28:40.1394500Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1394610Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1394710Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1394710Z 
2025-01-10T13:28:40.1394810Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1395000Z ___ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-j_blues] ___
2025-01-10T13:28:40.1395020Z 
2025-01-10T13:28:40.1395120Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1395250Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1395360Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1395510Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1395670Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1395770Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1395870Z err_msg = None
2025-01-10T13:28:40.1395880Z 
2025-01-10T13:28:40.1396000Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1396090Z         if err_msg is None:
2025-01-10T13:28:40.1396170Z             if left.shape != right.shape:
2025-01-10T13:28:40.1396230Z                 raise_assert_detail(
2025-01-10T13:28:40.1396370Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1396440Z                 )
2025-01-10T13:28:40.1396520Z     
2025-01-10T13:28:40.1396610Z             diff = 0
2025-01-10T13:28:40.1396740Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1396850Z                 # count up differences
2025-01-10T13:28:40.1397000Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1397050Z                     diff += 1
2025-01-10T13:28:40.1397110Z     
2025-01-10T13:28:40.1397210Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1397360Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1397550Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1397660Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1397740Z E           
2025-01-10T13:28:40.1397850Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1398130Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1398570Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1398600Z 
2025-01-10T13:28:40.1398850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1398860Z 
2025-01-10T13:28:40.1399040Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1399040Z 
2025-01-10T13:28:40.1399280Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144200650>
2025-01-10T13:28:40.1399460Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210b3d40>, attr = 'j_blues'
2025-01-10T13:28:40.1399470Z 
2025-01-10T13:28:40.1399610Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1400670Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1400780Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1400850Z         try:
2025-01-10T13:28:40.1400980Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1401050Z         except KeyError:
2025-01-10T13:28:40.1401170Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1401230Z     
2025-01-10T13:28:40.1401320Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1401410Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1401510Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1401660Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1401750Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1401830Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1401960Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1402040Z             else:
2025-01-10T13:28:40.1402130Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1402250Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1402260Z 
2025-01-10T13:28:40.1402390Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1402500Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1402670Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1402740Z     ???
2025-01-10T13:28:40.1402880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1402890Z 
2025-01-10T13:28:40.1402960Z >   ???
2025-01-10T13:28:40.1403110Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1403180Z E   
2025-01-10T13:28:40.1403330Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1403450Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1403530Z E          ...
2025-01-10T13:28:40.1403630Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1403760Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1403890Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1403960Z E          ...
2025-01-10T13:28:40.1404050Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1404160Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1404270Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1404280Z 
2025-01-10T13:28:40.1404370Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1404570Z ___ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines] ____
2025-01-10T13:28:40.1404580Z 
2025-01-10T13:28:40.1404690Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1405600Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1405680Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1405780Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1405880Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1405950Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1406000Z err_msg = None
2025-01-10T13:28:40.1406000Z 
2025-01-10T13:28:40.1406080Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1406140Z         if err_msg is None:
2025-01-10T13:28:40.1406220Z             if left.shape != right.shape:
2025-01-10T13:28:40.1406320Z                 raise_assert_detail(
2025-01-10T13:28:40.1406440Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1406490Z                 )
2025-01-10T13:28:40.1406540Z     
2025-01-10T13:28:40.1406760Z             diff = 0
2025-01-10T13:28:40.1406890Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1406960Z                 # count up differences
2025-01-10T13:28:40.1407100Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1407180Z                     diff += 1
2025-01-10T13:28:40.1407250Z     
2025-01-10T13:28:40.1407330Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1407450Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1407640Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1407750Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1407800Z E           
2025-01-10T13:28:40.1407890Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1408120Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1408360Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1408360Z 
2025-01-10T13:28:40.1408630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1408640Z 
2025-01-10T13:28:40.1409930Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1409940Z 
2025-01-10T13:28:40.1410150Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442013d0>
2025-01-10T13:28:40.1410340Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>, attr = 'lines'
2025-01-10T13:28:40.1410340Z 
2025-01-10T13:28:40.1410460Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1410550Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1410610Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1410690Z         try:
2025-01-10T13:28:40.1410820Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1414220Z         except KeyError:
2025-01-10T13:28:40.1414420Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1414600Z     
2025-01-10T13:28:40.1415170Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1415420Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1415490Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1416090Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1416490Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1416570Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1416770Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1437970Z             else:
2025-01-10T13:28:40.1438220Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1438330Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1438350Z 
2025-01-10T13:28:40.1438460Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1438550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1438700Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1438760Z     ???
2025-01-10T13:28:40.1438880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1438890Z 
2025-01-10T13:28:40.1438950Z >   ???
2025-01-10T13:28:40.1439070Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1439680Z E   
2025-01-10T13:28:40.1439830Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1439950Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1440050Z E          ...
2025-01-10T13:28:40.1440150Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1440260Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1440370Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1440440Z E          ...
2025-01-10T13:28:40.1440570Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1440710Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1440820Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1440830Z 
2025-01-10T13:28:40.1440920Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1441200Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index] _
2025-01-10T13:28:40.1441220Z 
2025-01-10T13:28:40.1441450Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144201490>
2025-01-10T13:28:40.1441590Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>
2025-01-10T13:28:40.1441690Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.1441690Z 
2025-01-10T13:28:40.1441810Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1441910Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1441990Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1442050Z         try:
2025-01-10T13:28:40.1442190Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1442250Z         except KeyError:
2025-01-10T13:28:40.1442390Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1442470Z     
2025-01-10T13:28:40.1442560Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1442680Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1442770Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1442910Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1443000Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1443100Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1443210Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1443230Z 
2025-01-10T13:28:40.1443360Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1443480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1443490Z 
2025-01-10T13:28:40.1443640Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1443720Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1443840Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1443940Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1446840Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1447270Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1447560Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1447800Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1448010Z err_msg = None
2025-01-10T13:28:40.1448040Z 
2025-01-10T13:28:40.1448300Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1448490Z         if err_msg is None:
2025-01-10T13:28:40.1448710Z             if left.shape != right.shape:
2025-01-10T13:28:40.1448910Z                 raise_assert_detail(
2025-01-10T13:28:40.1449330Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1449530Z                 )
2025-01-10T13:28:40.1449740Z     
2025-01-10T13:28:40.1449900Z             diff = 0
2025-01-10T13:28:40.1450150Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1469290Z                 # count up differences
2025-01-10T13:28:40.1469760Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1469960Z                     diff += 1
2025-01-10T13:28:40.1470110Z     
2025-01-10T13:28:40.1470300Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1470630Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1471100Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1471430Z E           AssertionError: Series are different
2025-01-10T13:28:40.1471660Z E           
2025-01-10T13:28:40.1471890Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.1472720Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1473480Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1474220Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1474240Z 
2025-01-10T13:28:40.1474910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1475790Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index] _
2025-01-10T13:28:40.1475840Z 
2025-01-10T13:28:40.1476050Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144201550>
2025-01-10T13:28:40.1476170Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>
2025-01-10T13:28:40.1476250Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.1476250Z 
2025-01-10T13:28:40.1476350Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1476440Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1476500Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1476540Z         try:
2025-01-10T13:28:40.1476660Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1476710Z         except KeyError:
2025-01-10T13:28:40.1477120Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1477180Z     
2025-01-10T13:28:40.1477240Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1477300Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1477360Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1477470Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1477530Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1477590Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1477680Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1477680Z 
2025-01-10T13:28:40.1477770Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1477860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1477870Z 
2025-01-10T13:28:40.1477970Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1478040Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1478450Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1478510Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1478620Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1478680Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1478770Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1478820Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1478870Z err_msg = None
2025-01-10T13:28:40.1478870Z 
2025-01-10T13:28:40.1478960Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1479010Z         if err_msg is None:
2025-01-10T13:28:40.1479090Z             if left.shape != right.shape:
2025-01-10T13:28:40.1479150Z                 raise_assert_detail(
2025-01-10T13:28:40.1479260Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1479310Z                 )
2025-01-10T13:28:40.1479360Z     
2025-01-10T13:28:40.1479430Z             diff = 0
2025-01-10T13:28:40.1479510Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1479570Z                 # count up differences
2025-01-10T13:28:40.1479710Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1479760Z                     diff += 1
2025-01-10T13:28:40.1479810Z     
2025-01-10T13:28:40.1479870Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1479980Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1480110Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1480190Z E           AssertionError: Series are different
2025-01-10T13:28:40.1480240Z E           
2025-01-10T13:28:40.1480320Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.1480630Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1480940Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1481240Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1481450Z 
2025-01-10T13:28:40.1481710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1481880Z _____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-nu] _____
2025-01-10T13:28:40.1481880Z 
2025-01-10T13:28:40.1481990Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1482100Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1482170Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1482270Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1482430Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1482510Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1482550Z err_msg = None
2025-01-10T13:28:40.1482560Z 
2025-01-10T13:28:40.1482640Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1482690Z         if err_msg is None:
2025-01-10T13:28:40.1482760Z             if left.shape != right.shape:
2025-01-10T13:28:40.1482820Z                 raise_assert_detail(
2025-01-10T13:28:40.1482930Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1482970Z                 )
2025-01-10T13:28:40.1483020Z     
2025-01-10T13:28:40.1483060Z             diff = 0
2025-01-10T13:28:40.1483140Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1483200Z                 # count up differences
2025-01-10T13:28:40.1483340Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1483390Z                     diff += 1
2025-01-10T13:28:40.1483440Z     
2025-01-10T13:28:40.1483500Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1483610Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1483750Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1483830Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1483880Z E           
2025-01-10T13:28:40.1483960Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1484160Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1484380Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1484380Z 
2025-01-10T13:28:40.1484620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1484620Z 
2025-01-10T13:28:40.1484750Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1484750Z 
2025-01-10T13:28:40.1484920Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144201790>
2025-01-10T13:28:40.1485060Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>, attr = 'nu'
2025-01-10T13:28:40.1485070Z 
2025-01-10T13:28:40.1485170Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1485310Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1485360Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1485410Z         try:
2025-01-10T13:28:40.1485520Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1485570Z         except KeyError:
2025-01-10T13:28:40.1485680Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1485720Z     
2025-01-10T13:28:40.1485780Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1485850Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1485910Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1486010Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1486070Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1486130Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1486210Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1486220Z 
2025-01-10T13:28:40.1486360Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1486450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1486560Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1486610Z     ???
2025-01-10T13:28:40.1486700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1486700Z 
2025-01-10T13:28:40.1486740Z >   ???
2025-01-10T13:28:40.1486840Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1486880Z E   
2025-01-10T13:28:40.1486980Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1487070Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1487110Z E          ...
2025-01-10T13:28:40.1487180Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1487280Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1487370Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1487420Z E          ...
2025-01-10T13:28:40.1487480Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1487580Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1487650Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1487650Z 
2025-01-10T13:28:40.1487710Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1487890Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm] _
2025-01-10T13:28:40.1487890Z 
2025-01-10T13:28:40.1488000Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1488100Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1488170Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1488270Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1488370Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1488450Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1488500Z err_msg = None
2025-01-10T13:28:40.1488500Z 
2025-01-10T13:28:40.1488580Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1488630Z         if err_msg is None:
2025-01-10T13:28:40.1488700Z             if left.shape != right.shape:
2025-01-10T13:28:40.1488760Z                 raise_assert_detail(
2025-01-10T13:28:40.1488870Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1488910Z                 )
2025-01-10T13:28:40.1488960Z     
2025-01-10T13:28:40.1489000Z             diff = 0
2025-01-10T13:28:40.1489080Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1489150Z                 # count up differences
2025-01-10T13:28:40.1489330Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1489390Z                     diff += 1
2025-01-10T13:28:40.1489440Z     
2025-01-10T13:28:40.1489500Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1489610Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1489740Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1489820Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1489870Z E           
2025-01-10T13:28:40.1489950Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1490150Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1490410Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1490410Z 
2025-01-10T13:28:40.1490650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1490650Z 
2025-01-10T13:28:40.1490770Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1490780Z 
2025-01-10T13:28:40.1490950Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144201850>
2025-01-10T13:28:40.1491070Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>
2025-01-10T13:28:40.1491120Z attr = 'wavelength_cm'
2025-01-10T13:28:40.1491120Z 
2025-01-10T13:28:40.1491230Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1491320Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1491380Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1491420Z         try:
2025-01-10T13:28:40.1491530Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1491590Z         except KeyError:
2025-01-10T13:28:40.1491690Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1491730Z     
2025-01-10T13:28:40.1491790Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1491860Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1491920Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1492020Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1492080Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1492140Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1492230Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1492240Z 
2025-01-10T13:28:40.1492320Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1492410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1492530Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1492570Z     ???
2025-01-10T13:28:40.1492650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1492660Z 
2025-01-10T13:28:40.1492700Z >   ???
2025-01-10T13:28:40.1492790Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1492840Z E   
2025-01-10T13:28:40.1492930Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1493010Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1493060Z E          ...
2025-01-10T13:28:40.1493120Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1493220Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1493350Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1493400Z E          ...
2025-01-10T13:28:40.1493460Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1493550Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1493630Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1493630Z 
2025-01-10T13:28:40.1493700Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1493870Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-f_lu] ____
2025-01-10T13:28:40.1493870Z 
2025-01-10T13:28:40.1493970Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1494080Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1494150Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1494250Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1494570Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1494650Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1494700Z err_msg = None
2025-01-10T13:28:40.1494700Z 
2025-01-10T13:28:40.1494780Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1494830Z         if err_msg is None:
2025-01-10T13:28:40.1494900Z             if left.shape != right.shape:
2025-01-10T13:28:40.1494960Z                 raise_assert_detail(
2025-01-10T13:28:40.1495070Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1495120Z                 )
2025-01-10T13:28:40.1495160Z     
2025-01-10T13:28:40.1495210Z             diff = 0
2025-01-10T13:28:40.1495290Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1495350Z                 # count up differences
2025-01-10T13:28:40.1495480Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1495540Z                     diff += 1
2025-01-10T13:28:40.1495590Z     
2025-01-10T13:28:40.1495650Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1495760Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1495890Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1495970Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1496020Z E           
2025-01-10T13:28:40.1496110Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1496300Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1496520Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1496520Z 
2025-01-10T13:28:40.1496750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1496750Z 
2025-01-10T13:28:40.1496880Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1496880Z 
2025-01-10T13:28:40.1497050Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144201910>
2025-01-10T13:28:40.1497290Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>, attr = 'f_lu'
2025-01-10T13:28:40.1497300Z 
2025-01-10T13:28:40.1497400Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1497790Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1497860Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1497900Z         try:
2025-01-10T13:28:40.1498010Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1498070Z         except KeyError:
2025-01-10T13:28:40.1498180Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1498220Z     
2025-01-10T13:28:40.1498280Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1498350Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1498410Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1498520Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1498580Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1498640Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1498720Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1498730Z 
2025-01-10T13:28:40.1498910Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1499000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1499110Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1499150Z     ???
2025-01-10T13:28:40.1499240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1499240Z 
2025-01-10T13:28:40.1499290Z >   ???
2025-01-10T13:28:40.1499380Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1499430Z E   
2025-01-10T13:28:40.1499530Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1499610Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1499660Z E          ...
2025-01-10T13:28:40.1499720Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1499820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1499900Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1499950Z E          ...
2025-01-10T13:28:40.1500020Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1500110Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1500190Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1500190Z 
2025-01-10T13:28:40.1500250Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1500420Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs] _
2025-01-10T13:28:40.1500430Z 
2025-01-10T13:28:40.1500530Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1500630Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1500700Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1500800Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1500910Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1500980Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1501030Z err_msg = None
2025-01-10T13:28:40.1501030Z 
2025-01-10T13:28:40.1501110Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1501160Z         if err_msg is None:
2025-01-10T13:28:40.1501230Z             if left.shape != right.shape:
2025-01-10T13:28:40.1501290Z                 raise_assert_detail(
2025-01-10T13:28:40.1501400Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1501450Z                 )
2025-01-10T13:28:40.1501490Z     
2025-01-10T13:28:40.1501540Z             diff = 0
2025-01-10T13:28:40.1501620Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1501690Z                 # count up differences
2025-01-10T13:28:40.1501880Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1501940Z                     diff += 1
2025-01-10T13:28:40.1501990Z     
2025-01-10T13:28:40.1502050Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1502150Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1502290Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1502370Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1502420Z E           
2025-01-10T13:28:40.1502500Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1502700Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1502960Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1502970Z 
2025-01-10T13:28:40.1503210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1503210Z 
2025-01-10T13:28:40.1503330Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1503340Z 
2025-01-10T13:28:40.1503510Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144202090>
2025-01-10T13:28:40.1503630Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>
2025-01-10T13:28:40.1503680Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.1503680Z 
2025-01-10T13:28:40.1503790Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1503880Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1503940Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1503990Z         try:
2025-01-10T13:28:40.1504100Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1504150Z         except KeyError:
2025-01-10T13:28:40.1504250Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1504300Z     
2025-01-10T13:28:40.1504360Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1504430Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1504490Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1504590Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1504650Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1504710Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1504800Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1504850Z             else:
2025-01-10T13:28:40.1504920Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1505000Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1505000Z 
2025-01-10T13:28:40.1505090Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1505180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1505290Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1505340Z     ???
2025-01-10T13:28:40.1505420Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1505420Z 
2025-01-10T13:28:40.1505470Z >   ???
2025-01-10T13:28:40.1505560Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1505600Z E   
2025-01-10T13:28:40.1505700Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1505780Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1505890Z E          ...
2025-01-10T13:28:40.1505960Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1506060Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1506150Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1506190Z E          ...
2025-01-10T13:28:40.1506250Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1506350Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1506440Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1506440Z 
2025-01-10T13:28:40.1506500Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1506680Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev] _
2025-01-10T13:28:40.1506680Z 
2025-01-10T13:28:40.1506780Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1506880Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1507010Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1507110Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1507210Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1507280Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1507330Z err_msg = None
2025-01-10T13:28:40.1507330Z 
2025-01-10T13:28:40.1507410Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1507470Z         if err_msg is None:
2025-01-10T13:28:40.1507690Z             if left.shape != right.shape:
2025-01-10T13:28:40.1507750Z                 raise_assert_detail(
2025-01-10T13:28:40.1507860Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1507910Z                 )
2025-01-10T13:28:40.1507950Z     
2025-01-10T13:28:40.1508010Z             diff = 0
2025-01-10T13:28:40.1508090Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1508150Z                 # count up differences
2025-01-10T13:28:40.1508280Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1508340Z                     diff += 1
2025-01-10T13:28:40.1508380Z     
2025-01-10T13:28:40.1508440Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1508540Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1508680Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1508760Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1508810Z E           
2025-01-10T13:28:40.1508890Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1509090Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1509300Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1509300Z 
2025-01-10T13:28:40.1509540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1509540Z 
2025-01-10T13:28:40.1509670Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1509670Z 
2025-01-10T13:28:40.1509840Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144202150>
2025-01-10T13:28:40.1510040Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>
2025-01-10T13:28:40.1510100Z attr = 'beta_sobolev'
2025-01-10T13:28:40.1510100Z 
2025-01-10T13:28:40.1510200Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1510290Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1510350Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1510390Z         try:
2025-01-10T13:28:40.1510500Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1510550Z         except KeyError:
2025-01-10T13:28:40.1510660Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1510700Z     
2025-01-10T13:28:40.1510760Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1510830Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1510890Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1510990Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1511540Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1511610Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1511690Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1511740Z             else:
2025-01-10T13:28:40.1511810Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1511890Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1511900Z 
2025-01-10T13:28:40.1511980Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1512080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1512190Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1512240Z     ???
2025-01-10T13:28:40.1512330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1512330Z 
2025-01-10T13:28:40.1512370Z >   ???
2025-01-10T13:28:40.1512470Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1512520Z E   
2025-01-10T13:28:40.1512620Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1512700Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1512750Z E          ...
2025-01-10T13:28:40.1512810Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1512910Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1513000Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1513040Z E          ...
2025-01-10T13:28:40.1513100Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1513200Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1513270Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1513270Z 
2025-01-10T13:28:40.1513330Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1513490Z __ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-j_blues] ___
2025-01-10T13:28:40.1513500Z 
2025-01-10T13:28:40.1513600Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1513700Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1513770Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1513880Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1513970Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1514040Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1514090Z err_msg = None
2025-01-10T13:28:40.1514090Z 
2025-01-10T13:28:40.1514170Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1514230Z         if err_msg is None:
2025-01-10T13:28:40.1514290Z             if left.shape != right.shape:
2025-01-10T13:28:40.1514580Z                 raise_assert_detail(
2025-01-10T13:28:40.1514700Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1514750Z                 )
2025-01-10T13:28:40.1514790Z     
2025-01-10T13:28:40.1514840Z             diff = 0
2025-01-10T13:28:40.1514920Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1514980Z                 # count up differences
2025-01-10T13:28:40.1515110Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1515160Z                     diff += 1
2025-01-10T13:28:40.1515200Z     
2025-01-10T13:28:40.1515270Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1515370Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1515500Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1515580Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1515630Z E           
2025-01-10T13:28:40.1515760Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1515970Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1516170Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1516180Z 
2025-01-10T13:28:40.1516410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1516410Z 
2025-01-10T13:28:40.1516540Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1516540Z 
2025-01-10T13:28:40.1516710Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442022d0>
2025-01-10T13:28:40.1516860Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e4ab050>, attr = 'j_blues'
2025-01-10T13:28:40.1516870Z 
2025-01-10T13:28:40.1516970Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1517060Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1517110Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1517160Z         try:
2025-01-10T13:28:40.1517270Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1517320Z         except KeyError:
2025-01-10T13:28:40.1517420Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1517470Z     
2025-01-10T13:28:40.1517530Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1517590Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1517660Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1517760Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1517820Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1517880Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1517960Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1518010Z             else:
2025-01-10T13:28:40.1518070Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1518150Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1518160Z 
2025-01-10T13:28:40.1518250Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1518330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1518440Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1518490Z     ???
2025-01-10T13:28:40.1518630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1518630Z 
2025-01-10T13:28:40.1525760Z >   ???
2025-01-10T13:28:40.1525870Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1525920Z E   
2025-01-10T13:28:40.1526020Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1526100Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1526150Z E          ...
2025-01-10T13:28:40.1526210Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1526320Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1526400Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1526450Z E          ...
2025-01-10T13:28:40.1526510Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1526600Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1526680Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1526960Z 
2025-01-10T13:28:40.1527020Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1527210Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines] _
2025-01-10T13:28:40.1527210Z 
2025-01-10T13:28:40.1527310Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1527420Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1527490Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1527590Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1527690Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1527760Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1527820Z err_msg = None
2025-01-10T13:28:40.1527820Z 
2025-01-10T13:28:40.1527900Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1527960Z         if err_msg is None:
2025-01-10T13:28:40.1528030Z             if left.shape != right.shape:
2025-01-10T13:28:40.1528090Z                 raise_assert_detail(
2025-01-10T13:28:40.1528200Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1528240Z                 )
2025-01-10T13:28:40.1528290Z     
2025-01-10T13:28:40.1528330Z             diff = 0
2025-01-10T13:28:40.1528420Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1528480Z                 # count up differences
2025-01-10T13:28:40.1528610Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1528660Z                     diff += 1
2025-01-10T13:28:40.1528710Z     
2025-01-10T13:28:40.1528770Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1528870Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1529010Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1529100Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1529140Z E           
2025-01-10T13:28:40.1529230Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1529430Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1529640Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1529730Z 
2025-01-10T13:28:40.1529970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1529970Z 
2025-01-10T13:28:40.1530110Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1530110Z 
2025-01-10T13:28:40.1530280Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144203050>
2025-01-10T13:28:40.1530430Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>, attr = 'lines'
2025-01-10T13:28:40.1530440Z 
2025-01-10T13:28:40.1530540Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1530630Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1530690Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1530730Z         try:
2025-01-10T13:28:40.1530840Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1530890Z         except KeyError:
2025-01-10T13:28:40.1531000Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1531100Z     
2025-01-10T13:28:40.1531170Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1531240Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1531300Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1531400Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1531460Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1531530Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1531610Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1531660Z             else:
2025-01-10T13:28:40.1531720Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1531810Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1531810Z 
2025-01-10T13:28:40.1531900Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1531990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1532110Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1532150Z     ???
2025-01-10T13:28:40.1532240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1532240Z 
2025-01-10T13:28:40.1532290Z >   ???
2025-01-10T13:28:40.1532380Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1532430Z E   
2025-01-10T13:28:40.1532530Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1532610Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1532650Z E          ...
2025-01-10T13:28:40.1532720Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1532820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1532900Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1532950Z E          ...
2025-01-10T13:28:40.1533010Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1533120Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1533190Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1533190Z 
2025-01-10T13:28:40.1533260Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1533480Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index] _
2025-01-10T13:28:40.1533480Z 
2025-01-10T13:28:40.1533650Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144203110>
2025-01-10T13:28:40.1533770Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>
2025-01-10T13:28:40.1533840Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.1533840Z 
2025-01-10T13:28:40.1533940Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1534030Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1534090Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1534180Z         try:
2025-01-10T13:28:40.1534290Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1534350Z         except KeyError:
2025-01-10T13:28:40.1534450Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1534500Z     
2025-01-10T13:28:40.1534570Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1534640Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1534700Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1534800Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1534860Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1534930Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1535010Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1535010Z 
2025-01-10T13:28:40.1535100Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1535190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1535440Z 
2025-01-10T13:28:40.1535560Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1535620Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1535700Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1535760Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1535870Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1535930Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1536010Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1536070Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1536110Z err_msg = None
2025-01-10T13:28:40.1536120Z 
2025-01-10T13:28:40.1536200Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1536260Z         if err_msg is None:
2025-01-10T13:28:40.1536330Z             if left.shape != right.shape:
2025-01-10T13:28:40.1536400Z                 raise_assert_detail(
2025-01-10T13:28:40.1536510Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1536560Z                 )
2025-01-10T13:28:40.1536600Z     
2025-01-10T13:28:40.1536650Z             diff = 0
2025-01-10T13:28:40.1536730Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1536790Z                 # count up differences
2025-01-10T13:28:40.1536930Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1536980Z                     diff += 1
2025-01-10T13:28:40.1537030Z     
2025-01-10T13:28:40.1537090Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1537190Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1537320Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1537400Z E           AssertionError: Series are different
2025-01-10T13:28:40.1537450Z E           
2025-01-10T13:28:40.1537530Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.1537830Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1538090Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1538820Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1538830Z 
2025-01-10T13:28:40.1539070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1539290Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index] _
2025-01-10T13:28:40.1539290Z 
2025-01-10T13:28:40.1539460Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442031d0>
2025-01-10T13:28:40.1539580Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>
2025-01-10T13:28:40.1539640Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.1539650Z 
2025-01-10T13:28:40.1539760Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1539900Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1539960Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1540010Z         try:
2025-01-10T13:28:40.1540120Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1540170Z         except KeyError:
2025-01-10T13:28:40.1540280Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1540320Z     
2025-01-10T13:28:40.1540380Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1540450Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1540510Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1540620Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1540670Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1540740Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1540830Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1540830Z 
2025-01-10T13:28:40.1540930Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1541020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1541020Z 
2025-01-10T13:28:40.1541120Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1541180Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1541260Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1541320Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1541430Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1541490Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1541850Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1541920Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1541970Z err_msg = None
2025-01-10T13:28:40.1541980Z 
2025-01-10T13:28:40.1542060Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1542110Z         if err_msg is None:
2025-01-10T13:28:40.1542180Z             if left.shape != right.shape:
2025-01-10T13:28:40.1542250Z                 raise_assert_detail(
2025-01-10T13:28:40.1542360Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1542410Z                 )
2025-01-10T13:28:40.1542450Z     
2025-01-10T13:28:40.1542500Z             diff = 0
2025-01-10T13:28:40.1542580Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1542640Z                 # count up differences
2025-01-10T13:28:40.1542780Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1542830Z                     diff += 1
2025-01-10T13:28:40.1542870Z     
2025-01-10T13:28:40.1542930Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1543180Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1543320Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1543400Z E           AssertionError: Series are different
2025-01-10T13:28:40.1543450Z E           
2025-01-10T13:28:40.1543530Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.1543830Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1544140Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1544500Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1544510Z 
2025-01-10T13:28:40.1544740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1544910Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-nu] __
2025-01-10T13:28:40.1544920Z 
2025-01-10T13:28:40.1545020Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1545120Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1545190Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1545290Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1545390Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1545460Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1546080Z err_msg = None
2025-01-10T13:28:40.1546110Z 
2025-01-10T13:28:40.1546210Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1546270Z         if err_msg is None:
2025-01-10T13:28:40.1546360Z             if left.shape != right.shape:
2025-01-10T13:28:40.1546420Z                 raise_assert_detail(
2025-01-10T13:28:40.1546560Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1546610Z                 )
2025-01-10T13:28:40.1546650Z     
2025-01-10T13:28:40.1546700Z             diff = 0
2025-01-10T13:28:40.1546790Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1546860Z                 # count up differences
2025-01-10T13:28:40.1546990Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1547050Z                     diff += 1
2025-01-10T13:28:40.1547090Z     
2025-01-10T13:28:40.1547150Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1547260Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1547390Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1547470Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1547770Z E           
2025-01-10T13:28:40.1547860Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1548060Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1548260Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1548270Z 
2025-01-10T13:28:40.1548500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1548510Z 
2025-01-10T13:28:40.1548640Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1548730Z 
2025-01-10T13:28:40.1548910Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144203410>
2025-01-10T13:28:40.1549060Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>, attr = 'nu'
2025-01-10T13:28:40.1549060Z 
2025-01-10T13:28:40.1549160Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1549250Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1549310Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1549350Z         try:
2025-01-10T13:28:40.1549460Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1549520Z         except KeyError:
2025-01-10T13:28:40.1549620Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1549670Z     
2025-01-10T13:28:40.1549730Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1549790Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1549860Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1549970Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1550030Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1550090Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1550170Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1550180Z 
2025-01-10T13:28:40.1550270Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1550360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1550470Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1550520Z     ???
2025-01-10T13:28:40.1550600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1550610Z 
2025-01-10T13:28:40.1550650Z >   ???
2025-01-10T13:28:40.1550740Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1550790Z E   
2025-01-10T13:28:40.1550890Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1550980Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1551020Z E          ...
2025-01-10T13:28:40.1551090Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1551180Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1551270Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1551320Z E          ...
2025-01-10T13:28:40.1551380Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1551480Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1551550Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1551550Z 
2025-01-10T13:28:40.1551610Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1551810Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm] _
2025-01-10T13:28:40.1551860Z 
2025-01-10T13:28:40.1551970Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1552080Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1552150Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1552250Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1552350Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1552420Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1552470Z err_msg = None
2025-01-10T13:28:40.1552470Z 
2025-01-10T13:28:40.1552550Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1552610Z         if err_msg is None:
2025-01-10T13:28:40.1552670Z             if left.shape != right.shape:
2025-01-10T13:28:40.1552730Z                 raise_assert_detail(
2025-01-10T13:28:40.1553060Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1553110Z                 )
2025-01-10T13:28:40.1553150Z     
2025-01-10T13:28:40.1553960Z             diff = 0
2025-01-10T13:28:40.1554140Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1554210Z                 # count up differences
2025-01-10T13:28:40.1554350Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1554410Z                     diff += 1
2025-01-10T13:28:40.1554460Z     
2025-01-10T13:28:40.1554530Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1554640Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1554770Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1554860Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1554910Z E           
2025-01-10T13:28:40.1555010Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1555230Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1555440Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1555440Z 
2025-01-10T13:28:40.1555700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1555700Z 
2025-01-10T13:28:40.1555840Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1555850Z 
2025-01-10T13:28:40.1556020Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442034d0>
2025-01-10T13:28:40.1556150Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>
2025-01-10T13:28:40.1556200Z attr = 'wavelength_cm'
2025-01-10T13:28:40.1556210Z 
2025-01-10T13:28:40.1556310Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1556400Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1556460Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1556510Z         try:
2025-01-10T13:28:40.1556630Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1556680Z         except KeyError:
2025-01-10T13:28:40.1556790Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1556830Z     
2025-01-10T13:28:40.1556890Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1557360Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1557430Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1557540Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1557600Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1557670Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1557750Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1557750Z 
2025-01-10T13:28:40.1557840Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1557930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1558050Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1558100Z     ???
2025-01-10T13:28:40.1558190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1558190Z 
2025-01-10T13:28:40.1558240Z >   ???
2025-01-10T13:28:40.1558340Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1558460Z E   
2025-01-10T13:28:40.1558560Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1558650Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1558700Z E          ...
2025-01-10T13:28:40.1558760Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1558860Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1558940Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1558990Z E          ...
2025-01-10T13:28:40.1559050Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1559150Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1559230Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1559230Z 
2025-01-10T13:28:40.1559290Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1559460Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu] _
2025-01-10T13:28:40.1559470Z 
2025-01-10T13:28:40.1559570Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1559690Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1559760Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1559860Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1559970Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1560040Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1560090Z err_msg = None
2025-01-10T13:28:40.1560090Z 
2025-01-10T13:28:40.1560170Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1560220Z         if err_msg is None:
2025-01-10T13:28:40.1560290Z             if left.shape != right.shape:
2025-01-10T13:28:40.1560350Z                 raise_assert_detail(
2025-01-10T13:28:40.1560470Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1560520Z                 )
2025-01-10T13:28:40.1560570Z     
2025-01-10T13:28:40.1560620Z             diff = 0
2025-01-10T13:28:40.1560700Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1560760Z                 # count up differences
2025-01-10T13:28:40.1560900Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1560950Z                     diff += 1
2025-01-10T13:28:40.1560990Z     
2025-01-10T13:28:40.1561050Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1561160Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1561290Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1561370Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1561470Z E           
2025-01-10T13:28:40.1561560Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1561770Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1561970Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1561980Z 
2025-01-10T13:28:40.1562220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1562220Z 
2025-01-10T13:28:40.1562350Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1562410Z 
2025-01-10T13:28:40.1562580Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144203590>
2025-01-10T13:28:40.1562730Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>, attr = 'f_lu'
2025-01-10T13:28:40.1562740Z 
2025-01-10T13:28:40.1562850Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1562930Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1562990Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1563040Z         try:
2025-01-10T13:28:40.1563150Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1563200Z         except KeyError:
2025-01-10T13:28:40.1563310Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1563360Z     
2025-01-10T13:28:40.1563410Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1563480Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1563550Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1563650Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1563720Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1563780Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1563860Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1563860Z 
2025-01-10T13:28:40.1563960Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1564070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1564190Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1564240Z     ???
2025-01-10T13:28:40.1564320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1564320Z 
2025-01-10T13:28:40.1564370Z >   ???
2025-01-10T13:28:40.1564460Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1564510Z E   
2025-01-10T13:28:40.1564610Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1564690Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1564740Z E          ...
2025-01-10T13:28:40.1564800Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1564900Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1564980Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1565030Z E          ...
2025-01-10T13:28:40.1565090Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1565190Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1565260Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1565260Z 
2025-01-10T13:28:40.1565320Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1565510Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs] _
2025-01-10T13:28:40.1565570Z 
2025-01-10T13:28:40.1565670Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1565780Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1565850Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1567030Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1567430Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1567750Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1568070Z err_msg = None
2025-01-10T13:28:40.1568110Z 
2025-01-10T13:28:40.1568380Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1568560Z         if err_msg is None:
2025-01-10T13:28:40.1568750Z             if left.shape != right.shape:
2025-01-10T13:28:40.1568920Z                 raise_assert_detail(
2025-01-10T13:28:40.1569830Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1569970Z                 )
2025-01-10T13:28:40.1570110Z     
2025-01-10T13:28:40.1570250Z             diff = 0
2025-01-10T13:28:40.1570480Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1570650Z                 # count up differences
2025-01-10T13:28:40.1571010Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1571160Z                     diff += 1
2025-01-10T13:28:40.1571300Z     
2025-01-10T13:28:40.1571470Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1571750Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1572100Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1572340Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1572480Z E           
2025-01-10T13:28:40.1572720Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1573290Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1573860Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1573870Z 
2025-01-10T13:28:40.1574520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1574530Z 
2025-01-10T13:28:40.1574890Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1574910Z 
2025-01-10T13:28:40.1575350Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144203d10>
2025-01-10T13:28:40.1575670Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>
2025-01-10T13:28:40.1575820Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.1575830Z 
2025-01-10T13:28:40.1576110Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1576340Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1576500Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1576650Z         try:
2025-01-10T13:28:40.1576920Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1577090Z         except KeyError:
2025-01-10T13:28:40.1577360Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1577490Z     
2025-01-10T13:28:40.1577670Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1578090Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1578280Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1578550Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1578720Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1578900Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1579120Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1579270Z             else:
2025-01-10T13:28:40.1579450Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1579670Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1579680Z 
2025-01-10T13:28:40.1579940Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1580160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1580460Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1580600Z     ???
2025-01-10T13:28:40.1580900Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1581760Z 
2025-01-10T13:28:40.1581950Z >   ???
2025-01-10T13:28:40.1582220Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1582360Z E   
2025-01-10T13:28:40.1582620Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1582840Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1582990Z E          ...
2025-01-10T13:28:40.1583160Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1583430Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1583800Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1583950Z E          ...
2025-01-10T13:28:40.1584120Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1584380Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1584590Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1584620Z 
2025-01-10T13:28:40.1584790Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1585310Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev] _
2025-01-10T13:28:40.1585320Z 
2025-01-10T13:28:40.1585580Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1585850Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1586030Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1586310Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1586570Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1586750Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1586910Z err_msg = None
2025-01-10T13:28:40.1586920Z 
2025-01-10T13:28:40.1587140Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1587320Z         if err_msg is None:
2025-01-10T13:28:40.1587500Z             if left.shape != right.shape:
2025-01-10T13:28:40.1587680Z                 raise_assert_detail(
2025-01-10T13:28:40.1588230Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1588370Z                 )
2025-01-10T13:28:40.1588510Z     
2025-01-10T13:28:40.1588650Z             diff = 0
2025-01-10T13:28:40.1588880Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1589040Z                 # count up differences
2025-01-10T13:28:40.1589390Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1589560Z                     diff += 1
2025-01-10T13:28:40.1589690Z     
2025-01-10T13:28:40.1589860Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1590130Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1591180Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1591410Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1591550Z E           
2025-01-10T13:28:40.1591780Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1592340Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1592920Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1593130Z 
2025-01-10T13:28:40.1593770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1593780Z 
2025-01-10T13:28:40.1594140Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1594150Z 
2025-01-10T13:28:40.1594580Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144203dd0>
2025-01-10T13:28:40.1594910Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>
2025-01-10T13:28:40.1595060Z attr = 'beta_sobolev'
2025-01-10T13:28:40.1595070Z 
2025-01-10T13:28:40.1595340Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1595580Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1595740Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1595890Z         try:
2025-01-10T13:28:40.1596170Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1596330Z         except KeyError:
2025-01-10T13:28:40.1596620Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1596750Z     
2025-01-10T13:28:40.1596930Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1597110Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1597290Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1597560Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1597720Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1597910Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1598120Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1598270Z             else:
2025-01-10T13:28:40.1598460Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1598670Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1598680Z 
2025-01-10T13:28:40.1598940Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1599170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1599480Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1599620Z     ???
2025-01-10T13:28:40.1599850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1599850Z 
2025-01-10T13:28:40.1599990Z >   ???
2025-01-10T13:28:40.1600630Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1600930Z E   
2025-01-10T13:28:40.1601510Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1601850Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1602110Z E          ...
2025-01-10T13:28:40.1602280Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1617380Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1617650Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1618140Z E          ...
2025-01-10T13:28:40.1618220Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1618330Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1618410Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1618410Z 
2025-01-10T13:28:40.1618480Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1618670Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues] _
2025-01-10T13:28:40.1618680Z 
2025-01-10T13:28:40.1618780Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1618910Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1618990Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1619110Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1619210Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1619460Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1619510Z err_msg = None
2025-01-10T13:28:40.1619520Z 
2025-01-10T13:28:40.1619610Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1619670Z         if err_msg is None:
2025-01-10T13:28:40.1619740Z             if left.shape != right.shape:
2025-01-10T13:28:40.1619800Z                 raise_assert_detail(
2025-01-10T13:28:40.1619920Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1619970Z                 )
2025-01-10T13:28:40.1620020Z     
2025-01-10T13:28:40.1620070Z             diff = 0
2025-01-10T13:28:40.1620150Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1620220Z                 # count up differences
2025-01-10T13:28:40.1620360Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1620420Z                     diff += 1
2025-01-10T13:28:40.1620470Z     
2025-01-10T13:28:40.1620540Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1620650Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1620780Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1620870Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1620910Z E           
2025-01-10T13:28:40.1621000Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1621210Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1621430Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1621440Z 
2025-01-10T13:28:40.1621690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1621690Z 
2025-01-10T13:28:40.1621830Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1621830Z 
2025-01-10T13:28:40.1622010Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144203f50>
2025-01-10T13:28:40.1622180Z plasma = <tardis.plasma.base.BasePlasma object at 0x3166ed640>, attr = 'j_blues'
2025-01-10T13:28:40.1622180Z 
2025-01-10T13:28:40.1622300Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1622400Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1622560Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1622610Z         try:
2025-01-10T13:28:40.1622730Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1622790Z         except KeyError:
2025-01-10T13:28:40.1622910Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1622960Z     
2025-01-10T13:28:40.1623030Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1623100Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1623160Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1623270Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1623330Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1623400Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1623490Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1623530Z             else:
2025-01-10T13:28:40.1623600Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1623690Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1623780Z 
2025-01-10T13:28:40.1623880Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1623980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1624100Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1624160Z     ???
2025-01-10T13:28:40.1624260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1624260Z 
2025-01-10T13:28:40.1624320Z >   ???
2025-01-10T13:28:40.1624420Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1624470Z E   
2025-01-10T13:28:40.1624570Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1624660Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1624700Z E          ...
2025-01-10T13:28:40.1624770Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1624870Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1624960Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1625010Z E          ...
2025-01-10T13:28:40.1625080Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1625170Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1625240Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1625250Z 
2025-01-10T13:28:40.1625310Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1625480Z ____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines] ____
2025-01-10T13:28:40.1625480Z 
2025-01-10T13:28:40.1625580Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1625680Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1625760Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1625870Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1625970Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1626040Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1626090Z err_msg = None
2025-01-10T13:28:40.1626100Z 
2025-01-10T13:28:40.1626180Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1626230Z         if err_msg is None:
2025-01-10T13:28:40.1626300Z             if left.shape != right.shape:
2025-01-10T13:28:40.1626370Z                 raise_assert_detail(
2025-01-10T13:28:40.1626480Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1626530Z                 )
2025-01-10T13:28:40.1626570Z     
2025-01-10T13:28:40.1626620Z             diff = 0
2025-01-10T13:28:40.1626700Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1626820Z                 # count up differences
2025-01-10T13:28:40.1626970Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1627020Z                     diff += 1
2025-01-10T13:28:40.1627070Z     
2025-01-10T13:28:40.1733570Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1734420Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1734840Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1735100Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1735270Z E           
2025-01-10T13:28:40.1735540Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1736130Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1738320Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1738330Z 
2025-01-10T13:28:40.1739010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1739020Z 
2025-01-10T13:28:40.1739370Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1739380Z 
2025-01-10T13:28:40.1739860Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144234d10>
2025-01-10T13:28:40.1740290Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e53e60>, attr = 'lines'
2025-01-10T13:28:40.1740310Z 
2025-01-10T13:28:40.1740600Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1740840Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1741020Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1741170Z         try:
2025-01-10T13:28:40.1741450Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1741620Z         except KeyError:
2025-01-10T13:28:40.1741910Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1742050Z     
2025-01-10T13:28:40.1742230Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1742420Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1742600Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1742880Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1743060Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1743250Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1743480Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1743640Z             else:
2025-01-10T13:28:40.1743830Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1744050Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1744070Z 
2025-01-10T13:28:40.1744320Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1744550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1744860Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1745010Z     ???
2025-01-10T13:28:40.1745250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1745250Z 
2025-01-10T13:28:40.1745390Z >   ???
2025-01-10T13:28:40.1745650Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1745800Z E   
2025-01-10T13:28:40.1746060Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1746950Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1747110Z E          ...
2025-01-10T13:28:40.1747280Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1747560Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1747790Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1747940Z E          ...
2025-01-10T13:28:40.1748110Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1748390Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1748600Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1748610Z 
2025-01-10T13:28:40.1748790Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1749370Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index] _
2025-01-10T13:28:40.1749390Z 
2025-01-10T13:28:40.1749840Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144234dd0>
2025-01-10T13:28:40.1750190Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e53e60>
2025-01-10T13:28:40.1750620Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.1750630Z 
2025-01-10T13:28:40.1750920Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1751160Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1751320Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1751470Z         try:
2025-01-10T13:28:40.1751760Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1751930Z         except KeyError:
2025-01-10T13:28:40.1752220Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1752360Z     
2025-01-10T13:28:40.1752550Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1752740Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1752930Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1753600Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1754130Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1754350Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1754590Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1754590Z 
2025-01-10T13:28:40.1754870Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1755100Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1755110Z 
2025-01-10T13:28:40.1755400Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1755570Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1755790Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1755950Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1756240Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.1756420Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.1756640Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1756820Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.1756970Z err_msg = None
2025-01-10T13:28:40.1756980Z 
2025-01-10T13:28:40.1757340Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1757520Z         if err_msg is None:
2025-01-10T13:28:40.1757710Z             if left.shape != right.shape:
2025-01-10T13:28:40.1757880Z                 raise_assert_detail(
2025-01-10T13:28:40.1917910Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1918450Z                 )
2025-01-10T13:28:40.1918590Z     
2025-01-10T13:28:40.1918770Z             diff = 0
2025-01-10T13:28:40.1919030Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1919210Z                 # count up differences
2025-01-10T13:28:40.1919570Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1920610Z                     diff += 1
2025-01-10T13:28:40.1920750Z     
2025-01-10T13:28:40.1920930Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1921200Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1921560Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1921760Z E           AssertionError: Series are different
2025-01-10T13:28:40.1921900Z E           
2025-01-10T13:28:40.1922100Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.1922940Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1923960Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1924690Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1924720Z 
2025-01-10T13:28:40.1926090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1926720Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index] _
2025-01-10T13:28:40.1926750Z 
2025-01-10T13:28:40.1927210Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144234e90>
2025-01-10T13:28:40.1927550Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e53e60>
2025-01-10T13:28:40.1927990Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.1928000Z 
2025-01-10T13:28:40.1928290Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1928530Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1928690Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1928830Z         try:
2025-01-10T13:28:40.1929130Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1929290Z         except KeyError:
2025-01-10T13:28:40.1929580Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1929710Z     
2025-01-10T13:28:40.1929890Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1930090Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1930270Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1930540Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1930710Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1930900Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1931120Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1931130Z 
2025-01-10T13:28:40.1931380Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1931610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1931620Z 
2025-01-10T13:28:40.1931900Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1932070Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1932270Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1933090Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1933380Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.1933540Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.1933750Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.1933910Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.1934060Z err_msg = None
2025-01-10T13:28:40.1934070Z 
2025-01-10T13:28:40.1934300Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1934460Z         if err_msg is None:
2025-01-10T13:28:40.1934640Z             if left.shape != right.shape:
2025-01-10T13:28:40.1934800Z                 raise_assert_detail(
2025-01-10T13:28:40.1935100Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1935230Z                 )
2025-01-10T13:28:40.1935370Z     
2025-01-10T13:28:40.1935510Z             diff = 0
2025-01-10T13:28:40.1935740Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1936130Z                 # count up differences
2025-01-10T13:28:40.1936480Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1936640Z                     diff += 1
2025-01-10T13:28:40.1936770Z     
2025-01-10T13:28:40.1936940Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1937220Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1937570Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1937770Z E           AssertionError: Series are different
2025-01-10T13:28:40.1937910Z E           
2025-01-10T13:28:40.1938120Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.1938950Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.1939790Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1940630Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.1940660Z 
2025-01-10T13:28:40.1941310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1942170Z _____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-nu] ______
2025-01-10T13:28:40.1942230Z 
2025-01-10T13:28:40.1942550Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1942820Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1943010Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1943300Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1943550Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1944130Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1944280Z err_msg = None
2025-01-10T13:28:40.1944290Z 
2025-01-10T13:28:40.1944520Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1944680Z         if err_msg is None:
2025-01-10T13:28:40.1944860Z             if left.shape != right.shape:
2025-01-10T13:28:40.1945040Z                 raise_assert_detail(
2025-01-10T13:28:40.1945330Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1945480Z                 )
2025-01-10T13:28:40.1945610Z     
2025-01-10T13:28:40.1945750Z             diff = 0
2025-01-10T13:28:40.1945980Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1946150Z                 # count up differences
2025-01-10T13:28:40.1946510Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1946660Z                     diff += 1
2025-01-10T13:28:40.1946810Z     
2025-01-10T13:28:40.1947630Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1947910Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1948270Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1948670Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1948830Z E           
2025-01-10T13:28:40.1949060Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1949640Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1950220Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1950250Z 
2025-01-10T13:28:40.1951070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1951150Z 
2025-01-10T13:28:40.1951320Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1951330Z 
2025-01-10T13:28:40.1951500Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442350d0>
2025-01-10T13:28:40.1951670Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e53e60>, attr = 'nu'
2025-01-10T13:28:40.1951670Z 
2025-01-10T13:28:40.1951780Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1951870Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1951930Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1952000Z         try:
2025-01-10T13:28:40.1952130Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1952190Z         except KeyError:
2025-01-10T13:28:40.1952300Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1952340Z     
2025-01-10T13:28:40.1952400Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1952470Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1952540Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1952650Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1952710Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1952780Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1952860Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1952860Z 
2025-01-10T13:28:40.1952960Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1953050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1953900Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1953950Z     ???
2025-01-10T13:28:40.1954030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1954040Z 
2025-01-10T13:28:40.1954090Z >   ???
2025-01-10T13:28:40.1954190Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1954240Z E   
2025-01-10T13:28:40.1954330Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1954420Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1954470Z E          ...
2025-01-10T13:28:40.1954540Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1954650Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1954730Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1954780Z E          ...
2025-01-10T13:28:40.1954850Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1955050Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1955140Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1955140Z 
2025-01-10T13:28:40.1955210Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1955380Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-wavelength_cm] _
2025-01-10T13:28:40.1955390Z 
2025-01-10T13:28:40.1955490Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1955600Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1955680Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1955780Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1955890Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1955960Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1956020Z err_msg = None
2025-01-10T13:28:40.1956020Z 
2025-01-10T13:28:40.1956100Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1956160Z         if err_msg is None:
2025-01-10T13:28:40.1956240Z             if left.shape != right.shape:
2025-01-10T13:28:40.1956290Z                 raise_assert_detail(
2025-01-10T13:28:40.1956410Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1956450Z                 )
2025-01-10T13:28:40.1956500Z     
2025-01-10T13:28:40.1956540Z             diff = 0
2025-01-10T13:28:40.1956630Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1956700Z                 # count up differences
2025-01-10T13:28:40.1956830Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1956880Z                     diff += 1
2025-01-10T13:28:40.1956930Z     
2025-01-10T13:28:40.1957000Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1957100Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1957240Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1957330Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1957370Z E           
2025-01-10T13:28:40.1957610Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1957830Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1958050Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1958120Z 
2025-01-10T13:28:40.1958380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1958390Z 
2025-01-10T13:28:40.1958520Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1958520Z 
2025-01-10T13:28:40.1958700Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144235190>
2025-01-10T13:28:40.1958830Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e53e60>
2025-01-10T13:28:40.1958890Z attr = 'wavelength_cm'
2025-01-10T13:28:40.1958890Z 
2025-01-10T13:28:40.1959000Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1959080Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1959140Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1959190Z         try:
2025-01-10T13:28:40.1959370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1959420Z         except KeyError:
2025-01-10T13:28:40.1959530Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1959570Z     
2025-01-10T13:28:40.1959630Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1959700Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1959760Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1959870Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1959920Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1959990Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1960070Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1960070Z 
2025-01-10T13:28:40.1960160Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1960250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1960370Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1960420Z     ???
2025-01-10T13:28:40.1960500Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1960510Z 
2025-01-10T13:28:40.1960550Z >   ???
2025-01-10T13:28:40.1960650Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1960690Z E   
2025-01-10T13:28:40.1960790Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1960870Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1960910Z E          ...
2025-01-10T13:28:40.1960980Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1961080Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1961160Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1961210Z E          ...
2025-01-10T13:28:40.1961270Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1961370Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1961450Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1961450Z 
2025-01-10T13:28:40.1961510Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1961670Z ____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-f_lu] _____
2025-01-10T13:28:40.1961680Z 
2025-01-10T13:28:40.1961780Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1961880Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1961950Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1962050Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1962150Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1962280Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1962330Z err_msg = None
2025-01-10T13:28:40.1962330Z 
2025-01-10T13:28:40.1962410Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1962470Z         if err_msg is None:
2025-01-10T13:28:40.1962540Z             if left.shape != right.shape:
2025-01-10T13:28:40.1962590Z                 raise_assert_detail(
2025-01-10T13:28:40.1962700Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1962760Z                 )
2025-01-10T13:28:40.1962800Z     
2025-01-10T13:28:40.1962840Z             diff = 0
2025-01-10T13:28:40.1962930Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1962990Z                 # count up differences
2025-01-10T13:28:40.1963120Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1963170Z                     diff += 1
2025-01-10T13:28:40.1963220Z     
2025-01-10T13:28:40.1963340Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1963450Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1963590Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1963670Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1963720Z E           
2025-01-10T13:28:40.1963800Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1964010Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1964220Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1964230Z 
2025-01-10T13:28:40.1964470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1964470Z 
2025-01-10T13:28:40.1964600Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1964610Z 
2025-01-10T13:28:40.1964780Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144235250>
2025-01-10T13:28:40.1964940Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e53e60>, attr = 'f_lu'
2025-01-10T13:28:40.1964940Z 
2025-01-10T13:28:40.1965050Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1965130Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1965190Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1965240Z         try:
2025-01-10T13:28:40.1965350Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1965410Z         except KeyError:
2025-01-10T13:28:40.1965520Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1965560Z     
2025-01-10T13:28:40.1965620Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1965690Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1965750Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1965850Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1965910Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1965980Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1966060Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1966060Z 
2025-01-10T13:28:40.1966160Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.1966240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1966410Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1966460Z     ???
2025-01-10T13:28:40.1966540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1966540Z 
2025-01-10T13:28:40.1966590Z >   ???
2025-01-10T13:28:40.1966690Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1966730Z E   
2025-01-10T13:28:40.1966830Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1966910Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1966960Z E          ...
2025-01-10T13:28:40.1967020Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1967120Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1967210Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1967250Z E          ...
2025-01-10T13:28:40.1967320Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1967670Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1967750Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1967750Z 
2025-01-10T13:28:40.1967810Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1967980Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-tau_sobolevs] _
2025-01-10T13:28:40.1967990Z 
2025-01-10T13:28:40.1968090Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1968190Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1968260Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1968360Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1968470Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1968540Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1968600Z err_msg = None
2025-01-10T13:28:40.1968600Z 
2025-01-10T13:28:40.1968680Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1968730Z         if err_msg is None:
2025-01-10T13:28:40.1968830Z             if left.shape != right.shape:
2025-01-10T13:28:40.1968900Z                 raise_assert_detail(
2025-01-10T13:28:40.1969020Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1969060Z                 )
2025-01-10T13:28:40.1969110Z     
2025-01-10T13:28:40.1969170Z             diff = 0
2025-01-10T13:28:40.1969250Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1969320Z                 # count up differences
2025-01-10T13:28:40.1969460Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1969520Z                     diff += 1
2025-01-10T13:28:40.1969560Z     
2025-01-10T13:28:40.1969630Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1969740Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1969870Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1969960Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1970010Z E           
2025-01-10T13:28:40.1970090Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1970300Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1970510Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1970710Z 
2025-01-10T13:28:40.1970960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1970970Z 
2025-01-10T13:28:40.1971100Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1971100Z 
2025-01-10T13:28:40.1971270Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442359d0>
2025-01-10T13:28:40.1971400Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e53e60>
2025-01-10T13:28:40.1971450Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.1971450Z 
2025-01-10T13:28:40.1971560Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1971650Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1971700Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1971800Z         try:
2025-01-10T13:28:40.1971910Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1971960Z         except KeyError:
2025-01-10T13:28:40.1972070Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1972110Z     
2025-01-10T13:28:40.1972170Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1972240Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1972300Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1984230Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1984430Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1984500Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1984590Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1984640Z             else:
2025-01-10T13:28:40.1984710Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1984800Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1984830Z 
2025-01-10T13:28:40.1984930Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1985020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1985130Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1985180Z     ???
2025-01-10T13:28:40.1985260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1985270Z 
2025-01-10T13:28:40.1985320Z >   ???
2025-01-10T13:28:40.1985410Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1985450Z E   
2025-01-10T13:28:40.1985550Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1985630Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1985680Z E          ...
2025-01-10T13:28:40.1985750Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1985850Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1985940Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1985990Z E          ...
2025-01-10T13:28:40.1986050Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1986150Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1986230Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1986230Z 
2025-01-10T13:28:40.1986310Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1986490Z ___ TestPlasma.test_plasma_properties[line_interaction_type:scatter-j_blues] ___
2025-01-10T13:28:40.1986500Z 
2025-01-10T13:28:40.1986600Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1986700Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1986780Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1987260Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1987370Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1987440Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1987490Z err_msg = None
2025-01-10T13:28:40.1987490Z 
2025-01-10T13:28:40.1987570Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1987620Z         if err_msg is None:
2025-01-10T13:28:40.1987690Z             if left.shape != right.shape:
2025-01-10T13:28:40.1987750Z                 raise_assert_detail(
2025-01-10T13:28:40.1987860Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1987900Z                 )
2025-01-10T13:28:40.1987950Z     
2025-01-10T13:28:40.1987990Z             diff = 0
2025-01-10T13:28:40.1988070Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1988140Z                 # count up differences
2025-01-10T13:28:40.1988420Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1988470Z                     diff += 1
2025-01-10T13:28:40.1988520Z     
2025-01-10T13:28:40.1988580Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1988690Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1988820Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.1988910Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.1988960Z E           
2025-01-10T13:28:40.1989050Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.1989260Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1989470Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.1989480Z 
2025-01-10T13:28:40.1989720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.1989720Z 
2025-01-10T13:28:40.1989850Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.1989850Z 
2025-01-10T13:28:40.1990020Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144235c10>
2025-01-10T13:28:40.1990180Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e53e60>, attr = 'j_blues'
2025-01-10T13:28:40.1990180Z 
2025-01-10T13:28:40.1990290Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.1990370Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.1990430Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.1990480Z         try:
2025-01-10T13:28:40.1990580Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.1990640Z         except KeyError:
2025-01-10T13:28:40.1990750Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.1990790Z     
2025-01-10T13:28:40.1990850Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.1990920Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.1990980Z             if attr == "selected_atoms":
2025-01-10T13:28:40.1991080Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.1991140Z             elif actual.ndim == 1:
2025-01-10T13:28:40.1991200Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.1991290Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.1991400Z             else:
2025-01-10T13:28:40.1991470Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.1991550Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.1991560Z 
2025-01-10T13:28:40.1991650Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.1991730Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1991840Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.1991880Z     ???
2025-01-10T13:28:40.1991970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.1991970Z 
2025-01-10T13:28:40.1992020Z >   ???
2025-01-10T13:28:40.1992120Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.1992160Z E   
2025-01-10T13:28:40.1992260Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.1992340Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1992450Z E          ...
2025-01-10T13:28:40.1992520Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1992620Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1992700Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.1992750Z E          ...
2025-01-10T13:28:40.1992810Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.1992910Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.1992980Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.1992980Z 
2025-01-10T13:28:40.1993050Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.1993210Z ___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines] ___
2025-01-10T13:28:40.1993210Z 
2025-01-10T13:28:40.1993310Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1993410Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1993490Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1993590Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.1993690Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.1993760Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.1993810Z err_msg = None
2025-01-10T13:28:40.1993810Z 
2025-01-10T13:28:40.1993890Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.1993950Z         if err_msg is None:
2025-01-10T13:28:40.1994010Z             if left.shape != right.shape:
2025-01-10T13:28:40.1995120Z                 raise_assert_detail(
2025-01-10T13:28:40.1995650Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.1995800Z                 )
2025-01-10T13:28:40.1996160Z     
2025-01-10T13:28:40.1996600Z             diff = 0
2025-01-10T13:28:40.1996860Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.1997030Z                 # count up differences
2025-01-10T13:28:40.1997400Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.1998150Z                     diff += 1
2025-01-10T13:28:40.1998440Z     
2025-01-10T13:28:40.1998620Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.1999250Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.1999920Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2000170Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2000310Z E           
2025-01-10T13:28:40.2000550Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2001110Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2002220Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2002230Z 
2025-01-10T13:28:40.2003000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2003020Z 
2025-01-10T13:28:40.2003410Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2003420Z 
2025-01-10T13:28:40.2004080Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144236990>
2025-01-10T13:28:40.2006600Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>, attr = 'lines'
2025-01-10T13:28:40.2006620Z 
2025-01-10T13:28:40.2006890Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2007130Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2007300Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2007440Z         try:
2025-01-10T13:28:40.2007730Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2007890Z         except KeyError:
2025-01-10T13:28:40.2008170Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2008310Z     
2025-01-10T13:28:40.2008480Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2008660Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2008840Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2009110Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2009280Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2009470Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2009690Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2009830Z             else:
2025-01-10T13:28:40.2010030Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2010240Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2010250Z 
2025-01-10T13:28:40.2010510Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2010730Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2011020Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2011170Z     ???
2025-01-10T13:28:40.2011390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2011390Z 
2025-01-10T13:28:40.2011540Z >   ???
2025-01-10T13:28:40.2011790Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2011940Z E   
2025-01-10T13:28:40.2012400Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2012660Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2012810Z E          ...
2025-01-10T13:28:40.2012990Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2013260Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2013480Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2013750Z E          ...
2025-01-10T13:28:40.2013970Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2014240Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2014460Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2014470Z 
2025-01-10T13:28:40.2014650Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2015370Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index] _
2025-01-10T13:28:40.2016140Z 
2025-01-10T13:28:40.2016630Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144236a50>
2025-01-10T13:28:40.2016950Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>
2025-01-10T13:28:40.2017140Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.2017140Z 
2025-01-10T13:28:40.2017420Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2018080Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2018440Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2018600Z         try:
2025-01-10T13:28:40.2018900Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2019060Z         except KeyError:
2025-01-10T13:28:40.2019350Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2019480Z     
2025-01-10T13:28:40.2019660Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2019850Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2020030Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2020670Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2020840Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2021020Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2021250Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2021260Z 
2025-01-10T13:28:40.2021520Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2021760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2021770Z 
2025-01-10T13:28:40.2022040Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2022210Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2022410Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2022570Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2022870Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2023040Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2023250Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2023400Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2023550Z err_msg = None
2025-01-10T13:28:40.2023560Z 
2025-01-10T13:28:40.2023820Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2024000Z         if err_msg is None:
2025-01-10T13:28:40.2024190Z             if left.shape != right.shape:
2025-01-10T13:28:40.2024350Z                 raise_assert_detail(
2025-01-10T13:28:40.2024650Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2024790Z                 )
2025-01-10T13:28:40.2024930Z     
2025-01-10T13:28:40.2025070Z             diff = 0
2025-01-10T13:28:40.2025290Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2025480Z                 # count up differences
2025-01-10T13:28:40.2025840Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2026000Z                     diff += 1
2025-01-10T13:28:40.2026130Z     
2025-01-10T13:28:40.2026300Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2026580Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2026930Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2027140Z E           AssertionError: Series are different
2025-01-10T13:28:40.2027280Z E           
2025-01-10T13:28:40.2027500Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.2028320Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2029360Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2030090Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2030110Z 
2025-01-10T13:28:40.2030760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2031480Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index] _
2025-01-10T13:28:40.2031490Z 
2025-01-10T13:28:40.2031940Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144236b10>
2025-01-10T13:28:40.2032270Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>
2025-01-10T13:28:40.2032450Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.2032470Z 
2025-01-10T13:28:40.2032750Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2032980Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2033150Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2033290Z         try:
2025-01-10T13:28:40.2033580Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2033740Z         except KeyError:
2025-01-10T13:28:40.2034020Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2034680Z     
2025-01-10T13:28:40.2035120Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2035310Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2035490Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2035750Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2036110Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2036390Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2036630Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2036640Z 
2025-01-10T13:28:40.2036920Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2037170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2037180Z 
2025-01-10T13:28:40.2037460Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2037650Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2037870Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2038030Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2038320Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2038490Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2038700Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2038850Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2039000Z err_msg = None
2025-01-10T13:28:40.2039010Z 
2025-01-10T13:28:40.2039230Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2039390Z         if err_msg is None:
2025-01-10T13:28:40.2039580Z             if left.shape != right.shape:
2025-01-10T13:28:40.2039750Z                 raise_assert_detail(
2025-01-10T13:28:40.2040040Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2040750Z                 )
2025-01-10T13:28:40.2040890Z     
2025-01-10T13:28:40.2041040Z             diff = 0
2025-01-10T13:28:40.2041260Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2041430Z                 # count up differences
2025-01-10T13:28:40.2041800Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2041950Z                     diff += 1
2025-01-10T13:28:40.2042090Z     
2025-01-10T13:28:40.2042250Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2042530Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2042880Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2043110Z E           AssertionError: Series are different
2025-01-10T13:28:40.2043290Z E           
2025-01-10T13:28:40.2043490Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.2044330Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2045390Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2046240Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2046260Z 
2025-01-10T13:28:40.2046910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2047340Z ____ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-nu] _____
2025-01-10T13:28:40.2047350Z 
2025-01-10T13:28:40.2047610Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2047880Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2048060Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2048340Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2048600Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2048780Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2048940Z err_msg = None
2025-01-10T13:28:40.2048950Z 
2025-01-10T13:28:40.2049160Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2049320Z         if err_msg is None:
2025-01-10T13:28:40.2049500Z             if left.shape != right.shape:
2025-01-10T13:28:40.2049670Z                 raise_assert_detail(
2025-01-10T13:28:40.2049960Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2050100Z                 )
2025-01-10T13:28:40.2050240Z     
2025-01-10T13:28:40.2050380Z             diff = 0
2025-01-10T13:28:40.2050600Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2050770Z                 # count up differences
2025-01-10T13:28:40.2051510Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2052150Z                     diff += 1
2025-01-10T13:28:40.2052330Z     
2025-01-10T13:28:40.2052520Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2052820Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2053180Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2053420Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2053560Z E           
2025-01-10T13:28:40.2053800Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2054740Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2057480Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2057510Z 
2025-01-10T13:28:40.2058310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2058330Z 
2025-01-10T13:28:40.2058940Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2058960Z 
2025-01-10T13:28:40.2059420Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144236d50>
2025-01-10T13:28:40.2060200Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>, attr = 'nu'
2025-01-10T13:28:40.2060230Z 
2025-01-10T13:28:40.2060520Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2060790Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2060950Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2061090Z         try:
2025-01-10T13:28:40.2061380Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2061870Z         except KeyError:
2025-01-10T13:28:40.2062190Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2062330Z     
2025-01-10T13:28:40.2062500Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2062690Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2062860Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2063140Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2063300Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2063480Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2063710Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2063730Z 
2025-01-10T13:28:40.2063990Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2064230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2064530Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2064670Z     ???
2025-01-10T13:28:40.2064890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2064900Z 
2025-01-10T13:28:40.2065050Z >   ???
2025-01-10T13:28:40.2065330Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2065470Z E   
2025-01-10T13:28:40.2065740Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2065970Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2066110Z E          ...
2025-01-10T13:28:40.2066280Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2066540Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2067330Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2067480Z E          ...
2025-01-10T13:28:40.2067650Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2067920Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2068150Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2068150Z 
2025-01-10T13:28:40.2068330Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2068820Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-wavelength_cm] _
2025-01-10T13:28:40.2068830Z 
2025-01-10T13:28:40.2069090Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2069360Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2069550Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2069820Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2070280Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2070470Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2070630Z err_msg = None
2025-01-10T13:28:40.2070630Z 
2025-01-10T13:28:40.2070850Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2071000Z         if err_msg is None:
2025-01-10T13:28:40.2071190Z             if left.shape != right.shape:
2025-01-10T13:28:40.2071360Z                 raise_assert_detail(
2025-01-10T13:28:40.2071660Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2071800Z                 )
2025-01-10T13:28:40.2071930Z     
2025-01-10T13:28:40.2072070Z             diff = 0
2025-01-10T13:28:40.2072290Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2072470Z                 # count up differences
2025-01-10T13:28:40.2072830Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2072980Z                     diff += 1
2025-01-10T13:28:40.2073120Z     
2025-01-10T13:28:40.2073290Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2073570Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2073940Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2074160Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2074300Z E           
2025-01-10T13:28:40.2074530Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2075280Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2075860Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2075890Z 
2025-01-10T13:28:40.2076540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2076550Z 
2025-01-10T13:28:40.2076890Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2076900Z 
2025-01-10T13:28:40.2077340Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144236e10>
2025-01-10T13:28:40.2077660Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>
2025-01-10T13:28:40.2077820Z attr = 'wavelength_cm'
2025-01-10T13:28:40.2077830Z 
2025-01-10T13:28:40.2078090Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2078490Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2078650Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2078790Z         try:
2025-01-10T13:28:40.2079070Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2079230Z         except KeyError:
2025-01-10T13:28:40.2079510Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2079640Z     
2025-01-10T13:28:40.2079810Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2079990Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2080160Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2080440Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2080600Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2080770Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2081000Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2081010Z 
2025-01-10T13:28:40.2081390Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2081610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2081910Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2082040Z     ???
2025-01-10T13:28:40.2082270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2082280Z 
2025-01-10T13:28:40.2082410Z >   ???
2025-01-10T13:28:40.2082660Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2082790Z E   
2025-01-10T13:28:40.2083050Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2083260Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2083400Z E          ...
2025-01-10T13:28:40.2083570Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2083820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2084060Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2084200Z E          ...
2025-01-10T13:28:40.2084370Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2084620Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2084820Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2084830Z 
2025-01-10T13:28:40.2085010Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2085440Z ___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-f_lu] ____
2025-01-10T13:28:40.2085450Z 
2025-01-10T13:28:40.2085710Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2085960Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2086160Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2086420Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2086680Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2086870Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2087010Z err_msg = None
2025-01-10T13:28:40.2087020Z 
2025-01-10T13:28:40.2087240Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2087390Z         if err_msg is None:
2025-01-10T13:28:40.2087580Z             if left.shape != right.shape:
2025-01-10T13:28:40.2087740Z                 raise_assert_detail(
2025-01-10T13:28:40.2088020Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2088170Z                 )
2025-01-10T13:28:40.2088300Z     
2025-01-10T13:28:40.2088450Z             diff = 0
2025-01-10T13:28:40.2088660Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2088820Z                 # count up differences
2025-01-10T13:28:40.2089360Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2089520Z                     diff += 1
2025-01-10T13:28:40.2089660Z     
2025-01-10T13:28:40.2089820Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2090090Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2090450Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2090670Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2090810Z E           
2025-01-10T13:28:40.2091040Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2091600Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2092310Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2092320Z 
2025-01-10T13:28:40.2092960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2092970Z 
2025-01-10T13:28:40.2093300Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2093310Z 
2025-01-10T13:28:40.2093750Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144236ed0>
2025-01-10T13:28:40.2095720Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>, attr = 'f_lu'
2025-01-10T13:28:40.2095720Z 
2025-01-10T13:28:40.2096000Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2096240Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2096400Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2096540Z         try:
2025-01-10T13:28:40.2096810Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2096970Z         except KeyError:
2025-01-10T13:28:40.2097240Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2097380Z     
2025-01-10T13:28:40.2097550Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2098000Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2098170Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2098290Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2098360Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2098430Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2098530Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2098560Z 
2025-01-10T13:28:40.2098680Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2098770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2098890Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2098940Z     ???
2025-01-10T13:28:40.2099020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2099030Z 
2025-01-10T13:28:40.2099070Z >   ???
2025-01-10T13:28:40.2099170Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2099220Z E   
2025-01-10T13:28:40.2099320Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2099410Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2099460Z E          ...
2025-01-10T13:28:40.2099520Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2099620Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2099970Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2100030Z E          ...
2025-01-10T13:28:40.2100090Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2100180Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2100260Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2100260Z 
2025-01-10T13:28:40.2100330Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2100500Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs] _
2025-01-10T13:28:40.2100510Z 
2025-01-10T13:28:40.2100610Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2100720Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2100790Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2100900Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2101330Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2101400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2101460Z err_msg = None
2025-01-10T13:28:40.2101460Z 
2025-01-10T13:28:40.2101550Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2101600Z         if err_msg is None:
2025-01-10T13:28:40.2101670Z             if left.shape != right.shape:
2025-01-10T13:28:40.2101730Z                 raise_assert_detail(
2025-01-10T13:28:40.2101850Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2101900Z                 )
2025-01-10T13:28:40.2101940Z     
2025-01-10T13:28:40.2101990Z             diff = 0
2025-01-10T13:28:40.2102270Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2102400Z                 # count up differences
2025-01-10T13:28:40.2102540Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2102680Z                     diff += 1
2025-01-10T13:28:40.2102790Z     
2025-01-10T13:28:40.2102850Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2103040Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2103240Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2103320Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2103510Z E           
2025-01-10T13:28:40.2124530Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2124920Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2125180Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2125180Z 
2025-01-10T13:28:40.2125440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2125440Z 
2025-01-10T13:28:40.2125570Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2125580Z 
2025-01-10T13:28:40.2125760Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144237650>
2025-01-10T13:28:40.2125890Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>
2025-01-10T13:28:40.2125940Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.2125940Z 
2025-01-10T13:28:40.2126050Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2126880Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2126950Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2126990Z         try:
2025-01-10T13:28:40.2127100Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2127160Z         except KeyError:
2025-01-10T13:28:40.2127260Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2127310Z     
2025-01-10T13:28:40.2127370Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2127430Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2127490Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2127600Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2127660Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2127720Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2127810Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2127860Z             else:
2025-01-10T13:28:40.2128080Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2128160Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2128160Z 
2025-01-10T13:28:40.2128250Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2128350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2128460Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2128510Z     ???
2025-01-10T13:28:40.2128590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2128600Z 
2025-01-10T13:28:40.2128640Z >   ???
2025-01-10T13:28:40.2128730Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2128780Z E   
2025-01-10T13:28:40.2128870Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2128960Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2129000Z E          ...
2025-01-10T13:28:40.2129070Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2129170Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2129260Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2129300Z E          ...
2025-01-10T13:28:40.2129360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2129460Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2129530Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2129540Z 
2025-01-10T13:28:40.2129600Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2129770Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-beta_sobolev] _
2025-01-10T13:28:40.2129780Z 
2025-01-10T13:28:40.2129880Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2129990Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2130070Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2130180Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2130280Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2130350Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2130390Z err_msg = None
2025-01-10T13:28:40.2130400Z 
2025-01-10T13:28:40.2130480Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2130540Z         if err_msg is None:
2025-01-10T13:28:40.2130600Z             if left.shape != right.shape:
2025-01-10T13:28:40.2130660Z                 raise_assert_detail(
2025-01-10T13:28:40.2130770Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2130820Z                 )
2025-01-10T13:28:40.2130910Z     
2025-01-10T13:28:40.2130960Z             diff = 0
2025-01-10T13:28:40.2131050Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2131110Z                 # count up differences
2025-01-10T13:28:40.2131240Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2131290Z                     diff += 1
2025-01-10T13:28:40.2131340Z     
2025-01-10T13:28:40.2131400Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2131500Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2131630Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2131710Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2131760Z E           
2025-01-10T13:28:40.2131840Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2132040Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2132300Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2132300Z 
2025-01-10T13:28:40.2132550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2132550Z 
2025-01-10T13:28:40.2132680Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2132680Z 
2025-01-10T13:28:40.2132860Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144237710>
2025-01-10T13:28:40.2132990Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>
2025-01-10T13:28:40.2133040Z attr = 'beta_sobolev'
2025-01-10T13:28:40.2133050Z 
2025-01-10T13:28:40.2133160Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2133240Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2133300Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2133350Z         try:
2025-01-10T13:28:40.2133450Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2133500Z         except KeyError:
2025-01-10T13:28:40.2133610Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2133660Z     
2025-01-10T13:28:40.2133710Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2133780Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2133840Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2133940Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2134010Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2134070Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2134160Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2134200Z             else:
2025-01-10T13:28:40.2134270Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2134350Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2134350Z 
2025-01-10T13:28:40.2134440Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2134530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2134640Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2135380Z     ???
2025-01-10T13:28:40.2136020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2136060Z 
2025-01-10T13:28:40.2136160Z >   ???
2025-01-10T13:28:40.2136260Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2138180Z E   
2025-01-10T13:28:40.2138850Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2139120Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2139260Z E          ...
2025-01-10T13:28:40.2139470Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2139820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2140090Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2140270Z E          ...
2025-01-10T13:28:40.2141010Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2141350Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2141610Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2141630Z 
2025-01-10T13:28:40.2142060Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2143470Z __ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-j_blues] __
2025-01-10T13:28:40.2143700Z 
2025-01-10T13:28:40.2143880Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2144020Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2144120Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2144280Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2144440Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2144530Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2144580Z err_msg = None
2025-01-10T13:28:40.2144590Z 
2025-01-10T13:28:40.2144670Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2144730Z         if err_msg is None:
2025-01-10T13:28:40.2144820Z             if left.shape != right.shape:
2025-01-10T13:28:40.2144900Z                 raise_assert_detail(
2025-01-10T13:28:40.2145040Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2145110Z                 )
2025-01-10T13:28:40.2145180Z     
2025-01-10T13:28:40.2145240Z             diff = 0
2025-01-10T13:28:40.2145330Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2145430Z                 # count up differences
2025-01-10T13:28:40.2145590Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2145640Z                     diff += 1
2025-01-10T13:28:40.2146160Z     
2025-01-10T13:28:40.2146340Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2146480Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2146660Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2146790Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2146880Z E           
2025-01-10T13:28:40.2147000Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2147660Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2149370Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2149390Z 
2025-01-10T13:28:40.2149660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2149810Z 
2025-01-10T13:28:40.2149970Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2150000Z 
2025-01-10T13:28:40.2150210Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144237890>
2025-01-10T13:28:40.2150400Z plasma = <tardis.plasma.base.BasePlasma object at 0x3210a9eb0>, attr = 'j_blues'
2025-01-10T13:28:40.2150410Z 
2025-01-10T13:28:40.2150550Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2150670Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2150750Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2150810Z         try:
2025-01-10T13:28:40.2150980Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2151070Z         except KeyError:
2025-01-10T13:28:40.2151220Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2151280Z     
2025-01-10T13:28:40.2151360Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2151420Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2152550Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2152700Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2152790Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2152900Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2153030Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2153100Z             else:
2025-01-10T13:28:40.2153170Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2153250Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2153260Z 
2025-01-10T13:28:40.2153360Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2153480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2153650Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2153700Z     ???
2025-01-10T13:28:40.2153800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2153800Z 
2025-01-10T13:28:40.2153850Z >   ???
2025-01-10T13:28:40.2153950Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2153990Z E   
2025-01-10T13:28:40.2154090Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2154180Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2154230Z E          ...
2025-01-10T13:28:40.2154300Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2154400Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2154490Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2154540Z E          ...
2025-01-10T13:28:40.2154610Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2154710Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2154790Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2154790Z 
2025-01-10T13:28:40.2154860Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2155080Z __ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines] ___
2025-01-10T13:28:40.2155080Z 
2025-01-10T13:28:40.2155390Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2155540Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2155630Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2155750Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2155860Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2155930Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2155980Z err_msg = None
2025-01-10T13:28:40.2155980Z 
2025-01-10T13:28:40.2156460Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2156560Z         if err_msg is None:
2025-01-10T13:28:40.2156660Z             if left.shape != right.shape:
2025-01-10T13:28:40.2156750Z                 raise_assert_detail(
2025-01-10T13:28:40.2156900Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2156950Z                 )
2025-01-10T13:28:40.2157010Z     
2025-01-10T13:28:40.2157070Z             diff = 0
2025-01-10T13:28:40.2157150Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2157210Z                 # count up differences
2025-01-10T13:28:40.2157380Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2157500Z                     diff += 1
2025-01-10T13:28:40.2157560Z     
2025-01-10T13:28:40.2157690Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2157830Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2158000Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2158250Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2158330Z E           
2025-01-10T13:28:40.2158460Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2158760Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2159030Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2159040Z 
2025-01-10T13:28:40.2159310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2159320Z 
2025-01-10T13:28:40.2159490Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2159500Z 
2025-01-10T13:28:40.2159740Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144258650>
2025-01-10T13:28:40.2159950Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>, attr = 'lines'
2025-01-10T13:28:40.2159960Z 
2025-01-10T13:28:40.2160080Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2160190Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2160300Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2160370Z         try:
2025-01-10T13:28:40.2160500Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2160550Z         except KeyError:
2025-01-10T13:28:40.2160660Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2161120Z     
2025-01-10T13:28:40.2161550Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2161820Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2162020Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2162620Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2162710Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2162810Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2162950Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2163020Z             else:
2025-01-10T13:28:40.2163140Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2163270Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2163280Z 
2025-01-10T13:28:40.2163420Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2163560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2163920Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2164000Z     ???
2025-01-10T13:28:40.2164130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2164150Z 
2025-01-10T13:28:40.2164230Z >   ???
2025-01-10T13:28:40.2164400Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2164450Z E   
2025-01-10T13:28:40.2164590Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2164690Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2164770Z E          ...
2025-01-10T13:28:40.2164870Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2165010Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2165130Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2165180Z E          ...
2025-01-10T13:28:40.2165270Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2166340Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2166710Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2166730Z 
2025-01-10T13:28:40.2167450Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2169770Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index] _
2025-01-10T13:28:40.2169800Z 
2025-01-10T13:28:40.2170070Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144258710>
2025-01-10T13:28:40.2170260Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>
2025-01-10T13:28:40.2170350Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.2170350Z 
2025-01-10T13:28:40.2170470Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2170610Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2170740Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2170830Z         try:
2025-01-10T13:28:40.2171040Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2171130Z         except KeyError:
2025-01-10T13:28:40.2171300Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2171370Z     
2025-01-10T13:28:40.2171450Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2171570Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2171690Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2171890Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2171980Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2172080Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2172220Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2172240Z 
2025-01-10T13:28:40.2172380Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2172520Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2172530Z 
2025-01-10T13:28:40.2172680Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2172790Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2172930Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2173030Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2173170Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2173270Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2173420Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2173520Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2173610Z err_msg = None
2025-01-10T13:28:40.2173630Z 
2025-01-10T13:28:40.2173780Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2173890Z         if err_msg is None:
2025-01-10T13:28:40.2174000Z             if left.shape != right.shape:
2025-01-10T13:28:40.2174370Z                 raise_assert_detail(
2025-01-10T13:28:40.2174560Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2174660Z                 )
2025-01-10T13:28:40.2174710Z     
2025-01-10T13:28:40.2174760Z             diff = 0
2025-01-10T13:28:40.2174890Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2175000Z                 # count up differences
2025-01-10T13:28:40.2175210Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2175300Z                     diff += 1
2025-01-10T13:28:40.2175370Z     
2025-01-10T13:28:40.2175460Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2175620Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2175810Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2175930Z E           AssertionError: Series are different
2025-01-10T13:28:40.2176150Z E           
2025-01-10T13:28:40.2176270Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.2176650Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2177000Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2177370Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2177390Z 
2025-01-10T13:28:40.2177700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2177970Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index] _
2025-01-10T13:28:40.2177980Z 
2025-01-10T13:28:40.2178180Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442587d0>
2025-01-10T13:28:40.2178350Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>
2025-01-10T13:28:40.2178440Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.2178450Z 
2025-01-10T13:28:40.2178620Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2178740Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2178810Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2178850Z         try:
2025-01-10T13:28:40.2178980Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2179040Z         except KeyError:
2025-01-10T13:28:40.2179160Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2179210Z     
2025-01-10T13:28:40.2179270Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2179340Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2179410Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2179540Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2179640Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2179740Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2179850Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2179970Z 
2025-01-10T13:28:40.2180100Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2180260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2180280Z 
2025-01-10T13:28:40.2180490Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2180570Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2180670Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2180720Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2181430Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2182200Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2182520Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2182720Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2183040Z err_msg = None
2025-01-10T13:28:40.2188170Z 
2025-01-10T13:28:40.2188380Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2189510Z         if err_msg is None:
2025-01-10T13:28:40.2189860Z             if left.shape != right.shape:
2025-01-10T13:28:40.2190140Z                 raise_assert_detail(
2025-01-10T13:28:40.2190490Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2190690Z                 )
2025-01-10T13:28:40.2190900Z     
2025-01-10T13:28:40.2191060Z             diff = 0
2025-01-10T13:28:40.2191300Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2191460Z                 # count up differences
2025-01-10T13:28:40.2191820Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2191960Z                     diff += 1
2025-01-10T13:28:40.2192090Z     
2025-01-10T13:28:40.2192260Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2192550Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2192930Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2193120Z E           AssertionError: Series are different
2025-01-10T13:28:40.2193270Z E           
2025-01-10T13:28:40.2193460Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.2194290Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2195120Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2196220Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2196240Z 
2025-01-10T13:28:40.2196880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2197320Z ____ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-nu] ____
2025-01-10T13:28:40.2199150Z 
2025-01-10T13:28:40.2199410Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2199580Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2199690Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2199820Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2199960Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2200070Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2200160Z err_msg = None
2025-01-10T13:28:40.2200170Z 
2025-01-10T13:28:40.2200300Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2200380Z         if err_msg is None:
2025-01-10T13:28:40.2200500Z             if left.shape != right.shape:
2025-01-10T13:28:40.2200590Z                 raise_assert_detail(
2025-01-10T13:28:40.2200770Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2201120Z                 )
2025-01-10T13:28:40.2201190Z     
2025-01-10T13:28:40.2201260Z             diff = 0
2025-01-10T13:28:40.2201380Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2201480Z                 # count up differences
2025-01-10T13:28:40.2201670Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2201730Z                     diff += 1
2025-01-10T13:28:40.2201770Z     
2025-01-10T13:28:40.2201830Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2201940Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2202070Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2202170Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2202220Z E           
2025-01-10T13:28:40.2202320Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2202530Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2202740Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2202750Z 
2025-01-10T13:28:40.2202990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2202990Z 
2025-01-10T13:28:40.2203120Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2203130Z 
2025-01-10T13:28:40.2203290Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144258a10>
2025-01-10T13:28:40.2203440Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>, attr = 'nu'
2025-01-10T13:28:40.2203440Z 
2025-01-10T13:28:40.2203550Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2203630Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2203690Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2203730Z         try:
2025-01-10T13:28:40.2203850Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2203930Z         except KeyError:
2025-01-10T13:28:40.2204050Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2204120Z     
2025-01-10T13:28:40.2204180Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2204250Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2204420Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2204530Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2204590Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2204650Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2204740Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2204740Z 
2025-01-10T13:28:40.2204830Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2204910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2205030Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2205070Z     ???
2025-01-10T13:28:40.2205150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2205160Z 
2025-01-10T13:28:40.2205200Z >   ???
2025-01-10T13:28:40.2205290Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2205330Z E   
2025-01-10T13:28:40.2205430Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2205580Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2205630Z E          ...
2025-01-10T13:28:40.2205700Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2205790Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2205880Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2205920Z E          ...
2025-01-10T13:28:40.2205980Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2206070Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2206150Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2206150Z 
2025-01-10T13:28:40.2206210Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2206390Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-wavelength_cm] _
2025-01-10T13:28:40.2206400Z 
2025-01-10T13:28:40.2206500Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2206600Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2206670Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2206770Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2206870Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2206940Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2206990Z err_msg = None
2025-01-10T13:28:40.2206990Z 
2025-01-10T13:28:40.2207060Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2207120Z         if err_msg is None:
2025-01-10T13:28:40.2207190Z             if left.shape != right.shape:
2025-01-10T13:28:40.2207250Z                 raise_assert_detail(
2025-01-10T13:28:40.2207360Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2207410Z                 )
2025-01-10T13:28:40.2207450Z     
2025-01-10T13:28:40.2207500Z             diff = 0
2025-01-10T13:28:40.2207580Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2207640Z                 # count up differences
2025-01-10T13:28:40.2208160Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2208730Z                     diff += 1
2025-01-10T13:28:40.2208920Z     
2025-01-10T13:28:40.2209190Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2209540Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2210070Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2210360Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2210620Z E           
2025-01-10T13:28:40.2211510Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2212190Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2212860Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2212890Z 
2025-01-10T13:28:40.2213600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2213620Z 
2025-01-10T13:28:40.2214190Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2214480Z 
2025-01-10T13:28:40.2214950Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144258ad0>
2025-01-10T13:28:40.2215270Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>
2025-01-10T13:28:40.2215430Z attr = 'wavelength_cm'
2025-01-10T13:28:40.2215440Z 
2025-01-10T13:28:40.2215720Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2215950Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2216110Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2216260Z         try:
2025-01-10T13:28:40.2216550Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2216710Z         except KeyError:
2025-01-10T13:28:40.2216980Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2217110Z     
2025-01-10T13:28:40.2217280Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2217460Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2217650Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2217910Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2218080Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2218260Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2218470Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2218480Z 
2025-01-10T13:28:40.2218740Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2218960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2219260Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2219390Z     ???
2025-01-10T13:28:40.2219600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2219620Z 
2025-01-10T13:28:40.2219760Z >   ???
2025-01-10T13:28:40.2220000Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2220150Z E   
2025-01-10T13:28:40.2220410Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2220620Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2220770Z E          ...
2025-01-10T13:28:40.2220930Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2221190Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2221420Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2221560Z E          ...
2025-01-10T13:28:40.2221730Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2226000Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2226240Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2226250Z 
2025-01-10T13:28:40.2226420Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2226860Z ___ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-f_lu] ___
2025-01-10T13:28:40.2227300Z 
2025-01-10T13:28:40.2227580Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2227840Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2228020Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2228690Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2228990Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2229170Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2229330Z err_msg = None
2025-01-10T13:28:40.2229340Z 
2025-01-10T13:28:40.2229560Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2229730Z         if err_msg is None:
2025-01-10T13:28:40.2229910Z             if left.shape != right.shape:
2025-01-10T13:28:40.2230060Z                 raise_assert_detail(
2025-01-10T13:28:40.2230390Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2231700Z                 )
2025-01-10T13:28:40.2231840Z     
2025-01-10T13:28:40.2231990Z             diff = 0
2025-01-10T13:28:40.2232200Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2232380Z                 # count up differences
2025-01-10T13:28:40.2232720Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2232870Z                     diff += 1
2025-01-10T13:28:40.2233000Z     
2025-01-10T13:28:40.2233170Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2233450Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2233800Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2234030Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2234160Z E           
2025-01-10T13:28:40.2234380Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2234970Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2235540Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2235560Z 
2025-01-10T13:28:40.2236200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2236210Z 
2025-01-10T13:28:40.2236560Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2236580Z 
2025-01-10T13:28:40.2237010Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144258b90>
2025-01-10T13:28:40.2237410Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>, attr = 'f_lu'
2025-01-10T13:28:40.2237420Z 
2025-01-10T13:28:40.2237690Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2237920Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2258480Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2258900Z         try:
2025-01-10T13:28:40.2259210Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2259380Z         except KeyError:
2025-01-10T13:28:40.2260150Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2260320Z     
2025-01-10T13:28:40.2260490Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2260670Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2261860Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2262170Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2262390Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2262630Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2262950Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2262980Z 
2025-01-10T13:28:40.2263280Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2263570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2263910Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2264120Z     ???
2025-01-10T13:28:40.2264500Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2264530Z 
2025-01-10T13:28:40.2264740Z >   ???
2025-01-10T13:28:40.2265120Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2265310Z E   
2025-01-10T13:28:40.2265880Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2266120Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2266260Z E          ...
2025-01-10T13:28:40.2266420Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2266680Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2266900Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2267040Z E          ...
2025-01-10T13:28:40.2267200Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2267450Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2267660Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2267670Z 
2025-01-10T13:28:40.2267830Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2268310Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs] _
2025-01-10T13:28:40.2268330Z 
2025-01-10T13:28:40.2268580Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2268850Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2269030Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2269310Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2269560Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2269740Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2269890Z err_msg = None
2025-01-10T13:28:40.2269900Z 
2025-01-10T13:28:40.2270110Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2270270Z         if err_msg is None:
2025-01-10T13:28:40.2270440Z             if left.shape != right.shape:
2025-01-10T13:28:40.2270600Z                 raise_assert_detail(
2025-01-10T13:28:40.2270940Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2271140Z                 )
2025-01-10T13:28:40.2271320Z     
2025-01-10T13:28:40.2271590Z             diff = 0
2025-01-10T13:28:40.2271910Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2272100Z                 # count up differences
2025-01-10T13:28:40.2272440Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2272590Z                     diff += 1
2025-01-10T13:28:40.2272730Z     
2025-01-10T13:28:40.2272960Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2273310Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2273690Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2273920Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2274110Z E           
2025-01-10T13:28:40.2274720Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2275300Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2275870Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2275880Z 
2025-01-10T13:28:40.2276540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2276550Z 
2025-01-10T13:28:40.2276890Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2277080Z 
2025-01-10T13:28:40.2277530Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144259310>
2025-01-10T13:28:40.2277850Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>
2025-01-10T13:28:40.2278480Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.2278510Z 
2025-01-10T13:28:40.2278800Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2279040Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2279200Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2279340Z         try:
2025-01-10T13:28:40.2279630Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2279790Z         except KeyError:
2025-01-10T13:28:40.2280080Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2280210Z     
2025-01-10T13:28:40.2280380Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2280570Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2280770Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2281160Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2281370Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2281620Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2281930Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2282090Z             else:
2025-01-10T13:28:40.2282280Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2282500Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2282500Z 
2025-01-10T13:28:40.2282830Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2283120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2283460Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2283650Z     ???
2025-01-10T13:28:40.2284380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2284480Z 
2025-01-10T13:28:40.2284640Z >   ???
2025-01-10T13:28:40.2284810Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2284880Z E   
2025-01-10T13:28:40.2285000Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2285090Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2285140Z E          ...
2025-01-10T13:28:40.2285210Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2285320Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2285420Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2285490Z E          ...
2025-01-10T13:28:40.2285570Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2285720Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2285830Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2286290Z 
2025-01-10T13:28:40.2286380Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2286560Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-beta_sobolev] _
2025-01-10T13:28:40.2286570Z 
2025-01-10T13:28:40.2286680Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2287000Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2289580Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2290040Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2290520Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2290650Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2290720Z err_msg = None
2025-01-10T13:28:40.2290720Z 
2025-01-10T13:28:40.2290820Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2294730Z         if err_msg is None:
2025-01-10T13:28:40.2295020Z             if left.shape != right.shape:
2025-01-10T13:28:40.2295230Z                 raise_assert_detail(
2025-01-10T13:28:40.2295560Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2295730Z                 )
2025-01-10T13:28:40.2295910Z     
2025-01-10T13:28:40.2296110Z             diff = 0
2025-01-10T13:28:40.2296330Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2297140Z                 # count up differences
2025-01-10T13:28:40.2297970Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2298180Z                     diff += 1
2025-01-10T13:28:40.2298320Z     
2025-01-10T13:28:40.2298500Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2298820Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2299240Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2299750Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2299800Z E           
2025-01-10T13:28:40.2299900Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2300120Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2300330Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2300340Z 
2025-01-10T13:28:40.2300600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2300600Z 
2025-01-10T13:28:40.2301080Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2301110Z 
2025-01-10T13:28:40.2301690Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442593d0>
2025-01-10T13:28:40.2302040Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>
2025-01-10T13:28:40.2302210Z attr = 'beta_sobolev'
2025-01-10T13:28:40.2302220Z 
2025-01-10T13:28:40.2302890Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2303050Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2303120Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2303170Z         try:
2025-01-10T13:28:40.2303310Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2303370Z         except KeyError:
2025-01-10T13:28:40.2303770Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2303820Z     
2025-01-10T13:28:40.2303880Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2303950Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2304010Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2304120Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2304180Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2304260Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2304370Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2304410Z             else:
2025-01-10T13:28:40.2304480Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2304560Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2304570Z 
2025-01-10T13:28:40.2304660Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2304760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2305730Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2305800Z     ???
2025-01-10T13:28:40.2305900Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2305900Z 
2025-01-10T13:28:40.2305950Z >   ???
2025-01-10T13:28:40.2306040Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2306090Z E   
2025-01-10T13:28:40.2306190Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2306280Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2306330Z E          ...
2025-01-10T13:28:40.2306390Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2306500Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2306580Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2306630Z E          ...
2025-01-10T13:28:40.2306700Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2306800Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2306890Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2306890Z 
2025-01-10T13:28:40.2306950Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2307120Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-j_blues] __
2025-01-10T13:28:40.2307120Z 
2025-01-10T13:28:40.2307230Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2307340Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2307420Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2307520Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2307630Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2307710Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2307760Z err_msg = None
2025-01-10T13:28:40.2307760Z 
2025-01-10T13:28:40.2307850Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2307900Z         if err_msg is None:
2025-01-10T13:28:40.2307970Z             if left.shape != right.shape:
2025-01-10T13:28:40.2308030Z                 raise_assert_detail(
2025-01-10T13:28:40.2308150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2308200Z                 )
2025-01-10T13:28:40.2308240Z     
2025-01-10T13:28:40.2308280Z             diff = 0
2025-01-10T13:28:40.2308370Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2308430Z                 # count up differences
2025-01-10T13:28:40.2308560Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2308610Z                     diff += 1
2025-01-10T13:28:40.2309100Z     
2025-01-10T13:28:40.2309170Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2309280Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2309410Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2309490Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2309540Z E           
2025-01-10T13:28:40.2309620Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2309830Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2310030Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2310100Z 
2025-01-10T13:28:40.2310350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2310350Z 
2025-01-10T13:28:40.2310480Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2310490Z 
2025-01-10T13:28:40.2310660Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144259550>
2025-01-10T13:28:40.2310810Z plasma = <tardis.plasma.base.BasePlasma object at 0x145962b70>, attr = 'j_blues'
2025-01-10T13:28:40.2310820Z 
2025-01-10T13:28:40.2310920Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2311010Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2311060Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2311110Z         try:
2025-01-10T13:28:40.2311220Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2311280Z         except KeyError:
2025-01-10T13:28:40.2311380Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2311430Z     
2025-01-10T13:28:40.2311490Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2311550Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2311610Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2311710Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2311770Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2311840Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2311920Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2311970Z             else:
2025-01-10T13:28:40.2312030Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2312120Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2312120Z 
2025-01-10T13:28:40.2312210Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2312300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2312410Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2312450Z     ???
2025-01-10T13:28:40.2312540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2312540Z 
2025-01-10T13:28:40.2312590Z >   ???
2025-01-10T13:28:40.2312690Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2312730Z E   
2025-01-10T13:28:40.2312820Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2312910Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2312950Z E          ...
2025-01-10T13:28:40.2313020Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2313110Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2313250Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2313300Z E          ...
2025-01-10T13:28:40.2313360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2313460Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2313530Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2313530Z 
2025-01-10T13:28:40.2313590Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2313750Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines] ___
2025-01-10T13:28:40.2313760Z 
2025-01-10T13:28:40.2313860Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2313960Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2314030Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2314140Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2314290Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2314360Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2314410Z err_msg = None
2025-01-10T13:28:40.2314410Z 
2025-01-10T13:28:40.2314490Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2314550Z         if err_msg is None:
2025-01-10T13:28:40.2314610Z             if left.shape != right.shape:
2025-01-10T13:28:40.2314670Z                 raise_assert_detail(
2025-01-10T13:28:40.2314780Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2314820Z                 )
2025-01-10T13:28:40.2314860Z     
2025-01-10T13:28:40.2314910Z             diff = 0
2025-01-10T13:28:40.2314990Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2315050Z                 # count up differences
2025-01-10T13:28:40.2315180Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2315240Z                     diff += 1
2025-01-10T13:28:40.2315280Z     
2025-01-10T13:28:40.2315340Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2315440Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2315580Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2315660Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2315710Z E           
2025-01-10T13:28:40.2315790Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2315990Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2316210Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2316210Z 
2025-01-10T13:28:40.2316440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2316450Z 
2025-01-10T13:28:40.2316580Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2316580Z 
2025-01-10T13:28:40.2316750Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425a2d0>
2025-01-10T13:28:40.2316900Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>, attr = 'lines'
2025-01-10T13:28:40.2316910Z 
2025-01-10T13:28:40.2317060Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2317150Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2317200Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2317250Z         try:
2025-01-10T13:28:40.2317360Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2317410Z         except KeyError:
2025-01-10T13:28:40.2317520Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2317560Z     
2025-01-10T13:28:40.2317620Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2317690Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2317750Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2317850Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2317910Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2317970Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2318060Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2318160Z             else:
2025-01-10T13:28:40.2318230Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2318310Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2318310Z 
2025-01-10T13:28:40.2318400Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2318480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2318590Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2318640Z     ???
2025-01-10T13:28:40.2318720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2318720Z 
2025-01-10T13:28:40.2318770Z >   ???
2025-01-10T13:28:40.2318860Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2318900Z E   
2025-01-10T13:28:40.2319000Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2319080Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2319130Z E          ...
2025-01-10T13:28:40.2319190Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2319280Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2319370Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2319410Z E          ...
2025-01-10T13:28:40.2319470Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2319560Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2319640Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2319640Z 
2025-01-10T13:28:40.2319700Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2319900Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index] _
2025-01-10T13:28:40.2319910Z 
2025-01-10T13:28:40.2320070Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425a390>
2025-01-10T13:28:40.2320190Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>
2025-01-10T13:28:40.2320260Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.2320260Z 
2025-01-10T13:28:40.2320370Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2320450Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2320510Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2320550Z         try:
2025-01-10T13:28:40.2320660Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2320710Z         except KeyError:
2025-01-10T13:28:40.2320820Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2320860Z     
2025-01-10T13:28:40.2320920Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2320980Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2321040Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2321140Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2321240Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2321310Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2321390Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2321390Z 
2025-01-10T13:28:40.2321480Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2321570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2321570Z 
2025-01-10T13:28:40.2321670Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2321730Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2321810Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2321870Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2321980Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2322040Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2322120Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2322380Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2322430Z err_msg = None
2025-01-10T13:28:40.2322430Z 
2025-01-10T13:28:40.2322510Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2322570Z         if err_msg is None:
2025-01-10T13:28:40.2322630Z             if left.shape != right.shape:
2025-01-10T13:28:40.2322690Z                 raise_assert_detail(
2025-01-10T13:28:40.2322800Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2322850Z                 )
2025-01-10T13:28:40.2322890Z     
2025-01-10T13:28:40.2322930Z             diff = 0
2025-01-10T13:28:40.2323010Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2323070Z                 # count up differences
2025-01-10T13:28:40.2323200Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2323260Z                     diff += 1
2025-01-10T13:28:40.2323310Z     
2025-01-10T13:28:40.2323370Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2323470Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2323600Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2323670Z E           AssertionError: Series are different
2025-01-10T13:28:40.2323720Z E           
2025-01-10T13:28:40.2323790Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.2324090Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2324360Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2324620Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2324620Z 
2025-01-10T13:28:40.2324860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2325060Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index] _
2025-01-10T13:28:40.2325240Z 
2025-01-10T13:28:40.2325420Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425a450>
2025-01-10T13:28:40.2325550Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>
2025-01-10T13:28:40.2325610Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.2325610Z 
2025-01-10T13:28:40.2325720Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2325800Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2325860Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2325910Z         try:
2025-01-10T13:28:40.2326020Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2326070Z         except KeyError:
2025-01-10T13:28:40.2326170Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2326220Z     
2025-01-10T13:28:40.2326310Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2326460Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2326660Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2326770Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2326820Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2326890Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2326970Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2326970Z 
2025-01-10T13:28:40.2327060Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2327140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2327150Z 
2025-01-10T13:28:40.2327250Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2327310Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2327390Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2327450Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2327560Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2327620Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2327710Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2327760Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2327810Z err_msg = None
2025-01-10T13:28:40.2327810Z 
2025-01-10T13:28:40.2327890Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2327940Z         if err_msg is None:
2025-01-10T13:28:40.2328010Z             if left.shape != right.shape:
2025-01-10T13:28:40.2328060Z                 raise_assert_detail(
2025-01-10T13:28:40.2328180Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2328240Z                 )
2025-01-10T13:28:40.2328280Z     
2025-01-10T13:28:40.2328330Z             diff = 0
2025-01-10T13:28:40.2328410Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2328480Z                 # count up differences
2025-01-10T13:28:40.2328640Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2328700Z                     diff += 1
2025-01-10T13:28:40.2328750Z     
2025-01-10T13:28:40.2328800Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2328910Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2329050Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2329120Z E           AssertionError: Series are different
2025-01-10T13:28:40.2329170Z E           
2025-01-10T13:28:40.2329240Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.2329650Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2330050Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2330350Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2330400Z 
2025-01-10T13:28:40.2330640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2330800Z ____ TestPlasma.test_plasma_properties[disable_electron_scattering:True-nu] ____
2025-01-10T13:28:40.2330800Z 
2025-01-10T13:28:40.2330900Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2331000Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2331070Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2331180Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2331280Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2331350Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2331400Z err_msg = None
2025-01-10T13:28:40.2331400Z 
2025-01-10T13:28:40.2331480Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2331540Z         if err_msg is None:
2025-01-10T13:28:40.2331600Z             if left.shape != right.shape:
2025-01-10T13:28:40.2331660Z                 raise_assert_detail(
2025-01-10T13:28:40.2331770Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2331810Z                 )
2025-01-10T13:28:40.2331860Z     
2025-01-10T13:28:40.2331900Z             diff = 0
2025-01-10T13:28:40.2331980Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2332040Z                 # count up differences
2025-01-10T13:28:40.2332170Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2332230Z                     diff += 1
2025-01-10T13:28:40.2332270Z     
2025-01-10T13:28:40.2332330Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2332440Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2332570Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2332650Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2332690Z E           
2025-01-10T13:28:40.2332780Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2332980Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2333190Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2333240Z 
2025-01-10T13:28:40.2333480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2333480Z 
2025-01-10T13:28:40.2333610Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2333620Z 
2025-01-10T13:28:40.2333790Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425a690>
2025-01-10T13:28:40.2333940Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>, attr = 'nu'
2025-01-10T13:28:40.2333940Z 
2025-01-10T13:28:40.2334040Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2334130Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2334190Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2334230Z         try:
2025-01-10T13:28:40.2334340Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2334450Z         except KeyError:
2025-01-10T13:28:40.2334550Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2334600Z     
2025-01-10T13:28:40.2334660Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2334730Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2334780Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2334880Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2334940Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2335000Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2335090Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2335090Z 
2025-01-10T13:28:40.2335180Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2335260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2335380Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2335420Z     ???
2025-01-10T13:28:40.2335510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2335520Z 
2025-01-10T13:28:40.2335560Z >   ???
2025-01-10T13:28:40.2335650Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2335690Z E   
2025-01-10T13:28:40.2335790Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2335870Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2335910Z E          ...
2025-01-10T13:28:40.2335980Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2336070Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2336160Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2336200Z E          ...
2025-01-10T13:28:40.2336260Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2336360Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2336440Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2336440Z 
2025-01-10T13:28:40.2336500Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2336680Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-wavelength_cm] _
2025-01-10T13:28:40.2336680Z 
2025-01-10T13:28:40.2336780Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2336880Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2336940Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2337050Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2337140Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2337270Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2337320Z err_msg = None
2025-01-10T13:28:40.2337330Z 
2025-01-10T13:28:40.2337410Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2337460Z         if err_msg is None:
2025-01-10T13:28:40.2337530Z             if left.shape != right.shape:
2025-01-10T13:28:40.2337580Z                 raise_assert_detail(
2025-01-10T13:28:40.2337690Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2337730Z                 )
2025-01-10T13:28:40.2337770Z     
2025-01-10T13:28:40.2337820Z             diff = 0
2025-01-10T13:28:40.2337900Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2337960Z                 # count up differences
2025-01-10T13:28:40.2338090Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2338140Z                     diff += 1
2025-01-10T13:28:40.2338180Z     
2025-01-10T13:28:40.2338250Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2338570Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2338710Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2338790Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2338830Z E           
2025-01-10T13:28:40.2338910Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2339120Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2339320Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2339330Z 
2025-01-10T13:28:40.2339560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2339570Z 
2025-01-10T13:28:40.2339700Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2339700Z 
2025-01-10T13:28:40.2339870Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425a750>
2025-01-10T13:28:40.2339990Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>
2025-01-10T13:28:40.2340040Z attr = 'wavelength_cm'
2025-01-10T13:28:40.2340050Z 
2025-01-10T13:28:40.2340150Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2340240Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2340290Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2340340Z         try:
2025-01-10T13:28:40.2340450Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2340500Z         except KeyError:
2025-01-10T13:28:40.2346120Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2346210Z     
2025-01-10T13:28:40.2346290Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2346360Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2346410Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2346520Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2346580Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2346640Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2346730Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2346730Z 
2025-01-10T13:28:40.2346820Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2346910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2347380Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2347430Z     ???
2025-01-10T13:28:40.2347520Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2347520Z 
2025-01-10T13:28:40.2347570Z >   ???
2025-01-10T13:28:40.2347660Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2347710Z E   
2025-01-10T13:28:40.2347810Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2347890Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2347930Z E          ...
2025-01-10T13:28:40.2348000Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2348090Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2348180Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2348230Z E          ...
2025-01-10T13:28:40.2348290Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2348470Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2348540Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2348550Z 
2025-01-10T13:28:40.2348610Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2348770Z ___ TestPlasma.test_plasma_properties[disable_electron_scattering:True-f_lu] ___
2025-01-10T13:28:40.2348770Z 
2025-01-10T13:28:40.2348880Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2348980Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2349050Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2349160Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2349260Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2349340Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2349390Z err_msg = None
2025-01-10T13:28:40.2349400Z 
2025-01-10T13:28:40.2349480Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2349540Z         if err_msg is None:
2025-01-10T13:28:40.2349610Z             if left.shape != right.shape:
2025-01-10T13:28:40.2349670Z                 raise_assert_detail(
2025-01-10T13:28:40.2349790Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2349830Z                 )
2025-01-10T13:28:40.2349880Z     
2025-01-10T13:28:40.2349920Z             diff = 0
2025-01-10T13:28:40.2350010Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2350070Z                 # count up differences
2025-01-10T13:28:40.2350200Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2350250Z                     diff += 1
2025-01-10T13:28:40.2350290Z     
2025-01-10T13:28:40.2350360Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2350470Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2350610Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2350690Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2350730Z E           
2025-01-10T13:28:40.2350820Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2351030Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2351240Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2351290Z 
2025-01-10T13:28:40.2351540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2351540Z 
2025-01-10T13:28:40.2351670Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2351680Z 
2025-01-10T13:28:40.2351840Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425a810>
2025-01-10T13:28:40.2351990Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>, attr = 'f_lu'
2025-01-10T13:28:40.2352000Z 
2025-01-10T13:28:40.2352100Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2352190Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2352250Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2352300Z         try:
2025-01-10T13:28:40.2352410Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2352510Z         except KeyError:
2025-01-10T13:28:40.2352620Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2352660Z     
2025-01-10T13:28:40.2352720Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2352780Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2352840Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2352950Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2353010Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2353080Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2353170Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2353170Z 
2025-01-10T13:28:40.2353260Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2353350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2353470Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2353510Z     ???
2025-01-10T13:28:40.2353600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2353610Z 
2025-01-10T13:28:40.2353650Z >   ???
2025-01-10T13:28:40.2353750Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2353790Z E   
2025-01-10T13:28:40.2353880Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2353970Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2354010Z E          ...
2025-01-10T13:28:40.2354080Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2354170Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2354260Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2354300Z E          ...
2025-01-10T13:28:40.2354370Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2354470Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2354550Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2354550Z 
2025-01-10T13:28:40.2354610Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2354790Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-tau_sobolevs] _
2025-01-10T13:28:40.2354790Z 
2025-01-10T13:28:40.2354900Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2355010Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2355080Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2355180Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2355280Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2355410Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2355470Z err_msg = None
2025-01-10T13:28:40.2355470Z 
2025-01-10T13:28:40.2355560Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2355610Z         if err_msg is None:
2025-01-10T13:28:40.2355690Z             if left.shape != right.shape:
2025-01-10T13:28:40.2355750Z                 raise_assert_detail(
2025-01-10T13:28:40.2355860Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2355910Z                 )
2025-01-10T13:28:40.2355950Z     
2025-01-10T13:28:40.2356000Z             diff = 0
2025-01-10T13:28:40.2356090Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2356150Z                 # count up differences
2025-01-10T13:28:40.2356280Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2356330Z                     diff += 1
2025-01-10T13:28:40.2356380Z     
2025-01-10T13:28:40.2356440Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2356600Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2356740Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2356820Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2356870Z E           
2025-01-10T13:28:40.2356950Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2357170Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2357390Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2357400Z 
2025-01-10T13:28:40.2357650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2357650Z 
2025-01-10T13:28:40.2357790Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2357790Z 
2025-01-10T13:28:40.2357970Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425af90>
2025-01-10T13:28:40.2358110Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>
2025-01-10T13:28:40.2358160Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.2358160Z 
2025-01-10T13:28:40.2358270Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2358360Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2358420Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2358470Z         try:
2025-01-10T13:28:40.2358580Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2358650Z         except KeyError:
2025-01-10T13:28:40.2358750Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2358800Z     
2025-01-10T13:28:40.2358860Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2358930Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2358990Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2359090Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2359150Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2359220Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2359300Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2359350Z             else:
2025-01-10T13:28:40.2359420Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2359510Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2359560Z 
2025-01-10T13:28:40.2359650Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2359740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2359860Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2359900Z     ???
2025-01-10T13:28:40.2360000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2360000Z 
2025-01-10T13:28:40.2360040Z >   ???
2025-01-10T13:28:40.2360140Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2360180Z E   
2025-01-10T13:28:40.2360280Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2360370Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2360420Z E          ...
2025-01-10T13:28:40.2360480Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2360580Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2361130Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2361180Z E          ...
2025-01-10T13:28:40.2361240Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2361340Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2361420Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2361420Z 
2025-01-10T13:28:40.2361480Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2361660Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-beta_sobolev] _
2025-01-10T13:28:40.2361660Z 
2025-01-10T13:28:40.2361770Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2361870Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2361950Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2362050Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2362160Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2362240Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2362290Z err_msg = None
2025-01-10T13:28:40.2362290Z 
2025-01-10T13:28:40.2362370Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2362430Z         if err_msg is None:
2025-01-10T13:28:40.2362500Z             if left.shape != right.shape:
2025-01-10T13:28:40.2362560Z                 raise_assert_detail(
2025-01-10T13:28:40.2362670Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2362720Z                 )
2025-01-10T13:28:40.2362770Z     
2025-01-10T13:28:40.2362810Z             diff = 0
2025-01-10T13:28:40.2362900Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2362960Z                 # count up differences
2025-01-10T13:28:40.2363100Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2363150Z                     diff += 1
2025-01-10T13:28:40.2363200Z     
2025-01-10T13:28:40.2363260Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2363370Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2363500Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2363590Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2363640Z E           
2025-01-10T13:28:40.2363730Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2363940Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2364370Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2364380Z 
2025-01-10T13:28:40.2364620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2364620Z 
2025-01-10T13:28:40.2364760Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2364760Z 
2025-01-10T13:28:40.2364930Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425b050>
2025-01-10T13:28:40.2365060Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>
2025-01-10T13:28:40.2365110Z attr = 'beta_sobolev'
2025-01-10T13:28:40.2365110Z 
2025-01-10T13:28:40.2365220Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2365360Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2365420Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2365460Z         try:
2025-01-10T13:28:40.2365570Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2365630Z         except KeyError:
2025-01-10T13:28:40.2365730Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2365770Z     
2025-01-10T13:28:40.2365830Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2365910Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2365970Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2366080Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2366130Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2366200Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2366280Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2366330Z             else:
2025-01-10T13:28:40.2366400Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2366480Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2366480Z 
2025-01-10T13:28:40.2366570Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2366650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2366770Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2366810Z     ???
2025-01-10T13:28:40.2366890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2366900Z 
2025-01-10T13:28:40.2366940Z >   ???
2025-01-10T13:28:40.2367030Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2367080Z E   
2025-01-10T13:28:40.2367170Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2367250Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2367300Z E          ...
2025-01-10T13:28:40.2367370Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2367470Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2367560Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2367610Z E          ...
2025-01-10T13:28:40.2367670Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2367770Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2367840Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2367840Z 
2025-01-10T13:28:40.2367910Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2368080Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-j_blues] __
2025-01-10T13:28:40.2368080Z 
2025-01-10T13:28:40.2368180Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2368280Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2368400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2368510Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2368610Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2368680Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2368730Z err_msg = None
2025-01-10T13:28:40.2368730Z 
2025-01-10T13:28:40.2368810Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2368870Z         if err_msg is None:
2025-01-10T13:28:40.2368930Z             if left.shape != right.shape:
2025-01-10T13:28:40.2368990Z                 raise_assert_detail(
2025-01-10T13:28:40.2369100Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2369150Z                 )
2025-01-10T13:28:40.2369200Z     
2025-01-10T13:28:40.2369290Z             diff = 0
2025-01-10T13:28:40.2369540Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2369600Z                 # count up differences
2025-01-10T13:28:40.2369740Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2369800Z                     diff += 1
2025-01-10T13:28:40.2369840Z     
2025-01-10T13:28:40.2369900Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2370010Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2370140Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2370220Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2370270Z E           
2025-01-10T13:28:40.2370360Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2370560Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2370780Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2370790Z 
2025-01-10T13:28:40.2371020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2371030Z 
2025-01-10T13:28:40.2371160Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2371170Z 
2025-01-10T13:28:40.2371330Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425b1d0>
2025-01-10T13:28:40.2371500Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e6e6d20>, attr = 'j_blues'
2025-01-10T13:28:40.2371510Z 
2025-01-10T13:28:40.2371610Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2371690Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2371750Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2371800Z         try:
2025-01-10T13:28:40.2371910Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2371960Z         except KeyError:
2025-01-10T13:28:40.2372070Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2372110Z     
2025-01-10T13:28:40.2372170Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2372240Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2372290Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2372400Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2372570Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2372630Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2372720Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2372760Z             else:
2025-01-10T13:28:40.2372830Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2372910Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2372920Z 
2025-01-10T13:28:40.2373010Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2373090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2373200Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2373250Z     ???
2025-01-10T13:28:40.2373330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2373330Z 
2025-01-10T13:28:40.2373380Z >   ???
2025-01-10T13:28:40.2373470Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2373570Z E   
2025-01-10T13:28:40.2373680Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2373760Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2373810Z E          ...
2025-01-10T13:28:40.2373870Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2373970Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2374060Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2374100Z E          ...
2025-01-10T13:28:40.2374170Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2374260Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2374340Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2374340Z 
2025-01-10T13:28:40.2374400Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2374570Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines] __
2025-01-10T13:28:40.2374570Z 
2025-01-10T13:28:40.2374670Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2374770Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2374850Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2374950Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2375050Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2375120Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2375170Z err_msg = None
2025-01-10T13:28:40.2375170Z 
2025-01-10T13:28:40.2375250Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2375300Z         if err_msg is None:
2025-01-10T13:28:40.2375370Z             if left.shape != right.shape:
2025-01-10T13:28:40.2375430Z                 raise_assert_detail(
2025-01-10T13:28:40.2375540Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2375580Z                 )
2025-01-10T13:28:40.2375620Z     
2025-01-10T13:28:40.2375670Z             diff = 0
2025-01-10T13:28:40.2375750Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2375810Z                 # count up differences
2025-01-10T13:28:40.2375940Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2375990Z                     diff += 1
2025-01-10T13:28:40.2376040Z     
2025-01-10T13:28:40.2376090Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2376200Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2376330Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2376410Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2376510Z E           
2025-01-10T13:28:40.2376600Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2376820Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2377030Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2377030Z 
2025-01-10T13:28:40.2377270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2377280Z 
2025-01-10T13:28:40.2377410Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2377620Z 
2025-01-10T13:28:40.2377810Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x14425bf50>
2025-01-10T13:28:40.2377970Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>, attr = 'lines'
2025-01-10T13:28:40.2377970Z 
2025-01-10T13:28:40.2378080Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2378160Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2378220Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2378260Z         try:
2025-01-10T13:28:40.2378370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2378420Z         except KeyError:
2025-01-10T13:28:40.2378530Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2378580Z     
2025-01-10T13:28:40.2378640Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2378710Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2378780Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2378880Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2378940Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2379000Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2379080Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2379130Z             else:
2025-01-10T13:28:40.2379200Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2379280Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2379280Z 
2025-01-10T13:28:40.2379370Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2379450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2379570Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2379620Z     ???
2025-01-10T13:28:40.2379710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2379720Z 
2025-01-10T13:28:40.2379760Z >   ???
2025-01-10T13:28:40.2379860Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2379900Z E   
2025-01-10T13:28:40.2380000Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2380080Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2380130Z E          ...
2025-01-10T13:28:40.2380190Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2380290Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2380370Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2380420Z E          ...
2025-01-10T13:28:40.2380480Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2380580Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2380660Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2381000Z 
2025-01-10T13:28:40.2381080Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2381290Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index] _
2025-01-10T13:28:40.2381290Z 
2025-01-10T13:28:40.2381460Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144284050>
2025-01-10T13:28:40.2381580Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>
2025-01-10T13:28:40.2381650Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.2381650Z 
2025-01-10T13:28:40.2381760Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2381840Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2381900Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2381940Z         try:
2025-01-10T13:28:40.2382050Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2382100Z         except KeyError:
2025-01-10T13:28:40.2382210Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2382310Z     
2025-01-10T13:28:40.2382370Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2382440Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2382500Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2382610Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2382670Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2382730Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2382810Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2382810Z 
2025-01-10T13:28:40.2382910Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2382990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2383000Z 
2025-01-10T13:28:40.2383100Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2383160Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2383250Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2383310Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2383420Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2383480Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2383560Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2383620Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2383660Z err_msg = None
2025-01-10T13:28:40.2383670Z 
2025-01-10T13:28:40.2383740Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2383800Z         if err_msg is None:
2025-01-10T13:28:40.2383860Z             if left.shape != right.shape:
2025-01-10T13:28:40.2383920Z                 raise_assert_detail(
2025-01-10T13:28:40.2384090Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2384190Z                 )
2025-01-10T13:28:40.2384240Z     
2025-01-10T13:28:40.2384290Z             diff = 0
2025-01-10T13:28:40.2384380Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2384440Z                 # count up differences
2025-01-10T13:28:40.2384570Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2384620Z                     diff += 1
2025-01-10T13:28:40.2384660Z     
2025-01-10T13:28:40.2384730Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2384830Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2384960Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2385040Z E           AssertionError: Series are different
2025-01-10T13:28:40.2385090Z E           
2025-01-10T13:28:40.2385160Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.2385470Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2385880Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2386150Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2386260Z 
2025-01-10T13:28:40.2386500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2386710Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index] _
2025-01-10T13:28:40.2386710Z 
2025-01-10T13:28:40.2386880Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144284110>
2025-01-10T13:28:40.2386990Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>
2025-01-10T13:28:40.2387060Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.2387060Z 
2025-01-10T13:28:40.2387160Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2387250Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2387310Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2387360Z         try:
2025-01-10T13:28:40.2387470Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2387530Z         except KeyError:
2025-01-10T13:28:40.2387640Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2387680Z     
2025-01-10T13:28:40.2387740Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2387810Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2387870Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2390850Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2390980Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2391060Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2391140Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2391140Z 
2025-01-10T13:28:40.2391240Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2391330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2391350Z 
2025-01-10T13:28:40.2391460Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2391520Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2391600Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2391660Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2391770Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2391830Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2391910Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2391960Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2392010Z err_msg = None
2025-01-10T13:28:40.2392020Z 
2025-01-10T13:28:40.2392090Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2392150Z         if err_msg is None:
2025-01-10T13:28:40.2392500Z             if left.shape != right.shape:
2025-01-10T13:28:40.2392560Z                 raise_assert_detail(
2025-01-10T13:28:40.2392670Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2392720Z                 )
2025-01-10T13:28:40.2392760Z     
2025-01-10T13:28:40.2392810Z             diff = 0
2025-01-10T13:28:40.2392890Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2392950Z                 # count up differences
2025-01-10T13:28:40.2393080Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2393130Z                     diff += 1
2025-01-10T13:28:40.2393170Z     
2025-01-10T13:28:40.2393230Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2393330Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2393460Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2393540Z E           AssertionError: Series are different
2025-01-10T13:28:40.2393660Z E           
2025-01-10T13:28:40.2393730Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.2394030Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2394330Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2394630Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2394640Z 
2025-01-10T13:28:40.2394870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2395030Z ___ TestPlasma.test_plasma_properties[disable_electron_scattering:False-nu] ____
2025-01-10T13:28:40.2395040Z 
2025-01-10T13:28:40.2395140Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2395240Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2395320Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2395420Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2395520Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2395590Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2395640Z err_msg = None
2025-01-10T13:28:40.2395640Z 
2025-01-10T13:28:40.2395720Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2395770Z         if err_msg is None:
2025-01-10T13:28:40.2395840Z             if left.shape != right.shape:
2025-01-10T13:28:40.2395900Z                 raise_assert_detail(
2025-01-10T13:28:40.2396010Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2396060Z                 )
2025-01-10T13:28:40.2396100Z     
2025-01-10T13:28:40.2396200Z             diff = 0
2025-01-10T13:28:40.2396280Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2396350Z                 # count up differences
2025-01-10T13:28:40.2396480Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2396530Z                     diff += 1
2025-01-10T13:28:40.2396580Z     
2025-01-10T13:28:40.2396640Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2396740Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2396870Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2396960Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2397010Z E           
2025-01-10T13:28:40.2397090Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2397330Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2397850Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2397850Z 
2025-01-10T13:28:40.2398090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2398090Z 
2025-01-10T13:28:40.2398240Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2398240Z 
2025-01-10T13:28:40.2398440Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144284350>
2025-01-10T13:28:40.2398590Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>, attr = 'nu'
2025-01-10T13:28:40.2398600Z 
2025-01-10T13:28:40.2398700Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2399040Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2399110Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2399160Z         try:
2025-01-10T13:28:40.2399280Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2399330Z         except KeyError:
2025-01-10T13:28:40.2399440Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2399500Z     
2025-01-10T13:28:40.2399590Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2399680Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2399760Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2399870Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2399930Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2400000Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2400090Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2400090Z 
2025-01-10T13:28:40.2412970Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2413430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2413760Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2413890Z     ???
2025-01-10T13:28:40.2414120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2414120Z 
2025-01-10T13:28:40.2414260Z >   ???
2025-01-10T13:28:40.2414520Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2414660Z E   
2025-01-10T13:28:40.2414940Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2415180Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2416400Z E          ...
2025-01-10T13:28:40.2416600Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2416860Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2417080Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2417220Z E          ...
2025-01-10T13:28:40.2417390Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2417640Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2417850Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2417860Z 
2025-01-10T13:28:40.2418030Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2418520Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-wavelength_cm] _
2025-01-10T13:28:40.2418530Z 
2025-01-10T13:28:40.2418800Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2419050Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2419550Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2419820Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2420070Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2420250Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2420400Z err_msg = None
2025-01-10T13:28:40.2420410Z 
2025-01-10T13:28:40.2420630Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2420780Z         if err_msg is None:
2025-01-10T13:28:40.2420960Z             if left.shape != right.shape:
2025-01-10T13:28:40.2421120Z                 raise_assert_detail(
2025-01-10T13:28:40.2421410Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2421550Z                 )
2025-01-10T13:28:40.2421670Z     
2025-01-10T13:28:40.2421820Z             diff = 0
2025-01-10T13:28:40.2422050Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2422230Z                 # count up differences
2025-01-10T13:28:40.2422580Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2422750Z                     diff += 1
2025-01-10T13:28:40.2422880Z     
2025-01-10T13:28:40.2423040Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2423310Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2423660Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2423880Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2424020Z E           
2025-01-10T13:28:40.2424230Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2424800Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2425850Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2425880Z 
2025-01-10T13:28:40.2426520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2426530Z 
2025-01-10T13:28:40.2427230Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2427410Z 
2025-01-10T13:28:40.2427910Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144284410>
2025-01-10T13:28:40.2428550Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>
2025-01-10T13:28:40.2428730Z attr = 'wavelength_cm'
2025-01-10T13:28:40.2428730Z 
2025-01-10T13:28:40.2429010Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2429260Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2429420Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2429550Z         try:
2025-01-10T13:28:40.2429840Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2430000Z         except KeyError:
2025-01-10T13:28:40.2430280Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2430400Z     
2025-01-10T13:28:40.2430580Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2430760Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2430930Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2431190Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2431360Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2431700Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2431910Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2431920Z 
2025-01-10T13:28:40.2432170Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2432400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2432690Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2433020Z     ???
2025-01-10T13:28:40.2433300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2433310Z 
2025-01-10T13:28:40.2433560Z >   ???
2025-01-10T13:28:40.2433830Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2433960Z E   
2025-01-10T13:28:40.2434220Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2434440Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2434600Z E          ...
2025-01-10T13:28:40.2434770Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2435040Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2435260Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2435390Z E          ...
2025-01-10T13:28:40.2435560Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2435820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2436030Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2436040Z 
2025-01-10T13:28:40.2436570Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2438070Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:False-f_lu] ___
2025-01-10T13:28:40.2438200Z 
2025-01-10T13:28:40.2438630Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2439080Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2439420Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2439690Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2439950Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2440130Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2440280Z err_msg = None
2025-01-10T13:28:40.2440290Z 
2025-01-10T13:28:40.2440500Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2440650Z         if err_msg is None:
2025-01-10T13:28:40.2440840Z             if left.shape != right.shape:
2025-01-10T13:28:40.2441000Z                 raise_assert_detail(
2025-01-10T13:28:40.2441290Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2441430Z                 )
2025-01-10T13:28:40.2441560Z     
2025-01-10T13:28:40.2442040Z             diff = 0
2025-01-10T13:28:40.2442260Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2442440Z                 # count up differences
2025-01-10T13:28:40.2442780Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2442930Z                     diff += 1
2025-01-10T13:28:40.2443060Z     
2025-01-10T13:28:40.2443230Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2443500Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2443850Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2444080Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2444210Z E           
2025-01-10T13:28:40.2444430Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2445000Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2445720Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2445740Z 
2025-01-10T13:28:40.2446370Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2446380Z 
2025-01-10T13:28:40.2446720Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2446730Z 
2025-01-10T13:28:40.2447170Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442844d0>
2025-01-10T13:28:40.2447600Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>, attr = 'f_lu'
2025-01-10T13:28:40.2447620Z 
2025-01-10T13:28:40.2447900Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2448130Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2448290Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2448430Z         try:
2025-01-10T13:28:40.2448700Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2448860Z         except KeyError:
2025-01-10T13:28:40.2449130Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2449270Z     
2025-01-10T13:28:40.2449440Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2449610Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2449790Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2450050Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2450230Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2450410Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2450620Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2450640Z 
2025-01-10T13:28:40.2450880Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2451100Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2451400Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2451530Z     ???
2025-01-10T13:28:40.2451760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2451770Z 
2025-01-10T13:28:40.2451890Z >   ???
2025-01-10T13:28:40.2452140Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2452280Z E   
2025-01-10T13:28:40.2453120Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2453440Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2453810Z E          ...
2025-01-10T13:28:40.2454000Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2454280Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2454500Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2454640Z E          ...
2025-01-10T13:28:40.2455550Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2455860Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2456070Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2456080Z 
2025-01-10T13:28:40.2456250Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2456740Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-tau_sobolevs] _
2025-01-10T13:28:40.2456750Z 
2025-01-10T13:28:40.2457010Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2457270Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2458060Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2458330Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2458600Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2458800Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2458970Z err_msg = None
2025-01-10T13:28:40.2458990Z 
2025-01-10T13:28:40.2459220Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2459380Z         if err_msg is None:
2025-01-10T13:28:40.2459560Z             if left.shape != right.shape:
2025-01-10T13:28:40.2459730Z                 raise_assert_detail(
2025-01-10T13:28:40.2460010Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2460150Z                 )
2025-01-10T13:28:40.2460290Z     
2025-01-10T13:28:40.2460430Z             diff = 0
2025-01-10T13:28:40.2460810Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2460980Z                 # count up differences
2025-01-10T13:28:40.2461320Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2461470Z                     diff += 1
2025-01-10T13:28:40.2461600Z     
2025-01-10T13:28:40.2461780Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2462040Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2462390Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2462630Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2462760Z E           
2025-01-10T13:28:40.2463000Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2463580Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2464170Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2464180Z 
2025-01-10T13:28:40.2464820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2464830Z 
2025-01-10T13:28:40.2465180Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2465190Z 
2025-01-10T13:28:40.2465630Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144284c50>
2025-01-10T13:28:40.2466920Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>
2025-01-10T13:28:40.2467140Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.2467150Z 
2025-01-10T13:28:40.2467450Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2467690Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2467850Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2468000Z         try:
2025-01-10T13:28:40.2468280Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2468440Z         except KeyError:
2025-01-10T13:28:40.2469380Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2469650Z     
2025-01-10T13:28:40.2469840Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2470030Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2470340Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2470820Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2471030Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2471470Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2471690Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2471840Z             else:
2025-01-10T13:28:40.2472020Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2472250Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2472260Z 
2025-01-10T13:28:40.2472510Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2472740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2473040Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2473180Z     ???
2025-01-10T13:28:40.2473400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2473410Z 
2025-01-10T13:28:40.2473540Z >   ???
2025-01-10T13:28:40.2473790Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2473930Z E   
2025-01-10T13:28:40.2474190Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2474420Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2474580Z E          ...
2025-01-10T13:28:40.2474750Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2475020Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2475250Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2475390Z E          ...
2025-01-10T13:28:40.2475550Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2475800Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2476020Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2476020Z 
2025-01-10T13:28:40.2476190Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2476680Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-beta_sobolev] _
2025-01-10T13:28:40.2476700Z 
2025-01-10T13:28:40.2476960Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2477220Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2477410Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2477680Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2477930Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2478110Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2478260Z err_msg = None
2025-01-10T13:28:40.2478270Z 
2025-01-10T13:28:40.2478490Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2478650Z         if err_msg is None:
2025-01-10T13:28:40.2478830Z             if left.shape != right.shape:
2025-01-10T13:28:40.2478980Z                 raise_assert_detail(
2025-01-10T13:28:40.2479500Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2479630Z                 )
2025-01-10T13:28:40.2479770Z     
2025-01-10T13:28:40.2479910Z             diff = 0
2025-01-10T13:28:40.2480160Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2480350Z                 # count up differences
2025-01-10T13:28:40.2480700Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2480850Z                     diff += 1
2025-01-10T13:28:40.2480980Z     
2025-01-10T13:28:40.2481170Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2481440Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2481820Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2482240Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2482940Z E           
2025-01-10T13:28:40.2483950Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2484540Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2485110Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2485120Z 
2025-01-10T13:28:40.2485760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2485770Z 
2025-01-10T13:28:40.2486150Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2486170Z 
2025-01-10T13:28:40.2486610Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144284d10>
2025-01-10T13:28:40.2486930Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>
2025-01-10T13:28:40.2487080Z attr = 'beta_sobolev'
2025-01-10T13:28:40.2487090Z 
2025-01-10T13:28:40.2487360Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2487600Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2487760Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2487900Z         try:
2025-01-10T13:28:40.2488170Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2488330Z         except KeyError:
2025-01-10T13:28:40.2488610Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2488740Z     
2025-01-10T13:28:40.2488910Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2489100Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2489270Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2489550Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2489710Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2489890Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2490100Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2490250Z             else:
2025-01-10T13:28:40.2490430Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2490640Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2490640Z 
2025-01-10T13:28:40.2490900Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2491120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2491430Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2491560Z     ???
2025-01-10T13:28:40.2492070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2492100Z 
2025-01-10T13:28:40.2492230Z >   ???
2025-01-10T13:28:40.2492480Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2492620Z E   
2025-01-10T13:28:40.2492880Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2493280Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2493420Z E          ...
2025-01-10T13:28:40.2493580Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2493840Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2494060Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2494200Z E          ...
2025-01-10T13:28:40.2494360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2494610Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2494820Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2494990Z 
2025-01-10T13:28:40.2495160Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2495610Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-j_blues] _
2025-01-10T13:28:40.2495620Z 
2025-01-10T13:28:40.2495870Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2496140Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2496320Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2496590Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2496840Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2497020Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2497170Z err_msg = None
2025-01-10T13:28:40.2497180Z 
2025-01-10T13:28:40.2497400Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2497560Z         if err_msg is None:
2025-01-10T13:28:40.2497740Z             if left.shape != right.shape:
2025-01-10T13:28:40.2497890Z                 raise_assert_detail(
2025-01-10T13:28:40.2498180Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2498320Z                 )
2025-01-10T13:28:40.2498450Z     
2025-01-10T13:28:40.2498600Z             diff = 0
2025-01-10T13:28:40.2498850Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2499020Z                 # count up differences
2025-01-10T13:28:40.2499390Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2499550Z                     diff += 1
2025-01-10T13:28:40.2499680Z     
2025-01-10T13:28:40.2499840Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2500110Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2500470Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2500700Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2500840Z E           
2025-01-10T13:28:40.2501060Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2501620Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2502190Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2502370Z 
2025-01-10T13:28:40.2503010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2503010Z 
2025-01-10T13:28:40.2503360Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2503370Z 
2025-01-10T13:28:40.2503800Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144284e90>
2025-01-10T13:28:40.2504210Z plasma = <tardis.plasma.base.BasePlasma object at 0x16e719070>, attr = 'j_blues'
2025-01-10T13:28:40.2504220Z 
2025-01-10T13:28:40.2504490Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2504710Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2504880Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2505010Z         try:
2025-01-10T13:28:40.2505300Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2505450Z         except KeyError:
2025-01-10T13:28:40.2505730Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2506680Z     
2025-01-10T13:28:40.2506850Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2507040Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2507200Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2507470Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2507640Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2507810Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2508040Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2508170Z             else:
2025-01-10T13:28:40.2508360Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2508570Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2508570Z 
2025-01-10T13:28:40.2508820Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2509050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2509350Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2509490Z     ???
2025-01-10T13:28:40.2509700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2509710Z 
2025-01-10T13:28:40.2509850Z >   ???
2025-01-10T13:28:40.2510090Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2510230Z E   
2025-01-10T13:28:40.2510480Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2510700Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2510840Z E          ...
2025-01-10T13:28:40.2511000Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2511250Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2511480Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2511620Z E          ...
2025-01-10T13:28:40.2511800Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2512050Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2512250Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2512260Z 
2025-01-10T13:28:40.2512430Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2512980Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] _
2025-01-10T13:28:40.2512990Z 
2025-01-10T13:28:40.2513250Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2513510Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2513700Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2513990Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2514260Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2514980Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2515130Z err_msg = None
2025-01-10T13:28:40.2515140Z 
2025-01-10T13:28:40.2515360Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2515510Z         if err_msg is None:
2025-01-10T13:28:40.2515700Z             if left.shape != right.shape:
2025-01-10T13:28:40.2515860Z                 raise_assert_detail(
2025-01-10T13:28:40.2516140Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2516290Z                 )
2025-01-10T13:28:40.2516690Z     
2025-01-10T13:28:40.2516840Z             diff = 0
2025-01-10T13:28:40.2516940Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2517010Z                 # count up differences
2025-01-10T13:28:40.2517150Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2517210Z                     diff += 1
2025-01-10T13:28:40.2517610Z     
2025-01-10T13:28:40.2517670Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2517790Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2517920Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2518000Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2518050Z E           
2025-01-10T13:28:40.2518130Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2518350Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2518560Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2518570Z 
2025-01-10T13:28:40.2518820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2518820Z 
2025-01-10T13:28:40.2518950Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2518950Z 
2025-01-10T13:28:40.2519130Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144285c10>
2025-01-10T13:28:40.2519280Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>, attr = 'lines'
2025-01-10T13:28:40.2519280Z 
2025-01-10T13:28:40.2519390Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2519470Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2519530Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2519590Z         try:
2025-01-10T13:28:40.2519700Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2519750Z         except KeyError:
2025-01-10T13:28:40.2519860Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2519900Z     
2025-01-10T13:28:40.2519960Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2520020Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2520080Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2520190Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2520240Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2520310Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2520390Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2520430Z             else:
2025-01-10T13:28:40.2520500Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2520580Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2520680Z 
2025-01-10T13:28:40.2520770Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2520860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2520980Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2521020Z     ???
2025-01-10T13:28:40.2521110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2521110Z 
2025-01-10T13:28:40.2521150Z >   ???
2025-01-10T13:28:40.2521250Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2521290Z E   
2025-01-10T13:28:40.2521390Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2521480Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2521520Z E          ...
2025-01-10T13:28:40.2521590Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2521680Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2521830Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2521880Z E          ...
2025-01-10T13:28:40.2521940Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2522030Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2522100Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2522110Z 
2025-01-10T13:28:40.2522170Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2522410Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] _
2025-01-10T13:28:40.2522420Z 
2025-01-10T13:28:40.2522580Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144285cd0>
2025-01-10T13:28:40.2522700Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>
2025-01-10T13:28:40.2522760Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.2522770Z 
2025-01-10T13:28:40.2522870Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2522960Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2523020Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2523070Z         try:
2025-01-10T13:28:40.2523170Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2523220Z         except KeyError:
2025-01-10T13:28:40.2523330Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2523370Z     
2025-01-10T13:28:40.2523430Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2523490Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2523550Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2523660Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2523710Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2523780Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2523860Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2523860Z 
2025-01-10T13:28:40.2523960Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2524050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2524050Z 
2025-01-10T13:28:40.2524160Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2524220Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2524300Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2524360Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2524470Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2524530Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2524610Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2524670Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2524770Z err_msg = None
2025-01-10T13:28:40.2524770Z 
2025-01-10T13:28:40.2524890Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2524950Z         if err_msg is None:
2025-01-10T13:28:40.2525030Z             if left.shape != right.shape:
2025-01-10T13:28:40.2525100Z                 raise_assert_detail(
2025-01-10T13:28:40.2525210Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2525260Z                 )
2025-01-10T13:28:40.2525300Z     
2025-01-10T13:28:40.2525350Z             diff = 0
2025-01-10T13:28:40.2525430Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2525490Z                 # count up differences
2025-01-10T13:28:40.2525620Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2525670Z                     diff += 1
2025-01-10T13:28:40.2525710Z     
2025-01-10T13:28:40.2525770Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2525880Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2526110Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2526190Z E           AssertionError: Series are different
2025-01-10T13:28:40.2526230Z E           
2025-01-10T13:28:40.2526310Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.2526600Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2526860Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2527120Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2527130Z 
2025-01-10T13:28:40.2527370Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2527600Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] _
2025-01-10T13:28:40.2527610Z 
2025-01-10T13:28:40.2527780Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144285d90>
2025-01-10T13:28:40.2527900Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>
2025-01-10T13:28:40.2527970Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.2527970Z 
2025-01-10T13:28:40.2528070Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2528170Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2528230Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2528270Z         try:
2025-01-10T13:28:40.2528390Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2528440Z         except KeyError:
2025-01-10T13:28:40.2528550Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2528590Z     
2025-01-10T13:28:40.2528650Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2528720Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2528780Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2528940Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2529010Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2529080Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2529160Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2529160Z 
2025-01-10T13:28:40.2529250Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2536870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2536900Z 
2025-01-10T13:28:40.2537030Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2537090Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2537170Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2537230Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2537330Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2537770Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2537850Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2537910Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2537950Z err_msg = None
2025-01-10T13:28:40.2537960Z 
2025-01-10T13:28:40.2538030Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2538090Z         if err_msg is None:
2025-01-10T13:28:40.2538160Z             if left.shape != right.shape:
2025-01-10T13:28:40.2538210Z                 raise_assert_detail(
2025-01-10T13:28:40.2538320Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2538370Z                 )
2025-01-10T13:28:40.2538410Z     
2025-01-10T13:28:40.2538450Z             diff = 0
2025-01-10T13:28:40.2538530Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2538590Z                 # count up differences
2025-01-10T13:28:40.2538730Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2538790Z                     diff += 1
2025-01-10T13:28:40.2538830Z     
2025-01-10T13:28:40.2538890Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2538990Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2539120Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2539190Z E           AssertionError: Series are different
2025-01-10T13:28:40.2539240Z E           
2025-01-10T13:28:40.2539310Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.2539600Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2539910Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2540200Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2540580Z 
2025-01-10T13:28:40.2540830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2541040Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] _
2025-01-10T13:28:40.2541040Z 
2025-01-10T13:28:40.2541140Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2541250Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2541320Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2541420Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2541520Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2541590Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2541640Z err_msg = None
2025-01-10T13:28:40.2541640Z 
2025-01-10T13:28:40.2541770Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2541830Z         if err_msg is None:
2025-01-10T13:28:40.2541900Z             if left.shape != right.shape:
2025-01-10T13:28:40.2541950Z                 raise_assert_detail(
2025-01-10T13:28:40.2542060Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2542100Z                 )
2025-01-10T13:28:40.2542150Z     
2025-01-10T13:28:40.2542190Z             diff = 0
2025-01-10T13:28:40.2542270Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2542330Z                 # count up differences
2025-01-10T13:28:40.2542460Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2542520Z                     diff += 1
2025-01-10T13:28:40.2542560Z     
2025-01-10T13:28:40.2542620Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2542720Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2542860Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2542940Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2542980Z E           
2025-01-10T13:28:40.2543070Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2543270Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2543480Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2543480Z 
2025-01-10T13:28:40.2543720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2543720Z 
2025-01-10T13:28:40.2543850Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2543850Z 
2025-01-10T13:28:40.2544020Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144285fd0>
2025-01-10T13:28:40.2544170Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>, attr = 'nu'
2025-01-10T13:28:40.2544170Z 
2025-01-10T13:28:40.2544270Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2544360Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2544410Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2544460Z         try:
2025-01-10T13:28:40.2544560Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2544660Z         except KeyError:
2025-01-10T13:28:40.2544770Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2544810Z     
2025-01-10T13:28:40.2544870Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2544930Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2544990Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2545100Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2545150Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2545220Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2545300Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2545300Z 
2025-01-10T13:28:40.2545390Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2545470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2545580Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2545630Z     ???
2025-01-10T13:28:40.2545720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2545770Z 
2025-01-10T13:28:40.2545810Z >   ???
2025-01-10T13:28:40.2545910Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2545950Z E   
2025-01-10T13:28:40.2546050Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2546130Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2546180Z E          ...
2025-01-10T13:28:40.2546240Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2546340Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2546420Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2546460Z E          ...
2025-01-10T13:28:40.2546520Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2546620Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2546690Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2546700Z 
2025-01-10T13:28:40.2546760Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2546990Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] _
2025-01-10T13:28:40.2546990Z 
2025-01-10T13:28:40.2547100Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2547200Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2547300Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2547400Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2547510Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2547590Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2547640Z err_msg = None
2025-01-10T13:28:40.2547650Z 
2025-01-10T13:28:40.2547730Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2547780Z         if err_msg is None:
2025-01-10T13:28:40.2547850Z             if left.shape != right.shape:
2025-01-10T13:28:40.2547910Z                 raise_assert_detail(
2025-01-10T13:28:40.2548020Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2548060Z                 )
2025-01-10T13:28:40.2548100Z     
2025-01-10T13:28:40.2548150Z             diff = 0
2025-01-10T13:28:40.2548230Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2548290Z                 # count up differences
2025-01-10T13:28:40.2548420Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2548470Z                     diff += 1
2025-01-10T13:28:40.2548510Z     
2025-01-10T13:28:40.2548570Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2548670Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2548860Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2548950Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2549000Z E           
2025-01-10T13:28:40.2549080Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2549280Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2549480Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2549540Z 
2025-01-10T13:28:40.2549780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2549780Z 
2025-01-10T13:28:40.2549910Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2549910Z 
2025-01-10T13:28:40.2550080Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144286090>
2025-01-10T13:28:40.2550210Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>
2025-01-10T13:28:40.2550260Z attr = 'wavelength_cm'
2025-01-10T13:28:40.2550260Z 
2025-01-10T13:28:40.2550370Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2550450Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2550510Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2550550Z         try:
2025-01-10T13:28:40.2550660Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2550720Z         except KeyError:
2025-01-10T13:28:40.2550830Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2550870Z     
2025-01-10T13:28:40.2550930Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2550990Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2551050Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2551150Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2551210Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2551280Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2551360Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2551360Z 
2025-01-10T13:28:40.2551450Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2551540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2551650Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2551690Z     ???
2025-01-10T13:28:40.2551780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2551780Z 
2025-01-10T13:28:40.2551820Z >   ???
2025-01-10T13:28:40.2551920Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2551960Z E   
2025-01-10T13:28:40.2552050Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2552140Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2552180Z E          ...
2025-01-10T13:28:40.2552250Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2552340Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2552430Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2552470Z E          ...
2025-01-10T13:28:40.2552530Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2552630Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2552750Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2552750Z 
2025-01-10T13:28:40.2552820Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2553020Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] _
2025-01-10T13:28:40.2553020Z 
2025-01-10T13:28:40.2553120Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2553220Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2553290Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2553390Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2553490Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2553560Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2553610Z err_msg = None
2025-01-10T13:28:40.2553840Z 
2025-01-10T13:28:40.2553930Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2553990Z         if err_msg is None:
2025-01-10T13:28:40.2554060Z             if left.shape != right.shape:
2025-01-10T13:28:40.2554110Z                 raise_assert_detail(
2025-01-10T13:28:40.2554220Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2554270Z                 )
2025-01-10T13:28:40.2554310Z     
2025-01-10T13:28:40.2554360Z             diff = 0
2025-01-10T13:28:40.2554450Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2554500Z                 # count up differences
2025-01-10T13:28:40.2554640Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2554690Z                     diff += 1
2025-01-10T13:28:40.2554730Z     
2025-01-10T13:28:40.2554790Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2554900Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2555040Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2555120Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2555160Z E           
2025-01-10T13:28:40.2555250Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2555450Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2555650Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2555660Z 
2025-01-10T13:28:40.2555890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2555890Z 
2025-01-10T13:28:40.2556020Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2556020Z 
2025-01-10T13:28:40.2556190Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144286150>
2025-01-10T13:28:40.2556340Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>, attr = 'f_lu'
2025-01-10T13:28:40.2556340Z 
2025-01-10T13:28:40.2556440Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2556530Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2556590Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2556630Z         try:
2025-01-10T13:28:40.2556740Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2557050Z         except KeyError:
2025-01-10T13:28:40.2557160Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2557200Z     
2025-01-10T13:28:40.2557260Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2557320Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2557380Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2557480Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2557540Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2557600Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2557680Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2557680Z 
2025-01-10T13:28:40.2557770Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2557860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2557970Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2558070Z     ???
2025-01-10T13:28:40.2558150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2558160Z 
2025-01-10T13:28:40.2558200Z >   ???
2025-01-10T13:28:40.2558300Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2558340Z E   
2025-01-10T13:28:40.2558430Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2558520Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2558560Z E          ...
2025-01-10T13:28:40.2558620Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2558720Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2558800Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2558840Z E          ...
2025-01-10T13:28:40.2558910Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2559000Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2559080Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2559090Z 
2025-01-10T13:28:40.2559150Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2559400Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] _
2025-01-10T13:28:40.2559400Z 
2025-01-10T13:28:40.2559570Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144286750>
2025-01-10T13:28:40.2559680Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>
2025-01-10T13:28:40.2559750Z attr = 'stimulated_emission_factor'
2025-01-10T13:28:40.2559750Z 
2025-01-10T13:28:40.2559850Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2559940Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2559990Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2560040Z         try:
2025-01-10T13:28:40.2560140Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2560200Z         except KeyError:
2025-01-10T13:28:40.2560310Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2560350Z     
2025-01-10T13:28:40.2560410Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2560470Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2560530Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2560630Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2560690Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2560750Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2560830Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2560880Z             else:
2025-01-10T13:28:40.2560940Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2561020Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2561020Z 
2025-01-10T13:28:40.2561110Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2561250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2561360Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2561410Z     ???
2025-01-10T13:28:40.2561490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2561500Z 
2025-01-10T13:28:40.2561540Z >   ???
2025-01-10T13:28:40.2561670Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.2561710Z E   
2025-01-10T13:28:40.2561840Z E   DataFrame.iloc[:, 0] (column name="0") values are different (0.80972 %)
2025-01-10T13:28:40.2562140Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2565750Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995981197664222, 0.9995995247961845, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464476, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812783, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235581, ...]
2025-01-10T13:28:40.2569300Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995995247961845, 0.9995981197664222, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812795, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235604, ...]
2025-01-10T13:28:40.2573080Z E   At positional index 124, first diff: 0.9928779361771577 != 0.9929028359129612
2025-01-10T13:28:40.2573110Z 
2025-01-10T13:28:40.2573300Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2573540Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] _
2025-01-10T13:28:40.2573550Z 
2025-01-10T13:28:40.2573900Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2574010Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2574080Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2574180Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2574280Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2574350Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2574400Z err_msg = None
2025-01-10T13:28:40.2574400Z 
2025-01-10T13:28:40.2574480Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2574530Z         if err_msg is None:
2025-01-10T13:28:40.2574600Z             if left.shape != right.shape:
2025-01-10T13:28:40.2574660Z                 raise_assert_detail(
2025-01-10T13:28:40.2574770Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2574820Z                 )
2025-01-10T13:28:40.2574860Z     
2025-01-10T13:28:40.2574900Z             diff = 0
2025-01-10T13:28:40.2574990Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2575040Z                 # count up differences
2025-01-10T13:28:40.2575180Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2575230Z                     diff += 1
2025-01-10T13:28:40.2575280Z     
2025-01-10T13:28:40.2575330Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2575440Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2575570Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2575650Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2575700Z E           
2025-01-10T13:28:40.2575780Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2575980Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2576190Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2576190Z 
2025-01-10T13:28:40.2576430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2576430Z 
2025-01-10T13:28:40.2576610Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2576620Z 
2025-01-10T13:28:40.2576790Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144286810>
2025-01-10T13:28:40.2576910Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>
2025-01-10T13:28:40.2576970Z attr = 'previous_beta_sobolev'
2025-01-10T13:28:40.2576980Z 
2025-01-10T13:28:40.2577080Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2577160Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2577220Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2577260Z         try:
2025-01-10T13:28:40.2577370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2577420Z         except KeyError:
2025-01-10T13:28:40.2577520Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2577560Z     
2025-01-10T13:28:40.2577620Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2577690Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2577990Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2578090Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2578150Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2578210Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2578290Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2578340Z             else:
2025-01-10T13:28:40.2578400Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2578490Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2578490Z 
2025-01-10T13:28:40.2578580Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2578670Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2578780Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2578820Z     ???
2025-01-10T13:28:40.2578910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2578910Z 
2025-01-10T13:28:40.2578960Z >   ???
2025-01-10T13:28:40.2579050Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2579090Z E   
2025-01-10T13:28:40.2579190Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2579270Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2579310Z E          ...
2025-01-10T13:28:40.2579380Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2579470Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2579560Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2579620Z E          ...
2025-01-10T13:28:40.2579710Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2579800Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2579870Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2579880Z 
2025-01-10T13:28:40.2579940Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2580160Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] _
2025-01-10T13:28:40.2580160Z 
2025-01-10T13:28:40.2580260Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2580360Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2580430Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2580530Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2580630Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2580690Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2580740Z err_msg = None
2025-01-10T13:28:40.2581030Z 
2025-01-10T13:28:40.2581120Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2581180Z         if err_msg is None:
2025-01-10T13:28:40.2581250Z             if left.shape != right.shape:
2025-01-10T13:28:40.2581310Z                 raise_assert_detail(
2025-01-10T13:28:40.2581420Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2581460Z                 )
2025-01-10T13:28:40.2581500Z     
2025-01-10T13:28:40.2581550Z             diff = 0
2025-01-10T13:28:40.2581630Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2581690Z                 # count up differences
2025-01-10T13:28:40.2581820Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2581870Z                     diff += 1
2025-01-10T13:28:40.2581910Z     
2025-01-10T13:28:40.2581970Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2582070Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2582280Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2582360Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2582410Z E           
2025-01-10T13:28:40.2582490Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2582690Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2582900Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2582910Z 
2025-01-10T13:28:40.2583190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2583190Z 
2025-01-10T13:28:40.2583320Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2583320Z 
2025-01-10T13:28:40.2583490Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442868d0>
2025-01-10T13:28:40.2583610Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>
2025-01-10T13:28:40.2583660Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.2583660Z 
2025-01-10T13:28:40.2583770Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2583850Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2583900Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2583950Z         try:
2025-01-10T13:28:40.2584050Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2584110Z         except KeyError:
2025-01-10T13:28:40.2584220Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2584260Z     
2025-01-10T13:28:40.2584320Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2584390Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2584440Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2584540Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2584600Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2584660Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2584740Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2584780Z             else:
2025-01-10T13:28:40.2584850Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2584930Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2584930Z 
2025-01-10T13:28:40.2585020Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2585170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2585280Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2585330Z     ???
2025-01-10T13:28:40.2585410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2585420Z 
2025-01-10T13:28:40.2585460Z >   ???
2025-01-10T13:28:40.2585550Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2585600Z E   
2025-01-10T13:28:40.2585690Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2585780Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2585820Z E          ...
2025-01-10T13:28:40.2585880Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2585980Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2586060Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2586110Z E          ...
2025-01-10T13:28:40.2586220Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2586320Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2586390Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2586390Z 
2025-01-10T13:28:40.2586450Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2586670Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] _
2025-01-10T13:28:40.2586670Z 
2025-01-10T13:28:40.2586770Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2586870Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2586940Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2587040Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2587140Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2587210Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2587260Z err_msg = None
2025-01-10T13:28:40.2587260Z 
2025-01-10T13:28:40.2587340Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2587390Z         if err_msg is None:
2025-01-10T13:28:40.2587460Z             if left.shape != right.shape:
2025-01-10T13:28:40.2587510Z                 raise_assert_detail(
2025-01-10T13:28:40.2587620Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2587660Z                 )
2025-01-10T13:28:40.2587710Z     
2025-01-10T13:28:40.2587750Z             diff = 0
2025-01-10T13:28:40.2587830Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2587890Z                 # count up differences
2025-01-10T13:28:40.2588030Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2588080Z                     diff += 1
2025-01-10T13:28:40.2588130Z     
2025-01-10T13:28:40.2588190Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2588290Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2588420Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2588500Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2588550Z E           
2025-01-10T13:28:40.2588630Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2588830Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2589040Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2589100Z 
2025-01-10T13:28:40.2589330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2589340Z 
2025-01-10T13:28:40.2589460Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2589470Z 
2025-01-10T13:28:40.2589630Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144286990>
2025-01-10T13:28:40.2589750Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>
2025-01-10T13:28:40.2589800Z attr = 'beta_sobolev'
2025-01-10T13:28:40.2589800Z 
2025-01-10T13:28:40.2589900Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2589990Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2590100Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2590140Z         try:
2025-01-10T13:28:40.2590250Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2590310Z         except KeyError:
2025-01-10T13:28:40.2590410Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2590450Z     
2025-01-10T13:28:40.2590510Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2590570Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2590630Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2590730Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2590790Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2590850Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2590930Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2590970Z             else:
2025-01-10T13:28:40.2591040Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2591130Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2591130Z 
2025-01-10T13:28:40.2591220Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2591310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2591420Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2591460Z     ???
2025-01-10T13:28:40.2591550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2591550Z 
2025-01-10T13:28:40.2591590Z >   ???
2025-01-10T13:28:40.2591690Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2591730Z E   
2025-01-10T13:28:40.2591830Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2591910Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2591960Z E          ...
2025-01-10T13:28:40.2592020Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2592120Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2592200Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2592250Z E          ...
2025-01-10T13:28:40.2592310Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2592400Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2592470Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2592480Z 
2025-01-10T13:28:40.2592540Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2592740Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] _
2025-01-10T13:28:40.2592740Z 
2025-01-10T13:28:40.2592840Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2592940Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2593060Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2593170Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2593260Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2593330Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2593380Z err_msg = None
2025-01-10T13:28:40.2593380Z 
2025-01-10T13:28:40.2593460Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2593510Z         if err_msg is None:
2025-01-10T13:28:40.2593580Z             if left.shape != right.shape:
2025-01-10T13:28:40.2593630Z                 raise_assert_detail(
2025-01-10T13:28:40.2593750Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2593790Z                 )
2025-01-10T13:28:40.2593840Z     
2025-01-10T13:28:40.2593880Z             diff = 0
2025-01-10T13:28:40.2593960Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2594480Z                 # count up differences
2025-01-10T13:28:40.2594620Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2594670Z                     diff += 1
2025-01-10T13:28:40.2594710Z     
2025-01-10T13:28:40.2594780Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2594880Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2595010Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2595100Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2595140Z E           
2025-01-10T13:28:40.2595220Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2595460Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2595730Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2595730Z 
2025-01-10T13:28:40.2595970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2595970Z 
2025-01-10T13:28:40.2596100Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2596100Z 
2025-01-10T13:28:40.2596260Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144286b10>
2025-01-10T13:28:40.2596420Z plasma = <tardis.plasma.base.BasePlasma object at 0x145a51f70>, attr = 'j_blues'
2025-01-10T13:28:40.2596420Z 
2025-01-10T13:28:40.2596530Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2596610Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2596670Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2596710Z         try:
2025-01-10T13:28:40.2596810Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2596870Z         except KeyError:
2025-01-10T13:28:40.2596980Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2597020Z     
2025-01-10T13:28:40.2603590Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2603720Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2603780Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2603890Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2603950Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2604430Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2604530Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2604580Z             else:
2025-01-10T13:28:40.2604650Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2604740Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2604740Z 
2025-01-10T13:28:40.2604840Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2604920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2605040Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2605080Z     ???
2025-01-10T13:28:40.2605160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2605170Z 
2025-01-10T13:28:40.2605210Z >   ???
2025-01-10T13:28:40.2605300Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2605350Z E   
2025-01-10T13:28:40.2605440Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2605650Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2605690Z E          ...
2025-01-10T13:28:40.2605760Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2605860Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2605950Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2605990Z E          ...
2025-01-10T13:28:40.2606050Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2606150Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2606220Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2606230Z 
2025-01-10T13:28:40.2606290Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2606490Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] _
2025-01-10T13:28:40.2606490Z 
2025-01-10T13:28:40.2606600Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2606710Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2606780Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2606880Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2606980Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2607050Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2607100Z err_msg = None
2025-01-10T13:28:40.2607100Z 
2025-01-10T13:28:40.2607180Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2607230Z         if err_msg is None:
2025-01-10T13:28:40.2607300Z             if left.shape != right.shape:
2025-01-10T13:28:40.2607360Z                 raise_assert_detail(
2025-01-10T13:28:40.2607470Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2607520Z                 )
2025-01-10T13:28:40.2607560Z     
2025-01-10T13:28:40.2607610Z             diff = 0
2025-01-10T13:28:40.2607690Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2607750Z                 # count up differences
2025-01-10T13:28:40.2607880Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2607930Z                     diff += 1
2025-01-10T13:28:40.2607980Z     
2025-01-10T13:28:40.2608040Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2608150Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2608280Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2608360Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2608410Z E           
2025-01-10T13:28:40.2608540Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2608750Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2608950Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2608960Z 
2025-01-10T13:28:40.2609200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2609200Z 
2025-01-10T13:28:40.2609320Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2609380Z 
2025-01-10T13:28:40.2609550Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144287890>
2025-01-10T13:28:40.2609700Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>, attr = 'lines'
2025-01-10T13:28:40.2609700Z 
2025-01-10T13:28:40.2609810Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2609890Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2609940Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2609990Z         try:
2025-01-10T13:28:40.2610090Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2610150Z         except KeyError:
2025-01-10T13:28:40.2610250Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2610290Z     
2025-01-10T13:28:40.2610350Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2610410Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2610480Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2610580Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2610640Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2610700Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2610780Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2610830Z             else:
2025-01-10T13:28:40.2610890Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2610970Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2610970Z 
2025-01-10T13:28:40.2611060Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2611150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2611260Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2611300Z     ???
2025-01-10T13:28:40.2611390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2611390Z 
2025-01-10T13:28:40.2611440Z >   ???
2025-01-10T13:28:40.2611530Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2611570Z E   
2025-01-10T13:28:40.2611670Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2611750Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2611790Z E          ...
2025-01-10T13:28:40.2611850Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2611950Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2612030Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2612080Z E          ...
2025-01-10T13:28:40.2612140Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2612230Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2612310Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2612310Z 
2025-01-10T13:28:40.2612420Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2612660Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] _
2025-01-10T13:28:40.2612660Z 
2025-01-10T13:28:40.2612820Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144287950>
2025-01-10T13:28:40.2612940Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>
2025-01-10T13:28:40.2613000Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.2613000Z 
2025-01-10T13:28:40.2613110Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2613190Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2613320Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2613360Z         try:
2025-01-10T13:28:40.2613470Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2613520Z         except KeyError:
2025-01-10T13:28:40.2613620Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2613670Z     
2025-01-10T13:28:40.2613780Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2613850Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2613910Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2614010Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2614070Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2614130Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2614210Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2614220Z 
2025-01-10T13:28:40.2614310Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2614400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2614400Z 
2025-01-10T13:28:40.2614500Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2614560Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2614650Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2614700Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2614810Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2614870Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2614950Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2615010Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2615060Z err_msg = None
2025-01-10T13:28:40.2615060Z 
2025-01-10T13:28:40.2615140Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2615190Z         if err_msg is None:
2025-01-10T13:28:40.2615260Z             if left.shape != right.shape:
2025-01-10T13:28:40.2615320Z                 raise_assert_detail(
2025-01-10T13:28:40.2615430Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2615470Z                 )
2025-01-10T13:28:40.2615520Z     
2025-01-10T13:28:40.2615570Z             diff = 0
2025-01-10T13:28:40.2615650Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2615710Z                 # count up differences
2025-01-10T13:28:40.2615840Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2615890Z                     diff += 1
2025-01-10T13:28:40.2615930Z     
2025-01-10T13:28:40.2616000Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2616100Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2616230Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2616300Z E           AssertionError: Series are different
2025-01-10T13:28:40.2616350Z E           
2025-01-10T13:28:40.2616420Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.2616710Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2617020Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2617290Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2617520Z 
2025-01-10T13:28:40.2617770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2618000Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] _
2025-01-10T13:28:40.2618000Z 
2025-01-10T13:28:40.2618160Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144287a10>
2025-01-10T13:28:40.2618290Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>
2025-01-10T13:28:40.2618350Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.2618360Z 
2025-01-10T13:28:40.2618460Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2618550Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2618600Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2618650Z         try:
2025-01-10T13:28:40.2618760Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2618810Z         except KeyError:
2025-01-10T13:28:40.2618910Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2618960Z     
2025-01-10T13:28:40.2619010Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2619080Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2619130Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2619240Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2619290Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2619360Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2619440Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2619440Z 
2025-01-10T13:28:40.2619530Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2619670Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2619680Z 
2025-01-10T13:28:40.2619780Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2619840Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2619920Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2619990Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2620090Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2620150Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2620230Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2620280Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2620330Z err_msg = None
2025-01-10T13:28:40.2620330Z 
2025-01-10T13:28:40.2620400Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2620470Z         if err_msg is None:
2025-01-10T13:28:40.2620950Z             if left.shape != right.shape:
2025-01-10T13:28:40.2621010Z                 raise_assert_detail(
2025-01-10T13:28:40.2621120Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2621160Z                 )
2025-01-10T13:28:40.2621210Z     
2025-01-10T13:28:40.2621250Z             diff = 0
2025-01-10T13:28:40.2621330Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2621400Z                 # count up differences
2025-01-10T13:28:40.2621520Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2621570Z                     diff += 1
2025-01-10T13:28:40.2621620Z     
2025-01-10T13:28:40.2621680Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2621780Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2621910Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2621980Z E           AssertionError: Series are different
2025-01-10T13:28:40.2622090Z E           
2025-01-10T13:28:40.2622160Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.2622450Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2622750Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2623060Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2623060Z 
2025-01-10T13:28:40.2623300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2623480Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] _
2025-01-10T13:28:40.2623490Z 
2025-01-10T13:28:40.2623590Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2623690Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2623770Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2623880Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2623970Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2624040Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2624090Z err_msg = None
2025-01-10T13:28:40.2624090Z 
2025-01-10T13:28:40.2624170Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2624220Z         if err_msg is None:
2025-01-10T13:28:40.2624280Z             if left.shape != right.shape:
2025-01-10T13:28:40.2624340Z                 raise_assert_detail(
2025-01-10T13:28:40.2624450Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2624490Z                 )
2025-01-10T13:28:40.2624530Z     
2025-01-10T13:28:40.2624630Z             diff = 0
2025-01-10T13:28:40.2624710Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2624770Z                 # count up differences
2025-01-10T13:28:40.2624900Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2624950Z                     diff += 1
2025-01-10T13:28:40.2625000Z     
2025-01-10T13:28:40.2625060Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2625160Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2625290Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2625370Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2625420Z E           
2025-01-10T13:28:40.2625500Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2625700Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2625960Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2625960Z 
2025-01-10T13:28:40.2626190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2626200Z 
2025-01-10T13:28:40.2626320Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2626320Z 
2025-01-10T13:28:40.2626490Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144287c50>
2025-01-10T13:28:40.2626640Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>, attr = 'nu'
2025-01-10T13:28:40.2626640Z 
2025-01-10T13:28:40.2626750Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2626830Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2626890Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2626930Z         try:
2025-01-10T13:28:40.2627040Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2627090Z         except KeyError:
2025-01-10T13:28:40.2627190Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2627230Z     
2025-01-10T13:28:40.2627290Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2627360Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2627420Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2627520Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2627580Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2627640Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2627720Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2627720Z 
2025-01-10T13:28:40.2627810Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2627900Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2628010Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2628050Z     ???
2025-01-10T13:28:40.2628130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2628140Z 
2025-01-10T13:28:40.2628180Z >   ???
2025-01-10T13:28:40.2628270Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2628320Z E   
2025-01-10T13:28:40.2628410Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2628490Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2628590Z E          ...
2025-01-10T13:28:40.2628650Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2628760Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2628840Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2628880Z E          ...
2025-01-10T13:28:40.2628950Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2629040Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2629110Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2629120Z 
2025-01-10T13:28:40.2629170Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2629380Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] _
2025-01-10T13:28:40.2629390Z 
2025-01-10T13:28:40.2629480Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2629580Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2629710Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2629810Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2629910Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2629980Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2630030Z err_msg = None
2025-01-10T13:28:40.2630030Z 
2025-01-10T13:28:40.2630110Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2630160Z         if err_msg is None:
2025-01-10T13:28:40.2630220Z             if left.shape != right.shape:
2025-01-10T13:28:40.2630280Z                 raise_assert_detail(
2025-01-10T13:28:40.2630390Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2630430Z                 )
2025-01-10T13:28:40.2630470Z     
2025-01-10T13:28:40.2630520Z             diff = 0
2025-01-10T13:28:40.2630600Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2630670Z                 # count up differences
2025-01-10T13:28:40.2630800Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2630850Z                     diff += 1
2025-01-10T13:28:40.2630890Z     
2025-01-10T13:28:40.2630950Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2631060Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2631190Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2631270Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2631310Z E           
2025-01-10T13:28:40.2631390Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2631600Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2631800Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2631810Z 
2025-01-10T13:28:40.2632040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2632040Z 
2025-01-10T13:28:40.2632170Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2632170Z 
2025-01-10T13:28:40.2632340Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144287d10>
2025-01-10T13:28:40.2632500Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>
2025-01-10T13:28:40.2632570Z attr = 'wavelength_cm'
2025-01-10T13:28:40.2632570Z 
2025-01-10T13:28:40.2632670Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2632760Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2632820Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2632860Z         try:
2025-01-10T13:28:40.2632960Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2633020Z         except KeyError:
2025-01-10T13:28:40.2633130Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2633170Z     
2025-01-10T13:28:40.2633220Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2633290Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2633350Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2633450Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2633510Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2633810Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2633900Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2633900Z 
2025-01-10T13:28:40.2633990Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2634080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2634180Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2634230Z     ???
2025-01-10T13:28:40.2634320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2634320Z 
2025-01-10T13:28:40.2634360Z >   ???
2025-01-10T13:28:40.2634460Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2634500Z E   
2025-01-10T13:28:40.2634590Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2634680Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2634730Z E          ...
2025-01-10T13:28:40.2634790Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2634880Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2634970Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2635010Z E          ...
2025-01-10T13:28:40.2635070Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2635160Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2635240Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2635240Z 
2025-01-10T13:28:40.2635300Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2635490Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] _
2025-01-10T13:28:40.2635500Z 
2025-01-10T13:28:40.2635590Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2635690Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2635770Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2635870Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2635970Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2636040Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2636080Z err_msg = None
2025-01-10T13:28:40.2636090Z 
2025-01-10T13:28:40.2636170Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2636220Z         if err_msg is None:
2025-01-10T13:28:40.2636280Z             if left.shape != right.shape:
2025-01-10T13:28:40.2636340Z                 raise_assert_detail(
2025-01-10T13:28:40.2636450Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2636490Z                 )
2025-01-10T13:28:40.2636780Z     
2025-01-10T13:28:40.2636830Z             diff = 0
2025-01-10T13:28:40.2636910Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2636970Z                 # count up differences
2025-01-10T13:28:40.2637100Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2637150Z                     diff += 1
2025-01-10T13:28:40.2637190Z     
2025-01-10T13:28:40.2637250Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2637360Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2637490Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2637570Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2637610Z E           
2025-01-10T13:28:40.2637700Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2637900Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2638160Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2638160Z 
2025-01-10T13:28:40.2638390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2638400Z 
2025-01-10T13:28:40.2638520Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2638520Z 
2025-01-10T13:28:40.2638690Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144287dd0>
2025-01-10T13:28:40.2638850Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>, attr = 'f_lu'
2025-01-10T13:28:40.2638860Z 
2025-01-10T13:28:40.2638960Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2639040Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2639100Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2639140Z         try:
2025-01-10T13:28:40.2639250Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2639300Z         except KeyError:
2025-01-10T13:28:40.2639400Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2639450Z     
2025-01-10T13:28:40.2639500Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2639570Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2639630Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2639730Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2639790Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2639850Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2639930Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2639930Z 
2025-01-10T13:28:40.2640020Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2640110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2640220Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2640260Z     ???
2025-01-10T13:28:40.2640350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2640350Z 
2025-01-10T13:28:40.2640390Z >   ???
2025-01-10T13:28:40.2640490Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2640530Z E   
2025-01-10T13:28:40.2640620Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2640710Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2640800Z E          ...
2025-01-10T13:28:40.2640870Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2640960Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2641050Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2641090Z E          ...
2025-01-10T13:28:40.2641160Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2641250Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2641320Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2641320Z 
2025-01-10T13:28:40.2641380Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2641620Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] _
2025-01-10T13:28:40.2641620Z 
2025-01-10T13:28:40.2641790Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b0410>
2025-01-10T13:28:40.2641910Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>
2025-01-10T13:28:40.2642030Z attr = 'stimulated_emission_factor'
2025-01-10T13:28:40.2642030Z 
2025-01-10T13:28:40.2642130Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2642220Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2642270Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2642310Z         try:
2025-01-10T13:28:40.2642420Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2642470Z         except KeyError:
2025-01-10T13:28:40.2642570Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2642610Z     
2025-01-10T13:28:40.2642670Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2642740Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2642800Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2642900Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2642960Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2643030Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2643110Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2643150Z             else:
2025-01-10T13:28:40.2643220Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2643300Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2643300Z 
2025-01-10T13:28:40.2643390Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2643470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2643580Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2643620Z     ???
2025-01-10T13:28:40.2643710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2643710Z 
2025-01-10T13:28:40.2643760Z >   ???
2025-01-10T13:28:40.2643890Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.2643940Z E   
2025-01-10T13:28:40.2644060Z E   DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:28:40.2644350Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2648010Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834782, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:28:40.2651830Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:28:40.2651990Z E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:28:40.2652000Z 
2025-01-10T13:28:40.2652050Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2652280Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] _
2025-01-10T13:28:40.2652280Z 
2025-01-10T13:28:40.2652380Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2652490Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2652560Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2652710Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2652820Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2652890Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2652940Z err_msg = None
2025-01-10T13:28:40.2652940Z 
2025-01-10T13:28:40.2653030Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2653080Z         if err_msg is None:
2025-01-10T13:28:40.2653150Z             if left.shape != right.shape:
2025-01-10T13:28:40.2653200Z                 raise_assert_detail(
2025-01-10T13:28:40.2653400Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2653450Z                 )
2025-01-10T13:28:40.2653500Z     
2025-01-10T13:28:40.2653540Z             diff = 0
2025-01-10T13:28:40.2653620Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2653990Z                 # count up differences
2025-01-10T13:28:40.2654130Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2654180Z                     diff += 1
2025-01-10T13:28:40.2654230Z     
2025-01-10T13:28:40.2654290Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2654390Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2654520Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2654610Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2654660Z E           
2025-01-10T13:28:40.2654740Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2654950Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2655160Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2655170Z 
2025-01-10T13:28:40.2655410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2655410Z 
2025-01-10T13:28:40.2655540Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2655550Z 
2025-01-10T13:28:40.2655710Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b04d0>
2025-01-10T13:28:40.2655830Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>
2025-01-10T13:28:40.2655890Z attr = 'previous_beta_sobolev'
2025-01-10T13:28:40.2655900Z 
2025-01-10T13:28:40.2656000Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2656090Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2656140Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2656190Z         try:
2025-01-10T13:28:40.2656290Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2656340Z         except KeyError:
2025-01-10T13:28:40.2656450Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2656490Z     
2025-01-10T13:28:40.2656560Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2656630Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2656680Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2656790Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2656850Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2657140Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2657230Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2657280Z             else:
2025-01-10T13:28:40.2657340Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2657420Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2657430Z 
2025-01-10T13:28:40.2657520Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2657610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2657720Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2657760Z     ???
2025-01-10T13:28:40.2657850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2657850Z 
2025-01-10T13:28:40.2657900Z >   ???
2025-01-10T13:28:40.2657990Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2658040Z E   
2025-01-10T13:28:40.2658130Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2658270Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2658320Z E          ...
2025-01-10T13:28:40.2658390Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2658480Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2658560Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2658610Z E          ...
2025-01-10T13:28:40.2658670Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2658770Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2658840Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2658840Z 
2025-01-10T13:28:40.2658900Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2659100Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] _
2025-01-10T13:28:40.2659110Z 
2025-01-10T13:28:40.2659200Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2659310Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2659380Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2659490Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2659600Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2659670Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2659720Z err_msg = None
2025-01-10T13:28:40.2659720Z 
2025-01-10T13:28:40.2659790Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2659850Z         if err_msg is None:
2025-01-10T13:28:40.2659910Z             if left.shape != right.shape:
2025-01-10T13:28:40.2659970Z                 raise_assert_detail(
2025-01-10T13:28:40.2660080Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2660130Z                 )
2025-01-10T13:28:40.2660170Z     
2025-01-10T13:28:40.2660220Z             diff = 0
2025-01-10T13:28:40.2667510Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2667660Z                 # count up differences
2025-01-10T13:28:40.2667790Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2667850Z                     diff += 1
2025-01-10T13:28:40.2667890Z     
2025-01-10T13:28:40.2667970Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2668080Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2668230Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2668320Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2668370Z E           
2025-01-10T13:28:40.2668460Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2668920Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2669140Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2669140Z 
2025-01-10T13:28:40.2669380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2669380Z 
2025-01-10T13:28:40.2669510Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2669520Z 
2025-01-10T13:28:40.2669800Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b0590>
2025-01-10T13:28:40.2669930Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>
2025-01-10T13:28:40.2669990Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.2669990Z 
2025-01-10T13:28:40.2670100Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2670180Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2670250Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2670290Z         try:
2025-01-10T13:28:40.2670400Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2670460Z         except KeyError:
2025-01-10T13:28:40.2670560Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2670610Z     
2025-01-10T13:28:40.2670670Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2670730Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2670800Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2670900Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2670970Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2671030Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2671110Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2671160Z             else:
2025-01-10T13:28:40.2671230Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2671310Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2671310Z 
2025-01-10T13:28:40.2671400Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2671500Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2671600Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2671650Z     ???
2025-01-10T13:28:40.2671740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2671750Z 
2025-01-10T13:28:40.2671790Z >   ???
2025-01-10T13:28:40.2671890Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2671930Z E   
2025-01-10T13:28:40.2672030Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2672110Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2672160Z E          ...
2025-01-10T13:28:40.2672230Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2672320Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2672410Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2672460Z E          ...
2025-01-10T13:28:40.2672520Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2672630Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2672720Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2672720Z 
2025-01-10T13:28:40.2672860Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2673080Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] _
2025-01-10T13:28:40.2673080Z 
2025-01-10T13:28:40.2673200Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2673300Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2673380Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2673490Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2673590Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2673670Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2673720Z err_msg = None
2025-01-10T13:28:40.2673720Z 
2025-01-10T13:28:40.2673810Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2673920Z         if err_msg is None:
2025-01-10T13:28:40.2673990Z             if left.shape != right.shape:
2025-01-10T13:28:40.2674050Z                 raise_assert_detail(
2025-01-10T13:28:40.2674160Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2674220Z                 )
2025-01-10T13:28:40.2674260Z     
2025-01-10T13:28:40.2674310Z             diff = 0
2025-01-10T13:28:40.2674390Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2674450Z                 # count up differences
2025-01-10T13:28:40.2674590Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2674640Z                     diff += 1
2025-01-10T13:28:40.2674680Z     
2025-01-10T13:28:40.2674750Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2674850Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2674980Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2675080Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2675130Z E           
2025-01-10T13:28:40.2675210Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2675420Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2675630Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2675640Z 
2025-01-10T13:28:40.2675880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2675890Z 
2025-01-10T13:28:40.2676020Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2676020Z 
2025-01-10T13:28:40.2676190Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b0650>
2025-01-10T13:28:40.2676310Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>
2025-01-10T13:28:40.2676360Z attr = 'beta_sobolev'
2025-01-10T13:28:40.2676360Z 
2025-01-10T13:28:40.2676460Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2676550Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2676610Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2793190Z         try:
2025-01-10T13:28:40.2794120Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2794500Z         except KeyError:
2025-01-10T13:28:40.2795870Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2796120Z     
2025-01-10T13:28:40.2796370Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2796590Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2797640Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2797920Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2797990Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2798080Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2798220Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2798290Z             else:
2025-01-10T13:28:40.2798360Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2798450Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2798450Z 
2025-01-10T13:28:40.2798580Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2798700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2800200Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2802730Z     ???
2025-01-10T13:28:40.2803230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2803270Z 
2025-01-10T13:28:40.2803370Z >   ???
2025-01-10T13:28:40.2803550Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2803630Z E   
2025-01-10T13:28:40.2803770Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2803870Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2803920Z E          ...
2025-01-10T13:28:40.2804000Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2804100Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2804200Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2804250Z E          ...
2025-01-10T13:28:40.2804320Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2804430Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2804510Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2804520Z 
2025-01-10T13:28:40.2804580Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2804800Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] _
2025-01-10T13:28:40.2804800Z 
2025-01-10T13:28:40.2804910Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2805020Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2805100Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2805210Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2805310Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2805400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2805450Z err_msg = None
2025-01-10T13:28:40.2805450Z 
2025-01-10T13:28:40.2805540Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2805600Z         if err_msg is None:
2025-01-10T13:28:40.2805670Z             if left.shape != right.shape:
2025-01-10T13:28:40.2805750Z                 raise_assert_detail(
2025-01-10T13:28:40.2805930Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2806020Z                 )
2025-01-10T13:28:40.2806070Z     
2025-01-10T13:28:40.2806120Z             diff = 0
2025-01-10T13:28:40.2806910Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2807190Z                 # count up differences
2025-01-10T13:28:40.2807330Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2807390Z                     diff += 1
2025-01-10T13:28:40.2811170Z     
2025-01-10T13:28:40.2811290Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2811430Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2811600Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2811700Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2811750Z E           
2025-01-10T13:28:40.2811880Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2812160Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2812390Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2812530Z 
2025-01-10T13:28:40.2812800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2812810Z 
2025-01-10T13:28:40.2812950Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2812950Z 
2025-01-10T13:28:40.2813120Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b07d0>
2025-01-10T13:28:40.2813290Z plasma = <tardis.plasma.base.BasePlasma object at 0x305e44b90>, attr = 'j_blues'
2025-01-10T13:28:40.2813290Z 
2025-01-10T13:28:40.2813400Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2813490Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2813550Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2813600Z         try:
2025-01-10T13:28:40.2813720Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2813780Z         except KeyError:
2025-01-10T13:28:40.2813890Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2813930Z     
2025-01-10T13:28:40.2814000Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2814070Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2814140Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2814280Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2814380Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2814470Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2814590Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2814650Z             else:
2025-01-10T13:28:40.2814730Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2814810Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2814820Z 
2025-01-10T13:28:40.2814920Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2815020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2815130Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2815170Z     ???
2025-01-10T13:28:40.2815260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2815260Z 
2025-01-10T13:28:40.2815310Z >   ???
2025-01-10T13:28:40.2815410Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2815450Z E   
2025-01-10T13:28:40.2815550Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2815630Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2815690Z E          ...
2025-01-10T13:28:40.2815760Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2815860Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2816050Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2816100Z E          ...
2025-01-10T13:28:40.2816170Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2816270Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2816350Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2816350Z 
2025-01-10T13:28:40.2816420Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2816580Z _____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines] ______
2025-01-10T13:28:40.2816590Z 
2025-01-10T13:28:40.2816690Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2816800Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2816880Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2816990Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2817170Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2817250Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2817300Z err_msg = None
2025-01-10T13:28:40.2817300Z 
2025-01-10T13:28:40.2817380Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2817440Z         if err_msg is None:
2025-01-10T13:28:40.2817510Z             if left.shape != right.shape:
2025-01-10T13:28:40.2817570Z                 raise_assert_detail(
2025-01-10T13:28:40.2817690Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2817740Z                 )
2025-01-10T13:28:40.2817780Z     
2025-01-10T13:28:40.2817830Z             diff = 0
2025-01-10T13:28:40.2817920Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2817990Z                 # count up differences
2025-01-10T13:28:40.2818130Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2818190Z                     diff += 1
2025-01-10T13:28:40.2818240Z     
2025-01-10T13:28:40.2818310Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2818430Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2818590Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2818710Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2818800Z E           
2025-01-10T13:28:40.2818930Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2819220Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2819510Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2819520Z 
2025-01-10T13:28:40.2819870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2819880Z 
2025-01-10T13:28:40.2820060Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2820070Z 
2025-01-10T13:28:40.2820290Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b1550>
2025-01-10T13:28:40.2820500Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>, attr = 'lines'
2025-01-10T13:28:40.2820520Z 
2025-01-10T13:28:40.2820840Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2820970Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2821070Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2821140Z         try:
2025-01-10T13:28:40.2821310Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2821410Z         except KeyError:
2025-01-10T13:28:40.2821580Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2821640Z     
2025-01-10T13:28:40.2821690Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2821770Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2821880Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2822050Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2822140Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2822250Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2822400Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2822670Z             else:
2025-01-10T13:28:40.2822800Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2822960Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2822980Z 
2025-01-10T13:28:40.2823090Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2823170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2823310Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2823380Z     ???
2025-01-10T13:28:40.2823480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2823480Z 
2025-01-10T13:28:40.2823880Z >   ???
2025-01-10T13:28:40.2824320Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2824780Z E   
2025-01-10T13:28:40.2825180Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2825940Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2826090Z E          ...
2025-01-10T13:28:40.2826170Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2826300Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2826420Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2826510Z E          ...
2025-01-10T13:28:40.2826610Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2826780Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2826900Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2826930Z 
2025-01-10T13:28:40.2827050Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2827350Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] _
2025-01-10T13:28:40.2827370Z 
2025-01-10T13:28:40.2827620Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b1610>
2025-01-10T13:28:40.2827780Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>
2025-01-10T13:28:40.2827850Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.2827850Z 
2025-01-10T13:28:40.2828450Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2828680Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2828750Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2828790Z         try:
2025-01-10T13:28:40.2828900Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2828970Z         except KeyError:
2025-01-10T13:28:40.2829080Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2829130Z     
2025-01-10T13:28:40.2829190Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2829260Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2829320Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2829420Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2829490Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2829720Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2829810Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2829820Z 
2025-01-10T13:28:40.2829910Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2830000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2830000Z 
2025-01-10T13:28:40.2830470Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2830540Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2830620Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2830680Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2830790Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2830850Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2830930Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2831300Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2831350Z err_msg = None
2025-01-10T13:28:40.2831350Z 
2025-01-10T13:28:40.2831430Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2831490Z         if err_msg is None:
2025-01-10T13:28:40.2831550Z             if left.shape != right.shape:
2025-01-10T13:28:40.2831610Z                 raise_assert_detail(
2025-01-10T13:28:40.2831720Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2831770Z                 )
2025-01-10T13:28:40.2831810Z     
2025-01-10T13:28:40.2831860Z             diff = 0
2025-01-10T13:28:40.2831940Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2832000Z                 # count up differences
2025-01-10T13:28:40.2832130Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2832190Z                     diff += 1
2025-01-10T13:28:40.2832230Z     
2025-01-10T13:28:40.2832300Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2832400Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2832530Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2832610Z E           AssertionError: Series are different
2025-01-10T13:28:40.2832650Z E           
2025-01-10T13:28:40.2832840Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.2833140Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2833400Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2833670Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2833670Z 
2025-01-10T13:28:40.2833900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2834080Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] _
2025-01-10T13:28:40.2834430Z 
2025-01-10T13:28:40.2834610Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b16d0>
2025-01-10T13:28:40.2834730Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>
2025-01-10T13:28:40.2834800Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.2834800Z 
2025-01-10T13:28:40.2834900Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2834990Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2835040Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2835090Z         try:
2025-01-10T13:28:40.2835190Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2835240Z         except KeyError:
2025-01-10T13:28:40.2835350Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2835390Z     
2025-01-10T13:28:40.2835450Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2835520Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2835630Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2835740Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2835790Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2835860Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2835940Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2835940Z 
2025-01-10T13:28:40.2836040Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2836120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2836120Z 
2025-01-10T13:28:40.2836230Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2836290Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2836370Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2836430Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2836540Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2836600Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2836680Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2836730Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2836780Z err_msg = None
2025-01-10T13:28:40.2836780Z 
2025-01-10T13:28:40.2836860Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2836910Z         if err_msg is None:
2025-01-10T13:28:40.2836970Z             if left.shape != right.shape:
2025-01-10T13:28:40.2837030Z                 raise_assert_detail(
2025-01-10T13:28:40.2837150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2837190Z                 )
2025-01-10T13:28:40.2837240Z     
2025-01-10T13:28:40.2837290Z             diff = 0
2025-01-10T13:28:40.2837370Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2837450Z                 # count up differences
2025-01-10T13:28:40.2837590Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2837650Z                     diff += 1
2025-01-10T13:28:40.2837690Z     
2025-01-10T13:28:40.2837770Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2837870Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2838010Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2838080Z E           AssertionError: Series are different
2025-01-10T13:28:40.2838120Z E           
2025-01-10T13:28:40.2838200Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.2838490Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2838840Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2839140Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2839190Z 
2025-01-10T13:28:40.2839430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2839570Z _______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-nu] _______
2025-01-10T13:28:40.2839580Z 
2025-01-10T13:28:40.2839680Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2839780Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2839850Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2839950Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2840050Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2840120Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2840170Z err_msg = None
2025-01-10T13:28:40.2840180Z 
2025-01-10T13:28:40.2840250Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2840310Z         if err_msg is None:
2025-01-10T13:28:40.2840370Z             if left.shape != right.shape:
2025-01-10T13:28:40.2840430Z                 raise_assert_detail(
2025-01-10T13:28:40.2840540Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2840580Z                 )
2025-01-10T13:28:40.2840620Z     
2025-01-10T13:28:40.2840670Z             diff = 0
2025-01-10T13:28:40.2840750Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2840800Z                 # count up differences
2025-01-10T13:28:40.2840930Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2840980Z                     diff += 1
2025-01-10T13:28:40.2841030Z     
2025-01-10T13:28:40.2841100Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2841210Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2841340Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2841420Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2841470Z E           
2025-01-10T13:28:40.2841550Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2841760Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2841960Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2842010Z 
2025-01-10T13:28:40.2842250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2842250Z 
2025-01-10T13:28:40.2842380Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2842380Z 
2025-01-10T13:28:40.2842560Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b1910>
2025-01-10T13:28:40.2842700Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>, attr = 'nu'
2025-01-10T13:28:40.2842710Z 
2025-01-10T13:28:40.2842810Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2842900Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2842960Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2843010Z         try:
2025-01-10T13:28:40.2843110Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2843220Z         except KeyError:
2025-01-10T13:28:40.2843320Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2843360Z     
2025-01-10T13:28:40.2843420Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2843490Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2843550Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2843650Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2843700Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2843770Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2843850Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2843850Z 
2025-01-10T13:28:40.2843940Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2844030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2844140Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2844190Z     ???
2025-01-10T13:28:40.2844270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2844280Z 
2025-01-10T13:28:40.2844320Z >   ???
2025-01-10T13:28:40.2844410Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2844460Z E   
2025-01-10T13:28:40.2844550Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2844640Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2844680Z E          ...
2025-01-10T13:28:40.2844740Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2844840Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2844920Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2844960Z E          ...
2025-01-10T13:28:40.2845030Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2845120Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2845200Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2845210Z 
2025-01-10T13:28:40.2845260Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2845420Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] __
2025-01-10T13:28:40.2845430Z 
2025-01-10T13:28:40.2845520Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2845630Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2845700Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2845800Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2845900Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2845970Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2846070Z err_msg = None
2025-01-10T13:28:40.2846070Z 
2025-01-10T13:28:40.2846340Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2846830Z         if err_msg is None:
2025-01-10T13:28:40.2847060Z             if left.shape != right.shape:
2025-01-10T13:28:40.2847400Z                 raise_assert_detail(
2025-01-10T13:28:40.2847630Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2847680Z                 )
2025-01-10T13:28:40.2847730Z     
2025-01-10T13:28:40.2847770Z             diff = 0
2025-01-10T13:28:40.2847860Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2847920Z                 # count up differences
2025-01-10T13:28:40.2848050Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2848100Z                     diff += 1
2025-01-10T13:28:40.2848150Z     
2025-01-10T13:28:40.2848210Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2848740Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2848880Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2848970Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2849010Z E           
2025-01-10T13:28:40.2849100Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2849310Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2849520Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2849530Z 
2025-01-10T13:28:40.2849780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2849780Z 
2025-01-10T13:28:40.2849910Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2849920Z 
2025-01-10T13:28:40.2850090Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b19d0>
2025-01-10T13:28:40.2850210Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>
2025-01-10T13:28:40.2850270Z attr = 'wavelength_cm'
2025-01-10T13:28:40.2850270Z 
2025-01-10T13:28:40.2850370Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2850460Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2850520Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2850560Z         try:
2025-01-10T13:28:40.2850670Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2850730Z         except KeyError:
2025-01-10T13:28:40.2850840Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2850880Z     
2025-01-10T13:28:40.2850940Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2851010Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2851070Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2851180Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2851240Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2851300Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2851380Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2851380Z 
2025-01-10T13:28:40.2851470Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2851560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2851890Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2851950Z     ???
2025-01-10T13:28:40.2852030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2852040Z 
2025-01-10T13:28:40.2852080Z >   ???
2025-01-10T13:28:40.2852170Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2852220Z E   
2025-01-10T13:28:40.2852310Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2852400Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2852440Z E          ...
2025-01-10T13:28:40.2852510Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2852600Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2852690Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2852730Z E          ...
2025-01-10T13:28:40.2852790Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2852890Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2853020Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2853020Z 
2025-01-10T13:28:40.2853080Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2853230Z ______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-f_lu] ______
2025-01-10T13:28:40.2853240Z 
2025-01-10T13:28:40.2853340Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2853440Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2853520Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2853620Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2853710Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2853790Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2853840Z err_msg = None
2025-01-10T13:28:40.2853840Z 
2025-01-10T13:28:40.2853920Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2853980Z         if err_msg is None:
2025-01-10T13:28:40.2854050Z             if left.shape != right.shape:
2025-01-10T13:28:40.2854100Z                 raise_assert_detail(
2025-01-10T13:28:40.2854210Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2866050Z                 )
2025-01-10T13:28:40.2866170Z     
2025-01-10T13:28:40.2866220Z             diff = 0
2025-01-10T13:28:40.2866310Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2866370Z                 # count up differences
2025-01-10T13:28:40.2866510Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2866560Z                     diff += 1
2025-01-10T13:28:40.2866600Z     
2025-01-10T13:28:40.2866670Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2866780Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2866910Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2867000Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2867040Z E           
2025-01-10T13:28:40.2867120Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2867330Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2867530Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2867820Z 
2025-01-10T13:28:40.2868060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2868070Z 
2025-01-10T13:28:40.2868190Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2868200Z 
2025-01-10T13:28:40.2868370Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b1a90>
2025-01-10T13:28:40.2868520Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>, attr = 'f_lu'
2025-01-10T13:28:40.2868520Z 
2025-01-10T13:28:40.2868620Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2868710Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2868760Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2868810Z         try:
2025-01-10T13:28:40.2868920Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2869090Z         except KeyError:
2025-01-10T13:28:40.2869190Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2869230Z     
2025-01-10T13:28:40.2869300Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2869360Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2869420Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2869530Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2869590Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2869650Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2869730Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2869730Z 
2025-01-10T13:28:40.2869830Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2869910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2870030Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2870070Z     ???
2025-01-10T13:28:40.2870160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2870170Z 
2025-01-10T13:28:40.2870210Z >   ???
2025-01-10T13:28:40.2870300Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2870350Z E   
2025-01-10T13:28:40.2870440Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2870520Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2870570Z E          ...
2025-01-10T13:28:40.2870630Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2870730Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2870810Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2870860Z E          ...
2025-01-10T13:28:40.2870920Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2871020Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2871100Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2871100Z 
2025-01-10T13:28:40.2871160Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2871350Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] _
2025-01-10T13:28:40.2871350Z 
2025-01-10T13:28:40.2871510Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b2090>
2025-01-10T13:28:40.2871640Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>
2025-01-10T13:28:40.2871700Z attr = 'stimulated_emission_factor'
2025-01-10T13:28:40.2871700Z 
2025-01-10T13:28:40.2871800Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2871880Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2871940Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2871980Z         try:
2025-01-10T13:28:40.2872090Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2872200Z         except KeyError:
2025-01-10T13:28:40.2872310Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2872350Z     
2025-01-10T13:28:40.2872410Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2872480Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2872540Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2872640Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2872700Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2872900Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2872990Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2873030Z             else:
2025-01-10T13:28:40.2873100Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2873180Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2873180Z 
2025-01-10T13:28:40.2873270Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2873420Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2873530Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2873580Z     ???
2025-01-10T13:28:40.2873660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2873670Z 
2025-01-10T13:28:40.2873710Z >   ???
2025-01-10T13:28:40.2873840Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.2873890Z E   
2025-01-10T13:28:40.2874010Z E   DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:28:40.2874310Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2877990Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834782, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:28:40.2881780Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:28:40.2882160Z E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:28:40.2882160Z 
2025-01-10T13:28:40.2882230Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2882400Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] _
2025-01-10T13:28:40.2882410Z 
2025-01-10T13:28:40.2882510Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2882610Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2882680Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2882790Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2882880Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2885130Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2885290Z err_msg = None
2025-01-10T13:28:40.2885300Z 
2025-01-10T13:28:40.2885400Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2885470Z         if err_msg is None:
2025-01-10T13:28:40.2885540Z             if left.shape != right.shape:
2025-01-10T13:28:40.2885610Z                 raise_assert_detail(
2025-01-10T13:28:40.2885730Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2885770Z                 )
2025-01-10T13:28:40.2885820Z     
2025-01-10T13:28:40.2885860Z             diff = 0
2025-01-10T13:28:40.2885950Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2886010Z                 # count up differences
2025-01-10T13:28:40.2886140Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2886190Z                     diff += 1
2025-01-10T13:28:40.2886240Z     
2025-01-10T13:28:40.2886300Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2886410Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2886540Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2887070Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2887110Z E           
2025-01-10T13:28:40.2887200Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2887400Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2887610Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2887620Z 
2025-01-10T13:28:40.2887860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2887940Z 
2025-01-10T13:28:40.2888090Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2888090Z 
2025-01-10T13:28:40.2888260Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b2150>
2025-01-10T13:28:40.2888380Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>
2025-01-10T13:28:40.2888440Z attr = 'previous_beta_sobolev'
2025-01-10T13:28:40.2888440Z 
2025-01-10T13:28:40.2888550Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2888630Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2888690Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2888730Z         try:
2025-01-10T13:28:40.2888840Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2888900Z         except KeyError:
2025-01-10T13:28:40.2889000Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2889050Z     
2025-01-10T13:28:40.2889110Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2889180Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2889240Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2889340Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2889400Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2889460Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2889540Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2889600Z             else:
2025-01-10T13:28:40.2889660Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2889750Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2889750Z 
2025-01-10T13:28:40.2889840Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2889930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2890050Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2890100Z     ???
2025-01-10T13:28:40.2890180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2890190Z 
2025-01-10T13:28:40.2890230Z >   ???
2025-01-10T13:28:40.2890330Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2890370Z E   
2025-01-10T13:28:40.2890470Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2890550Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2890600Z E          ...
2025-01-10T13:28:40.2890660Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2890770Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2890850Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2890890Z E          ...
2025-01-10T13:28:40.2890960Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2891100Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2891180Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2891180Z 
2025-01-10T13:28:40.2891240Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2891400Z __ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] __
2025-01-10T13:28:40.2891410Z 
2025-01-10T13:28:40.2891510Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2891620Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2891690Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2891790Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2892060Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2892190Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2892400Z err_msg = None
2025-01-10T13:28:40.2892410Z 
2025-01-10T13:28:40.2892500Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2892560Z         if err_msg is None:
2025-01-10T13:28:40.2892630Z             if left.shape != right.shape:
2025-01-10T13:28:40.2892690Z                 raise_assert_detail(
2025-01-10T13:28:40.2892810Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2892850Z                 )
2025-01-10T13:28:40.2892900Z     
2025-01-10T13:28:40.2892940Z             diff = 0
2025-01-10T13:28:40.2893020Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2893090Z                 # count up differences
2025-01-10T13:28:40.2893230Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2893280Z                     diff += 1
2025-01-10T13:28:40.2893320Z     
2025-01-10T13:28:40.2893390Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2893500Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2893630Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2893720Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2893760Z E           
2025-01-10T13:28:40.2893850Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2894060Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2894260Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2894270Z 
2025-01-10T13:28:40.2894520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2894530Z 
2025-01-10T13:28:40.2894660Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2894660Z 
2025-01-10T13:28:40.2894830Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b2210>
2025-01-10T13:28:40.2894960Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>
2025-01-10T13:28:40.2895010Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.2895010Z 
2025-01-10T13:28:40.2895120Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2895960Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2896240Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2896950Z         try:
2025-01-10T13:28:40.2897370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2897530Z         except KeyError:
2025-01-10T13:28:40.2897820Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2897950Z     
2025-01-10T13:28:40.2898130Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2898310Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2898470Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2898740Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2899010Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2899110Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2899200Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2899250Z             else:
2025-01-10T13:28:40.2899320Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2899400Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2899560Z 
2025-01-10T13:28:40.2899670Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2899760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2899870Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2899910Z     ???
2025-01-10T13:28:40.2900000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2900000Z 
2025-01-10T13:28:40.2900040Z >   ???
2025-01-10T13:28:40.2900130Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2900180Z E   
2025-01-10T13:28:40.2900270Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2900360Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2900400Z E          ...
2025-01-10T13:28:40.2900460Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2900560Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2900650Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2900700Z E          ...
2025-01-10T13:28:40.2900760Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2900850Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2900930Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2900930Z 
2025-01-10T13:28:40.2900990Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2901140Z __ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] __
2025-01-10T13:28:40.2901150Z 
2025-01-10T13:28:40.2901240Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2901350Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2901420Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2901530Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2901630Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2901700Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2901750Z err_msg = None
2025-01-10T13:28:40.2901750Z 
2025-01-10T13:28:40.2901830Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2901890Z         if err_msg is None:
2025-01-10T13:28:40.2901960Z             if left.shape != right.shape:
2025-01-10T13:28:40.2902010Z                 raise_assert_detail(
2025-01-10T13:28:40.2902130Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2902170Z                 )
2025-01-10T13:28:40.2902210Z     
2025-01-10T13:28:40.2902260Z             diff = 0
2025-01-10T13:28:40.2902340Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2902400Z                 # count up differences
2025-01-10T13:28:40.2902610Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2902670Z                     diff += 1
2025-01-10T13:28:40.2902710Z     
2025-01-10T13:28:40.2902770Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2902870Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2903010Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2903090Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2903130Z E           
2025-01-10T13:28:40.2903220Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2903420Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2904060Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2904070Z 
2025-01-10T13:28:40.2904310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2904310Z 
2025-01-10T13:28:40.2904440Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2904450Z 
2025-01-10T13:28:40.2904610Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b22d0>
2025-01-10T13:28:40.2904730Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>
2025-01-10T13:28:40.2904780Z attr = 'beta_sobolev'
2025-01-10T13:28:40.2904780Z 
2025-01-10T13:28:40.2904880Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2904980Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2905030Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2905080Z         try:
2025-01-10T13:28:40.2905190Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2905240Z         except KeyError:
2025-01-10T13:28:40.2905340Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2905380Z     
2025-01-10T13:28:40.2905440Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2905510Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2905570Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2905670Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2905720Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2905790Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2905870Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2905920Z             else:
2025-01-10T13:28:40.2905980Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2906060Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2906070Z 
2025-01-10T13:28:40.2906160Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2906240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2906350Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2906390Z     ???
2025-01-10T13:28:40.2906480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2906480Z 
2025-01-10T13:28:40.2906670Z >   ???
2025-01-10T13:28:40.2906800Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2906850Z E   
2025-01-10T13:28:40.2906950Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2907370Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2907420Z E          ...
2025-01-10T13:28:40.2907490Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2907590Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2907670Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2907710Z E          ...
2025-01-10T13:28:40.2907770Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2907870Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2907950Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2907950Z 
2025-01-10T13:28:40.2908010Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2908170Z ____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues] _____
2025-01-10T13:28:40.2908170Z 
2025-01-10T13:28:40.2908270Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2908380Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2908530Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2908630Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2908730Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2908800Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2908850Z err_msg = None
2025-01-10T13:28:40.2908860Z 
2025-01-10T13:28:40.2908940Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2908990Z         if err_msg is None:
2025-01-10T13:28:40.2909060Z             if left.shape != right.shape:
2025-01-10T13:28:40.2909110Z                 raise_assert_detail(
2025-01-10T13:28:40.2909220Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2909270Z                 )
2025-01-10T13:28:40.2909320Z     
2025-01-10T13:28:40.2909370Z             diff = 0
2025-01-10T13:28:40.2909450Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2909510Z                 # count up differences
2025-01-10T13:28:40.2909640Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2909690Z                     diff += 1
2025-01-10T13:28:40.2909730Z     
2025-01-10T13:28:40.2909790Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2909900Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2910030Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2910110Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2910150Z E           
2025-01-10T13:28:40.2910240Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2910570Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2910810Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2910820Z 
2025-01-10T13:28:40.2911060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2911070Z 
2025-01-10T13:28:40.2911210Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2911210Z 
2025-01-10T13:28:40.2911380Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b2450>
2025-01-10T13:28:40.2911680Z plasma = <tardis.plasma.base.BasePlasma object at 0x310fdfd10>, attr = 'j_blues'
2025-01-10T13:28:40.2911680Z 
2025-01-10T13:28:40.2911800Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2911880Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2911940Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2911980Z         try:
2025-01-10T13:28:40.2912090Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2912150Z         except KeyError:
2025-01-10T13:28:40.2912250Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2912300Z     
2025-01-10T13:28:40.2912350Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2912420Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2912480Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2912580Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2912720Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2912780Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2912990Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2913040Z             else:
2025-01-10T13:28:40.2913100Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2913180Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2913190Z 
2025-01-10T13:28:40.2913270Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2913560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2913680Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2913930Z     ???
2025-01-10T13:28:40.2914310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2914320Z 
2025-01-10T13:28:40.2914450Z >   ???
2025-01-10T13:28:40.2914730Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2914890Z E   
2025-01-10T13:28:40.2915160Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2915720Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2915900Z E          ...
2025-01-10T13:28:40.2916080Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2916340Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2916580Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2916710Z E          ...
2025-01-10T13:28:40.2916870Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2917130Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2917330Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2917340Z 
2025-01-10T13:28:40.2917520Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2918590Z _______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines] _______
2025-01-10T13:28:40.2918630Z 
2025-01-10T13:28:40.2918750Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2918850Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2918930Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2919030Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2919120Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2919190Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2919240Z err_msg = None
2025-01-10T13:28:40.2919240Z 
2025-01-10T13:28:40.2919320Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2919380Z         if err_msg is None:
2025-01-10T13:28:40.2919440Z             if left.shape != right.shape:
2025-01-10T13:28:40.2919670Z                 raise_assert_detail(
2025-01-10T13:28:40.2919790Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2919840Z                 )
2025-01-10T13:28:40.2919880Z     
2025-01-10T13:28:40.2919930Z             diff = 0
2025-01-10T13:28:40.2920010Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2920070Z                 # count up differences
2025-01-10T13:28:40.2920200Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2920250Z                     diff += 1
2025-01-10T13:28:40.2920290Z     
2025-01-10T13:28:40.2920350Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2920460Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2920580Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2920670Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2920710Z E           
2025-01-10T13:28:40.2920860Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2921070Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2921280Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2921280Z 
2025-01-10T13:28:40.2921520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2921530Z 
2025-01-10T13:28:40.2921660Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2921670Z 
2025-01-10T13:28:40.2921830Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b31d0>
2025-01-10T13:28:40.2921990Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>, attr = 'lines'
2025-01-10T13:28:40.2921990Z 
2025-01-10T13:28:40.2922090Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2922180Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2922230Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2922280Z         try:
2025-01-10T13:28:40.2922390Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2922440Z         except KeyError:
2025-01-10T13:28:40.2922550Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2922590Z     
2025-01-10T13:28:40.2922650Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2922720Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2922790Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2923070Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2923320Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2923510Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2923730Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2923880Z             else:
2025-01-10T13:28:40.2924060Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2924270Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2924280Z 
2025-01-10T13:28:40.2924600Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2926110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2926230Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2926280Z     ???
2025-01-10T13:28:40.2926540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2926550Z 
2025-01-10T13:28:40.2926600Z >   ???
2025-01-10T13:28:40.2926700Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2926750Z E   
2025-01-10T13:28:40.2926860Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2926960Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2927010Z E          ...
2025-01-10T13:28:40.2927070Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2927170Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2927250Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2927300Z E          ...
2025-01-10T13:28:40.2927360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2927450Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2927530Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2927750Z 
2025-01-10T13:28:40.2927820Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2928000Z _ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index] _
2025-01-10T13:28:40.2928010Z 
2025-01-10T13:28:40.2928170Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b3290>
2025-01-10T13:28:40.2928300Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>
2025-01-10T13:28:40.2928360Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.2928360Z 
2025-01-10T13:28:40.2928460Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2928550Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2929000Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2929100Z         try:
2025-01-10T13:28:40.2929220Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2929280Z         except KeyError:
2025-01-10T13:28:40.2929380Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2929430Z     
2025-01-10T13:28:40.2929500Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2929570Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2929630Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2929730Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2929790Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2929850Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2929930Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2929930Z 
2025-01-10T13:28:40.2930020Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2930110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2930110Z 
2025-01-10T13:28:40.2930210Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2930280Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2930370Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2930430Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2930540Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.2930600Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.2930680Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2930730Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.2930780Z err_msg = None
2025-01-10T13:28:40.2930790Z 
2025-01-10T13:28:40.2930860Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2930920Z         if err_msg is None:
2025-01-10T13:28:40.2930980Z             if left.shape != right.shape:
2025-01-10T13:28:40.2931040Z                 raise_assert_detail(
2025-01-10T13:28:40.2931150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2931700Z                 )
2025-01-10T13:28:40.2931750Z     
2025-01-10T13:28:40.2931800Z             diff = 0
2025-01-10T13:28:40.2931890Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2931940Z                 # count up differences
2025-01-10T13:28:40.2932080Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2932130Z                     diff += 1
2025-01-10T13:28:40.2932170Z     
2025-01-10T13:28:40.2932230Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2932330Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2932470Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2932540Z E           AssertionError: Series are different
2025-01-10T13:28:40.2932590Z E           
2025-01-10T13:28:40.2932660Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.2932960Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2933310Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2933570Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2933580Z 
2025-01-10T13:28:40.2933820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2934000Z _ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index] _
2025-01-10T13:28:40.2934000Z 
2025-01-10T13:28:40.2934170Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b3350>
2025-01-10T13:28:40.2934290Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>
2025-01-10T13:28:40.2934350Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.2934350Z 
2025-01-10T13:28:40.2934450Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2934540Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2934590Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2934640Z         try:
2025-01-10T13:28:40.2934750Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2934810Z         except KeyError:
2025-01-10T13:28:40.2934910Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2934960Z     
2025-01-10T13:28:40.2935010Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2935080Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2935140Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2935240Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2935300Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2935360Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2935440Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2935440Z 
2025-01-10T13:28:40.2935530Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2935620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2935670Z 
2025-01-10T13:28:40.2935780Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2935850Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2935930Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2936480Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2936610Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.2936670Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.2936750Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.2936810Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.2936850Z err_msg = None
2025-01-10T13:28:40.2936860Z 
2025-01-10T13:28:40.2936940Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2936990Z         if err_msg is None:
2025-01-10T13:28:40.2937060Z             if left.shape != right.shape:
2025-01-10T13:28:40.2937200Z                 raise_assert_detail(
2025-01-10T13:28:40.2937310Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2944760Z                 )
2025-01-10T13:28:40.2944840Z     
2025-01-10T13:28:40.2944900Z             diff = 0
2025-01-10T13:28:40.2944980Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2945040Z                 # count up differences
2025-01-10T13:28:40.2945180Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2945230Z                     diff += 1
2025-01-10T13:28:40.2945280Z     
2025-01-10T13:28:40.2945340Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2945440Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2945570Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2945650Z E           AssertionError: Series are different
2025-01-10T13:28:40.2945700Z E           
2025-01-10T13:28:40.2945770Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.2946060Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.2946360Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2946660Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.2946670Z 
2025-01-10T13:28:40.2947710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2948300Z ________ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-nu] _________
2025-01-10T13:28:40.2948310Z 
2025-01-10T13:28:40.2948640Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2950540Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2950890Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2950990Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2951090Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2951160Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2951220Z err_msg = None
2025-01-10T13:28:40.2951220Z 
2025-01-10T13:28:40.2951300Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2951350Z         if err_msg is None:
2025-01-10T13:28:40.2951420Z             if left.shape != right.shape:
2025-01-10T13:28:40.2951480Z                 raise_assert_detail(
2025-01-10T13:28:40.2951940Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2952020Z                 )
2025-01-10T13:28:40.2952060Z     
2025-01-10T13:28:40.2952120Z             diff = 0
2025-01-10T13:28:40.2952390Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2952460Z                 # count up differences
2025-01-10T13:28:40.2952600Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2952650Z                     diff += 1
2025-01-10T13:28:40.2952690Z     
2025-01-10T13:28:40.2953350Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2953480Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2953610Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2953700Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2953740Z E           
2025-01-10T13:28:40.2954490Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2954740Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2954970Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2954970Z 
2025-01-10T13:28:40.2955220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2955220Z 
2025-01-10T13:28:40.2955350Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2955360Z 
2025-01-10T13:28:40.2955960Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b3590>
2025-01-10T13:28:40.2956510Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>, attr = 'nu'
2025-01-10T13:28:40.2956530Z 
2025-01-10T13:28:40.2956650Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2956740Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2956800Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2956840Z         try:
2025-01-10T13:28:40.2956950Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2957000Z         except KeyError:
2025-01-10T13:28:40.2957110Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2957160Z     
2025-01-10T13:28:40.2957220Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2957290Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2957350Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2957450Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2957510Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2957830Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2957910Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2957920Z 
2025-01-10T13:28:40.2958010Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2958090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2958200Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2958250Z     ???
2025-01-10T13:28:40.2958330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2958330Z 
2025-01-10T13:28:40.2958370Z >   ???
2025-01-10T13:28:40.2958470Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2958510Z E   
2025-01-10T13:28:40.2958610Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2958690Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2958730Z E          ...
2025-01-10T13:28:40.2959430Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2959530Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2959620Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2959660Z E          ...
2025-01-10T13:28:40.2959730Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2959820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2959900Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2959900Z 
2025-01-10T13:28:40.2959960Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2960120Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-wavelength_cm] ___
2025-01-10T13:28:40.2960130Z 
2025-01-10T13:28:40.2960230Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2960420Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2960530Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2960630Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2960730Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2960800Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2960850Z err_msg = None
2025-01-10T13:28:40.2960860Z 
2025-01-10T13:28:40.2960930Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2960990Z         if err_msg is None:
2025-01-10T13:28:40.2961050Z             if left.shape != right.shape:
2025-01-10T13:28:40.2961110Z                 raise_assert_detail(
2025-01-10T13:28:40.2961210Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2961260Z                 )
2025-01-10T13:28:40.2961300Z     
2025-01-10T13:28:40.2961350Z             diff = 0
2025-01-10T13:28:40.2961620Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2961940Z                 # count up differences
2025-01-10T13:28:40.2962410Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2962480Z                     diff += 1
2025-01-10T13:28:40.2962530Z     
2025-01-10T13:28:40.2962590Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2962690Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2962820Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2962900Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2962950Z E           
2025-01-10T13:28:40.2963030Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2963350Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2963890Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2963900Z 
2025-01-10T13:28:40.2964150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2964150Z 
2025-01-10T13:28:40.2964280Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2964280Z 
2025-01-10T13:28:40.2964780Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b3650>
2025-01-10T13:28:40.2964920Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>
2025-01-10T13:28:40.2965080Z attr = 'wavelength_cm'
2025-01-10T13:28:40.2965080Z 
2025-01-10T13:28:40.2965180Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2965270Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2965330Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2965370Z         try:
2025-01-10T13:28:40.2965480Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2965530Z         except KeyError:
2025-01-10T13:28:40.2965630Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2965690Z     
2025-01-10T13:28:40.2965750Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2965820Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2965880Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2965980Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2966050Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2966110Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2966200Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2966200Z 
2025-01-10T13:28:40.2966290Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2966380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2966490Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2966530Z     ???
2025-01-10T13:28:40.2966620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2966620Z 
2025-01-10T13:28:40.2966660Z >   ???
2025-01-10T13:28:40.2966750Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2966790Z E   
2025-01-10T13:28:40.2966890Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2966970Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2967020Z E          ...
2025-01-10T13:28:40.2967200Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2967320Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2967400Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2967450Z E          ...
2025-01-10T13:28:40.2967520Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2967620Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2967690Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2967690Z 
2025-01-10T13:28:40.2967750Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2967900Z _______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-f_lu] ________
2025-01-10T13:28:40.2967910Z 
2025-01-10T13:28:40.2968010Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2968130Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2969690Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2969820Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2969920Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2970000Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2970050Z err_msg = None
2025-01-10T13:28:40.2970050Z 
2025-01-10T13:28:40.2970130Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2970190Z         if err_msg is None:
2025-01-10T13:28:40.2970250Z             if left.shape != right.shape:
2025-01-10T13:28:40.2970310Z                 raise_assert_detail(
2025-01-10T13:28:40.2970420Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2970470Z                 )
2025-01-10T13:28:40.2970510Z     
2025-01-10T13:28:40.2970560Z             diff = 0
2025-01-10T13:28:40.2971160Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2971240Z                 # count up differences
2025-01-10T13:28:40.2971370Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2971420Z                     diff += 1
2025-01-10T13:28:40.2971470Z     
2025-01-10T13:28:40.2971530Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2971630Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2971760Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2971840Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2971880Z E           
2025-01-10T13:28:40.2971960Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2972170Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2972480Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2972490Z 
2025-01-10T13:28:40.2972730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2972740Z 
2025-01-10T13:28:40.2972870Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2972870Z 
2025-01-10T13:28:40.2973040Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b3710>
2025-01-10T13:28:40.2973200Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>, attr = 'f_lu'
2025-01-10T13:28:40.2973210Z 
2025-01-10T13:28:40.2973940Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2975410Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2975530Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2975570Z         try:
2025-01-10T13:28:40.2975690Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2975740Z         except KeyError:
2025-01-10T13:28:40.2976120Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2976180Z     
2025-01-10T13:28:40.2976240Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2976300Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2976370Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2976470Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2977230Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2977610Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2977740Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2977740Z 
2025-01-10T13:28:40.2977830Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.2977930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2978040Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2978080Z     ???
2025-01-10T13:28:40.2978170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2978170Z 
2025-01-10T13:28:40.2978210Z >   ???
2025-01-10T13:28:40.2978310Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2978350Z E   
2025-01-10T13:28:40.2978450Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2978530Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2978610Z E          ...
2025-01-10T13:28:40.2978830Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2978930Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2979020Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2979060Z E          ...
2025-01-10T13:28:40.2979120Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2979210Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2979290Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2979290Z 
2025-01-10T13:28:40.2979350Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2979520Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs] ____
2025-01-10T13:28:40.2979530Z 
2025-01-10T13:28:40.2979630Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2979730Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2979810Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2979910Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2980010Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2980080Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2980130Z err_msg = None
2025-01-10T13:28:40.2980130Z 
2025-01-10T13:28:40.2980210Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2980260Z         if err_msg is None:
2025-01-10T13:28:40.2980330Z             if left.shape != right.shape:
2025-01-10T13:28:40.2980380Z                 raise_assert_detail(
2025-01-10T13:28:40.2980490Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2980540Z                 )
2025-01-10T13:28:40.2980580Z     
2025-01-10T13:28:40.2980630Z             diff = 0
2025-01-10T13:28:40.2980720Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2980780Z                 # count up differences
2025-01-10T13:28:40.2981750Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2981850Z                     diff += 1
2025-01-10T13:28:40.2981890Z     
2025-01-10T13:28:40.2981960Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2982070Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2982210Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2982290Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2982340Z E           
2025-01-10T13:28:40.2982420Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2982620Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2982980Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2982980Z 
2025-01-10T13:28:40.2983230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2983230Z 
2025-01-10T13:28:40.2983360Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2983360Z 
2025-01-10T13:28:40.2983530Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b3e90>
2025-01-10T13:28:40.2983660Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>
2025-01-10T13:28:40.2984690Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.2984710Z 
2025-01-10T13:28:40.2985110Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2985760Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2985860Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2985910Z         try:
2025-01-10T13:28:40.2986020Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2986080Z         except KeyError:
2025-01-10T13:28:40.2986180Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2986230Z     
2025-01-10T13:28:40.2986290Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2986350Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2986410Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2986510Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2986580Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2986650Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2986740Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2986780Z             else:
2025-01-10T13:28:40.2986850Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2986930Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2986930Z 
2025-01-10T13:28:40.2987020Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2987110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2987220Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2987260Z     ???
2025-01-10T13:28:40.2987350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2987360Z 
2025-01-10T13:28:40.2987400Z >   ???
2025-01-10T13:28:40.2987490Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2987540Z E   
2025-01-10T13:28:40.2987640Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2987720Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2987770Z E          ...
2025-01-10T13:28:40.2987830Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2987930Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2988020Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2988060Z E          ...
2025-01-10T13:28:40.2988120Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2988220Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2988290Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2988300Z 
2025-01-10T13:28:40.2988360Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2988520Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-beta_sobolev] ____
2025-01-10T13:28:40.2989440Z 
2025-01-10T13:28:40.2989830Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2990210Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2990400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2990670Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2990910Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2991100Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2991240Z err_msg = None
2025-01-10T13:28:40.2991250Z 
2025-01-10T13:28:40.2991480Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.2991630Z         if err_msg is None:
2025-01-10T13:28:40.2991820Z             if left.shape != right.shape:
2025-01-10T13:28:40.2991980Z                 raise_assert_detail(
2025-01-10T13:28:40.2992270Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.2992910Z                 )
2025-01-10T13:28:40.2993230Z     
2025-01-10T13:28:40.2993380Z             diff = 0
2025-01-10T13:28:40.2993600Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.2993770Z                 # count up differences
2025-01-10T13:28:40.2994240Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.2994360Z                     diff += 1
2025-01-10T13:28:40.2994410Z     
2025-01-10T13:28:40.2994480Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.2994590Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.2994720Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.2994810Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.2994860Z E           
2025-01-10T13:28:40.2994950Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.2995160Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2995370Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.2995370Z 
2025-01-10T13:28:40.2995620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.2995620Z 
2025-01-10T13:28:40.2995760Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.2995770Z 
2025-01-10T13:28:40.2995940Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442b3f50>
2025-01-10T13:28:40.2996070Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>
2025-01-10T13:28:40.2996120Z attr = 'beta_sobolev'
2025-01-10T13:28:40.2996120Z 
2025-01-10T13:28:40.2996220Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.2996310Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.2996360Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.2996410Z         try:
2025-01-10T13:28:40.2996510Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.2996570Z         except KeyError:
2025-01-10T13:28:40.2996670Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.2996720Z     
2025-01-10T13:28:40.2996780Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.2997060Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.2997120Z             if attr == "selected_atoms":
2025-01-10T13:28:40.2997230Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.2997280Z             elif actual.ndim == 1:
2025-01-10T13:28:40.2997350Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.2997430Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.2997470Z             else:
2025-01-10T13:28:40.2997540Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.2997620Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.2997620Z 
2025-01-10T13:28:40.2997710Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.2997800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2997910Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.2997950Z     ???
2025-01-10T13:28:40.2998040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.2998140Z 
2025-01-10T13:28:40.2998190Z >   ???
2025-01-10T13:28:40.2998290Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.2998330Z E   
2025-01-10T13:28:40.2998420Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.2998500Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2998550Z E          ...
2025-01-10T13:28:40.2998620Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2998720Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2998810Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.2998850Z E          ...
2025-01-10T13:28:40.2998910Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.2999010Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.2999080Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.2999090Z 
2025-01-10T13:28:40.2999150Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.2999310Z ______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-j_blues] ______
2025-01-10T13:28:40.2999310Z 
2025-01-10T13:28:40.2999420Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2999520Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2999590Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2999690Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.2999790Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.2999860Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.2999900Z err_msg = None
2025-01-10T13:28:40.2999910Z 
2025-01-10T13:28:40.2999990Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3000040Z         if err_msg is None:
2025-01-10T13:28:40.3000110Z             if left.shape != right.shape:
2025-01-10T13:28:40.3000170Z                 raise_assert_detail(
2025-01-10T13:28:40.3000280Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3000320Z                 )
2025-01-10T13:28:40.3000370Z     
2025-01-10T13:28:40.3000410Z             diff = 0
2025-01-10T13:28:40.3000500Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3000560Z                 # count up differences
2025-01-10T13:28:40.3000690Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3000740Z                     diff += 1
2025-01-10T13:28:40.3000790Z     
2025-01-10T13:28:40.3000840Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3000950Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3001130Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3001220Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3001270Z E           
2025-01-10T13:28:40.3001350Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3001550Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3001760Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3001760Z 
2025-01-10T13:28:40.3002070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3002070Z 
2025-01-10T13:28:40.3002190Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3002200Z 
2025-01-10T13:28:40.3002370Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d8110>
2025-01-10T13:28:40.3002520Z plasma = <tardis.plasma.base.BasePlasma object at 0x3170215e0>, attr = 'j_blues'
2025-01-10T13:28:40.3002520Z 
2025-01-10T13:28:40.3002630Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3002710Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3002770Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3002810Z         try:
2025-01-10T13:28:40.3002920Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3002970Z         except KeyError:
2025-01-10T13:28:40.3003080Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3003130Z     
2025-01-10T13:28:40.3003190Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3003250Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3003310Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3003420Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3003470Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3003540Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3003610Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3003660Z             else:
2025-01-10T13:28:40.3003730Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3003810Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3003810Z 
2025-01-10T13:28:40.3003900Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3003980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3004100Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3004150Z     ???
2025-01-10T13:28:40.3004230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3004240Z 
2025-01-10T13:28:40.3004280Z >   ???
2025-01-10T13:28:40.3004370Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3004420Z E   
2025-01-10T13:28:40.3004510Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3004590Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3004630Z E          ...
2025-01-10T13:28:40.3004700Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3004790Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3004870Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3004920Z E          ...
2025-01-10T13:28:40.3004980Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3005120Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3005560Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3005580Z 
2025-01-10T13:28:40.3005660Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3005820Z ________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines] ________
2025-01-10T13:28:40.3005820Z 
2025-01-10T13:28:40.3005920Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3006030Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3006100Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3006200Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3006300Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3006380Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3006890Z err_msg = None
2025-01-10T13:28:40.3006890Z 
2025-01-10T13:28:40.3006970Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3007030Z         if err_msg is None:
2025-01-10T13:28:40.3007090Z             if left.shape != right.shape:
2025-01-10T13:28:40.3007150Z                 raise_assert_detail(
2025-01-10T13:28:40.3007260Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3007310Z                 )
2025-01-10T13:28:40.3007350Z     
2025-01-10T13:28:40.3007400Z             diff = 0
2025-01-10T13:28:40.3007480Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3007540Z                 # count up differences
2025-01-10T13:28:40.3007670Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3007720Z                     diff += 1
2025-01-10T13:28:40.3007760Z     
2025-01-10T13:28:40.3007830Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3007940Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3008060Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3008150Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3008200Z E           
2025-01-10T13:28:40.3008280Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3008480Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3008680Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3008690Z 
2025-01-10T13:28:40.3008920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3008930Z 
2025-01-10T13:28:40.3009060Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3009060Z 
2025-01-10T13:28:40.3009220Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d8e90>
2025-01-10T13:28:40.3009370Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>, attr = 'lines'
2025-01-10T13:28:40.3009380Z 
2025-01-10T13:28:40.3009480Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3009560Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3009620Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3009870Z         try:
2025-01-10T13:28:40.3010030Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3010090Z         except KeyError:
2025-01-10T13:28:40.3010200Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3010240Z     
2025-01-10T13:28:40.3010300Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3010360Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3010420Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3010520Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3010580Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3010650Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3010730Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3010770Z             else:
2025-01-10T13:28:40.3010830Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3010910Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3010920Z 
2025-01-10T13:28:40.3011130Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3011220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3011330Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3011380Z     ???
2025-01-10T13:28:40.3011460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3011470Z 
2025-01-10T13:28:40.3011510Z >   ???
2025-01-10T13:28:40.3011600Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3011650Z E   
2025-01-10T13:28:40.3011740Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3011830Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3011870Z E          ...
2025-01-10T13:28:40.3012150Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3012420Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3012520Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3012570Z E          ...
2025-01-10T13:28:40.3012630Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3012720Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3012800Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3012800Z 
2025-01-10T13:28:40.3012870Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3013040Z _ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index] _
2025-01-10T13:28:40.3013040Z 
2025-01-10T13:28:40.3013210Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d8f50>
2025-01-10T13:28:40.3013330Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>
2025-01-10T13:28:40.3013390Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.3013400Z 
2025-01-10T13:28:40.3013500Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3013580Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3013640Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3013690Z         try:
2025-01-10T13:28:40.3013800Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3013850Z         except KeyError:
2025-01-10T13:28:40.3013950Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3014000Z     
2025-01-10T13:28:40.3014050Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3014120Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3014180Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3014280Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3014330Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3014390Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3014480Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3014480Z 
2025-01-10T13:28:40.3014670Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3014760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3014770Z 
2025-01-10T13:28:40.3014870Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.3014930Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.3015010Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3015070Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.3015180Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.3015240Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.3015310Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3015370Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.3015410Z err_msg = None
2025-01-10T13:28:40.3015420Z 
2025-01-10T13:28:40.3028290Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3028750Z         if err_msg is None:
2025-01-10T13:28:40.3028820Z             if left.shape != right.shape:
2025-01-10T13:28:40.3028900Z                 raise_assert_detail(
2025-01-10T13:28:40.3029020Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3029090Z                 )
2025-01-10T13:28:40.3029130Z     
2025-01-10T13:28:40.3029190Z             diff = 0
2025-01-10T13:28:40.3029280Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3029350Z                 # count up differences
2025-01-10T13:28:40.3029490Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3029540Z                     diff += 1
2025-01-10T13:28:40.3029590Z     
2025-01-10T13:28:40.3029650Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3029760Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3029910Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3029990Z E           AssertionError: Series are different
2025-01-10T13:28:40.3030040Z E           
2025-01-10T13:28:40.3030110Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.3030410Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.3030670Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3030940Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3030950Z 
2025-01-10T13:28:40.3031190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3031360Z _ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index] _
2025-01-10T13:28:40.3031370Z 
2025-01-10T13:28:40.3031880Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d9010>
2025-01-10T13:28:40.3034820Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>
2025-01-10T13:28:40.3035050Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.3035070Z 
2025-01-10T13:28:40.3035580Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3035860Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3036070Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3036260Z         try:
2025-01-10T13:28:40.3036610Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3038100Z         except KeyError:
2025-01-10T13:28:40.3038490Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3039530Z     
2025-01-10T13:28:40.3039710Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3039780Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3039850Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3039960Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3040040Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3040390Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3040490Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3040500Z 
2025-01-10T13:28:40.3040600Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3040690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3040690Z 
2025-01-10T13:28:40.3040800Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.3040860Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.3040960Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.3041030Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.3041170Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.3041240Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.3041330Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.3041400Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.3041450Z err_msg = None
2025-01-10T13:28:40.3041450Z 
2025-01-10T13:28:40.3041530Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3041590Z         if err_msg is None:
2025-01-10T13:28:40.3041650Z             if left.shape != right.shape:
2025-01-10T13:28:40.3041730Z                 raise_assert_detail(
2025-01-10T13:28:40.3041850Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3041900Z                 )
2025-01-10T13:28:40.3041940Z     
2025-01-10T13:28:40.3041990Z             diff = 0
2025-01-10T13:28:40.3042090Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3042160Z                 # count up differences
2025-01-10T13:28:40.3042290Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3042350Z                     diff += 1
2025-01-10T13:28:40.3042400Z     
2025-01-10T13:28:40.3042460Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3042560Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3042690Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3042770Z E           AssertionError: Series are different
2025-01-10T13:28:40.3042810Z E           
2025-01-10T13:28:40.3042890Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.3043200Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.3043960Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.3044270Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.3044280Z 
2025-01-10T13:28:40.3044520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3044920Z _________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-nu] __________
2025-01-10T13:28:40.3044930Z 
2025-01-10T13:28:40.3045400Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3045750Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3045950Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3046260Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3046580Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3046960Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3047140Z err_msg = None
2025-01-10T13:28:40.3047160Z 
2025-01-10T13:28:40.3047410Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3047600Z         if err_msg is None:
2025-01-10T13:28:40.3047810Z             if left.shape != right.shape:
2025-01-10T13:28:40.3048080Z                 raise_assert_detail(
2025-01-10T13:28:40.3048240Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3048290Z                 )
2025-01-10T13:28:40.3048330Z     
2025-01-10T13:28:40.3048380Z             diff = 0
2025-01-10T13:28:40.3156810Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3157300Z                 # count up differences
2025-01-10T13:28:40.3157710Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3157880Z                     diff += 1
2025-01-10T13:28:40.3158030Z     
2025-01-10T13:28:40.3158200Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3158500Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3158870Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3159140Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3159280Z E           
2025-01-10T13:28:40.3159500Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3160110Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3160740Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3160760Z 
2025-01-10T13:28:40.3161770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3162180Z 
2025-01-10T13:28:40.3162400Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3162400Z 
2025-01-10T13:28:40.3162580Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d9250>
2025-01-10T13:28:40.3162740Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>, attr = 'nu'
2025-01-10T13:28:40.3162750Z 
2025-01-10T13:28:40.3162870Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3162950Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3163010Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3163050Z         try:
2025-01-10T13:28:40.3163180Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3163240Z         except KeyError:
2025-01-10T13:28:40.3163730Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3163810Z     
2025-01-10T13:28:40.3164100Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3164170Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3164230Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3164350Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3164410Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3164470Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3164560Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3164560Z 
2025-01-10T13:28:40.3164670Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3164770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3164890Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3164930Z     ???
2025-01-10T13:28:40.3165020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3165030Z 
2025-01-10T13:28:40.3165070Z >   ???
2025-01-10T13:28:40.3165170Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3165210Z E   
2025-01-10T13:28:40.3165310Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3165400Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3165440Z E          ...
2025-01-10T13:28:40.3165510Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3165610Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3165750Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3165800Z E          ...
2025-01-10T13:28:40.3165870Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3165960Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3166040Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3166040Z 
2025-01-10T13:28:40.3166100Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3166270Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-wavelength_cm] ____
2025-01-10T13:28:40.3166270Z 
2025-01-10T13:28:40.3166380Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3166490Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3166560Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3166660Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3166800Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3166970Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3167050Z err_msg = None
2025-01-10T13:28:40.3167050Z 
2025-01-10T13:28:40.3167140Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3167190Z         if err_msg is None:
2025-01-10T13:28:40.3167400Z             if left.shape != right.shape:
2025-01-10T13:28:40.3167470Z                 raise_assert_detail(
2025-01-10T13:28:40.3167580Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3167630Z                 )
2025-01-10T13:28:40.3167670Z     
2025-01-10T13:28:40.3167720Z             diff = 0
2025-01-10T13:28:40.3167800Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3167870Z                 # count up differences
2025-01-10T13:28:40.3168000Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3168050Z                     diff += 1
2025-01-10T13:28:40.3168100Z     
2025-01-10T13:28:40.3168160Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3168270Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3168400Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3168580Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3168630Z E           
2025-01-10T13:28:40.3168710Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3169450Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3169680Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3169680Z 
2025-01-10T13:28:40.3169930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3169940Z 
2025-01-10T13:28:40.3170070Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3170070Z 
2025-01-10T13:28:40.3170240Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d9310>
2025-01-10T13:28:40.3170360Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>
2025-01-10T13:28:40.3170420Z attr = 'wavelength_cm'
2025-01-10T13:28:40.3170420Z 
2025-01-10T13:28:40.3170530Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3170610Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3170670Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3170710Z         try:
2025-01-10T13:28:40.3170820Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3170870Z         except KeyError:
2025-01-10T13:28:40.3170980Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3171030Z     
2025-01-10T13:28:40.3171090Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3171160Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3171220Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3171320Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3171380Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3171440Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3171520Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3171530Z 
2025-01-10T13:28:40.3171610Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3171710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3171980Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3172280Z     ???
2025-01-10T13:28:40.3172400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3172520Z 
2025-01-10T13:28:40.3172580Z >   ???
2025-01-10T13:28:40.3172680Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3172720Z E   
2025-01-10T13:28:40.3172810Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3172900Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3172940Z E          ...
2025-01-10T13:28:40.3173010Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3173100Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3173190Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3173230Z E          ...
2025-01-10T13:28:40.3173290Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3173390Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3173460Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3173470Z 
2025-01-10T13:28:40.3173530Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3173750Z ________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-f_lu] _________
2025-01-10T13:28:40.3173750Z 
2025-01-10T13:28:40.3173850Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3173960Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3174030Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3174150Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3174250Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3174320Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3174370Z err_msg = None
2025-01-10T13:28:40.3174370Z 
2025-01-10T13:28:40.3174450Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3174500Z         if err_msg is None:
2025-01-10T13:28:40.3174570Z             if left.shape != right.shape:
2025-01-10T13:28:40.3174630Z                 raise_assert_detail(
2025-01-10T13:28:40.3174740Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3174790Z                 )
2025-01-10T13:28:40.3174840Z     
2025-01-10T13:28:40.3174880Z             diff = 0
2025-01-10T13:28:40.3174980Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3175040Z                 # count up differences
2025-01-10T13:28:40.3175180Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3175230Z                     diff += 1
2025-01-10T13:28:40.3175280Z     
2025-01-10T13:28:40.3175350Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3175460Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3175620Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3175710Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3175760Z E           
2025-01-10T13:28:40.3175850Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3176060Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3176270Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3176280Z 
2025-01-10T13:28:40.3176570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3176580Z 
2025-01-10T13:28:40.3176720Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3176730Z 
2025-01-10T13:28:40.3176910Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d93d0>
2025-01-10T13:28:40.3177070Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>, attr = 'f_lu'
2025-01-10T13:28:40.3177220Z 
2025-01-10T13:28:40.3177660Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3177780Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3177840Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3177890Z         try:
2025-01-10T13:28:40.3178000Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3178060Z         except KeyError:
2025-01-10T13:28:40.3178170Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3178220Z     
2025-01-10T13:28:40.3178570Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3178650Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3178720Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3178830Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3178890Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3178950Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3179040Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3179040Z 
2025-01-10T13:28:40.3179140Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3179260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3179380Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3179430Z     ???
2025-01-10T13:28:40.3179510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3179520Z 
2025-01-10T13:28:40.3179560Z >   ???
2025-01-10T13:28:40.3179660Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3179700Z E   
2025-01-10T13:28:40.3179800Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3179880Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3179930Z E          ...
2025-01-10T13:28:40.3180000Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3180110Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3180230Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3180280Z E          ...
2025-01-10T13:28:40.3180340Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3180440Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3180520Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3180520Z 
2025-01-10T13:28:40.3180590Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3180750Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs] _____
2025-01-10T13:28:40.3180750Z 
2025-01-10T13:28:40.3180880Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3181010Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3181110Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3181640Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3181800Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3181880Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3181950Z err_msg = None
2025-01-10T13:28:40.3181950Z 
2025-01-10T13:28:40.3182050Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3182380Z         if err_msg is None:
2025-01-10T13:28:40.3182470Z             if left.shape != right.shape:
2025-01-10T13:28:40.3182540Z                 raise_assert_detail(
2025-01-10T13:28:40.3182650Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3182720Z                 )
2025-01-10T13:28:40.3182760Z     
2025-01-10T13:28:40.3182810Z             diff = 0
2025-01-10T13:28:40.3182900Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3182980Z                 # count up differences
2025-01-10T13:28:40.3183120Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3183170Z                     diff += 1
2025-01-10T13:28:40.3183210Z     
2025-01-10T13:28:40.3183290Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3183400Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3183560Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3183770Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3183840Z E           
2025-01-10T13:28:40.3183940Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3184210Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3184440Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3184450Z 
2025-01-10T13:28:40.3184700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3184710Z 
2025-01-10T13:28:40.3184860Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3184870Z 
2025-01-10T13:28:40.3185040Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d9b50>
2025-01-10T13:28:40.3185160Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>
2025-01-10T13:28:40.3185230Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.3185240Z 
2025-01-10T13:28:40.3185350Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3185440Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3185490Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3185540Z         try:
2025-01-10T13:28:40.3185650Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3185730Z         except KeyError:
2025-01-10T13:28:40.3185850Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3185920Z     
2025-01-10T13:28:40.3185980Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3186280Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3187710Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3187840Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3187930Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3188000Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3188090Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3188140Z             else:
2025-01-10T13:28:40.3188210Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3188310Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3188310Z 
2025-01-10T13:28:40.3188410Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3188540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3188860Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3188940Z     ???
2025-01-10T13:28:40.3189040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3189040Z 
2025-01-10T13:28:40.3189090Z >   ???
2025-01-10T13:28:40.3189200Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3189250Z E   
2025-01-10T13:28:40.3189360Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3189440Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3189500Z E          ...
2025-01-10T13:28:40.3189590Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3189710Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3189830Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3189880Z E          ...
2025-01-10T13:28:40.3189950Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3190060Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3190270Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3190270Z 
2025-01-10T13:28:40.3190340Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3190510Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-beta_sobolev] _____
2025-01-10T13:28:40.3190520Z 
2025-01-10T13:28:40.3190630Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3190740Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3190820Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3190930Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3191050Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3191160Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3191230Z err_msg = None
2025-01-10T13:28:40.3191240Z 
2025-01-10T13:28:40.3191330Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3191390Z         if err_msg is None:
2025-01-10T13:28:40.3191460Z             if left.shape != right.shape:
2025-01-10T13:28:40.3191520Z                 raise_assert_detail(
2025-01-10T13:28:40.3191630Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3191680Z                 )
2025-01-10T13:28:40.3191730Z     
2025-01-10T13:28:40.3191770Z             diff = 0
2025-01-10T13:28:40.3191870Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3192240Z                 # count up differences
2025-01-10T13:28:40.3193320Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3193510Z                     diff += 1
2025-01-10T13:28:40.3193820Z     
2025-01-10T13:28:40.3194200Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3194340Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3194490Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3194580Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3194640Z E           
2025-01-10T13:28:40.3194750Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3194970Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3195200Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3195900Z 
2025-01-10T13:28:40.3196980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3197000Z 
2025-01-10T13:28:40.3197340Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3197350Z 
2025-01-10T13:28:40.3197530Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d9c10>
2025-01-10T13:28:40.3197670Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>
2025-01-10T13:28:40.3197740Z attr = 'beta_sobolev'
2025-01-10T13:28:40.3197750Z 
2025-01-10T13:28:40.3197860Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3197970Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3198060Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3198130Z         try:
2025-01-10T13:28:40.3198930Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3199220Z         except KeyError:
2025-01-10T13:28:40.3199350Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3199420Z     
2025-01-10T13:28:40.3199490Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3199550Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3199610Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3199720Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3199780Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3199920Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3200040Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3200090Z             else:
2025-01-10T13:28:40.3200150Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3200260Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3200270Z 
2025-01-10T13:28:40.3200370Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3200470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3200590Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3200640Z     ???
2025-01-10T13:28:40.3200740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3200750Z 
2025-01-10T13:28:40.3200810Z >   ???
2025-01-10T13:28:40.3200910Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3200950Z E   
2025-01-10T13:28:40.3201050Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3201130Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3201170Z E          ...
2025-01-10T13:28:40.3201240Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3201330Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3201420Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3201470Z E          ...
2025-01-10T13:28:40.3201530Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3201630Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3201700Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3201700Z 
2025-01-10T13:28:40.3201770Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3201930Z _______ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-j_blues] _______
2025-01-10T13:28:40.3201930Z 
2025-01-10T13:28:40.3202040Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3202150Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3202220Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3202320Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3202530Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3202630Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3202690Z err_msg = None
2025-01-10T13:28:40.3202700Z 
2025-01-10T13:28:40.3202790Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3202850Z         if err_msg is None:
2025-01-10T13:28:40.3202910Z             if left.shape != right.shape:
2025-01-10T13:28:40.3202980Z                 raise_assert_detail(
2025-01-10T13:28:40.3203100Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3203160Z                 )
2025-01-10T13:28:40.3203200Z     
2025-01-10T13:28:40.3203250Z             diff = 0
2025-01-10T13:28:40.3203360Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3203430Z                 # count up differences
2025-01-10T13:28:40.3203570Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3203950Z                     diff += 1
2025-01-10T13:28:40.3203990Z     
2025-01-10T13:28:40.3204060Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3204170Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3204320Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3204430Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3204480Z E           
2025-01-10T13:28:40.3204570Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3204800Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3205030Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3205030Z 
2025-01-10T13:28:40.3205270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3205270Z 
2025-01-10T13:28:40.3205410Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3205410Z 
2025-01-10T13:28:40.3205590Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442d9d90>
2025-01-10T13:28:40.3205760Z plasma = <tardis.plasma.base.BasePlasma object at 0x304e92ea0>, attr = 'j_blues'
2025-01-10T13:28:40.3205760Z 
2025-01-10T13:28:40.3205870Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3206130Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3206340Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3206400Z         try:
2025-01-10T13:28:40.3206510Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3206560Z         except KeyError:
2025-01-10T13:28:40.3206670Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3206720Z     
2025-01-10T13:28:40.3222400Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3222610Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3222680Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3222800Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3222870Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3222970Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3223080Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3223660Z             else:
2025-01-10T13:28:40.3223750Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3223840Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3223840Z 
2025-01-10T13:28:40.3223940Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3224040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3224150Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3224190Z     ???
2025-01-10T13:28:40.3224280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3224290Z 
2025-01-10T13:28:40.3224330Z >   ???
2025-01-10T13:28:40.3224420Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3224470Z E   
2025-01-10T13:28:40.3224560Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3224650Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3224700Z E          ...
2025-01-10T13:28:40.3224930Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3225050Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3225140Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3225190Z E          ...
2025-01-10T13:28:40.3225250Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3225360Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3225460Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3225460Z 
2025-01-10T13:28:40.3225540Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3225720Z ____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines] _____
2025-01-10T13:28:40.3225730Z 
2025-01-10T13:28:40.3225860Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3225980Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3226060Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3226180Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3226310Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3226410Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3226490Z err_msg = None
2025-01-10T13:28:40.3226490Z 
2025-01-10T13:28:40.3226590Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3226660Z         if err_msg is None:
2025-01-10T13:28:40.3226730Z             if left.shape != right.shape:
2025-01-10T13:28:40.3226780Z                 raise_assert_detail(
2025-01-10T13:28:40.3226910Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3226970Z                 )
2025-01-10T13:28:40.3227010Z     
2025-01-10T13:28:40.3227070Z             diff = 0
2025-01-10T13:28:40.3227180Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3227260Z                 # count up differences
2025-01-10T13:28:40.3227400Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3227470Z                     diff += 1
2025-01-10T13:28:40.3227530Z     
2025-01-10T13:28:40.3227590Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3227700Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3227860Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3227950Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3228000Z E           
2025-01-10T13:28:40.3228090Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3228320Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3228680Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3228690Z 
2025-01-10T13:28:40.3229520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3229550Z 
2025-01-10T13:28:40.3229710Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3229720Z 
2025-01-10T13:28:40.3229920Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442dab10>
2025-01-10T13:28:40.3230110Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>, attr = 'lines'
2025-01-10T13:28:40.3230240Z 
2025-01-10T13:28:40.3230350Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3230460Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3230540Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3230590Z         try:
2025-01-10T13:28:40.3230720Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3230790Z         except KeyError:
2025-01-10T13:28:40.3230920Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3230970Z     
2025-01-10T13:28:40.3231030Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3231090Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3231150Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3231260Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3231320Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3231390Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3231470Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3231520Z             else:
2025-01-10T13:28:40.3231590Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3231670Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3231670Z 
2025-01-10T13:28:40.3231760Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3231850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3231960Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3232010Z     ???
2025-01-10T13:28:40.3232090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3232090Z 
2025-01-10T13:28:40.3232140Z >   ???
2025-01-10T13:28:40.3232240Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3232280Z E   
2025-01-10T13:28:40.3232380Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3232460Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3232510Z E          ...
2025-01-10T13:28:40.3232570Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3232690Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3232780Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3232820Z E          ...
2025-01-10T13:28:40.3232890Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3234980Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3235450Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3235470Z 
2025-01-10T13:28:40.3235670Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3237230Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index] _
2025-01-10T13:28:40.3237760Z 
2025-01-10T13:28:40.3238040Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442dabd0>
2025-01-10T13:28:40.3238200Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>
2025-01-10T13:28:40.3238290Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.3238290Z 
2025-01-10T13:28:40.3238420Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3238540Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3238620Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3238690Z         try:
2025-01-10T13:28:40.3238830Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3238900Z         except KeyError:
2025-01-10T13:28:40.3239020Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3239080Z     
2025-01-10T13:28:40.3239160Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3239250Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3239340Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3239600Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3239660Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3239730Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3239830Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3239830Z 
2025-01-10T13:28:40.3239950Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3240040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3240050Z 
2025-01-10T13:28:40.3240150Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.3240210Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.3240300Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3240360Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.3240460Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.3240550Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.3240630Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3240690Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.3240740Z err_msg = None
2025-01-10T13:28:40.3240740Z 
2025-01-10T13:28:40.3240840Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3240900Z         if err_msg is None:
2025-01-10T13:28:40.3240970Z             if left.shape != right.shape:
2025-01-10T13:28:40.3241050Z                 raise_assert_detail(
2025-01-10T13:28:40.3241630Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3241730Z                 )
2025-01-10T13:28:40.3241790Z     
2025-01-10T13:28:40.3241830Z             diff = 0
2025-01-10T13:28:40.3241920Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3241980Z                 # count up differences
2025-01-10T13:28:40.3242130Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3242180Z                     diff += 1
2025-01-10T13:28:40.3242220Z     
2025-01-10T13:28:40.3242290Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3242390Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3242530Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3242600Z E           AssertionError: Series are different
2025-01-10T13:28:40.3242650Z E           
2025-01-10T13:28:40.3242720Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.3243020Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.3243400Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3243670Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3243680Z 
2025-01-10T13:28:40.3243930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3244530Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index] _
2025-01-10T13:28:40.3244530Z 
2025-01-10T13:28:40.3244700Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442dac90>
2025-01-10T13:28:40.3244820Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>
2025-01-10T13:28:40.3244890Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.3244890Z 
2025-01-10T13:28:40.3244990Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3245080Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3245140Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3245180Z         try:
2025-01-10T13:28:40.3245290Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3245350Z         except KeyError:
2025-01-10T13:28:40.3245460Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3245520Z     
2025-01-10T13:28:40.3245910Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3246480Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3246720Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3247020Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3247260Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3247450Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3247710Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3247720Z 
2025-01-10T13:28:40.3248010Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3248340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3248360Z 
2025-01-10T13:28:40.3248510Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.3248580Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.3248690Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.3248770Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.3248910Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.3248990Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.3249080Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.3249130Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.3249180Z err_msg = None
2025-01-10T13:28:40.3249180Z 
2025-01-10T13:28:40.3249280Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3249360Z         if err_msg is None:
2025-01-10T13:28:40.3249430Z             if left.shape != right.shape:
2025-01-10T13:28:40.3249490Z                 raise_assert_detail(
2025-01-10T13:28:40.3249620Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3250010Z                 )
2025-01-10T13:28:40.3250060Z     
2025-01-10T13:28:40.3250120Z             diff = 0
2025-01-10T13:28:40.3250220Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3250310Z                 # count up differences
2025-01-10T13:28:40.3250450Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3250520Z                     diff += 1
2025-01-10T13:28:40.3250570Z     
2025-01-10T13:28:40.3250640Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3250760Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3250910Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3251000Z E           AssertionError: Series are different
2025-01-10T13:28:40.3251070Z E           
2025-01-10T13:28:40.3251170Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.3251540Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.3252670Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.3252990Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.3253000Z 
2025-01-10T13:28:40.3253290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3253490Z ______ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-nu] ______
2025-01-10T13:28:40.3253500Z 
2025-01-10T13:28:40.3253630Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3253760Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3253860Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3253990Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3254110Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3254220Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3254280Z err_msg = None
2025-01-10T13:28:40.3254290Z 
2025-01-10T13:28:40.3254380Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3254460Z         if err_msg is None:
2025-01-10T13:28:40.3254530Z             if left.shape != right.shape:
2025-01-10T13:28:40.3254590Z                 raise_assert_detail(
2025-01-10T13:28:40.3254720Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3254770Z                 )
2025-01-10T13:28:40.3254820Z     
2025-01-10T13:28:40.3254870Z             diff = 0
2025-01-10T13:28:40.3254950Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3255010Z                 # count up differences
2025-01-10T13:28:40.3255150Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3255330Z                     diff += 1
2025-01-10T13:28:40.3255390Z     
2025-01-10T13:28:40.3255460Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3255560Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3255700Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3255800Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3255850Z E           
2025-01-10T13:28:40.3255930Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3256130Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3256350Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3256460Z 
2025-01-10T13:28:40.3256720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3256720Z 
2025-01-10T13:28:40.3256870Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3256880Z 
2025-01-10T13:28:40.3257070Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442daed0>
2025-01-10T13:28:40.3257240Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>, attr = 'nu'
2025-01-10T13:28:40.3257250Z 
2025-01-10T13:28:40.3257350Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3257440Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3257510Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3257560Z         try:
2025-01-10T13:28:40.3257670Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3257730Z         except KeyError:
2025-01-10T13:28:40.3257860Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3257910Z     
2025-01-10T13:28:40.3257970Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3258050Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3258130Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3258240Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3258300Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3258360Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3258480Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3258480Z 
2025-01-10T13:28:40.3258600Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3258720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3258870Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3258930Z     ???
2025-01-10T13:28:40.3259020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3259030Z 
2025-01-10T13:28:40.3259070Z >   ???
2025-01-10T13:28:40.3259190Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3259240Z E   
2025-01-10T13:28:40.3259350Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3259450Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3259510Z E          ...
2025-01-10T13:28:40.3259570Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3259670Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3259760Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3259910Z E          ...
2025-01-10T13:28:40.3259980Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3260130Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3260250Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3260260Z 
2025-01-10T13:28:40.3260330Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3261070Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm] _
2025-01-10T13:28:40.3261270Z 
2025-01-10T13:28:40.3261760Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3262230Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3262350Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3262820Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3263000Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3264240Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3264360Z err_msg = None
2025-01-10T13:28:40.3264370Z 
2025-01-10T13:28:40.3264530Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3264630Z         if err_msg is None:
2025-01-10T13:28:40.3264750Z             if left.shape != right.shape:
2025-01-10T13:28:40.3264850Z                 raise_assert_detail(
2025-01-10T13:28:40.3265020Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3265100Z                 )
2025-01-10T13:28:40.3265170Z     
2025-01-10T13:28:40.3265260Z             diff = 0
2025-01-10T13:28:40.3265350Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3265940Z                 # count up differences
2025-01-10T13:28:40.3266170Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3266240Z                     diff += 1
2025-01-10T13:28:40.3266290Z     
2025-01-10T13:28:40.3266380Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3266530Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3266740Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3266840Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3266930Z E           
2025-01-10T13:28:40.3267070Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3267330Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3267620Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3267630Z 
2025-01-10T13:28:40.3268180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3269230Z 
2025-01-10T13:28:40.3273240Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3273250Z 
2025-01-10T13:28:40.3273610Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442daf90>
2025-01-10T13:28:40.3273760Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>
2025-01-10T13:28:40.3273830Z attr = 'wavelength_cm'
2025-01-10T13:28:40.3273850Z 
2025-01-10T13:28:40.3273970Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3274240Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3274320Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3274360Z         try:
2025-01-10T13:28:40.3274730Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3274820Z         except KeyError:
2025-01-10T13:28:40.3274970Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3275040Z     
2025-01-10T13:28:40.3275700Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3275780Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3275850Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3275950Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3276010Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3276090Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3276460Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3276470Z 
2025-01-10T13:28:40.3276610Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3277510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3277650Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3277700Z     ???
2025-01-10T13:28:40.3277810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3277810Z 
2025-01-10T13:28:40.3277860Z >   ???
2025-01-10T13:28:40.3278230Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3278300Z E   
2025-01-10T13:28:40.3278640Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3278760Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3278820Z E          ...
2025-01-10T13:28:40.3278940Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3279090Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3279200Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3279270Z E          ...
2025-01-10T13:28:40.3279340Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3279460Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3279540Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3279550Z 
2025-01-10T13:28:40.3279620Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3279790Z _____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-f_lu] _____
2025-01-10T13:28:40.3279790Z 
2025-01-10T13:28:40.3279910Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3280400Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3280500Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3280630Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3280740Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3280820Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3280870Z err_msg = None
2025-01-10T13:28:40.3280870Z 
2025-01-10T13:28:40.3280960Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3281020Z         if err_msg is None:
2025-01-10T13:28:40.3281120Z             if left.shape != right.shape:
2025-01-10T13:28:40.3281200Z                 raise_assert_detail(
2025-01-10T13:28:40.3281320Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3281360Z                 )
2025-01-10T13:28:40.3281410Z     
2025-01-10T13:28:40.3281460Z             diff = 0
2025-01-10T13:28:40.3281540Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3281610Z                 # count up differences
2025-01-10T13:28:40.3281750Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3282530Z                     diff += 1
2025-01-10T13:28:40.3282590Z     
2025-01-10T13:28:40.3282680Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3282820Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3282960Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3283070Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3283430Z E           
2025-01-10T13:28:40.3283760Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3284020Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3284260Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3285210Z 
2025-01-10T13:28:40.3286550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3286560Z 
2025-01-10T13:28:40.3286750Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3286760Z 
2025-01-10T13:28:40.3286960Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442db050>
2025-01-10T13:28:40.3287160Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>, attr = 'f_lu'
2025-01-10T13:28:40.3287180Z 
2025-01-10T13:28:40.3287580Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3287710Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3287790Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3287840Z         try:
2025-01-10T13:28:40.3287950Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3288010Z         except KeyError:
2025-01-10T13:28:40.3288130Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3288200Z     
2025-01-10T13:28:40.3288280Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3288370Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3288450Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3288590Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3288670Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3288730Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3288820Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3288820Z 
2025-01-10T13:28:40.3288920Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3289030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3289150Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3289280Z     ???
2025-01-10T13:28:40.3289370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3289370Z 
2025-01-10T13:28:40.3289410Z >   ???
2025-01-10T13:28:40.3290030Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3290660Z E   
2025-01-10T13:28:40.3290840Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3290930Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3290980Z E          ...
2025-01-10T13:28:40.3291050Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3291150Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3291240Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3291420Z E          ...
2025-01-10T13:28:40.3291490Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3291590Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3291670Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3291670Z 
2025-01-10T13:28:40.3291730Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3293030Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs] _
2025-01-10T13:28:40.3293050Z 
2025-01-10T13:28:40.3293160Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3293270Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3293340Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3293870Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3294740Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3294990Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3295050Z err_msg = None
2025-01-10T13:28:40.3295060Z 
2025-01-10T13:28:40.3295140Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3295200Z         if err_msg is None:
2025-01-10T13:28:40.3295270Z             if left.shape != right.shape:
2025-01-10T13:28:40.3295330Z                 raise_assert_detail(
2025-01-10T13:28:40.3295450Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3295500Z                 )
2025-01-10T13:28:40.3295540Z     
2025-01-10T13:28:40.3295590Z             diff = 0
2025-01-10T13:28:40.3295670Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3295740Z                 # count up differences
2025-01-10T13:28:40.3295880Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3295950Z                     diff += 1
2025-01-10T13:28:40.3296000Z     
2025-01-10T13:28:40.3296070Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3296170Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3296310Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3296400Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3296450Z E           
2025-01-10T13:28:40.3296540Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3296750Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3296970Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3296980Z 
2025-01-10T13:28:40.3297520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3297560Z 
2025-01-10T13:28:40.3297900Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3297910Z 
2025-01-10T13:28:40.3298650Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442db7d0>
2025-01-10T13:28:40.3298820Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>
2025-01-10T13:28:40.3299130Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.3299170Z 
2025-01-10T13:28:40.3299490Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3299730Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3300310Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3300520Z         try:
2025-01-10T13:28:40.3301250Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3301470Z         except KeyError:
2025-01-10T13:28:40.3302050Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3302150Z     
2025-01-10T13:28:40.3302220Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3302300Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3302360Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3302470Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3302530Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3302600Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3302700Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3302930Z             else:
2025-01-10T13:28:40.3303290Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3304870Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3304890Z 
2025-01-10T13:28:40.3305460Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3305880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3306220Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3306420Z     ???
2025-01-10T13:28:40.3307380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3307410Z 
2025-01-10T13:28:40.3307800Z >   ???
2025-01-10T13:28:40.3308420Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3308700Z E   
2025-01-10T13:28:40.3309050Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3309180Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3309250Z E          ...
2025-01-10T13:28:40.3309690Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3310170Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3310600Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3310840Z E          ...
2025-01-10T13:28:40.3311080Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3311390Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3311490Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3311660Z 
2025-01-10T13:28:40.3312040Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3312800Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev] _
2025-01-10T13:28:40.3312810Z 
2025-01-10T13:28:40.3313260Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3313620Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3313960Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3314480Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3314620Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3314700Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3314750Z err_msg = None
2025-01-10T13:28:40.3314760Z 
2025-01-10T13:28:40.3315150Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3315500Z         if err_msg is None:
2025-01-10T13:28:40.3315700Z             if left.shape != right.shape:
2025-01-10T13:28:40.3315870Z                 raise_assert_detail(
2025-01-10T13:28:40.3316220Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3316700Z                 )
2025-01-10T13:28:40.3317350Z     
2025-01-10T13:28:40.3317590Z             diff = 0
2025-01-10T13:28:40.3318640Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3319100Z                 # count up differences
2025-01-10T13:28:40.3319560Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3319830Z                     diff += 1
2025-01-10T13:28:40.3319980Z     
2025-01-10T13:28:40.3320240Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3321200Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3321350Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3321450Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3321530Z E           
2025-01-10T13:28:40.3321660Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3321920Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3324030Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3324040Z 
2025-01-10T13:28:40.3324360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3324370Z 
2025-01-10T13:28:40.3324940Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3324990Z 
2025-01-10T13:28:40.3326520Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442db890>
2025-01-10T13:28:40.3327460Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>
2025-01-10T13:28:40.3328000Z attr = 'beta_sobolev'
2025-01-10T13:28:40.3328010Z 
2025-01-10T13:28:40.3328330Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3328440Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3328510Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3328550Z         try:
2025-01-10T13:28:40.3328680Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3328790Z         except KeyError:
2025-01-10T13:28:40.3328930Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3330610Z     
2025-01-10T13:28:40.3330700Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3331950Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3332750Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3333160Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3333240Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3333990Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3335030Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3335270Z             else:
2025-01-10T13:28:40.3335710Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3336140Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3336160Z 
2025-01-10T13:28:40.3336470Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3337130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3338950Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3340160Z     ???
2025-01-10T13:28:40.3340830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3340840Z 
2025-01-10T13:28:40.3340990Z >   ???
2025-01-10T13:28:40.3341580Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3358310Z E   
2025-01-10T13:28:40.3358490Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3358600Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3358650Z E          ...
2025-01-10T13:28:40.3358720Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3358830Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3358950Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3359000Z E          ...
2025-01-10T13:28:40.3359070Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3360130Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3360520Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3360540Z 
2025-01-10T13:28:40.3361750Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3362010Z ___ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-j_blues] ____
2025-01-10T13:28:40.3362020Z 
2025-01-10T13:28:40.3362170Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3362590Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3362670Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3362780Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3362880Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3363190Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3363260Z err_msg = None
2025-01-10T13:28:40.3363260Z 
2025-01-10T13:28:40.3363350Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3363410Z         if err_msg is None:
2025-01-10T13:28:40.3363500Z             if left.shape != right.shape:
2025-01-10T13:28:40.3363580Z                 raise_assert_detail(
2025-01-10T13:28:40.3363720Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3363770Z                 )
2025-01-10T13:28:40.3363810Z     
2025-01-10T13:28:40.3363860Z             diff = 0
2025-01-10T13:28:40.3363950Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3364030Z                 # count up differences
2025-01-10T13:28:40.3364190Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3364260Z                     diff += 1
2025-01-10T13:28:40.3364310Z     
2025-01-10T13:28:40.3364390Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3364520Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3364680Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3364780Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3364840Z E           
2025-01-10T13:28:40.3364940Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3365190Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3365420Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3365420Z 
2025-01-10T13:28:40.3365690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3365700Z 
2025-01-10T13:28:40.3365850Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3366000Z 
2025-01-10T13:28:40.3366200Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1442dba10>
2025-01-10T13:28:40.3366390Z plasma = <tardis.plasma.base.BasePlasma object at 0x327c98e90>, attr = 'j_blues'
2025-01-10T13:28:40.3366400Z 
2025-01-10T13:28:40.3366530Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3366640Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3366700Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3366750Z         try:
2025-01-10T13:28:40.3366870Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3366950Z         except KeyError:
2025-01-10T13:28:40.3367070Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3367120Z     
2025-01-10T13:28:40.3367180Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3367260Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3367340Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3367590Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3367650Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3367720Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3367800Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3367850Z             else:
2025-01-10T13:28:40.3367920Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3368010Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3368010Z 
2025-01-10T13:28:40.3368100Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3368190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3368300Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3368340Z     ???
2025-01-10T13:28:40.3368430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3368440Z 
2025-01-10T13:28:40.3368510Z >   ???
2025-01-10T13:28:40.3368620Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3368670Z E   
2025-01-10T13:28:40.3368770Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3368850Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3368900Z E          ...
2025-01-10T13:28:40.3368970Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3369060Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3369150Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3369190Z E          ...
2025-01-10T13:28:40.3369250Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3369360Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3369440Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3369450Z 
2025-01-10T13:28:40.3369510Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3369730Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines] _
2025-01-10T13:28:40.3369740Z 
2025-01-10T13:28:40.3369860Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3369990Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3370070Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3370200Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3370330Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3370400Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3370460Z err_msg = None
2025-01-10T13:28:40.3370460Z 
2025-01-10T13:28:40.3370650Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3370860Z         if err_msg is None:
2025-01-10T13:28:40.3370950Z             if left.shape != right.shape:
2025-01-10T13:28:40.3371030Z                 raise_assert_detail(
2025-01-10T13:28:40.3371150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3371200Z                 )
2025-01-10T13:28:40.3371270Z     
2025-01-10T13:28:40.3371320Z             diff = 0
2025-01-10T13:28:40.3371400Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3371460Z                 # count up differences
2025-01-10T13:28:40.3371590Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3371640Z                     diff += 1
2025-01-10T13:28:40.3371690Z     
2025-01-10T13:28:40.3371750Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3371870Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3372040Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3372230Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3372270Z E           
2025-01-10T13:28:40.3372370Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3372610Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3372860Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3372880Z 
2025-01-10T13:28:40.3373150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3373160Z 
2025-01-10T13:28:40.3373310Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3373320Z 
2025-01-10T13:28:40.3373510Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1443007d0>
2025-01-10T13:28:40.3373700Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>, attr = 'lines'
2025-01-10T13:28:40.3373700Z 
2025-01-10T13:28:40.3373830Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3373940Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3374020Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3374080Z         try:
2025-01-10T13:28:40.3374210Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3374270Z         except KeyError:
2025-01-10T13:28:40.3374400Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3374470Z     
2025-01-10T13:28:40.3374540Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3374630Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3374700Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3374820Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3374890Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3374970Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3375060Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3375120Z             else:
2025-01-10T13:28:40.3375200Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3375300Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3375310Z 
2025-01-10T13:28:40.3375400Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3375520Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3375760Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3375820Z     ???
2025-01-10T13:28:40.3375930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3375940Z 
2025-01-10T13:28:40.3375990Z >   ???
2025-01-10T13:28:40.3376100Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3376520Z E   
2025-01-10T13:28:40.3377520Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3377790Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3378100Z E          ...
2025-01-10T13:28:40.3378240Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3378340Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3378430Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3378470Z E          ...
2025-01-10T13:28:40.3378530Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3378640Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3380100Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3380120Z 
2025-01-10T13:28:40.3380350Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3381080Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index] _
2025-01-10T13:28:40.3381100Z 
2025-01-10T13:28:40.3381780Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144300890>
2025-01-10T13:28:40.3382200Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>
2025-01-10T13:28:40.3382410Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.3382430Z 
2025-01-10T13:28:40.3382710Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3382940Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3383110Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3383260Z         try:
2025-01-10T13:28:40.3384710Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3384830Z         except KeyError:
2025-01-10T13:28:40.3384940Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3384980Z     
2025-01-10T13:28:40.3385040Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3385110Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3385170Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3385270Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3385330Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3385390Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3385470Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3385480Z 
2025-01-10T13:28:40.3385570Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3385660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3385660Z 
2025-01-10T13:28:40.3385760Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.3385830Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.3385920Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3385970Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.3386080Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:28:40.3386130Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:28:40.3386210Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3386270Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:28:40.3386310Z err_msg = None
2025-01-10T13:28:40.3386320Z 
2025-01-10T13:28:40.3386400Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3386450Z         if err_msg is None:
2025-01-10T13:28:40.3386510Z             if left.shape != right.shape:
2025-01-10T13:28:40.3386890Z                 raise_assert_detail(
2025-01-10T13:28:40.3387020Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3387070Z                 )
2025-01-10T13:28:40.3387120Z     
2025-01-10T13:28:40.3387170Z             diff = 0
2025-01-10T13:28:40.3387260Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3387340Z                 # count up differences
2025-01-10T13:28:40.3387490Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3387550Z                     diff += 1
2025-01-10T13:28:40.3387590Z     
2025-01-10T13:28:40.3387650Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3387770Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3387920Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3388000Z E           AssertionError: Series are different
2025-01-10T13:28:40.3388050Z E           
2025-01-10T13:28:40.3388230Z E           Series values are different (4.04858 %)
2025-01-10T13:28:40.3388550Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.3388840Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3389150Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3389160Z 
2025-01-10T13:28:40.3389420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3389670Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index] _
2025-01-10T13:28:40.3389670Z 
2025-01-10T13:28:40.3389840Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144300950>
2025-01-10T13:28:40.3389960Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>
2025-01-10T13:28:40.3390020Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.3390020Z 
2025-01-10T13:28:40.3390130Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3390220Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3390280Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3390340Z         try:
2025-01-10T13:28:40.3390460Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3390510Z         except KeyError:
2025-01-10T13:28:40.3390620Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3390670Z     
2025-01-10T13:28:40.3390740Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3390820Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3390890Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3391000Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3391060Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3391120Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3391210Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3391300Z 
2025-01-10T13:28:40.3391400Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3391490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3391500Z 
2025-01-10T13:28:40.3391620Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.3391690Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.3391790Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.3391840Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.3391950Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:28:40.3392020Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:28:40.3392110Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:28:40.3392180Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:28:40.3392240Z err_msg = None
2025-01-10T13:28:40.3392240Z 
2025-01-10T13:28:40.3392410Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3392470Z         if err_msg is None:
2025-01-10T13:28:40.3392550Z             if left.shape != right.shape:
2025-01-10T13:28:40.3392610Z                 raise_assert_detail(
2025-01-10T13:28:40.3392730Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3392790Z                 )
2025-01-10T13:28:40.3392830Z     
2025-01-10T13:28:40.3392880Z             diff = 0
2025-01-10T13:28:40.3392970Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3393040Z                 # count up differences
2025-01-10T13:28:40.3393190Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3393250Z                     diff += 1
2025-01-10T13:28:40.3393290Z     
2025-01-10T13:28:40.3393350Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3393460Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3393600Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3393670Z E           AssertionError: Series are different
2025-01-10T13:28:40.3393720Z E           
2025-01-10T13:28:40.3394010Z E           Series values are different (6.47773 %)
2025-01-10T13:28:40.3394300Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.3394600Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.3394910Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.3394910Z 
2025-01-10T13:28:40.3395160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3395360Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu] _
2025-01-10T13:28:40.3395470Z 
2025-01-10T13:28:40.3395580Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3395680Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3395760Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3395860Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3395970Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3396050Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3396110Z err_msg = None
2025-01-10T13:28:40.3396120Z 
2025-01-10T13:28:40.3396200Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3396260Z         if err_msg is None:
2025-01-10T13:28:40.3396340Z             if left.shape != right.shape:
2025-01-10T13:28:40.3396400Z                 raise_assert_detail(
2025-01-10T13:28:40.3396510Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3396680Z                 )
2025-01-10T13:28:40.3396740Z     
2025-01-10T13:28:40.3396790Z             diff = 0
2025-01-10T13:28:40.3396870Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3396930Z                 # count up differences
2025-01-10T13:28:40.3397060Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3397110Z                     diff += 1
2025-01-10T13:28:40.3397160Z     
2025-01-10T13:28:40.3397220Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3397340Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3397490Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3397580Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3397630Z E           
2025-01-10T13:28:40.3397730Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3397940Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3398160Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3398170Z 
2025-01-10T13:28:40.3398430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3398440Z 
2025-01-10T13:28:40.3398580Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3398590Z 
2025-01-10T13:28:40.3398790Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144300b90>
2025-01-10T13:28:40.3398950Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>, attr = 'nu'
2025-01-10T13:28:40.3398950Z 
2025-01-10T13:28:40.3399070Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3399180Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3399240Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3399280Z         try:
2025-01-10T13:28:40.3399400Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3399460Z         except KeyError:
2025-01-10T13:28:40.3399560Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3399600Z     
2025-01-10T13:28:40.3399660Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3399720Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3399860Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3399960Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3400030Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3400090Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3400170Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3400170Z 
2025-01-10T13:28:40.3400270Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3400370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3400510Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3400560Z     ???
2025-01-10T13:28:40.3400650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3400650Z 
2025-01-10T13:28:40.3400690Z >   ???
2025-01-10T13:28:40.3400790Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3400850Z E   
2025-01-10T13:28:40.3400960Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3401600Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3401650Z E          ...
2025-01-10T13:28:40.3401710Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3401820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3401920Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3401980Z E          ...
2025-01-10T13:28:40.3402040Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3402140Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3402210Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3402220Z 
2025-01-10T13:28:40.3402280Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3402530Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm] _
2025-01-10T13:28:40.3402540Z 
2025-01-10T13:28:40.3402660Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3402780Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3402850Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3402980Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3403080Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3403160Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3403220Z err_msg = None
2025-01-10T13:28:40.3403230Z 
2025-01-10T13:28:40.3403320Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3403370Z         if err_msg is None:
2025-01-10T13:28:40.3403440Z             if left.shape != right.shape:
2025-01-10T13:28:40.3403500Z                 raise_assert_detail(
2025-01-10T13:28:40.3403610Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3403660Z                 )
2025-01-10T13:28:40.3403710Z     
2025-01-10T13:28:40.3403750Z             diff = 0
2025-01-10T13:28:40.3403830Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3403890Z                 # count up differences
2025-01-10T13:28:40.3404040Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3404090Z                     diff += 1
2025-01-10T13:28:40.3404130Z     
2025-01-10T13:28:40.3404200Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3404300Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3404450Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3404530Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3404580Z E           
2025-01-10T13:28:40.3404960Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3405200Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3405410Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3405410Z 
2025-01-10T13:28:40.3405660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3405660Z 
2025-01-10T13:28:40.3405810Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3405910Z 
2025-01-10T13:28:40.3406090Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144300c50>
2025-01-10T13:28:40.3406240Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>
2025-01-10T13:28:40.3406290Z attr = 'wavelength_cm'
2025-01-10T13:28:40.3406300Z 
2025-01-10T13:28:40.3406400Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3406490Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3406540Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3406590Z         try:
2025-01-10T13:28:40.3406700Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3406750Z         except KeyError:
2025-01-10T13:28:40.3406860Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3406900Z     
2025-01-10T13:28:40.3406960Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3407020Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3407090Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3407190Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3407250Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3407320Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3407400Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3407400Z 
2025-01-10T13:28:40.3407490Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3407580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3407700Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3407750Z     ???
2025-01-10T13:28:40.3407840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3407840Z 
2025-01-10T13:28:40.3407880Z >   ???
2025-01-10T13:28:40.3407990Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3408050Z E   
2025-01-10T13:28:40.3408170Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3408250Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3408300Z E          ...
2025-01-10T13:28:40.3408360Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3408450Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3408540Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3408590Z E          ...
2025-01-10T13:28:40.3408670Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3408780Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3408870Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3408880Z 
2025-01-10T13:28:40.3408940Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3409160Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu] _
2025-01-10T13:28:40.3409250Z 
2025-01-10T13:28:40.3409360Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3409460Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3409530Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3409630Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3409730Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3409800Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3409850Z err_msg = None
2025-01-10T13:28:40.3409860Z 
2025-01-10T13:28:40.3409950Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3410000Z         if err_msg is None:
2025-01-10T13:28:40.3410070Z             if left.shape != right.shape:
2025-01-10T13:28:40.3410130Z                 raise_assert_detail(
2025-01-10T13:28:40.3410390Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3410440Z                 )
2025-01-10T13:28:40.3410480Z     
2025-01-10T13:28:40.3410540Z             diff = 0
2025-01-10T13:28:40.3410750Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3410820Z                 # count up differences
2025-01-10T13:28:40.3410960Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3411020Z                     diff += 1
2025-01-10T13:28:40.3411060Z     
2025-01-10T13:28:40.3411120Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3411230Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3411360Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3411440Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3411480Z E           
2025-01-10T13:28:40.3411570Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3411790Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3412020Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3412040Z 
2025-01-10T13:28:40.3412270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3412270Z 
2025-01-10T13:28:40.3412400Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3412410Z 
2025-01-10T13:28:40.3412570Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144300d10>
2025-01-10T13:28:40.3412740Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>, attr = 'f_lu'
2025-01-10T13:28:40.3412750Z 
2025-01-10T13:28:40.3412860Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3412960Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3413020Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3413090Z         try:
2025-01-10T13:28:40.3413200Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3413250Z         except KeyError:
2025-01-10T13:28:40.3413360Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3413400Z     
2025-01-10T13:28:40.3413470Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3413540Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3413710Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3413830Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3413900Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3413960Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3414050Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3414060Z 
2025-01-10T13:28:40.3414160Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:28:40.3414240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3414350Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3414400Z     ???
2025-01-10T13:28:40.3414480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3414480Z 
2025-01-10T13:28:40.3414530Z >   ???
2025-01-10T13:28:40.3414620Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3414670Z E   
2025-01-10T13:28:40.3414840Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3414920Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3414970Z E          ...
2025-01-10T13:28:40.3415030Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3415130Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3415210Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3415260Z E          ...
2025-01-10T13:28:40.3415320Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3415410Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3415480Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3415490Z 
2025-01-10T13:28:40.3415550Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3415780Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs] _
2025-01-10T13:28:40.3415800Z 
2025-01-10T13:28:40.3415920Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3416030Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3416110Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3416230Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3416350Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3416430Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3416490Z err_msg = None
2025-01-10T13:28:40.3416500Z 
2025-01-10T13:28:40.3416580Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3416650Z         if err_msg is None:
2025-01-10T13:28:40.3416720Z             if left.shape != right.shape:
2025-01-10T13:28:40.3416790Z                 raise_assert_detail(
2025-01-10T13:28:40.3416920Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3416980Z                 )
2025-01-10T13:28:40.3417030Z     
2025-01-10T13:28:40.3417090Z             diff = 0
2025-01-10T13:28:40.3417170Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3417240Z                 # count up differences
2025-01-10T13:28:40.3417380Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3417430Z                     diff += 1
2025-01-10T13:28:40.3417490Z     
2025-01-10T13:28:40.3417580Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3417700Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3417850Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3417940Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3418060Z E           
2025-01-10T13:28:40.3418150Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3418350Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3418560Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3418570Z 
2025-01-10T13:28:40.3418820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3418820Z 
2025-01-10T13:28:40.3418960Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3419230Z 
2025-01-10T13:28:40.3419440Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144301490>
2025-01-10T13:28:40.3419590Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>
2025-01-10T13:28:40.3419650Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.3419650Z 
2025-01-10T13:28:40.3419750Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3419830Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3419890Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3419930Z         try:
2025-01-10T13:28:40.3422270Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.3422280Z 
2025-01-10T13:28:40.3422840Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data0__.h5
2025-01-10T13:28:40.3422860Z 
2025-01-10T13:28:40.3423140Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.3423150Z 
2025-01-10T13:28:40.3423710Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data13__.h5
2025-01-10T13:28:40.3423710Z 
2025-01-10T13:28:40.3423970Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.3423970Z 
2025-01-10T13:28:40.3424520Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data15__.h5
2025-01-10T13:28:40.3424520Z 
2025-01-10T13:28:40.3424790Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.3424800Z 
2025-01-10T13:28:40.3425310Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply4__.h5
2025-01-10T13:28:40.3425320Z 
2025-01-10T13:28:40.3425560Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.3425570Z 
2025-01-10T13:28:40.3426110Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply8__.h5
2025-01-10T13:28:40.3426120Z 
2025-01-10T13:28:40.3426370Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.3426370Z 
2025-01-10T13:28:40.3426910Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply13__.h5
2025-01-10T13:28:40.3427290Z 
2025-01-10T13:28:40.3427580Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.3427580Z 
2025-01-10T13:28:40.3428150Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data10__.h5
2025-01-10T13:28:40.3428160Z 
2025-01-10T13:28:40.3428270Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3428330Z         except KeyError:
2025-01-10T13:28:40.3428440Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3428480Z     
2025-01-10T13:28:40.3428540Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3428600Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3428760Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3428870Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3428930Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3429000Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3429090Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3429140Z             else:
2025-01-10T13:28:40.3429210Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3438690Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3438740Z 
2025-01-10T13:28:40.3438910Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3439040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3439180Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3439240Z     ???
2025-01-10T13:28:40.3439370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3439380Z 
2025-01-10T13:28:40.3439420Z >   ???
2025-01-10T13:28:40.3439550Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3439600Z E   
2025-01-10T13:28:40.3439710Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3439810Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3439860Z E          ...
2025-01-10T13:28:40.3439930Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3440030Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3440120Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3440170Z E          ...
2025-01-10T13:28:40.3440260Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3440360Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3440780Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3440800Z 
2025-01-10T13:28:40.3440910Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3441130Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev] _
2025-01-10T13:28:40.3441130Z 
2025-01-10T13:28:40.3441240Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3441350Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3441420Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3441530Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3441630Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3441700Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3441750Z err_msg = None
2025-01-10T13:28:40.3441980Z 
2025-01-10T13:28:40.3442070Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3442130Z         if err_msg is None:
2025-01-10T13:28:40.3442200Z             if left.shape != right.shape:
2025-01-10T13:28:40.3442260Z                 raise_assert_detail(
2025-01-10T13:28:40.3442370Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3442430Z                 )
2025-01-10T13:28:40.3442470Z     
2025-01-10T13:28:40.3442520Z             diff = 0
2025-01-10T13:28:40.3442600Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3442660Z                 # count up differences
2025-01-10T13:28:40.3442800Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3442850Z                     diff += 1
2025-01-10T13:28:40.3442890Z     
2025-01-10T13:28:40.3442960Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3443070Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3443360Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3443450Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3443490Z E           
2025-01-10T13:28:40.3443590Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3443810Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3444030Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3444040Z 
2025-01-10T13:28:40.3444270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3444280Z 
2025-01-10T13:28:40.3444410Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3444420Z 
2025-01-10T13:28:40.3444590Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x144301550>
2025-01-10T13:28:40.3444730Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>
2025-01-10T13:28:40.3444790Z attr = 'beta_sobolev'
2025-01-10T13:28:40.3444790Z 
2025-01-10T13:28:40.3444910Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3445000Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3445060Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3445110Z         try:
2025-01-10T13:28:40.3445220Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3445280Z         except KeyError:
2025-01-10T13:28:40.3445400Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3445460Z     
2025-01-10T13:28:40.3445520Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3445590Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3445670Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3445790Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3445880Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3445950Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3446060Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3446120Z             else:
2025-01-10T13:28:40.3446190Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3446280Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3446280Z 
2025-01-10T13:28:40.3446390Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3446570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3446700Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3446750Z     ???
2025-01-10T13:28:40.3446840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3446850Z 
2025-01-10T13:28:40.3446890Z >   ???
2025-01-10T13:28:40.3446990Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3447030Z E   
2025-01-10T13:28:40.3447130Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3447210Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3447610Z E          ...
2025-01-10T13:28:40.3448180Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3448480Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3448740Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3448930Z E          ...
2025-01-10T13:28:40.3449770Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3450060Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3450270Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3450280Z 
2025-01-10T13:28:40.3450460Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3451040Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues] _
2025-01-10T13:28:40.3451050Z 
2025-01-10T13:28:40.3451780Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3451930Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3452010Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3452130Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:28:40.3452240Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:28:40.3639500Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:28:40.3640030Z err_msg = None
2025-01-10T13:28:40.3640050Z 
2025-01-10T13:28:40.3640330Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:28:40.3640520Z         if err_msg is None:
2025-01-10T13:28:40.3640720Z             if left.shape != right.shape:
2025-01-10T13:28:40.3640930Z                 raise_assert_detail(
2025-01-10T13:28:40.3641280Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:28:40.3641460Z                 )
2025-01-10T13:28:40.3641640Z     
2025-01-10T13:28:40.3641810Z             diff = 0
2025-01-10T13:28:40.3642060Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:28:40.3642250Z                 # count up differences
2025-01-10T13:28:40.3642650Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:28:40.3644720Z                     diff += 1
2025-01-10T13:28:40.3644790Z     
2025-01-10T13:28:40.3644860Z             diff = diff * 100.0 / left.size
2025-01-10T13:28:40.3644980Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:28:40.3645120Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:28:40.3645210Z E           AssertionError: numpy array are different
2025-01-10T13:28:40.3645260Z E           
2025-01-10T13:28:40.3645350Z E           numpy array values are different (4.04858 %)
2025-01-10T13:28:40.3645560Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3645780Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.3646230Z 
2025-01-10T13:28:40.3646940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:28:40.3646970Z 
2025-01-10T13:28:40.3647360Z During handling of the above exception, another exception occurred:
2025-01-10T13:28:40.3647370Z 
2025-01-10T13:28:40.3647850Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x1443016d0>
2025-01-10T13:28:40.3648340Z plasma = <tardis.plasma.base.BasePlasma object at 0x164b7d640>, attr = 'j_blues'
2025-01-10T13:28:40.3648360Z 
2025-01-10T13:28:40.3648660Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:28:40.3648970Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:28:40.3649170Z         key = f"plasma/{attr}"
2025-01-10T13:28:40.3651830Z         try:
2025-01-10T13:28:40.3652190Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:28:40.3652370Z         except KeyError:
2025-01-10T13:28:40.3652710Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:28:40.3652980Z     
2025-01-10T13:28:40.3653110Z         if hasattr(plasma, attr):
2025-01-10T13:28:40.3653210Z             actual = getattr(plasma, attr)
2025-01-10T13:28:40.3653280Z             if attr == "selected_atoms":
2025-01-10T13:28:40.3653520Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:28:40.3653920Z             elif actual.ndim == 1:
2025-01-10T13:28:40.3654110Z                 actual = pd.Series(actual)
2025-01-10T13:28:40.3654470Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:28:40.3655190Z             else:
2025-01-10T13:28:40.3655420Z                 actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3655910Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:28:40.3656010Z 
2025-01-10T13:28:40.3656320Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:28:40.3656580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3657000Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3657270Z     ???
2025-01-10T13:28:40.3657650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3657670Z 
2025-01-10T13:28:40.3657900Z >   ???
2025-01-10T13:28:40.3658170Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.3658330Z E   
2025-01-10T13:28:40.3658590Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.3658810Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3658950Z E          ...
2025-01-10T13:28:40.3659120Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3659400Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3659700Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.3659830Z E          ...
2025-01-10T13:28:40.3660010Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.3660360Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.3660600Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.3660610Z 
2025-01-10T13:28:40.3660770Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3661160Z _________________ test_hdf_plasma[stimulated_emission_factor] __________________
2025-01-10T13:28:40.3661190Z 
2025-01-10T13:28:40.3661750Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x1458a8620>
2025-01-10T13:28:40.3661930Z attr = 'stimulated_emission_factor'
2025-01-10T13:28:40.3662590Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x327b98470>
2025-01-10T13:28:40.3663350Z 
2025-01-10T13:28:40.3663600Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:28:40.3663750Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:28:40.3663860Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:28:40.3663980Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:28:40.3664080Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:28:40.3664150Z             if hasattr(actual, "cgs"):
2025-01-10T13:28:40.3664220Z                 actual = actual.cgs.value
2025-01-10T13:28:40.3664310Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:28:40.3664310Z 
2025-01-10T13:28:40.3664400Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:28:40.3664510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3664520Z 
2025-01-10T13:28:40.3664790Z args = (<function assert_allclose.<locals>.compare at 0x312334cc0>, array([[0.        , 0.        , 0.        , ..., 0.      ...1,
2025-01-10T13:28:40.3664990Z         0.01476858],
2025-01-10T13:28:40.3665100Z        [0.01433244, 0.01435378, 0.01437513, ..., 0.0146952 , 0.01471653,
2025-01-10T13:28:40.3665160Z         0.01473787]]))
2025-01-10T13:28:40.3665390Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3665390Z 
2025-01-10T13:28:40.3665450Z     @wraps(func)
2025-01-10T13:28:40.3665520Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3665580Z         with self._recreate_cm():
2025-01-10T13:28:40.3665650Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3665700Z E           AssertionError: 
2025-01-10T13:28:40.3665780Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3665830Z E           
2025-01-10T13:28:40.3665910Z E           Mismatched elements: 120 / 584480 (0.0205%)
2025-01-10T13:28:40.3666000Z E           Max absolute difference among violations: 1.
2025-01-10T13:28:40.3666100Z E           Max relative difference among violations: 1.
2025-01-10T13:28:40.3666230Z E            ACTUAL: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:28:40.3666310Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:28:40.3666400Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:28:40.3666520Z E            DESIRED: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:28:40.3666610Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:28:40.3666710Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:28:40.3666710Z 
2025-01-10T13:28:40.3667000Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3667140Z ___________________ test_hdf_plasma[lines_lower_level_index] ___________________
2025-01-10T13:28:40.3667160Z 
2025-01-10T13:28:40.3668220Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x1458a8620>
2025-01-10T13:28:40.3668470Z attr = 'lines_lower_level_index'
2025-01-10T13:28:40.3668980Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x145ad7350>
2025-01-10T13:28:40.3668990Z 
2025-01-10T13:28:40.3669120Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:28:40.3669250Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:28:40.3669340Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:28:40.3669570Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:28:40.3669720Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:28:40.3669780Z             if hasattr(actual, "cgs"):
2025-01-10T13:28:40.3669860Z                 actual = actual.cgs.value
2025-01-10T13:28:40.3670170Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:28:40.3670180Z 
2025-01-10T13:28:40.3670270Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:28:40.3670380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3670380Z 
2025-01-10T13:28:40.3670690Z args = (<function assert_allclose.<locals>.compare at 0x316320540>, array([2577, 2577, 2577, ..., 3886, 3846, 3885]), array([2577, 2577, 2577, ..., 3886, 3846, 3885]))
2025-01-10T13:28:40.3670920Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3670920Z 
2025-01-10T13:28:40.3670990Z     @wraps(func)
2025-01-10T13:28:40.3671060Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3671110Z         with self._recreate_cm():
2025-01-10T13:28:40.3671190Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3671250Z E           AssertionError: 
2025-01-10T13:28:40.3671350Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3671510Z E           
2025-01-10T13:28:40.3671600Z E           Mismatched elements: 748 / 29224 (2.56%)
2025-01-10T13:28:40.3671700Z E           Max absolute difference among violations: 4005
2025-01-10T13:28:40.3671820Z E           Max relative difference among violations: 26.00649351
2025-01-10T13:28:40.3671920Z E            ACTUAL: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:28:40.3672020Z E            DESIRED: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:28:40.3672020Z 
2025-01-10T13:28:40.3672200Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3672340Z ___________________ test_hdf_plasma[lines_upper_level_index] ___________________
2025-01-10T13:28:40.3672350Z 
2025-01-10T13:28:40.3672540Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x1458a8620>
2025-01-10T13:28:40.3672610Z attr = 'lines_upper_level_index'
2025-01-10T13:28:40.3672830Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x313229550>
2025-01-10T13:28:40.3672840Z 
2025-01-10T13:28:40.3672970Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:28:40.3673100Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:28:40.3673200Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:28:40.3673320Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:28:40.3673420Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:28:40.3673510Z             if hasattr(actual, "cgs"):
2025-01-10T13:28:40.3673580Z                 actual = actual.cgs.value
2025-01-10T13:28:40.3673650Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:28:40.3673650Z 
2025-01-10T13:28:40.3673730Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:28:40.3673820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3673820Z 
2025-01-10T13:28:40.3674140Z args = (<function assert_allclose.<locals>.compare at 0x1458d6160>, array([2613, 2612, 2611, ..., 3899, 3852, 3898]), array([2613, 2612, 2611, ..., 3899, 3852, 3898]))
2025-01-10T13:28:40.3674370Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3674380Z 
2025-01-10T13:28:40.3674430Z     @wraps(func)
2025-01-10T13:28:40.3674500Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3674570Z         with self._recreate_cm():
2025-01-10T13:28:40.3674620Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3674680Z E           AssertionError: 
2025-01-10T13:28:40.3674780Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3674850Z E           
2025-01-10T13:28:40.3674940Z E           Mismatched elements: 1847 / 29224 (6.32%)
2025-01-10T13:28:40.3675040Z E           Max absolute difference among violations: 4046
2025-01-10T13:28:40.3675140Z E           Max relative difference among violations: 24.82208589
2025-01-10T13:28:40.3675350Z E            ACTUAL: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:28:40.3675470Z E            DESIRED: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:28:40.3675470Z 
2025-01-10T13:28:40.3675660Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3675790Z ________________________ test_hdf_plasma[beta_sobolev] _________________________
2025-01-10T13:28:40.3675800Z 
2025-01-10T13:28:40.3675990Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x1458a8620>
2025-01-10T13:28:40.3676060Z attr = 'beta_sobolev'
2025-01-10T13:28:40.3676290Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x165015b80>
2025-01-10T13:28:40.3676300Z 
2025-01-10T13:28:40.3676430Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:28:40.3676570Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:28:40.3676790Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:28:40.3676920Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:28:40.3677030Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:28:40.3677090Z             if hasattr(actual, "cgs"):
2025-01-10T13:28:40.3677150Z                 actual = actual.cgs.value
2025-01-10T13:28:40.3677230Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:28:40.3677230Z 
2025-01-10T13:28:40.3677300Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:28:40.3677400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3677410Z 
2025-01-10T13:28:40.3677630Z args = (<function assert_allclose.<locals>.compare at 0x164f19760>, array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.3677690Z        [1., 1., 1.,.....,
2025-01-10T13:28:40.3677750Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.3677820Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.3677880Z        [1., 1., 1., ..., 1., 1., 1.]]))
2025-01-10T13:28:40.3678120Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3678130Z 
2025-01-10T13:28:40.3678180Z     @wraps(func)
2025-01-10T13:28:40.3678240Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3678320Z         with self._recreate_cm():
2025-01-10T13:28:40.3678400Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3678460Z E           AssertionError: 
2025-01-10T13:28:40.3678570Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3678630Z E           
2025-01-10T13:28:40.3678900Z E           Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:28:40.3679020Z E           Max absolute difference among violations: 0.99984222
2025-01-10T13:28:40.3679140Z E           Max relative difference among violations: 6337.12154973
2025-01-10T13:28:40.3679260Z E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.3679330Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.3679430Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:28:40.3679520Z E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.3679620Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.3679690Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:28:40.3679690Z 
2025-01-10T13:28:40.3679870Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3680000Z ____________________________ test_hdf_plasma[lines] ____________________________
2025-01-10T13:28:40.3680000Z 
2025-01-10T13:28:40.3680180Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x1458a8620>
2025-01-10T13:28:40.3680240Z attr = 'lines'
2025-01-10T13:28:40.3680460Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x144354ad0>
2025-01-10T13:28:40.3680580Z 
2025-01-10T13:28:40.3680730Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:28:40.3680890Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:28:40.3680990Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:28:40.3681120Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:28:40.3681230Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:28:40.3681320Z             if hasattr(actual, "cgs"):
2025-01-10T13:28:40.3681390Z                 actual = actual.cgs.value
2025-01-10T13:28:40.3681460Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:28:40.3681470Z 
2025-01-10T13:28:40.3681540Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:28:40.3681650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3681660Z 
2025-01-10T13:28:40.3682050Z args = (<function assert_allclose.<locals>.compare at 0x32037fc40>, array([[6.78130000e+04, 6.67720000e+01, 2.70301683e-02, ....       [1.04462000e+05, 9.99900019e+05, 2.64868307e-04, ...,
2025-01-10T13:28:40.3682480Z         4.44653904e+09, 1.76709163e+00, 9.99900019e-03]]))
2025-01-10T13:28:40.3682700Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3682710Z 
2025-01-10T13:28:40.3682760Z     @wraps(func)
2025-01-10T13:28:40.3682820Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3682870Z         with self._recreate_cm():
2025-01-10T13:28:40.3682930Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3682990Z E           AssertionError: 
2025-01-10T13:28:40.3683070Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3683120Z E           
2025-01-10T13:28:40.3683190Z E           Mismatched elements: 13335 / 263016 (5.07%)
2025-01-10T13:28:40.3683300Z E           Max absolute difference among violations: 4.25260542e+12
2025-01-10T13:28:40.3683410Z E           Max relative difference among violations: 18196.0085861
2025-01-10T13:28:40.3683550Z E            ACTUAL: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:28:40.3683610Z E                   4.043917e+10, 6.677200e-07],
2025-01-10T13:28:40.3683720Z E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:28:40.3683850Z E            DESIRED: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:28:40.3683910Z E                   4.043917e+10, 6.677200e-07],
2025-01-10T13:28:40.3684020Z E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:28:40.3684020Z 
2025-01-10T13:28:40.3684170Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3684290Z ____________________________ test_hdf_plasma[f_lu] _____________________________
2025-01-10T13:28:40.3684290Z 
2025-01-10T13:28:40.3684460Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x1458a8620>
2025-01-10T13:28:40.3684510Z attr = 'f_lu'
2025-01-10T13:28:40.3684750Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x165014c50>
2025-01-10T13:28:40.3684750Z 
2025-01-10T13:28:40.3684880Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:28:40.3685020Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:28:40.3685110Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:28:40.3685210Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:28:40.3685290Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:28:40.3685350Z             if hasattr(actual, "cgs"):
2025-01-10T13:28:40.3685410Z                 actual = actual.cgs.value
2025-01-10T13:28:40.3685490Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:28:40.3685490Z 
2025-01-10T13:28:40.3685560Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:28:40.3685930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3685940Z 
2025-01-10T13:28:40.3686300Z args = (<function assert_allclose.<locals>.compare at 0x145ca8e00>, array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02, .....), array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02, ...,
2025-01-10T13:28:40.3686400Z        9.93184643e-04, 1.12688279e+00, 4.41447178e-04]))
2025-01-10T13:28:40.3686610Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3686620Z 
2025-01-10T13:28:40.3686670Z     @wraps(func)
2025-01-10T13:28:40.3686730Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3686790Z         with self._recreate_cm():
2025-01-10T13:28:40.3686860Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3686920Z E           AssertionError: 
2025-01-10T13:28:40.3687000Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3687050Z E           
2025-01-10T13:28:40.3687240Z E           Mismatched elements: 2221 / 29224 (7.6%)
2025-01-10T13:28:40.3687340Z E           Max absolute difference among violations: 2.92713618
2025-01-10T13:28:40.3687460Z E           Max relative difference among violations: 18196.0085861
2025-01-10T13:28:40.3687600Z E            ACTUAL: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:28:40.3687660Z E                  1.126883e+00, 4.414472e-04])
2025-01-10T13:28:40.3687800Z E            DESIRED: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:28:40.3687880Z E                  1.126883e+00, 4.414472e-04])
2025-01-10T13:28:40.3687880Z 
2025-01-10T13:28:40.3688040Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3688180Z ________________________ test_hdf_plasma[tau_sobolevs] _________________________
2025-01-10T13:28:40.3688180Z 
2025-01-10T13:28:40.3688360Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x1458a8620>
2025-01-10T13:28:40.3688430Z attr = 'tau_sobolevs'
2025-01-10T13:28:40.3688630Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x316538dd0>
2025-01-10T13:28:40.3688630Z 
2025-01-10T13:28:40.3688750Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:28:40.3688890Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:28:40.3688980Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:28:40.3689100Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:28:40.3689190Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:28:40.3689260Z             if hasattr(actual, "cgs"):
2025-01-10T13:28:40.3689320Z                 actual = actual.cgs.value
2025-01-10T13:28:40.3689400Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:28:40.3689400Z 
2025-01-10T13:28:40.3689490Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:28:40.3689600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3689600Z 
2025-01-10T13:28:40.3689960Z args = (<function assert_allclose.<locals>.compare at 0x316376980>, array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ....       [7.57366002e-14, 3.42661945e-14, 1.59795775e-14, ...,
2025-01-10T13:28:40.3690050Z         2.25618458e-18, 1.41426559e-18, 8.96636158e-19]]))
2025-01-10T13:28:40.3690280Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3690290Z 
2025-01-10T13:28:40.3690360Z     @wraps(func)
2025-01-10T13:28:40.3690430Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3690500Z         with self._recreate_cm():
2025-01-10T13:28:40.3690580Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3690650Z E           AssertionError: 
2025-01-10T13:28:40.3690750Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3690880Z E           
2025-01-10T13:28:40.3690970Z E           Mismatched elements: 39620 / 584480 (6.78%)
2025-01-10T13:28:40.3691080Z E           Max absolute difference among violations: 282815.33818472
2025-01-10T13:28:40.3691180Z E           Max relative difference among violations: 4.12352828e+47
2025-01-10T13:28:40.3691310Z E            ACTUAL: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:28:40.3691370Z E                   0.000000e+00, 0.000000e+00],
2025-01-10T13:28:40.3691480Z E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:28:40.3691610Z E            DESIRED: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:28:40.3691690Z E                   0.000000e+00, 0.000000e+00],
2025-01-10T13:28:40.3691820Z E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:28:40.3691830Z 
2025-01-10T13:28:40.3691980Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3692200Z __________________ test_plasma_state_iterations[iterations_w] __________________
2025-01-10T13:28:40.3692210Z 
2025-01-10T13:28:40.3692370Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3692430Z attr = 'iterations_w'
2025-01-10T13:28:40.3692640Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x159b39ac0>
2025-01-10T13:28:40.3692640Z 
2025-01-10T13:28:40.3692710Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3692760Z         "attr",
2025-01-10T13:28:40.3692800Z         [
2025-01-10T13:28:40.3692860Z             "iterations_w",
2025-01-10T13:28:40.3692920Z             "iterations_t_rad",
2025-01-10T13:28:40.3692990Z             "iterations_electron_densities",
2025-01-10T13:28:40.3693040Z             "iterations_t_inner",
2025-01-10T13:28:40.3693090Z         ],
2025-01-10T13:28:40.3693130Z     )
2025-01-10T13:28:40.3693280Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3693380Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:28:40.3693440Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3693500Z             actual = actual.value
2025-01-10T13:28:40.3693560Z         actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3693650Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3693790Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3693790Z 
2025-01-10T13:28:40.3693880Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:28:40.3693980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3694100Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3694150Z     ???
2025-01-10T13:28:40.3694230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3694240Z 
2025-01-10T13:28:40.3694280Z >   ???
2025-01-10T13:28:40.3695200Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.3695480Z E   
2025-01-10T13:28:40.3695870Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:28:40.3696040Z E   [index]: [0, 1]
2025-01-10T13:28:40.3696260Z E   [left]:  [0.40039163797855976, 0.4501364467195908]
2025-01-10T13:28:40.3697030Z E   [right]: [0.40039163797855976, 0.4500690173218345]
2025-01-10T13:28:40.3697200Z E   At positional index 1, first diff: 0.4501364467195908 != 0.4500690173218345
2025-01-10T13:28:40.3697200Z 
2025-01-10T13:28:40.3697280Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3697410Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.3698880Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:28:40.3699570Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:28:40.3700810Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:28:40.3700830Z 
2025-01-10T13:28:40.3700840Z 
2025-01-10T13:28:40.3701400Z Packets:                                                                                   4031/? [04:28<00:00, 11.42it/s]   [A
2025-01-10T13:28:40.3701430Z 
2025-01-10T13:28:40.3702220Z Packets:                                                                                   16643/? [04:28<00:00, 78.50it/s][A
2025-01-10T13:28:40.3702240Z 
2025-01-10T13:28:40.3702420Z Packets:                                                                                   29422/? [04:28<00:00, 175.48it/s][A
2025-01-10T13:28:40.3702430Z 
2025-01-10T13:28:40.3702610Z Packets:                                                                                   42127/? [04:28<00:00, 312.95it/s][A
2025-01-10T13:28:40.3706890Z Iterations:████████████████████████████████████████████████████████████████████████████████5/5 [04:28<00:00, 94.67s/it]
2025-01-10T13:28:40.3707180Z 
2025-01-10T13:28:40.3707420Z Packets:                                                                                   44030/? [04:28<00:00, 312.95it/s][A
2025-01-10T13:28:40.3707420Z 
2025-01-10T13:28:40.3707620Z Packets:                                                                                   0/40000 [00:00<?, ?it/s]         [A
2025-01-10T13:28:40.3707620Z 
2025-01-10T13:28:40.3707830Z Packets:   ██████████████████████▊                                                         11423/40000 [00:00<00:00, 42465.84it/s][A
2025-01-10T13:28:40.3707840Z 
2025-01-10T13:28:40.3708040Z Packets:   ████████████████████████████████▍                                               16217/40000 [00:00<00:00, 44360.19it/s][A
2025-01-10T13:28:40.3708040Z 
2025-01-10T13:28:40.3708270Z Packets:   █████████████████████████████████████████▊                                      20890/40000 [00:00<00:00, 45142.79it/s][A
2025-01-10T13:28:40.3708300Z 
2025-01-10T13:28:40.3708560Z Packets:   ███████████████████████████████████████████████████                             25506/40000 [00:00<00:00, 43544.62it/s][A
2025-01-10T13:28:40.3708560Z 
2025-01-10T13:28:40.3708800Z Packets:   ████████████████████████████████████████████████████████████▏                   30078/40000 [00:00<00:00, 44207.83it/s][A
2025-01-10T13:28:40.3708800Z 
2025-01-10T13:28:40.3709030Z Packets:   █████████████████████████████████████████████████████████████████████           34537/40000 [00:00<00:00, 43084.17it/s][A
2025-01-10T13:28:40.3709030Z 
2025-01-10T13:28:40.3709280Z Packets:   █████████████████████████████████████████████████████████████████████████████▉  38939/40000 [00:00<00:00, 43361.62it/s][A
2025-01-10T13:28:40.3709390Z Iterations:                                                                                6/? [04:30<00:00, 63.16s/it]
2025-01-10T13:28:40.3709400Z 
2025-01-10T13:28:40.3709680Z Packets:   ████████████████████████████████████████████████████████████████████████████████40000/40000 [00:01<00:00, 43361.62it/s][A
2025-01-10T13:28:40.3709990Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.3710410Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:28:40.3710570Z ________________ test_plasma_state_iterations[iterations_t_rad] ________________
2025-01-10T13:28:40.3710580Z 
2025-01-10T13:28:40.3710750Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3710800Z attr = 'iterations_t_rad'
2025-01-10T13:28:40.3711020Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x159b3a570>
2025-01-10T13:28:40.3711030Z 
2025-01-10T13:28:40.3711100Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3711150Z         "attr",
2025-01-10T13:28:40.3711190Z         [
2025-01-10T13:28:40.3711250Z             "iterations_w",
2025-01-10T13:28:40.3711640Z             "iterations_t_rad",
2025-01-10T13:28:40.3711730Z             "iterations_electron_densities",
2025-01-10T13:28:40.3711790Z             "iterations_t_inner",
2025-01-10T13:28:40.3711840Z         ],
2025-01-10T13:28:40.3711900Z     )
2025-01-10T13:28:40.3712060Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3712140Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:28:40.3712210Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3712270Z             actual = actual.value
2025-01-10T13:28:40.3712330Z         actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3712420Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3712570Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3712580Z 
2025-01-10T13:28:40.3712670Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:28:40.3712760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3712880Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3712920Z     ???
2025-01-10T13:28:40.3713010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3713010Z 
2025-01-10T13:28:40.3713050Z >   ???
2025-01-10T13:28:40.3713200Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.3713250Z E   
2025-01-10T13:28:40.3713370Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:28:40.3713420Z E   [index]: [0, 1]
2025-01-10T13:28:40.3713490Z E   [left]:  [9967.488442185557, 10090.925208074612]
2025-01-10T13:28:40.3713570Z E   [right]: [9967.488442185557, 10091.396322818851]
2025-01-10T13:28:40.3713720Z E   At positional index 1, first diff: 10090.925208074612 != 10091.396322818851
2025-01-10T13:28:40.3713720Z 
2025-01-10T13:28:40.3713800Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3713960Z _________ test_plasma_state_iterations[iterations_electron_densities] __________
2025-01-10T13:28:40.3713960Z 
2025-01-10T13:28:40.3714130Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3714210Z attr = 'iterations_electron_densities'
2025-01-10T13:28:40.3714410Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x1590957c0>
2025-01-10T13:28:40.3714410Z 
2025-01-10T13:28:40.3714470Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3714520Z         "attr",
2025-01-10T13:28:40.3714580Z         [
2025-01-10T13:28:40.3714640Z             "iterations_w",
2025-01-10T13:28:40.3714700Z             "iterations_t_rad",
2025-01-10T13:28:40.3714770Z             "iterations_electron_densities",
2025-01-10T13:28:40.3714830Z             "iterations_t_inner",
2025-01-10T13:28:40.3714870Z         ],
2025-01-10T13:28:40.3714910Z     )
2025-01-10T13:28:40.3715090Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3715410Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:28:40.3715480Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3715540Z             actual = actual.value
2025-01-10T13:28:40.3715610Z         actual = pd.DataFrame(actual)
2025-01-10T13:28:40.3715720Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3715860Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3715860Z 
2025-01-10T13:28:40.3715950Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:28:40.3716040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3716150Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3716190Z     ???
2025-01-10T13:28:40.3716270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3716280Z 
2025-01-10T13:28:40.3716340Z >   ???
2025-01-10T13:28:40.3716470Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.3716620Z E   
2025-01-10T13:28:40.3716750Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:28:40.3716800Z E   [index]: [0, 1]
2025-01-10T13:28:40.3716880Z E   [left]:  [2869544645.3209715, 2880986026.9779415]
2025-01-10T13:28:40.3716950Z E   [right]: [2869544645.3209715, 2881024886.0882792]
2025-01-10T13:28:40.3717080Z E   At positional index 1, first diff: 2880986026.9779415 != 2881024886.0882792
2025-01-10T13:28:40.3717080Z 
2025-01-10T13:28:40.3717140Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3717270Z ___________________ test_plasma_estimates[nu_bar_estimator] ____________________
2025-01-10T13:28:40.3717270Z 
2025-01-10T13:28:40.3717430Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3717480Z attr = 'nu_bar_estimator'
2025-01-10T13:28:40.3717680Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x1591c8380>
2025-01-10T13:28:40.3717690Z 
2025-01-10T13:28:40.3717760Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3717810Z         "attr",
2025-01-10T13:28:40.3717850Z         [
2025-01-10T13:28:40.3717910Z             "nu_bar_estimator",
2025-01-10T13:28:40.3717960Z             "j_estimator",
2025-01-10T13:28:40.3718010Z             "t_radiative",
2025-01-10T13:28:40.3718080Z             "dilution_factor",
2025-01-10T13:28:40.3718140Z             "output_nus",
2025-01-10T13:28:40.3718190Z             "output_energies",
2025-01-10T13:28:40.3718240Z         ],
2025-01-10T13:28:40.3718280Z     )
2025-01-10T13:28:40.3718420Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3718530Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:28:40.3718590Z             actual = getattr(
2025-01-10T13:28:40.3730540Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:28:40.3730780Z                 attr,
2025-01-10T13:28:40.3730840Z             )
2025-01-10T13:28:40.3730940Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:28:40.3731060Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:28:40.3731150Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:28:40.3731210Z             actual = getattr(
2025-01-10T13:28:40.3731360Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:28:40.3731620Z                 attr,
2025-01-10T13:28:40.3732040Z             )
2025-01-10T13:28:40.3732240Z         else:
2025-01-10T13:28:40.3732850Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:28:40.3733020Z     
2025-01-10T13:28:40.3733210Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3733420Z             actual = actual.value
2025-01-10T13:28:40.3733610Z         actual = pd.Series(actual)
2025-01-10T13:28:40.3734750Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3735180Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3735200Z 
2025-01-10T13:28:40.3735490Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:28:40.3735760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3736100Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3736240Z     ???
2025-01-10T13:28:40.3736490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3736520Z 
2025-01-10T13:28:40.3736690Z >   ???
2025-01-10T13:28:40.3736900Z E   AssertionError: Series are different
2025-01-10T13:28:40.3737450Z E   
2025-01-10T13:28:40.3737660Z E   Series values are different (100.0 %)
2025-01-10T13:28:40.3737930Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:28:40.3740720Z E   [left]:  [1.0190851489144417e+29, 8.620293210130923e+28, 7.627182111494598e+28, 6.892948616165273e+28, 6.337927690943656e+28, 5.960020402587151e+28, 5.586558872212224e+28, 5.25635918178016e+28, 5.018051447190151e+28, 4.8014271709728364e+28, 4.635443103818658e+28, 4.427600822090263e+28, 4.266701646003397e+28, 4.095148200480331e+28, 3.973054136677621e+28, 3.8813484639248094e+28, 3.749648114483984e+28, 3.6669667839395227e+28, 3.5309131816469324e+28, 3.4364426470451254e+28]
2025-01-10T13:28:40.3744150Z E   [right]: [1.0202042777991753e+29, 8.604643039338655e+28, 7.621843612415326e+28, 6.887796775939633e+28, 6.338143063845967e+28, 5.961770832970249e+28, 5.583215038688499e+28, 5.26214201104387e+28, 5.00719468999816e+28, 4.795144203550334e+28, 4.630537292368217e+28, 4.425690259081018e+28, 4.270865369572798e+28, 4.094544283657345e+28, 3.972280940559004e+28, 3.884152385274923e+28, 3.7498225331847723e+28, 3.6666118688506634e+28, 3.5319738797726287e+28, 3.437270715325205e+28]
2025-01-10T13:28:40.3744600Z E   At positional index 0, first diff: 1.0190851489144417e+29 != 1.0202042777991753e+29
2025-01-10T13:28:40.3744640Z 
2025-01-10T13:28:40.3744840Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3745170Z ______________________ test_plasma_estimates[j_estimator] ______________________
2025-01-10T13:28:40.3745180Z 
2025-01-10T13:28:40.3745640Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3745810Z attr = 'j_estimator'
2025-01-10T13:28:40.3746480Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x159da3e60>
2025-01-10T13:28:40.3746490Z 
2025-01-10T13:28:40.3746660Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3746800Z         "attr",
2025-01-10T13:28:40.3747000Z         [
2025-01-10T13:28:40.3747160Z             "nu_bar_estimator",
2025-01-10T13:28:40.3747320Z             "j_estimator",
2025-01-10T13:28:40.3747460Z             "t_radiative",
2025-01-10T13:28:40.3747870Z             "dilution_factor",
2025-01-10T13:28:40.3748130Z             "output_nus",
2025-01-10T13:28:40.3748320Z             "output_energies",
2025-01-10T13:28:40.3748490Z         ],
2025-01-10T13:28:40.3748650Z     )
2025-01-10T13:28:40.3749070Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3749310Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:28:40.3749460Z             actual = getattr(
2025-01-10T13:28:40.3749900Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:28:40.3750040Z                 attr,
2025-01-10T13:28:40.3750190Z             )
2025-01-10T13:28:40.3750450Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:28:40.3750820Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:28:40.3751230Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:28:40.3751410Z             actual = getattr(
2025-01-10T13:28:40.3751800Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:28:40.3752630Z                 attr,
2025-01-10T13:28:40.3752690Z             )
2025-01-10T13:28:40.3752740Z         else:
2025-01-10T13:28:40.3752850Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:28:40.3752900Z     
2025-01-10T13:28:40.3752950Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3753010Z             actual = actual.value
2025-01-10T13:28:40.3753070Z         actual = pd.Series(actual)
2025-01-10T13:28:40.3753160Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3753300Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3753310Z 
2025-01-10T13:28:40.3753390Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:28:40.3753480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3753590Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3753640Z     ???
2025-01-10T13:28:40.3753730Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3753840Z 
2025-01-10T13:28:40.3753900Z >   ???
2025-01-10T13:28:40.3753980Z E   AssertionError: Series are different
2025-01-10T13:28:40.3754020Z E   
2025-01-10T13:28:40.3754090Z E   Series values are different (100.0 %)
2025-01-10T13:28:40.3754200Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:28:40.3754940Z E   [left]:  [116548101693133.95, 98287497352449.03, 86880176732435.22, 78272950854373.14, 72163814877095.69, 67694196332568.83, 63443304042094.945, 60039709300008.84, 57626147839330.99, 55320363334244.195, 53407234761435.54, 51398562237742.78, 49867122015465.32, 48237829093150.875, 46995101666576.04, 46046276744657.75, 44990423974886.99, 44175537951010.7, 43032079683987.4, 42141581527839.64]
2025-01-10T13:28:40.3756020Z E   [right]: [116635492761989.08, 98171051632121.94, 86872515261186.84, 78289696965690.05, 72209193315676.42, 67743848273202.76, 63510940656108.0, 60117004438842.5, 57572723670164.91, 55316097836075.18, 53398108009568.71, 51391839595543.54, 49914799926154.195, 48252386019894.61, 46984233483222.1, 46076787175987.44, 45005288890715.74, 44179675761283.02, 43040066710169.69, 42141149121109.82]
2025-01-10T13:28:40.3756180Z E   At positional index 0, first diff: 116548101693133.95 != 116635492761989.08
2025-01-10T13:28:40.3756180Z 
2025-01-10T13:28:40.3756240Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3756370Z ______________________ test_plasma_estimates[t_radiative] ______________________
2025-01-10T13:28:40.3756370Z 
2025-01-10T13:28:40.3756530Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3756570Z attr = 't_radiative'
2025-01-10T13:28:40.3756770Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x159d58080>
2025-01-10T13:28:40.3756780Z 
2025-01-10T13:28:40.3756840Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3756890Z         "attr",
2025-01-10T13:28:40.3756940Z         [
2025-01-10T13:28:40.3757330Z             "nu_bar_estimator",
2025-01-10T13:28:40.3757690Z             "j_estimator",
2025-01-10T13:28:40.3757810Z             "t_radiative",
2025-01-10T13:28:40.3757870Z             "dilution_factor",
2025-01-10T13:28:40.3757940Z             "output_nus",
2025-01-10T13:28:40.3758000Z             "output_energies",
2025-01-10T13:28:40.3758040Z         ],
2025-01-10T13:28:40.3758090Z     )
2025-01-10T13:28:40.3758250Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3758340Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:28:40.3758410Z             actual = getattr(
2025-01-10T13:28:40.3758560Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:28:40.3758620Z                 attr,
2025-01-10T13:28:40.3758670Z             )
2025-01-10T13:28:40.3758780Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:28:40.3759950Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:28:40.3760350Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:28:40.3760540Z             actual = getattr(
2025-01-10T13:28:40.3760960Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:28:40.3761140Z                 attr,
2025-01-10T13:28:40.3761280Z             )
2025-01-10T13:28:40.3761420Z         else:
2025-01-10T13:28:40.3761690Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:28:40.3761870Z     
2025-01-10T13:28:40.3762070Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3762250Z             actual = actual.value
2025-01-10T13:28:40.3762430Z         actual = pd.Series(actual)
2025-01-10T13:28:40.3762710Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3763120Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3763160Z 
2025-01-10T13:28:40.3763450Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:28:40.3765130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3765480Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3765620Z     ???
2025-01-10T13:28:40.3765870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3765880Z 
2025-01-10T13:28:40.3766020Z >   ???
2025-01-10T13:28:40.3766220Z E   AssertionError: Series are different
2025-01-10T13:28:40.3766350Z E   
2025-01-10T13:28:40.3766530Z E   Series values are different (90.0 %)
2025-01-10T13:28:40.3766800Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:28:40.3769270Z E   [left]:  [10090.925208074612, 10114.284007169752, 10139.419400388757, 10142.763627360702, 10149.780795955077, 10123.098440726963, 10084.703897056657, 10058.012622231076, 10075.221831273808, 10032.602564737457, 10029.923783575228, 9982.400974610377, 9943.057719983482, 9914.605779635785, 9894.245392559056, 9854.91157888558, 9802.51106451295, 9775.252526407032, 9735.554945100961, 9699.29579392027]
2025-01-10T13:28:40.3771470Z E   [right]: [10091.396322818851, 10113.672762424394, 10138.57214647089, 10142.40782954104, 10149.471061360664, 10124.731447668686, 10084.96501000204, 10057.88480134284, 10073.983914823793, 10031.924501830883, 10029.890159447663, 9982.658841271636, 9943.375727608092, 9914.259749796103, 9893.924180562475, 9854.860600288932, 9802.891513260798, 9774.848565783677, 9735.162327402864, 9698.911095826039]
2025-01-10T13:28:40.3771690Z E   At positional index 0, first diff: 10090.925208074612 != 10091.396322818851
2025-01-10T13:28:40.3771710Z 
2025-01-10T13:28:40.3771790Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3771960Z ____________________ test_plasma_estimates[dilution_factor] ____________________
2025-01-10T13:28:40.3771970Z 
2025-01-10T13:28:40.3772150Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3772260Z attr = 'dilution_factor'
2025-01-10T13:28:40.3772510Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x159d58830>
2025-01-10T13:28:40.3772510Z 
2025-01-10T13:28:40.3772600Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3772650Z         "attr",
2025-01-10T13:28:40.3772690Z         [
2025-01-10T13:28:40.3772750Z             "nu_bar_estimator",
2025-01-10T13:28:40.3772800Z             "j_estimator",
2025-01-10T13:28:40.3772850Z             "t_radiative",
2025-01-10T13:28:40.3772910Z             "dilution_factor",
2025-01-10T13:28:40.3772960Z             "output_nus",
2025-01-10T13:28:40.3773010Z             "output_energies",
2025-01-10T13:28:40.3773060Z         ],
2025-01-10T13:28:40.3773100Z     )
2025-01-10T13:28:40.3773270Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3773360Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:28:40.3773880Z             actual = getattr(
2025-01-10T13:28:40.3774040Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:28:40.3774090Z                 attr,
2025-01-10T13:28:40.3774160Z             )
2025-01-10T13:28:40.3774260Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:28:40.3774400Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:28:40.3774520Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:28:40.3774590Z             actual = getattr(
2025-01-10T13:28:40.3774760Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:28:40.3774820Z                 attr,
2025-01-10T13:28:40.3774860Z             )
2025-01-10T13:28:40.3774930Z         else:
2025-01-10T13:28:40.3775060Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:28:40.3775120Z     
2025-01-10T13:28:40.3775190Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3775280Z             actual = actual.value
2025-01-10T13:28:40.3775540Z         actual = pd.Series(actual)
2025-01-10T13:28:40.3775640Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3775790Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3775790Z 
2025-01-10T13:28:40.3775890Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:28:40.3775990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3776120Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3776170Z     ???
2025-01-10T13:28:40.3776280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3776280Z 
2025-01-10T13:28:40.3776330Z >   ???
2025-01-10T13:28:40.3776440Z E   AssertionError: Series are different
2025-01-10T13:28:40.3776480Z E   
2025-01-10T13:28:40.3776550Z E   Series values are different (95.0 %)
2025-01-10T13:28:40.3776660Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:28:40.3777940Z E   [left]:  [0.4501364467195908, 0.35908765015367794, 0.2992286625932581, 0.25782483595854516, 0.22541895309871707, 0.20119984035942634, 0.18259528573790965, 0.16657898370897495, 0.15044998950385874, 0.13972884748944586, 0.1286244489704662, 0.12093391136570557, 0.11343684592362663, 0.10649361332296867, 0.10015211634287155, 0.09484336636678072, 0.09053724751966309, 0.08584829670214006, 0.08202005255449255, 0.07823319609488653]
2025-01-10T13:28:40.3778800Z E   [right]: [0.4500690173218345, 0.3591778672440072, 0.299315794490968, 0.2578615845098735, 0.2254422032786788, 0.20109997630618956, 0.18257381854718482, 0.166581017494628, 0.15049754388199085, 0.13975435818105286, 0.12862206084807348, 0.12092168181342122, 0.1134233405695467, 0.10650389106044364, 0.10016109465785483, 0.09484390983006763, 0.09052533757303871, 0.08585912682814001, 0.0820302832176511, 0.07824287530618068]
2025-01-10T13:28:40.3778960Z E   At positional index 0, first diff: 0.4501364467195908 != 0.4500690173218345
2025-01-10T13:28:40.3778960Z 
2025-01-10T13:28:40.3779020Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3779150Z ______________________ test_plasma_estimates[output_nus] _______________________
2025-01-10T13:28:40.3779150Z 
2025-01-10T13:28:40.3779330Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3779390Z attr = 'output_nus'
2025-01-10T13:28:40.3779580Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x159d5a930>
2025-01-10T13:28:40.3779590Z 
2025-01-10T13:28:40.3779650Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3779700Z         "attr",
2025-01-10T13:28:40.3779740Z         [
2025-01-10T13:28:40.3779800Z             "nu_bar_estimator",
2025-01-10T13:28:40.3779870Z             "j_estimator",
2025-01-10T13:28:40.3779920Z             "t_radiative",
2025-01-10T13:28:40.3779980Z             "dilution_factor",
2025-01-10T13:28:40.3780240Z             "output_nus",
2025-01-10T13:28:40.3780320Z             "output_energies",
2025-01-10T13:28:40.3780360Z         ],
2025-01-10T13:28:40.3780420Z     )
2025-01-10T13:28:40.3780590Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3780690Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:28:40.3780760Z             actual = getattr(
2025-01-10T13:28:40.3780940Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:28:40.3781000Z                 attr,
2025-01-10T13:28:40.3781060Z             )
2025-01-10T13:28:40.3781160Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:28:40.3781310Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:28:40.3781440Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:28:40.3781510Z             actual = getattr(
2025-01-10T13:28:40.3781670Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:28:40.3781880Z                 attr,
2025-01-10T13:28:40.3781940Z             )
2025-01-10T13:28:40.3781990Z         else:
2025-01-10T13:28:40.3782110Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:28:40.3782190Z     
2025-01-10T13:28:40.3782260Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3782340Z             actual = actual.value
2025-01-10T13:28:40.3782420Z         actual = pd.Series(actual)
2025-01-10T13:28:40.3782520Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3782690Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3782700Z 
2025-01-10T13:28:40.3782810Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:28:40.3782920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3783070Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3783120Z     ???
2025-01-10T13:28:40.3783390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3783410Z 
2025-01-10T13:28:40.3783470Z >   ???
2025-01-10T13:28:40.3783560Z E   AssertionError: Series are different
2025-01-10T13:28:40.3783620Z E   
2025-01-10T13:28:40.3783720Z E   Series values are different (5.1125 %)
2025-01-10T13:28:40.3784060Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.3788180Z E   [left]:  [1806497964363691.5, 620824050797791.0, 651557470803973.5, 320924283401155.06, 561113873787112.25, 241798291122606.1, 676659115957490.4, 599043646843299.5, 607330789848065.1, 916915882531221.8, 944436308170835.4, 768263702028831.1, 3180981513893847.5, 2598977918829023.0, 857730899770804.0, 618923179519891.8, 551416875835854.44, 1086541433542293.5, 754833971959408.2, 491317193158596.1, 463436938874983.3, 1490288028825510.8, 820033385297487.8, 2452394921854276.0, 735345782477539.2, 754787342662615.8, 1199748305923909.8, 555498342552241.7, 1389852333652706.2, 1385846435296470.8, 368679109418251.0, 1912095724903033.2, 2017769542518466.0, 627651232172153.5, 1067422242306306.2, 948629480189651.8, 1978325812571257.2, 445358814403560.5, 1003063944118045.1, 849728144317407.0, 967658015948004.0, 1280663773931335.5, 1146264300342218.8, 1001861030074981.8, 1119183834838938.5, 508263982580230.94, 1892628101399911.5, 781537280613827.0, 1151086326674402.2, 604499180764604.0, 725902034055549.9, 457814698066574.3, 527262173332999.9, 341748821526544.94, 562192309822701.44, 1275142789503603.2, 657025184715239.1, 723852885328246.6, 1885538050889659.0, 585984121054452.8, 917026429989072.4, 696897964334913.8, 267976306885906.9, 343747179020909.4, 96582762885197.0, 1296746601148043.2, 491334710156273.4, 1492212625817827.0, 764003012375887.5, 1572736205466074.5, 1559683657845856.8, 476769967588303.4, 1860056739912971.5, 702994366583567.1, 1017518348351587.6, 484486056936689.44, 453148114829195.1, 717528815454204.8, 508993320531592.06, 1838746711006649.2, 663648932445292.6, 1322073114843600.0, 601612805662424.9, 1840374275823067.5, 440721373409527.9, 1641950783987409.2, 1588043382663297.8, 1174117968839014.5, 1215683099165958.0, 997747131579365.4, 1168546500179118.0, 1048569696680261.6, 1513832752764706.8, 1363140908755187.5, 430233648082889.1, 386057265404197.6, 1139144647809848.2, 307473380309096.1, 403471109559731.6, 1156219784137886.0, ...]
2025-01-10T13:28:40.3792330Z E   [right]: [1806512041912368.8, 620828912578783.0, 651561681514283.2, 320926793622792.2, 561113831783033.0, 241800185490365.7, 676657497080704.5, 599041295479916.1, 607335547665201.9, 916923063058785.2, 944437910067241.0, 768263081009078.1, 3180974191574679.5, 2598971968757746.0, 857737633068955.4, 618928023168687.5, 551416803496124.25, 1086549942730966.9, 754833333392143.2, 491321027587878.7, 463440568130160.4, 1490299638092356.5, 820039899773855.1, 2452391211684156.5, 735351500669317.2, 754784724695130.1, 1199750254428993.5, 555501175228475.94, 1389863217827777.5, 1385857288100655.8, 368681996608404.06, 1912110698856825.8, 2017785344022282.2, 627651183748411.8, 1067430591325981.9, 948623864004036.0, 1978326785288413.0, 445362302085804.25, 1003071799286044.6, 849734798686120.6, 967665593846029.1, 1280673803031827.2, 1146262107204918.5, 1001868875822752.4, 1119192629281446.4, 508267969421775.25, 1892642922899362.8, 781543400968040.9, 1151095341031394.2, 604503914702702.6, 725907718720482.8, 457818283293006.9, 527261796217634.44, 341748696489478.8, 562196737455386.1, 1275152810939863.2, 657003154645147.8, 723858331274613.6, 1885552835316985.5, 585988709997902.4, 917033611382352.2, 696895494383372.0, 267978405454919.2, 343749870964784.4, 96583519241591.61, 1296758039945233.8, 491338550899887.9, 1492219434855197.0, 764008995416200.5, 1572724795429636.2, 1559695871999531.0, 476770259286661.5, 1860071011741526.8, 702999878183188.2, 1017511963264823.4, 484489851031166.6, 453151663510803.5, 717543258409877.6, 508990329432545.4, 1838756496639701.8, 663654129595372.2, 1322083461079532.0, 601616268613591.0, 1840388688113732.8, 440724823612140.5, 1641895920313314.8, 1588055811374384.5, 1174127163560797.5, 1215687723496508.2, 997743048820577.1, 1168560411536350.2, 1048577905256173.4, 1513844599143900.5, 1363151613665534.0, 430237017317327.8, 386060300653508.2, 1139153568649478.2, 307475792296687.0, 403474269212082.0, 1156228838695875.2, ...]
2025-01-10T13:28:40.3792600Z E   At positional index 56, first diff: 657025184715239.1 != 657003154645147.8
2025-01-10T13:28:40.3792610Z 
2025-01-10T13:28:40.3792670Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3792790Z ____________________ test_plasma_estimates[output_energies] ____________________
2025-01-10T13:28:40.3792800Z 
2025-01-10T13:28:40.3792990Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x1591f1fd0>
2025-01-10T13:28:40.3793050Z attr = 'output_energies'
2025-01-10T13:28:40.3793270Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x159d5bc20>
2025-01-10T13:28:40.3793280Z 
2025-01-10T13:28:40.3793340Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.3793400Z         "attr",
2025-01-10T13:28:40.3793460Z         [
2025-01-10T13:28:40.3793530Z             "nu_bar_estimator",
2025-01-10T13:28:40.3793580Z             "j_estimator",
2025-01-10T13:28:40.3793630Z             "t_radiative",
2025-01-10T13:28:40.3793680Z             "dilution_factor",
2025-01-10T13:28:40.3793730Z             "output_nus",
2025-01-10T13:28:40.3793800Z             "output_energies",
2025-01-10T13:28:40.3793850Z         ],
2025-01-10T13:28:40.3793900Z     )
2025-01-10T13:28:40.3794030Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:28:40.3794240Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:28:40.3794300Z             actual = getattr(
2025-01-10T13:28:40.3794450Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:28:40.3794500Z                 attr,
2025-01-10T13:28:40.3794540Z             )
2025-01-10T13:28:40.3794630Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:28:40.3794740Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:28:40.3794830Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:28:40.3794880Z             actual = getattr(
2025-01-10T13:28:40.3795030Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:28:40.3795100Z                 attr,
2025-01-10T13:28:40.3795150Z             )
2025-01-10T13:28:40.3795200Z         else:
2025-01-10T13:28:40.3795330Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:28:40.3795400Z     
2025-01-10T13:28:40.3795830Z         if hasattr(actual, "value"):
2025-01-10T13:28:40.3795900Z             actual = actual.value
2025-01-10T13:28:40.3795990Z         actual = pd.Series(actual)
2025-01-10T13:28:40.3796090Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:28:40.3796220Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:28:40.3796230Z 
2025-01-10T13:28:40.3796310Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:28:40.3796420Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3796540Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:28:40.3796590Z     ???
2025-01-10T13:28:40.3796700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3796700Z 
2025-01-10T13:28:40.3796760Z >   ???
2025-01-10T13:28:40.3796830Z E   AssertionError: Series are different
2025-01-10T13:28:40.3796890Z E   
2025-01-10T13:28:40.3796960Z E   Series values are different (1.3025 %)
2025-01-10T13:28:40.3797260Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.3802470Z E   [left]:  [2.5801871599548787e-05, 2.5615305276449435e-05, 2.5858344017372144e-05, -2.4286539750273696e-05, 2.4924524325725243e-05, -2.456230824810029e-05, 2.4103043153710077e-05, -2.438655094434287e-05, -2.4539054537501715e-05, 2.5417984817525785e-05, 2.512000535197746e-05, -2.4642582656280976e-05, -2.4233351068555537e-05, -2.4507743780475822e-05, 2.4958490988042172e-05, -2.4193730330394604e-05, 2.5671484002468758e-05, 2.571778434062277e-05, 2.464945535255098e-05, -2.422773639583352e-05, 2.5447471360622184e-05, -2.409627635116542e-05, 2.5614844040255083e-05, -2.4320523596905817e-05, 2.5377784576172196e-05, -2.3457066675560312e-05, 2.4369140190445265e-05, 2.558078209369483e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4679185862134628e-05, 2.5692099696671885e-05, 2.2709368608835504e-05, -2.422769024282858e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.221435871493417e-05, 2.588758262836899e-05, -2.4715605747432618e-05, 2.5511122157387355e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127536098161385e-05, -2.468141895326209e-05, -2.47043179761032e-05, -2.3740908691907106e-05, 2.483244249209606e-05, -2.4131561837088724e-05, -2.4208444730823924e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.413785571902468e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.4718848796409172e-05, 2.5235644879553273e-05, 2.5660116818809676e-05, 2.5705887025490933e-05, -2.3537055466673638e-05, 2.5942471740302383e-05, 2.4779255435154302e-05, -2.4437171482408422e-05, -2.488587475102296e-05, -2.461817145541738e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721589006402834e-05, -2.3916183924792534e-05, -2.4073277575252532e-05, 2.5426114770306902e-05, 2.504304506604637e-05, -2.365600824332809e-05, 2.564649452803889e-05, -2.3899135529642785e-05, 2.5338970275810367e-05, 2.484858251486878e-05, 2.5806793260333468e-05, 2.538037983050111e-05, -2.4207571237562553e-05, 2.4527910111281257e-05, 2.4916625382690475e-05, -2.4248093976538034e-05, -2.4259084902202997e-05, 2.5042343244083765e-05, -2.4184000110453416e-05, 2.534949108326902e-05, -2.438918660146681e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:28:40.3807680Z E   [right]: [2.580187060760512e-05, 2.5615305276449435e-05, 2.585830862681326e-05, -2.4286539523836896e-05, 2.4924327273178824e-05, -2.4562308329704016e-05, 2.4102796735064873e-05, -2.4386264249292878e-05, -2.4539054606359595e-05, 2.5417984817525785e-05, 2.5119851241109903e-05, -2.464236975797002e-05, -2.423310551200988e-05, -2.4507495750261827e-05, 2.4958491461131913e-05, -2.4193730203503752e-05, 2.5671279598406848e-05, 2.571778434758039e-05, 2.464924146734715e-05, -2.4227735746845522e-05, 2.5447471360622184e-05, -2.409627535779648e-05, 2.5614846934356755e-05, -2.4320296346496788e-05, 2.5377783180930537e-05, -2.345680162082186e-05, 2.436898893045542e-05, 2.5580712211859562e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4678990692654424e-05, 2.5692099452386407e-05, 2.270905632364821e-05, -2.4227512425411162e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.2214142249592017e-05, 2.588758262836899e-05, -2.4715606408157026e-05, 2.5511122485544443e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127338442376704e-05, -2.4681216640073288e-05, -2.4704319074974646e-05, -2.3740909354181544e-05, 2.4831415400580145e-05, -2.4131554413805748e-05, -2.420844496771843e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.4137581143845235e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.471887326730884e-05, 2.5235644520855386e-05, 2.5660032958970583e-05, 2.5705887025490933e-05, -2.3536700387812003e-05, 2.5942471740302383e-05, 2.4779076546395e-05, -2.4437167612038533e-05, -2.4885874975052928e-05, -2.461782418608366e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721880722086934e-05, -2.391585609212342e-05, -2.407321716937353e-05, 2.5426114770306902e-05, 2.5043044930642476e-05, -2.3655959156054043e-05, 2.564649452803889e-05, -2.389913546657555e-05, 2.533792518100767e-05, 2.4848582397006154e-05, 2.5806793260333468e-05, 2.5380277617431415e-05, -2.4207282609290893e-05, 2.4528010028979532e-05, 2.491662531246e-05, -2.4248093837055892e-05, -2.4259085434617066e-05, 2.5042343244083765e-05, -2.4184000860153038e-05, 2.534949108326902e-05, -2.4389186927485497e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:28:40.3808000Z E   At positional index 414, first diff: 2.5347525852067693e-05 != 2.5657552576608082e-05
2025-01-10T13:28:40.3808010Z 
2025-01-10T13:28:40.3808070Z testing.pyx:173: AssertionError
2025-01-10T13:28:40.3808420Z ________________ TestSpectrumSolver.test_spectrum_real_packets _________________
2025-01-10T13:28:40.3808430Z 
2025-01-10T13:28:40.3810110Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x144434650>
2025-01-10T13:28:40.3812140Z simulation = <tardis.simulation.base.Simulation object at 0x30f7742c0>
2025-01-10T13:28:40.3812180Z 
2025-01-10T13:28:40.3812540Z     def test_spectrum_real_packets(self, simulation):
2025-01-10T13:28:40.3813860Z         transport_state = simulation.transport.transport_state
2025-01-10T13:28:40.3814070Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:28:40.3814140Z     
2025-01-10T13:28:40.3814290Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:28:40.3814410Z         result = solver.spectrum_real_packets.luminosity
2025-01-10T13:28:40.3814560Z         key = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:28:40.3814650Z         expected = self.get_expected_data(key)
2025-01-10T13:28:40.3814720Z     
2025-01-10T13:28:40.3814820Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.3815020Z     
2025-01-10T13:28:40.3815350Z >       assert_quantity_allclose(
2025-01-10T13:28:40.3815510Z             result,
2025-01-10T13:28:40.3815680Z             luminosity,
2025-01-10T13:28:40.3815840Z         )
2025-01-10T13:28:40.3815850Z 
2025-01-10T13:28:40.3816170Z tardis/spectrum/tests/test_spectrum_solver.py:71: 
2025-01-10T13:28:40.3816780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3817820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.3818940Z     np.testing.assert_allclose(
2025-01-10T13:28:40.3819320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3819340Z 
2025-01-10T13:28:40.3820610Z args = (<function assert_allclose.<locals>.compare at 0x31aab16c0>, array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, .....), array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, ...,
2025-01-10T13:28:40.3820800Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.3821050Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3821070Z 
2025-01-10T13:28:40.3821130Z     @wraps(func)
2025-01-10T13:28:40.3821200Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3821280Z         with self._recreate_cm():
2025-01-10T13:28:40.3821350Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3821410Z E           AssertionError: 
2025-01-10T13:28:40.3821500Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3821550Z E           
2025-01-10T13:28:40.3821630Z E           Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:28:40.3821750Z E           Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:28:40.3821840Z E           Max relative difference among violations: 1.
2025-01-10T13:28:40.3821970Z E            ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.3822050Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3822180Z E            DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.3822250Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3822260Z 
2025-01-10T13:28:40.3822440Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3822610Z ___________ TestSpectrumSolver.test_spectrum_real_packets_reabsorbed ___________
2025-01-10T13:28:40.3822620Z 
2025-01-10T13:28:40.3822830Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x144434920>
2025-01-10T13:28:40.3822980Z simulation = <tardis.simulation.base.Simulation object at 0x30f7742c0>
2025-01-10T13:28:40.3822980Z 
2025-01-10T13:28:40.3823090Z     def test_spectrum_real_packets_reabsorbed(self, simulation):
2025-01-10T13:28:40.3823210Z         transport_state = simulation.transport.transport_state
2025-01-10T13:28:40.3823360Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:28:40.3823400Z     
2025-01-10T13:28:40.3823560Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:28:40.3823680Z         result = solver.spectrum_real_packets_reabsorbed.luminosity
2025-01-10T13:28:40.3824060Z         key = "simulation/spectrum_solver/spectrum_real_packets_reabsorbed/luminosity"
2025-01-10T13:28:40.3824140Z         expected = self.get_expected_data(key)
2025-01-10T13:28:40.3824180Z     
2025-01-10T13:28:40.3824270Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.3824310Z     
2025-01-10T13:28:40.3824380Z >       assert_quantity_allclose(
2025-01-10T13:28:40.3824420Z             result,
2025-01-10T13:28:40.3824480Z             luminosity,
2025-01-10T13:28:40.3824530Z         )
2025-01-10T13:28:40.3824530Z 
2025-01-10T13:28:40.3824620Z tardis/spectrum/tests/test_spectrum_solver.py:87: 
2025-01-10T13:28:40.3824720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3824990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.3825060Z     np.testing.assert_allclose(
2025-01-10T13:28:40.3825160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3825240Z 
2025-01-10T13:28:40.3825640Z args = (<function assert_allclose.<locals>.compare at 0x314182fc0>, array([2.03920412e+38, 3.72882494e+38, 2.29646943e+38, .....), array([2.03920412e+38, 3.72882494e+38, 2.29646943e+38, ...,
2025-01-10T13:28:40.3825730Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.3825950Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3825950Z 
2025-01-10T13:28:40.3826000Z     @wraps(func)
2025-01-10T13:28:40.3826060Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3826120Z         with self._recreate_cm():
2025-01-10T13:28:40.3826190Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3826250Z E           AssertionError: 
2025-01-10T13:28:40.3826340Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3826390Z E           
2025-01-10T13:28:40.3826470Z E           Mismatched elements: 252 / 10000 (2.52%)
2025-01-10T13:28:40.3826590Z E           Max absolute difference among violations: 4.15247374e+37
2025-01-10T13:28:40.3826690Z E           Max relative difference among violations: 1.03027212
2025-01-10T13:28:40.3826830Z E            ACTUAL: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.3826900Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3827030Z E            DESIRED: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.3827100Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3827100Z 
2025-01-10T13:28:40.3827260Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3827400Z ________________________ TestSpectrumSolver.test_solve _________________________
2025-01-10T13:28:40.3827400Z 
2025-01-10T13:28:40.3827600Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x144436c00>
2025-01-10T13:28:40.3827750Z simulation = <tardis.simulation.base.Simulation object at 0x30f7742c0>
2025-01-10T13:28:40.3827750Z 
2025-01-10T13:28:40.3827820Z     def test_solve(self, simulation):
2025-01-10T13:28:40.3828200Z         transport_state = simulation.transport.transport_state
2025-01-10T13:28:40.3828370Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:28:40.3828420Z     
2025-01-10T13:28:40.3828570Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:28:40.3828700Z         result_real, result_virtual, result_integrated = solver.solve(
2025-01-10T13:28:40.3828760Z             transport_state
2025-01-10T13:28:40.3828800Z         )
2025-01-10T13:28:40.3828950Z         key_real = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:28:40.3829040Z         expected_real = self.get_expected_data(key_real)
2025-01-10T13:28:40.3829080Z     
2025-01-10T13:28:40.3829290Z         luminosity_real = u.Quantity(expected_real, "erg /s")
2025-01-10T13:28:40.3829350Z     
2025-01-10T13:28:40.3829430Z >       assert_quantity_allclose(
2025-01-10T13:28:40.3829500Z             result_real.luminosity,
2025-01-10T13:28:40.3829560Z             luminosity_real,
2025-01-10T13:28:40.3829600Z         )
2025-01-10T13:28:40.3829600Z 
2025-01-10T13:28:40.3829700Z tardis/spectrum/tests/test_spectrum_solver.py:105: 
2025-01-10T13:28:40.3829800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3830070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.3830140Z     np.testing.assert_allclose(
2025-01-10T13:28:40.3830250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3830260Z 
2025-01-10T13:28:40.3830630Z args = (<function assert_allclose.<locals>.compare at 0x3140a2660>, array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, .....), array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, ...,
2025-01-10T13:28:40.3839450Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.3839680Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3839680Z 
2025-01-10T13:28:40.3839730Z     @wraps(func)
2025-01-10T13:28:40.3839790Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3839850Z         with self._recreate_cm():
2025-01-10T13:28:40.3839920Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3839980Z E           AssertionError: 
2025-01-10T13:28:40.3840060Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3840100Z E           
2025-01-10T13:28:40.3840190Z E           Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:28:40.3840300Z E           Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:28:40.3840380Z E           Max relative difference among violations: 1.
2025-01-10T13:28:40.3840540Z E            ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.3840610Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3840780Z E            DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.3840850Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3840860Z 
2025-01-10T13:28:40.3841020Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3841170Z __________________ TestTransportSimple.test_j_blue_estimators __________________
2025-01-10T13:28:40.3841170Z 
2025-01-10T13:28:40.3841340Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x144435850>
2025-01-10T13:28:40.3841480Z simulation = <tardis.simulation.base.Simulation object at 0x310bbda30>
2025-01-10T13:28:40.3841490Z 
2025-01-10T13:28:40.3841570Z     def test_j_blue_estimators(self, simulation):
2025-01-10T13:28:40.3841700Z         key = "simulation/transport/transport_state/j_blue_estimator"
2025-01-10T13:28:40.3841780Z         expected = self.get_expected_data(key)
2025-01-10T13:28:40.3841830Z     
2025-01-10T13:28:40.3841880Z >       npt.assert_allclose(
2025-01-10T13:28:40.3842060Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator,
2025-01-10T13:28:40.3842120Z             expected.values,
2025-01-10T13:28:40.3842160Z         )
2025-01-10T13:28:40.3842170Z 
2025-01-10T13:28:40.3842230Z tardis/tests/test_tardis_full.py:70: 
2025-01-10T13:28:40.3842330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3842330Z 
2025-01-10T13:28:40.3842530Z args = (<function assert_allclose.<locals>.compare at 0x31412bf60>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3842590Z        [0., 0., 0.,.....,
2025-01-10T13:28:40.3842640Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3842700Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3850240Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:28:40.3850460Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3850470Z 
2025-01-10T13:28:40.3850510Z     @wraps(func)
2025-01-10T13:28:40.3850570Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3850630Z         with self._recreate_cm():
2025-01-10T13:28:40.3850690Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3850750Z E           AssertionError: 
2025-01-10T13:28:40.3850830Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3850880Z E           
2025-01-10T13:28:40.3850960Z E           Mismatched elements: 491895 / 584480 (84.2%)
2025-01-10T13:28:40.3851070Z E           Max absolute difference among violations: 5.32418652e-19
2025-01-10T13:28:40.3851170Z E           Max relative difference among violations: 8.78746214
2025-01-10T13:28:40.3851250Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3851410Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3851490Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.3851570Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3851630Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3851700Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.3851700Z 
2025-01-10T13:28:40.3851860Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3852190Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.3860680Z [[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3866460Z 	
2025-01-10T13:28:40.3866950Z 	Reading Atomic Data from /Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
2025-01-10T13:28:40.3867140Z [[1mtardis.io.atom_data.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3867540Z 	Reading Atom Data with: UUID = 6f7b09e887a311e7a06b246e96350010 MD5  = 864f1753714343c41f99cb065710cace  ([1mbase.py[0m:258)
2025-01-10T13:28:40.3867700Z [[1mtardis.io.atom_data.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3868080Z 	Non provided Atomic Data: synpp_refs, photoionization_data, yg_data, two_photon_data, linelist_atoms, linelist_molecules ([1mbase.py[0m:262)
2025-01-10T13:28:40.3868280Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:28:40.3868620Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:28:40.3868760Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3868930Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:28:40.3869060Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3869110Z 	
2025-01-10T13:28:40.3869230Z 	Starting iteration 1 of 5 ([1mbase.py[0m:444)
2025-01-10T13:28:40.3869360Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3869400Z 	
2025-01-10T13:28:40.3869480Z 	Luminosity emitted   = 8.104e+42 erg / s
2025-01-10T13:28:40.3869550Z 	Luminosity absorbed  = 2.674e+42 erg / s
2025-01-10T13:28:40.3869610Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3869690Z  ([1mbase.py[0m:657)
2025-01-10T13:28:40.3869820Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3869870Z 	
2025-01-10T13:28:40.3869980Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:28:40.3870100Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3870150Z 	
2025-01-10T13:28:40.3870230Z 	Shell No.    t_rad    next_t_rad    w   next_w
2025-01-10T13:28:40.3870300Z 	0         9.97e+03 K  1.01e+04 K   0.4   0.449
2025-01-10T13:28:40.3870360Z 	5         9.89e+03 K  1.01e+04 K 0.211   0.201
2025-01-10T13:28:40.3870670Z 	10        9.82e+03 K     1e+04 K 0.143   0.129
2025-01-10T13:28:40.3870740Z 	15        9.75e+03 K  9.85e+03 K 0.105  0.0953
2025-01-10T13:28:40.3870820Z  ([1mbase.py[0m:650)
2025-01-10T13:28:40.3870950Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3870990Z 	
2025-01-10T13:28:40.3871060Z 	Current t_inner = 9974.969 K
2025-01-10T13:28:40.3871150Z 	Expected t_inner for next iteration = 10736.783 K
2025-01-10T13:28:40.3871220Z  ([1mbase.py[0m:652)
2025-01-10T13:28:40.3871350Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3871400Z 	
2025-01-10T13:28:40.3871510Z 	Starting iteration 2 of 5 ([1mbase.py[0m:444)
2025-01-10T13:28:40.3871640Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3871680Z 	
2025-01-10T13:28:40.3873120Z 	Luminosity emitted   = 1.084e+43 erg / s
2025-01-10T13:28:40.3873220Z 	Luminosity absorbed  = 3.624e+42 erg / s
2025-01-10T13:28:40.3873290Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3873420Z  ([1mbase.py[0m:657)
2025-01-10T13:28:40.3873780Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3873850Z 	
2025-01-10T13:28:40.3873970Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:28:40.3874090Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3874140Z 	
2025-01-10T13:28:40.3874220Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:28:40.3874290Z 	0         1.01e+04 K  1.05e+04 K  0.449   0.481
2025-01-10T13:28:40.3874350Z 	5         1.01e+04 K  1.06e+04 K  0.201   0.202
2025-01-10T13:28:40.3874420Z 	10           1e+04 K  1.04e+04 K  0.129   0.127
2025-01-10T13:28:40.3874490Z 	15        9.85e+03 K  1.02e+04 K 0.0953  0.0935
2025-01-10T13:28:40.3874560Z  ([1mbase.py[0m:650)
2025-01-10T13:28:40.3874690Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3874730Z 	
2025-01-10T13:28:40.3874800Z 	Current t_inner = 10736.783 K
2025-01-10T13:28:40.3874890Z 	Expected t_inner for next iteration = 10718.619 K
2025-01-10T13:28:40.3874980Z  ([1mbase.py[0m:652)
2025-01-10T13:28:40.3875100Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3875150Z 	
2025-01-10T13:28:40.3875260Z 	Starting iteration 3 of 5 ([1mbase.py[0m:444)
2025-01-10T13:28:40.3875390Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3875430Z 	
2025-01-10T13:28:40.3875500Z 	Luminosity emitted   = 1.086e+43 erg / s
2025-01-10T13:28:40.3875570Z 	Luminosity absorbed  = 3.514e+42 erg / s
2025-01-10T13:28:40.3875630Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3875700Z  ([1mbase.py[0m:657)
2025-01-10T13:28:40.3875830Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3876010Z 	Iteration converged 1/4 consecutive times. ([1mbase.py[0m:260)
2025-01-10T13:28:40.3876140Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3876180Z 	
2025-01-10T13:28:40.3876290Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:28:40.3876420Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3876470Z 	
2025-01-10T13:28:40.3876550Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:28:40.3876610Z 	0         1.05e+04 K  1.07e+04 K  0.481   0.491
2025-01-10T13:28:40.3876670Z 	5         1.06e+04 K  1.09e+04 K  0.202   0.198
2025-01-10T13:28:40.3876730Z 	10        1.04e+04 K  1.07e+04 K  0.127   0.124
2025-01-10T13:28:40.3876790Z 	15        1.02e+04 K  1.04e+04 K 0.0935  0.0921
2025-01-10T13:28:40.3876860Z  ([1mbase.py[0m:650)
2025-01-10T13:28:40.3876980Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3877030Z 	
2025-01-10T13:28:40.3877090Z 	Current t_inner = 10718.619 K
2025-01-10T13:28:40.3877170Z 	Expected t_inner for next iteration = 10696.651 K
2025-01-10T13:28:40.3877240Z  ([1mbase.py[0m:652)
2025-01-10T13:28:40.3877370Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3877420Z 	
2025-01-10T13:28:40.3877530Z 	Starting iteration 4 of 5 ([1mbase.py[0m:444)
2025-01-10T13:28:40.3891600Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3891930Z 	
2025-01-10T13:28:40.3892160Z 	Luminosity emitted   = 1.082e+43 erg / s
2025-01-10T13:28:40.3892350Z 	Luminosity absorbed  = 3.437e+42 erg / s
2025-01-10T13:28:40.3892560Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3893040Z  ([1mbase.py[0m:657)
2025-01-10T13:28:40.3893410Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3893870Z 	Iteration converged 2/4 consecutive times. ([1mbase.py[0m:260)
2025-01-10T13:28:40.3894280Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3894430Z 	
2025-01-10T13:28:40.3894840Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:28:40.3895210Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3895390Z 	
2025-01-10T13:28:40.3895650Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:28:40.3895860Z 	0         1.07e+04 K  1.09e+04 K  0.491    0.49
2025-01-10T13:28:40.3896920Z 	5         1.09e+04 K   1.1e+04 K  0.198   0.193
2025-01-10T13:28:40.3897120Z 	10        1.07e+04 K  1.08e+04 K  0.124   0.122
2025-01-10T13:28:40.3897310Z 	15        1.04e+04 K  1.05e+04 K 0.0921  0.0902
2025-01-10T13:28:40.3897540Z  ([1mbase.py[0m:650)
2025-01-10T13:28:40.3897920Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3898090Z 	
2025-01-10T13:28:40.3898290Z 	Current t_inner = 10696.651 K
2025-01-10T13:28:40.3898560Z 	Expected t_inner for next iteration = 10684.004 K
2025-01-10T13:28:40.3898820Z  ([1mbase.py[0m:652)
2025-01-10T13:28:40.3899240Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3899430Z 	
2025-01-10T13:28:40.3899660Z 	Simulation finished in 4 iterations 
2025-01-10T13:28:40.3899870Z 	Simulation took 13.12 s
2025-01-10T13:28:40.3900120Z  ([1mbase.py[0m:542)
2025-01-10T13:28:40.3900530Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3900670Z 	
2025-01-10T13:28:40.3901040Z 	Starting iteration 5 of 5 ([1mbase.py[0m:444)
2025-01-10T13:28:40.3901430Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.3901580Z 	
2025-01-10T13:28:40.3901750Z 	Luminosity emitted   = 1.074e+43 erg / s
2025-01-10T13:28:40.3901950Z 	Luminosity absorbed  = 3.447e+42 erg / s
2025-01-10T13:28:40.3902150Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3902370Z  ([1mbase.py[0m:657)
2025-01-10T13:28:40.3902720Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:28:40.3902730Z 
2025-01-10T13:28:40.3902740Z 
2025-01-10T13:28:40.3903250Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                [A
2025-01-10T13:28:40.3903270Z 
2025-01-10T13:28:40.3903780Z Packets:                                                                                   0/200000 [00:00<?, ?it/s][A
2025-01-10T13:28:40.3903790Z 
2025-01-10T13:28:40.3904320Z Packets:   ██▏                                                                             5485/200000 [00:00<00:03, 54843.38it/s][A
2025-01-10T13:28:40.3904370Z 
2025-01-10T13:28:40.3904900Z Packets:   █████▉                                                                          14946/200000 [00:00<00:02, 78223.86it/s][A
2025-01-10T13:28:40.3904920Z 
2025-01-10T13:28:40.3905490Z Packets:   ██████████                                                                      25121/200000 [00:00<00:01, 88953.83it/s][A
2025-01-10T13:28:40.3905520Z 
2025-01-10T13:28:40.3906080Z Packets:   ██████████████▏                                                                 35353/200000 [00:00<00:01, 94226.85it/s][A
2025-01-10T13:28:40.3906100Z 
2025-01-10T13:28:40.3906640Z Packets:   █████████████████▉                                                              44776/200000 [00:00<00:01, 86822.10it/s][A
2025-01-10T13:28:40.3906650Z 
2025-01-10T13:28:40.3907180Z Packets:   █████████████████████▋                                                          54313/200000 [00:00<00:01, 89572.77it/s][A
2025-01-10T13:28:40.3907510Z 
2025-01-10T13:28:40.3908120Z Packets:   █████████████████████████▎                                                      63346/200000 [00:00<00:01, 88228.67it/s][A
2025-01-10T13:28:40.3908140Z 
2025-01-10T13:28:40.3908710Z Packets:   █████████████████████████████▏                                                  73124/200000 [00:00<00:01, 91109.01it/s][A
2025-01-10T13:28:40.3908740Z 
2025-01-10T13:28:40.3909300Z Packets:   ████████████████████████████████▉                                               82281/200000 [00:00<00:01, 87092.98it/s][A
2025-01-10T13:28:40.3909320Z 
2025-01-10T13:28:40.3909890Z Packets:   █████████████████████████████████████▍                                          93618/200000 [00:01<00:01, 94800.73it/s][A
2025-01-10T13:28:40.3909920Z 
2025-01-10T13:28:40.3910500Z Packets:   █████████████████████████████████████████▎                                      103180/200000 [00:01<00:01, 90859.44it/s][A
2025-01-10T13:28:40.3911220Z 
2025-01-10T13:28:40.3911930Z Packets:   █████████████████████████████████████████████▎                                  113224/200000 [00:01<00:00, 93608.78it/s][A
2025-01-10T13:28:40.3911950Z 
2025-01-10T13:28:40.3912690Z Packets:   █████████████████████████████████████████████████▏                              122834/200000 [00:01<00:00, 94332.18it/s][A
2025-01-10T13:28:40.3912700Z 
2025-01-10T13:28:40.3913680Z Packets:   █████████████████████████████████████████████████████                           132710/200000 [00:01<00:00, 95629.20it/s][A
2025-01-10T13:28:40.3913710Z 
2025-01-10T13:28:40.3914360Z Packets:   ████████████████████████████████████████████████████████▉                       142314/200000 [00:01<00:00, 88462.16it/s][A
2025-01-10T13:28:40.3914380Z 
2025-01-10T13:28:40.3915050Z Packets:   ████████████████████████████████████████████████████████████▌                   151287/200000 [00:01<00:00, 85613.42it/s][A
2025-01-10T13:28:40.3915110Z 
2025-01-10T13:28:40.3915790Z Packets:   ████████████████████████████████████████████████████████████████▎               160815/200000 [00:01<00:00, 88307.55it/s][A
2025-01-10T13:28:40.3915830Z 
2025-01-10T13:28:40.3916520Z Packets:   ████████████████████████████████████████████████████████████████████            170129/200000 [00:01<00:00, 89683.17it/s][A
2025-01-10T13:28:40.3916540Z 
2025-01-10T13:28:40.3917200Z Packets:   ███████████████████████████████████████████████████████████████████████▋        179166/200000 [00:02<00:00, 86695.84it/s][A
2025-01-10T13:28:40.3917230Z 
2025-01-10T13:28:40.3917920Z Packets:   ███████████████████████████████████████████████████████████████████████████▉    189706/200000 [00:02<00:00, 92024.17it/s][A
2025-01-10T13:28:40.3917940Z 
2025-01-10T13:28:40.3918650Z Packets:   ███████████████████████████████████████████████████████████████████████████████▌198980/200000 [00:02<00:00, 90039.65it/s][A
2025-01-10T13:28:40.3919010Z Iterations:                                                                                13/? [05:41<00:00, 13.22s/it]
2025-01-10T13:28:40.3920330Z 
2025-01-10T13:28:40.3920810Z Packets:   ███████████████████████████████████████████████████████████████████████████████▉199999/200000 [00:02<00:00, 90039.65it/s][A
2025-01-10T13:28:40.3920820Z 
2025-01-10T13:28:40.3921000Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                [A
2025-01-10T13:28:40.3921010Z 
2025-01-10T13:28:40.3921190Z Packets:   ████▊                                                                           12160/200000 [00:00<00:01, 121597.51it/s][A
2025-01-10T13:28:40.3921190Z 
2025-01-10T13:28:40.3921380Z Packets:   █████████▋                                                                      24320/200000 [00:00<00:01, 114932.80it/s][A
2025-01-10T13:28:40.3921380Z 
2025-01-10T13:28:40.3921570Z Packets:   ███████████████                                                                 37757/200000 [00:00<00:01, 123533.29it/s][A
2025-01-10T13:28:40.3921800Z 
2025-01-10T13:28:40.3922040Z Packets:   ████████████████████▊                                                           52142/200000 [00:00<00:01, 131403.73it/s][A
2025-01-10T13:28:40.3922050Z 
2025-01-10T13:28:40.3922260Z Packets:   ██████████████████████████▏                                                     65322/200000 [00:00<00:01, 124257.97it/s][A
2025-01-10T13:28:40.3922260Z 
2025-01-10T13:28:40.3922470Z Packets:   ███████████████████████████████▏                                                77831/200000 [00:00<00:01, 117349.48it/s][A
2025-01-10T13:28:40.3922470Z 
2025-01-10T13:28:40.3922710Z Packets:   ████████████████████████████████████                                            90266/200000 [00:00<00:00, 119478.22it/s][A
2025-01-10T13:28:40.3922710Z 
2025-01-10T13:28:40.3922970Z Packets:   █████████████████████████████████████████▍                                      103663/200000 [00:00<00:00, 123863.39it/s][A
2025-01-10T13:28:40.3923100Z 
2025-01-10T13:28:40.3923360Z Packets:   ██████████████████████████████████████████████▍                                 116129/200000 [00:00<00:00, 120933.11it/s][A
2025-01-10T13:28:40.3923390Z 
2025-01-10T13:28:40.3923650Z Packets:   ███████████████████████████████████████████████████▍                            128702/200000 [00:01<00:00, 122350.00it/s][A
2025-01-10T13:28:40.3923660Z 
2025-01-10T13:28:40.3923910Z Packets:   ████████████████████████████████████████████████████████▊                       141917/200000 [00:01<00:00, 125259.72it/s][A
2025-01-10T13:28:40.3923920Z 
2025-01-10T13:28:40.3924160Z Packets:   █████████████████████████████████████████████████████████████▊                  154486/200000 [00:01<00:00, 125217.08it/s][A
2025-01-10T13:28:40.3924160Z 
2025-01-10T13:28:40.3924390Z Packets:   ██████████████████████████████████████████████████████████████████▊             167107/200000 [00:01<00:00, 125512.87it/s][A
2025-01-10T13:28:40.3924390Z 
2025-01-10T13:28:40.3924640Z Packets:   ████████████████████████████████████████████████████████████████████████▏       180515/200000 [00:01<00:00, 128072.85it/s][A
2025-01-10T13:28:40.3924660Z 
2025-01-10T13:28:40.3924890Z Packets:   █████████████████████████████████████████████████████████████████████████████▎  193340/200000 [00:01<00:00, 123682.21it/s][A
2025-01-10T13:28:40.3925010Z Iterations:                                                                                14/? [05:44<00:00, 10.09s/it]
2025-01-10T13:28:40.3925010Z 
2025-01-10T13:28:40.3925250Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 123682.21it/s][A
2025-01-10T13:28:40.3925250Z 
2025-01-10T13:28:40.3925420Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
2025-01-10T13:28:40.3925430Z 
2025-01-10T13:28:40.3925600Z Packets:   ████▉                                                                           12411/200000 [00:00<00:01, 122775.61it/s][A
2025-01-10T13:28:40.3925700Z 
2025-01-10T13:28:40.3925890Z Packets:   ██████████▏                                                                     25415/200000 [00:00<00:01, 127025.91it/s][A
2025-01-10T13:28:40.3925900Z 
2025-01-10T13:28:40.3926080Z Packets:   ███████████████▏                                                                38120/200000 [00:00<00:01, 123758.31it/s][A
2025-01-10T13:28:40.3926080Z 
2025-01-10T13:28:40.3926270Z Packets:   ████████████████████▏                                                           50506/200000 [00:00<00:01, 105991.38it/s][A
2025-01-10T13:28:40.3926270Z 
2025-01-10T13:28:40.3926460Z Packets:   ████████████████████████▉                                                       62325/200000 [00:00<00:01, 109914.72it/s][A
2025-01-10T13:28:40.3926460Z 
2025-01-10T13:28:40.3926650Z Packets:   █████████████████████████████▍                                                  73562/200000 [00:00<00:01, 103927.28it/s][A
2025-01-10T13:28:40.3926720Z 
2025-01-10T13:28:40.3926970Z Packets:   ██████████████████████████████████▍                                             85949/200000 [00:00<00:01, 109848.61it/s][A
2025-01-10T13:28:40.3926980Z 
2025-01-10T13:28:40.3927210Z Packets:   ███████████████████████████████████████▏                                        97978/200000 [00:00<00:00, 112958.18it/s][A
2025-01-10T13:28:40.3927220Z 
2025-01-10T13:28:40.3927460Z Packets:   ███████████████████████████████████████████▊                                    109592/200000 [00:00<00:00, 113907.37it/s][A
2025-01-10T13:28:40.3927470Z 
2025-01-10T13:28:40.3927720Z Packets:   ████████████████████████████████████████████████▌                               121545/200000 [00:01<00:00, 115587.24it/s][A
2025-01-10T13:28:40.3927740Z 
2025-01-10T13:28:40.3927970Z Packets:   █████████████████████████████████████████████████████▊                          134400/200000 [00:01<00:00, 119464.45it/s][A
2025-01-10T13:28:40.3927970Z 
2025-01-10T13:28:40.3928250Z Packets:   ███████████████████████████████████████████████████████████                     147663/200000 [00:01<00:00, 123406.54it/s][A
2025-01-10T13:28:40.3928390Z 
2025-01-10T13:28:40.3928680Z Packets:   ████████████████████████████████████████████████████████████████▏               160558/200000 [00:01<00:00, 125065.00it/s][A
2025-01-10T13:28:40.3928680Z 
2025-01-10T13:28:40.3928950Z Packets:   █████████████████████████████████████████████████████████████████████▏          173102/200000 [00:01<00:00, 113003.25it/s][A
2025-01-10T13:28:40.3928960Z 
2025-01-10T13:28:40.3929260Z Packets:   █████████████████████████████████████████████████████████████████████████▊      184645/200000 [00:01<00:00, 108525.97it/s][A
2025-01-10T13:28:40.3929260Z 
2025-01-10T13:28:40.3929530Z Packets:   ██████████████████████████████████████████████████████████████████████████████▋ 196696/200000 [00:01<00:00, 111827.22it/s][A
2025-01-10T13:28:40.3929670Z Iterations:                                                                                15/? [05:47<00:00,  7.99s/it]
2025-01-10T13:28:40.3929710Z 
2025-01-10T13:28:40.3929990Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 111827.22it/s][A
2025-01-10T13:28:40.3929990Z 
2025-01-10T13:28:40.3930200Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
2025-01-10T13:28:40.3930210Z 
2025-01-10T13:28:40.3930420Z Packets:   █████▍                                                                          13656/200000 [00:00<00:01, 136546.46it/s][A
2025-01-10T13:28:40.3930420Z 
2025-01-10T13:28:40.3930640Z Packets:   ██████████▉                                                                     27311/200000 [00:00<00:01, 124178.65it/s][A
2025-01-10T13:28:40.3930650Z 
2025-01-10T13:28:40.3930870Z Packets:   ███████████████▉                                                                39803/200000 [00:00<00:01, 119477.62it/s][A
2025-01-10T13:28:40.3930990Z 
2025-01-10T13:28:40.3931260Z Packets:   ████████████████████▋                                                           51791/200000 [00:00<00:01, 118615.52it/s][A
2025-01-10T13:28:40.3931270Z 
2025-01-10T13:28:40.3931490Z Packets:   █████████████████████████▍                                                      63673/200000 [00:00<00:01, 113842.36it/s][A
2025-01-10T13:28:40.3931500Z 
2025-01-10T13:28:40.3931760Z Packets:   ██████████████████████████████                                                  75085/200000 [00:00<00:01, 108322.58it/s][A
2025-01-10T13:28:40.3931770Z 
2025-01-10T13:28:40.3931980Z Packets:   ██████████████████████████████████▍                                             85959/200000 [00:00<00:01, 104890.63it/s][A
2025-01-10T13:28:40.3931980Z 
2025-01-10T13:28:40.3932240Z Packets:   ██████████████████████████████████████▌                                         96476/200000 [00:00<00:00, 103734.71it/s][A
2025-01-10T13:28:40.3932250Z 
2025-01-10T13:28:40.3932510Z Packets:   ███████████████████████████████████████████▍                                    108703/200000 [00:00<00:00, 109189.99it/s][A
2025-01-10T13:28:40.3932840Z 
2025-01-10T13:28:40.3933120Z Packets:   ████████████████████████████████████████████████▎                               120840/200000 [00:01<00:00, 112787.27it/s][A
2025-01-10T13:28:40.3933120Z 
2025-01-10T13:28:40.3933390Z Packets:   ████████████████████████████████████████████████████▊                           132164/200000 [00:01<00:00, 107580.86it/s][A
2025-01-10T13:28:40.3933400Z 
2025-01-10T13:28:40.3933670Z Packets:   █████████████████████████████████████████████████████████▏                      142992/200000 [00:01<00:00, 105777.57it/s][A
2025-01-10T13:28:40.3933670Z 
2025-01-10T13:28:40.3933950Z Packets:   █████████████████████████████████████████████████████████████▍                  153617/200000 [00:01<00:00, 98957.02it/s] [A
2025-01-10T13:28:40.3933960Z 
2025-01-10T13:28:40.3934210Z Packets:   █████████████████████████████████████████████████████████████████▍              163610/200000 [00:01<00:00, 98425.76it/s][A
2025-01-10T13:28:40.3934250Z 
2025-01-10T13:28:40.3934530Z Packets:   █████████████████████████████████████████████████████████████████████▍          173517/200000 [00:01<00:00, 91215.69it/s][A
2025-01-10T13:28:40.3934540Z 
2025-01-10T13:28:40.3934830Z Packets:   █████████████████████████████████████████████████████████████████████████       182758/200000 [00:01<00:00, 87391.32it/s][A
2025-01-10T13:28:40.3934840Z 
2025-01-10T13:28:40.3935110Z Packets:   ████████████████████████████████████████████████████████████████████████████▉   192408/200000 [00:01<00:00, 89851.99it/s][A
2025-01-10T13:28:40.3935250Z Iterations:                                                                                16/? [05:51<00:00,  6.63s/it]
2025-01-10T13:28:40.3935250Z 
2025-01-10T13:28:40.3935550Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:02<00:00, 89851.99it/s][A
2025-01-10T13:28:40.3935830Z 
2025-01-10T13:28:40.3936060Z Packets:                                                                                   0/500000 [00:00<?, ?it/s]                [A
2025-01-10T13:28:40.3936060Z 
2025-01-10T13:28:40.3936240Z Packets:   █▍                                                                              9075/500000 [00:00<00:14, 33525.94it/s][A
2025-01-10T13:28:40.3936250Z 
2025-01-10T13:28:40.3936460Z Packets:   ██                                                                              12958/500000 [00:00<00:13, 35348.73it/s][A
2025-01-10T13:28:40.3936470Z 
2025-01-10T13:28:40.3936660Z Packets:   ██▋                                                                             16621/500000 [00:00<00:14, 33513.67it/s][A
2025-01-10T13:28:40.3936660Z 
2025-01-10T13:28:40.3936830Z Packets:   ███▎                                                                            20617/500000 [00:00<00:13, 35489.02it/s][A
2025-01-10T13:28:40.3936840Z 
2025-01-10T13:28:40.3937010Z Packets:   ███▉                                                                            24947/500000 [00:00<00:12, 37866.26it/s][A
2025-01-10T13:28:40.3937100Z 
2025-01-10T13:28:40.3937280Z Packets:   ████▋                                                                           29267/500000 [00:00<00:11, 39478.92it/s][A
2025-01-10T13:28:40.3937290Z 
2025-01-10T13:28:40.3937460Z Packets:   █████▎                                                                          33488/500000 [00:00<00:11, 40303.84it/s][A
2025-01-10T13:28:40.3937470Z 
2025-01-10T13:28:40.3937640Z Packets:   ██████                                                                          37579/500000 [00:01<00:11, 38928.72it/s][A
2025-01-10T13:28:40.3937650Z 
2025-01-10T13:28:40.3937820Z Packets:   ██████▋                                                                         41802/500000 [00:01<00:11, 39894.33it/s][A
2025-01-10T13:28:40.3937820Z 
2025-01-10T13:28:40.3938000Z Packets:   ███████▎                                                                        45830/500000 [00:01<00:11, 39118.43it/s][A
2025-01-10T13:28:40.3938020Z 
2025-01-10T13:28:40.3938200Z Packets:   ███████▉                                                                        49796/500000 [00:01<00:11, 39276.33it/s][A
2025-01-10T13:28:40.3938200Z 
2025-01-10T13:28:40.3938380Z Packets:   ████████▌                                                                       53743/500000 [00:01<00:11, 39098.31it/s][A
2025-01-10T13:28:40.3938380Z 
2025-01-10T13:28:40.3938560Z Packets:   █████████▏                                                                      57666/500000 [00:01<00:11, 36877.16it/s][A
2025-01-10T13:28:40.3938560Z 
2025-01-10T13:28:40.3938740Z Packets:   █████████▊                                                                      61385/500000 [00:01<00:11, 36924.69it/s][A
2025-01-10T13:28:40.3938740Z 
2025-01-10T13:28:40.3938930Z Packets:   ██████████▍                                                                     65100/500000 [00:01<00:11, 36923.64it/s][A
2025-01-10T13:28:40.3939000Z 
2025-01-10T13:28:40.3939190Z Packets:   ███████████                                                                     68808/500000 [00:01<00:11, 36445.92it/s][A
2025-01-10T13:28:40.3939200Z 
2025-01-10T13:28:40.3939380Z Packets:   ███████████▋                                                                    72723/500000 [00:01<00:11, 37226.91it/s][A
2025-01-10T13:28:40.3939380Z 
2025-01-10T13:28:40.3939570Z Packets:   ████████████▏                                                                   76456/500000 [00:02<00:11, 36279.04it/s][A
2025-01-10T13:28:40.3939570Z 
2025-01-10T13:28:40.3939750Z Packets:   ████████████▊                                                                   80095/500000 [00:02<00:11, 35451.70it/s][A
2025-01-10T13:28:40.3939760Z 
2025-01-10T13:28:40.3939980Z Packets:   █████████████▌                                                                  84381/500000 [00:02<00:11, 37584.07it/s][A
2025-01-10T13:28:40.3940000Z 
2025-01-10T13:28:40.3940200Z Packets:   ██████████████▏                                                                 88392/500000 [00:02<00:10, 38314.63it/s][A
2025-01-10T13:28:40.3940200Z 
2025-01-10T13:28:40.3940390Z Packets:   ██████████████▊                                                                 92447/500000 [00:02<00:10, 38970.59it/s][A
2025-01-10T13:28:40.3940390Z 
2025-01-10T13:28:40.3940580Z Packets:   ███████████████▍                                                                96790/500000 [00:02<00:10, 40286.31it/s][A
2025-01-10T13:28:40.3940580Z 
2025-01-10T13:28:40.3940780Z Packets:   ████████████████▏                                                               100828/500000 [00:02<00:10, 38672.78it/s][A
2025-01-10T13:28:40.3940790Z 
2025-01-10T13:28:40.3940980Z Packets:   ████████████████▊                                                               105171/500000 [00:02<00:09, 40043.52it/s][A
2025-01-10T13:28:40.3940990Z 
2025-01-10T13:28:40.3941180Z Packets:   █████████████████▍                                                              109194/500000 [00:02<00:09, 40044.88it/s][A
2025-01-10T13:28:40.3941280Z 
2025-01-10T13:28:40.3941470Z Packets:   ██████████████████▏                                                             113535/500000 [00:02<00:09, 41033.73it/s][A
2025-01-10T13:28:40.3941470Z 
2025-01-10T13:28:40.3941660Z Packets:   ██████████████████▊                                                             117650/500000 [00:03<00:09, 38368.67it/s][A
2025-01-10T13:28:40.3941660Z 
2025-01-10T13:28:40.3941850Z Packets:   ███████████████████▍                                                            121528/500000 [00:03<00:09, 38427.05it/s][A
2025-01-10T13:28:40.3941850Z 
2025-01-10T13:28:40.3942040Z Packets:   ████████████████████                                                            125400/500000 [00:03<00:09, 37609.17it/s][A
2025-01-10T13:28:40.3942050Z 
2025-01-10T13:28:40.3942230Z Packets:   ████████████████████▋                                                           129437/500000 [00:03<00:09, 38399.28it/s][A
2025-01-10T13:28:40.3942250Z 
2025-01-10T13:28:40.3942440Z Packets:   █████████████████████▍                                                          133737/500000 [00:03<00:09, 39730.93it/s][A
2025-01-10T13:28:40.3942450Z 
2025-01-10T13:28:40.3942660Z Packets:   ██████████████████████                                                          137728/500000 [00:03<00:09, 36774.80it/s][A
2025-01-10T13:28:40.3942670Z 
2025-01-10T13:28:40.3942880Z Packets:   ██████████████████████▋                                                         142121/500000 [00:03<00:09, 38768.86it/s][A
2025-01-10T13:28:40.3942890Z 
2025-01-10T13:28:40.3943090Z Packets:   ███████████████████████▍                                                        146218/500000 [00:03<00:08, 39394.94it/s][A
2025-01-10T13:28:40.3943090Z 
2025-01-10T13:28:40.3943290Z Packets:   ████████████████████████                                                        150257/500000 [00:03<00:08, 39681.98it/s][A
2025-01-10T13:28:40.3943380Z 
2025-01-10T13:28:40.3943580Z Packets:   ████████████████████████▋                                                       154265/500000 [00:04<00:08, 39794.32it/s][A
2025-01-10T13:28:40.3943580Z 
2025-01-10T13:28:40.3943770Z Packets:   █████████████████████████▎                                                      158265/500000 [00:04<00:08, 38215.06it/s][A
2025-01-10T13:28:40.3943780Z 
2025-01-10T13:28:40.3943960Z Packets:   █████████████████████████▉                                                      162113/500000 [00:04<00:09, 36644.22it/s][A
2025-01-10T13:28:40.3943970Z 
2025-01-10T13:28:40.3944160Z Packets:   ██████████████████████████▌                                                     165805/500000 [00:04<00:10, 31899.72it/s][A
2025-01-10T13:28:40.3944160Z 
2025-01-10T13:28:40.3944350Z Packets:   ███████████████████████████                                                     169111/500000 [00:04<00:10, 31960.52it/s][A
2025-01-10T13:28:40.3944360Z 
2025-01-10T13:28:40.3944670Z Packets:   ███████████████████████████▋                                                    172719/500000 [00:04<00:09, 33066.12it/s][A
2025-01-10T13:28:40.3944670Z 
2025-01-10T13:28:40.3944860Z Packets:   ████████████████████████████▏                                                   176101/500000 [00:04<00:09, 33272.56it/s][A
2025-01-10T13:28:40.3944870Z 
2025-01-10T13:28:40.3945080Z Packets:   ████████████████████████████▋                                                   179508/500000 [00:04<00:09, 33449.63it/s][A
2025-01-10T13:28:40.3945090Z 
2025-01-10T13:28:40.3945300Z Packets:   █████████████████████████████▎                                                  182890/500000 [00:04<00:09, 32734.62it/s][A
2025-01-10T13:28:40.3945300Z 
2025-01-10T13:28:40.3945500Z Packets:   █████████████████████████████▊                                                  186226/500000 [00:05<00:09, 32913.19it/s][A
2025-01-10T13:28:40.3945500Z 
2025-01-10T13:28:40.3945710Z Packets:   ██████████████████████████████▎                                                 189537/500000 [00:05<00:09, 32087.17it/s][A
2025-01-10T13:28:40.3945720Z 
2025-01-10T13:28:40.3945940Z Packets:   ██████████████████████████████▉                                                 193724/500000 [00:05<00:08, 34896.75it/s][A
2025-01-10T13:28:40.3945940Z 
2025-01-10T13:28:40.3946140Z Packets:   ███████████████████████████████▌                                                197256/500000 [00:05<00:08, 35019.00it/s][A
2025-01-10T13:28:40.3946140Z 
2025-01-10T13:28:40.3946360Z Packets:   ████████████████████████████████                                                200775/500000 [00:05<00:08, 34754.33it/s][A
2025-01-10T13:28:40.3946370Z 
2025-01-10T13:28:40.3946580Z Packets:   ████████████████████████████████▋                                               204263/500000 [00:05<00:08, 34559.47it/s][A
2025-01-10T13:28:40.3946580Z 
2025-01-10T13:28:40.3946780Z Packets:   █████████████████████████████████▎                                              207965/500000 [00:05<00:08, 35283.10it/s][A
2025-01-10T13:28:40.3946870Z 
2025-01-10T13:28:40.3947080Z Packets:   █████████████████████████████████▉                                              212173/500000 [00:05<00:07, 37293.03it/s][A
2025-01-10T13:28:40.3947080Z 
2025-01-10T13:28:40.3947330Z Packets:   ██████████████████████████████████▌                                             215911/500000 [00:05<00:07, 37000.81it/s][A
2025-01-10T13:28:40.3947340Z 
2025-01-10T13:28:40.3947590Z Packets:   ███████████████████████████████████▏                                            220252/500000 [00:05<00:07, 38896.78it/s][A
2025-01-10T13:28:40.3947590Z 
2025-01-10T13:28:40.3947800Z Packets:   ███████████████████████████████████▉                                            224452/500000 [00:06<00:06, 39817.89it/s][A
2025-01-10T13:28:40.3947810Z 
2025-01-10T13:28:40.3948010Z Packets:   ████████████████████████████████████▋                                           228923/500000 [00:06<00:06, 41271.70it/s][A
2025-01-10T13:28:40.3948300Z 
2025-01-10T13:28:40.3948590Z Packets:   █████████████████████████████████████▎                                          233055/500000 [00:06<00:06, 40895.56it/s][A
2025-01-10T13:28:40.3948590Z 
2025-01-10T13:28:40.3948820Z Packets:   █████████████████████████████████████▉                                          237149/500000 [00:06<00:06, 39298.42it/s][A
2025-01-10T13:28:40.3948830Z 
2025-01-10T13:28:40.3949050Z Packets:   ██████████████████████████████████████▋                                         241440/500000 [00:06<00:06, 40344.34it/s][A
2025-01-10T13:28:40.3949050Z 
2025-01-10T13:28:40.3949270Z Packets:   ███████████████████████████████████████▎                                        245489/500000 [00:06<00:06, 40177.52it/s][A
2025-01-10T13:28:40.3949270Z 
2025-01-10T13:28:40.3949500Z Packets:   ███████████████████████████████████████▉                                        249977/500000 [00:06<00:06, 41558.29it/s][A
2025-01-10T13:28:40.3949510Z 
2025-01-10T13:28:40.3949760Z Packets:   ████████████████████████████████████████▋                                       254615/500000 [00:06<00:05, 41491.46it/s][A
2025-01-10T13:28:40.3949770Z 
2025-01-10T13:28:40.3949990Z Packets:   █████████████████████████████████████████▍                                      258772/500000 [00:06<00:05, 40852.20it/s][A
2025-01-10T13:28:40.3949990Z 
2025-01-10T13:28:40.3950200Z Packets:   ██████████████████████████████████████████                                      263009/500000 [00:06<00:05, 41290.73it/s][A
2025-01-10T13:28:40.3950210Z 
2025-01-10T13:28:40.3950430Z Packets:   ██████████████████████████████████████████▋                                     267144/500000 [00:07<00:05, 41058.82it/s][A
2025-01-10T13:28:40.3950430Z 
2025-01-10T13:28:40.3950650Z Packets:   ███████████████████████████████████████████▍                                    271254/500000 [00:07<00:05, 39056.79it/s][A
2025-01-10T13:28:40.3950660Z 
2025-01-10T13:28:40.3951150Z Packets:   ████████████████████████████████████████████                                    275625/500000 [00:07<00:05, 40380.05it/s][A
2025-01-10T13:28:40.3951180Z 
2025-01-10T13:28:40.3951420Z Packets:   ████████████████████████████████████████████▊                                   279747/500000 [00:07<00:05, 40622.60it/s][A
2025-01-10T13:28:40.3951430Z 
2025-01-10T13:28:40.3951660Z Packets:   █████████████████████████████████████████████▍                                  283825/500000 [00:07<00:05, 38670.22it/s][A
2025-01-10T13:28:40.3951660Z 
2025-01-10T13:28:40.3951910Z Packets:   ██████████████████████████████████████████████                                  288105/500000 [00:07<00:05, 39843.79it/s][A
2025-01-10T13:28:40.3951910Z 
2025-01-10T13:28:40.3952140Z Packets:   ██████████████████████████████████████████████▋                                 292115/500000 [00:07<00:05, 36419.86it/s][A
2025-01-10T13:28:40.3952150Z 
2025-01-10T13:28:40.3952360Z Packets:   ███████████████████████████████████████████████▎                                295825/500000 [00:07<00:05, 34596.91it/s][A
2025-01-10T13:28:40.3952480Z 
2025-01-10T13:28:40.3952710Z Packets:   ███████████████████████████████████████████████▉                                299426/500000 [00:07<00:05, 34977.06it/s][A
2025-01-10T13:28:40.3952720Z 
2025-01-10T13:28:40.3952940Z Packets:   ████████████████████████████████████████████████▍                               302967/500000 [00:08<00:06, 30752.85it/s][A
2025-01-10T13:28:40.3952940Z 
2025-01-10T13:28:40.3953180Z Packets:   ████████████████████████████████████████████████▉                               306159/500000 [00:08<00:06, 31051.84it/s][A
2025-01-10T13:28:40.3953180Z 
2025-01-10T13:28:40.3953400Z Packets:   █████████████████████████████████████████████████▍                              309345/500000 [00:08<00:06, 27668.12it/s][A
2025-01-10T13:28:40.3953400Z 
2025-01-10T13:28:40.3953620Z Packets:   ██████████████████████████████████████████████████                              312863/500000 [00:08<00:06, 29574.90it/s][A
2025-01-10T13:28:40.3953700Z 
2025-01-10T13:28:40.3953930Z Packets:   ██████████████████████████████████████████████████▋                             316858/500000 [00:08<00:05, 32337.14it/s][A
2025-01-10T13:28:40.3953940Z 
2025-01-10T13:28:40.3954150Z Packets:   ███████████████████████████████████████████████████▏                            320245/500000 [00:08<00:05, 32757.29it/s][A
2025-01-10T13:28:40.3954160Z 
2025-01-10T13:28:40.3954400Z Packets:   ███████████████████████████████████████████████████▊                            323603/500000 [00:08<00:05, 31461.27it/s][A
2025-01-10T13:28:40.3954410Z 
2025-01-10T13:28:40.3954670Z Packets:   ████████████████████████████████████████████████████▍                           327521/500000 [00:08<00:05, 33603.67it/s][A
2025-01-10T13:28:40.3954680Z 
2025-01-10T13:28:40.3954920Z Packets:   █████████████████████████████████████████████████████                           331499/500000 [00:08<00:04, 35353.49it/s][A
2025-01-10T13:28:40.3954940Z 
2025-01-10T13:28:40.3955200Z Packets:   █████████████████████████████████████████████████████▌                          335088/500000 [00:09<00:04, 33585.29it/s][A
2025-01-10T13:28:40.3955210Z 
2025-01-10T13:28:40.3955460Z Packets:   ██████████████████████████████████████████████████████▏                         339057/500000 [00:09<00:04, 35294.15it/s][A
2025-01-10T13:28:40.3955470Z 
2025-01-10T13:28:40.3955700Z Packets:   ██████████████████████████████████████████████████████▊                         342635/500000 [00:09<00:04, 35383.46it/s][A
2025-01-10T13:28:40.3955710Z 
2025-01-10T13:28:40.3955930Z Packets:   ███████████████████████████████████████████████████████▍                        346208/500000 [00:09<00:04, 31502.71it/s][A
2025-01-10T13:28:40.3955940Z 
2025-01-10T13:28:40.3956160Z Packets:   ███████████████████████████████████████████████████████▉                        349602/500000 [00:09<00:04, 32157.88it/s][A
2025-01-10T13:28:40.3956170Z 
2025-01-10T13:28:40.3956400Z Packets:   ████████████████████████████████████████████████████████▍                       352894/500000 [00:09<00:04, 32160.62it/s][A
2025-01-10T13:28:40.3956490Z 
2025-01-10T13:28:40.3956730Z Packets:   ████████████████████████████████████████████████████████▉                       356163/500000 [00:09<00:04, 29314.24it/s][A
2025-01-10T13:28:40.3956740Z 
2025-01-10T13:28:40.3956960Z Packets:   █████████████████████████████████████████████████████████▍                      359172/500000 [00:09<00:04, 28828.17it/s][A
2025-01-10T13:28:40.3956960Z 
2025-01-10T13:28:40.3957200Z Packets:   ██████████████████████████████████████████████████████████                      362556/500000 [00:10<00:04, 30188.66it/s][A
2025-01-10T13:28:40.3957220Z 
2025-01-10T13:28:40.3957460Z Packets:   ██████████████████████████████████████████████████████████▌                     365625/500000 [00:10<00:04, 29827.27it/s][A
2025-01-10T13:28:40.3957470Z 
2025-01-10T13:28:40.3957730Z Packets:   ███████████████████████████████████████████████████████████                     369246/500000 [00:10<00:04, 31624.84it/s][A
2025-01-10T13:28:40.3957840Z 
2025-01-10T13:28:40.3958080Z Packets:   ███████████████████████████████████████████████████████████▋                    373147/500000 [00:10<00:03, 33746.02it/s][A
2025-01-10T13:28:40.3958080Z 
2025-01-10T13:28:40.3958310Z Packets:   ████████████████████████████████████████████████████████████▏                   376556/500000 [00:10<00:03, 33439.27it/s][A
2025-01-10T13:28:40.3958320Z 
2025-01-10T13:28:40.3958560Z Packets:   ████████████████████████████████████████████████████████████▊                   379924/500000 [00:10<00:03, 32825.55it/s][A
2025-01-10T13:28:40.3958570Z 
2025-01-10T13:28:40.3958810Z Packets:   █████████████████████████████████████████████████████████████▎                  383225/500000 [00:10<00:04, 28453.12it/s][A
2025-01-10T13:28:40.3958810Z 
2025-01-10T13:28:40.3959060Z Packets:   █████████████████████████████████████████████████████████████▊                  386713/500000 [00:10<00:03, 30144.72it/s][A
2025-01-10T13:28:40.3959150Z 
2025-01-10T13:28:40.3959400Z Packets:   ██████████████████████████████████████████████████████████████▍                 390437/500000 [00:10<00:03, 32085.06it/s][A
2025-01-10T13:28:40.3959400Z 
2025-01-10T13:28:40.3959750Z Packets:   ██████████████████████████████████████████████████████████████▉                 393735/500000 [00:10<00:03, 31332.42it/s][A
2025-01-10T13:28:40.3959760Z 
2025-01-10T13:28:40.3960020Z Packets:   ███████████████████████████████████████████████████████████████▋                397733/500000 [00:11<00:03, 33753.33it/s][A
2025-01-10T13:28:40.3960030Z 
2025-01-10T13:28:40.3960260Z Packets:   ████████████████████████████████████████████████████████████████▏               401170/500000 [00:11<00:02, 33622.13it/s][A
2025-01-10T13:28:40.3960270Z 
2025-01-10T13:28:40.3960510Z Packets:   ████████████████████████████████████████████████████████████████▋               404575/500000 [00:11<00:03, 31553.81it/s][A
2025-01-10T13:28:40.3960630Z 
2025-01-10T13:28:40.3960880Z Packets:   █████████████████████████████████████████████████████████████████▎              408201/500000 [00:11<00:02, 32856.53it/s][A
2025-01-10T13:28:40.3960890Z 
2025-01-10T13:28:40.3961160Z Packets:   █████████████████████████████████████████████████████████████████▉              411719/500000 [00:11<00:02, 33516.03it/s][A
2025-01-10T13:28:40.3961170Z 
2025-01-10T13:28:40.3961440Z Packets:   ██████████████████████████████████████████████████████████████████▍             415515/500000 [00:11<00:02, 34797.29it/s][A
2025-01-10T13:28:40.3961450Z 
2025-01-10T13:28:40.3961710Z Packets:   ███████████████████████████████████████████████████████████████████             419063/500000 [00:11<00:02, 34994.18it/s][A
2025-01-10T13:28:40.3961720Z 
2025-01-10T13:28:40.3961990Z Packets:   ███████████████████████████████████████████████████████████████████▌            422598/500000 [00:11<00:02, 35097.26it/s][A
2025-01-10T13:28:40.3962000Z 
2025-01-10T13:28:40.3962250Z Packets:   ████████████████████████████████████████████████████████████████████▏           426450/500000 [00:11<00:02, 36107.04it/s][A
2025-01-10T13:28:40.3962520Z 
2025-01-10T13:28:40.3962800Z Packets:   ████████████████████████████████████████████████████████████████████▊           430344/500000 [00:12<00:01, 36947.47it/s][A
2025-01-10T13:28:40.3962800Z 
2025-01-10T13:28:40.3963030Z Packets:   █████████████████████████████████████████████████████████████████████▍          434048/500000 [00:12<00:01, 34377.44it/s][A
2025-01-10T13:28:40.3963040Z 
2025-01-10T13:28:40.3963270Z Packets:   ██████████████████████████████████████████████████████████████████████          437716/500000 [00:12<00:01, 35028.30it/s][A
2025-01-10T13:28:40.3963270Z 
2025-01-10T13:28:40.3963500Z Packets:   ██████████████████████████████████████████████████████████████████████▋         441424/500000 [00:12<00:01, 35618.02it/s][A
2025-01-10T13:28:40.3963510Z 
2025-01-10T13:28:40.3963760Z Packets:   ███████████████████████████████████████████████████████████████████████▏        445012/500000 [00:12<00:01, 34020.03it/s][A
2025-01-10T13:28:40.3963790Z 
2025-01-10T13:28:40.3964030Z Packets:   ███████████████████████████████████████████████████████████████████████▊        448445/500000 [00:12<00:01, 32863.32it/s][A
2025-01-10T13:28:40.3964030Z 
2025-01-10T13:28:40.3964270Z Packets:   ████████████████████████████████████████████████████████████████████████▎       451757/500000 [00:12<00:01, 27835.98it/s][A
2025-01-10T13:28:40.3964270Z 
2025-01-10T13:28:40.3964530Z Packets:   ████████████████████████████████████████████████████████████████████████▊       455373/500000 [00:12<00:01, 29942.10it/s][A
2025-01-10T13:28:40.3964540Z 
2025-01-10T13:28:40.3964810Z Packets:   █████████████████████████████████████████████████████████████████████████▍      458618/500000 [00:12<00:01, 30606.17it/s][A
2025-01-10T13:28:40.3964830Z 
2025-01-10T13:28:40.3965090Z Packets:   █████████████████████████████████████████████████████████████████████████▉      461858/500000 [00:13<00:01, 31094.89it/s][A
2025-01-10T13:28:40.3965400Z 
2025-01-10T13:28:40.3965700Z Packets:   ██████████████████████████████████████████████████████████████████████████▍     465366/500000 [00:13<00:01, 31441.86it/s][A
2025-01-10T13:28:40.3965700Z 
2025-01-10T13:28:40.3965950Z Packets:   ██████████████████████████████████████████████████████████████████████████▉     468564/500000 [00:13<00:01, 29813.74it/s][A
2025-01-10T13:28:40.3965950Z 
2025-01-10T13:28:40.3966200Z Packets:   ███████████████████████████████████████████████████████████████████████████▌    472610/500000 [00:13<00:00, 32746.90it/s][A
2025-01-10T13:28:40.3966200Z 
2025-01-10T13:28:40.3966810Z Packets:   ████████████████████████████████████████████████████████████████████████████▏   475945/500000 [00:13<00:00, 32638.04it/s][A
2025-01-10T13:28:40.3966830Z 
2025-01-10T13:28:40.3967150Z Packets:   ████████████████████████████████████████████████████████████████████████████▊   479892/500000 [00:13<00:00, 34588.45it/s][A
2025-01-10T13:28:40.3967170Z 
2025-01-10T13:28:40.3967450Z Packets:   █████████████████████████████████████████████████████████████████████████████▎  483390/500000 [00:13<00:00, 32566.83it/s][A
2025-01-10T13:28:40.3967620Z 
2025-01-10T13:28:40.3967880Z Packets:   █████████████████████████████████████████████████████████████████████████████▉  487084/500000 [00:13<00:00, 33790.47it/s][A
2025-01-10T13:28:40.3967890Z 
2025-01-10T13:28:40.3968150Z Packets:   ██████████████████████████████████████████████████████████████████████████████▌ 491005/500000 [00:13<00:00, 35335.13it/s][A
2025-01-10T13:28:40.3968150Z 
2025-01-10T13:28:40.3968430Z Packets:   ███████████████████████████████████████████████████████████████████████████████▏494874/500000 [00:13<00:00, 36300.69it/s][A
2025-01-10T13:28:40.3968440Z 
2025-01-10T13:28:40.3968710Z Packets:   ███████████████████████████████████████████████████████████████████████████████▊498596/500000 [00:14<00:00, 36567.85it/s][A
2025-01-10T13:28:40.3968850Z Iterations:                                                                                17/? [06:13<00:00, 11.38s/it]
2025-01-10T13:28:40.3968950Z 
2025-01-10T13:28:40.3969200Z Packets:   ████████████████████████████████████████████████████████████████████████████████500000/500000 [00:20<00:00, 36567.85it/s][A
2025-01-10T13:28:40.3969340Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.3969490Z INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
2025-01-10T13:28:40.3969810Z 	Reading Atomic Data from /Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
2025-01-10T13:28:40.3970140Z INFO     tardis.io.atom_data.base:base.py:258 Reading Atom Data with: UUID = 6f7b09e887a311e7a06b246e96350010 MD5  = 864f1753714343c41f99cb065710cace 
2025-01-10T13:28:40.3970500Z INFO     tardis.io.atom_data.base:base.py:262 Non provided Atomic Data: synpp_refs, photoionization_data, yg_data, two_photon_data, linelist_atoms, linelist_molecules
2025-01-10T13:28:40.3970930Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:28:40.3971200Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:28:40.3971280Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:28:40.3971350Z 	Starting iteration 1 of 5
2025-01-10T13:28:40.3971440Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:28:40.3971500Z 	Luminosity emitted   = 8.104e+42 erg / s
2025-01-10T13:28:40.3971570Z 	Luminosity absorbed  = 2.674e+42 erg / s
2025-01-10T13:28:40.3971630Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3971640Z 
2025-01-10T13:28:40.3971710Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:28:40.3971770Z 	Plasma stratification:
2025-01-10T13:28:40.3971840Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:28:40.3971930Z 	Shell No.    t_rad    next_t_rad    w   next_w
2025-01-10T13:28:40.3972010Z 	0         9.97e+03 K  1.01e+04 K   0.4   0.449
2025-01-10T13:28:40.3972070Z 	5         9.89e+03 K  1.01e+04 K 0.211   0.201
2025-01-10T13:28:40.3972130Z 	10        9.82e+03 K     1e+04 K 0.143   0.129
2025-01-10T13:28:40.3972190Z 	15        9.75e+03 K  9.85e+03 K 0.105  0.0953
2025-01-10T13:28:40.3972190Z 
2025-01-10T13:28:40.3972260Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:28:40.3972320Z 	Current t_inner = 9974.969 K
2025-01-10T13:28:40.3972420Z 	Expected t_inner for next iteration = 10736.783 K
2025-01-10T13:28:40.3972430Z 
2025-01-10T13:28:40.3972500Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:28:40.3972560Z 	Starting iteration 2 of 5
2025-01-10T13:28:40.3972640Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:28:40.3972700Z 	Luminosity emitted   = 1.084e+43 erg / s
2025-01-10T13:28:40.3972780Z 	Luminosity absorbed  = 3.624e+42 erg / s
2025-01-10T13:28:40.3972870Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3972950Z 
2025-01-10T13:28:40.3973020Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:28:40.3973100Z 	Plasma stratification:
2025-01-10T13:28:40.3973180Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:28:40.3973260Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:28:40.3973350Z 	0         1.01e+04 K  1.05e+04 K  0.449   0.481
2025-01-10T13:28:40.3973420Z 	5         1.01e+04 K  1.06e+04 K  0.201   0.202
2025-01-10T13:28:40.3973490Z 	10           1e+04 K  1.04e+04 K  0.129   0.127
2025-01-10T13:28:40.3973560Z 	15        9.85e+03 K  1.02e+04 K 0.0953  0.0935
2025-01-10T13:28:40.3973560Z 
2025-01-10T13:28:40.3973640Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:28:40.3973710Z 	Current t_inner = 10736.783 K
2025-01-10T13:28:40.3973810Z 	Expected t_inner for next iteration = 10718.619 K
2025-01-10T13:28:40.3973810Z 
2025-01-10T13:28:40.3973910Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:28:40.3973970Z 	Starting iteration 3 of 5
2025-01-10T13:28:40.3974070Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:28:40.3974140Z 	Luminosity emitted   = 1.086e+43 erg / s
2025-01-10T13:28:40.3974210Z 	Luminosity absorbed  = 3.514e+42 erg / s
2025-01-10T13:28:40.3974280Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3974280Z 
2025-01-10T13:28:40.3974460Z INFO     tardis.simulation.base:base.py:260 Iteration converged 1/4 consecutive times.
2025-01-10T13:28:40.3974550Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:28:40.3974600Z 	Plasma stratification:
2025-01-10T13:28:40.3974670Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:28:40.3974750Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:28:40.3974810Z 	0         1.05e+04 K  1.07e+04 K  0.481   0.491
2025-01-10T13:28:40.3974880Z 	5         1.06e+04 K  1.09e+04 K  0.202   0.198
2025-01-10T13:28:40.3974940Z 	10        1.04e+04 K  1.07e+04 K  0.127   0.124
2025-01-10T13:28:40.3975000Z 	15        1.02e+04 K  1.04e+04 K 0.0935  0.0921
2025-01-10T13:28:40.3975010Z 
2025-01-10T13:28:40.3975090Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:28:40.3975240Z 	Current t_inner = 10718.619 K
2025-01-10T13:28:40.3975320Z 	Expected t_inner for next iteration = 10696.651 K
2025-01-10T13:28:40.3975320Z 
2025-01-10T13:28:40.3975400Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:28:40.3975460Z 	Starting iteration 4 of 5
2025-01-10T13:28:40.3975530Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:28:40.3975590Z 	Luminosity emitted   = 1.082e+43 erg / s
2025-01-10T13:28:40.3975660Z 	Luminosity absorbed  = 3.437e+42 erg / s
2025-01-10T13:28:40.3975720Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3975720Z 
2025-01-10T13:28:40.3975890Z INFO     tardis.simulation.base:base.py:260 Iteration converged 2/4 consecutive times.
2025-01-10T13:28:40.3975960Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:28:40.3976020Z 	Plasma stratification:
2025-01-10T13:28:40.3976100Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:28:40.3976200Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:28:40.3976280Z 	0         1.07e+04 K  1.09e+04 K  0.491    0.49
2025-01-10T13:28:40.3976350Z 	5         1.09e+04 K   1.1e+04 K  0.198   0.193
2025-01-10T13:28:40.3976430Z 	10        1.07e+04 K  1.08e+04 K  0.124   0.122
2025-01-10T13:28:40.3976500Z 	15        1.04e+04 K  1.05e+04 K 0.0921  0.0902
2025-01-10T13:28:40.3976510Z 
2025-01-10T13:28:40.3976600Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:28:40.3976660Z 	Current t_inner = 10696.651 K
2025-01-10T13:28:40.3976750Z 	Expected t_inner for next iteration = 10684.004 K
2025-01-10T13:28:40.3976760Z 
2025-01-10T13:28:40.3976840Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:28:40.3976900Z 	Simulation finished in 4 iterations 
2025-01-10T13:28:40.3976960Z 	Simulation took 13.12 s
2025-01-10T13:28:40.3976960Z 
2025-01-10T13:28:40.3977030Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:28:40.3977090Z 	Starting iteration 5 of 5
2025-01-10T13:28:40.3977230Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:28:40.3977300Z 	Luminosity emitted   = 1.074e+43 erg / s
2025-01-10T13:28:40.3977360Z 	Luminosity absorbed  = 3.447e+42 erg / s
2025-01-10T13:28:40.3977420Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.3977570Z ______________________ TestTransportSimple.test_spectrum _______________________
2025-01-10T13:28:40.3977580Z 
2025-01-10T13:28:40.3977740Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x144435ca0>
2025-01-10T13:28:40.3977880Z simulation = <tardis.simulation.base.Simulation object at 0x310bbda30>
2025-01-10T13:28:40.3977890Z 
2025-01-10T13:28:40.3977950Z     def test_spectrum(self, simulation):
2025-01-10T13:28:40.3978080Z         key = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:28:40.3978150Z         expected = self.get_expected_data(key)
2025-01-10T13:28:40.3978200Z     
2025-01-10T13:28:40.3978280Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.3978340Z     
2025-01-10T13:28:40.3978410Z >       assert_quantity_allclose(
2025-01-10T13:28:40.3978550Z             simulation.spectrum_solver.spectrum_real_packets.luminosity,
2025-01-10T13:28:40.3978610Z             luminosity,
2025-01-10T13:28:40.3978650Z         )
2025-01-10T13:28:40.3978650Z 
2025-01-10T13:28:40.3978720Z tardis/tests/test_tardis_full.py:81: 
2025-01-10T13:28:40.3978800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3979060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.3979120Z     np.testing.assert_allclose(
2025-01-10T13:28:40.3979210Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3979210Z 
2025-01-10T13:28:40.3979560Z args = (<function assert_allclose.<locals>.compare at 0x1575e9940>, array([1.41445923e+39, 1.75365002e+39, 1.41304405e+39, .....), array([1.47119190e+39, 1.69564189e+39, 1.35368464e+39, ...,
2025-01-10T13:28:40.3979910Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.3980110Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3980120Z 
2025-01-10T13:28:40.3980160Z     @wraps(func)
2025-01-10T13:28:40.3980220Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3980280Z         with self._recreate_cm():
2025-01-10T13:28:40.3980330Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3980400Z E           AssertionError: 
2025-01-10T13:28:40.3980490Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3980530Z E           
2025-01-10T13:28:40.3980630Z E           Mismatched elements: 4832 / 10000 (48.3%)
2025-01-10T13:28:40.3980740Z E           Max absolute difference among violations: 1.38672909e+39
2025-01-10T13:28:40.3980850Z E           Max relative difference among violations: 5.17890748
2025-01-10T13:28:40.3980980Z E            ACTUAL: array([1.414459e+39, 1.753650e+39, 1.413044e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.3981050Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3981180Z E            DESIRED: array([1.471192e+39, 1.695642e+39, 1.353685e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.3981250Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3981260Z 
2025-01-10T13:28:40.3981430Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3981580Z __________________ TestTransportSimple.test_virtual_spectrum ___________________
2025-01-10T13:28:40.3981580Z 
2025-01-10T13:28:40.3981750Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x144435f10>
2025-01-10T13:28:40.3981900Z simulation = <tardis.simulation.base.Simulation object at 0x310bbda30>
2025-01-10T13:28:40.3981900Z 
2025-01-10T13:28:40.3981980Z     def test_virtual_spectrum(self, simulation):
2025-01-10T13:28:40.3982120Z         key = "simulation/spectrum_solver/spectrum_virtual_packets/luminosity"
2025-01-10T13:28:40.3982500Z         expected = self.get_expected_data(key)
2025-01-10T13:28:40.3982550Z     
2025-01-10T13:28:40.3982630Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.3982680Z     
2025-01-10T13:28:40.3982740Z >       assert_quantity_allclose(
2025-01-10T13:28:40.3982890Z             simulation.spectrum_solver.spectrum_virtual_packets.luminosity,
2025-01-10T13:28:40.3982940Z             luminosity,
2025-01-10T13:28:40.3982980Z         )
2025-01-10T13:28:40.3982990Z 
2025-01-10T13:28:40.3983050Z tardis/tests/test_tardis_full.py:92: 
2025-01-10T13:28:40.3983160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3983440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.3983510Z     np.testing.assert_allclose(
2025-01-10T13:28:40.3983620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3983630Z 
2025-01-10T13:28:40.3984010Z args = (<function assert_allclose.<locals>.compare at 0x32002e480>, array([1.45484259e+39, 1.36306291e+39, 1.38939833e+39, .....), array([1.44033177e+39, 1.35611403e+39, 1.39755698e+39, ...,
2025-01-10T13:28:40.3984100Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.3984300Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3984300Z 
2025-01-10T13:28:40.3984350Z     @wraps(func)
2025-01-10T13:28:40.3984410Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3984480Z         with self._recreate_cm():
2025-01-10T13:28:40.3984550Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3984600Z E           AssertionError: 
2025-01-10T13:28:40.3984700Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3984760Z E           
2025-01-10T13:28:40.3984850Z E           Mismatched elements: 5933 / 10000 (59.3%)
2025-01-10T13:28:40.3985090Z E           Max absolute difference among violations: 5.26760031e+38
2025-01-10T13:28:40.3985210Z E           Max relative difference among violations: 23978.84555943
2025-01-10T13:28:40.3985360Z E            ACTUAL: array([1.454843e+39, 1.363063e+39, 1.389398e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.3988970Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3989170Z E            DESIRED: array([1.440332e+39, 1.356114e+39, 1.397557e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.3989240Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3989240Z 
2025-01-10T13:28:40.3989420Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3989660Z ___ TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-downbranch] ____
2025-01-10T13:28:40.3989670Z 
2025-01-10T13:28:40.3989920Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144436900>
2025-01-10T13:28:40.3990080Z simulation = <tardis.simulation.base.Simulation object at 0x16fffc740>
2025-01-10T13:28:40.3990250Z request = <FixtureRequest for <Function test_j_blue_estimators[-1-downbranch]>>
2025-01-10T13:28:40.3990250Z 
2025-01-10T13:28:40.3990340Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:28:40.3990440Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.3990500Z         j_blue_estimator = (
2025-01-10T13:28:40.3990690Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:28:40.3990750Z         )
2025-01-10T13:28:40.3990880Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:28:40.3991010Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:28:40.3991020Z 
2025-01-10T13:28:40.3991140Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:28:40.3991230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3991520Z 
2025-01-10T13:28:40.3991790Z args = (<function assert_allclose.<locals>.compare at 0x17fba1760>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3991850Z        [0., 0., 0.,.....,
2025-01-10T13:28:40.3991920Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3991990Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3992050Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:28:40.3992260Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3992270Z 
2025-01-10T13:28:40.3992320Z     @wraps(func)
2025-01-10T13:28:40.3992390Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3992450Z         with self._recreate_cm():
2025-01-10T13:28:40.3992510Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3992570Z E           AssertionError: 
2025-01-10T13:28:40.3992660Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3992720Z E           
2025-01-10T13:28:40.3992810Z E           Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:28:40.3992950Z E           Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:28:40.3993050Z E           Max relative difference among violations: 8.35741234
2025-01-10T13:28:40.3993120Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3993190Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3993250Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.3993330Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3993400Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.3993480Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.3993480Z 
2025-01-10T13:28:40.3993660Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3993840Z ________ TestTransportSimpleFormalIntegral.test_spectrum[-1-downbranch] ________
2025-01-10T13:28:40.3993850Z 
2025-01-10T13:28:40.3994190Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144436f60>
2025-01-10T13:28:40.3994360Z simulation = <tardis.simulation.base.Simulation object at 0x16fffc740>
2025-01-10T13:28:40.3994510Z request = <FixtureRequest for <Function test_spectrum[-1-downbranch]>>
2025-01-10T13:28:40.3994510Z 
2025-01-10T13:28:40.3994620Z     def test_spectrum(self, simulation, request):
2025-01-10T13:28:40.3994700Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.3994860Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:28:40.3994990Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:28:40.3995080Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.3995160Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:28:40.3995170Z 
2025-01-10T13:28:40.3995280Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:28:40.3995410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3996150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.3996250Z     np.testing.assert_allclose(
2025-01-10T13:28:40.3996360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.3996360Z 
2025-01-10T13:28:40.3996710Z args = (<function assert_allclose.<locals>.compare at 0x30f7c0860>, array([2.01862731e+39, 1.44100026e+39, 1.28363764e+39, .....), array([2.16554068e+39, 1.29492551e+39, 1.28560928e+39, ...,
2025-01-10T13:28:40.3996790Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.3996990Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.3997000Z 
2025-01-10T13:28:40.3997040Z     @wraps(func)
2025-01-10T13:28:40.3997190Z     def inner(*args, **kwds):
2025-01-10T13:28:40.3997260Z         with self._recreate_cm():
2025-01-10T13:28:40.3997320Z >           return func(*args, **kwds)
2025-01-10T13:28:40.3997370Z E           AssertionError: 
2025-01-10T13:28:40.3997450Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.3997490Z E           
2025-01-10T13:28:40.3997570Z E           Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:28:40.3997670Z E           Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:28:40.3997770Z E           Max relative difference among violations: 5.83764686
2025-01-10T13:28:40.3997890Z E            ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.3997950Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3998080Z E            DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.3998160Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.3998170Z 
2025-01-10T13:28:40.3998330Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.3998520Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-downbranch] ___
2025-01-10T13:28:40.3998520Z 
2025-01-10T13:28:40.4000500Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x1444376b0>
2025-01-10T13:28:40.4000700Z simulation = <tardis.simulation.base.Simulation object at 0x16fffc740>
2025-01-10T13:28:40.4000870Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-downbranch]>>
2025-01-10T13:28:40.4000880Z 
2025-01-10T13:28:40.4000990Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:28:40.4001070Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4001220Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:28:40.4001340Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:28:40.4003250Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.4003490Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:28:40.4003510Z 
2025-01-10T13:28:40.4003790Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:28:40.4004020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4004760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.4004960Z     np.testing.assert_allclose(
2025-01-10T13:28:40.4005240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4005260Z 
2025-01-10T13:28:40.4006280Z args = (<function assert_allclose.<locals>.compare at 0x145643100>, array([1.54178275e+39, 1.54564497e+39, 1.54031038e+39, .....), array([1.55114238e+39, 1.55522613e+39, 1.54887955e+39, ...,
2025-01-10T13:28:40.4006490Z        2.25671263e+31, 2.27943572e+31, 2.24394350e+31]))
2025-01-10T13:28:40.4007110Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4007120Z 
2025-01-10T13:28:40.4007290Z     @wraps(func)
2025-01-10T13:28:40.4007450Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4007620Z         with self._recreate_cm():
2025-01-10T13:28:40.4007850Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4008200Z E           AssertionError: 
2025-01-10T13:28:40.4008390Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4008450Z E           
2025-01-10T13:28:40.4008530Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:28:40.4008660Z E           Max absolute difference among violations: 5.00661745e+37
2025-01-10T13:28:40.4008770Z E           Max relative difference among violations: 6.79985816
2025-01-10T13:28:40.4008930Z E            ACTUAL: array([1.541783e+39, 1.545645e+39, 1.540310e+39, ..., 2.274707e+31,
2025-01-10T13:28:40.4009130Z E                  2.292907e+31, 2.257206e+31])
2025-01-10T13:28:40.4009270Z E            DESIRED: array([1.551142e+39, 1.555226e+39, 1.548880e+39, ..., 2.256713e+31,
2025-01-10T13:28:40.4009330Z E                  2.279436e+31, 2.243943e+31])
2025-01-10T13:28:40.4009330Z 
2025-01-10T13:28:40.4009490Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4009630Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:28:40.4009630Z 
2025-01-10T13:28:40.4009630Z 
2025-01-10T13:28:40.4010090Z Packets:   ████████████████████████████████████████████████████████████████████████████████100000/100000 [00:11<00:00, 126612.47it/s][A
2025-01-10T13:28:40.4010290Z ____ TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-macroatom] ____
2025-01-10T13:28:40.4010300Z 
2025-01-10T13:28:40.4010570Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x1444370e0>
2025-01-10T13:28:40.4010760Z simulation = <tardis.simulation.base.Simulation object at 0x158ff2810>
2025-01-10T13:28:40.4010940Z request = <FixtureRequest for <Function test_j_blue_estimators[-1-macroatom]>>
2025-01-10T13:28:40.4010950Z 
2025-01-10T13:28:40.4011070Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:28:40.4011180Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4011250Z         j_blue_estimator = (
2025-01-10T13:28:40.4011420Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:28:40.4011470Z         )
2025-01-10T13:28:40.4011600Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:28:40.4021850Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:28:40.4021890Z 
2025-01-10T13:28:40.4022090Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:28:40.4022190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4022210Z 
2025-01-10T13:28:40.4022820Z args = (<function assert_allclose.<locals>.compare at 0x159d66a20>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4022870Z        [0., 0., 0.,.....,
2025-01-10T13:28:40.4022930Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4022980Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4023040Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:28:40.4023250Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4023250Z 
2025-01-10T13:28:40.4023300Z     @wraps(func)
2025-01-10T13:28:40.4023360Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4023420Z         with self._recreate_cm():
2025-01-10T13:28:40.4023490Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4023550Z E           AssertionError: 
2025-01-10T13:28:40.4023630Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4023680Z E           
2025-01-10T13:28:40.4023780Z E           Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:28:40.4023900Z E           Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:28:40.4024000Z E           Max relative difference among violations: 4.08461732
2025-01-10T13:28:40.4024080Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4024140Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4024210Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.4024290Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4024350Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4024420Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.4024420Z 
2025-01-10T13:28:40.4024590Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4024760Z ________ TestTransportSimpleFormalIntegral.test_spectrum[-1-macroatom] _________
2025-01-10T13:28:40.4025030Z 
2025-01-10T13:28:40.4025290Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144437860>
2025-01-10T13:28:40.4025970Z simulation = <tardis.simulation.base.Simulation object at 0x158ff2810>
2025-01-10T13:28:40.4026540Z request = <FixtureRequest for <Function test_spectrum[-1-macroatom]>>
2025-01-10T13:28:40.4026570Z 
2025-01-10T13:28:40.4026820Z     def test_spectrum(self, simulation, request):
2025-01-10T13:28:40.4027030Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4027460Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:28:40.4027790Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:28:40.4028030Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.4028360Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:28:40.4028380Z 
2025-01-10T13:28:40.4028660Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:28:40.4029020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4029420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.4029490Z     np.testing.assert_allclose(
2025-01-10T13:28:40.4029590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4029600Z 
2025-01-10T13:28:40.4030060Z args = (<function assert_allclose.<locals>.compare at 0x159d66980>, array([1.74566518e+39, 1.44733560e+39, 1.29388426e+39, .....), array([1.74559473e+39, 1.44727718e+39, 1.29383198e+39, ...,
2025-01-10T13:28:40.4030180Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4030390Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4030390Z 
2025-01-10T13:28:40.4030440Z     @wraps(func)
2025-01-10T13:28:40.4030520Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4030780Z         with self._recreate_cm():
2025-01-10T13:28:40.4030860Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4030910Z E           AssertionError: 
2025-01-10T13:28:40.4030990Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4031040Z E           
2025-01-10T13:28:40.4031110Z E           Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:28:40.4031220Z E           Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:28:40.4031310Z E           Max relative difference among violations: 3.08310014
2025-01-10T13:28:40.4031450Z E            ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.4031510Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4031650Z E            DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.4031710Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4031710Z 
2025-01-10T13:28:40.4031890Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4032210Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-macroatom] ___
2025-01-10T13:28:40.4032230Z 
2025-01-10T13:28:40.4032520Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144437e90>
2025-01-10T13:28:40.4032680Z simulation = <tardis.simulation.base.Simulation object at 0x158ff2810>
2025-01-10T13:28:40.4032830Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-macroatom]>>
2025-01-10T13:28:40.4032840Z 
2025-01-10T13:28:40.4032960Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:28:40.4033040Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4033180Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:28:40.4033320Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:28:40.4033550Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.4033640Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:28:40.4033650Z 
2025-01-10T13:28:40.4033750Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:28:40.4033840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4034260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.4034620Z     np.testing.assert_allclose(
2025-01-10T13:28:40.4034860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4034870Z 
2025-01-10T13:28:40.4035880Z args = (<function assert_allclose.<locals>.compare at 0x313dad3a0>, array([1.54634964e+39, 1.55739996e+39, 1.54657082e+39, .....), array([1.54556181e+39, 1.55660766e+39, 1.54591210e+39, ...,
2025-01-10T13:28:40.4036120Z        1.35260736e+31, 1.33049749e+31, 1.29446216e+31]))
2025-01-10T13:28:40.4036940Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4036980Z 
2025-01-10T13:28:40.4037160Z     @wraps(func)
2025-01-10T13:28:40.4037350Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4037560Z         with self._recreate_cm():
2025-01-10T13:28:40.4037820Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4037920Z E           AssertionError: 
2025-01-10T13:28:40.4038010Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4038060Z E           
2025-01-10T13:28:40.4038140Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:28:40.4038240Z E           Max absolute difference among violations: 2.90101642e+37
2025-01-10T13:28:40.4038340Z E           Max relative difference among violations: 96.4428449
2025-01-10T13:28:40.4038470Z E            ACTUAL: array([1.546350e+39, 1.557400e+39, 1.546571e+39, ..., 1.400403e+31,
2025-01-10T13:28:40.4038550Z E                  1.375141e+31, 1.337928e+31])
2025-01-10T13:28:40.4038850Z E            DESIRED: array([1.545562e+39, 1.556608e+39, 1.545912e+39, ..., 1.352607e+31,
2025-01-10T13:28:40.4038910Z E                  1.330497e+31, 1.294462e+31])
2025-01-10T13:28:40.4038910Z 
2025-01-10T13:28:40.4039080Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4039260Z ____ TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-macroatom] ____
2025-01-10T13:28:40.4039260Z 
2025-01-10T13:28:40.4040120Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144437380>
2025-01-10T13:28:40.4040300Z simulation = <tardis.simulation.base.Simulation object at 0x158d6eba0>
2025-01-10T13:28:40.4040450Z request = <FixtureRequest for <Function test_j_blue_estimators[30-macroatom]>>
2025-01-10T13:28:40.4040450Z 
2025-01-10T13:28:40.4040570Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:28:40.4040660Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4040960Z         j_blue_estimator = (
2025-01-10T13:28:40.4041470Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:28:40.4041650Z         )
2025-01-10T13:28:40.4042090Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:28:40.4042240Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:28:40.4042240Z 
2025-01-10T13:28:40.4042350Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:28:40.4042450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4042460Z 
2025-01-10T13:28:40.4042670Z args = (<function assert_allclose.<locals>.compare at 0x159d66d40>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4042710Z        [0., 0., 0.,.....,
2025-01-10T13:28:40.4042780Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4042830Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4043070Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:28:40.4043320Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4043320Z 
2025-01-10T13:28:40.4043380Z     @wraps(func)
2025-01-10T13:28:40.4043460Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4043530Z         with self._recreate_cm():
2025-01-10T13:28:40.4043590Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4043650Z E           AssertionError: 
2025-01-10T13:28:40.4043730Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4043780Z E           
2025-01-10T13:28:40.4043860Z E           Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:28:40.4043970Z E           Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:28:40.4044070Z E           Max relative difference among violations: 4.08461732
2025-01-10T13:28:40.4044150Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4044220Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4044280Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.4044370Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4044450Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4044530Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.4044540Z 
2025-01-10T13:28:40.4044700Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4044880Z ________ TestTransportSimpleFormalIntegral.test_spectrum[30-macroatom] _________
2025-01-10T13:28:40.4044880Z 
2025-01-10T13:28:40.4045130Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144437aa0>
2025-01-10T13:28:40.4045280Z simulation = <tardis.simulation.base.Simulation object at 0x158d6eba0>
2025-01-10T13:28:40.4045410Z request = <FixtureRequest for <Function test_spectrum[30-macroatom]>>
2025-01-10T13:28:40.4045510Z 
2025-01-10T13:28:40.4045590Z     def test_spectrum(self, simulation, request):
2025-01-10T13:28:40.4045670Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4045820Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:28:40.4046140Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:28:40.4046590Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.4046740Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:28:40.4046740Z 
2025-01-10T13:28:40.4046850Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:28:40.4046950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4047220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.4047300Z     np.testing.assert_allclose(
2025-01-10T13:28:40.4047390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4047400Z 
2025-01-10T13:28:40.4047770Z args = (<function assert_allclose.<locals>.compare at 0x31aa740e0>, array([1.74566518e+39, 1.44733560e+39, 1.29388426e+39, .....), array([1.74559473e+39, 1.44727718e+39, 1.29383198e+39, ...,
2025-01-10T13:28:40.4047860Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4048060Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4048060Z 
2025-01-10T13:28:40.4048110Z     @wraps(func)
2025-01-10T13:28:40.4048170Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4048220Z         with self._recreate_cm():
2025-01-10T13:28:40.4048280Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4048340Z E           AssertionError: 
2025-01-10T13:28:40.4048410Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4048570Z E           
2025-01-10T13:28:40.4048640Z E           Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:28:40.4048750Z E           Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:28:40.4048850Z E           Max relative difference among violations: 3.08310014
2025-01-10T13:28:40.4048980Z E            ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.4049040Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4049170Z E            DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.4049230Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4049240Z 
2025-01-10T13:28:40.4049390Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4049580Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-macroatom] ___
2025-01-10T13:28:40.4049590Z 
2025-01-10T13:28:40.4049850Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144450050>
2025-01-10T13:28:40.4050030Z simulation = <tardis.simulation.base.Simulation object at 0x158d6eba0>
2025-01-10T13:28:40.4050220Z request = <FixtureRequest for <Function test_spectrum_integrated[30-macroatom]>>
2025-01-10T13:28:40.4050230Z 
2025-01-10T13:28:40.4050360Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:28:40.4050470Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4050640Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:28:40.4050800Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:28:40.4050900Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.4051010Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:28:40.4051010Z 
2025-01-10T13:28:40.4051150Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:28:40.4051260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4051860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.4051950Z     np.testing.assert_allclose(
2025-01-10T13:28:40.4052050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4052060Z 
2025-01-10T13:28:40.4052410Z args = (<function assert_allclose.<locals>.compare at 0x159d66d40>, array([1.54506418e+39, 1.55336544e+39, 1.54364274e+39, .....), array([1.54421084e+39, 1.55253343e+39, 1.54295780e+39, ...,
2025-01-10T13:28:40.4052490Z        1.27325829e+31, 1.26097974e+31, 1.22258748e+31]))
2025-01-10T13:28:40.4052770Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4052790Z 
2025-01-10T13:28:40.4052850Z     @wraps(func)
2025-01-10T13:28:40.4052910Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4052970Z         with self._recreate_cm():
2025-01-10T13:28:40.4053050Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4053130Z E           AssertionError: 
2025-01-10T13:28:40.4053230Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4053280Z E           
2025-01-10T13:28:40.4053350Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:28:40.4053460Z E           Max absolute difference among violations: 2.99183385e+37
2025-01-10T13:28:40.4053560Z E           Max relative difference among violations: 98.22574798
2025-01-10T13:28:40.4053700Z E            ACTUAL: array([1.545064e+39, 1.553365e+39, 1.543643e+39, ..., 1.222961e+31,
2025-01-10T13:28:40.4053780Z E                  1.193005e+31, 1.164854e+31])
2025-01-10T13:28:40.4053910Z E            DESIRED: array([1.544211e+39, 1.552533e+39, 1.542958e+39, ..., 1.273258e+31,
2025-01-10T13:28:40.4053970Z E                  1.260980e+31, 1.222587e+31])
2025-01-10T13:28:40.4053970Z 
2025-01-10T13:28:40.4054130Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4054720Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:28:40.4054730Z 
2025-01-10T13:28:40.4054730Z 
2025-01-10T13:28:40.4055210Z Packets:   ████████████████████████████████████████████████████████████████████████████████100000/100000 [00:17<00:00, 110331.86it/s][A
2025-01-10T13:28:40.4055390Z ___ TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-downbranch] ____
2025-01-10T13:28:40.4055400Z 
2025-01-10T13:28:40.4055630Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144437290>
2025-01-10T13:28:40.4055920Z simulation = <tardis.simulation.base.Simulation object at 0x310d15dc0>
2025-01-10T13:28:40.4056080Z request = <FixtureRequest for <Function test_j_blue_estimators[30-downbranch]>>
2025-01-10T13:28:40.4056080Z 
2025-01-10T13:28:40.4056590Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:28:40.4058100Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4058930Z         j_blue_estimator = (
2025-01-10T13:28:40.4059320Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:28:40.4059380Z         )
2025-01-10T13:28:40.4059490Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:28:40.4059580Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:28:40.4059580Z 
2025-01-10T13:28:40.4059680Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:28:40.4059770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4059780Z 
2025-01-10T13:28:40.4060130Z args = (<function assert_allclose.<locals>.compare at 0x304f45bc0>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4060190Z        [0., 0., 0.,.....,
2025-01-10T13:28:40.4060240Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4060290Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4060360Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:28:40.4060880Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4060890Z 
2025-01-10T13:28:40.4060950Z     @wraps(func)
2025-01-10T13:28:40.4061020Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4061080Z         with self._recreate_cm():
2025-01-10T13:28:40.4061140Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4061200Z E           AssertionError: 
2025-01-10T13:28:40.4061280Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4061350Z E           
2025-01-10T13:28:40.4061560Z E           Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:28:40.4061690Z E           Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:28:40.4061800Z E           Max relative difference among violations: 8.35741234
2025-01-10T13:28:40.4061880Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4061940Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4062030Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.4062250Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4062320Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.4062380Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.4062380Z 
2025-01-10T13:28:40.4062540Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4062710Z ________ TestTransportSimpleFormalIntegral.test_spectrum[30-downbranch] ________
2025-01-10T13:28:40.4062710Z 
2025-01-10T13:28:40.4062970Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x1444379e0>
2025-01-10T13:28:40.4063120Z simulation = <tardis.simulation.base.Simulation object at 0x310d15dc0>
2025-01-10T13:28:40.4063260Z request = <FixtureRequest for <Function test_spectrum[30-downbranch]>>
2025-01-10T13:28:40.4063360Z 
2025-01-10T13:28:40.4063450Z     def test_spectrum(self, simulation, request):
2025-01-10T13:28:40.4063530Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4063710Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:28:40.4064000Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:28:40.4064080Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.4064170Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:28:40.4064170Z 
2025-01-10T13:28:40.4064270Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:28:40.4064820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4065110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.4065180Z     np.testing.assert_allclose(
2025-01-10T13:28:40.4065270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4065280Z 
2025-01-10T13:28:40.4065790Z args = (<function assert_allclose.<locals>.compare at 0x157713ce0>, array([2.01862731e+39, 1.44100026e+39, 1.28363764e+39, .....), array([2.16554068e+39, 1.29492551e+39, 1.28560928e+39, ...,
2025-01-10T13:28:40.4065880Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4067050Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4067060Z 
2025-01-10T13:28:40.4067150Z     @wraps(func)
2025-01-10T13:28:40.4067210Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4067270Z         with self._recreate_cm():
2025-01-10T13:28:40.4067350Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4067550Z E           AssertionError: 
2025-01-10T13:28:40.4067640Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4067680Z E           
2025-01-10T13:28:40.4067760Z E           Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:28:40.4068130Z E           Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:28:40.4068340Z E           Max relative difference among violations: 5.83764686
2025-01-10T13:28:40.4068510Z E            ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.4068590Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4068760Z E            DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.4068830Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4068830Z 
2025-01-10T13:28:40.4069000Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4069200Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-downbranch] ___
2025-01-10T13:28:40.4069210Z 
2025-01-10T13:28:40.4069490Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x144437fe0>
2025-01-10T13:28:40.4069650Z simulation = <tardis.simulation.base.Simulation object at 0x310d15dc0>
2025-01-10T13:28:40.4069810Z request = <FixtureRequest for <Function test_spectrum_integrated[30-downbranch]>>
2025-01-10T13:28:40.4069810Z 
2025-01-10T13:28:40.4069930Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:28:40.4070000Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4070170Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:28:40.4070320Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:28:40.4070400Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:28:40.4070490Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:28:40.4070490Z 
2025-01-10T13:28:40.4070590Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:28:40.4070680Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4071120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:28:40.4071220Z     np.testing.assert_allclose(
2025-01-10T13:28:40.4071330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4071340Z 
2025-01-10T13:28:40.4071720Z args = (<function assert_allclose.<locals>.compare at 0x1577122a0>, array([1.54059874e+39, 1.54119479e+39, 1.53707604e+39, .....), array([1.54917411e+39, 1.55043938e+39, 1.54507053e+39, ...,
2025-01-10T13:28:40.4071800Z        2.08252810e+31, 2.08867593e+31, 2.06027793e+31]))
2025-01-10T13:28:40.4072030Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4072030Z 
2025-01-10T13:28:40.4072080Z     @wraps(func)
2025-01-10T13:28:40.4072140Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4072200Z         with self._recreate_cm():
2025-01-10T13:28:40.4072270Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4072350Z E           AssertionError: 
2025-01-10T13:28:40.4072450Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4072510Z E           
2025-01-10T13:28:40.4072600Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:28:40.4072720Z E           Max absolute difference among violations: 5.0153284e+37
2025-01-10T13:28:40.4072820Z E           Max relative difference among violations: 5.96359613
2025-01-10T13:28:40.4072960Z E            ACTUAL: array([1.540599e+39, 1.541195e+39, 1.537076e+39, ..., 2.120497e+31,
2025-01-10T13:28:40.4073030Z E                  2.124305e+31, 2.101081e+31])
2025-01-10T13:28:40.4073180Z E            DESIRED: array([1.549174e+39, 1.550439e+39, 1.545071e+39, ..., 2.082528e+31,
2025-01-10T13:28:40.4073250Z E                  2.088676e+31, 2.060278e+31])
2025-01-10T13:28:40.4073250Z 
2025-01-10T13:28:40.4073440Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4073680Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:28:40.4073690Z 
2025-01-10T13:28:40.4073690Z 
2025-01-10T13:28:40.4074150Z Packets:   ████████████████████████████████████████████████████████████████████████████████100000/100000 [00:14<00:00, 96568.88it/s][A
2025-01-10T13:28:40.4074290Z __________________________ test_montecarlo_main_loop ___________________________
2025-01-10T13:28:40.4074290Z 
2025-01-10T13:28:40.4074860Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:28:40.4075620Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x31456aff0>
2025-01-10T13:28:40.4076570Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:28:40.4080850Z 
2025-01-10T13:28:40.4081000Z     def test_montecarlo_main_loop(
2025-01-10T13:28:40.4081080Z         montecarlo_main_loop_config,
2025-01-10T13:28:40.4081140Z         regression_data,
2025-01-10T13:28:40.4081190Z         atomic_dataset,
2025-01-10T13:28:40.4081250Z     ):
2025-01-10T13:28:40.4081360Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:28:40.4081490Z         montecarlo_main_loop_simulation = Simulation.from_config(
2025-01-10T13:28:40.4081560Z             montecarlo_main_loop_config,
2025-01-10T13:28:40.4081620Z             atom_data=atomic_dataset,
2025-01-10T13:28:40.4081690Z             virtual_packet_logging=False,
2025-01-10T13:28:40.4081750Z             legacy_mode_enabled=True,
2025-01-10T13:28:40.4081800Z         )
2025-01-10T13:28:40.4081910Z         montecarlo_main_loop_simulation.run_convergence()
2025-01-10T13:28:40.4082000Z         montecarlo_main_loop_simulation.run_final()
2025-01-10T13:28:40.4082220Z     
2025-01-10T13:28:40.4082330Z         expected_hdf_store = regression_data.sync_hdf_store(
2025-01-10T13:28:40.4082420Z             montecarlo_main_loop_simulation
2025-01-10T13:28:40.4082470Z         )
2025-01-10T13:28:40.4082510Z     
2025-01-10T13:28:40.4082580Z         # Load compare data from refdata
2025-01-10T13:28:40.4082630Z     
2025-01-10T13:28:40.4082690Z         expected_nu = expected_hdf_store[
2025-01-10T13:28:40.4082790Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:28:40.4082830Z         ]
2025-01-10T13:28:40.4082900Z         expected_energy = expected_hdf_store[
2025-01-10T13:28:40.4083000Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:28:40.4083040Z         ]
2025-01-10T13:28:40.4083130Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:28:40.4083240Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:28:40.4083280Z         ]
2025-01-10T13:28:40.4083360Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:28:40.4083470Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:28:40.4083510Z         ]
2025-01-10T13:28:40.4083570Z         expected_hdf_store.close()
2025-01-10T13:28:40.4083730Z         transport_state = montecarlo_main_loop_simulation.transport.transport_state
2025-01-10T13:28:40.4083860Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:28:40.4083970Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:28:40.4084030Z         actual_nu_bar_estimator = (
2025-01-10T13:28:40.4084150Z             transport_state.radfield_mc_estimators.nu_bar_estimator
2025-01-10T13:28:40.4084210Z         )
2025-01-10T13:28:40.4084370Z         actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
2025-01-10T13:28:40.4084420Z     
2025-01-10T13:28:40.4084470Z         # Compare
2025-01-10T13:28:40.4084520Z >       npt.assert_allclose(
2025-01-10T13:28:40.4084650Z             actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-13
2025-01-10T13:28:40.4084990Z         )
2025-01-10T13:28:40.4084990Z 
2025-01-10T13:28:40.4085160Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:57: 
2025-01-10T13:28:40.4085280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4085290Z 
2025-01-10T13:28:40.4085680Z args = (<function assert_allclose.<locals>.compare at 0x1574bbd80>, array([9.40997647e+28, 8.06632443e+28, 7.20256533e+28, 6.....88449508e+28, 3.76156653e+28, 3.64401717e+28,
2025-01-10T13:28:40.4086090Z        3.53517538e+28, 3.45355503e+28, 3.34541304e+28, 3.26838651e+28]))
2025-01-10T13:28:40.4086760Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-13, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4086790Z 
2025-01-10T13:28:40.4086930Z     @wraps(func)
2025-01-10T13:28:40.4087090Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4087280Z         with self._recreate_cm():
2025-01-10T13:28:40.4087470Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4087630Z E           AssertionError: 
2025-01-10T13:28:40.4087910Z E           Not equal to tolerance rtol=1e-13, atol=0
2025-01-10T13:28:40.4088050Z E           
2025-01-10T13:28:40.4088240Z E           Mismatched elements: 20 / 20 (100%)
2025-01-10T13:28:40.4088520Z E           Max absolute difference among violations: 2.25821059e+25
2025-01-10T13:28:40.4088790Z E           Max relative difference among violations: 0.00054397
2025-01-10T13:28:40.4089140Z E            ACTUAL: array([9.409976e+28, 8.066324e+28, 7.202565e+28, 6.545908e+28,
2025-01-10T13:28:40.4089380Z E                  6.032330e+28, 5.614178e+28, 5.250313e+28, 4.984748e+28,
2025-01-10T13:28:40.4089630Z E                  4.725851e+28, 4.508107e+28, 4.318094e+28, 4.149110e+28,...
2025-01-10T13:28:40.4089970Z E            DESIRED: array([9.408704e+28, 8.067118e+28, 7.202414e+28, 6.547518e+28,
2025-01-10T13:28:40.4096160Z E                  6.033670e+28, 5.613552e+28, 5.249857e+28, 4.984256e+28,
2025-01-10T13:28:40.4096320Z E                  4.726016e+28, 4.509481e+28, 4.319969e+28, 4.151368e+28,...
2025-01-10T13:28:40.4096330Z 
2025-01-10T13:28:40.4096480Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4096600Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:28:40.4096940Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:28:40.4097290Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:28:40.4097430Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4097590Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:28:40.4097720Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4097780Z 	
2025-01-10T13:28:40.4097850Z 	Simulation finished in 0 iterations 
2025-01-10T13:28:40.4097920Z 	Simulation took 0.00 s
2025-01-10T13:28:40.4097990Z  ([1mbase.py[0m:542)
2025-01-10T13:28:40.4098120Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4098160Z 	
2025-01-10T13:28:40.4098280Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:28:40.4098400Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4098450Z 	
2025-01-10T13:28:40.4098510Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:28:40.4098580Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:28:40.4098640Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.4098710Z  ([1mbase.py[0m:657)
2025-01-10T13:28:40.4098860Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:28:40.4098860Z 
2025-01-10T13:28:40.4098870Z 
2025-01-10T13:28:40.4099060Z Packets:                                                                                   7166/? [00:09<00:00, 629.40it/s]  [A
2025-01-10T13:28:40.4099290Z 
2025-01-10T13:28:40.4099510Z Packets:                                                                                   14966/? [00:09<00:00, 1754.88it/s][A
2025-01-10T13:28:40.4099510Z 
2025-01-10T13:28:40.4099720Z Packets:                                                                                   25668/? [00:09<00:00, 3897.87it/s][A
2025-01-10T13:28:40.4099730Z 
2025-01-10T13:28:40.4100090Z Packets:                                                                                   35612/? [00:10<00:00, 6597.96it/s][A
2025-01-10T13:28:40.4100100Z 
2025-01-10T13:28:40.4100270Z Packets:                                                                                   43847/? [00:10<00:00, 9537.57it/s][A
2025-01-10T13:28:40.4100270Z 
2025-01-10T13:28:40.4100440Z Packets:                                                                                   55557/? [00:10<00:00, 15187.25it/s][A
2025-01-10T13:28:40.4100440Z 
2025-01-10T13:28:40.4100620Z Packets:                                                                                   64815/? [00:10<00:00, 20369.91it/s][A
2025-01-10T13:28:40.4100620Z 
2025-01-10T13:28:40.4100790Z Packets:                                                                                   74448/? [00:10<00:00, 27190.37it/s][A
2025-01-10T13:28:40.4100800Z 
2025-01-10T13:28:40.4100960Z Packets:                                                                                   86103/? [00:10<00:00, 37349.47it/s][A
2025-01-10T13:28:40.4100970Z 
2025-01-10T13:28:40.4101130Z Packets:                                                                                   95995/? [00:10<00:00, 44941.33it/s][A
2025-01-10T13:28:40.4101250Z Iterations:                                                                                40/? [08:13<00:00,  7.45s/it]
2025-01-10T13:28:40.4101250Z 
2025-01-10T13:28:40.4101420Z Packets:                                                                                   104009/? [00:10<00:00, 44941.33it/s][A
2025-01-10T13:28:40.4101670Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:28:40.4102090Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:28:40.4102290Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:28:40.4102380Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:28:40.4102440Z 	Simulation finished in 0 iterations 
2025-01-10T13:28:40.4102510Z 	Simulation took 0.00 s
2025-01-10T13:28:40.4102510Z 
2025-01-10T13:28:40.4102620Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:28:40.4102680Z 	Starting iteration 1 of 1
2025-01-10T13:28:40.4102770Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:28:40.4102840Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:28:40.4102920Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:28:40.4102990Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.4103130Z ____________________ test_montecarlo_main_loop_vpacket_log _____________________
2025-01-10T13:28:40.4103130Z 
2025-01-10T13:28:40.4103690Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:28:40.4103910Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x157445fa0>
2025-01-10T13:28:40.4104200Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:28:40.4104200Z 
2025-01-10T13:28:40.4104310Z     def test_montecarlo_main_loop_vpacket_log(
2025-01-10T13:28:40.4104390Z         montecarlo_main_loop_config,
2025-01-10T13:28:40.4104460Z         regression_data,
2025-01-10T13:28:40.4104510Z         atomic_dataset,
2025-01-10T13:28:40.4104700Z     ):
2025-01-10T13:28:40.4104780Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:28:40.4104910Z         montecarlo_main_loop_config.montecarlo.no_of_virtual_packets = 5
2025-01-10T13:28:40.4104950Z     
2025-01-10T13:28:40.4105060Z         montecarlo_main_loop_simulation = Simulation.from_config(
2025-01-10T13:28:40.4105120Z             montecarlo_main_loop_config,
2025-01-10T13:28:40.4105180Z             atom_data=atomic_dataset,
2025-01-10T13:28:40.4105250Z             virtual_packet_logging=True,
2025-01-10T13:28:40.4105300Z             legacy_mode_enabled=True,
2025-01-10T13:28:40.4105350Z         )
2025-01-10T13:28:40.4105440Z         montecarlo_main_loop_simulation.run_convergence()
2025-01-10T13:28:40.4105520Z         montecarlo_main_loop_simulation.run_final()
2025-01-10T13:28:40.4105570Z     
2025-01-10T13:28:40.4105670Z         transport = montecarlo_main_loop_simulation.transport
2025-01-10T13:28:40.4105710Z     
2025-01-10T13:28:40.4105870Z         assert transport.montecarlo_configuration.ENABLE_VPACKET_TRACKING is True
2025-01-10T13:28:40.4105920Z     
2025-01-10T13:28:40.4106010Z         expected_hdf_store = regression_data.sync_hdf_store(
2025-01-10T13:28:40.4106080Z             montecarlo_main_loop_simulation
2025-01-10T13:28:40.4106120Z         )
2025-01-10T13:28:40.4106160Z     
2025-01-10T13:28:40.4106580Z         expected_nu = expected_hdf_store[
2025-01-10T13:28:40.4107020Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:28:40.4107160Z         ]
2025-01-10T13:28:40.4107360Z         expected_energy = expected_hdf_store[
2025-01-10T13:28:40.4107630Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:28:40.4107760Z         ]
2025-01-10T13:28:40.4108030Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:28:40.4108360Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:28:40.4108530Z         ]
2025-01-10T13:28:40.4109300Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:28:40.4109560Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:28:40.4109700Z         ]
2025-01-10T13:28:40.4109940Z         expected_vpacket_log_nus = expected_hdf_store[
2025-01-10T13:28:40.4110250Z             "/simulation/transport/transport_state/virt_packet_nus"
2025-01-10T13:28:40.4110380Z         ]
2025-01-10T13:28:40.4110630Z         expected_vpacket_log_energies = expected_hdf_store[
2025-01-10T13:28:40.4110950Z             "/simulation/transport/transport_state/virt_packet_energies"
2025-01-10T13:28:40.4111080Z         ]
2025-01-10T13:28:40.4111240Z     
2025-01-10T13:28:40.4111470Z         transport_state = transport.transport_state
2025-01-10T13:28:40.4111630Z     
2025-01-10T13:28:40.4112030Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:28:40.4112350Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:28:40.4112710Z         actual_nu_bar_estimator = transport_state.nu_bar_estimator
2025-01-10T13:28:40.4112950Z         actual_j_estimator = transport_state.j_estimator
2025-01-10T13:28:40.4113330Z         actual_vpacket_log_nus = transport_state.vpacket_tracker.nus
2025-01-10T13:28:40.4113730Z         actual_vpacket_log_energies = transport_state.vpacket_tracker.energies
2025-01-10T13:28:40.4113860Z     
2025-01-10T13:28:40.4114040Z         expected_hdf_store.close()
2025-01-10T13:28:40.4114190Z         # Compare
2025-01-10T13:28:40.4114370Z >       npt.assert_allclose(
2025-01-10T13:28:40.4114530Z             actual_nu_bar_estimator,
2025-01-10T13:28:40.4114700Z             expected_nu_bar_estimator,
2025-01-10T13:28:40.4114850Z             rtol=1e-12,
2025-01-10T13:28:40.4115010Z             atol=1e-15,
2025-01-10T13:28:40.4115190Z         )
2025-01-10T13:28:40.4115200Z 
2025-01-10T13:28:40.4115640Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:120: 
2025-01-10T13:28:40.4115920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4116190Z 
2025-01-10T13:28:40.4117170Z args = (<function assert_allclose.<locals>.compare at 0x305047a60>, array([9.39540882e+28, 8.06337668e+28, 7.18835599e+28, 6.....86491193e+28, 3.76603462e+28, 3.65184134e+28,
2025-01-10T13:28:40.4117510Z        3.55625311e+28, 3.45809153e+28, 3.35093337e+28, 3.25549805e+28]))
2025-01-10T13:28:40.4118130Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-12, atol=1e-15', 'strict': False, ...}
2025-01-10T13:28:40.4118150Z 
2025-01-10T13:28:40.4118290Z     @wraps(func)
2025-01-10T13:28:40.4118490Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4118690Z         with self._recreate_cm():
2025-01-10T13:28:40.4118890Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4119090Z E           AssertionError: 
2025-01-10T13:28:40.4119350Z E           Not equal to tolerance rtol=1e-12, atol=1e-15
2025-01-10T13:28:40.4119520Z E           
2025-01-10T13:28:40.4119750Z E           Mismatched elements: 20 / 20 (100%)
2025-01-10T13:28:40.4120090Z E           Max absolute difference among violations: 1.93283629e+25
2025-01-10T13:28:40.4120360Z E           Max relative difference among violations: 0.00029157
2025-01-10T13:28:40.4120980Z E            ACTUAL: array([9.395409e+28, 8.063377e+28, 7.188356e+28, 6.549146e+28,
2025-01-10T13:28:40.4121160Z E                  6.034629e+28, 5.628414e+28, 5.283421e+28, 4.953453e+28,
2025-01-10T13:28:40.4121260Z E                  4.716735e+28, 4.492320e+28, 4.302194e+28, 4.140106e+28,...
2025-01-10T13:28:40.4121390Z E            DESIRED: array([9.397342e+28, 8.064372e+28, 7.189479e+28, 6.549756e+28,
2025-01-10T13:28:40.4121500Z E                  6.033450e+28, 5.626927e+28, 5.281881e+28, 4.952089e+28,
2025-01-10T13:28:40.4121620Z E                  4.716388e+28, 4.491655e+28, 4.302267e+28, 4.139741e+28,...
2025-01-10T13:28:40.4121630Z 
2025-01-10T13:28:40.4121820Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4122190Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:28:40.4122580Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:28:40.4122960Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:28:40.4123150Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4123350Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:28:40.4123520Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4123600Z 	
2025-01-10T13:28:40.4123680Z 	Simulation finished in 0 iterations 
2025-01-10T13:28:40.4123750Z 	Simulation took 0.00 s
2025-01-10T13:28:40.4123840Z  ([1mbase.py[0m:542)
2025-01-10T13:28:40.4124020Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4124070Z 	
2025-01-10T13:28:40.4124710Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:28:40.4124980Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4125030Z 	
2025-01-10T13:28:40.4125130Z 	Luminosity emitted   = 8.135e+42 erg / s
2025-01-10T13:28:40.4125230Z 	Luminosity absorbed  = 2.646e+42 erg / s
2025-01-10T13:28:40.4125310Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.4125400Z  ([1mbase.py[0m:657)
2025-01-10T13:28:40.4125540Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:28:40.4125550Z 
2025-01-10T13:28:40.4125550Z 
2025-01-10T13:28:40.4125750Z Packets:                                                                                   105467/? [00:14<00:00, 8160.17it/s] [A
2025-01-10T13:28:40.4125760Z 
2025-01-10T13:28:40.4125960Z Packets:                                                                                   112141/? [00:14<00:00, 9786.71it/s][A
2025-01-10T13:28:40.4125970Z 
2025-01-10T13:28:40.4126210Z Packets:                                                                                   117718/? [00:14<00:00, 11684.61it/s][A
2025-01-10T13:28:40.4127650Z 
2025-01-10T13:28:40.4128770Z Packets:                                                                                   122854/? [00:14<00:00, 13592.85it/s][A
2025-01-10T13:28:40.4128800Z 
2025-01-10T13:28:40.4129020Z Packets:                                                                                   127423/? [00:14<00:00, 15673.10it/s][A
2025-01-10T13:28:40.4129030Z 
2025-01-10T13:28:40.4129220Z Packets:                                                                                   131665/? [00:14<00:00, 17792.84it/s][A
2025-01-10T13:28:40.4129220Z 
2025-01-10T13:28:40.4129400Z Packets:                                                                                   135638/? [00:15<00:00, 19896.03it/s][A
2025-01-10T13:28:40.4129400Z 
2025-01-10T13:28:40.4130280Z Packets:                                                                                   139449/? [00:15<00:00, 22474.17it/s][A
2025-01-10T13:28:40.4130350Z 
2025-01-10T13:28:40.4131240Z Packets:                                                                                   143229/? [00:15<00:00, 24121.63it/s][A
2025-01-10T13:28:40.4131270Z 
2025-01-10T13:28:40.4131770Z Packets:                                                                                   147392/? [00:15<00:00, 27411.72it/s][A
2025-01-10T13:28:40.4131780Z 
2025-01-10T13:28:40.4132510Z Packets:                                                                                   151455/? [00:15<00:00, 30208.83it/s][A
2025-01-10T13:28:40.4132520Z 
2025-01-10T13:28:40.4132720Z Packets:                                                                                   155297/? [00:15<00:00, 28460.12it/s][A
2025-01-10T13:28:40.4132720Z 
2025-01-10T13:28:40.4132920Z Packets:                                                                                   158728/? [00:15<00:00, 27586.43it/s][A
2025-01-10T13:28:40.4132920Z 
2025-01-10T13:28:40.4147000Z Packets:                                                                                   162146/? [00:15<00:00, 29109.22it/s][A
2025-01-10T13:28:40.4147030Z 
2025-01-10T13:28:40.4148120Z Packets:                                                                                   165386/? [00:15<00:00, 29670.09it/s][A
2025-01-10T13:28:40.4148130Z 
2025-01-10T13:28:40.4148390Z Packets:                                                                                   168593/? [00:16<00:00, 29895.80it/s][A
2025-01-10T13:28:40.4148410Z 
2025-01-10T13:28:40.4151510Z Packets:                                                                                   171754/? [00:16<00:00, 29437.95it/s][A
2025-01-10T13:28:40.4151530Z 
2025-01-10T13:28:40.4151790Z Packets:                                                                                   175232/? [00:16<00:00, 30884.41it/s][A
2025-01-10T13:28:40.4151790Z 
2025-01-10T13:28:40.4152030Z Packets:                                                                                   178419/? [00:16<00:00, 31085.64it/s][A
2025-01-10T13:28:40.4152050Z 
2025-01-10T13:28:40.4152260Z Packets:                                                                                   182083/? [00:16<00:00, 32664.72it/s][A
2025-01-10T13:28:40.4152270Z 
2025-01-10T13:28:40.4152430Z Packets:                                                                                   185407/? [00:16<00:00, 29860.51it/s][A
2025-01-10T13:28:40.4152440Z 
2025-01-10T13:28:40.4152610Z Packets:                                                                                   188507/? [00:16<00:00, 30141.56it/s][A
2025-01-10T13:28:40.4152610Z 
2025-01-10T13:28:40.4153200Z Packets:                                                                                   191967/? [00:16<00:00, 31386.37it/s][A
2025-01-10T13:28:40.4153210Z 
2025-01-10T13:28:40.4153490Z Packets:                                                                                   196162/? [00:16<00:00, 34402.93it/s][A
2025-01-10T13:28:40.4153510Z 
2025-01-10T13:28:40.4154240Z Packets:                                                                                   199653/? [00:17<00:00, 30943.96it/s][A
2025-01-10T13:28:40.4154240Z 
2025-01-10T13:28:40.4154500Z Packets:                                                                                   203140/? [00:17<00:00, 32003.77it/s][A
2025-01-10T13:28:40.4154630Z Iterations:                                                                                41/? [08:20<00:00,  7.31s/it]
2025-01-10T13:28:40.4154630Z 
2025-01-10T13:28:40.4154890Z Packets:                                                                                   204009/? [00:17<00:00, 32003.77it/s][A
2025-01-10T13:28:40.4155070Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:28:40.4155700Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:28:40.4155950Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:28:40.4156090Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:28:40.4156200Z 	Simulation finished in 0 iterations 
2025-01-10T13:28:40.4156290Z 	Simulation took 0.00 s
2025-01-10T13:28:40.4156300Z 
2025-01-10T13:28:40.4156420Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:28:40.4156510Z 	Starting iteration 1 of 1
2025-01-10T13:28:40.4156620Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:28:40.4156710Z 	Luminosity emitted   = 8.135e+42 erg / s
2025-01-10T13:28:40.4157390Z 	Luminosity absorbed  = 2.646e+42 erg / s
2025-01-10T13:28:40.4157480Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.4158810Z __________________________ test_boundary_interactions __________________________
2025-01-10T13:28:40.4158830Z 
2025-01-10T13:28:40.4159930Z rpacket_tracker = ListType[instance.jitclass.RPacketTracker#1392da030<seed:int64,index:int64,status:array(int64, 1d, A),r:array(float64,...xing.RPacketTracker object at 0x175239270>, <numba.experimental.jitclass.boxing.RPacketTracker object at 0x31fffe620>])
2025-01-10T13:28:40.4160340Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x32a20ef90>
2025-01-10T13:28:40.4160340Z 
2025-01-10T13:28:40.4161960Z     def test_boundary_interactions(rpacket_tracker, regression_data):
2025-01-10T13:28:40.4163440Z         no_of_packets = len(rpacket_tracker)
2025-01-10T13:28:40.4163500Z     
2025-01-10T13:28:40.4163590Z         # Hard coding the number of columns
2025-01-10T13:28:40.4164030Z         # Based on the largest size of boundary_interaction array (60)
2025-01-10T13:28:40.4164480Z         obtained_boundary_interaction = np.full(
2025-01-10T13:28:40.4164690Z             (no_of_packets, 64),
2025-01-10T13:28:40.4165120Z             [-1],
2025-01-10T13:28:40.4165490Z             dtype=rpacket_tracker[0].boundary_interaction.dtype,
2025-01-10T13:28:40.4165640Z         )
2025-01-10T13:28:40.4165800Z     
2025-01-10T13:28:40.4166080Z         for i, tracker in enumerate(rpacket_tracker):
2025-01-10T13:28:40.4166330Z             obtained_boundary_interaction[
2025-01-10T13:28:40.4166780Z                 i, : tracker.boundary_interaction.size
2025-01-10T13:28:40.4167060Z             ] = tracker.boundary_interaction
2025-01-10T13:28:40.4167300Z     
2025-01-10T13:28:40.4167780Z         expected_boundary_interaction = regression_data.sync_ndarray(
2025-01-10T13:28:40.4167980Z             obtained_boundary_interaction
2025-01-10T13:28:40.4168120Z         )
2025-01-10T13:28:40.4168470Z >       npt.assert_array_equal(
2025-01-10T13:28:40.4168890Z             obtained_boundary_interaction, expected_boundary_interaction
2025-01-10T13:28:40.4169040Z         )
2025-01-10T13:28:40.4169050Z 
2025-01-10T13:28:40.4169660Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py:154: 
2025-01-10T13:28:40.4169910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4172280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/numpy/_utils/__init__.py:85: in wrapper
2025-01-10T13:28:40.4172560Z     return fun(*args, **kwargs)
2025-01-10T13:28:40.4172660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4172660Z 
2025-01-10T13:28:40.4172860Z args = (<built-in function eq>, array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:28:40.4172940Z         (-1, -1, -1), (-...-1, -1, -1), (-1, -1, -1)]],
2025-01-10T13:28:40.4173080Z       dtype=[('event_id', '<i8'), ('current_shell_id', '<i8'), ('next_shell_id', '<i8')]))
2025-01-10T13:28:40.4174700Z kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}
2025-01-10T13:28:40.4174710Z 
2025-01-10T13:28:40.4174780Z     @wraps(func)
2025-01-10T13:28:40.4174840Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4174910Z         with self._recreate_cm():
2025-01-10T13:28:40.4174980Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4175060Z E           AssertionError: 
2025-01-10T13:28:40.4175120Z E           Arrays are not equal
2025-01-10T13:28:40.4175170Z E           
2025-01-10T13:28:40.4175250Z E           Mismatched elements: 11291 / 256000 (4.41%)
2025-01-10T13:28:40.4175850Z E            ACTUAL: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:28:40.4175940Z E                   (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:28:40.4176040Z E                  [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:28:40.4176170Z E            DESIRED: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:28:40.4176240Z E                   (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:28:40.4176330Z E                  [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:28:40.4176330Z 
2025-01-10T13:28:40.4176500Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4176800Z ______________________ test_montecarlo_main_loop_weighted ______________________
2025-01-10T13:28:40.4176810Z 
2025-01-10T13:28:40.4177350Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:28:40.4177570Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x17f8f8bc0>
2025-01-10T13:28:40.4177860Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:28:40.4178190Z simple_weighted_packet_source = <tardis.transport.montecarlo.weighted_packet_source.BlackBodyWeightedSource object at 0x157543fe0>
2025-01-10T13:28:40.4178190Z 
2025-01-10T13:28:40.4178270Z     def test_montecarlo_main_loop_weighted(
2025-01-10T13:28:40.4179150Z         montecarlo_main_loop_config,
2025-01-10T13:28:40.4179460Z         regression_data,
2025-01-10T13:28:40.4179640Z         atomic_dataset,
2025-01-10T13:28:40.4180040Z         simple_weighted_packet_source,
2025-01-10T13:28:40.4180190Z     ):
2025-01-10T13:28:40.4180400Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:28:40.4180760Z         montecarlo_main_loop_simulation_weighted = Simulation.from_config(
2025-01-10T13:28:40.4181530Z             montecarlo_main_loop_config,
2025-01-10T13:28:40.4181710Z             atom_data=atomic_dataset,
2025-01-10T13:28:40.4181910Z             virtual_packet_logging=False,
2025-01-10T13:28:40.4182090Z             legacy_mode_enabled=True,
2025-01-10T13:28:40.4182240Z         )
2025-01-10T13:28:40.4182550Z         montecarlo_main_loop_simulation_weighted.packet_source = (
2025-01-10T13:28:40.4182740Z             simple_weighted_packet_source
2025-01-10T13:28:40.4182890Z         )
2025-01-10T13:28:40.4183220Z         montecarlo_main_loop_simulation_weighted.run_convergence()
2025-01-10T13:28:40.4184030Z         montecarlo_main_loop_simulation_weighted.run_final()
2025-01-10T13:28:40.4184160Z     
2025-01-10T13:28:40.4184370Z         # Get the montecarlo simple regression data
2025-01-10T13:28:40.4184550Z         regression_data_dir = (
2025-01-10T13:28:40.4184930Z             regression_data.absolute_regression_data_dir.absolute().parents[0]
2025-01-10T13:28:40.4185240Z             / "test_montecarlo_main_loop/test_montecarlo_main_loop.h5"
2025-01-10T13:28:40.4185380Z         )
2025-01-10T13:28:40.4186420Z         expected_hdf_store = pd.HDFStore(regression_data_dir, mode="r")
2025-01-10T13:28:40.4186610Z     
2025-01-10T13:28:40.4186800Z         # Load compare data from refdata
2025-01-10T13:28:40.4186950Z     
2025-01-10T13:28:40.4187150Z         expected_nu = expected_hdf_store[
2025-01-10T13:28:40.4187460Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:28:40.4187550Z         ]
2025-01-10T13:28:40.4187620Z         expected_energy = expected_hdf_store[
2025-01-10T13:28:40.4187770Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:28:40.4187820Z         ]
2025-01-10T13:28:40.4187910Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:28:40.4188040Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:28:40.4188080Z         ]
2025-01-10T13:28:40.4188170Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:28:40.4188270Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:28:40.4188330Z         ]
2025-01-10T13:28:40.4188390Z         expected_hdf_store.close()
2025-01-10T13:28:40.4188450Z         transport_state = (
2025-01-10T13:28:40.4188610Z             montecarlo_main_loop_simulation_weighted.transport.transport_state
2025-01-10T13:28:40.4188660Z         )
2025-01-10T13:28:40.4189000Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:28:40.4189700Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:28:40.4191880Z         actual_nu_bar_estimator = (
2025-01-10T13:28:40.4192010Z             transport_state.radfield_mc_estimators.nu_bar_estimator
2025-01-10T13:28:40.4192060Z         )
2025-01-10T13:28:40.4192210Z         actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
2025-01-10T13:28:40.4192250Z     
2025-01-10T13:28:40.4192300Z         # Compare
2025-01-10T13:28:40.4192360Z         npt.assert_allclose(
2025-01-10T13:28:40.4192490Z             actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-2
2025-01-10T13:28:40.4192540Z         )
2025-01-10T13:28:40.4192680Z         npt.assert_allclose(actual_j_estimator, expected_j_estimator, rtol=1e-2)
2025-01-10T13:28:40.4192810Z >       npt.assert_allclose(actual_energy, expected_energy, rtol=1e-2)
2025-01-10T13:28:40.4192810Z 
2025-01-10T13:28:40.4193000Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py:65: 
2025-01-10T13:28:40.4193090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4193100Z 
2025-01-10T13:28:40.4193480Z args = (<function assert_allclose.<locals>.compare at 0x313dad3a0>, array([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-05,...ay([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-05, ...,
2025-01-10T13:28:40.4193570Z         1.03375439e-05, -9.75713585e-06,  1.01976360e-05]))
2025-01-10T13:28:40.4193780Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.01, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4193780Z 
2025-01-10T13:28:40.4193830Z     @wraps(func)
2025-01-10T13:28:40.4193900Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4193960Z         with self._recreate_cm():
2025-01-10T13:28:40.4194030Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4194090Z E           AssertionError: 
2025-01-10T13:28:40.4194170Z E           Not equal to tolerance rtol=0.01, atol=0
2025-01-10T13:28:40.4194220Z E           
2025-01-10T13:28:40.4194300Z E           Mismatched elements: 33 / 100000 (0.033%)
2025-01-10T13:28:40.4206020Z E           Max absolute difference among violations: 2.00640487e-05
2025-01-10T13:28:40.4206120Z E           Max relative difference among violations: 2.11614526
2025-01-10T13:28:40.4206270Z E            ACTUAL: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:28:40.4206360Z E                  -9.757136e-06,  1.019764e-05])
2025-01-10T13:28:40.4206500Z E            DESIRED: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:28:40.4206570Z E                  -9.757136e-06,  1.019764e-05])
2025-01-10T13:28:40.4206570Z 
2025-01-10T13:28:40.4206730Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4206860Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:28:40.4207210Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:28:40.4207750Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:28:40.4208810Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4210380Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:28:40.4210770Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4211050Z 	
2025-01-10T13:28:40.4211170Z 	Simulation finished in 0 iterations 
2025-01-10T13:28:40.4211230Z 	Simulation took 0.00 s
2025-01-10T13:28:40.4211330Z  ([1mbase.py[0m:542)
2025-01-10T13:28:40.4211620Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4212020Z 	
2025-01-10T13:28:40.4212400Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:28:40.4213210Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4213290Z 	
2025-01-10T13:28:40.4213360Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:28:40.4216310Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:28:40.4216390Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.4216510Z  ([1mbase.py[0m:657)
2025-01-10T13:28:40.4216640Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:28:40.4216650Z 
2025-01-10T13:28:40.4216650Z 
2025-01-10T13:28:40.4216850Z Packets:                                                                                   0/100000 [00:00<?, ?it/s]            [A
2025-01-10T13:28:40.4216860Z 
2025-01-10T13:28:40.4217040Z Packets:                                                                                   0/100000 [00:00<?, ?it/s][A
2025-01-10T13:28:40.4217050Z 
2025-01-10T13:28:40.4217260Z Packets:   ███████▊                                                                        9744/100000 [00:00<00:00, 97436.84it/s][A
2025-01-10T13:28:40.4217270Z 
2025-01-10T13:28:40.4217480Z Packets:   ███████████████▋                                                                19582/100000 [00:00<00:00, 97990.45it/s][A
2025-01-10T13:28:40.4217490Z 
2025-01-10T13:28:40.4217710Z Packets:   ████████████████████████                                                        30079/100000 [00:00<00:00, 101175.04it/s][A
2025-01-10T13:28:40.4217720Z 
2025-01-10T13:28:40.4217940Z Packets:   ████████████████████████████████▏                                               40197/100000 [00:00<00:00, 98738.86it/s] [A
2025-01-10T13:28:40.4217940Z 
2025-01-10T13:28:40.4218170Z Packets:   ████████████████████████████████████████                                        50080/100000 [00:00<00:00, 91106.67it/s][A
2025-01-10T13:28:40.4218170Z 
2025-01-10T13:28:40.4218400Z Packets:   ███████████████████████████████████████████████▍                                59280/100000 [00:00<00:00, 90302.40it/s][A
2025-01-10T13:28:40.4218400Z 
2025-01-10T13:28:40.4218630Z Packets:   ███████████████████████████████████████████████████████▏                        68993/100000 [00:00<00:00, 92419.80it/s][A
2025-01-10T13:28:40.4218650Z 
2025-01-10T13:28:40.4219540Z Packets:   ███████████████████████████████████████████████████████████████                 78817/100000 [00:00<00:00, 94207.26it/s][A
2025-01-10T13:28:40.4219700Z 
2025-01-10T13:28:40.4220470Z Packets:   ███████████████████████████████████████████████████████████████████████▎        89216/100000 [00:00<00:00, 97188.33it/s][A
2025-01-10T13:28:40.4220520Z 
2025-01-10T13:28:40.4221480Z Packets:   ███████████████████████████████████████████████████████████████████████████████▉99854/100000 [00:01<00:00, 99977.28it/s][A
2025-01-10T13:28:40.4222820Z Iterations:                                                                                45/? [08:48<00:00,  6.31s/it]
2025-01-10T13:28:40.4222830Z 
2025-01-10T13:28:40.4225140Z Packets:   ███████████████████████████████████████████████████████████████████████████████▉99999/100000 [00:01<00:00, 99977.28it/s][A
2025-01-10T13:28:40.4225300Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:28:40.4225960Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:28:40.4226150Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:28:40.4226230Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:28:40.4226300Z 	Simulation finished in 0 iterations 
2025-01-10T13:28:40.4226350Z 	Simulation took 0.00 s
2025-01-10T13:28:40.4226350Z 
2025-01-10T13:28:40.4226430Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:28:40.4226490Z 	Starting iteration 1 of 1
2025-01-10T13:28:40.4226560Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:28:40.4226630Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:28:40.4226700Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:28:40.4226760Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:28:40.4226930Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data0-plot_data] __
2025-01-10T13:28:40.4226940Z 
2025-01-10T13:28:40.4227140Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a8710>
2025-01-10T13:28:40.4227350Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>
2025-01-10T13:28:40.4227560Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data0-plot_data]>>
2025-01-10T13:28:40.4227610Z attribute = 'plot_data'
2025-01-10T13:28:40.4227620Z 
2025-01-10T13:28:40.4227680Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.4227730Z         "attribute",
2025-01-10T13:28:40.4227770Z         [
2025-01-10T13:28:40.4227820Z             "plot_data",
2025-01-10T13:28:40.4227870Z             "plot_colors",
2025-01-10T13:28:40.4227930Z             "new_bin_edges",
2025-01-10T13:28:40.4227970Z         ],
2025-01-10T13:28:40.4228010Z     )
2025-01-10T13:28:40.4228070Z     def test_prepare_plot_data(
2025-01-10T13:28:40.4228120Z         self,
2025-01-10T13:28:40.4228190Z         plotter_prepare_plot_data,
2025-01-10T13:28:40.4228310Z         request,
2025-01-10T13:28:40.4228370Z         attribute,
2025-01-10T13:28:40.4228410Z     ):
2025-01-10T13:28:40.4228460Z         """
2025-01-10T13:28:40.4228570Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:28:40.4228620Z     
2025-01-10T13:28:40.4228670Z         Parameters:
2025-01-10T13:28:40.4228720Z         -----------
2025-01-10T13:28:40.4228860Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:28:40.4228930Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4229050Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:28:40.4229100Z         """
2025-01-10T13:28:40.4229170Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4229280Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:28:40.4229400Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:28:40.4229530Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:28:40.4229650Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:28:40.4231240Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:28:40.4231380Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:28:40.4231480Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:28:40.4231480Z 
2025-01-10T13:28:40.4231600Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:28:40.4231680Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4231690Z 
2025-01-10T13:28:40.4232030Z args = (<function assert_allclose.<locals>.compare at 0x17f8b3880>, array([11843.96225504, 11843.96225504, 11843.96225504, 12...1104.14894249, 11194.10880903, 12818.679236  ,
2025-01-10T13:28:40.4232140Z        12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
2025-01-10T13:28:40.4232450Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4232450Z 
2025-01-10T13:28:40.4232510Z     @wraps(func)
2025-01-10T13:28:40.4232560Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4232620Z         with self._recreate_cm():
2025-01-10T13:28:40.4232680Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4232750Z E           AssertionError: 
2025-01-10T13:28:40.4232850Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4232900Z E           
2025-01-10T13:28:40.4232960Z E           (shapes (515,), (508,) mismatch)
2025-01-10T13:28:40.4233080Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:28:40.4233190Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:28:40.4233310Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:28:40.4233440Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:28:40.4233530Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:28:40.4233640Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:28:40.4233650Z 
2025-01-10T13:28:40.4233810Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4233930Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4234170Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4234370Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4234740Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4235590Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4236570Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data1-plot_data] __
2025-01-10T13:28:40.4236580Z 
2025-01-10T13:28:40.4237630Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a8b90>
2025-01-10T13:28:40.4237900Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>
2025-01-10T13:28:40.4238120Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data1-plot_data]>>
2025-01-10T13:28:40.4238170Z attribute = 'plot_data'
2025-01-10T13:28:40.4238180Z 
2025-01-10T13:28:40.4238250Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.4238300Z         "attribute",
2025-01-10T13:28:40.4238340Z         [
2025-01-10T13:28:40.4238400Z             "plot_data",
2025-01-10T13:28:40.4238450Z             "plot_colors",
2025-01-10T13:28:40.4238500Z             "new_bin_edges",
2025-01-10T13:28:40.4238550Z         ],
2025-01-10T13:28:40.4238600Z     )
2025-01-10T13:28:40.4238680Z     def test_prepare_plot_data(
2025-01-10T13:28:40.4238720Z         self,
2025-01-10T13:28:40.4238780Z         plotter_prepare_plot_data,
2025-01-10T13:28:40.4238830Z         request,
2025-01-10T13:28:40.4238870Z         attribute,
2025-01-10T13:28:40.4238920Z     ):
2025-01-10T13:28:40.4238960Z         """
2025-01-10T13:28:40.4239060Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:28:40.4239110Z     
2025-01-10T13:28:40.4239160Z         Parameters:
2025-01-10T13:28:40.4239210Z         -----------
2025-01-10T13:28:40.4239340Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:28:40.4239420Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4239550Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:28:40.4239590Z         """
2025-01-10T13:28:40.4239670Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4239770Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:28:40.4240040Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:28:40.4240170Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:28:40.4240290Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:28:40.4240380Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:28:40.4240470Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:28:40.4240560Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:28:40.4240560Z 
2025-01-10T13:28:40.4240670Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:28:40.4240760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4240760Z 
2025-01-10T13:28:40.4242480Z args = (<function assert_allclose.<locals>.compare at 0x17f85dd00>, array([11843.96225504, 11843.96225504, 11843.96225504, 12...47464 ,
2025-01-10T13:28:40.4242640Z        12229.96880815, 12113.40540961, 12605.43283975, 12605.43283975,
2025-01-10T13:28:40.4242700Z        11152.96259546, 11172.04481521]))
2025-01-10T13:28:40.4242910Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4242920Z 
2025-01-10T13:28:40.4242970Z     @wraps(func)
2025-01-10T13:28:40.4243030Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4243090Z         with self._recreate_cm():
2025-01-10T13:28:40.4243150Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4243200Z E           AssertionError: 
2025-01-10T13:28:40.4243290Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4243330Z E           
2025-01-10T13:28:40.4243390Z E           (shapes (560,), (558,) mismatch)
2025-01-10T13:28:40.4243510Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:28:40.4243610Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:28:40.4244000Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:28:40.4244140Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:28:40.4244230Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:28:40.4244320Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:28:40.4244320Z 
2025-01-10T13:28:40.4244480Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4244650Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data2-plot_data] __
2025-01-10T13:28:40.4244650Z 
2025-01-10T13:28:40.4244850Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a8dd0>
2025-01-10T13:28:40.4245060Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>
2025-01-10T13:28:40.4245270Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data2-plot_data]>>
2025-01-10T13:28:40.4245340Z attribute = 'plot_data'
2025-01-10T13:28:40.4245340Z 
2025-01-10T13:28:40.4245410Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.4245460Z         "attribute",
2025-01-10T13:28:40.4245500Z         [
2025-01-10T13:28:40.4245550Z             "plot_data",
2025-01-10T13:28:40.4245600Z             "plot_colors",
2025-01-10T13:28:40.4245650Z             "new_bin_edges",
2025-01-10T13:28:40.4245700Z         ],
2025-01-10T13:28:40.4245740Z     )
2025-01-10T13:28:40.4245800Z     def test_prepare_plot_data(
2025-01-10T13:28:40.4245840Z         self,
2025-01-10T13:28:40.4245910Z         plotter_prepare_plot_data,
2025-01-10T13:28:40.4245950Z         request,
2025-01-10T13:28:40.4246000Z         attribute,
2025-01-10T13:28:40.4246040Z     ):
2025-01-10T13:28:40.4246080Z         """
2025-01-10T13:28:40.4246180Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:28:40.4249830Z     
2025-01-10T13:28:40.4250040Z         Parameters:
2025-01-10T13:28:40.4250220Z         -----------
2025-01-10T13:28:40.4250630Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:28:40.4250830Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4251210Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:28:40.4251360Z         """
2025-01-10T13:28:40.4251580Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4251860Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:28:40.4252170Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:28:40.4252510Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:28:40.4252820Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:28:40.4253080Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:28:40.4253470Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:28:40.4255120Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:28:40.4255180Z 
2025-01-10T13:28:40.4255500Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:28:40.4255750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4255770Z 
2025-01-10T13:28:40.4257000Z args = (<function assert_allclose.<locals>.compare at 0x158d882c0>, array([11202.14920452, 13552.38987987, 11630.95782059, 12...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
2025-01-10T13:28:40.4257240Z        15754.62784966, 13174.4766832 , 11238.83568899]))
2025-01-10T13:28:40.4257830Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4257850Z 
2025-01-10T13:28:40.4258010Z     @wraps(func)
2025-01-10T13:28:40.4258200Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4258990Z         with self._recreate_cm():
2025-01-10T13:28:40.4259160Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4259550Z E           AssertionError: 
2025-01-10T13:28:40.4259770Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4259910Z E           
2025-01-10T13:28:40.4260090Z E           (shapes (136,), (147,) mismatch)
2025-01-10T13:28:40.4260400Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:28:40.4260640Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:28:40.4260890Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:28:40.4261230Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:28:40.4261460Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:28:40.4261720Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:28:40.4261750Z 
2025-01-10T13:28:40.4262190Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4262650Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data3-plot_data] __
2025-01-10T13:28:40.4262670Z 
2025-01-10T13:28:40.4263230Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a9010>
2025-01-10T13:28:40.4263860Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>
2025-01-10T13:28:40.4264490Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data3-plot_data]>>
2025-01-10T13:28:40.4264660Z attribute = 'plot_data'
2025-01-10T13:28:40.4264670Z 
2025-01-10T13:28:40.4264860Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.4265010Z         "attribute",
2025-01-10T13:28:40.4265140Z         [
2025-01-10T13:28:40.4265300Z             "plot_data",
2025-01-10T13:28:40.4265450Z             "plot_colors",
2025-01-10T13:28:40.4266040Z             "new_bin_edges",
2025-01-10T13:28:40.4266180Z         ],
2025-01-10T13:28:40.4266320Z     )
2025-01-10T13:28:40.4266500Z     def test_prepare_plot_data(
2025-01-10T13:28:40.4266640Z         self,
2025-01-10T13:28:40.4266820Z         plotter_prepare_plot_data,
2025-01-10T13:28:40.4266980Z         request,
2025-01-10T13:28:40.4267140Z         attribute,
2025-01-10T13:28:40.4267290Z     ):
2025-01-10T13:28:40.4267420Z         """
2025-01-10T13:28:40.4267720Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:28:40.4267860Z     
2025-01-10T13:28:40.4268110Z         Parameters:
2025-01-10T13:28:40.4268270Z         -----------
2025-01-10T13:28:40.4269760Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:28:40.4270060Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4270450Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:28:40.4270630Z         """
2025-01-10T13:28:40.4270840Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4271150Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:28:40.4271710Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:28:40.4271970Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:28:40.4272090Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:28:40.4272180Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:28:40.4272280Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:28:40.4272370Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:28:40.4272370Z 
2025-01-10T13:28:40.4272490Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:28:40.4272590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4272610Z 
2025-01-10T13:28:40.4272970Z args = (<function assert_allclose.<locals>.compare at 0x158d89c60>, array([11202.14920452, 13552.38987987, 11630.95782059, 12...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
2025-01-10T13:28:40.4273460Z        12229.96880815, 12113.40540961, 11152.96259546]))
2025-01-10T13:28:40.4273660Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4273670Z 
2025-01-10T13:28:40.4273720Z     @wraps(func)
2025-01-10T13:28:40.4273770Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4273830Z         with self._recreate_cm():
2025-01-10T13:28:40.4273900Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4273960Z E           AssertionError: 
2025-01-10T13:28:40.4274040Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4274090Z E           
2025-01-10T13:28:40.4274150Z E           (shapes (153,), (159,) mismatch)
2025-01-10T13:28:40.4274270Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:28:40.4274370Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:28:40.4274470Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:28:40.4274590Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:28:40.4274690Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:28:40.4274800Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:28:40.4274810Z 
2025-01-10T13:28:40.4274970Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4275140Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data4-plot_data] __
2025-01-10T13:28:40.4275140Z 
2025-01-10T13:28:40.4275340Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a9280>
2025-01-10T13:28:40.4275730Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>
2025-01-10T13:28:40.4275960Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data4-plot_data]>>
2025-01-10T13:28:40.4276030Z attribute = 'plot_data'
2025-01-10T13:28:40.4276040Z 
2025-01-10T13:28:40.4276100Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.4276150Z         "attribute",
2025-01-10T13:28:40.4276200Z         [
2025-01-10T13:28:40.4276250Z             "plot_data",
2025-01-10T13:28:40.4276300Z             "plot_colors",
2025-01-10T13:28:40.4276350Z             "new_bin_edges",
2025-01-10T13:28:40.4276400Z         ],
2025-01-10T13:28:40.4276470Z     )
2025-01-10T13:28:40.4276540Z     def test_prepare_plot_data(
2025-01-10T13:28:40.4276620Z         self,
2025-01-10T13:28:40.4276680Z         plotter_prepare_plot_data,
2025-01-10T13:28:40.4276740Z         request,
2025-01-10T13:28:40.4276800Z         attribute,
2025-01-10T13:28:40.4276850Z     ):
2025-01-10T13:28:40.4276900Z         """
2025-01-10T13:28:40.4277000Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:28:40.4277050Z     
2025-01-10T13:28:40.4277100Z         Parameters:
2025-01-10T13:28:40.4277150Z         -----------
2025-01-10T13:28:40.4277310Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:28:40.4277400Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4277540Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:28:40.4277580Z         """
2025-01-10T13:28:40.4277680Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4277790Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:28:40.4277930Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:28:40.4278060Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:28:40.4278200Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:28:40.4278420Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:28:40.4278520Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:28:40.4278610Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:28:40.4278610Z 
2025-01-10T13:28:40.4278720Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:28:40.4278810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4278810Z 
2025-01-10T13:28:40.4279150Z args = (<function assert_allclose.<locals>.compare at 0x158ceade0>, array([11843.96225504, 11843.96225504, 11843.96225504, 12...1104.14894249, 11194.10880903, 12818.679236  ,
2025-01-10T13:28:40.4279260Z        12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
2025-01-10T13:28:40.4279470Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4279480Z 
2025-01-10T13:28:40.4279530Z     @wraps(func)
2025-01-10T13:28:40.4279590Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4279650Z         with self._recreate_cm():
2025-01-10T13:28:40.4279710Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4279770Z E           AssertionError: 
2025-01-10T13:28:40.4279850Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4279900Z E           
2025-01-10T13:28:40.4279980Z E           (shapes (515,), (508,) mismatch)
2025-01-10T13:28:40.4280100Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:28:40.4280200Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:28:40.4280290Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:28:40.4280410Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:28:40.4280500Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:28:40.4280720Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:28:40.4280720Z 
2025-01-10T13:28:40.4280880Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4281010Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4281400Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4281590Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4281710Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4281950Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4282120Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data5-plot_data] __
2025-01-10T13:28:40.4282120Z 
2025-01-10T13:28:40.4282320Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a94c0>
2025-01-10T13:28:40.4282540Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>
2025-01-10T13:28:40.4282750Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data5-plot_data]>>
2025-01-10T13:28:40.4282810Z attribute = 'plot_data'
2025-01-10T13:28:40.4282810Z 
2025-01-10T13:28:40.4282890Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.4282930Z         "attribute",
2025-01-10T13:28:40.4282980Z         [
2025-01-10T13:28:40.4283030Z             "plot_data",
2025-01-10T13:28:40.4283090Z             "plot_colors",
2025-01-10T13:28:40.4283150Z             "new_bin_edges",
2025-01-10T13:28:40.4283190Z         ],
2025-01-10T13:28:40.4283230Z     )
2025-01-10T13:28:40.4283290Z     def test_prepare_plot_data(
2025-01-10T13:28:40.4283340Z         self,
2025-01-10T13:28:40.4283400Z         plotter_prepare_plot_data,
2025-01-10T13:28:40.4283450Z         request,
2025-01-10T13:28:40.4283820Z         attribute,
2025-01-10T13:28:40.4283880Z     ):
2025-01-10T13:28:40.4283920Z         """
2025-01-10T13:28:40.4284030Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:28:40.4284090Z     
2025-01-10T13:28:40.4284140Z         Parameters:
2025-01-10T13:28:40.4284190Z         -----------
2025-01-10T13:28:40.4284330Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:28:40.4284420Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4284550Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:28:40.4284600Z         """
2025-01-10T13:28:40.4284680Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4284790Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:28:40.4284900Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:28:40.4285020Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:28:40.4285160Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:28:40.4285260Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:28:40.4285370Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:28:40.4285480Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:28:40.4285480Z 
2025-01-10T13:28:40.4285590Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:28:40.4285670Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4285680Z 
2025-01-10T13:28:40.4286040Z args = (<function assert_allclose.<locals>.compare at 0x158d89f80>, array([12467.89648692, 12467.89648692, 12357.74827994, .....), array([13692.75973672, 11362.93720064, 12466.53861691, ...,
2025-01-10T13:28:40.4286120Z        12605.43283975, 11152.96259546, 11172.04481521]))
2025-01-10T13:28:40.4286670Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4286690Z 
2025-01-10T13:28:40.4286740Z     @wraps(func)
2025-01-10T13:28:40.4286820Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4292290Z         with self._recreate_cm():
2025-01-10T13:28:40.4292440Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4292510Z E           AssertionError: 
2025-01-10T13:28:40.4292590Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4292640Z E           
2025-01-10T13:28:40.4292710Z E           (shapes (1481,), (1466,) mismatch)
2025-01-10T13:28:40.4292830Z E            ACTUAL: array([12467.896487, 12467.896487, 12357.74828 , ..., 13068.120893,
2025-01-10T13:28:40.4292900Z E                  11398.237865, 11111.204868])
2025-01-10T13:28:40.4293040Z E            DESIRED: array([13692.759737, 11362.937201, 12466.538617, ..., 12605.43284 ,
2025-01-10T13:28:40.4293110Z E                  11152.962595, 11172.044815])
2025-01-10T13:28:40.4293130Z 
2025-01-10T13:28:40.4293300Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4293450Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4293730Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4294000Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4294130Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4294400Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4294560Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data6-plot_data] __
2025-01-10T13:28:40.4294570Z 
2025-01-10T13:28:40.4294760Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a9700>
2025-01-10T13:28:40.4295310Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>
2025-01-10T13:28:40.4295510Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data6-plot_data]>>
2025-01-10T13:28:40.4295570Z attribute = 'plot_data'
2025-01-10T13:28:40.4295570Z 
2025-01-10T13:28:40.4295630Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.4295680Z         "attribute",
2025-01-10T13:28:40.4295720Z         [
2025-01-10T13:28:40.4295780Z             "plot_data",
2025-01-10T13:28:40.4295850Z             "plot_colors",
2025-01-10T13:28:40.4295900Z             "new_bin_edges",
2025-01-10T13:28:40.4295940Z         ],
2025-01-10T13:28:40.4295980Z     )
2025-01-10T13:28:40.4296040Z     def test_prepare_plot_data(
2025-01-10T13:28:40.4296100Z         self,
2025-01-10T13:28:40.4296170Z         plotter_prepare_plot_data,
2025-01-10T13:28:40.4296220Z         request,
2025-01-10T13:28:40.4296270Z         attribute,
2025-01-10T13:28:40.4296310Z     ):
2025-01-10T13:28:40.4296360Z         """
2025-01-10T13:28:40.4296470Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:28:40.4296520Z     
2025-01-10T13:28:40.4296570Z         Parameters:
2025-01-10T13:28:40.4296610Z         -----------
2025-01-10T13:28:40.4296760Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:28:40.4296840Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4296960Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:28:40.4297010Z         """
2025-01-10T13:28:40.4297090Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4297190Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:28:40.4297300Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:28:40.4297430Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:28:40.4297640Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:28:40.4297740Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:28:40.4297830Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:28:40.4297920Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:28:40.4297930Z 
2025-01-10T13:28:40.4298050Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:28:40.4298140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4298150Z 
2025-01-10T13:28:40.4298500Z args = (<function assert_allclose.<locals>.compare at 0x158cfefc0>, array([11202.14920452, 13552.38987987, 11630.95782059, 12...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
2025-01-10T13:28:40.4298580Z        15754.62784966, 13174.4766832 , 11238.83568899]))
2025-01-10T13:28:40.4298780Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4298790Z 
2025-01-10T13:28:40.4298840Z     @wraps(func)
2025-01-10T13:28:40.4298900Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4298950Z         with self._recreate_cm():
2025-01-10T13:28:40.4299030Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4299090Z E           AssertionError: 
2025-01-10T13:28:40.4299170Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4299210Z E           
2025-01-10T13:28:40.4299280Z E           (shapes (136,), (147,) mismatch)
2025-01-10T13:28:40.4299400Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:28:40.4299700Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:28:40.4299810Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:28:40.4299940Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:28:40.4300040Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:28:40.4300240Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:28:40.4300240Z 
2025-01-10T13:28:40.4300400Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4300580Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data7-plot_data] __
2025-01-10T13:28:40.4300580Z 
2025-01-10T13:28:40.4300780Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a98e0>
2025-01-10T13:28:40.4300990Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>
2025-01-10T13:28:40.4301200Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data7-plot_data]>>
2025-01-10T13:28:40.4301250Z attribute = 'plot_data'
2025-01-10T13:28:40.4301260Z 
2025-01-10T13:28:40.4301320Z     @pytest.mark.parametrize(
2025-01-10T13:28:40.4301370Z         "attribute",
2025-01-10T13:28:40.4301420Z         [
2025-01-10T13:28:40.4301470Z             "plot_data",
2025-01-10T13:28:40.4301520Z             "plot_colors",
2025-01-10T13:28:40.4301570Z             "new_bin_edges",
2025-01-10T13:28:40.4301610Z         ],
2025-01-10T13:28:40.4301650Z     )
2025-01-10T13:28:40.4301710Z     def test_prepare_plot_data(
2025-01-10T13:28:40.4301750Z         self,
2025-01-10T13:28:40.4301820Z         plotter_prepare_plot_data,
2025-01-10T13:28:40.4301860Z         request,
2025-01-10T13:28:40.4301910Z         attribute,
2025-01-10T13:28:40.4301950Z     ):
2025-01-10T13:28:40.4301990Z         """
2025-01-10T13:28:40.4302090Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:28:40.4302140Z     
2025-01-10T13:28:40.4302190Z         Parameters:
2025-01-10T13:28:40.4302230Z         -----------
2025-01-10T13:28:40.4302370Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:28:40.4302510Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4302640Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:28:40.4302680Z         """
2025-01-10T13:28:40.4302760Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4302860Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:28:40.4302980Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:28:40.4303120Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:28:40.4303240Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:28:40.4303330Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:28:40.4303420Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:28:40.4303510Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:28:40.4303510Z 
2025-01-10T13:28:40.4303610Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:28:40.4303710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4303710Z 
2025-01-10T13:28:40.4304070Z args = (<function assert_allclose.<locals>.compare at 0x158d8a660>, array([12467.89648692, 12357.74827994, 11118.74739262, 11...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
2025-01-10T13:28:40.4304140Z        12229.96880815, 12113.40540961, 11152.96259546]))
2025-01-10T13:28:40.4304340Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4304340Z 
2025-01-10T13:28:40.4304390Z     @wraps(func)
2025-01-10T13:28:40.4304450Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4304520Z         with self._recreate_cm():
2025-01-10T13:28:40.4304580Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4304640Z E           AssertionError: 
2025-01-10T13:28:40.4304720Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4304860Z E           
2025-01-10T13:28:40.4304930Z E           (shapes (381,), (379,) mismatch)
2025-01-10T13:28:40.4305050Z E            ACTUAL: array([12467.896487, 12357.74828 , 11118.747393, 11202.149205,
2025-01-10T13:28:40.4305130Z E                  13552.38988 , 11630.957821, 12006.254109, 15295.708346,
2025-01-10T13:28:40.4305230Z E                  11660.899663, 11789.640304, 15161.117263, 12697.545823,...
2025-01-10T13:28:40.4305350Z E            DESIRED: array([12466.538617, 14269.760975, 11910.794005, 11196.260702,
2025-01-10T13:28:40.4305440Z E                  11633.386223, 12079.529869, 11966.991343, 11263.637708,
2025-01-10T13:28:40.4305540Z E                  14098.493392, 13656.398245, 12124.454378, 11838.909334,...
2025-01-10T13:28:40.4305540Z 
2025-01-10T13:28:40.4305700Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4305820Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4306090Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4306310Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4306430Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4306670Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4306830Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl0] _______
2025-01-10T13:28:40.4306830Z 
2025-01-10T13:28:40.4307020Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a9d60>
2025-01-10T13:28:40.4307270Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x157498740>
2025-01-10T13:28:40.4307630Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4307910Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl0]>>
2025-01-10T13:28:40.4307910Z 
2025-01-10T13:28:40.4307970Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4308100Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:28:40.4308140Z     ):
2025-01-10T13:28:40.4308190Z         """
2025-01-10T13:28:40.4308300Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4308350Z     
2025-01-10T13:28:40.4308450Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4308490Z     
2025-01-10T13:28:40.4308550Z         Parameters:
2025-01-10T13:28:40.4308590Z         -----------
2025-01-10T13:28:40.4308710Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:28:40.4308830Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:28:40.4308900Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4308950Z         """
2025-01-10T13:28:40.4309020Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:28:40.4309100Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4309220Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:28:40.4309330Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4309400Z             expected_values = expected.get(
2025-01-10T13:28:40.4309460Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4309520Z             ).values.flatten()
2025-01-10T13:28:40.4309610Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:28:40.4309650Z     
2025-01-10T13:28:40.4309750Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4309820Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4309870Z                     expected_values,
2025-01-10T13:28:40.4309930Z                     actual_values,
2025-01-10T13:28:40.4310320Z                     rtol=0.3,
2025-01-10T13:28:40.4310370Z                     atol=3,
2025-01-10T13:28:40.4310420Z                 )
2025-01-10T13:28:40.4310420Z 
2025-01-10T13:28:40.4310530Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:28:40.4310620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4310620Z 
2025-01-10T13:28:40.4310920Z args = (<function assert_allclose.<locals>.compare at 0x304879c60>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10, ...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4310980Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:28:40.4311180Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4311180Z 
2025-01-10T13:28:40.4311230Z     @wraps(func)
2025-01-10T13:28:40.4311280Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4311350Z         with self._recreate_cm():
2025-01-10T13:28:40.4311400Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4311460Z E           AssertionError: 
2025-01-10T13:28:40.4311530Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4311580Z E           
2025-01-10T13:28:40.4311640Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.4311730Z E           Max absolute difference among violations: 26
2025-01-10T13:28:40.4311830Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.4311950Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.4312030Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.4312160Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4312220Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.4312480Z 
2025-01-10T13:28:40.4312650Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4312780Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4312990Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4313340Z 	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:420)
2025-01-10T13:28:40.4313450Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4313790Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:420 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
2025-01-10T13:28:40.4313950Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl1] _______
2025-01-10T13:28:40.4313950Z 
2025-01-10T13:28:40.4314170Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445a9e20>
2025-01-10T13:28:40.4314400Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x310f72360>
2025-01-10T13:28:40.4314790Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4314980Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl1]>>
2025-01-10T13:28:40.4314980Z 
2025-01-10T13:28:40.4315040Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4315160Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:28:40.4315200Z     ):
2025-01-10T13:28:40.4315250Z         """
2025-01-10T13:28:40.4315350Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4315390Z     
2025-01-10T13:28:40.4315490Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4315550Z     
2025-01-10T13:28:40.4315600Z         Parameters:
2025-01-10T13:28:40.4315650Z         -----------
2025-01-10T13:28:40.4315910Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:28:40.4316020Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:28:40.4316090Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4316130Z         """
2025-01-10T13:28:40.4316200Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:28:40.4316280Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4316420Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:28:40.4316540Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4316610Z             expected_values = expected.get(
2025-01-10T13:28:40.4316660Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4316720Z             ).values.flatten()
2025-01-10T13:28:40.4316810Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:28:40.4316860Z     
2025-01-10T13:28:40.4316960Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4317030Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4317090Z                     expected_values,
2025-01-10T13:28:40.4317140Z                     actual_values,
2025-01-10T13:28:40.4317190Z                     rtol=0.3,
2025-01-10T13:28:40.4317240Z                     atol=3,
2025-01-10T13:28:40.4317290Z                 )
2025-01-10T13:28:40.4317290Z 
2025-01-10T13:28:40.4317390Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:28:40.4317480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4317480Z 
2025-01-10T13:28:40.4317780Z args = (<function assert_allclose.<locals>.compare at 0x169ee1260>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10, ...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4317830Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:28:40.4318120Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4318120Z 
2025-01-10T13:28:40.4318170Z     @wraps(func)
2025-01-10T13:28:40.4318230Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4318290Z         with self._recreate_cm():
2025-01-10T13:28:40.4318350Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4318410Z E           AssertionError: 
2025-01-10T13:28:40.4318480Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4318530Z E           
2025-01-10T13:28:40.4318620Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.4318700Z E           Max absolute difference among violations: 26
2025-01-10T13:28:40.4318800Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.4318910Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.4319000Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.4319130Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4319200Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.4319200Z 
2025-01-10T13:28:40.4319350Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4319500Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl4] _______
2025-01-10T13:28:40.4319510Z 
2025-01-10T13:28:40.4319700Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445aa210>
2025-01-10T13:28:40.4319930Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x16ffe43e0>
2025-01-10T13:28:40.4320310Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4320500Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl4]>>
2025-01-10T13:28:40.4320590Z 
2025-01-10T13:28:40.4320660Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4320780Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:28:40.4320820Z     ):
2025-01-10T13:28:40.4320870Z         """
2025-01-10T13:28:40.4320960Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4321000Z     
2025-01-10T13:28:40.4321100Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4321140Z     
2025-01-10T13:28:40.4321190Z         Parameters:
2025-01-10T13:28:40.4321240Z         -----------
2025-01-10T13:28:40.4321360Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:28:40.4321470Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:28:40.4321540Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4321580Z         """
2025-01-10T13:28:40.4321650Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:28:40.4321730Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4321850Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:28:40.4321970Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4322030Z             expected_values = expected.get(
2025-01-10T13:28:40.4322090Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4322150Z             ).values.flatten()
2025-01-10T13:28:40.4322250Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:28:40.4322290Z     
2025-01-10T13:28:40.4322390Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4322460Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4322520Z                     expected_values,
2025-01-10T13:28:40.4322570Z                     actual_values,
2025-01-10T13:28:40.4322620Z                     rtol=0.3,
2025-01-10T13:28:40.4322730Z                     atol=3,
2025-01-10T13:28:40.4322780Z                 )
2025-01-10T13:28:40.4322780Z 
2025-01-10T13:28:40.4322890Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:28:40.4322970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4322970Z 
2025-01-10T13:28:40.4323290Z args = (<function assert_allclose.<locals>.compare at 0x305007e20>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7, ...]), array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:28:40.4323340Z          2,   5,   5,   5,   5,   0,   0]))
2025-01-10T13:28:40.4323540Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4323540Z 
2025-01-10T13:28:40.4323590Z     @wraps(func)
2025-01-10T13:28:40.4323640Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4323700Z         with self._recreate_cm():
2025-01-10T13:28:40.4323760Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4323820Z E           AssertionError: 
2025-01-10T13:28:40.4323900Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4323940Z E           
2025-01-10T13:28:40.4324000Z E           Mismatched elements: 4 / 20 (20%)
2025-01-10T13:28:40.4324090Z E           Max absolute difference among violations: 24
2025-01-10T13:28:40.4324180Z E           Max relative difference among violations: 0.65
2025-01-10T13:28:40.4324300Z E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:28:40.4324360Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:28:40.4324490Z E            DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:28:40.4324560Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:28:40.4324560Z 
2025-01-10T13:28:40.4324710Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4324890Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4325110Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4325300Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4325420Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4325650Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4325810Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl5] _______
2025-01-10T13:28:40.4325810Z 
2025-01-10T13:28:40.4326010Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445aa2d0>
2025-01-10T13:28:40.4326240Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x30f913770>
2025-01-10T13:28:40.4326600Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4326790Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl5]>>
2025-01-10T13:28:40.4326860Z 
2025-01-10T13:28:40.4326930Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4327050Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:28:40.4327090Z     ):
2025-01-10T13:28:40.4327140Z         """
2025-01-10T13:28:40.4327230Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4327280Z     
2025-01-10T13:28:40.4327370Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4327410Z     
2025-01-10T13:28:40.4327460Z         Parameters:
2025-01-10T13:28:40.4327510Z         -----------
2025-01-10T13:28:40.4327630Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:28:40.4327830Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:28:40.4327900Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4327950Z         """
2025-01-10T13:28:40.4328010Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:28:40.4328090Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4328210Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:28:40.4328320Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4328380Z             expected_values = expected.get(
2025-01-10T13:28:40.4328440Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4328500Z             ).values.flatten()
2025-01-10T13:28:40.4328590Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:28:40.4328640Z     
2025-01-10T13:28:40.4328730Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4328800Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4328860Z                     expected_values,
2025-01-10T13:28:40.4328920Z                     actual_values,
2025-01-10T13:28:40.4328970Z                     rtol=0.3,
2025-01-10T13:28:40.4329020Z                     atol=3,
2025-01-10T13:28:40.4329070Z                 )
2025-01-10T13:28:40.4329070Z 
2025-01-10T13:28:40.4329170Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:28:40.4329270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4329270Z 
2025-01-10T13:28:40.4329570Z args = (<function assert_allclose.<locals>.compare at 0x166006340>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10, ...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4329630Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:28:40.4329820Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4329830Z 
2025-01-10T13:28:40.4330570Z     @wraps(func)
2025-01-10T13:28:40.4330630Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4330690Z         with self._recreate_cm():
2025-01-10T13:28:40.4330750Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4330800Z E           AssertionError: 
2025-01-10T13:28:40.4330880Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4330930Z E           
2025-01-10T13:28:40.4330990Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.4331080Z E           Max absolute difference among violations: 26
2025-01-10T13:28:40.4331180Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.4331300Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.4331360Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.4331480Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4331560Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.4331560Z 
2025-01-10T13:28:40.4331720Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4331840Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4332060Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4332320Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4332440Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4332720Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4332870Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl7] _______
2025-01-10T13:28:40.4333110Z 
2025-01-10T13:28:40.4333320Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445aa450>
2025-01-10T13:28:40.4333550Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x15749b8c0>
2025-01-10T13:28:40.4333910Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4334090Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl7]>>
2025-01-10T13:28:40.4334100Z 
2025-01-10T13:28:40.4334150Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4334280Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:28:40.4334320Z     ):
2025-01-10T13:28:40.4334360Z         """
2025-01-10T13:28:40.4334460Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4334500Z     
2025-01-10T13:28:40.4334600Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4334640Z     
2025-01-10T13:28:40.4334700Z         Parameters:
2025-01-10T13:28:40.4334750Z         -----------
2025-01-10T13:28:40.4334870Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:28:40.4334980Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:28:40.4335050Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4335090Z         """
2025-01-10T13:28:40.4335160Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:28:40.4335230Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4335360Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:28:40.4335460Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4335530Z             expected_values = expected.get(
2025-01-10T13:28:40.4335590Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4335650Z             ).values.flatten()
2025-01-10T13:28:40.4335810Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:28:40.4335850Z     
2025-01-10T13:28:40.4335950Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4336020Z                 np.testing.assert_allclose(
2025-01-10T13:28:40.4336070Z                     expected_values,
2025-01-10T13:28:40.4336120Z                     actual_values,
2025-01-10T13:28:40.4336170Z                     rtol=0.3,
2025-01-10T13:28:40.4336220Z                     atol=3,
2025-01-10T13:28:40.4336260Z                 )
2025-01-10T13:28:40.4336310Z             else:
2025-01-10T13:28:40.4336410Z                 assert np.array_equal(expected_values, actual_values)
2025-01-10T13:28:40.4336450Z     
2025-01-10T13:28:40.4336530Z         labels = expected["plot_data_hdf/scalars"]
2025-01-10T13:28:40.4336620Z         for index1, data in enumerate(fig.get_children()):
2025-01-10T13:28:40.4336690Z             if isinstance(data.get_label(), str):
2025-01-10T13:28:40.4336740Z                 assert (
2025-01-10T13:28:40.4336830Z                     getattr(labels, "label" + str(index1)).decode()
2025-01-10T13:28:40.4336890Z                     == data.get_label()
2025-01-10T13:28:40.4336930Z                 )
2025-01-10T13:28:40.4337000Z             if isinstance(data, Line2D):
2025-01-10T13:28:40.4337060Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4337120Z                     data.get_xydata(),
2025-01-10T13:28:40.4337240Z                     expected.get("plot_data_hdf/" + "data" + str(index1)),
2025-01-10T13:28:40.4337300Z                     rtol=0.3,
2025-01-10T13:28:40.4337350Z                     atol=3,
2025-01-10T13:28:40.4337390Z                 )
2025-01-10T13:28:40.4337390Z 
2025-01-10T13:28:40.4337500Z tardis/visualization/tools/tests/test_liv_plot.py:335: 
2025-01-10T13:28:40.4337580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4337660Z 
2025-01-10T13:28:40.4337840Z args = (<function assert_allclose.<locals>.compare at 0x30507e700>, array([[1.10e+04, 9.00e+00],
2025-01-10T13:28:40.4337900Z        [1.19e+04, 9.00e+00],...,
2025-01-10T13:28:40.4337950Z        [1.82e+04, 0.00e+00],
2025-01-10T13:28:40.4338000Z        [1.91e+04, 0.00e+00],
2025-01-10T13:28:40.4338050Z        [1.91e+04, 0.00e+00],
2025-01-10T13:28:40.4338100Z        [2.00e+04, 0.00e+00]]))
2025-01-10T13:28:40.4338310Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4338320Z 
2025-01-10T13:28:40.4338360Z     @wraps(func)
2025-01-10T13:28:40.4338430Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4338480Z         with self._recreate_cm():
2025-01-10T13:28:40.4338540Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4338600Z E           AssertionError: 
2025-01-10T13:28:40.4338670Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4338720Z E           
2025-01-10T13:28:40.4338780Z E           Mismatched elements: 2 / 40 (5%)
2025-01-10T13:28:40.4338870Z E           Max absolute difference among violations: 4.
2025-01-10T13:28:40.4338970Z E           Max relative difference among violations: 1.33333333
2025-01-10T13:28:40.4339030Z E            ACTUAL: array([[1.10e+04, 9.00e+00],
2025-01-10T13:28:40.4339090Z E                  [1.19e+04, 9.00e+00],
2025-01-10T13:28:40.4339150Z E                  [1.19e+04, 5.00e+00],...
2025-01-10T13:28:40.4339210Z E            DESIRED: array([[1.10e+04, 1.10e+01],
2025-01-10T13:28:40.4339270Z E                  [1.19e+04, 1.10e+01],
2025-01-10T13:28:40.4339320Z E                  [1.19e+04, 5.00e+00],...
2025-01-10T13:28:40.4339330Z 
2025-01-10T13:28:40.4339480Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4339730Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4339950Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4340280Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4340400Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4340630Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4340790Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply0] _______
2025-01-10T13:28:40.4340800Z 
2025-01-10T13:28:40.4341000Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445ab170>
2025-01-10T13:28:40.4341230Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x32009ed20>
2025-01-10T13:28:40.4341300Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4341420Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:28:40.4341520Z               'mode': 'lines...': 'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:28:40.4341670Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4341860Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply0]>>
2025-01-10T13:28:40.4341860Z 
2025-01-10T13:28:40.4341920Z     def test_generate_plot_ply(
2025-01-10T13:28:40.4342050Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4342090Z     ):
2025-01-10T13:28:40.4342140Z         """
2025-01-10T13:28:40.4342230Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4342270Z     
2025-01-10T13:28:40.4342370Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4342410Z     
2025-01-10T13:28:40.4342460Z         Parameters:
2025-01-10T13:28:40.4342510Z         ----------
2025-01-10T13:28:40.4342620Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:28:40.4342780Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:28:40.4342860Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4342900Z         """
2025-01-10T13:28:40.4342970Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4343050Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4343180Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4343220Z     
2025-01-10T13:28:40.4343330Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4343400Z             expected_values = expected.get(
2025-01-10T13:28:40.4343460Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4343510Z             ).values.flatten()
2025-01-10T13:28:40.4343620Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:28:40.4343660Z     
2025-01-10T13:28:40.4343760Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4343820Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4343880Z                     expected_values,
2025-01-10T13:28:40.4343940Z                     actual_values,
2025-01-10T13:28:40.4343990Z                     rtol=0.3,
2025-01-10T13:28:40.4344040Z                     atol=3,
2025-01-10T13:28:40.4344080Z                 )
2025-01-10T13:28:40.4344090Z 
2025-01-10T13:28:40.4344190Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:28:40.4344280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4344280Z 
2025-01-10T13:28:40.4344580Z args = (<function assert_allclose.<locals>.compare at 0x17b9ae7a0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10, ...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4344630Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:28:40.4344830Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4344890Z 
2025-01-10T13:28:40.4344940Z     @wraps(func)
2025-01-10T13:28:40.4345000Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4345060Z         with self._recreate_cm():
2025-01-10T13:28:40.4345110Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4345170Z E           AssertionError: 
2025-01-10T13:28:40.4345250Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4345290Z E           
2025-01-10T13:28:40.4345360Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.4345440Z E           Max absolute difference among violations: 26
2025-01-10T13:28:40.4345540Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.4345660Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.4345730Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.4345850Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4345920Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.4345920Z 
2025-01-10T13:28:40.4346080Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4346200Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4346370Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4346700Z 	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:522)
2025-01-10T13:28:40.4346820Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4347160Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:522 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
2025-01-10T13:28:40.4347310Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply1] _______
2025-01-10T13:28:40.4347360Z 
2025-01-10T13:28:40.4347560Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445ab230>
2025-01-10T13:28:40.4347800Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x16e1fc140>
2025-01-10T13:28:40.4347870Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4347980Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:28:40.4348090Z               'mode': 'lines...': 'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:28:40.4348230Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4348420Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply1]>>
2025-01-10T13:28:40.4348420Z 
2025-01-10T13:28:40.4348480Z     def test_generate_plot_ply(
2025-01-10T13:28:40.4348610Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4348650Z     ):
2025-01-10T13:28:40.4348700Z         """
2025-01-10T13:28:40.4348790Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4348840Z     
2025-01-10T13:28:40.4348930Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4348980Z     
2025-01-10T13:28:40.4349020Z         Parameters:
2025-01-10T13:28:40.4349070Z         ----------
2025-01-10T13:28:40.4349190Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:28:40.4349290Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:28:40.4349360Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4349400Z         """
2025-01-10T13:28:40.4349470Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4349540Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4354110Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4354200Z     
2025-01-10T13:28:40.4354330Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4354760Z             expected_values = expected.get(
2025-01-10T13:28:40.4354830Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4354880Z             ).values.flatten()
2025-01-10T13:28:40.4354990Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:28:40.4355030Z     
2025-01-10T13:28:40.4355120Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4355190Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4355250Z                     expected_values,
2025-01-10T13:28:40.4355300Z                     actual_values,
2025-01-10T13:28:40.4355390Z                     rtol=0.3,
2025-01-10T13:28:40.4355470Z                     atol=3,
2025-01-10T13:28:40.4355520Z                 )
2025-01-10T13:28:40.4355520Z 
2025-01-10T13:28:40.4355630Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:28:40.4355720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4355730Z 
2025-01-10T13:28:40.4356030Z args = (<function assert_allclose.<locals>.compare at 0x17b9af4c0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10, ...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4356090Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:28:40.4356290Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4356290Z 
2025-01-10T13:28:40.4356340Z     @wraps(func)
2025-01-10T13:28:40.4356400Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4356450Z         with self._recreate_cm():
2025-01-10T13:28:40.4356510Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4356570Z E           AssertionError: 
2025-01-10T13:28:40.4356640Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4356690Z E           
2025-01-10T13:28:40.4356750Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.4357110Z E           Max absolute difference among violations: 26
2025-01-10T13:28:40.4357200Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.4357330Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.4357390Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.4357510Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4357580Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.4357580Z 
2025-01-10T13:28:40.4357730Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4357890Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply4] _______
2025-01-10T13:28:40.4357890Z 
2025-01-10T13:28:40.4358080Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445ab680>
2025-01-10T13:28:40.4358320Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x310f46c90>
2025-01-10T13:28:40.4358400Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4358510Z     'data': [{'line': {'color': 'rgb(127, 0, 0)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:28:40.4358610Z               'mode': 'lines...': 'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:28:40.4358760Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4358950Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply4]>>
2025-01-10T13:28:40.4358950Z 
2025-01-10T13:28:40.4359010Z     def test_generate_plot_ply(
2025-01-10T13:28:40.4359140Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4359180Z     ):
2025-01-10T13:28:40.4359220Z         """
2025-01-10T13:28:40.4359320Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4359360Z     
2025-01-10T13:28:40.4359540Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4359590Z     
2025-01-10T13:28:40.4359640Z         Parameters:
2025-01-10T13:28:40.4359680Z         ----------
2025-01-10T13:28:40.4359800Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:28:40.4359900Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:28:40.4359970Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4360020Z         """
2025-01-10T13:28:40.4360090Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4360160Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4360290Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4360340Z     
2025-01-10T13:28:40.4360450Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4360510Z             expected_values = expected.get(
2025-01-10T13:28:40.4360570Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4360630Z             ).values.flatten()
2025-01-10T13:28:40.4360740Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:28:40.4360780Z     
2025-01-10T13:28:40.4360880Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4360940Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4361000Z                     expected_values,
2025-01-10T13:28:40.4361050Z                     actual_values,
2025-01-10T13:28:40.4361100Z                     rtol=0.3,
2025-01-10T13:28:40.4361150Z                     atol=3,
2025-01-10T13:28:40.4361190Z                 )
2025-01-10T13:28:40.4361200Z 
2025-01-10T13:28:40.4361300Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:28:40.4361390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4361390Z 
2025-01-10T13:28:40.4361690Z args = (<function assert_allclose.<locals>.compare at 0x169f77ce0>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7, ...]), array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:28:40.4361810Z          2,   5,   5,   5,   5,   0,   0]))
2025-01-10T13:28:40.4362010Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4362010Z 
2025-01-10T13:28:40.4362060Z     @wraps(func)
2025-01-10T13:28:40.4362120Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4362170Z         with self._recreate_cm():
2025-01-10T13:28:40.4362230Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4362290Z E           AssertionError: 
2025-01-10T13:28:40.4362360Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4362400Z E           
2025-01-10T13:28:40.4362470Z E           Mismatched elements: 4 / 20 (20%)
2025-01-10T13:28:40.4362560Z E           Max absolute difference among violations: 24
2025-01-10T13:28:40.4362640Z E           Max relative difference among violations: 0.65
2025-01-10T13:28:40.4362770Z E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:28:40.4362840Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:28:40.4362960Z E            DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:28:40.4363030Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:28:40.4363030Z 
2025-01-10T13:28:40.4363180Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4363310Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4363640Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4363840Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4363970Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4364310Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4364470Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply5] _______
2025-01-10T13:28:40.4364470Z 
2025-01-10T13:28:40.4364660Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445ab740>
2025-01-10T13:28:40.4364890Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x3264b0bf0>
2025-01-10T13:28:40.4364960Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4365070Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:28:40.4365170Z               'mode': 'lines...': 'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:28:40.4365320Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4365510Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply5]>>
2025-01-10T13:28:40.4365520Z 
2025-01-10T13:28:40.4365580Z     def test_generate_plot_ply(
2025-01-10T13:28:40.4365710Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4365750Z     ):
2025-01-10T13:28:40.4365790Z         """
2025-01-10T13:28:40.4365890Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4365930Z     
2025-01-10T13:28:40.4366030Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4366070Z     
2025-01-10T13:28:40.4366120Z         Parameters:
2025-01-10T13:28:40.4366160Z         ----------
2025-01-10T13:28:40.4366280Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:28:40.4366380Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:28:40.4366450Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4366490Z         """
2025-01-10T13:28:40.4366550Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4366690Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4366820Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4366860Z     
2025-01-10T13:28:40.4366970Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4367040Z             expected_values = expected.get(
2025-01-10T13:28:40.4367100Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4367160Z             ).values.flatten()
2025-01-10T13:28:40.4367260Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:28:40.4367300Z     
2025-01-10T13:28:40.4367400Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4367460Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4367520Z                     expected_values,
2025-01-10T13:28:40.4367570Z                     actual_values,
2025-01-10T13:28:40.4367620Z                     rtol=0.3,
2025-01-10T13:28:40.4368540Z                     atol=3,
2025-01-10T13:28:40.4368730Z                 )
2025-01-10T13:28:40.4368750Z 
2025-01-10T13:28:40.4369060Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:28:40.4369290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4369300Z 
2025-01-10T13:28:40.4370140Z args = (<function assert_allclose.<locals>.compare at 0x158d82e80>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10, ...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4370300Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:28:40.4370820Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4370830Z 
2025-01-10T13:28:40.4370980Z     @wraps(func)
2025-01-10T13:28:40.4371140Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4371310Z         with self._recreate_cm():
2025-01-10T13:28:40.4371480Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4372210Z E           AssertionError: 
2025-01-10T13:28:40.4372420Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4372570Z E           
2025-01-10T13:28:40.4372760Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.4372980Z E           Max absolute difference among violations: 26
2025-01-10T13:28:40.4373250Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.4373570Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.4373740Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.4374060Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.4374230Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.4374240Z 
2025-01-10T13:28:40.4374660Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4374990Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4375620Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4376320Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4376640Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4377400Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4377840Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply7] _______
2025-01-10T13:28:40.4377850Z 
2025-01-10T13:28:40.4378670Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x1445ab8c0>
2025-01-10T13:28:40.4379440Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x159dead80>
2025-01-10T13:28:40.4380340Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4380660Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:28:40.4381160Z               'mode': 'lines...': 'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:28:40.4381570Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x15444c710>)
2025-01-10T13:28:40.4382090Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply7]>>
2025-01-10T13:28:40.4382100Z 
2025-01-10T13:28:40.4382280Z     def test_generate_plot_ply(
2025-01-10T13:28:40.4382630Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4382760Z     ):
2025-01-10T13:28:40.4382890Z         """
2025-01-10T13:28:40.4383150Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:28:40.4383280Z     
2025-01-10T13:28:40.4384650Z         Compares generated plot data with regression data.
2025-01-10T13:28:40.4384810Z     
2025-01-10T13:28:40.4384880Z         Parameters:
2025-01-10T13:28:40.4384930Z         ----------
2025-01-10T13:28:40.4385060Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:28:40.4385160Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:28:40.4385230Z         request: Pytest's request fixture.
2025-01-10T13:28:40.4385270Z         """
2025-01-10T13:28:40.4385330Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4385410Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4385550Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4385590Z     
2025-01-10T13:28:40.4385700Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:28:40.4385770Z             expected_values = expected.get(
2025-01-10T13:28:40.4385820Z                 "plot_data_hdf/" + item
2025-01-10T13:28:40.4385880Z             ).values.flatten()
2025-01-10T13:28:40.4386500Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:28:40.4386550Z     
2025-01-10T13:28:40.4386650Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:28:40.4386720Z                 np.testing.assert_allclose(
2025-01-10T13:28:40.4386780Z                     expected_values,
2025-01-10T13:28:40.4386830Z                     actual_values,
2025-01-10T13:28:40.4386880Z                     rtol=0.3,
2025-01-10T13:28:40.4386930Z                     atol=3,
2025-01-10T13:28:40.4386980Z                 )
2025-01-10T13:28:40.4387020Z             else:
2025-01-10T13:28:40.4387130Z                 assert np.array_equal(expected_values, actual_values)
2025-01-10T13:28:40.4387210Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4387290Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4387340Z             if data.stackgroup:
2025-01-10T13:28:40.4387400Z                 assert (
2025-01-10T13:28:40.4387460Z                     data.stackgroup
2025-01-10T13:28:40.4387510Z                     == getattr(
2025-01-10T13:28:40.4387590Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4387670Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4387720Z                     ).decode()
2025-01-10T13:28:40.4387760Z                 )
2025-01-10T13:28:40.4387820Z             if data.name:
2025-01-10T13:28:40.4387860Z                 assert (
2025-01-10T13:28:40.4387910Z                     data.name
2025-01-10T13:28:40.4388070Z                     == getattr(
2025-01-10T13:28:40.4388200Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4388270Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4388320Z                     ).decode()
2025-01-10T13:28:40.4388370Z                 )
2025-01-10T13:28:40.4388440Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4388780Z                 data.x,
2025-01-10T13:28:40.4388880Z                 expected.get(group + "x").values.flatten(),
2025-01-10T13:28:40.4388940Z                 rtol=0.3,
2025-01-10T13:28:40.4388980Z                 atol=3,
2025-01-10T13:28:40.4389030Z             )
2025-01-10T13:28:40.4389100Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4389150Z                 data.y,
2025-01-10T13:28:40.4389230Z                 expected.get(group + "y").values.flatten(),
2025-01-10T13:28:40.4389280Z                 rtol=0.3,
2025-01-10T13:28:40.4389320Z                 atol=3,
2025-01-10T13:28:40.4389370Z             )
2025-01-10T13:28:40.4389370Z 
2025-01-10T13:28:40.4389480Z tardis/visualization/tools/tests/test_liv_plot.py:518: 
2025-01-10T13:28:40.4389580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4389580Z 
2025-01-10T13:28:40.4389890Z args = (<function assert_allclose.<locals>.compare at 0x158d82ca0>, array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]), array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4389940Z         0,  0,  0]))
2025-01-10T13:28:40.4390150Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:28:40.4390160Z 
2025-01-10T13:28:40.4390210Z     @wraps(func)
2025-01-10T13:28:40.4390270Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4390330Z         with self._recreate_cm():
2025-01-10T13:28:40.4390390Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4390450Z E           AssertionError: 
2025-01-10T13:28:40.4390530Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.4390570Z E           
2025-01-10T13:28:40.4390640Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.4390730Z E           Max absolute difference among violations: 4
2025-01-10T13:28:40.4390830Z E           Max relative difference among violations: 1.33333333
2025-01-10T13:28:40.4390940Z E            ACTUAL: array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
2025-01-10T13:28:40.4391140Z E            DESIRED: array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4391190Z E                   0,  0,  0])
2025-01-10T13:28:40.4391200Z 
2025-01-10T13:28:40.4391360Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4391490Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:28:40.4391820Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:28:40.4392020Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:28:40.4392150Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:28:40.4392390Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:28:40.4392580Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data0] _
2025-01-10T13:28:40.4392580Z 
2025-01-10T13:28:40.4392790Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459ef30>
2025-01-10T13:28:40.4393030Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4393280Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x159da5b20>
2025-01-10T13:28:40.4393500Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data0]>>
2025-01-10T13:28:40.4393500Z 
2025-01-10T13:28:40.4393560Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4393620Z         self,
2025-01-10T13:28:40.4393680Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4393740Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4393790Z         request,
2025-01-10T13:28:40.4393880Z     ):
2025-01-10T13:28:40.4393970Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4394110Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4394180Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4394310Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4394370Z             plot_object = getattr(
2025-01-10T13:28:40.4394470Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4394510Z             )
2025-01-10T13:28:40.4394590Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4394710Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4394790Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4394860Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4394960Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4395010Z                 )
2025-01-10T13:28:40.4395010Z 
2025-01-10T13:28:40.4395120Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4395210Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4395220Z 
2025-01-10T13:28:40.4395570Z args = (<function assert_allclose.<locals>.compare at 0x304a6c180>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06, .....), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:28:40.4395650Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4395850Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4395860Z 
2025-01-10T13:28:40.4395900Z     @wraps(func)
2025-01-10T13:28:40.4395960Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4396020Z         with self._recreate_cm():
2025-01-10T13:28:40.4396080Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4396140Z E           AssertionError: 
2025-01-10T13:28:40.4396280Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4396320Z E           
2025-01-10T13:28:40.4396390Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.4396500Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:28:40.4396600Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.4396730Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4396800Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4396920Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4396990Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4396990Z 
2025-01-10T13:28:40.4397140Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4397320Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data1] _
2025-01-10T13:28:40.4397330Z 
2025-01-10T13:28:40.4397530Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459f680>
2025-01-10T13:28:40.4397760Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4398010Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x159da7c20>
2025-01-10T13:28:40.4398220Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data1]>>
2025-01-10T13:28:40.4398220Z 
2025-01-10T13:28:40.4398290Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4398340Z         self,
2025-01-10T13:28:40.4398400Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4398460Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4398510Z         request,
2025-01-10T13:28:40.4398550Z     ):
2025-01-10T13:28:40.4398630Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4398820Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4398880Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4399020Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4399070Z             plot_object = getattr(
2025-01-10T13:28:40.4399170Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4399210Z             )
2025-01-10T13:28:40.4399280Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4399410Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4399480Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4399550Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4399650Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4399690Z                 )
2025-01-10T13:28:40.4399700Z 
2025-01-10T13:28:40.4399820Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4399910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4399910Z 
2025-01-10T13:28:40.4400260Z args = (<function assert_allclose.<locals>.compare at 0x304a37920>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06, .....), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:28:40.4400330Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4400530Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4400540Z 
2025-01-10T13:28:40.4400580Z     @wraps(func)
2025-01-10T13:28:40.4400640Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4400700Z         with self._recreate_cm():
2025-01-10T13:28:40.4400760Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4400820Z E           AssertionError: 
2025-01-10T13:28:40.4400900Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4401000Z E           
2025-01-10T13:28:40.4401070Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.4401170Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:28:40.4401270Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.4401400Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4401460Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4401590Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4401650Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4401650Z 
2025-01-10T13:28:40.4401800Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4401970Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data2] _
2025-01-10T13:28:40.4401980Z 
2025-01-10T13:28:40.4402190Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459faa0>
2025-01-10T13:28:40.4402410Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4402660Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x16e4a1490>
2025-01-10T13:28:40.4402870Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data2]>>
2025-01-10T13:28:40.4402880Z 
2025-01-10T13:28:40.4402940Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4402980Z         self,
2025-01-10T13:28:40.4403050Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4403110Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4403150Z         request,
2025-01-10T13:28:40.4403190Z     ):
2025-01-10T13:28:40.4403270Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4403450Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4403520Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4403650Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4403710Z             plot_object = getattr(
2025-01-10T13:28:40.4403810Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4403850Z             )
2025-01-10T13:28:40.4403920Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4404040Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4404120Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4404190Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4404280Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4404330Z                 )
2025-01-10T13:28:40.4404330Z 
2025-01-10T13:28:40.4404440Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4404530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4404530Z 
2025-01-10T13:28:40.4404880Z args = (<function assert_allclose.<locals>.compare at 0x15ccc3e20>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06, .....), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:28:40.4404960Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4405160Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4405160Z 
2025-01-10T13:28:40.4405210Z     @wraps(func)
2025-01-10T13:28:40.4405260Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4405320Z         with self._recreate_cm():
2025-01-10T13:28:40.4405380Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4405440Z E           AssertionError: 
2025-01-10T13:28:40.4405510Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4405890Z E           
2025-01-10T13:28:40.4405970Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.4406070Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:28:40.4406170Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.4406300Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4406360Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4406490Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4406560Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4406560Z 
2025-01-10T13:28:40.4406710Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4406880Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data3] _
2025-01-10T13:28:40.4406880Z 
2025-01-10T13:28:40.4407090Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459fbf0>
2025-01-10T13:28:40.4407330Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4407570Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x310ed2f30>
2025-01-10T13:28:40.4407790Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data3]>>
2025-01-10T13:28:40.4407790Z 
2025-01-10T13:28:40.4407850Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4407900Z         self,
2025-01-10T13:28:40.4407970Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4408020Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4408070Z         request,
2025-01-10T13:28:40.4408110Z     ):
2025-01-10T13:28:40.4408190Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4408330Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4408610Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4408750Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4408810Z             plot_object = getattr(
2025-01-10T13:28:40.4408910Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4408950Z             )
2025-01-10T13:28:40.4409020Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4409150Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4409220Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4409290Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4409390Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4409440Z                 )
2025-01-10T13:28:40.4409440Z 
2025-01-10T13:28:40.4409550Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4409640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4409650Z 
2025-01-10T13:28:40.4410000Z args = (<function assert_allclose.<locals>.compare at 0x15ccc31a0>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06, .....), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:28:40.4410070Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4410270Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4410270Z 
2025-01-10T13:28:40.4410320Z     @wraps(func)
2025-01-10T13:28:40.4410370Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4410430Z         with self._recreate_cm():
2025-01-10T13:28:40.4410490Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4410540Z E           AssertionError: 
2025-01-10T13:28:40.4410620Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4410670Z E           
2025-01-10T13:28:40.4410740Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.4410890Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:28:40.4411000Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.4411120Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4411190Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4411310Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4411390Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4411390Z 
2025-01-10T13:28:40.4411540Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4411710Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data4] _
2025-01-10T13:28:40.4411710Z 
2025-01-10T13:28:40.4411910Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459fce0>
2025-01-10T13:28:40.4412150Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4412390Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x158fb19d0>
2025-01-10T13:28:40.4412610Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data4]>>
2025-01-10T13:28:40.4412610Z 
2025-01-10T13:28:40.4412680Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4412730Z         self,
2025-01-10T13:28:40.4412790Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4412850Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4412900Z         request,
2025-01-10T13:28:40.4412940Z     ):
2025-01-10T13:28:40.4413020Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4413160Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4413270Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4413410Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4413470Z             plot_object = getattr(
2025-01-10T13:28:40.4413560Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4413610Z             )
2025-01-10T13:28:40.4413680Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4413800Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4413870Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4413940Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4414040Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4414080Z                 )
2025-01-10T13:28:40.4414080Z 
2025-01-10T13:28:40.4414190Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4414280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4414280Z 
2025-01-10T13:28:40.4414630Z args = (<function assert_allclose.<locals>.compare at 0x15ccc1da0>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06, .....), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:28:40.4414700Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4414910Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4414910Z 
2025-01-10T13:28:40.4414960Z     @wraps(func)
2025-01-10T13:28:40.4415010Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4415070Z         with self._recreate_cm():
2025-01-10T13:28:40.4415130Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4415190Z E           AssertionError: 
2025-01-10T13:28:40.4415270Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4415310Z E           
2025-01-10T13:28:40.4415380Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.4415540Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:28:40.4415650Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.4415780Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4415840Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4415970Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4416030Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4416030Z 
2025-01-10T13:28:40.4416190Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4416360Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data5] _
2025-01-10T13:28:40.4416360Z 
2025-01-10T13:28:40.4416560Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459fda0>
2025-01-10T13:28:40.4416790Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4417050Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x16e6d31a0>
2025-01-10T13:28:40.4417260Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data5]>>
2025-01-10T13:28:40.4417270Z 
2025-01-10T13:28:40.4417330Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4417380Z         self,
2025-01-10T13:28:40.4417440Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4417500Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4417550Z         request,
2025-01-10T13:28:40.4417590Z     ):
2025-01-10T13:28:40.4417670Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4417800Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4417860Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4418040Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4418110Z             plot_object = getattr(
2025-01-10T13:28:40.4418210Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4418330Z             )
2025-01-10T13:28:40.4418450Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4418570Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4418650Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4418720Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4418810Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4418850Z                 )
2025-01-10T13:28:40.4418860Z 
2025-01-10T13:28:40.4418960Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4419050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4419060Z 
2025-01-10T13:28:40.4419410Z args = (<function assert_allclose.<locals>.compare at 0x15ccc3d80>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06, .....), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:28:40.4419490Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4419690Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4419690Z 
2025-01-10T13:28:40.4419740Z     @wraps(func)
2025-01-10T13:28:40.4419800Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4420020Z         with self._recreate_cm():
2025-01-10T13:28:40.4420080Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4420140Z E           AssertionError: 
2025-01-10T13:28:40.4420210Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4420260Z E           
2025-01-10T13:28:40.4420330Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.4420440Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:28:40.4420750Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.4420880Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4420940Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4421060Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4421130Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4421130Z 
2025-01-10T13:28:40.4421280Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4421450Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data6] _
2025-01-10T13:28:40.4421450Z 
2025-01-10T13:28:40.4421650Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459fe60>
2025-01-10T13:28:40.4421880Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4422130Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x16e6a30b0>
2025-01-10T13:28:40.4422350Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data6]>>
2025-01-10T13:28:40.4422350Z 
2025-01-10T13:28:40.4422410Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4422460Z         self,
2025-01-10T13:28:40.4422530Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4422580Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4422630Z         request,
2025-01-10T13:28:40.4422670Z     ):
2025-01-10T13:28:40.4422750Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4422890Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4422950Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4423090Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4423230Z             plot_object = getattr(
2025-01-10T13:28:40.4423340Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4428280Z             )
2025-01-10T13:28:40.4428430Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4428550Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4428630Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4428700Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4428800Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4428840Z                 )
2025-01-10T13:28:40.4428850Z 
2025-01-10T13:28:40.4428950Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4429040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4429040Z 
2025-01-10T13:28:40.4429400Z args = (<function assert_allclose.<locals>.compare at 0x304a30180>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06, .....), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:28:40.4429490Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4429690Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4429690Z 
2025-01-10T13:28:40.4429730Z     @wraps(func)
2025-01-10T13:28:40.4429790Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4429850Z         with self._recreate_cm():
2025-01-10T13:28:40.4429910Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4429960Z E           AssertionError: 
2025-01-10T13:28:40.4430040Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4430090Z E           
2025-01-10T13:28:40.4430160Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.4430270Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:28:40.4430760Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.4430890Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4430950Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4431080Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4431150Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4431150Z 
2025-01-10T13:28:40.4431300Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4431470Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data7] _
2025-01-10T13:28:40.4431480Z 
2025-01-10T13:28:40.4431670Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459ff20>
2025-01-10T13:28:40.4431900Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4432160Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x158eedac0>
2025-01-10T13:28:40.4432370Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data7]>>
2025-01-10T13:28:40.4432370Z 
2025-01-10T13:28:40.4432440Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4432480Z         self,
2025-01-10T13:28:40.4432550Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4432610Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4432650Z         request,
2025-01-10T13:28:40.4432690Z     ):
2025-01-10T13:28:40.4432770Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4432900Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4432960Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4433100Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4433360Z             plot_object = getattr(
2025-01-10T13:28:40.4433460Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4433510Z             )
2025-01-10T13:28:40.4433580Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4433700Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4433780Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4433840Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4433940Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4433980Z                 )
2025-01-10T13:28:40.4433990Z 
2025-01-10T13:28:40.4434090Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4434180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4434190Z 
2025-01-10T13:28:40.4434530Z args = (<function assert_allclose.<locals>.compare at 0x15ccc1c60>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06, .....), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:28:40.4434620Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4434820Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4434820Z 
2025-01-10T13:28:40.4434870Z     @wraps(func)
2025-01-10T13:28:40.4434930Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4434980Z         with self._recreate_cm():
2025-01-10T13:28:40.4435050Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4435100Z E           AssertionError: 
2025-01-10T13:28:40.4435180Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4435220Z E           
2025-01-10T13:28:40.4435290Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.4435400Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:28:40.4435500Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.4435690Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4435750Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4435880Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.4435940Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4435940Z 
2025-01-10T13:28:40.4436090Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4436260Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data8] _
2025-01-10T13:28:40.4436260Z 
2025-01-10T13:28:40.4436460Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459ffe0>
2025-01-10T13:28:40.4436690Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4436940Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x16e5841a0>
2025-01-10T13:28:40.4437150Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data8]>>
2025-01-10T13:28:40.4437160Z 
2025-01-10T13:28:40.4437220Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4437270Z         self,
2025-01-10T13:28:40.4437330Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4437400Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4437440Z         request,
2025-01-10T13:28:40.4437480Z     ):
2025-01-10T13:28:40.4437560Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4437690Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4437750Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4437880Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4437940Z             plot_object = getattr(
2025-01-10T13:28:40.4438080Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4438130Z             )
2025-01-10T13:28:40.4438200Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4438320Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4438400Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4438470Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4438570Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4438610Z                 )
2025-01-10T13:28:40.4438620Z 
2025-01-10T13:28:40.4438720Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4438810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4438810Z 
2025-01-10T13:28:40.4439170Z args = (<function assert_allclose.<locals>.compare at 0x15ccc1da0>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46, .....), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:28:40.4439240Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4439450Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4439450Z 
2025-01-10T13:28:40.4439500Z     @wraps(func)
2025-01-10T13:28:40.4439550Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4439610Z         with self._recreate_cm():
2025-01-10T13:28:40.4439670Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4439730Z E           AssertionError: 
2025-01-10T13:28:40.4439800Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4439850Z E           
2025-01-10T13:28:40.4439920Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.4440020Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:28:40.4440120Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.4440300Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4440360Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4440490Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4440560Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4440560Z 
2025-01-10T13:28:40.4440710Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4440880Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data9] _
2025-01-10T13:28:40.4440890Z 
2025-01-10T13:28:40.4441090Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4b60>
2025-01-10T13:28:40.4441320Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4441560Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x169d8e720>
2025-01-10T13:28:40.4441780Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data9]>>
2025-01-10T13:28:40.4441780Z 
2025-01-10T13:28:40.4441850Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4441890Z         self,
2025-01-10T13:28:40.4441960Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4442020Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4442060Z         request,
2025-01-10T13:28:40.4442110Z     ):
2025-01-10T13:28:40.4442180Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4442320Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4442380Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4442510Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4442570Z             plot_object = getattr(
2025-01-10T13:28:40.4442710Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4442770Z             )
2025-01-10T13:28:40.4442840Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4442960Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4443040Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4443110Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4443210Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4443250Z                 )
2025-01-10T13:28:40.4443260Z 
2025-01-10T13:28:40.4443360Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4443440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4443450Z 
2025-01-10T13:28:40.4443800Z args = (<function assert_allclose.<locals>.compare at 0x15cc709a0>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46, .....), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:28:40.4443880Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4444080Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4444080Z 
2025-01-10T13:28:40.4444130Z     @wraps(func)
2025-01-10T13:28:40.4444190Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4444250Z         with self._recreate_cm():
2025-01-10T13:28:40.4444310Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4444360Z E           AssertionError: 
2025-01-10T13:28:40.4444440Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4444490Z E           
2025-01-10T13:28:40.4444560Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.4444670Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:28:40.4444760Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.4444890Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4445010Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4445140Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4445200Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4445210Z 
2025-01-10T13:28:40.4445360Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4445530Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data10] _
2025-01-10T13:28:40.4445540Z 
2025-01-10T13:28:40.4445730Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e7170>
2025-01-10T13:28:40.4445960Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4446210Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x316fba930>
2025-01-10T13:28:40.4446430Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data10]>>
2025-01-10T13:28:40.4446430Z 
2025-01-10T13:28:40.4446500Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4446550Z         self,
2025-01-10T13:28:40.4446610Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4446670Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4446710Z         request,
2025-01-10T13:28:40.4446750Z     ):
2025-01-10T13:28:40.4446830Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4446970Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4447030Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4447160Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4447220Z             plot_object = getattr(
2025-01-10T13:28:40.4447320Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4447400Z             )
2025-01-10T13:28:40.4447480Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4447610Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4447680Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4447750Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4447840Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4447890Z                 )
2025-01-10T13:28:40.4447890Z 
2025-01-10T13:28:40.4448000Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4448080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4448080Z 
2025-01-10T13:28:40.4448430Z args = (<function assert_allclose.<locals>.compare at 0x15cc70fe0>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46, .....), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:28:40.4448500Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4448700Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4448710Z 
2025-01-10T13:28:40.4448760Z     @wraps(func)
2025-01-10T13:28:40.4448810Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4448870Z         with self._recreate_cm():
2025-01-10T13:28:40.4448930Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4448980Z E           AssertionError: 
2025-01-10T13:28:40.4449060Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4449110Z E           
2025-01-10T13:28:40.4449180Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.4449280Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:28:40.4449380Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.4449500Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4449840Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4449970Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4450030Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4450030Z 
2025-01-10T13:28:40.4450180Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4450360Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data11] _
2025-01-10T13:28:40.4450360Z 
2025-01-10T13:28:40.4450560Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e5010>
2025-01-10T13:28:40.4450790Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4451040Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x1735a8770>
2025-01-10T13:28:40.4451260Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data11]>>
2025-01-10T13:28:40.4451270Z 
2025-01-10T13:28:40.4451330Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4451370Z         self,
2025-01-10T13:28:40.4451440Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4451500Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4451550Z         request,
2025-01-10T13:28:40.4451590Z     ):
2025-01-10T13:28:40.4451660Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4451810Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4451870Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4452000Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4452060Z             plot_object = getattr(
2025-01-10T13:28:40.4452150Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4452200Z             )
2025-01-10T13:28:40.4452490Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4452630Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4452710Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4452780Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4452870Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4452920Z                 )
2025-01-10T13:28:40.4452920Z 
2025-01-10T13:28:40.4453030Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4453120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4453120Z 
2025-01-10T13:28:40.4453470Z args = (<function assert_allclose.<locals>.compare at 0x15cc72d40>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46, .....), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:28:40.4453540Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4453750Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4453760Z 
2025-01-10T13:28:40.4453800Z     @wraps(func)
2025-01-10T13:28:40.4453860Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4453920Z         with self._recreate_cm():
2025-01-10T13:28:40.4453980Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4454040Z E           AssertionError: 
2025-01-10T13:28:40.4454110Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4454150Z E           
2025-01-10T13:28:40.4454230Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.4454330Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:28:40.4454430Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.4454550Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4454620Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4454800Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4454870Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4454870Z 
2025-01-10T13:28:40.4455020Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4455200Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data12] _
2025-01-10T13:28:40.4455200Z 
2025-01-10T13:28:40.4455400Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e5190>
2025-01-10T13:28:40.4455630Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4455870Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x3123cb8c0>
2025-01-10T13:28:40.4456090Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data12]>>
2025-01-10T13:28:40.4456090Z 
2025-01-10T13:28:40.4456160Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4456200Z         self,
2025-01-10T13:28:40.4456270Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4456330Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4456370Z         request,
2025-01-10T13:28:40.4456410Z     ):
2025-01-10T13:28:40.4456490Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4456630Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4456680Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4456810Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4456870Z             plot_object = getattr(
2025-01-10T13:28:40.4456960Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4457010Z             )
2025-01-10T13:28:40.4457080Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4457250Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4457340Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4457400Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4457500Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4457550Z                 )
2025-01-10T13:28:40.4457550Z 
2025-01-10T13:28:40.4457660Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4457740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4457740Z 
2025-01-10T13:28:40.4458080Z args = (<function assert_allclose.<locals>.compare at 0x15ccc1c60>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46, .....), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:28:40.4458160Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4458360Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4458360Z 
2025-01-10T13:28:40.4458410Z     @wraps(func)
2025-01-10T13:28:40.4458470Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4458520Z         with self._recreate_cm():
2025-01-10T13:28:40.4458580Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4458630Z E           AssertionError: 
2025-01-10T13:28:40.4458710Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4458760Z E           
2025-01-10T13:28:40.4458830Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.4458930Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:28:40.4459040Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.4459160Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4459220Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4459400Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4459470Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4459470Z 
2025-01-10T13:28:40.4459620Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4459800Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data13] _
2025-01-10T13:28:40.4459800Z 
2025-01-10T13:28:40.4460120Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e5130>
2025-01-10T13:28:40.4460360Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4460610Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x16e6d22a0>
2025-01-10T13:28:40.4460830Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data13]>>
2025-01-10T13:28:40.4460830Z 
2025-01-10T13:28:40.4460900Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4460950Z         self,
2025-01-10T13:28:40.4461010Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4461070Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4461120Z         request,
2025-01-10T13:28:40.4461160Z     ):
2025-01-10T13:28:40.4461240Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4461380Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4461430Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4461570Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4461630Z             plot_object = getattr(
2025-01-10T13:28:40.4461720Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4461760Z             )
2025-01-10T13:28:40.4461840Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4462060Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4462140Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4462210Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4462310Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4462360Z                 )
2025-01-10T13:28:40.4462360Z 
2025-01-10T13:28:40.4462460Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4462550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4462550Z 
2025-01-10T13:28:40.4462900Z args = (<function assert_allclose.<locals>.compare at 0x304a30fe0>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46, .....), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:28:40.4462980Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4463180Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4463180Z 
2025-01-10T13:28:40.4463230Z     @wraps(func)
2025-01-10T13:28:40.4463300Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4463350Z         with self._recreate_cm():
2025-01-10T13:28:40.4463410Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4463470Z E           AssertionError: 
2025-01-10T13:28:40.4463550Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4463600Z E           
2025-01-10T13:28:40.4463670Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.4463770Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:28:40.4463870Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.4464000Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4464060Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4464190Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4464320Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4464320Z 
2025-01-10T13:28:40.4464470Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4464650Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data14] _
2025-01-10T13:28:40.4464650Z 
2025-01-10T13:28:40.4464840Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e40b0>
2025-01-10T13:28:40.4465070Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4465310Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x169d8db20>
2025-01-10T13:28:40.4465530Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data14]>>
2025-01-10T13:28:40.4465530Z 
2025-01-10T13:28:40.4465600Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4465640Z         self,
2025-01-10T13:28:40.4465710Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4465770Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4465810Z         request,
2025-01-10T13:28:40.4465850Z     ):
2025-01-10T13:28:40.4465930Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4466070Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4466120Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4466260Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4466320Z             plot_object = getattr(
2025-01-10T13:28:40.4466410Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4466450Z             )
2025-01-10T13:28:40.4466530Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4466650Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4466780Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4466850Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4466950Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4466990Z                 )
2025-01-10T13:28:40.4467000Z 
2025-01-10T13:28:40.4467100Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4467180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4467190Z 
2025-01-10T13:28:40.4467530Z args = (<function assert_allclose.<locals>.compare at 0x15cc722a0>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46, .....), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:28:40.4467610Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4467810Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4467820Z 
2025-01-10T13:28:40.4467870Z     @wraps(func)
2025-01-10T13:28:40.4467920Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4467990Z         with self._recreate_cm():
2025-01-10T13:28:40.4468040Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4468100Z E           AssertionError: 
2025-01-10T13:28:40.4468180Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4468220Z E           
2025-01-10T13:28:40.4468290Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.4468390Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:28:40.4468500Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.4468620Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4468690Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4468810Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4470420Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4470440Z 
2025-01-10T13:28:40.4470880Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4471360Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data15] _
2025-01-10T13:28:40.4471370Z 
2025-01-10T13:28:40.4471920Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e41a0>
2025-01-10T13:28:40.4472540Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>
2025-01-10T13:28:40.4473210Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x314a42cc0>
2025-01-10T13:28:40.4473810Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data15]>>
2025-01-10T13:28:40.4473820Z 
2025-01-10T13:28:40.4474000Z     def test_calculate_plotting_data(
2025-01-10T13:28:40.4474170Z         self,
2025-01-10T13:28:40.4474350Z         plotter_calculate_plotting_data,
2025-01-10T13:28:40.4474520Z         calculate_plotting_data_hdf,
2025-01-10T13:28:40.4474660Z         request,
2025-01-10T13:28:40.4474790Z     ):
2025-01-10T13:28:40.4475010Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4475370Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:28:40.4475540Z         group = "plot_data_hdf/"
2025-01-10T13:28:40.4475900Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:28:40.4476060Z             plot_object = getattr(
2025-01-10T13:28:40.4476320Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:28:40.4476450Z             )
2025-01-10T13:28:40.4476650Z             if attribute_type == "attributes_np":
2025-01-10T13:28:40.4476970Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:28:40.4478080Z                     plot_object = plot_object.cgs.value
2025-01-10T13:28:40.4478280Z >               np.testing.assert_allclose(
2025-01-10T13:28:40.4478530Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:28:40.4478670Z                 )
2025-01-10T13:28:40.4478680Z 
2025-01-10T13:28:40.4478970Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:28:40.4479200Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4479210Z 
2025-01-10T13:28:40.4480190Z args = (<function assert_allclose.<locals>.compare at 0x15cc73560>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46, .....), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:28:40.4480390Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4480930Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4480950Z 
2025-01-10T13:28:40.4481100Z     @wraps(func)
2025-01-10T13:28:40.4481260Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4481420Z         with self._recreate_cm():
2025-01-10T13:28:40.4481600Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4481760Z E           AssertionError: 
2025-01-10T13:28:40.4481970Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4482110Z E           
2025-01-10T13:28:40.4482310Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.4482580Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:28:40.4482850Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.4483200Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4483360Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4483700Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.4483880Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4484090Z 
2025-01-10T13:28:40.4484510Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4484930Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply0] ______
2025-01-10T13:28:40.4484940Z 
2025-01-10T13:28:40.4485470Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4590>
2025-01-10T13:28:40.4486120Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x3123c96a0>
2025-01-10T13:28:40.4486300Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4486470Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4486670Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4486920Z               '...-1}\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:28:40.4487330Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4487920Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply0]>>
2025-01-10T13:28:40.4487960Z 
2025-01-10T13:28:40.4488140Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4488480Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4488610Z     ):
2025-01-10T13:28:40.4488800Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4489010Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4489380Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4489510Z     
2025-01-10T13:28:40.4489720Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4489910Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4490190Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4490410Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4490770Z             )
2025-01-10T13:28:40.4490920Z     
2025-01-10T13:28:40.4491110Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4491310Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4491480Z             if data.stackgroup:
2025-01-10T13:28:40.4491620Z                 assert (
2025-01-10T13:28:40.4491780Z                     data.stackgroup
2025-01-10T13:28:40.4491930Z                     == getattr(
2025-01-10T13:28:40.4492130Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4492320Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4492470Z                     ).decode()
2025-01-10T13:28:40.4492610Z                 )
2025-01-10T13:28:40.4492760Z             if data.name:
2025-01-10T13:28:40.4492900Z                 assert (
2025-01-10T13:28:40.4493620Z                     data.name
2025-01-10T13:28:40.4493780Z                     == getattr(
2025-01-10T13:28:40.4494000Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4494190Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4494330Z                     ).decode()
2025-01-10T13:28:40.4494480Z                 )
2025-01-10T13:28:40.4494940Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4495310Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4495450Z             )
2025-01-10T13:28:40.4495630Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4495880Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4496020Z             )
2025-01-10T13:28:40.4496020Z 
2025-01-10T13:28:40.4496340Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4496560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4496570Z 
2025-01-10T13:28:40.4497550Z args = (<function assert_allclose.<locals>.compare at 0x15ccb9e40>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14, .....), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:28:40.4498140Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4498680Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4498690Z 
2025-01-10T13:28:40.4498830Z     @wraps(func)
2025-01-10T13:28:40.4498990Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4499160Z         with self._recreate_cm():
2025-01-10T13:28:40.4499320Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4499490Z E           AssertionError: 
2025-01-10T13:28:40.4499700Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4499840Z E           
2025-01-10T13:28:40.4500030Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.4500310Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:28:40.4500570Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.4500920Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4501100Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4501470Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4501640Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4501650Z 
2025-01-10T13:28:40.4502070Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4502490Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply1] ______
2025-01-10T13:28:40.4502490Z 
2025-01-10T13:28:40.4503050Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4650>
2025-01-10T13:28:40.4503700Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x158ea49b0>
2025-01-10T13:28:40.4503900Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4504260Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4504460Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4504660Z               '...-1}\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:28:40.4505070Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4505580Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply1]>>
2025-01-10T13:28:40.4505590Z 
2025-01-10T13:28:40.4505760Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4506100Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4506230Z     ):
2025-01-10T13:28:40.4506410Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4506630Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4506980Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4507120Z     
2025-01-10T13:28:40.4507330Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4507520Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4507810Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4508010Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4508150Z             )
2025-01-10T13:28:40.4508280Z     
2025-01-10T13:28:40.4508470Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4508690Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4508850Z             if data.stackgroup:
2025-01-10T13:28:40.4509000Z                 assert (
2025-01-10T13:28:40.4509150Z                     data.stackgroup
2025-01-10T13:28:40.4509290Z                     == getattr(
2025-01-10T13:28:40.4509510Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4509690Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4509840Z                     ).decode()
2025-01-10T13:28:40.4509980Z                 )
2025-01-10T13:28:40.4510290Z             if data.name:
2025-01-10T13:28:40.4510430Z                 assert (
2025-01-10T13:28:40.4510570Z                     data.name
2025-01-10T13:28:40.4510730Z                     == getattr(
2025-01-10T13:28:40.4510930Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4511110Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4511250Z                     ).decode()
2025-01-10T13:28:40.4511380Z                 )
2025-01-10T13:28:40.4511570Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4511820Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4511960Z             )
2025-01-10T13:28:40.4512130Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4512370Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4512510Z             )
2025-01-10T13:28:40.4512520Z 
2025-01-10T13:28:40.4512810Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4513070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4513080Z 
2025-01-10T13:28:40.4514090Z args = (<function assert_allclose.<locals>.compare at 0x15ccbab60>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14, .....), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:28:40.4523650Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4524310Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4524320Z 
2025-01-10T13:28:40.4524460Z     @wraps(func)
2025-01-10T13:28:40.4524620Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4524800Z         with self._recreate_cm():
2025-01-10T13:28:40.4524970Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4525140Z E           AssertionError: 
2025-01-10T13:28:40.4525350Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4525910Z E           
2025-01-10T13:28:40.4526110Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.4526390Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:28:40.4526660Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.4526990Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4527160Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4527530Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4527720Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4527740Z 
2025-01-10T13:28:40.4528150Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4528570Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply2] ______
2025-01-10T13:28:40.4528570Z 
2025-01-10T13:28:40.4529120Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4aa0>
2025-01-10T13:28:40.4529760Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x316fb57f0>
2025-01-10T13:28:40.4529950Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4530120Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4530310Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4530510Z               '...-1}\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:28:40.4530920Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4531420Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply2]>>
2025-01-10T13:28:40.4531430Z 
2025-01-10T13:28:40.4531590Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4531930Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4532060Z     ):
2025-01-10T13:28:40.4532260Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4533050Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4533410Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4533540Z     
2025-01-10T13:28:40.4533760Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4533940Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4534220Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4534440Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4534570Z             )
2025-01-10T13:28:40.4534700Z     
2025-01-10T13:28:40.4535170Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4535380Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4535540Z             if data.stackgroup:
2025-01-10T13:28:40.4535680Z                 assert (
2025-01-10T13:28:40.4535840Z                     data.stackgroup
2025-01-10T13:28:40.4536000Z                     == getattr(
2025-01-10T13:28:40.4536200Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4536390Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4536530Z                     ).decode()
2025-01-10T13:28:40.4536670Z                 )
2025-01-10T13:28:40.4536820Z             if data.name:
2025-01-10T13:28:40.4536960Z                 assert (
2025-01-10T13:28:40.4537110Z                     data.name
2025-01-10T13:28:40.4537250Z                     == getattr(
2025-01-10T13:28:40.4537460Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4537630Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4537770Z                     ).decode()
2025-01-10T13:28:40.4537920Z                 )
2025-01-10T13:28:40.4538090Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4538340Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4538890Z             )
2025-01-10T13:28:40.4539090Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4539330Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4539470Z             )
2025-01-10T13:28:40.4539470Z 
2025-01-10T13:28:40.4539770Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4539990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4540000Z 
2025-01-10T13:28:40.4540980Z args = (<function assert_allclose.<locals>.compare at 0x15ccbb9c0>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14, .....), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:28:40.4541170Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4541710Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4541720Z 
2025-01-10T13:28:40.4541870Z     @wraps(func)
2025-01-10T13:28:40.4542040Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4542210Z         with self._recreate_cm():
2025-01-10T13:28:40.4542380Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4542540Z E           AssertionError: 
2025-01-10T13:28:40.4542750Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4542880Z E           
2025-01-10T13:28:40.4543130Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.4543420Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:28:40.4543690Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.4544020Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4544190Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4544530Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4544690Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4544890Z 
2025-01-10T13:28:40.4545310Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4545730Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply3] ______
2025-01-10T13:28:40.4545740Z 
2025-01-10T13:28:40.4546280Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4b90>
2025-01-10T13:28:40.4546920Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x316fb5fa0>
2025-01-10T13:28:40.4547110Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4547280Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4547470Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4547660Z               '...-1}\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:28:40.4548070Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4548570Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply3]>>
2025-01-10T13:28:40.4548590Z 
2025-01-10T13:28:40.4548760Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4549100Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4549230Z     ):
2025-01-10T13:28:40.4549410Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4549630Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4549980Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4550120Z     
2025-01-10T13:28:40.4550330Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4550510Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4550800Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4551010Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4551150Z             )
2025-01-10T13:28:40.4551410Z     
2025-01-10T13:28:40.4551620Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4551960Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4553530Z             if data.stackgroup:
2025-01-10T13:28:40.4553750Z                 assert (
2025-01-10T13:28:40.4553900Z                     data.stackgroup
2025-01-10T13:28:40.4554050Z                     == getattr(
2025-01-10T13:28:40.4554250Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4554440Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4554580Z                     ).decode()
2025-01-10T13:28:40.4554710Z                 )
2025-01-10T13:28:40.4554940Z             if data.name:
2025-01-10T13:28:40.4555080Z                 assert (
2025-01-10T13:28:40.4557030Z                     data.name
2025-01-10T13:28:40.4557210Z                     == getattr(
2025-01-10T13:28:40.4557410Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4557600Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4557750Z                     ).decode()
2025-01-10T13:28:40.4557880Z                 )
2025-01-10T13:28:40.4558070Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4558310Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4558450Z             )
2025-01-10T13:28:40.4558620Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4558860Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4559010Z             )
2025-01-10T13:28:40.4559020Z 
2025-01-10T13:28:40.4559310Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4559530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4559540Z 
2025-01-10T13:28:40.4560510Z args = (<function assert_allclose.<locals>.compare at 0x32eb7cf40>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14, .....), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:28:40.4561120Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4561740Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4561750Z 
2025-01-10T13:28:40.4561900Z     @wraps(func)
2025-01-10T13:28:40.4562060Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4562230Z         with self._recreate_cm():
2025-01-10T13:28:40.4562410Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4562570Z E           AssertionError: 
2025-01-10T13:28:40.4562780Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4562920Z E           
2025-01-10T13:28:40.4563110Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.4563390Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:28:40.4563640Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.4563990Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4564170Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4564510Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4564670Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4564680Z 
2025-01-10T13:28:40.4565090Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4565510Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply4] ______
2025-01-10T13:28:40.4565520Z 
2025-01-10T13:28:40.4566050Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459f350>
2025-01-10T13:28:40.4566700Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x317054a10>
2025-01-10T13:28:40.4566880Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4567060Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4567470Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4567670Z               '...-1}\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:28:40.4568090Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4568590Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply4]>>
2025-01-10T13:28:40.4568600Z 
2025-01-10T13:28:40.4568770Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4569100Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4569240Z     ):
2025-01-10T13:28:40.4569420Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4569630Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4569990Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4570110Z     
2025-01-10T13:28:40.4570330Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4570520Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4570810Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4571030Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4571160Z             )
2025-01-10T13:28:40.4571300Z     
2025-01-10T13:28:40.4571490Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4571690Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4571860Z             if data.stackgroup:
2025-01-10T13:28:40.4572000Z                 assert (
2025-01-10T13:28:40.4572160Z                     data.stackgroup
2025-01-10T13:28:40.4572300Z                     == getattr(
2025-01-10T13:28:40.4572510Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4572700Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4572840Z                     ).decode()
2025-01-10T13:28:40.4572980Z                 )
2025-01-10T13:28:40.4573140Z             if data.name:
2025-01-10T13:28:40.4573440Z                 assert (
2025-01-10T13:28:40.4573590Z                     data.name
2025-01-10T13:28:40.4573730Z                     == getattr(
2025-01-10T13:28:40.4573930Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4574100Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4574250Z                     ).decode()
2025-01-10T13:28:40.4574380Z                 )
2025-01-10T13:28:40.4574560Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4574840Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4574990Z             )
2025-01-10T13:28:40.4575390Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4575700Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4575840Z             )
2025-01-10T13:28:40.4575840Z 
2025-01-10T13:28:40.4576150Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4576380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4576390Z 
2025-01-10T13:28:40.4577390Z args = (<function assert_allclose.<locals>.compare at 0x15ccbaac0>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14, .....), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:28:40.4577590Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4578140Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4578160Z 
2025-01-10T13:28:40.4578310Z     @wraps(func)
2025-01-10T13:28:40.4578480Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4578640Z         with self._recreate_cm():
2025-01-10T13:28:40.4578810Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4578970Z E           AssertionError: 
2025-01-10T13:28:40.4579180Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4579500Z E           
2025-01-10T13:28:40.4579700Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.4579980Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:28:40.4580260Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:28:40.4580590Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4580760Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4581090Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4581250Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4581270Z 
2025-01-10T13:28:40.4581670Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4582080Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply5] ______
2025-01-10T13:28:40.4582090Z 
2025-01-10T13:28:40.4582630Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x14459d730>
2025-01-10T13:28:40.4583280Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x16e6d3ec0>
2025-01-10T13:28:40.4583470Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4583630Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4583830Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4584020Z               '...-1}\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:28:40.4584430Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4584930Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply5]>>
2025-01-10T13:28:40.4584940Z 
2025-01-10T13:28:40.4585100Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4585450Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4585580Z     ):
2025-01-10T13:28:40.4585760Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4586610Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4586950Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4587090Z     
2025-01-10T13:28:40.4587300Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4587500Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4587770Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4587980Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4588120Z             )
2025-01-10T13:28:40.4588250Z     
2025-01-10T13:28:40.4588450Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4588650Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4588800Z             if data.stackgroup:
2025-01-10T13:28:40.4588950Z                 assert (
2025-01-10T13:28:40.4589110Z                     data.stackgroup
2025-01-10T13:28:40.4589260Z                     == getattr(
2025-01-10T13:28:40.4589470Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4589650Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4589810Z                     ).decode()
2025-01-10T13:28:40.4589940Z                 )
2025-01-10T13:28:40.4590090Z             if data.name:
2025-01-10T13:28:40.4590230Z                 assert (
2025-01-10T13:28:40.4590370Z                     data.name
2025-01-10T13:28:40.4590520Z                     == getattr(
2025-01-10T13:28:40.4590720Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4590900Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4591040Z                     ).decode()
2025-01-10T13:28:40.4591170Z                 )
2025-01-10T13:28:40.4591350Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4591600Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4592190Z             )
2025-01-10T13:28:40.4592380Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4592630Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4592770Z             )
2025-01-10T13:28:40.4592770Z 
2025-01-10T13:28:40.4593070Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4593300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4593310Z 
2025-01-10T13:28:40.4594260Z args = (<function assert_allclose.<locals>.compare at 0x15ccc13a0>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14, .....), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:28:40.4594470Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4595000Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4595010Z 
2025-01-10T13:28:40.4595160Z     @wraps(func)
2025-01-10T13:28:40.4595320Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4595490Z         with self._recreate_cm():
2025-01-10T13:28:40.4595670Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4595830Z E           AssertionError: 
2025-01-10T13:28:40.4596040Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4596170Z E           
2025-01-10T13:28:40.4596360Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.4605260Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:28:40.4605600Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:28:40.4605940Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4606100Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4606450Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4606610Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4606630Z 
2025-01-10T13:28:40.4607440Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4610100Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply6] ______
2025-01-10T13:28:40.4610130Z 
2025-01-10T13:28:40.4610670Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4d10>
2025-01-10T13:28:40.4611380Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x17f9087d0>
2025-01-10T13:28:40.4611560Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4614450Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4614650Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4614840Z               '...-1}\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:28:40.4615490Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4615990Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply6]>>
2025-01-10T13:28:40.4616020Z 
2025-01-10T13:28:40.4616200Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4616530Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4616670Z     ):
2025-01-10T13:28:40.4616850Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4617050Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4617410Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4617540Z     
2025-01-10T13:28:40.4617760Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4617940Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4618220Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4618440Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4618570Z             )
2025-01-10T13:28:40.4618700Z     
2025-01-10T13:28:40.4619230Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4619440Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4619610Z             if data.stackgroup:
2025-01-10T13:28:40.4619750Z                 assert (
2025-01-10T13:28:40.4619910Z                     data.stackgroup
2025-01-10T13:28:40.4620060Z                     == getattr(
2025-01-10T13:28:40.4620260Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4620450Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4620590Z                     ).decode()
2025-01-10T13:28:40.4620730Z                 )
2025-01-10T13:28:40.4620880Z             if data.name:
2025-01-10T13:28:40.4621030Z                 assert (
2025-01-10T13:28:40.4621170Z                     data.name
2025-01-10T13:28:40.4621310Z                     == getattr(
2025-01-10T13:28:40.4621520Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4621690Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4621860Z                     ).decode()
2025-01-10T13:28:40.4621990Z                 )
2025-01-10T13:28:40.4622170Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4622420Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4622560Z             )
2025-01-10T13:28:40.4622740Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4622980Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4623120Z             )
2025-01-10T13:28:40.4623130Z 
2025-01-10T13:28:40.4623430Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4623650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4623660Z 
2025-01-10T13:28:40.4624640Z args = (<function assert_allclose.<locals>.compare at 0x32eb7e020>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14, .....), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:28:40.4624840Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4625560Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4625570Z 
2025-01-10T13:28:40.4625720Z     @wraps(func)
2025-01-10T13:28:40.4625880Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4626050Z         with self._recreate_cm():
2025-01-10T13:28:40.4626220Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4626380Z E           AssertionError: 
2025-01-10T13:28:40.4626590Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4626730Z E           
2025-01-10T13:28:40.4626920Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.4627200Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:28:40.4627480Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:28:40.4627810Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4627990Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4628330Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4628500Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4628510Z 
2025-01-10T13:28:40.4628920Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4629330Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply7] ______
2025-01-10T13:28:40.4629350Z 
2025-01-10T13:28:40.4629880Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4dd0>
2025-01-10T13:28:40.4630510Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x3149eec00>
2025-01-10T13:28:40.4630710Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4630870Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4631200Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4631400Z               '...-1}\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:28:40.4631800Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4632310Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply7]>>
2025-01-10T13:28:40.4632320Z 
2025-01-10T13:28:40.4632490Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4632830Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4632960Z     ):
2025-01-10T13:28:40.4633150Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4633350Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4633700Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4633840Z     
2025-01-10T13:28:40.4634040Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4634230Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4634530Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4634740Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4634880Z             )
2025-01-10T13:28:40.4635010Z     
2025-01-10T13:28:40.4635210Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4635410Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4635570Z             if data.stackgroup:
2025-01-10T13:28:40.4635720Z                 assert (
2025-01-10T13:28:40.4635870Z                     data.stackgroup
2025-01-10T13:28:40.4636020Z                     == getattr(
2025-01-10T13:28:40.4636230Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4636410Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4636570Z                     ).decode()
2025-01-10T13:28:40.4636700Z                 )
2025-01-10T13:28:40.4636860Z             if data.name:
2025-01-10T13:28:40.4637160Z                 assert (
2025-01-10T13:28:40.4637320Z                     data.name
2025-01-10T13:28:40.4637460Z                     == getattr(
2025-01-10T13:28:40.4637660Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4637840Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4637980Z                     ).decode()
2025-01-10T13:28:40.4638120Z                 )
2025-01-10T13:28:40.4638290Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4638760Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4638920Z             )
2025-01-10T13:28:40.4639090Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4639340Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4639470Z             )
2025-01-10T13:28:40.4639480Z 
2025-01-10T13:28:40.4639770Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4640010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4640020Z 
2025-01-10T13:28:40.4640990Z args = (<function assert_allclose.<locals>.compare at 0x32eb7f740>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14, .....), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:28:40.4641200Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4641730Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4641740Z 
2025-01-10T13:28:40.4641880Z     @wraps(func)
2025-01-10T13:28:40.4642040Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4642210Z         with self._recreate_cm():
2025-01-10T13:28:40.4642370Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4642530Z E           AssertionError: 
2025-01-10T13:28:40.4642750Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4642880Z E           
2025-01-10T13:28:40.4643350Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.4643630Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:28:40.4643900Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:28:40.4644250Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4644410Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4644750Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.4644910Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4644920Z 
2025-01-10T13:28:40.4645330Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4645740Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply8] ______
2025-01-10T13:28:40.4645750Z 
2025-01-10T13:28:40.4646280Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4e90>
2025-01-10T13:28:40.4646940Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x310d36450>
2025-01-10T13:28:40.4647120Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4647290Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4647480Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4647700Z               '...{erg\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:28:40.4648100Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4648600Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply8]>>
2025-01-10T13:28:40.4648610Z 
2025-01-10T13:28:40.4648780Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4649110Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4649250Z     ):
2025-01-10T13:28:40.4649430Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4649640Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4650840Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4650970Z     
2025-01-10T13:28:40.4651190Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4651380Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4651660Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4651870Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4652000Z             )
2025-01-10T13:28:40.4652140Z     
2025-01-10T13:28:40.4652330Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4652540Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4652700Z             if data.stackgroup:
2025-01-10T13:28:40.4652840Z                 assert (
2025-01-10T13:28:40.4653010Z                     data.stackgroup
2025-01-10T13:28:40.4653150Z                     == getattr(
2025-01-10T13:28:40.4653370Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4653560Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4653700Z                     ).decode()
2025-01-10T13:28:40.4653840Z                 )
2025-01-10T13:28:40.4653990Z             if data.name:
2025-01-10T13:28:40.4654130Z                 assert (
2025-01-10T13:28:40.4654280Z                     data.name
2025-01-10T13:28:40.4654420Z                     == getattr(
2025-01-10T13:28:40.4654630Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4654800Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4654950Z                     ).decode()
2025-01-10T13:28:40.4655080Z                 )
2025-01-10T13:28:40.4655260Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4655720Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4655860Z             )
2025-01-10T13:28:40.4656630Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4656900Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4657040Z             )
2025-01-10T13:28:40.4657040Z 
2025-01-10T13:28:40.4657340Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4657560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4657560Z 
2025-01-10T13:28:40.4658550Z args = (<function assert_allclose.<locals>.compare at 0x32eb7dd00>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38, .....), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:28:40.4658740Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4659280Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4659290Z 
2025-01-10T13:28:40.4659630Z     @wraps(func)
2025-01-10T13:28:40.4659800Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4660270Z         with self._recreate_cm():
2025-01-10T13:28:40.4660480Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4660550Z E           AssertionError: 
2025-01-10T13:28:40.4660640Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4660680Z E           
2025-01-10T13:28:40.4660760Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.4660870Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:28:40.4660970Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.4661110Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4661170Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4661300Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4661370Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4661370Z 
2025-01-10T13:28:40.4661540Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4662050Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply9] ______
2025-01-10T13:28:40.4662050Z 
2025-01-10T13:28:40.4662260Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e4f50>
2025-01-10T13:28:40.4662510Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x3210b0380>
2025-01-10T13:28:40.4662580Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4662640Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4662720Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4662790Z               '...{erg\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:28:40.4662950Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4663140Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply9]>>
2025-01-10T13:28:40.4663150Z 
2025-01-10T13:28:40.4663210Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4663350Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4663390Z     ):
2025-01-10T13:28:40.4663460Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4663530Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4663670Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4663710Z     
2025-01-10T13:28:40.4663790Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4663870Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4663970Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4664050Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4664100Z             )
2025-01-10T13:28:40.4664140Z     
2025-01-10T13:28:40.4664220Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4664380Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4664450Z             if data.stackgroup:
2025-01-10T13:28:40.4664490Z                 assert (
2025-01-10T13:28:40.4664550Z                     data.stackgroup
2025-01-10T13:28:40.4664610Z                     == getattr(
2025-01-10T13:28:40.4664690Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4664760Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4664810Z                     ).decode()
2025-01-10T13:28:40.4664860Z                 )
2025-01-10T13:28:40.4664910Z             if data.name:
2025-01-10T13:28:40.4664950Z                 assert (
2025-01-10T13:28:40.4665010Z                     data.name
2025-01-10T13:28:40.4665060Z                     == getattr(
2025-01-10T13:28:40.4665140Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4665200Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4665260Z                     ).decode()
2025-01-10T13:28:40.4665310Z                 )
2025-01-10T13:28:40.4665390Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4665490Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4665540Z             )
2025-01-10T13:28:40.4665600Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4665700Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4665740Z             )
2025-01-10T13:28:40.4665740Z 
2025-01-10T13:28:40.4665850Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4665940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4665950Z 
2025-01-10T13:28:40.4666300Z args = (<function assert_allclose.<locals>.compare at 0x15cc72ca0>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38, .....), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:28:40.4666390Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4666720Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4666720Z 
2025-01-10T13:28:40.4666770Z     @wraps(func)
2025-01-10T13:28:40.4666830Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4666880Z         with self._recreate_cm():
2025-01-10T13:28:40.4666940Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4667000Z E           AssertionError: 
2025-01-10T13:28:40.4667080Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4667120Z E           
2025-01-10T13:28:40.4667190Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.4667300Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:28:40.4667400Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.4672060Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4672180Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4672320Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4672380Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4672380Z 
2025-01-10T13:28:40.4672540Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4672700Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply10] ______
2025-01-10T13:28:40.4672710Z 
2025-01-10T13:28:40.4672910Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e51c0>
2025-01-10T13:28:40.4673150Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x16e3dfe90>
2025-01-10T13:28:40.4673220Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4673270Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4673350Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4673580Z               '...{erg\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:28:40.4673730Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4673920Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply10]>>
2025-01-10T13:28:40.4673920Z 
2025-01-10T13:28:40.4673990Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4674120Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4674160Z     ):
2025-01-10T13:28:40.4674450Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4674530Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4674660Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4674700Z     
2025-01-10T13:28:40.4674780Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4674850Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4674960Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4675050Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4675100Z             )
2025-01-10T13:28:40.4675140Z     
2025-01-10T13:28:40.4675210Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4675290Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4675350Z             if data.stackgroup:
2025-01-10T13:28:40.4675390Z                 assert (
2025-01-10T13:28:40.4675450Z                     data.stackgroup
2025-01-10T13:28:40.4675500Z                     == getattr(
2025-01-10T13:28:40.4675580Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4675640Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4675690Z                     ).decode()
2025-01-10T13:28:40.4675740Z                 )
2025-01-10T13:28:40.4675790Z             if data.name:
2025-01-10T13:28:40.4675840Z                 assert (
2025-01-10T13:28:40.4675980Z                     data.name
2025-01-10T13:28:40.4676040Z                     == getattr(
2025-01-10T13:28:40.4676110Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4676180Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4676240Z                     ).decode()
2025-01-10T13:28:40.4676280Z                 )
2025-01-10T13:28:40.4676340Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4676440Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4676480Z             )
2025-01-10T13:28:40.4676540Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4676630Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4676680Z             )
2025-01-10T13:28:40.4676690Z 
2025-01-10T13:28:40.4676790Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4676880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4676890Z 
2025-01-10T13:28:40.4677240Z args = (<function assert_allclose.<locals>.compare at 0x32eb7d440>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38, .....), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:28:40.4677320Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4677520Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4677530Z 
2025-01-10T13:28:40.4677580Z     @wraps(func)
2025-01-10T13:28:40.4677640Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4677690Z         with self._recreate_cm():
2025-01-10T13:28:40.4677760Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4677810Z E           AssertionError: 
2025-01-10T13:28:40.4677890Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4677930Z E           
2025-01-10T13:28:40.4678000Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.4678160Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:28:40.4678260Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.4678390Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4678450Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4678580Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4678650Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4678650Z 
2025-01-10T13:28:40.4678800Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4678970Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply11] ______
2025-01-10T13:28:40.4678970Z 
2025-01-10T13:28:40.4679170Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e5280>
2025-01-10T13:28:40.4679410Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x3210b2f00>
2025-01-10T13:28:40.4679480Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4679540Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4679610Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4679690Z               '...{erg\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:28:40.4679850Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4680030Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply11]>>
2025-01-10T13:28:40.4680040Z 
2025-01-10T13:28:40.4680100Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4680230Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4680270Z     ):
2025-01-10T13:28:40.4680330Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4680410Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4680780Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4680820Z     
2025-01-10T13:28:40.4680900Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4680970Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4681080Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4681160Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4681200Z             )
2025-01-10T13:28:40.4681240Z     
2025-01-10T13:28:40.4681320Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4681390Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4681450Z             if data.stackgroup:
2025-01-10T13:28:40.4681490Z                 assert (
2025-01-10T13:28:40.4681550Z                     data.stackgroup
2025-01-10T13:28:40.4681600Z                     == getattr(
2025-01-10T13:28:40.4681680Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4681750Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4681810Z                     ).decode()
2025-01-10T13:28:40.4681850Z                 )
2025-01-10T13:28:40.4681900Z             if data.name:
2025-01-10T13:28:40.4681950Z                 assert (
2025-01-10T13:28:40.4682000Z                     data.name
2025-01-10T13:28:40.4682050Z                     == getattr(
2025-01-10T13:28:40.4682130Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4682190Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4682240Z                     ).decode()
2025-01-10T13:28:40.4682290Z                 )
2025-01-10T13:28:40.4682350Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4682440Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4682490Z             )
2025-01-10T13:28:40.4682550Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4682830Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4682880Z             )
2025-01-10T13:28:40.4682890Z 
2025-01-10T13:28:40.4683000Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4683090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4683090Z 
2025-01-10T13:28:40.4683440Z args = (<function assert_allclose.<locals>.compare at 0x15ccb9bc0>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38, .....), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:28:40.4683510Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4683710Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4683710Z 
2025-01-10T13:28:40.4683760Z     @wraps(func)
2025-01-10T13:28:40.4683820Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4683880Z         with self._recreate_cm():
2025-01-10T13:28:40.4683940Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4684000Z E           AssertionError: 
2025-01-10T13:28:40.4684080Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4684120Z E           
2025-01-10T13:28:40.4684190Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.4684300Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:28:40.4684390Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.4684520Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4684580Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4684710Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4684770Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4684770Z 
2025-01-10T13:28:40.4684930Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4685140Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply12] ______
2025-01-10T13:28:40.4685150Z 
2025-01-10T13:28:40.4685350Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e5340>
2025-01-10T13:28:40.4685580Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x3175c0e00>
2025-01-10T13:28:40.4685650Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4685710Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4685790Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4685870Z               '...{erg\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:28:40.4686020Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4686210Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply12]>>
2025-01-10T13:28:40.4686220Z 
2025-01-10T13:28:40.4686280Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4686420Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4686460Z     ):
2025-01-10T13:28:40.4686520Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4686600Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4686730Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4686770Z     
2025-01-10T13:28:40.4686860Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4686920Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4687030Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4687110Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4687150Z             )
2025-01-10T13:28:40.4687190Z     
2025-01-10T13:28:40.4687270Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4687390Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4687460Z             if data.stackgroup:
2025-01-10T13:28:40.4687510Z                 assert (
2025-01-10T13:28:40.4687560Z                     data.stackgroup
2025-01-10T13:28:40.4687610Z                     == getattr(
2025-01-10T13:28:40.4687690Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4687760Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4687810Z                     ).decode()
2025-01-10T13:28:40.4687850Z                 )
2025-01-10T13:28:40.4687900Z             if data.name:
2025-01-10T13:28:40.4687950Z                 assert (
2025-01-10T13:28:40.4688000Z                     data.name
2025-01-10T13:28:40.4688050Z                     == getattr(
2025-01-10T13:28:40.4688130Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4688200Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4688250Z                     ).decode()
2025-01-10T13:28:40.4688300Z                 )
2025-01-10T13:28:40.4688360Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4688460Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4688500Z             )
2025-01-10T13:28:40.4688570Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4688660Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4688700Z             )
2025-01-10T13:28:40.4688700Z 
2025-01-10T13:28:40.4688810Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4688900Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4688900Z 
2025-01-10T13:28:40.4689250Z args = (<function assert_allclose.<locals>.compare at 0x15ccb9da0>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38, .....), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:28:40.4689320Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4689530Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4689580Z 
2025-01-10T13:28:40.4689630Z     @wraps(func)
2025-01-10T13:28:40.4689700Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4689750Z         with self._recreate_cm():
2025-01-10T13:28:40.4689810Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4689870Z E           AssertionError: 
2025-01-10T13:28:40.4689950Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4689990Z E           
2025-01-10T13:28:40.4690070Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.4690170Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:28:40.4690280Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:28:40.4690400Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4690470Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4690610Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4690670Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4690670Z 
2025-01-10T13:28:40.4690830Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4690990Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply13] ______
2025-01-10T13:28:40.4690990Z 
2025-01-10T13:28:40.4691180Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e5400>
2025-01-10T13:28:40.4691430Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x310f689e0>
2025-01-10T13:28:40.4691490Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4691550Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4691630Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4691750Z               '...{erg\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:28:40.4691920Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4692110Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply13]>>
2025-01-10T13:28:40.4692110Z 
2025-01-10T13:28:40.4692180Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4692310Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4692350Z     ):
2025-01-10T13:28:40.4692420Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4692500Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4692630Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4692670Z     
2025-01-10T13:28:40.4692750Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4692830Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4692930Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4693020Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4693070Z             )
2025-01-10T13:28:40.4693110Z     
2025-01-10T13:28:40.4693190Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4693260Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4693320Z             if data.stackgroup:
2025-01-10T13:28:40.4693370Z                 assert (
2025-01-10T13:28:40.4693430Z                     data.stackgroup
2025-01-10T13:28:40.4693480Z                     == getattr(
2025-01-10T13:28:40.4693550Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4693630Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4693680Z                     ).decode()
2025-01-10T13:28:40.4693720Z                 )
2025-01-10T13:28:40.4693780Z             if data.name:
2025-01-10T13:28:40.4693830Z                 assert (
2025-01-10T13:28:40.4693890Z                     data.name
2025-01-10T13:28:40.4693990Z                     == getattr(
2025-01-10T13:28:40.4694070Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4694140Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4694190Z                     ).decode()
2025-01-10T13:28:40.4694240Z                 )
2025-01-10T13:28:40.4694300Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4694400Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4694450Z             )
2025-01-10T13:28:40.4694510Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4694610Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4694650Z             )
2025-01-10T13:28:40.4694650Z 
2025-01-10T13:28:40.4694760Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4694850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4694850Z 
2025-01-10T13:28:40.4695200Z args = (<function assert_allclose.<locals>.compare at 0x32eb7fc40>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38, .....), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:28:40.4695280Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4695590Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4695600Z 
2025-01-10T13:28:40.4695650Z     @wraps(func)
2025-01-10T13:28:40.4695710Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4695770Z         with self._recreate_cm():
2025-01-10T13:28:40.4695820Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4695880Z E           AssertionError: 
2025-01-10T13:28:40.4695960Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4696000Z E           
2025-01-10T13:28:40.4696080Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.4696260Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:28:40.4696370Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:28:40.4696500Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4696560Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4696690Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4696760Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4696760Z 
2025-01-10T13:28:40.4696920Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4697080Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply14] ______
2025-01-10T13:28:40.4697080Z 
2025-01-10T13:28:40.4697280Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e54c0>
2025-01-10T13:28:40.4697520Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x31670eae0>
2025-01-10T13:28:40.4697590Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4697660Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4697740Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4697820Z               '...{erg\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:28:40.4697970Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4698170Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply14]>>
2025-01-10T13:28:40.4698170Z 
2025-01-10T13:28:40.4698230Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4698360Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4698400Z     ):
2025-01-10T13:28:40.4698470Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4698540Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4698680Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4698990Z     
2025-01-10T13:28:40.4699080Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4699150Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4699260Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4699340Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4699390Z             )
2025-01-10T13:28:40.4699430Z     
2025-01-10T13:28:40.4699500Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4699580Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4699640Z             if data.stackgroup:
2025-01-10T13:28:40.4699690Z                 assert (
2025-01-10T13:28:40.4699750Z                     data.stackgroup
2025-01-10T13:28:40.4699800Z                     == getattr(
2025-01-10T13:28:40.4699880Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4699960Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4700010Z                     ).decode()
2025-01-10T13:28:40.4700060Z                 )
2025-01-10T13:28:40.4700110Z             if data.name:
2025-01-10T13:28:40.4700160Z                 assert (
2025-01-10T13:28:40.4700210Z                     data.name
2025-01-10T13:28:40.4700260Z                     == getattr(
2025-01-10T13:28:40.4700340Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4700410Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4700460Z                     ).decode()
2025-01-10T13:28:40.4700500Z                 )
2025-01-10T13:28:40.4700570Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4700660Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4700700Z             )
2025-01-10T13:28:40.4700770Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4701060Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4701120Z             )
2025-01-10T13:28:40.4701130Z 
2025-01-10T13:28:40.4701230Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4701330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4701330Z 
2025-01-10T13:28:40.4701670Z args = (<function assert_allclose.<locals>.compare at 0x32eb7d080>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38, .....), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:28:40.4701750Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4701950Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4701950Z 
2025-01-10T13:28:40.4702000Z     @wraps(func)
2025-01-10T13:28:40.4702060Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4702110Z         with self._recreate_cm():
2025-01-10T13:28:40.4702180Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4702230Z E           AssertionError: 
2025-01-10T13:28:40.4702310Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4702370Z E           
2025-01-10T13:28:40.4702440Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.4702550Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:28:40.4702650Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:28:40.4702780Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4702840Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4702960Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4703020Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4703030Z 
2025-01-10T13:28:40.4703180Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4703390Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply15] ______
2025-01-10T13:28:40.4703400Z 
2025-01-10T13:28:40.4703600Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x1446e5580>
2025-01-10T13:28:40.4703850Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x30e6b99d0>
2025-01-10T13:28:40.4703920Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:28:40.4703980Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:28:40.4704060Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:28:40.4704130Z               '...{erg\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:28:40.4704290Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x310bdff80>)
2025-01-10T13:28:40.4704480Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply15]>>
2025-01-10T13:28:40.4704480Z 
2025-01-10T13:28:40.4704550Z     def test_generate_plot_mpl(
2025-01-10T13:28:40.4704680Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:28:40.4704720Z     ):
2025-01-10T13:28:40.4704790Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:28:40.4704870Z         regression_data = RegressionData(request)
2025-01-10T13:28:40.4705000Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:28:40.4705040Z     
2025-01-10T13:28:40.4705120Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:28:40.4705190Z             np.testing.assert_array_equal(
2025-01-10T13:28:40.4705300Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:28:40.4705380Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:28:40.4705420Z             )
2025-01-10T13:28:40.4705460Z     
2025-01-10T13:28:40.4705540Z         for index, data in enumerate(fig.data):
2025-01-10T13:28:40.4705610Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:28:40.4705720Z             if data.stackgroup:
2025-01-10T13:28:40.4705770Z                 assert (
2025-01-10T13:28:40.4705830Z                     data.stackgroup
2025-01-10T13:28:40.4705880Z                     == getattr(
2025-01-10T13:28:40.4705950Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4706020Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:28:40.4706070Z                     ).decode()
2025-01-10T13:28:40.4706120Z                 )
2025-01-10T13:28:40.4706170Z             if data.name:
2025-01-10T13:28:40.4706220Z                 assert (
2025-01-10T13:28:40.4706270Z                     data.name
2025-01-10T13:28:40.4706320Z                     == getattr(
2025-01-10T13:28:40.4706390Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:28:40.4706460Z                         "_" + str(index) + "name",
2025-01-10T13:28:40.4706510Z                     ).decode()
2025-01-10T13:28:40.4706550Z                 )
2025-01-10T13:28:40.4706620Z             np.testing.assert_allclose(
2025-01-10T13:28:40.4706720Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:28:40.4706760Z             )
2025-01-10T13:28:40.4706820Z >           np.testing.assert_allclose(
2025-01-10T13:28:40.4706910Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:28:40.4706960Z             )
2025-01-10T13:28:40.4706960Z 
2025-01-10T13:28:40.4707070Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:28:40.4707150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:28:40.4707160Z 
2025-01-10T13:28:40.4707500Z args = (<function assert_allclose.<locals>.compare at 0x32eb7dd00>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38, .....), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:28:40.4707580Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:28:40.4707780Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:28:40.4707830Z 
2025-01-10T13:28:40.4707880Z     @wraps(func)
2025-01-10T13:28:40.4707940Z     def inner(*args, **kwds):
2025-01-10T13:28:40.4707990Z         with self._recreate_cm():
2025-01-10T13:28:40.4708050Z >           return func(*args, **kwds)
2025-01-10T13:28:40.4708110Z E           AssertionError: 
2025-01-10T13:28:40.4708190Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4708240Z E           
2025-01-10T13:28:40.4708310Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.4708410Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:28:40.4708510Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:28:40.4708930Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4709250Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4709410Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.4709470Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.4709470Z 
2025-01-10T13:28:40.4709630Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:28:40.4709720Z =============================== warnings summary ===============================
2025-01-10T13:28:40.4709810Z tardis/io/configuration/config_validator.py:6
2025-01-10T13:28:40.4709890Z tardis/io/configuration/config_validator.py:6
2025-01-10T13:28:40.4710130Z   /Users/runner/work/tardis/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
2025-01-10T13:28:40.4710180Z   
2025-01-10T13:28:40.4713710Z   jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
2025-01-10T13:28:40.4715080Z 
2025-01-10T13:28:40.4715390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22
2025-01-10T13:28:40.4715690Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
2025-01-10T13:28:40.4715740Z   
2025-01-10T13:28:40.4715860Z   Jupyter is migrating its paths to use standard platformdirs
2025-01-10T13:28:40.4715980Z   given by the platformdirs library.  To remove this warning and
2025-01-10T13:28:40.4716110Z   see the appropriate new directories, set the environment variable
2025-01-10T13:28:40.4716470Z   `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
2025-01-10T13:28:40.4716600Z   The use of platformdirs will be the default in `jupyter_core` v6
2025-01-10T13:28:40.4716610Z 
2025-01-10T13:28:40.4716700Z tardis/plasma/properties/__init__.py:17
2025-01-10T13:28:40.4716940Z   /Users/runner/work/tardis/tardis/tardis/plasma/properties/__init__.py:17: DeprecationWarning:
2025-01-10T13:28:40.4716990Z   
2025-01-10T13:28:40.4717430Z   The numpy.linalg.linalg has been made private and renamed to numpy.linalg._linalg. All public functions exported by it are available from numpy.linalg. Please use numpy.linalg.LinAlgError instead.
2025-01-10T13:28:40.4717440Z 
2025-01-10T13:28:40.4718160Z tardis/io/tests/test_HDFWriter.py::test_multi_index_write
2025-01-10T13:28:40.4718360Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:28:40.4718540Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:276: PerformanceWarning:
2025-01-10T13:28:40.4718580Z   
2025-01-10T13:28:40.4718630Z   
2025-01-10T13:28:40.4718780Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:28:40.4718990Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-10T13:28:40.4719230Z 
2025-01-10T13:28:40.4719380Z tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
2025-01-10T13:28:40.4719550Z tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
2025-01-10T13:28:40.4719720Z tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
2025-01-10T13:28:40.4719860Z tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
2025-01-10T13:28:40.4720100Z   /Users/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
2025-01-10T13:28:40.4720140Z   
2025-01-10T13:28:40.4720230Z   The current CMFGEN model parser is deprecated
2025-01-10T13:28:40.4720230Z 
2025-01-10T13:28:40.4720310Z tardis/io/tests/test_model_reader.py: 1 warning
2025-01-10T13:28:40.4720440Z tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
2025-01-10T13:28:40.4720680Z   /Users/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
2025-01-10T13:28:40.4720730Z   
2025-01-10T13:28:40.4720810Z   The current CMFGEN model parser is deprecated
2025-01-10T13:28:40.4720810Z 
2025-01-10T13:28:40.4720970Z tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
2025-01-10T13:28:40.4721260Z   /Users/runner/work/tardis/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
2025-01-10T13:28:40.4721310Z   
2025-01-10T13:28:40.4721850Z   [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m
2025-01-10T13:28:40.4721860Z 
2025-01-10T13:28:40.4721940Z tardis/model/tests/test_base.py: 6 warnings
2025-01-10T13:28:40.4722030Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-10T13:28:40.4722160Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-10T13:28:40.4722370Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
2025-01-10T13:28:40.4722520Z   
2025-01-10T13:28:40.4722600Z   v_inner_boundary < 0, assuming default value
2025-01-10T13:28:40.4722610Z 
2025-01-10T13:28:40.4722680Z tardis/model/tests/test_base.py: 6 warnings
2025-01-10T13:28:40.4722770Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-10T13:28:40.4722900Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-10T13:28:40.4723110Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
2025-01-10T13:28:40.4723150Z   
2025-01-10T13:28:40.4723220Z   v_outer_boundary < 0, assuming default value
2025-01-10T13:28:40.4723230Z 
2025-01-10T13:28:40.4723600Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:28:40.4723870Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:28:40.4724110Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:28:40.4724360Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:28:40.4724780Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_simple[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:28:40.4725190Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_empty[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:28:40.4725600Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_zeros[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:28:40.4725940Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:28:40.4726230Z tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:28:40.4727290Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/pickle.py:323: DeprecationWarning:
2025-01-10T13:28:40.4727340Z   
2025-01-10T13:28:40.4728430Z   numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
2025-01-10T13:28:40.4728430Z 
2025-01-10T13:28:40.4728790Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:28:40.4729030Z   /Users/runner/work/tardis/tardis/tardis/plasma/equilibrium/level_populations.py:65: FutureWarning:
2025-01-10T13:28:40.4729080Z   
2025-01-10T13:28:40.4729300Z   A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
2025-01-10T13:28:40.4730240Z   The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.
2025-01-10T13:28:40.4730310Z   
2025-01-10T13:28:40.4730720Z   For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.
2025-01-10T13:28:40.4730730Z 
2025-01-10T13:28:40.4731030Z tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:28:40.4731280Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1374: DeprecationWarning:
2025-01-10T13:28:40.4731750Z   
2025-01-10T13:28:40.4732870Z   numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
2025-01-10T13:28:40.4732880Z 
2025-01-10T13:28:40.4733000Z tardis/plasma/tests/test_complete_plasmas.py: 20 warnings
2025-01-10T13:28:40.4733220Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:28:40.4733270Z   
2025-01-10T13:28:40.4733330Z   Property "atomic_mass" not found
2025-01-10T13:28:40.4733330Z 
2025-01-10T13:28:40.4733680Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
2025-01-10T13:28:40.4733990Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
2025-01-10T13:28:40.4734210Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:28:40.4734260Z   
2025-01-10T13:28:40.4734330Z   Property "j_blues_norm_factor" not found
2025-01-10T13:28:40.4734330Z 
2025-01-10T13:28:40.4734650Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
2025-01-10T13:28:40.4734930Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
2025-01-10T13:28:40.4735140Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:28:40.4735190Z   
2025-01-10T13:28:40.4737110Z   Property "j_blue_estimator" not found
2025-01-10T13:28:40.4737330Z 
2025-01-10T13:28:40.4737720Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
2025-01-10T13:28:40.4738010Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
2025-01-10T13:28:40.4738250Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:28:40.4738300Z   
2025-01-10T13:28:40.4738370Z   Property "volume" not found
2025-01-10T13:28:40.4738370Z 
2025-01-10T13:28:40.4738680Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
2025-01-10T13:28:40.4738950Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
2025-01-10T13:28:40.4739170Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:28:40.4739220Z   
2025-01-10T13:28:40.4739290Z   Property "r_inner" not found
2025-01-10T13:28:40.4739290Z 
2025-01-10T13:28:40.4739450Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
2025-01-10T13:28:40.4739610Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
2025-01-10T13:28:40.4739780Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
2025-01-10T13:28:40.4739980Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
2025-01-10T13:28:40.4740030Z   
2025-01-10T13:28:40.4740170Z   Requesting inner boundary below inner shell. Extrapolating the inner cell
2025-01-10T13:28:40.4740180Z 
2025-01-10T13:28:40.4740550Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100.0]
2025-01-10T13:28:40.4740740Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[1000.0]
2025-01-10T13:28:40.4741040Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[10000.0]
2025-01-10T13:28:40.4741240Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100000.0]
2025-01-10T13:28:40.4741540Z   /Users/runner/work/tardis/tardis/tardis/spectrum/tests/test_numba_formal_integral.py:35: DeprecationWarning:
2025-01-10T13:28:40.4741590Z   
2025-01-10T13:28:40.4741830Z   `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
2025-01-10T13:28:40.4741830Z 
2025-01-10T13:28:40.4742000Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-10T13:28:40.4742160Z   /Users/runner/work/tardis/tardis/tardis/spectrum/base.py:70: UserWarning:
2025-01-10T13:28:40.4742210Z   
2025-01-10T13:28:40.4742470Z   SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0
2025-01-10T13:28:40.4742470Z 
2025-01-10T13:28:40.4742640Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-10T13:28:40.4742810Z   /Users/runner/work/tardis/tardis/tardis/spectrum/base.py:111: UserWarning:
2025-01-10T13:28:40.4742850Z   
2025-01-10T13:28:40.4743130Z   SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.
2025-01-10T13:28:40.4743130Z 
2025-01-10T13:28:40.4743290Z tardis/tests/test_util.py::test_calculate_luminosity[string_io0-100 km-result0]
2025-01-10T13:28:40.4743450Z tardis/tests/test_util.py::test_calculate_luminosity[string_io1-500 km-result1]
2025-01-10T13:28:40.4743610Z   /Users/runner/work/tardis/tardis/tardis/util/base.py:188: DeprecationWarning:
2025-01-10T13:28:40.4743650Z   
2025-01-10T13:28:40.4744030Z   `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
2025-01-10T13:28:40.4744130Z 
2025-01-10T13:28:40.4744750Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:28:40.4745170Z   /Users/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:736: DeprecationWarning:
2025-01-10T13:28:40.4745210Z   
2025-01-10T13:28:40.4745300Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:28:40.4745300Z 
2025-01-10T13:28:40.4745430Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:28:40.4745670Z   /Users/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:758: DeprecationWarning:
2025-01-10T13:28:40.4745720Z   
2025-01-10T13:28:40.4745800Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:28:40.4745800Z 
2025-01-10T13:28:40.4746020Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:28:40.4746500Z   /Users/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:779: DeprecationWarning:
2025-01-10T13:28:40.4746570Z   
2025-01-10T13:28:40.4751530Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:28:40.4751540Z 
2025-01-10T13:28:40.4752190Z tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
2025-01-10T13:28:40.4752440Z   /Users/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
2025-01-10T13:28:40.4752480Z   
2025-01-10T13:28:40.4753150Z   More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
2025-01-10T13:28:40.4753150Z 
2025-01-10T13:28:40.4753430Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4753700Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4753980Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4754430Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4754700Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4754970Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4755240Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:28:40.4755290Z   
2025-01-10T13:28:40.4755430Z   Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
2025-01-10T13:28:40.4755570Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:28:40.4755760Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:28:40.4755760Z 
2025-01-10T13:28:40.4756030Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4756300Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4756580Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:28:40.4756630Z   
2025-01-10T13:28:40.4756770Z   Passing unrecognized arguments to super(FloatText).__init__(min=0).
2025-01-10T13:28:40.4756910Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:28:40.4757090Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:28:40.4757090Z 
2025-01-10T13:28:40.4757370Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:28:40.4757650Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:28:40.4757780Z   
2025-01-10T13:28:40.4757920Z   Passing unrecognized arguments to super(HTML).__init__(indent=True).
2025-01-10T13:28:40.4758070Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:28:40.4758590Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:28:40.4758600Z 
2025-01-10T13:28:40.4758930Z tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
2025-01-10T13:28:40.4759180Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/qgridnext/grid.py:825: DeprecationWarning:
2025-01-10T13:28:40.4759230Z   
2025-01-10T13:28:40.4759440Z   QgridWidget._grid_options_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.
2025-01-10T13:28:40.4759440Z 
2025-01-10T13:28:40.4759640Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:28:40.4759810Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:289: PerformanceWarning:
2025-01-10T13:28:40.4759860Z   
2025-01-10T13:28:40.4759900Z   
2025-01-10T13:28:40.4760060Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:28:40.4760260Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-10T13:28:40.4760260Z 
2025-01-10T13:28:40.4760460Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:28:40.4760620Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:292: PerformanceWarning:
2025-01-10T13:28:40.4760670Z   
2025-01-10T13:28:40.4760710Z   
2025-01-10T13:28:40.4760870Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:28:40.4761000Z   map directly to c-types [inferred_type->mixed,key->values] [items->None]
2025-01-10T13:28:40.4761090Z 
2025-01-10T13:28:40.4761290Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:28:40.4761480Z   /Users/runner/work/tardis/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
2025-01-10T13:28:40.4761610Z   
2025-01-10T13:28:40.4761810Z   The number of interpolate_shells was not specified. The value was set to 80.
2025-01-10T13:28:40.4761810Z 
2025-01-10T13:28:40.4761980Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-01-10T13:28:40.4761980Z 
2025-01-10T13:28:40.4762110Z ---------- coverage: platform darwin, python 3.12.4-final-0 ----------
2025-01-10T13:28:40.4762200Z Coverage HTML written to dir coverage_html_report
2025-01-10T13:28:40.4762270Z Coverage XML written to file coverage.xml
2025-01-10T13:28:40.4762270Z 
2025-01-10T13:28:40.4762370Z =========================== short test summary info ============================
2025-01-10T13:28:40.4762700Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_sobolev_line_opacity - AssertionError: MultiIndex level [0] are different
2025-01-10T13:28:40.4762710Z 
2025-01-10T13:28:40.4762820Z MultiIndex level [0] values are different (0.09581 %)
2025-01-10T13:28:40.4762900Z [left]:  Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:28:40.4762950Z        ...
2025-01-10T13:28:40.4763010Z        20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:28:40.4763100Z       dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:28:40.4763190Z [right]: Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:28:40.4763230Z        ...
2025-01-10T13:28:40.4763290Z        20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:28:40.4763370Z       dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:28:40.4763450Z At positional index 54, first diff: 12 != 14
2025-01-10T13:28:40.4763660Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_beta_sobolevs - AssertionError: 
2025-01-10T13:28:40.4763740Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.4764100Z 
2025-01-10T13:28:40.4764190Z Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:28:40.4764510Z Max absolute difference among violations: 0.99984222
2025-01-10T13:28:40.4765200Z Max relative difference among violations: 6337.12154973
2025-01-10T13:28:40.4765560Z  ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.4765670Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.4765730Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:28:40.4765800Z  DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.4765850Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.4765910Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:28:40.4766380Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4766390Z 
2025-01-10T13:28:40.4766510Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4766850Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4767150Z        ...
2025-01-10T13:28:40.4767320Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4768260Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4768790Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4768980Z        ...
2025-01-10T13:28:40.4770080Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4770200Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4770280Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4770680Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4770680Z 
2025-01-10T13:28:40.4770750Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4772010Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4772310Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4772950Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4773910Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4773920Z 
2025-01-10T13:28:40.4774000Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4774300Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4774680Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4775570Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4776940Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4776950Z 
2025-01-10T13:28:40.4777070Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4777160Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4777210Z        ...
2025-01-10T13:28:40.4777270Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4777370Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4777450Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4777490Z        ...
2025-01-10T13:28:40.4777550Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4777640Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4777720Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4778490Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4778500Z 
2025-01-10T13:28:40.4778610Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4778820Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4778870Z        ...
2025-01-10T13:28:40.4778930Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4779030Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4779120Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4779160Z        ...
2025-01-10T13:28:40.4779220Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4779320Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4779390Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4781490Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4781500Z 
2025-01-10T13:28:40.4781600Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4781690Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4781760Z        ...
2025-01-10T13:28:40.4781830Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4781930Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4782310Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4783870Z        ...
2025-01-10T13:28:40.4783980Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4784080Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4784140Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4784760Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4784770Z 
2025-01-10T13:28:40.4784870Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4784950Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4785000Z        ...
2025-01-10T13:28:40.4785060Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4785680Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4786210Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4786350Z        ...
2025-01-10T13:28:40.4786520Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4786780Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4787000Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4788140Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4788150Z 
2025-01-10T13:28:40.4788410Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4788630Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4788760Z        ...
2025-01-10T13:28:40.4788930Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4789370Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4789520Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4789560Z        ...
2025-01-10T13:28:40.4789620Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4789730Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4789810Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4790200Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4790210Z 
2025-01-10T13:28:40.4790300Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4790390Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4790430Z        ...
2025-01-10T13:28:40.4790490Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4790750Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4790850Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4790900Z        ...
2025-01-10T13:28:40.4790960Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4791050Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4791120Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4791480Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4791490Z 
2025-01-10T13:28:40.4791580Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4791660Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4791700Z        ...
2025-01-10T13:28:40.4791760Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4791860Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4791940Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4791990Z        ...
2025-01-10T13:28:40.4792050Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4792140Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4792210Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4792700Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4792720Z 
2025-01-10T13:28:40.4792790Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4793080Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4793470Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4793740Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4794120Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4794130Z 
2025-01-10T13:28:40.4794200Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4794480Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4794780Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4795130Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4795500Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4795500Z 
2025-01-10T13:28:40.4795600Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4795680Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4795730Z        ...
2025-01-10T13:28:40.4795790Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4795880Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4795960Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4796010Z        ...
2025-01-10T13:28:40.4796080Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4796170Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4796240Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4796620Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4796630Z 
2025-01-10T13:28:40.4796720Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4796810Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4796850Z        ...
2025-01-10T13:28:40.4796910Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4797010Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4797090Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4797140Z        ...
2025-01-10T13:28:40.4797580Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4797670Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4797740Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4798090Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4798100Z 
2025-01-10T13:28:40.4798200Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4798280Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4798320Z        ...
2025-01-10T13:28:40.4798380Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4798470Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4798550Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4798600Z        ...
2025-01-10T13:28:40.4798660Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4798750Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4798830Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4800470Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4800480Z 
2025-01-10T13:28:40.4800580Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4800660Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4800710Z        ...
2025-01-10T13:28:40.4800770Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4800850Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4800940Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4800980Z        ...
2025-01-10T13:28:40.4801040Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4801420Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4801500Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4801880Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4801880Z 
2025-01-10T13:28:40.4801970Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4802060Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4802100Z        ...
2025-01-10T13:28:40.4802160Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4802260Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4802340Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4802380Z        ...
2025-01-10T13:28:40.4802440Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4802530Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4802610Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4802970Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4802970Z 
2025-01-10T13:28:40.4803060Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4803320Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4803890Z        ...
2025-01-10T13:28:40.4804010Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4804110Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4804190Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4804240Z        ...
2025-01-10T13:28:40.4804300Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4804390Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4804470Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4804980Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4804990Z 
2025-01-10T13:28:40.4805090Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4805170Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4805410Z        ...
2025-01-10T13:28:40.4805870Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4806030Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4806120Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4806160Z        ...
2025-01-10T13:28:40.4806220Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4806320Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4806390Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4806790Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4806800Z 
2025-01-10T13:28:40.4806860Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4807160Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4807430Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4807820Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4808200Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4808210Z 
2025-01-10T13:28:40.4808290Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4808690Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4809010Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4809310Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4809790Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4809790Z 
2025-01-10T13:28:40.4810390Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4811000Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4811070Z        ...
2025-01-10T13:28:40.4811140Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4811230Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4811310Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4811360Z        ...
2025-01-10T13:28:40.4811420Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4811510Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4811580Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4811980Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4811990Z 
2025-01-10T13:28:40.4812100Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4812180Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4812230Z        ...
2025-01-10T13:28:40.4812280Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4812380Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4812460Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4812500Z        ...
2025-01-10T13:28:40.4812560Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4812650Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4812720Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4813070Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4813170Z 
2025-01-10T13:28:40.4813280Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4813360Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4813400Z        ...
2025-01-10T13:28:40.4813470Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4813550Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4813640Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4813680Z        ...
2025-01-10T13:28:40.4813730Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4813820Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4813890Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4814270Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4814280Z 
2025-01-10T13:28:40.4814380Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4814460Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4814500Z        ...
2025-01-10T13:28:40.4814560Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4814650Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4814740Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4814780Z        ...
2025-01-10T13:28:40.4814840Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4814930Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4815000Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4815370Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4815380Z 
2025-01-10T13:28:40.4815560Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4815630Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4815680Z        ...
2025-01-10T13:28:40.4815730Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4815960Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4816050Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4816090Z        ...
2025-01-10T13:28:40.4816150Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4816240Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4816310Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4816680Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4816680Z 
2025-01-10T13:28:40.4816770Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4816860Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4816900Z        ...
2025-01-10T13:28:40.4816960Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4817050Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4817130Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4817170Z        ...
2025-01-10T13:28:40.4817230Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4817320Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4817390Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4819840Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4819900Z 
2025-01-10T13:28:40.4820190Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4820890Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4821050Z        ...
2025-01-10T13:28:40.4822160Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4822430Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4822640Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4822790Z        ...
2025-01-10T13:28:40.4822950Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4823190Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4823410Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4843760Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4843810Z 
2025-01-10T13:28:40.4844010Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4844840Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4845590Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4846570Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4848260Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4848270Z 
2025-01-10T13:28:40.4848340Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4848640Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4848940Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4849250Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4849640Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4849640Z 
2025-01-10T13:28:40.4849740Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4850150Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4850210Z        ...
2025-01-10T13:28:40.4850270Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4850370Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4850450Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4850500Z        ...
2025-01-10T13:28:40.4850560Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4850650Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4850720Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4851140Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4851140Z 
2025-01-10T13:28:40.4851240Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4851320Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4851380Z        ...
2025-01-10T13:28:40.4851440Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4851530Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4851620Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4851660Z        ...
2025-01-10T13:28:40.4851720Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4851810Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4851890Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4852270Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4852270Z 
2025-01-10T13:28:40.4852370Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4852450Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4852490Z        ...
2025-01-10T13:28:40.4852550Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4852710Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4852800Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4852840Z        ...
2025-01-10T13:28:40.4852900Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4852990Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4853060Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4853450Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4853460Z 
2025-01-10T13:28:40.4853550Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4853630Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4853680Z        ...
2025-01-10T13:28:40.4853730Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4853830Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4853910Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4853950Z        ...
2025-01-10T13:28:40.4854010Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4854820Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4855150Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4856580Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4856590Z 
2025-01-10T13:28:40.4856860Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4857070Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4857210Z        ...
2025-01-10T13:28:40.4857380Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4858140Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4858380Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4858510Z        ...
2025-01-10T13:28:40.4858680Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4859020Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4859130Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4859540Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4859540Z 
2025-01-10T13:28:40.4859640Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4859720Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4859770Z        ...
2025-01-10T13:28:40.4859830Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4859920Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4860010Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4860070Z        ...
2025-01-10T13:28:40.4860130Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4860220Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4860290Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4860730Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4860730Z 
2025-01-10T13:28:40.4860830Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4860920Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4860960Z        ...
2025-01-10T13:28:40.4861020Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4861110Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4861200Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4861460Z        ...
2025-01-10T13:28:40.4861530Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4861620Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4861690Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4862150Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4862150Z 
2025-01-10T13:28:40.4862470Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4862810Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4863100Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4863370Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4863850Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4864010Z 
2025-01-10T13:28:40.4864080Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4864370Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4864670Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4864980Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4865670Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4865680Z 
2025-01-10T13:28:40.4865790Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4865870Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4865920Z        ...
2025-01-10T13:28:40.4865980Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4866070Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4866270Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4866310Z        ...
2025-01-10T13:28:40.4866380Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4866470Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4866540Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4867400Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4867410Z 
2025-01-10T13:28:40.4867530Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4867620Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4867660Z        ...
2025-01-10T13:28:40.4867730Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4867830Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4867920Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4867970Z        ...
2025-01-10T13:28:40.4868030Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4868120Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4868200Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4868640Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4868650Z 
2025-01-10T13:28:40.4868740Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4868820Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4868870Z        ...
2025-01-10T13:28:40.4868930Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4869020Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4869210Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4869260Z        ...
2025-01-10T13:28:40.4869320Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4869410Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4869490Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4869940Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4869950Z 
2025-01-10T13:28:40.4870040Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4870120Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4870160Z        ...
2025-01-10T13:28:40.4870230Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4870310Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4870400Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4870440Z        ...
2025-01-10T13:28:40.4870510Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4870600Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4870670Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4871120Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4871120Z 
2025-01-10T13:28:40.4871220Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4871300Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4871340Z        ...
2025-01-10T13:28:40.4871400Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4871490Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4871570Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4871880Z        ...
2025-01-10T13:28:40.4871940Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4872040Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4872110Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4872550Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4872560Z 
2025-01-10T13:28:40.4872650Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4872730Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4872770Z        ...
2025-01-10T13:28:40.4872830Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4872940Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4873040Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4873110Z        ...
2025-01-10T13:28:40.4873180Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4873300Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4873390Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4873830Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4873840Z 
2025-01-10T13:28:40.4873960Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4874430Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4874480Z        ...
2025-01-10T13:28:40.4874550Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4874640Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4874720Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4874770Z        ...
2025-01-10T13:28:40.4875080Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4875180Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4875250Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4875680Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4875680Z 
2025-01-10T13:28:40.4875750Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4876050Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4876310Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4876580Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4877000Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4877010Z 
2025-01-10T13:28:40.4877070Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4878320Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4879280Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4880120Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4881320Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4881330Z 
2025-01-10T13:28:40.4886890Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4887100Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4887140Z        ...
2025-01-10T13:28:40.4887210Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4887310Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4887390Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4887690Z        ...
2025-01-10T13:28:40.4887780Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4887890Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4887970Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4888440Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4888440Z 
2025-01-10T13:28:40.4888540Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4888620Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4888660Z        ...
2025-01-10T13:28:40.4888720Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4888810Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4888900Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4888940Z        ...
2025-01-10T13:28:40.4889010Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4889100Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4889180Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4889580Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4889580Z 
2025-01-10T13:28:40.4889680Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4889760Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4889800Z        ...
2025-01-10T13:28:40.4889860Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4889950Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4890030Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4890080Z        ...
2025-01-10T13:28:40.4890140Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4890230Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4890400Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4890830Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4890830Z 
2025-01-10T13:28:40.4890920Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4891010Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4891050Z        ...
2025-01-10T13:28:40.4891110Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4891200Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4891280Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4891320Z        ...
2025-01-10T13:28:40.4891380Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4891470Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4891550Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4891970Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4891980Z 
2025-01-10T13:28:40.4892070Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4892150Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4892200Z        ...
2025-01-10T13:28:40.4892250Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4892350Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4892430Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4892470Z        ...
2025-01-10T13:28:40.4892530Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4894180Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4895110Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4896470Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4896500Z 
2025-01-10T13:28:40.4896780Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4897000Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4897140Z        ...
2025-01-10T13:28:40.4897310Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4897690Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4897930Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4898060Z        ...
2025-01-10T13:28:40.4898220Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4898480Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4898700Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4900120Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4900150Z 
2025-01-10T13:28:40.4900410Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4900630Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4900770Z        ...
2025-01-10T13:28:40.4900930Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4901190Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4903010Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4903060Z        ...
2025-01-10T13:28:40.4903120Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4903210Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4903290Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4903730Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4903940Z 
2025-01-10T13:28:40.4904030Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4904330Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4904600Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4905910Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4907730Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4907750Z 
2025-01-10T13:28:40.4907840Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4908410Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4909090Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4909630Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4910650Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4910660Z 
2025-01-10T13:28:40.4910780Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4910870Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4910910Z        ...
2025-01-10T13:28:40.4910970Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4911070Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4911600Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4913400Z        ...
2025-01-10T13:28:40.4913470Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4913560Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4913630Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4915070Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4915080Z 
2025-01-10T13:28:40.4915190Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4915260Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4915310Z        ...
2025-01-10T13:28:40.4915370Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4915480Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4915560Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4915610Z        ...
2025-01-10T13:28:40.4915670Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4917380Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4917500Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4917920Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4917930Z 
2025-01-10T13:28:40.4918030Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4918380Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4918440Z        ...
2025-01-10T13:28:40.4918500Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4918590Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4918670Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4918720Z        ...
2025-01-10T13:28:40.4918780Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4919250Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4919960Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4920980Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4921760Z 
2025-01-10T13:28:40.4921900Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4921980Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4922030Z        ...
2025-01-10T13:28:40.4922330Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4922740Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4923260Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4924260Z        ...
2025-01-10T13:28:40.4924330Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4924770Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4925190Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4927250Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4927310Z 
2025-01-10T13:28:40.4927580Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4927820Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4927970Z        ...
2025-01-10T13:28:40.4928140Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4928390Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4935820Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4936000Z        ...
2025-01-10T13:28:40.4936380Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4936620Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4936820Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4937970Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4938580Z 
2025-01-10T13:28:40.4938850Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4939070Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4939200Z        ...
2025-01-10T13:28:40.4939370Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4939620Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4939860Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4940170Z        ...
2025-01-10T13:28:40.4940350Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4940650Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4940860Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4942050Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4942090Z 
2025-01-10T13:28:40.4942340Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4942560Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4942700Z        ...
2025-01-10T13:28:40.4942860Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4943350Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4943520Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4943570Z        ...
2025-01-10T13:28:40.4943640Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4943730Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4943810Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4944280Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4944620Z 
2025-01-10T13:28:40.4944700Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4945010Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4945270Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4945520Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4945980Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4945990Z 
2025-01-10T13:28:40.4946050Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4946340Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4946640Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4947060Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4947490Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4947500Z 
2025-01-10T13:28:40.4947600Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4947690Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4947730Z        ...
2025-01-10T13:28:40.4947790Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4947890Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4947970Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4948010Z        ...
2025-01-10T13:28:40.4948070Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4948160Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4948230Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4948680Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4948740Z 
2025-01-10T13:28:40.4948850Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4948930Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4948970Z        ...
2025-01-10T13:28:40.4949030Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4949120Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4949200Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4949240Z        ...
2025-01-10T13:28:40.4949300Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4949390Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4949460Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4949880Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4949880Z 
2025-01-10T13:28:40.4949980Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4950070Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4950110Z        ...
2025-01-10T13:28:40.4950170Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4950260Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4950340Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4950390Z        ...
2025-01-10T13:28:40.4950450Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4950540Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4950610Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4951040Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4951050Z 
2025-01-10T13:28:40.4951150Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4951300Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4951340Z        ...
2025-01-10T13:28:40.4951400Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4951490Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4951570Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4951610Z        ...
2025-01-10T13:28:40.4951670Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4951760Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4951830Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4952270Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4952270Z 
2025-01-10T13:28:40.4952370Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4952450Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4952500Z        ...
2025-01-10T13:28:40.4952560Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4952650Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4952730Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4952780Z        ...
2025-01-10T13:28:40.4952830Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4952920Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4952990Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4953420Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4953420Z 
2025-01-10T13:28:40.4953520Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4953650Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4953700Z        ...
2025-01-10T13:28:40.4953760Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4953850Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4953930Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4953980Z        ...
2025-01-10T13:28:40.4954030Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4954130Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4954200Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4954600Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4954600Z 
2025-01-10T13:28:40.4954700Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4954780Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4954830Z        ...
2025-01-10T13:28:40.4954890Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4954980Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4955060Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4955100Z        ...
2025-01-10T13:28:40.4955160Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4955250Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4955330Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4955740Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4955740Z 
2025-01-10T13:28:40.4955800Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4956090Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4956650Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4956910Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4957330Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4957340Z 
2025-01-10T13:28:40.4957410Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4957690Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4957990Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4958500Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4958910Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4958910Z 
2025-01-10T13:28:40.4959010Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4959100Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4959150Z        ...
2025-01-10T13:28:40.4959210Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4959300Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4959390Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4959430Z        ...
2025-01-10T13:28:40.4959500Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4959590Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4959660Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4960150Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4960170Z 
2025-01-10T13:28:40.4960270Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4960350Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4960540Z        ...
2025-01-10T13:28:40.4960610Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4960700Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4960780Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4960830Z        ...
2025-01-10T13:28:40.4960890Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4960980Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4961060Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4961680Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4961690Z 
2025-01-10T13:28:40.4961800Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4961880Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4961940Z        ...
2025-01-10T13:28:40.4962000Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4962100Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4962190Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4962230Z        ...
2025-01-10T13:28:40.4962290Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4962380Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4962460Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4962900Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4962910Z 
2025-01-10T13:28:40.4963010Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4963090Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4963130Z        ...
2025-01-10T13:28:40.4963190Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4963480Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4963570Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4963610Z        ...
2025-01-10T13:28:40.4963670Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4963760Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4963830Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4965230Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4965300Z 
2025-01-10T13:28:40.4965610Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4965840Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4966020Z        ...
2025-01-10T13:28:40.4966180Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4966460Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4966700Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4966840Z        ...
2025-01-10T13:28:40.4967000Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4967240Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4967450Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4968170Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4968190Z 
2025-01-10T13:28:40.4968310Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4968390Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4968430Z        ...
2025-01-10T13:28:40.4968490Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4968590Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4968860Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4968910Z        ...
2025-01-10T13:28:40.4968980Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4969070Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4969140Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4969570Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4969570Z 
2025-01-10T13:28:40.4969630Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4969940Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4970200Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4970470Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4970880Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4970960Z 
2025-01-10T13:28:40.4971020Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4971310Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4971600Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4971910Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4972310Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4972310Z 
2025-01-10T13:28:40.4972410Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4972490Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4972530Z        ...
2025-01-10T13:28:40.4972600Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4972690Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4972850Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4972900Z        ...
2025-01-10T13:28:40.4972960Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4973050Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4973120Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4973550Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4973560Z 
2025-01-10T13:28:40.4973650Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4973730Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4973770Z        ...
2025-01-10T13:28:40.4973830Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4973920Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4974030Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4974090Z        ...
2025-01-10T13:28:40.4974140Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4974230Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4974310Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4974700Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4974710Z 
2025-01-10T13:28:40.4974800Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4974880Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4974920Z        ...
2025-01-10T13:28:40.4974980Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4975070Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4975230Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4975280Z        ...
2025-01-10T13:28:40.4975350Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4975440Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4975520Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4975940Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4975950Z 
2025-01-10T13:28:40.4976040Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4976120Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4976160Z        ...
2025-01-10T13:28:40.4976220Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4976460Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4976550Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4976600Z        ...
2025-01-10T13:28:40.4976670Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4976770Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4976840Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4977270Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4977270Z 
2025-01-10T13:28:40.4977360Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4977450Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4977490Z        ...
2025-01-10T13:28:40.4977550Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4977640Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4977720Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4977770Z        ...
2025-01-10T13:28:40.4978180Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4978280Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4978350Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4978880Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4978900Z 
2025-01-10T13:28:40.4979000Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4979080Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4979130Z        ...
2025-01-10T13:28:40.4979200Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4979290Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4979380Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4979420Z        ...
2025-01-10T13:28:40.4979490Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4979580Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4979660Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4980090Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4980090Z 
2025-01-10T13:28:40.4980180Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4980650Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4982130Z        ...
2025-01-10T13:28:40.4982200Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4982290Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4982370Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4982420Z        ...
2025-01-10T13:28:40.4982480Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4982970Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4983060Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4983480Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4983480Z 
2025-01-10T13:28:40.4983550Z Series values are different (4.04858 %)
2025-01-10T13:28:40.4983840Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4984100Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4984370Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.4984800Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.4984800Z 
2025-01-10T13:28:40.4985290Z Series values are different (6.47773 %)
2025-01-10T13:28:40.4986240Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.4988090Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4990230Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.4991640Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4991680Z 
2025-01-10T13:28:40.4991830Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4991920Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4991970Z        ...
2025-01-10T13:28:40.4992040Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4992140Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4992230Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4992280Z        ...
2025-01-10T13:28:40.4992530Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4992650Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4992730Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4993200Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4993210Z 
2025-01-10T13:28:40.4993310Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4993390Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4993440Z        ...
2025-01-10T13:28:40.4993500Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4993600Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4993680Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4993720Z        ...
2025-01-10T13:28:40.4993780Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4993870Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4993960Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4994370Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4994370Z 
2025-01-10T13:28:40.4994480Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4994560Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4994600Z        ...
2025-01-10T13:28:40.4994660Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4994760Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4994840Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4994880Z        ...
2025-01-10T13:28:40.4994940Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4995040Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4995210Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4995650Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4995660Z 
2025-01-10T13:28:40.4995750Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4995830Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4995880Z        ...
2025-01-10T13:28:40.4995940Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4996030Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4996110Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4996160Z        ...
2025-01-10T13:28:40.4996210Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4996310Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4996380Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4996810Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4996820Z 
2025-01-10T13:28:40.4996910Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4996980Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4997030Z        ...
2025-01-10T13:28:40.4997090Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4997180Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4997260Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4997300Z        ...
2025-01-10T13:28:40.4997360Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4997450Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4997580Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4998000Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4998010Z 
2025-01-10T13:28:40.4998100Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4998180Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4998220Z        ...
2025-01-10T13:28:40.4998280Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4998370Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4998460Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4998500Z        ...
2025-01-10T13:28:40.4998560Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4998650Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4998730Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.4999140Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.4999150Z 
2025-01-10T13:28:40.4999240Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.4999320Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4999360Z        ...
2025-01-10T13:28:40.4999420Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4999520Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4999600Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.4999640Z        ...
2025-01-10T13:28:40.4999700Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.4999790Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.4999860Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5000280Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5000350Z 
2025-01-10T13:28:40.5000450Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5000740Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5001010Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5001280Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5001700Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5001710Z 
2025-01-10T13:28:40.5001770Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5002060Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5002400Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5002700Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5003110Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5003120Z 
2025-01-10T13:28:40.5003210Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5003290Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5003340Z        ...
2025-01-10T13:28:40.5003390Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5003490Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5003570Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5003610Z        ...
2025-01-10T13:28:40.5003670Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5003760Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5003830Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5004260Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5004490Z 
2025-01-10T13:28:40.5004600Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5004680Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5004730Z        ...
2025-01-10T13:28:40.5004790Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5004880Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5004960Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5005000Z        ...
2025-01-10T13:28:40.5005060Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5005150Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5005220Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5005610Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5005620Z 
2025-01-10T13:28:40.5005730Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5010430Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5010510Z        ...
2025-01-10T13:28:40.5010570Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5010670Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5010750Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5010790Z        ...
2025-01-10T13:28:40.5010860Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5010950Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5011020Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5011440Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5011810Z 
2025-01-10T13:28:40.5011910Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5011990Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5012040Z        ...
2025-01-10T13:28:40.5012100Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5012190Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5012270Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5012320Z        ...
2025-01-10T13:28:40.5012370Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5012470Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5012540Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5013010Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5013030Z 
2025-01-10T13:28:40.5013120Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5013200Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5013250Z        ...
2025-01-10T13:28:40.5013300Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5013390Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5013470Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5013520Z        ...
2025-01-10T13:28:40.5013580Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5013670Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5013740Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5014150Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5014230Z 
2025-01-10T13:28:40.5014330Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5014410Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5014450Z        ...
2025-01-10T13:28:40.5014510Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5014600Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5014680Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5014730Z        ...
2025-01-10T13:28:40.5014780Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5014870Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5014940Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5015350Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5015360Z 
2025-01-10T13:28:40.5015450Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5015530Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5015580Z        ...
2025-01-10T13:28:40.5015630Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5015720Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5015800Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5015850Z        ...
2025-01-10T13:28:40.5015900Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5015990Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5016060Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5016700Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5016710Z 
2025-01-10T13:28:40.5016830Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5017130Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5017380Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5017640Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5018080Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5018080Z 
2025-01-10T13:28:40.5018150Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5018440Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5018740Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5019110Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5019500Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5019510Z 
2025-01-10T13:28:40.5019610Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5019690Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5019740Z        ...
2025-01-10T13:28:40.5019790Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5019880Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5019970Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5020010Z        ...
2025-01-10T13:28:40.5020070Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5020160Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5020240Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5020660Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5020740Z 
2025-01-10T13:28:40.5020840Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5020930Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5020970Z        ...
2025-01-10T13:28:40.5021040Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5021130Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5021210Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5021260Z        ...
2025-01-10T13:28:40.5021310Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5021410Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5021470Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5021880Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5021880Z 
2025-01-10T13:28:40.5021980Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5022060Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5022110Z        ...
2025-01-10T13:28:40.5022170Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5022260Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5022340Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5022390Z        ...
2025-01-10T13:28:40.5022450Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5022540Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5022610Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5023040Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5023040Z 
2025-01-10T13:28:40.5023140Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5023270Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5023320Z        ...
2025-01-10T13:28:40.5023380Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5023470Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5023550Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5023590Z        ...
2025-01-10T13:28:40.5023650Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5023740Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5023810Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5024240Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5024250Z 
2025-01-10T13:28:40.5024340Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5024430Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5024470Z        ...
2025-01-10T13:28:40.5024530Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5024630Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5024700Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5024750Z        ...
2025-01-10T13:28:40.5024810Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5024900Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5024970Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5025380Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5025380Z 
2025-01-10T13:28:40.5025470Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5025550Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5025650Z        ...
2025-01-10T13:28:40.5025710Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5025800Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5025880Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5025930Z        ...
2025-01-10T13:28:40.5025990Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5026080Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5026150Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5026590Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5026600Z 
2025-01-10T13:28:40.5026690Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5026770Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5026810Z        ...
2025-01-10T13:28:40.5026880Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5026980Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5027060Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5027100Z        ...
2025-01-10T13:28:40.5027160Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5027250Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5027320Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5027770Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5027780Z 
2025-01-10T13:28:40.5027840Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5028130Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5028650Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5028930Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5029390Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5029400Z 
2025-01-10T13:28:40.5029470Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5029760Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5030050Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5030570Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5031010Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5031010Z 
2025-01-10T13:28:40.5031110Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5031200Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5031250Z        ...
2025-01-10T13:28:40.5031310Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5031400Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5031490Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5031530Z        ...
2025-01-10T13:28:40.5031590Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5031690Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5031760Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5032230Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5032230Z 
2025-01-10T13:28:40.5032330Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5032470Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5032510Z        ...
2025-01-10T13:28:40.5032570Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5032670Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5032750Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5032790Z        ...
2025-01-10T13:28:40.5032850Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5032950Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5033020Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5033450Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5033460Z 
2025-01-10T13:28:40.5033560Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5033640Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5033690Z        ...
2025-01-10T13:28:40.5033750Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5033840Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5033930Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5033970Z        ...
2025-01-10T13:28:40.5034030Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5034430Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5034640Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5035540Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.5035600Z 
2025-01-10T13:28:40.5035770Z DataFrame.iloc[:, 0] (column name="0") values are different (0.80972 %)
2025-01-10T13:28:40.5036450Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5041670Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995981197664222, 0.9995995247961845, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464476, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812783, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235581, ...]
2025-01-10T13:28:40.5045480Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995995247961845, 0.9995981197664222, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812795, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235604, ...]
2025-01-10T13:28:40.5045710Z At positional index 124, first diff: 0.9928779361771577 != 0.9929028359129612
2025-01-10T13:28:40.5046260Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5046270Z 
2025-01-10T13:28:40.5046370Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5046450Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5046500Z        ...
2025-01-10T13:28:40.5046560Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5046660Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5046740Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5046790Z        ...
2025-01-10T13:28:40.5046850Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5046940Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5047020Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5047490Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5047490Z 
2025-01-10T13:28:40.5047590Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5047670Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5047710Z        ...
2025-01-10T13:28:40.5047770Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5047860Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5047950Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5047990Z        ...
2025-01-10T13:28:40.5048050Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5048150Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5048290Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5048760Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5048760Z 
2025-01-10T13:28:40.5048860Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5048940Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5048980Z        ...
2025-01-10T13:28:40.5049040Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5049140Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5049220Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5049270Z        ...
2025-01-10T13:28:40.5049320Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5049420Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5049500Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5049950Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5049950Z 
2025-01-10T13:28:40.5050050Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5050130Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5050170Z        ...
2025-01-10T13:28:40.5050240Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5050330Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5050410Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5050450Z        ...
2025-01-10T13:28:40.5050510Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5050610Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5050740Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5051180Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5051180Z 
2025-01-10T13:28:40.5051270Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5051350Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5051400Z        ...
2025-01-10T13:28:40.5051460Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5051560Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5051640Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5051680Z        ...
2025-01-10T13:28:40.5051740Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5051830Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5051900Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5052380Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5052400Z 
2025-01-10T13:28:40.5052460Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5052760Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5053020Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5053570Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5054020Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5054020Z 
2025-01-10T13:28:40.5054120Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5054410Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5054740Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5055030Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5055690Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5055690Z 
2025-01-10T13:28:40.5055790Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5055870Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5055920Z        ...
2025-01-10T13:28:40.5055980Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5056070Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5056160Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5056200Z        ...
2025-01-10T13:28:40.5056260Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5056360Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5056440Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5057040Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5057050Z 
2025-01-10T13:28:40.5057140Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5057240Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5057280Z        ...
2025-01-10T13:28:40.5057340Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5057430Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5057510Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5057560Z        ...
2025-01-10T13:28:40.5057610Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5057700Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5057870Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5058290Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5058300Z 
2025-01-10T13:28:40.5058390Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5058470Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5058520Z        ...
2025-01-10T13:28:40.5058580Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5058670Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5058750Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5058790Z        ...
2025-01-10T13:28:40.5058850Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5058950Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5059020Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5059550Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.5059550Z 
2025-01-10T13:28:40.5059680Z DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:28:40.5059980Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5063800Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834782, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:28:40.5070360Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:28:40.5070870Z At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:28:40.5071370Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5071430Z 
2025-01-10T13:28:40.5071540Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5071630Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5071670Z        ...
2025-01-10T13:28:40.5071730Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5071830Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5071910Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5071960Z        ...
2025-01-10T13:28:40.5072020Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5072110Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5072180Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5072630Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5072640Z 
2025-01-10T13:28:40.5072740Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5072830Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5072880Z        ...
2025-01-10T13:28:40.5072940Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5073030Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5073120Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5073160Z        ...
2025-01-10T13:28:40.5073220Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5073310Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5073380Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5073830Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5073840Z 
2025-01-10T13:28:40.5073940Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5074080Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5074130Z        ...
2025-01-10T13:28:40.5074190Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5074290Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5074370Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5074410Z        ...
2025-01-10T13:28:40.5074490Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5074590Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5074660Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5075090Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5075100Z 
2025-01-10T13:28:40.5075190Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5075280Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5075330Z        ...
2025-01-10T13:28:40.5075390Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5075480Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5075560Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5075610Z        ...
2025-01-10T13:28:40.5075670Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5075760Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5075830Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5076210Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5076210Z 
2025-01-10T13:28:40.5076310Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5076470Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5076520Z        ...
2025-01-10T13:28:40.5076610Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5076700Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5076790Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5076830Z        ...
2025-01-10T13:28:40.5076890Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5076980Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5077050Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5077450Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5077450Z 
2025-01-10T13:28:40.5077520Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5077820Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5078090Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5078360Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5079000Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5079010Z 
2025-01-10T13:28:40.5079080Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5079370Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5079670Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5079980Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5080360Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5080360Z 
2025-01-10T13:28:40.5080460Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5080740Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5080790Z        ...
2025-01-10T13:28:40.5080860Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5080950Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5081040Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5081080Z        ...
2025-01-10T13:28:40.5081140Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5081230Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5081300Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5082040Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5082050Z 
2025-01-10T13:28:40.5082140Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5082220Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5082280Z        ...
2025-01-10T13:28:40.5082340Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5082430Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5082520Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5082560Z        ...
2025-01-10T13:28:40.5082620Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5082710Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5082780Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5083150Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5083150Z 
2025-01-10T13:28:40.5083240Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5083330Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5083370Z        ...
2025-01-10T13:28:40.5083520Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5083620Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5083700Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5083740Z        ...
2025-01-10T13:28:40.5083800Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5083890Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5083960Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5084420Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.5084430Z 
2025-01-10T13:28:40.5084550Z DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:28:40.5084840Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5089030Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834782, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:28:40.5093060Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:28:40.5093320Z At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:28:40.5093770Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5093780Z 
2025-01-10T13:28:40.5093880Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5093960Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5094010Z        ...
2025-01-10T13:28:40.5094070Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5094170Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5094250Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5094290Z        ...
2025-01-10T13:28:40.5094360Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5094530Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5094620Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5095020Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5095030Z 
2025-01-10T13:28:40.5095130Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5095210Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5095250Z        ...
2025-01-10T13:28:40.5095310Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5095410Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5095490Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5095530Z        ...
2025-01-10T13:28:40.5095590Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5095680Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5095760Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5096180Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5096190Z 
2025-01-10T13:28:40.5096280Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5096370Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5096410Z        ...
2025-01-10T13:28:40.5096470Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5096560Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5096800Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5096850Z        ...
2025-01-10T13:28:40.5096910Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5097000Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5097080Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5097540Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5097540Z 
2025-01-10T13:28:40.5097640Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5097720Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5097770Z        ...
2025-01-10T13:28:40.5097830Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5097940Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5098020Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5098060Z        ...
2025-01-10T13:28:40.5098120Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5098210Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5098280Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5098670Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5098680Z 
2025-01-10T13:28:40.5098780Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5098860Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5098900Z        ...
2025-01-10T13:28:40.5098960Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5099050Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5099130Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5099180Z        ...
2025-01-10T13:28:40.5099250Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5099350Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5099420Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5099820Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5099900Z 
2025-01-10T13:28:40.5099970Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5100270Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5100530Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5100810Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5101200Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5101210Z 
2025-01-10T13:28:40.5101280Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5101560Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5102130Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5102440Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5102850Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5102850Z 
2025-01-10T13:28:40.5102950Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5103030Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5103080Z        ...
2025-01-10T13:28:40.5103140Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5103230Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5103310Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5103360Z        ...
2025-01-10T13:28:40.5103420Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5103510Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5103580Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5103980Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5104220Z 
2025-01-10T13:28:40.5104310Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5104390Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5104440Z        ...
2025-01-10T13:28:40.5104490Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5104590Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5104670Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5104720Z        ...
2025-01-10T13:28:40.5104780Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5104870Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5104940Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5105310Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5105320Z 
2025-01-10T13:28:40.5105420Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5105500Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5105540Z        ...
2025-01-10T13:28:40.5105600Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5105690Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5105780Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5105820Z        ...
2025-01-10T13:28:40.5105880Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5105970Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5106040Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5106430Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5107480Z 
2025-01-10T13:28:40.5107660Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5107750Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5107800Z        ...
2025-01-10T13:28:40.5107860Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5107960Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5108050Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5108090Z        ...
2025-01-10T13:28:40.5108150Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5108240Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5108320Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5108730Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5108750Z 
2025-01-10T13:28:40.5108850Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5108930Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5108990Z        ...
2025-01-10T13:28:40.5109050Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5109140Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5109220Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5109260Z        ...
2025-01-10T13:28:40.5109330Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5109420Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5109490Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5109900Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5109910Z 
2025-01-10T13:28:40.5110170Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5110260Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5110300Z        ...
2025-01-10T13:28:40.5110360Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5110460Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5110540Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5110590Z        ...
2025-01-10T13:28:40.5110650Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5110740Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5110810Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5111220Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5111220Z 
2025-01-10T13:28:40.5111330Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5116410Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5116500Z        ...
2025-01-10T13:28:40.5116570Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5116660Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5116740Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5116800Z        ...
2025-01-10T13:28:40.5116860Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5116960Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5117030Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5117430Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5117430Z 
2025-01-10T13:28:40.5117500Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5117820Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5118350Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5118630Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5119040Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5119050Z 
2025-01-10T13:28:40.5119130Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5119420Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5119730Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5120130Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5120500Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5120500Z 
2025-01-10T13:28:40.5120600Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5120680Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5120730Z        ...
2025-01-10T13:28:40.5120800Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5120890Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5120970Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5121010Z        ...
2025-01-10T13:28:40.5121070Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5121170Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5121240Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5121630Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5121630Z 
2025-01-10T13:28:40.5121750Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5121830Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5121960Z        ...
2025-01-10T13:28:40.5122030Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5122120Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5122200Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5122240Z        ...
2025-01-10T13:28:40.5122300Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5122390Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5122460Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5122820Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5122830Z 
2025-01-10T13:28:40.5122920Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5123000Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5123050Z        ...
2025-01-10T13:28:40.5123120Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5123210Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5123290Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5123330Z        ...
2025-01-10T13:28:40.5123390Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5123480Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5123550Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5123940Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5123950Z 
2025-01-10T13:28:40.5124050Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5124130Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5124180Z        ...
2025-01-10T13:28:40.5124280Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5124380Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5124460Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5124510Z        ...
2025-01-10T13:28:40.5124570Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5124660Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5124730Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5125110Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5125120Z 
2025-01-10T13:28:40.5125210Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5125290Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5125340Z        ...
2025-01-10T13:28:40.5125420Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5125530Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5125620Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5125660Z        ...
2025-01-10T13:28:40.5125720Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5125820Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5125890Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5126290Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5126300Z 
2025-01-10T13:28:40.5126390Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5126470Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5126520Z        ...
2025-01-10T13:28:40.5126570Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5126670Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5127040Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5127100Z        ...
2025-01-10T13:28:40.5127160Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5127250Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5127320Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5127730Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5127730Z 
2025-01-10T13:28:40.5127830Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5127900Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5127950Z        ...
2025-01-10T13:28:40.5128010Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5128100Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5128190Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5128240Z        ...
2025-01-10T13:28:40.5128300Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5128400Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5128460Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5131600Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5131640Z 
2025-01-10T13:28:40.5131850Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5132690Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5133380Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5133650Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5134120Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5134130Z 
2025-01-10T13:28:40.5134200Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5134500Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5134800Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5135130Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5135680Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5135680Z 
2025-01-10T13:28:40.5135780Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5135860Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5135910Z        ...
2025-01-10T13:28:40.5135980Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5136070Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5136170Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5136210Z        ...
2025-01-10T13:28:40.5136270Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5136370Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5136440Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5137010Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5137010Z 
2025-01-10T13:28:40.5137380Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5137470Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5137510Z        ...
2025-01-10T13:28:40.5137580Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5137680Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5137870Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5137930Z        ...
2025-01-10T13:28:40.5137990Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5138080Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5138150Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5138560Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5138560Z 
2025-01-10T13:28:40.5138660Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5138740Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5138780Z        ...
2025-01-10T13:28:40.5138840Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5138940Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5139010Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5139060Z        ...
2025-01-10T13:28:40.5139130Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5139220Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5139290Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5139710Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5139720Z 
2025-01-10T13:28:40.5139810Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5139890Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5139930Z        ...
2025-01-10T13:28:40.5139990Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5140090Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5140170Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5140210Z        ...
2025-01-10T13:28:40.5140280Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5140440Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5140520Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5140940Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5140950Z 
2025-01-10T13:28:40.5141040Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5141130Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5141170Z        ...
2025-01-10T13:28:40.5141230Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5141330Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5141410Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5141470Z        ...
2025-01-10T13:28:40.5141540Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5141640Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5141720Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5142140Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5142140Z 
2025-01-10T13:28:40.5142240Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5142330Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5142370Z        ...
2025-01-10T13:28:40.5142430Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5142530Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5142610Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5142650Z        ...
2025-01-10T13:28:40.5142980Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5143190Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5143270Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5143730Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5143730Z 
2025-01-10T13:28:40.5143830Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5143910Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5143950Z        ...
2025-01-10T13:28:40.5144020Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5144110Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5144190Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5144240Z        ...
2025-01-10T13:28:40.5144300Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5144390Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5144470Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5144960Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5144970Z 
2025-01-10T13:28:40.5145030Z Series values are different (4.04858 %)
2025-01-10T13:28:40.5145330Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5145590Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5145960Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:28:40.5146430Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:28:40.5146430Z 
2025-01-10T13:28:40.5146500Z Series values are different (6.47773 %)
2025-01-10T13:28:40.5146790Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5147100Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5147450Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:28:40.5147980Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5147980Z 
2025-01-10T13:28:40.5148100Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5148180Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5148260Z        ...
2025-01-10T13:28:40.5148320Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5148410Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5148490Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5148540Z        ...
2025-01-10T13:28:40.5148600Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5148700Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5148780Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5149250Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5149260Z 
2025-01-10T13:28:40.5149350Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5149430Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5149480Z        ...
2025-01-10T13:28:40.5149530Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5149640Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5149730Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5149770Z        ...
2025-01-10T13:28:40.5149830Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5150240Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5150320Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5150750Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5150760Z 
2025-01-10T13:28:40.5150860Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5150940Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5150980Z        ...
2025-01-10T13:28:40.5151040Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5151130Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5151220Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5151260Z        ...
2025-01-10T13:28:40.5151320Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5151420Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5151490Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5151980Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5151990Z 
2025-01-10T13:28:40.5152090Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5152160Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5152210Z        ...
2025-01-10T13:28:40.5152260Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5152350Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5152430Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5152490Z        ...
2025-01-10T13:28:40.5152550Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5152890Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5153000Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5153460Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5153470Z 
2025-01-10T13:28:40.5153580Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5153660Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5153700Z        ...
2025-01-10T13:28:40.5153760Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5153860Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5153940Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5153980Z        ...
2025-01-10T13:28:40.5154040Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5154130Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5154210Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5154660Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:28:40.5154660Z 
2025-01-10T13:28:40.5154760Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:28:40.5154840Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5154880Z        ...
2025-01-10T13:28:40.5154950Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5155040Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5155120Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5155160Z        ...
2025-01-10T13:28:40.5155220Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:28:40.5155310Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:28:40.5155380Z At positional index 75, first diff: 7 != 6
2025-01-10T13:28:40.5155700Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[stimulated_emission_factor] - AssertionError: 
2025-01-10T13:28:40.5155770Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5155780Z 
2025-01-10T13:28:40.5155840Z Mismatched elements: 120 / 584480 (0.0205%)
2025-01-10T13:28:40.5155920Z Max absolute difference among violations: 1.
2025-01-10T13:28:40.5155990Z Max relative difference among violations: 1.
2025-01-10T13:28:40.5156100Z  ACTUAL: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:28:40.5156180Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:28:40.5156260Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:28:40.5156370Z  DESIRED: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:28:40.5156450Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:28:40.5156550Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:28:40.5156780Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_lower_level_index] - AssertionError: 
2025-01-10T13:28:40.5156850Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5156850Z 
2025-01-10T13:28:40.5156920Z Mismatched elements: 748 / 29224 (2.56%)
2025-01-10T13:28:40.5157000Z Max absolute difference among violations: 4005
2025-01-10T13:28:40.5157090Z Max relative difference among violations: 26.00649351
2025-01-10T13:28:40.5157180Z  ACTUAL: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:28:40.5157270Z  DESIRED: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:28:40.5157490Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_upper_level_index] - AssertionError: 
2025-01-10T13:28:40.5157570Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5157610Z 
2025-01-10T13:28:40.5157680Z Mismatched elements: 1847 / 29224 (6.32%)
2025-01-10T13:28:40.5157760Z Max absolute difference among violations: 4046
2025-01-10T13:28:40.5157850Z Max relative difference among violations: 24.82208589
2025-01-10T13:28:40.5157940Z  ACTUAL: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:28:40.5158030Z  DESIRED: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:28:40.5158230Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[beta_sobolev] - AssertionError: 
2025-01-10T13:28:40.5158310Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5158310Z 
2025-01-10T13:28:40.5158380Z Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:28:40.5158470Z Max absolute difference among violations: 0.99984222
2025-01-10T13:28:40.5158560Z Max relative difference among violations: 6337.12154973
2025-01-10T13:28:40.5158630Z  ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.5158690Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.5158740Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:28:40.5158820Z  DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.5158870Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:28:40.5158930Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:28:40.5159110Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines] - AssertionError: 
2025-01-10T13:28:40.5159180Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5159180Z 
2025-01-10T13:28:40.5159250Z Mismatched elements: 13335 / 263016 (5.07%)
2025-01-10T13:28:40.5159340Z Max absolute difference among violations: 4.25260542e+12
2025-01-10T13:28:40.5159440Z Max relative difference among violations: 18196.0085861
2025-01-10T13:28:40.5159560Z  ACTUAL: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:28:40.5159620Z         4.043917e+10, 6.677200e-07],
2025-01-10T13:28:40.5159730Z        [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:28:40.5159890Z  DESIRED: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:28:40.5160040Z         4.043917e+10, 6.677200e-07],
2025-01-10T13:28:40.5160160Z        [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:28:40.5160350Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[f_lu] - AssertionError: 
2025-01-10T13:28:40.5160410Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5160420Z 
2025-01-10T13:28:40.5160480Z Mismatched elements: 2221 / 29224 (7.6%)
2025-01-10T13:28:40.5160580Z Max absolute difference among violations: 2.92713618
2025-01-10T13:28:40.5160670Z Max relative difference among violations: 18196.0085861
2025-01-10T13:28:40.5160800Z  ACTUAL: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:28:40.5160850Z        1.126883e+00, 4.414472e-04])
2025-01-10T13:28:40.5160980Z  DESIRED: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:28:40.5161030Z        1.126883e+00, 4.414472e-04])
2025-01-10T13:28:40.5161240Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[tau_sobolevs] - AssertionError: 
2025-01-10T13:28:40.5161310Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5161310Z 
2025-01-10T13:28:40.5161380Z Mismatched elements: 39620 / 584480 (6.78%)
2025-01-10T13:28:40.5161480Z Max absolute difference among violations: 282815.33818472
2025-01-10T13:28:40.5161580Z Max relative difference among violations: 4.12352828e+47
2025-01-10T13:28:40.5161700Z  ACTUAL: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:28:40.5161750Z         0.000000e+00, 0.000000e+00],
2025-01-10T13:28:40.5161850Z        [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:28:40.5161990Z  DESIRED: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:28:40.5162040Z         0.000000e+00, 0.000000e+00],
2025-01-10T13:28:40.5162140Z        [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:28:40.5162580Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_w] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.5162580Z 
2025-01-10T13:28:40.5162730Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:28:40.5162780Z [index]: [0, 1]
2025-01-10T13:28:40.5162850Z [left]:  [0.40039163797855976, 0.4501364467195908]
2025-01-10T13:28:40.5162920Z [right]: [0.40039163797855976, 0.4500690173218345]
2025-01-10T13:28:40.5163060Z At positional index 1, first diff: 0.4501364467195908 != 0.4500690173218345
2025-01-10T13:28:40.5163470Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_t_rad] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.5163480Z 
2025-01-10T13:28:40.5163600Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:28:40.5163650Z [index]: [0, 1]
2025-01-10T13:28:40.5163730Z [left]:  [9967.488442185557, 10090.925208074612]
2025-01-10T13:28:40.5163800Z [right]: [9967.488442185557, 10091.396322818851]
2025-01-10T13:28:40.5163930Z At positional index 1, first diff: 10090.925208074612 != 10091.396322818851
2025-01-10T13:28:40.5164340Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_electron_densities] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:28:40.5164350Z 
2025-01-10T13:28:40.5164470Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:28:40.5164520Z [index]: [0, 1]
2025-01-10T13:28:40.5164580Z [left]:  [2869544645.3209715, 2880986026.9779415]
2025-01-10T13:28:40.5164650Z [right]: [2869544645.3209715, 2881024886.0882792]
2025-01-10T13:28:40.5164780Z At positional index 1, first diff: 2880986026.9779415 != 2881024886.0882792
2025-01-10T13:28:40.5165080Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[nu_bar_estimator] - AssertionError: Series are different
2025-01-10T13:28:40.5165170Z 
2025-01-10T13:28:40.5165240Z Series values are different (100.0 %)
2025-01-10T13:28:40.5165360Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:28:40.5166280Z [left]:  [1.0190851489144417e+29, 8.620293210130923e+28, 7.627182111494598e+28, 6.892948616165273e+28, 6.337927690943656e+28, 5.960020402587151e+28, 5.586558872212224e+28, 5.25635918178016e+28, 5.018051447190151e+28, 4.8014271709728364e+28, 4.635443103818658e+28, 4.427600822090263e+28, 4.266701646003397e+28, 4.095148200480331e+28, 3.973054136677621e+28, 3.8813484639248094e+28, 3.749648114483984e+28, 3.6669667839395227e+28, 3.5309131816469324e+28, 3.4364426470451254e+28]
2025-01-10T13:28:40.5167210Z [right]: [1.0202042777991753e+29, 8.604643039338655e+28, 7.621843612415326e+28, 6.887796775939633e+28, 6.338143063845967e+28, 5.961770832970249e+28, 5.583215038688499e+28, 5.26214201104387e+28, 5.00719468999816e+28, 4.795144203550334e+28, 4.630537292368217e+28, 4.425690259081018e+28, 4.270865369572798e+28, 4.094544283657345e+28, 3.972280940559004e+28, 3.884152385274923e+28, 3.7498225331847723e+28, 3.6666118688506634e+28, 3.5319738797726287e+28, 3.437270715325205e+28]
2025-01-10T13:28:40.5167370Z At positional index 0, first diff: 1.0190851489144417e+29 != 1.0202042777991753e+29
2025-01-10T13:28:40.5167660Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[j_estimator] - AssertionError: Series are different
2025-01-10T13:28:40.5167660Z 
2025-01-10T13:28:40.5167720Z Series values are different (100.0 %)
2025-01-10T13:28:40.5167820Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:28:40.5169570Z [left]:  [116548101693133.95, 98287497352449.03, 86880176732435.22, 78272950854373.14, 72163814877095.69, 67694196332568.83, 63443304042094.945, 60039709300008.84, 57626147839330.99, 55320363334244.195, 53407234761435.54, 51398562237742.78, 49867122015465.32, 48237829093150.875, 46995101666576.04, 46046276744657.75, 44990423974886.99, 44175537951010.7, 43032079683987.4, 42141581527839.64]
2025-01-10T13:28:40.5172430Z [right]: [116635492761989.08, 98171051632121.94, 86872515261186.84, 78289696965690.05, 72209193315676.42, 67743848273202.76, 63510940656108.0, 60117004438842.5, 57572723670164.91, 55316097836075.18, 53398108009568.71, 51391839595543.54, 49914799926154.195, 48252386019894.61, 46984233483222.1, 46076787175987.44, 45005288890715.74, 44179675761283.02, 43040066710169.69, 42141149121109.82]
2025-01-10T13:28:40.5172790Z At positional index 0, first diff: 116548101693133.95 != 116635492761989.08
2025-01-10T13:28:40.5173950Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[t_radiative] - AssertionError: Series are different
2025-01-10T13:28:40.5173990Z 
2025-01-10T13:28:40.5174200Z Series values are different (90.0 %)
2025-01-10T13:28:40.5174460Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:28:40.5178610Z [left]:  [10090.925208074612, 10114.284007169752, 10139.419400388757, 10142.763627360702, 10149.780795955077, 10123.098440726963, 10084.703897056657, 10058.012622231076, 10075.221831273808, 10032.602564737457, 10029.923783575228, 9982.400974610377, 9943.057719983482, 9914.605779635785, 9894.245392559056, 9854.91157888558, 9802.51106451295, 9775.252526407032, 9735.554945100961, 9699.29579392027]
2025-01-10T13:28:40.5180410Z [right]: [10091.396322818851, 10113.672762424394, 10138.57214647089, 10142.40782954104, 10149.471061360664, 10124.731447668686, 10084.96501000204, 10057.88480134284, 10073.983914823793, 10031.924501830883, 10029.890159447663, 9982.658841271636, 9943.375727608092, 9914.259749796103, 9893.924180562475, 9854.860600288932, 9802.891513260798, 9774.848565783677, 9735.162327402864, 9698.911095826039]
2025-01-10T13:28:40.5180630Z At positional index 0, first diff: 10090.925208074612 != 10091.396322818851
2025-01-10T13:28:40.5181760Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[dilution_factor] - AssertionError: Series are different
2025-01-10T13:28:40.5183040Z 
2025-01-10T13:28:40.5183160Z Series values are different (95.0 %)
2025-01-10T13:28:40.5183280Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:28:40.5184160Z [left]:  [0.4501364467195908, 0.35908765015367794, 0.2992286625932581, 0.25782483595854516, 0.22541895309871707, 0.20119984035942634, 0.18259528573790965, 0.16657898370897495, 0.15044998950385874, 0.13972884748944586, 0.1286244489704662, 0.12093391136570557, 0.11343684592362663, 0.10649361332296867, 0.10015211634287155, 0.09484336636678072, 0.09053724751966309, 0.08584829670214006, 0.08202005255449255, 0.07823319609488653]
2025-01-10T13:28:40.5185400Z [right]: [0.4500690173218345, 0.3591778672440072, 0.299315794490968, 0.2578615845098735, 0.2254422032786788, 0.20109997630618956, 0.18257381854718482, 0.166581017494628, 0.15049754388199085, 0.13975435818105286, 0.12862206084807348, 0.12092168181342122, 0.1134233405695467, 0.10650389106044364, 0.10016109465785483, 0.09484390983006763, 0.09052533757303871, 0.08585912682814001, 0.0820302832176511, 0.07824287530618068]
2025-01-10T13:28:40.5185590Z At positional index 0, first diff: 0.4501364467195908 != 0.4500690173218345
2025-01-10T13:28:40.5185890Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_nus] - AssertionError: Series are different
2025-01-10T13:28:40.5185900Z 
2025-01-10T13:28:40.5185970Z Series values are different (5.1125 %)
2025-01-10T13:28:40.5186430Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5191490Z [left]:  [1806497964363691.5, 620824050797791.0, 651557470803973.5, 320924283401155.06, 561113873787112.25, 241798291122606.1, 676659115957490.4, 599043646843299.5, 607330789848065.1, 916915882531221.8, 944436308170835.4, 768263702028831.1, 3180981513893847.5, 2598977918829023.0, 857730899770804.0, 618923179519891.8, 551416875835854.44, 1086541433542293.5, 754833971959408.2, 491317193158596.1, 463436938874983.3, 1490288028825510.8, 820033385297487.8, 2452394921854276.0, 735345782477539.2, 754787342662615.8, 1199748305923909.8, 555498342552241.7, 1389852333652706.2, 1385846435296470.8, 368679109418251.0, 1912095724903033.2, 2017769542518466.0, 627651232172153.5, 1067422242306306.2, 948629480189651.8, 1978325812571257.2, 445358814403560.5, 1003063944118045.1, 849728144317407.0, 967658015948004.0, 1280663773931335.5, 1146264300342218.8, 1001861030074981.8, 1119183834838938.5, 508263982580230.94, 1892628101399911.5, 781537280613827.0, 1151086326674402.2, 604499180764604.0, 725902034055549.9, 457814698066574.3, 527262173332999.9, 341748821526544.94, 562192309822701.44, 1275142789503603.2, 657025184715239.1, 723852885328246.6, 1885538050889659.0, 585984121054452.8, 917026429989072.4, 696897964334913.8, 267976306885906.9, 343747179020909.4, 96582762885197.0, 1296746601148043.2, 491334710156273.4, 1492212625817827.0, 764003012375887.5, 1572736205466074.5, 1559683657845856.8, 476769967588303.4, 1860056739912971.5, 702994366583567.1, 1017518348351587.6, 484486056936689.44, 453148114829195.1, 717528815454204.8, 508993320531592.06, 1838746711006649.2, 663648932445292.6, 1322073114843600.0, 601612805662424.9, 1840374275823067.5, 440721373409527.9, 1641950783987409.2, 1588043382663297.8, 1174117968839014.5, 1215683099165958.0, 997747131579365.4, 1168546500179118.0, 1048569696680261.6, 1513832752764706.8, 1363140908755187.5, 430233648082889.1, 386057265404197.6, 1139144647809848.2, 307473380309096.1, 403471109559731.6, 1156219784137886.0, ...]
2025-01-10T13:28:40.5196860Z [right]: [1806512041912368.8, 620828912578783.0, 651561681514283.2, 320926793622792.2, 561113831783033.0, 241800185490365.7, 676657497080704.5, 599041295479916.1, 607335547665201.9, 916923063058785.2, 944437910067241.0, 768263081009078.1, 3180974191574679.5, 2598971968757746.0, 857737633068955.4, 618928023168687.5, 551416803496124.25, 1086549942730966.9, 754833333392143.2, 491321027587878.7, 463440568130160.4, 1490299638092356.5, 820039899773855.1, 2452391211684156.5, 735351500669317.2, 754784724695130.1, 1199750254428993.5, 555501175228475.94, 1389863217827777.5, 1385857288100655.8, 368681996608404.06, 1912110698856825.8, 2017785344022282.2, 627651183748411.8, 1067430591325981.9, 948623864004036.0, 1978326785288413.0, 445362302085804.25, 1003071799286044.6, 849734798686120.6, 967665593846029.1, 1280673803031827.2, 1146262107204918.5, 1001868875822752.4, 1119192629281446.4, 508267969421775.25, 1892642922899362.8, 781543400968040.9, 1151095341031394.2, 604503914702702.6, 725907718720482.8, 457818283293006.9, 527261796217634.44, 341748696489478.8, 562196737455386.1, 1275152810939863.2, 657003154645147.8, 723858331274613.6, 1885552835316985.5, 585988709997902.4, 917033611382352.2, 696895494383372.0, 267978405454919.2, 343749870964784.4, 96583519241591.61, 1296758039945233.8, 491338550899887.9, 1492219434855197.0, 764008995416200.5, 1572724795429636.2, 1559695871999531.0, 476770259286661.5, 1860071011741526.8, 702999878183188.2, 1017511963264823.4, 484489851031166.6, 453151663510803.5, 717543258409877.6, 508990329432545.4, 1838756496639701.8, 663654129595372.2, 1322083461079532.0, 601616268613591.0, 1840388688113732.8, 440724823612140.5, 1641895920313314.8, 1588055811374384.5, 1174127163560797.5, 1215687723496508.2, 997743048820577.1, 1168560411536350.2, 1048577905256173.4, 1513844599143900.5, 1363151613665534.0, 430237017317327.8, 386060300653508.2, 1139153568649478.2, 307475792296687.0, 403474269212082.0, 1156228838695875.2, ...]
2025-01-10T13:28:40.5197190Z At positional index 56, first diff: 657025184715239.1 != 657003154645147.8
2025-01-10T13:28:40.5197510Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_energies] - AssertionError: Series are different
2025-01-10T13:28:40.5197570Z 
2025-01-10T13:28:40.5197650Z Series values are different (1.3025 %)
2025-01-10T13:28:40.5197940Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:28:40.5205140Z [left]:  [2.5801871599548787e-05, 2.5615305276449435e-05, 2.5858344017372144e-05, -2.4286539750273696e-05, 2.4924524325725243e-05, -2.456230824810029e-05, 2.4103043153710077e-05, -2.438655094434287e-05, -2.4539054537501715e-05, 2.5417984817525785e-05, 2.512000535197746e-05, -2.4642582656280976e-05, -2.4233351068555537e-05, -2.4507743780475822e-05, 2.4958490988042172e-05, -2.4193730330394604e-05, 2.5671484002468758e-05, 2.571778434062277e-05, 2.464945535255098e-05, -2.422773639583352e-05, 2.5447471360622184e-05, -2.409627635116542e-05, 2.5614844040255083e-05, -2.4320523596905817e-05, 2.5377784576172196e-05, -2.3457066675560312e-05, 2.4369140190445265e-05, 2.558078209369483e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4679185862134628e-05, 2.5692099696671885e-05, 2.2709368608835504e-05, -2.422769024282858e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.221435871493417e-05, 2.588758262836899e-05, -2.4715605747432618e-05, 2.5511122157387355e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127536098161385e-05, -2.468141895326209e-05, -2.47043179761032e-05, -2.3740908691907106e-05, 2.483244249209606e-05, -2.4131561837088724e-05, -2.4208444730823924e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.413785571902468e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.4718848796409172e-05, 2.5235644879553273e-05, 2.5660116818809676e-05, 2.5705887025490933e-05, -2.3537055466673638e-05, 2.5942471740302383e-05, 2.4779255435154302e-05, -2.4437171482408422e-05, -2.488587475102296e-05, -2.461817145541738e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721589006402834e-05, -2.3916183924792534e-05, -2.4073277575252532e-05, 2.5426114770306902e-05, 2.504304506604637e-05, -2.365600824332809e-05, 2.564649452803889e-05, -2.3899135529642785e-05, 2.5338970275810367e-05, 2.484858251486878e-05, 2.5806793260333468e-05, 2.538037983050111e-05, -2.4207571237562553e-05, 2.4527910111281257e-05, 2.4916625382690475e-05, -2.4248093976538034e-05, -2.4259084902202997e-05, 2.5042343244083765e-05, -2.4184000110453416e-05, 2.534949108326902e-05, -2.438918660146681e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:28:40.5210080Z [right]: [2.580187060760512e-05, 2.5615305276449435e-05, 2.585830862681326e-05, -2.4286539523836896e-05, 2.4924327273178824e-05, -2.4562308329704016e-05, 2.4102796735064873e-05, -2.4386264249292878e-05, -2.4539054606359595e-05, 2.5417984817525785e-05, 2.5119851241109903e-05, -2.464236975797002e-05, -2.423310551200988e-05, -2.4507495750261827e-05, 2.4958491461131913e-05, -2.4193730203503752e-05, 2.5671279598406848e-05, 2.571778434758039e-05, 2.464924146734715e-05, -2.4227735746845522e-05, 2.5447471360622184e-05, -2.409627535779648e-05, 2.5614846934356755e-05, -2.4320296346496788e-05, 2.5377783180930537e-05, -2.345680162082186e-05, 2.436898893045542e-05, 2.5580712211859562e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4678990692654424e-05, 2.5692099452386407e-05, 2.270905632364821e-05, -2.4227512425411162e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.2214142249592017e-05, 2.588758262836899e-05, -2.4715606408157026e-05, 2.5511122485544443e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127338442376704e-05, -2.4681216640073288e-05, -2.4704319074974646e-05, -2.3740909354181544e-05, 2.4831415400580145e-05, -2.4131554413805748e-05, -2.420844496771843e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.4137581143845235e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.471887326730884e-05, 2.5235644520855386e-05, 2.5660032958970583e-05, 2.5705887025490933e-05, -2.3536700387812003e-05, 2.5942471740302383e-05, 2.4779076546395e-05, -2.4437167612038533e-05, -2.4885874975052928e-05, -2.461782418608366e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721880722086934e-05, -2.391585609212342e-05, -2.407321716937353e-05, 2.5426114770306902e-05, 2.5043044930642476e-05, -2.3655959156054043e-05, 2.564649452803889e-05, -2.389913546657555e-05, 2.533792518100767e-05, 2.4848582397006154e-05, 2.5806793260333468e-05, 2.5380277617431415e-05, -2.4207282609290893e-05, 2.4528010028979532e-05, 2.491662531246e-05, -2.4248093837055892e-05, -2.4259085434617066e-05, 2.5042343244083765e-05, -2.4184000860153038e-05, 2.534949108326902e-05, -2.4389186927485497e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:28:40.5210340Z At positional index 414, first diff: 2.5347525852067693e-05 != 2.5657552576608082e-05
2025-01-10T13:28:40.5210620Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets - AssertionError: 
2025-01-10T13:28:40.5210690Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5210700Z 
2025-01-10T13:28:40.5210760Z Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:28:40.5210860Z Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:28:40.5210940Z Max relative difference among violations: 1.
2025-01-10T13:28:40.5211070Z  ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5211200Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5211330Z  DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5211380Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5211690Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets_reabsorbed - AssertionError: 
2025-01-10T13:28:40.5211760Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5211760Z 
2025-01-10T13:28:40.5211830Z Mismatched elements: 252 / 10000 (2.52%)
2025-01-10T13:28:40.5211930Z Max absolute difference among violations: 4.15247374e+37
2025-01-10T13:28:40.5212020Z Max relative difference among violations: 1.03027212
2025-01-10T13:28:40.5212140Z  ACTUAL: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5212200Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5212330Z  DESIRED: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5212380Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5212620Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve - AssertionError: 
2025-01-10T13:28:40.5212690Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5212690Z 
2025-01-10T13:28:40.5212760Z Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:28:40.5212860Z Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:28:40.5212930Z Max relative difference among violations: 1.
2025-01-10T13:28:40.5213060Z  ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5213110Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5213240Z  DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5213320Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5213540Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_j_blue_estimators - AssertionError: 
2025-01-10T13:28:40.5213710Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5213710Z 
2025-01-10T13:28:40.5213780Z Mismatched elements: 491895 / 584480 (84.2%)
2025-01-10T13:28:40.5213880Z Max absolute difference among violations: 5.32418652e-19
2025-01-10T13:28:40.5213980Z Max relative difference among violations: 8.78746214
2025-01-10T13:28:40.5214050Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5214110Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5214170Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5214250Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5214300Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5214350Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5214550Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_spectrum - AssertionError: 
2025-01-10T13:28:40.5214630Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5214640Z 
2025-01-10T13:28:40.5214700Z Mismatched elements: 4832 / 10000 (48.3%)
2025-01-10T13:28:40.5214800Z Max absolute difference among violations: 1.38672909e+39
2025-01-10T13:28:40.5214890Z Max relative difference among violations: 5.17890748
2025-01-10T13:28:40.5215020Z  ACTUAL: array([1.414459e+39, 1.753650e+39, 1.413044e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5215090Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5215210Z  DESIRED: array([1.471192e+39, 1.695642e+39, 1.353685e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5215260Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5215490Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_virtual_spectrum - AssertionError: 
2025-01-10T13:28:40.5215560Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5215560Z 
2025-01-10T13:28:40.5215630Z Mismatched elements: 5933 / 10000 (59.3%)
2025-01-10T13:28:40.5215730Z Max absolute difference among violations: 5.26760031e+38
2025-01-10T13:28:40.5215820Z Max relative difference among violations: 23978.84555943
2025-01-10T13:28:40.5216350Z  ACTUAL: array([1.454843e+39, 1.363063e+39, 1.389398e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5216400Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5216530Z  DESIRED: array([1.440332e+39, 1.356114e+39, 1.397557e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5216580Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5216940Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-downbranch] - AssertionError: 
2025-01-10T13:28:40.5217000Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5217010Z 
2025-01-10T13:28:40.5217090Z Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:28:40.5217180Z Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:28:40.5217270Z Max relative difference among violations: 8.35741234
2025-01-10T13:28:40.5217340Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5217390Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5217460Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5217520Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5217580Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5217630Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5217970Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-downbranch] - AssertionError: 
2025-01-10T13:28:40.5218040Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5218040Z 
2025-01-10T13:28:40.5218110Z Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:28:40.5218370Z Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:28:40.5218460Z Max relative difference among violations: 5.83764686
2025-01-10T13:28:40.5218590Z  ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5218640Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5218770Z  DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5219120Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5219480Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-downbranch] - AssertionError: 
2025-01-10T13:28:40.5219560Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5219560Z 
2025-01-10T13:28:40.5219630Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:28:40.5219720Z Max absolute difference among violations: 5.00661745e+37
2025-01-10T13:28:40.5219810Z Max relative difference among violations: 6.79985816
2025-01-10T13:28:40.5219940Z  ACTUAL: array([1.541783e+39, 1.545645e+39, 1.540310e+39, ..., 2.274707e+31,
2025-01-10T13:28:40.5219990Z        2.292907e+31, 2.257206e+31])
2025-01-10T13:28:40.5220110Z  DESIRED: array([1.551142e+39, 1.555226e+39, 1.548880e+39, ..., 2.256713e+31,
2025-01-10T13:28:40.5220170Z        2.279436e+31, 2.243943e+31])
2025-01-10T13:28:40.5220510Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-macroatom] - AssertionError: 
2025-01-10T13:28:40.5220580Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5220590Z 
2025-01-10T13:28:40.5220660Z Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:28:40.5220750Z Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:28:40.5220850Z Max relative difference among violations: 4.08461732
2025-01-10T13:28:40.5220920Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5220970Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5221320Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5224360Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5224520Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5224660Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5225620Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-macroatom] - AssertionError: 
2025-01-10T13:28:40.5226460Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5226460Z 
2025-01-10T13:28:40.5226520Z Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:28:40.5226620Z Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:28:40.5226710Z Max relative difference among violations: 3.08310014
2025-01-10T13:28:40.5226840Z  ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5226900Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5227030Z  DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5227090Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5227440Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-macroatom] - AssertionError: 
2025-01-10T13:28:40.5227520Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5227530Z 
2025-01-10T13:28:40.5227590Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:28:40.5227700Z Max absolute difference among violations: 2.90101642e+37
2025-01-10T13:28:40.5227790Z Max relative difference among violations: 96.4428449
2025-01-10T13:28:40.5227910Z  ACTUAL: array([1.546350e+39, 1.557400e+39, 1.546571e+39, ..., 1.400403e+31,
2025-01-10T13:28:40.5227960Z        1.375141e+31, 1.337928e+31])
2025-01-10T13:28:40.5228080Z  DESIRED: array([1.545562e+39, 1.556608e+39, 1.545912e+39, ..., 1.352607e+31,
2025-01-10T13:28:40.5228130Z        1.330497e+31, 1.294462e+31])
2025-01-10T13:28:40.5228470Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-macroatom] - AssertionError: 
2025-01-10T13:28:40.5228540Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5228540Z 
2025-01-10T13:28:40.5228610Z Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:28:40.5228710Z Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:28:40.5228900Z Max relative difference among violations: 4.08461732
2025-01-10T13:28:40.5228980Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5229040Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5229090Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5229160Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5229220Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5229270Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5229600Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-macroatom] - AssertionError: 
2025-01-10T13:28:40.5229670Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5229670Z 
2025-01-10T13:28:40.5229740Z Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:28:40.5229840Z Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:28:40.5229930Z Max relative difference among violations: 3.08310014
2025-01-10T13:28:40.5230070Z  ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5230120Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5230250Z  DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5230300Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5230660Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-macroatom] - AssertionError: 
2025-01-10T13:28:40.5230730Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5230730Z 
2025-01-10T13:28:40.5230790Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:28:40.5230890Z Max absolute difference among violations: 2.99183385e+37
2025-01-10T13:28:40.5230980Z Max relative difference among violations: 98.22574798
2025-01-10T13:28:40.5231100Z  ACTUAL: array([1.545064e+39, 1.553365e+39, 1.543643e+39, ..., 1.222961e+31,
2025-01-10T13:28:40.5231150Z        1.193005e+31, 1.164854e+31])
2025-01-10T13:28:40.5231280Z  DESIRED: array([1.544211e+39, 1.552533e+39, 1.542958e+39, ..., 1.273258e+31,
2025-01-10T13:28:40.5231390Z        1.260980e+31, 1.222587e+31])
2025-01-10T13:28:40.5231730Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-downbranch] - AssertionError: 
2025-01-10T13:28:40.5231800Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5231800Z 
2025-01-10T13:28:40.5231870Z Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:28:40.5231970Z Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:28:40.5232060Z Max relative difference among violations: 8.35741234
2025-01-10T13:28:40.5232140Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5232200Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5232250Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5232330Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5237240Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:28:40.5237350Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:28:40.5237690Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-downbranch] - AssertionError: 
2025-01-10T13:28:40.5237770Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5237770Z 
2025-01-10T13:28:40.5237840Z Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:28:40.5237930Z Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:28:40.5238030Z Max relative difference among violations: 5.83764686
2025-01-10T13:28:40.5238150Z  ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5238210Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5238330Z  DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:28:40.5238390Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5238740Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-downbranch] - AssertionError: 
2025-01-10T13:28:40.5238990Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5238990Z 
2025-01-10T13:28:40.5239060Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:28:40.5239160Z Max absolute difference among violations: 5.0153284e+37
2025-01-10T13:28:40.5239250Z Max relative difference among violations: 5.96359613
2025-01-10T13:28:40.5239370Z  ACTUAL: array([1.540599e+39, 1.541195e+39, 1.537076e+39, ..., 2.120497e+31,
2025-01-10T13:28:40.5239430Z        2.124305e+31, 2.101081e+31])
2025-01-10T13:28:40.5239550Z  DESIRED: array([1.549174e+39, 1.550439e+39, 1.545071e+39, ..., 2.082528e+31,
2025-01-10T13:28:40.5239600Z        2.088676e+31, 2.060278e+31])
2025-01-10T13:28:40.5240750Z FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop - AssertionError: 
2025-01-10T13:28:40.5240860Z Not equal to tolerance rtol=1e-13, atol=0
2025-01-10T13:28:40.5240880Z 
2025-01-10T13:28:40.5240940Z Mismatched elements: 20 / 20 (100%)
2025-01-10T13:28:40.5241050Z Max absolute difference among violations: 2.25821059e+25
2025-01-10T13:28:40.5241160Z Max relative difference among violations: 0.00054397
2025-01-10T13:28:40.5241280Z  ACTUAL: array([9.409976e+28, 8.066324e+28, 7.202565e+28, 6.545908e+28,
2025-01-10T13:28:40.5241380Z        6.032330e+28, 5.614178e+28, 5.250313e+28, 4.984748e+28,
2025-01-10T13:28:40.5241480Z        4.725851e+28, 4.508107e+28, 4.318094e+28, 4.149110e+28,...
2025-01-10T13:28:40.5241600Z  DESIRED: array([9.408704e+28, 8.067118e+28, 7.202414e+28, 6.547518e+28,
2025-01-10T13:28:40.5241680Z        6.033670e+28, 5.613552e+28, 5.249857e+28, 4.984256e+28,
2025-01-10T13:28:40.5241780Z        4.726016e+28, 4.509481e+28, 4.319969e+28, 4.151368e+28,...
2025-01-10T13:28:40.5242100Z FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop_vpacket_log - AssertionError: 
2025-01-10T13:28:40.5242190Z Not equal to tolerance rtol=1e-12, atol=1e-15
2025-01-10T13:28:40.5242360Z 
2025-01-10T13:28:40.5242430Z Mismatched elements: 20 / 20 (100%)
2025-01-10T13:28:40.5242530Z Max absolute difference among violations: 1.93283629e+25
2025-01-10T13:28:40.5242620Z Max relative difference among violations: 0.00029157
2025-01-10T13:28:40.5242740Z  ACTUAL: array([9.395409e+28, 8.063377e+28, 7.188356e+28, 6.549146e+28,
2025-01-10T13:28:40.5242830Z        6.034629e+28, 5.628414e+28, 5.283421e+28, 4.953453e+28,
2025-01-10T13:28:40.5242920Z        4.716735e+28, 4.492320e+28, 4.302194e+28, 4.140106e+28,...
2025-01-10T13:28:40.5243040Z  DESIRED: array([9.397342e+28, 8.064372e+28, 7.189479e+28, 6.549756e+28,
2025-01-10T13:28:40.5243130Z        6.033450e+28, 5.626927e+28, 5.281881e+28, 4.952089e+28,
2025-01-10T13:28:40.5243210Z        4.716388e+28, 4.491655e+28, 4.302267e+28, 4.139741e+28,...
2025-01-10T13:28:40.5243480Z FAILED tardis/transport/montecarlo/tests/test_rpacket_tracker.py::test_boundary_interactions - AssertionError: 
2025-01-10T13:28:40.5243540Z Arrays are not equal
2025-01-10T13:28:40.5243550Z 
2025-01-10T13:28:40.5243620Z Mismatched elements: 11291 / 256000 (4.41%)
2025-01-10T13:28:40.5243730Z  ACTUAL: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:28:40.5243800Z         (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:28:40.5243880Z        [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:28:40.5244010Z  DESIRED: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:28:40.5244070Z         (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:28:40.5244150Z        [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:28:40.5244490Z FAILED tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py::test_montecarlo_main_loop_weighted - AssertionError: 
2025-01-10T13:28:40.5244560Z Not equal to tolerance rtol=0.01, atol=0
2025-01-10T13:28:40.5244560Z 
2025-01-10T13:28:40.5244640Z Mismatched elements: 33 / 100000 (0.033%)
2025-01-10T13:28:40.5244820Z Max absolute difference among violations: 2.00640487e-05
2025-01-10T13:28:40.5244920Z Max relative difference among violations: 2.11614526
2025-01-10T13:28:40.5245050Z  ACTUAL: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:28:40.5245110Z        -9.757136e-06,  1.019764e-05])
2025-01-10T13:28:40.5245240Z  DESIRED: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:28:40.5245300Z        -9.757136e-06,  1.019764e-05])
2025-01-10T13:28:40.5245660Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data0-plot_data] - AssertionError: 
2025-01-10T13:28:40.5245730Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5245730Z 
2025-01-10T13:28:40.5245790Z (shapes (515,), (508,) mismatch)
2025-01-10T13:28:40.5245900Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:28:40.5245990Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:28:40.5246090Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:28:40.5246200Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:28:40.5246290Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:28:40.5246380Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:28:40.5246740Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data1-plot_data] - AssertionError: 
2025-01-10T13:28:40.5246810Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5246810Z 
2025-01-10T13:28:40.5246860Z (shapes (560,), (558,) mismatch)
2025-01-10T13:28:40.5246980Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:28:40.5247070Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:28:40.5247160Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:28:40.5247530Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:28:40.5247620Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:28:40.5247720Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:28:40.5248090Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data2-plot_data] - AssertionError: 
2025-01-10T13:28:40.5248170Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5248170Z 
2025-01-10T13:28:40.5248220Z (shapes (136,), (147,) mismatch)
2025-01-10T13:28:40.5248340Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:28:40.5248440Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:28:40.5248530Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:28:40.5248640Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:28:40.5248730Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:28:40.5248820Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:28:40.5249170Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data3-plot_data] - AssertionError: 
2025-01-10T13:28:40.5249240Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5249240Z 
2025-01-10T13:28:40.5249290Z (shapes (153,), (159,) mismatch)
2025-01-10T13:28:40.5249410Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:28:40.5249490Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:28:40.5249580Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:28:40.5249700Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:28:40.5249780Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:28:40.5250130Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:28:40.5250480Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data4-plot_data] - AssertionError: 
2025-01-10T13:28:40.5250550Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5250550Z 
2025-01-10T13:28:40.5250610Z (shapes (515,), (508,) mismatch)
2025-01-10T13:28:40.5250720Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:28:40.5250800Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:28:40.5250890Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:28:40.5251010Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:28:40.5251090Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:28:40.5251170Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:28:40.5251520Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data5-plot_data] - AssertionError: 
2025-01-10T13:28:40.5251590Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5251590Z 
2025-01-10T13:28:40.5251650Z (shapes (1481,), (1466,) mismatch)
2025-01-10T13:28:40.5251770Z  ACTUAL: array([12467.896487, 12467.896487, 12357.74828 , ..., 13068.120893,
2025-01-10T13:28:40.5251830Z        11398.237865, 11111.204868])
2025-01-10T13:28:40.5251950Z  DESIRED: array([13692.759737, 11362.937201, 12466.538617, ..., 12605.43284 ,
2025-01-10T13:28:40.5252000Z        11152.962595, 11172.044815])
2025-01-10T13:28:40.5252370Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data6-plot_data] - AssertionError: 
2025-01-10T13:28:40.5252440Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5252440Z 
2025-01-10T13:28:40.5252500Z (shapes (136,), (147,) mismatch)
2025-01-10T13:28:40.5252680Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:28:40.5252770Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:28:40.5252890Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:28:40.5253000Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:28:40.5253080Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:28:40.5253170Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:28:40.5253520Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data7-plot_data] - AssertionError: 
2025-01-10T13:28:40.5298880Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5298910Z 
2025-01-10T13:28:40.5298980Z (shapes (381,), (379,) mismatch)
2025-01-10T13:28:40.5299100Z  ACTUAL: array([12467.896487, 12357.74828 , 11118.747393, 11202.149205,
2025-01-10T13:28:40.5299220Z        13552.38988 , 11630.957821, 12006.254109, 15295.708346,
2025-01-10T13:28:40.5299320Z        11660.899663, 11789.640304, 15161.117263, 12697.545823,...
2025-01-10T13:28:40.5299440Z  DESIRED: array([12466.538617, 14269.760975, 11910.794005, 11196.260702,
2025-01-10T13:28:40.5299520Z        11633.386223, 12079.529869, 11966.991343, 11263.637708,
2025-01-10T13:28:40.5299610Z        14098.493392, 13656.398245, 12124.454378, 11838.909334,...
2025-01-10T13:28:40.5299990Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl0] - AssertionError: 
2025-01-10T13:28:40.5300070Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5300070Z 
2025-01-10T13:28:40.5300130Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.5300960Z Max absolute difference among violations: 26
2025-01-10T13:28:40.5301060Z Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.5301460Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.5301530Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.5301650Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.5301710Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.5302190Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl1] - AssertionError: 
2025-01-10T13:28:40.5302260Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5302260Z 
2025-01-10T13:28:40.5302330Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.5302410Z Max absolute difference among violations: 26
2025-01-10T13:28:40.5302510Z Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.5302630Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.5302690Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.5302810Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.5302880Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.5303230Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl4] - AssertionError: 
2025-01-10T13:28:40.5303300Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5303300Z 
2025-01-10T13:28:40.5303360Z Mismatched elements: 4 / 20 (20%)
2025-01-10T13:28:40.5303450Z Max absolute difference among violations: 24
2025-01-10T13:28:40.5303530Z Max relative difference among violations: 0.65
2025-01-10T13:28:40.5303640Z  ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:28:40.5303700Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:28:40.5303820Z  DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:28:40.5303880Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:28:40.5304220Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl5] - AssertionError: 
2025-01-10T13:28:40.5304460Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5304470Z 
2025-01-10T13:28:40.5304530Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.5304610Z Max absolute difference among violations: 26
2025-01-10T13:28:40.5304700Z Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.5304810Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.5304870Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.5304990Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.5305040Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.5305770Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl7] - AssertionError: 
2025-01-10T13:28:40.5305850Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5305860Z 
2025-01-10T13:28:40.5305920Z Mismatched elements: 2 / 40 (5%)
2025-01-10T13:28:40.5306000Z Max absolute difference among violations: 4.
2025-01-10T13:28:40.5306100Z Max relative difference among violations: 1.33333333
2025-01-10T13:28:40.5306160Z  ACTUAL: array([[1.10e+04, 9.00e+00],
2025-01-10T13:28:40.5306210Z        [1.19e+04, 9.00e+00],
2025-01-10T13:28:40.5306270Z        [1.19e+04, 5.00e+00],...
2025-01-10T13:28:40.5306330Z  DESIRED: array([[1.10e+04, 1.10e+01],
2025-01-10T13:28:40.5306380Z        [1.19e+04, 1.10e+01],
2025-01-10T13:28:40.5306440Z        [1.19e+04, 5.00e+00],...
2025-01-10T13:28:40.5306770Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply0] - AssertionError: 
2025-01-10T13:28:40.5306830Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5306840Z 
2025-01-10T13:28:40.5306900Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.5307020Z Max absolute difference among violations: 26
2025-01-10T13:28:40.5307120Z Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.5307240Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.5307300Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.5307420Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.5307470Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.5307800Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply1] - AssertionError: 
2025-01-10T13:28:40.5307860Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5307870Z 
2025-01-10T13:28:40.5307930Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.5308010Z Max absolute difference among violations: 26
2025-01-10T13:28:40.5308100Z Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.5308220Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.5308270Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.5308390Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.5308440Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.5308770Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply4] - AssertionError: 
2025-01-10T13:28:40.5308840Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5308840Z 
2025-01-10T13:28:40.5308920Z Mismatched elements: 4 / 20 (20%)
2025-01-10T13:28:40.5309020Z Max absolute difference among violations: 24
2025-01-10T13:28:40.5309090Z Max relative difference among violations: 0.65
2025-01-10T13:28:40.5309210Z  ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:28:40.5309270Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:28:40.5309390Z  DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:28:40.5309540Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:28:40.5309870Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply5] - AssertionError: 
2025-01-10T13:28:40.5309940Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5309950Z 
2025-01-10T13:28:40.5310000Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.5310080Z Max absolute difference among violations: 26
2025-01-10T13:28:40.5310170Z Max relative difference among violations: 0.44067797
2025-01-10T13:28:40.5310280Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:28:40.5310340Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:28:40.5310550Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:28:40.5310610Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:28:40.5310930Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply7] - AssertionError: 
2025-01-10T13:28:40.5311000Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:28:40.5311000Z 
2025-01-10T13:28:40.5311070Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:28:40.5311140Z Max absolute difference among violations: 4
2025-01-10T13:28:40.5311230Z Max relative difference among violations: 1.33333333
2025-01-10T13:28:40.5311340Z  ACTUAL: array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
2025-01-10T13:28:40.5311450Z  DESIRED: array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:28:40.5311500Z         0,  0,  0])
2025-01-10T13:28:40.5311870Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data0] - AssertionError: 
2025-01-10T13:28:40.5311950Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5311980Z 
2025-01-10T13:28:40.5312050Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.5312150Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:28:40.5312240Z Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.5312370Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5312430Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5312550Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5312610Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5312970Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data1] - AssertionError: 
2025-01-10T13:28:40.5313040Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5313050Z 
2025-01-10T13:28:40.5313110Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.5313210Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:28:40.5313310Z Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.5313430Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5313490Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5313620Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5313670Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5314030Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data2] - AssertionError: 
2025-01-10T13:28:40.5314100Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5314100Z 
2025-01-10T13:28:40.5314170Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.5314260Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:28:40.5314350Z Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.5314480Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5314770Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5314910Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5314960Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5315330Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data3] - AssertionError: 
2025-01-10T13:28:40.5315400Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5315400Z 
2025-01-10T13:28:40.5315470Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.5315560Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:28:40.5315650Z Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.5315870Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5315930Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5316060Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5316110Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5316480Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data4] - AssertionError: 
2025-01-10T13:28:40.5316550Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5316550Z 
2025-01-10T13:28:40.5316620Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.5316720Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:28:40.5316810Z Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.5316940Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5316990Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5317110Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5317170Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5317640Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data5] - AssertionError: 
2025-01-10T13:28:40.5317720Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5317720Z 
2025-01-10T13:28:40.5317780Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.5317880Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:28:40.5317970Z Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.5318090Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5318140Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5318260Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5318320Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5318680Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data6] - AssertionError: 
2025-01-10T13:28:40.5318760Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5318760Z 
2025-01-10T13:28:40.5318820Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.5318920Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:28:40.5319010Z Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.5319140Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5319190Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5319310Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5319360Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5319720Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data7] - AssertionError: 
2025-01-10T13:28:40.5319790Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5319800Z 
2025-01-10T13:28:40.5319860Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.5320030Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:28:40.5320130Z Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.5320250Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5320300Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5320420Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:28:40.5320470Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5320840Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data8] - AssertionError: 
2025-01-10T13:28:40.5320910Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5320980Z 
2025-01-10T13:28:40.5321050Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.5321150Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:28:40.5321250Z Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.5321380Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5321430Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5321560Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5321600Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5321970Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data9] - AssertionError: 
2025-01-10T13:28:40.5322040Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5322040Z 
2025-01-10T13:28:40.5322120Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.5322210Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:28:40.5322300Z Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.5322430Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5322510Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5322650Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5322700Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5323070Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data10] - AssertionError: 
2025-01-10T13:28:40.5323150Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5323150Z 
2025-01-10T13:28:40.5323210Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.5323310Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:28:40.5323400Z Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.5323520Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5323570Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5323700Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5323760Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5324210Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data11] - AssertionError: 
2025-01-10T13:28:40.5324310Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5324310Z 
2025-01-10T13:28:40.5324380Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:28:40.5324480Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:28:40.5324570Z Max relative difference among violations: 4.03140103
2025-01-10T13:28:40.5324690Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5324750Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5324870Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5324930Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5325300Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data12] - AssertionError: 
2025-01-10T13:28:40.5325540Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5325540Z 
2025-01-10T13:28:40.5325600Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.5325700Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:28:40.5325790Z Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.5325920Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5325970Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5326090Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5326140Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5326720Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data13] - AssertionError: 
2025-01-10T13:28:40.5326790Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5326800Z 
2025-01-10T13:28:40.5326860Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.5326960Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:28:40.5327060Z Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.5327180Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5327230Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5327350Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5327400Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5327770Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data14] - AssertionError: 
2025-01-10T13:28:40.5327840Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5327840Z 
2025-01-10T13:28:40.5327910Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.5328060Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:28:40.5328160Z Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.5328280Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5328330Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5328460Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5328510Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5328880Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data15] - AssertionError: 
2025-01-10T13:28:40.5328940Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5328950Z 
2025-01-10T13:28:40.5329010Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:28:40.5329110Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:28:40.5329200Z Max relative difference among violations: 53038.42648305
2025-01-10T13:28:40.5329330Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5329380Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5329510Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:28:40.5329560Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5329890Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply0] - AssertionError: 
2025-01-10T13:28:40.5329960Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5329970Z 
2025-01-10T13:28:40.5330030Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.5330120Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:28:40.5330240Z Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.5330380Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5330430Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5330560Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5330700Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5331040Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply1] - AssertionError: 
2025-01-10T13:28:40.5331110Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5331110Z 
2025-01-10T13:28:40.5331170Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.5331270Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:28:40.5331360Z Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.5331480Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5331640Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5331770Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5331820Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5332160Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply2] - AssertionError: 
2025-01-10T13:28:40.5332230Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5332230Z 
2025-01-10T13:28:40.5332300Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.5332390Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:28:40.5332480Z Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.5332600Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5332670Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5332790Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5332850Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5333180Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply3] - AssertionError: 
2025-01-10T13:28:40.5333290Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5333290Z 
2025-01-10T13:28:40.5333350Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.5333450Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:28:40.5333550Z Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.5333670Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5333720Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5333850Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5333900Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5334230Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply4] - AssertionError: 
2025-01-10T13:28:40.5334300Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5334300Z 
2025-01-10T13:28:40.5334360Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.5334460Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:28:40.5334550Z Max relative difference among violations: 21416.68434824
2025-01-10T13:28:40.5334670Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5334720Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5334850Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5334900Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5335220Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply5] - AssertionError: 
2025-01-10T13:28:40.5335300Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5335300Z 
2025-01-10T13:28:40.5335360Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.5335460Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:28:40.5335550Z Max relative difference among violations: 21416.68434824
2025-01-10T13:28:40.5335870Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5335920Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5336040Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5336090Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5336420Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply6] - AssertionError: 
2025-01-10T13:28:40.5336490Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5336490Z 
2025-01-10T13:28:40.5336550Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.5336650Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:28:40.5336830Z Max relative difference among violations: 21416.68434824
2025-01-10T13:28:40.5336950Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5337000Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5337130Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5337190Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5337520Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply7] - AssertionError: 
2025-01-10T13:28:40.5337590Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5337600Z 
2025-01-10T13:28:40.5337650Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.5337750Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:28:40.5337850Z Max relative difference among violations: 21416.68434824
2025-01-10T13:28:40.5337970Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5338020Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5338150Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:28:40.5338300Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5338640Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply8] - AssertionError: 
2025-01-10T13:28:40.5338710Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5338710Z 
2025-01-10T13:28:40.5338770Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.5338870Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:28:40.5338960Z Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.5339080Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5339140Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5339260Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5339310Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5339640Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply9] - AssertionError: 
2025-01-10T13:28:40.5339720Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5339720Z 
2025-01-10T13:28:40.5339790Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.5339890Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:28:40.5339970Z Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.5340090Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5340140Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5340270Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5340320Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5340660Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply10] - AssertionError: 
2025-01-10T13:28:40.5340730Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5340740Z 
2025-01-10T13:28:40.5340800Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.5340970Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:28:40.5341060Z Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.5341190Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5341240Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5341360Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5341410Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5341740Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply11] - AssertionError: 
2025-01-10T13:28:40.5341810Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5342030Z 
2025-01-10T13:28:40.5342110Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:28:40.5342210Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:28:40.5342300Z Max relative difference among violations: 3.03053629
2025-01-10T13:28:40.5342430Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5342480Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5342610Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5342660Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5342990Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply12] - AssertionError: 
2025-01-10T13:28:40.5343070Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5343070Z 
2025-01-10T13:28:40.5343130Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.5343220Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:28:40.5343320Z Max relative difference among violations: 21416.6843355
2025-01-10T13:28:40.5343440Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5343530Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5343660Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5343710Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5344100Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply13] - AssertionError: 
2025-01-10T13:28:40.5344200Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5344200Z 
2025-01-10T13:28:40.5344270Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.5344360Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:28:40.5344460Z Max relative difference among violations: 21416.6843355
2025-01-10T13:28:40.5344580Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5344630Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5344760Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5344810Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5345160Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply14] - AssertionError: 
2025-01-10T13:28:40.5345230Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5345230Z 
2025-01-10T13:28:40.5345300Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.5345390Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:28:40.5345490Z Max relative difference among violations: 21416.6843355
2025-01-10T13:28:40.5345620Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5345670Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5345790Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5345840Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5346180Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply15] - AssertionError: 
2025-01-10T13:28:40.5346410Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:28:40.5346410Z 
2025-01-10T13:28:40.5346470Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:28:40.5346570Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:28:40.5346660Z Max relative difference among violations: 21416.6843355
2025-01-10T13:28:40.5346790Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5346840Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5346970Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:28:40.5347020Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:28:40.5347220Z = 275 failed, 1163 passed, 329 skipped, 2 deselected, 19 xfailed, 8 xpassed, 251 warnings in 870.90s (0:14:30) =
2025-01-10T13:28:40.5347820Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5347830Z 
2025-01-10T13:28:40.5348390Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data1__.h5
2025-01-10T13:28:40.5348400Z 
2025-01-10T13:28:40.5348650Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5348650Z 
2025-01-10T13:28:40.5349160Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply0__.h5
2025-01-10T13:28:40.5349170Z 
2025-01-10T13:28:40.5349420Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5349420Z 
2025-01-10T13:28:40.5349960Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data9__.h5
2025-01-10T13:28:40.5350030Z 
2025-01-10T13:28:40.5350280Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5350290Z 
2025-01-10T13:28:40.5350820Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data3__.h5
2025-01-10T13:28:40.5350830Z 
2025-01-10T13:28:40.5351070Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5351070Z 
2025-01-10T13:28:40.5351580Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply10__.h5
2025-01-10T13:28:40.5351580Z 
2025-01-10T13:28:40.5351820Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5351830Z 
2025-01-10T13:28:40.5352330Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply2__.h5
2025-01-10T13:28:40.5352330Z 
2025-01-10T13:28:40.5353050Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5353090Z 
2025-01-10T13:28:40.5354060Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply0__.h5
2025-01-10T13:28:40.5354340Z 
2025-01-10T13:28:40.5355770Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5355790Z 
2025-01-10T13:28:40.5356570Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply1__.h5
2025-01-10T13:28:40.5356580Z 
2025-01-10T13:28:40.5356830Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5356840Z 
2025-01-10T13:28:40.5357810Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply12__.h5
2025-01-10T13:28:40.5357840Z 
2025-01-10T13:28:40.5358610Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5359360Z 
2025-01-10T13:28:40.5360650Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data7__.h5
2025-01-10T13:28:40.5360680Z 
2025-01-10T13:28:40.5360990Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5360990Z 
2025-01-10T13:28:40.5361550Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl4__.h5
2025-01-10T13:28:40.5361550Z 
2025-01-10T13:28:40.5363350Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5363360Z 
2025-01-10T13:28:40.5381840Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data5__.h5
2025-01-10T13:28:40.5381890Z 
2025-01-10T13:28:40.5382630Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5382650Z 
2025-01-10T13:28:40.5383230Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data8__.h5
2025-01-10T13:28:40.5383230Z 
2025-01-10T13:28:40.5383510Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5383520Z 
2025-01-10T13:28:40.5384060Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply15__.h5
2025-01-10T13:28:40.5384060Z 
2025-01-10T13:28:40.5384330Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5384330Z 
2025-01-10T13:28:40.5385080Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply14__.h5
2025-01-10T13:28:40.5385100Z 
2025-01-10T13:28:40.5385690Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5385690Z 
2025-01-10T13:28:40.5386230Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply5__.h5
2025-01-10T13:28:40.5386230Z 
2025-01-10T13:28:40.5386500Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5386500Z 
2025-01-10T13:28:40.5387080Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data2__.h5
2025-01-10T13:28:40.5452290Z 
2025-01-10T13:28:40.5452820Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5452820Z 
2025-01-10T13:28:40.5453370Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply7__.h5
2025-01-10T13:28:40.5453380Z 
2025-01-10T13:28:40.5453650Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5453650Z 
2025-01-10T13:28:40.5454180Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply1__.h5
2025-01-10T13:28:40.5454750Z 
2025-01-10T13:28:40.5455020Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5455040Z 
2025-01-10T13:28:40.5455580Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data6__.h5
2025-01-10T13:28:40.5455580Z 
2025-01-10T13:28:40.5455830Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5455830Z 
2025-01-10T13:28:40.5456320Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply7__.h5
2025-01-10T13:28:40.5456320Z 
2025-01-10T13:28:40.5456570Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5456570Z 
2025-01-10T13:28:40.5457440Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data4__.h5
2025-01-10T13:28:40.5457460Z 
2025-01-10T13:28:40.5457720Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5457720Z 
2025-01-10T13:28:40.5458240Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply5__.h5
2025-01-10T13:28:40.5458240Z 
2025-01-10T13:28:40.5459900Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5459900Z 
2025-01-10T13:28:40.5460430Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply6__.h5
2025-01-10T13:28:40.5460440Z 
2025-01-10T13:28:40.5460710Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5460710Z 
2025-01-10T13:28:40.5461230Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl7__.h5
2025-01-10T13:28:40.5461240Z 
2025-01-10T13:28:40.5464350Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5464370Z 
2025-01-10T13:28:40.5464940Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data12__.h5
2025-01-10T13:28:40.5464960Z 
2025-01-10T13:28:40.5465210Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5465440Z 
2025-01-10T13:28:40.5465990Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data11__.h5
2025-01-10T13:28:40.5465990Z 
2025-01-10T13:28:40.5466250Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5466250Z 
2025-01-10T13:28:40.5466750Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl1__.h5
2025-01-10T13:28:40.5466870Z 
2025-01-10T13:28:40.5467120Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5467120Z 
2025-01-10T13:28:40.5470550Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl5__.h5
2025-01-10T13:28:40.5470580Z 
2025-01-10T13:28:40.5470840Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5470850Z 
2025-01-10T13:28:40.5471390Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data14__.h5
2025-01-10T13:28:40.5471390Z 
2025-01-10T13:28:40.5471640Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5471640Z 
2025-01-10T13:28:40.5480070Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply11__.h5
2025-01-10T13:28:40.5480270Z 
2025-01-10T13:28:40.5480530Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5480540Z 
2025-01-10T13:28:40.5481050Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply3__.h5
2025-01-10T13:28:40.5481060Z 
2025-01-10T13:28:40.5481300Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5481310Z 
2025-01-10T13:28:40.5481820Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl0__.h5
2025-01-10T13:28:40.5481830Z 
2025-01-10T13:28:40.5482080Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5482090Z 
2025-01-10T13:28:40.5482600Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply9__.h5
2025-01-10T13:28:40.5482610Z 
2025-01-10T13:28:40.5482850Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:28:40.5482850Z 
2025-01-10T13:28:40.5483360Z Closing remaining open file: /Users/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply4__.h5
2025-01-10T13:28:40.5483370Z 
2025-01-10T13:28:43.1157190Z ##[error]Process completed with exit code 1.
