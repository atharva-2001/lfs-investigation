2025-01-10T13:11:03.2766013Z ##[group]Run pytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"
2025-01-10T13:11:03.2768208Z [36;1mpytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"[0m
2025-01-10T13:11:03.2803553Z shell: /usr/bin/bash -l {0}
2025-01-10T13:11:03.2803933Z env:
2025-01-10T13:11:03.2804227Z   CACHE_NUMBER: 0
2025-01-10T13:11:03.2805262Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-10T13:11:03.2806372Z   CODECOV_TOKEN: 
2025-01-10T13:11:03.2806735Z   MAMBA_ROOT_PREFIX: /home/runner/micromamba
2025-01-10T13:11:03.2807240Z   MAMBA_EXE: /home/runner/micromamba-bin/micromamba
2025-01-10T13:11:03.2807833Z   CONDARC: /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-10T13:11:03.2808390Z ##[endgroup]
2025-01-10T13:11:12.0366918Z ============================= test session starts ==============================
2025-01-10T13:11:12.0367874Z platform linux -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
2025-01-10T13:11:12.0368664Z rootdir: /home/runner/work/tardis/tardis
2025-01-10T13:11:12.0369290Z configfile: pyproject.toml
2025-01-10T13:11:12.0370074Z plugins: anyio-4.4.0, doctestplus-1.2.1, cov-5.0.0, html-4.1.1, metadata-3.1.1
2025-01-10T13:11:12.0370883Z collected 1796 items / 2 deselected / 1794 selected
2025-01-10T13:11:12.0371200Z 
2025-01-10T13:11:17.2255823Z tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
2025-01-10T13:11:18.9155769Z tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
2025-01-10T13:11:20.5228902Z tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
2025-01-10T13:11:22.3463903Z tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
2025-01-10T13:11:22.3555356Z tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
2025-01-10T13:11:23.6508558Z tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
2025-01-10T13:11:23.9880251Z tardis/grid/tests/test_grid.py .                                         [  2%]
2025-01-10T13:11:23.9896030Z tardis/gui/tests/test_gui.py s                                           [  2%]
2025-01-10T13:11:27.4704300Z tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
2025-01-10T13:11:27.4830441Z tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
2025-01-10T13:11:27.5116492Z tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
2025-01-10T13:12:05.7119864Z tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
2025-01-10T13:12:05.7264607Z tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
2025-01-10T13:12:05.7370089Z tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
2025-01-10T13:12:05.7670146Z tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
2025-01-10T13:12:05.7879849Z tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
2025-01-10T13:12:06.0973430Z tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
2025-01-10T13:12:06.4229697Z tardis/io/tests/test_atomic.py .....                                     [  7%]
2025-01-10T13:12:06.4578104Z tardis/io/tests/test_decay.py ..                                         [  7%]
2025-01-10T13:12:06.6507403Z tardis/io/tests/test_model_reader.py ......                              [  7%]
2025-01-10T13:12:06.6575914Z tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
2025-01-10T13:13:05.1680486Z tardis/model/tests/test_base.py ........................................ [ 10%]
2025-01-10T13:13:06.1451397Z ............                                                             [ 10%]
2025-01-10T13:13:09.1599903Z tardis/model/tests/test_csvy_model.py .........                          [ 11%]
2025-01-10T13:13:09.2073977Z tardis/model/tests/test_density.py ..                                    [ 11%]
2025-01-10T13:13:10.5013554Z tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
2025-01-10T13:13:11.8210980Z tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
2025-01-10T13:13:14.0274349Z tardis/opacities/tests/test_tau_sobolev.py FF                            [ 12%]
2025-01-10T13:13:16.7048941Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py ...      [ 12%]
2025-01-10T13:14:02.8680139Z tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
2025-01-10T13:14:14.3114539Z tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
2025-01-10T13:14:16.0318181Z tardis/plasma/tests/test_complete_plasmas.py ...........FFF..FFF..s..... [ 13%]
2025-01-10T13:14:19.5249820Z sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FF [ 18%]
2025-01-10T13:14:21.8573632Z F..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss.... [ 22%]
2025-01-10T13:14:25.4052950Z ........s...FFF..FFF.ss.....sFF.F....ss............s...FFF..FFF.ss.....s [ 26%]
2025-01-10T13:14:29.1880774Z FF.F....ss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF [ 30%]
2025-01-10T13:14:30.5213628Z ..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFssFssssss..... [ 34%]
2025-01-10T13:14:34.1761834Z .......s...FFF..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sF [ 38%]
2025-01-10T13:14:37.6313516Z F.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF. [ 42%]
2025-01-10T13:14:41.6746539Z .FFF.ss.....sFF.Fssssss............s...FFF..FFF.s.....FFFF.Fssssss...... [ 46%]
2025-01-10T13:14:44.2521578Z ......s...FFF..FFF.s.....FFFF.Fssssss............s...FFF..FFF.s.....FFFF [ 50%]
2025-01-10T13:14:47.7167304Z .Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF.. [ 54%]
2025-01-10T13:14:51.8110529Z FFF.ss.....sFF.Fssssss................FFF..FFF..s.....sFF.Fssss......... [ 58%]
2025-01-10T13:14:52.4908852Z .........FFF..FFF..s.....sFF.Fssss.......                                [ 60%]
2025-01-10T13:14:52.7205307Z tardis/plasma/tests/test_hdf_plasma.py ....F..F....F.F..........FFF..... [ 62%]
2025-01-10T13:14:52.7316163Z ......                                                                   [ 62%]
2025-01-10T13:14:52.8628785Z tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
2025-01-10T13:17:11.5416967Z tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
2025-01-10T13:17:11.5441801Z tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
2025-01-10T13:17:34.4875149Z tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
2025-01-10T13:17:47.9434270Z tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
2025-01-10T13:17:48.6691451Z tardis/simulation/tests/test_convergence.py .....                        [ 64%]
2025-01-10T13:17:57.4200002Z tardis/simulation/tests/test_simulation.py FFF.FFFFFF...                 [ 65%]
2025-01-10T13:17:57.4401595Z tardis/spectrum/tests/test_cuda_formal_integral.py sssssssssssssssssssss [ 66%]
2025-01-10T13:17:57.9021787Z ssss...ssssssssssssssssssssss                                            [ 67%]
2025-01-10T13:17:57.9092321Z tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
2025-01-10T13:18:00.0171690Z tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
2025-01-10T13:18:00.0403741Z ..........                                                               [ 69%]
2025-01-10T13:18:00.2105795Z tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
2025-01-10T13:18:00.2425383Z .........                                                                [ 72%]
2025-01-10T13:18:18.8476578Z tardis/spectrum/tests/test_spectrum_solver.py .FFF                       [ 72%]
2025-01-10T13:19:21.6972939Z tardis/tests/test_tardis_full.py .FFF                                    [ 72%]
2025-01-10T13:20:46.3559643Z tardis/tests/test_tardis_full_formal_integral.py .FFF.FFF.FFF.FFF        [ 73%]
2025-01-10T13:20:46.4294730Z tardis/tests/test_util.py .............................................  [ 75%]
2025-01-10T13:20:49.1297830Z tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
2025-01-10T13:20:56.9250625Z tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
2025-01-10T13:20:57.1503774Z tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
2025-01-10T13:20:57.1675253Z tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
2025-01-10T13:20:57.2085984Z sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
2025-01-10T13:21:06.1973906Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py xFF       [ 81%]
2025-01-10T13:21:06.2041053Z tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
2025-01-10T13:21:12.4190133Z tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
2025-01-10T13:21:12.9002322Z tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
2025-01-10T13:21:13.9485971Z tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
2025-01-10T13:21:14.0874967Z XX.........                                                              [ 84%]
2025-01-10T13:21:14.1152962Z tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
2025-01-10T13:21:14.4555336Z tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
2025-01-10T13:21:14.8686967Z .....                                                                    [ 85%]
2025-01-10T13:21:50.6002310Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py ....F.         [ 85%]
2025-01-10T13:21:50.6286699Z tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
2025-01-10T13:21:50.6318611Z tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
2025-01-10T13:21:53.6431450Z tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
2025-01-10T13:21:53.6603545Z tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
2025-01-10T13:21:57.0954127Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py F [ 86%]
2025-01-10T13:21:57.0955965Z                                                                          [ 86%]
2025-01-10T13:21:57.8486045Z tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
2025-01-10T13:21:59.1965473Z tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
2025-01-10T13:22:01.8995980Z ......                                                                   [ 88%]
2025-01-10T13:22:06.8889693Z tardis/visualization/tools/tests/test_liv_plot.py ...F..F..F..F..F..F..F [ 90%]
2025-01-10T13:22:09.9759798Z ..F..FF..FF.F........FF..FF.F                                            [ 91%]
2025-01-10T13:22:12.9287516Z tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
2025-01-10T13:22:20.0887004Z ....                                                                     [ 92%]
2025-01-10T13:22:26.3564810Z tardis/visualization/tools/tests/test_sdec_plot.py ...FFFFFFFFFFFFFFFFFF [ 94%]
2025-01-10T13:22:35.1648331Z FFFFFFFFFFFFFF................                                           [ 95%]
2025-01-10T13:22:35.6015177Z tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
2025-01-10T13:22:35.6712227Z ....                                                                     [ 96%]
2025-01-10T13:22:36.7141374Z tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
2025-01-10T13:22:37.3398106Z ..................                                                       [ 98%]
2025-01-10T13:23:41.0971474Z tardis/visualization/widgets/tests/test_shell_info.py .................. [ 99%]
2025-01-10T13:23:47.7137066Z ......                                                                   [100%]
2025-01-10T13:23:47.7137682Z 
2025-01-10T13:23:47.7137949Z =================================== FAILURES ===================================
2025-01-10T13:23:47.7138639Z _____________________ test_calculate_sobolev_line_opacity ______________________
2025-01-10T13:23:47.7139185Z 
2025-01-10T13:23:47.7139454Z left = array([13, 13, 13, ..., 19, 19, 19], dtype=int8)
2025-01-10T13:23:47.7140309Z right = array([13, 13, 13, ..., 19, 19, 19], dtype=int8), err_msg = None
2025-01-10T13:23:47.7140861Z 
2025-01-10T13:23:47.7141153Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7141741Z         if err_msg is None:
2025-01-10T13:23:47.7142172Z             if left.shape != right.shape:
2025-01-10T13:23:47.7142651Z                 raise_assert_detail(
2025-01-10T13:23:47.7143444Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7143846Z                 )
2025-01-10T13:23:47.7144067Z     
2025-01-10T13:23:47.7144268Z             diff = 0
2025-01-10T13:23:47.7144546Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7144891Z                 # count up differences
2025-01-10T13:23:47.7145299Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7145718Z                     diff += 1
2025-01-10T13:23:47.7145974Z     
2025-01-10T13:23:47.7146190Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7146569Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7147049Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7147500Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7147827Z E           
2025-01-10T13:23:47.7148084Z E           numpy array values are different (0.09581 %)
2025-01-10T13:23:47.7148800Z E           [left]:  [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]
2025-01-10T13:23:47.7149926Z E           [right]: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 13, 11, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]
2025-01-10T13:23:47.7150767Z 
2025-01-10T13:23:47.7151162Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7151656Z 
2025-01-10T13:23:47.7151865Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7152174Z 
2025-01-10T13:23:47.7152465Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef5943ae70>
2025-01-10T13:23:47.7153325Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef595117f0>
2025-01-10T13:23:47.7153699Z 
2025-01-10T13:23:47.7153807Z     def test_calculate_sobolev_line_opacity(
2025-01-10T13:23:47.7154103Z         nb_simulation_verysimple, regression_data
2025-01-10T13:23:47.7154365Z     ):
2025-01-10T13:23:47.7154590Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-10T13:23:47.7154865Z     
2025-01-10T13:23:47.7155062Z         actual = calculate_sobolev_line_opacity(
2025-01-10T13:23:47.7155330Z             legacy_plasma.lines,
2025-01-10T13:23:47.7155591Z             legacy_plasma.level_number_density,
2025-01-10T13:23:47.7156265Z             legacy_plasma.time_explosion,
2025-01-10T13:23:47.7156790Z             legacy_plasma.stimulated_emission_factor,
2025-01-10T13:23:47.7157250Z         )
2025-01-10T13:23:47.7157583Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.7158126Z >       pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7158466Z 
2025-01-10T13:23:47.7158670Z tardis/opacities/tests/test_tau_sobolev.py:22: 
2025-01-10T13:23:47.7159199Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7159794Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7160305Z     ???
2025-01-10T13:23:47.7160650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7160991Z 
2025-01-10T13:23:47.7161069Z >   ???
2025-01-10T13:23:47.7161296Z E   AssertionError: MultiIndex level [0] are different
2025-01-10T13:23:47.7161788Z E   
2025-01-10T13:23:47.7162201Z E   MultiIndex level [0] values are different (0.09581 %)
2025-01-10T13:23:47.7162777Z E   [left]:  Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:23:47.7163450Z E          ...
2025-01-10T13:23:47.7163804Z E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:23:47.7164299Z E         dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:23:47.7164785Z E   [right]: Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:23:47.7165213Z E          ...
2025-01-10T13:23:47.7165529Z E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:23:47.7166014Z E         dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:23:47.7166507Z E   At positional index 54, first diff: 12 != 14
2025-01-10T13:23:47.7166814Z 
2025-01-10T13:23:47.7166958Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7167453Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.7168471Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:23:47.7169823Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:23:47.7170917Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:23:47.7171366Z 
2025-01-10T13:23:47.7171376Z 
2025-01-10T13:23:47.7171861Z Packets:                                                                                   4020/? [00:11<00:00, 34008.06it/s][A
2025-01-10T13:23:47.7172271Z 
2025-01-10T13:23:47.7172724Z Packets:                                                                                   4021/? [00:11<00:00, 253.04it/s]  [A
2025-01-10T13:23:47.7173988Z Iterations:████████████████████████████████████████████████████████████████                4/5 [00:11<00:02,  2.67s/it]
2025-01-10T13:23:47.7174496Z 
2025-01-10T13:23:47.7174940Z Packets:                                                                                   4030/? [00:11<00:00, 253.04it/s][A
2025-01-10T13:23:47.7175921Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.7177238Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:23:47.7178580Z _________________________ test_calculate_beta_sobolevs _________________________
2025-01-10T13:23:47.7179034Z 
2025-01-10T13:23:47.7179463Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef5943ae70>
2025-01-10T13:23:47.7180519Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef5954eb10>
2025-01-10T13:23:47.7181183Z 
2025-01-10T13:23:47.7181565Z     def test_calculate_beta_sobolevs(nb_simulation_verysimple, regression_data):
2025-01-10T13:23:47.7182264Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-10T13:23:47.7182781Z     
2025-01-10T13:23:47.7183625Z         tau_sobolevs = calculate_sobolev_line_opacity(
2025-01-10T13:23:47.7184132Z             legacy_plasma.lines,
2025-01-10T13:23:47.7184586Z             legacy_plasma.level_number_density,
2025-01-10T13:23:47.7185084Z             legacy_plasma.time_explosion,
2025-01-10T13:23:47.7185587Z             legacy_plasma.stimulated_emission_factor,
2025-01-10T13:23:47.7186061Z         )
2025-01-10T13:23:47.7186444Z         actual = calculate_beta_sobolev(tau_sobolevs)
2025-01-10T13:23:47.7186983Z         expected = regression_data.sync_ndarray(actual)
2025-01-10T13:23:47.7187516Z >       npt.assert_allclose(actual, expected)
2025-01-10T13:23:47.7187844Z 
2025-01-10T13:23:47.7188056Z tardis/opacities/tests/test_tau_sobolev.py:36: 
2025-01-10T13:23:47.7188609Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7188982Z 
2025-01-10T13:23:47.7189480Z args = (<function assert_allclose.<locals>.compare at 0x7fef60ea3d80>, array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.7190272Z        [1., 1., .....,
2025-01-10T13:23:47.7190638Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.7191062Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.7191480Z        [1., 1., 1., ..., 1., 1., 1.]]))
2025-01-10T13:23:47.7192222Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.7192844Z 
2025-01-10T13:23:47.7193001Z     @wraps(func)
2025-01-10T13:23:47.7193598Z     def inner(*args, **kwds):
2025-01-10T13:23:47.7194018Z         with self._recreate_cm():
2025-01-10T13:23:47.7194454Z >           return func(*args, **kwds)
2025-01-10T13:23:47.7194911Z E           AssertionError: 
2025-01-10T13:23:47.7195367Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.7195856Z E           
2025-01-10T13:23:47.7196236Z E           Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:23:47.7196607Z E           Max absolute difference among violations: 0.99984222
2025-01-10T13:23:47.7196971Z E           Max relative difference among violations: 6337.12154973
2025-01-10T13:23:47.7197301Z E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.7197580Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.7197841Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:23:47.7198120Z E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.7198394Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.7198647Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:23:47.7198821Z 
2025-01-10T13:23:47.7199041Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.7199536Z _________ TestPlasma.test_plasma_properties[ionization:nebular-lines] __________
2025-01-10T13:23:47.7199815Z 
2025-01-10T13:23:47.7199950Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7200502Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7200823Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7201139Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7201539Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7201850Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7202104Z err_msg = None
2025-01-10T13:23:47.7202219Z 
2025-01-10T13:23:47.7202333Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7202606Z         if err_msg is None:
2025-01-10T13:23:47.7202843Z             if left.shape != right.shape:
2025-01-10T13:23:47.7203366Z                 raise_assert_detail(
2025-01-10T13:23:47.7203685Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7203993Z                 )
2025-01-10T13:23:47.7204306Z     
2025-01-10T13:23:47.7204472Z             diff = 0
2025-01-10T13:23:47.7204705Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7204991Z                 # count up differences
2025-01-10T13:23:47.7205325Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7205659Z                     diff += 1
2025-01-10T13:23:47.7205870Z     
2025-01-10T13:23:47.7206115Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7206421Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7206809Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7207181Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7207448Z E           
2025-01-10T13:23:47.7207665Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7208124Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7208735Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7209085Z 
2025-01-10T13:23:47.7209397Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7209790Z 
2025-01-10T13:23:47.7209967Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7210222Z 
2025-01-10T13:23:47.7210451Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c123c0>
2025-01-10T13:23:47.7210934Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>
2025-01-10T13:23:47.7211259Z attr = 'lines'
2025-01-10T13:23:47.7211368Z 
2025-01-10T13:23:47.7211516Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7211856Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7212141Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7212366Z         try:
2025-01-10T13:23:47.7212616Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7212925Z         except KeyError:
2025-01-10T13:23:47.7213410Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7213709Z     
2025-01-10T13:23:47.7213893Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7214142Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7214403Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7214856Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7215167Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7215411Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7215690Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7215957Z             else:
2025-01-10T13:23:47.7216167Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7216453Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7216645Z 
2025-01-10T13:23:47.7216778Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7217098Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7217443Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7217744Z     ???
2025-01-10T13:23:47.7217952Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7218155Z 
2025-01-10T13:23:47.7218232Z >   ???
2025-01-10T13:23:47.7218601Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7218876Z E   
2025-01-10T13:23:47.7219105Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7219432Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7219704Z E          ...
2025-01-10T13:23:47.7219901Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7220200Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7220529Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7220796Z E          ...
2025-01-10T13:23:47.7220995Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7221295Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7221609Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7221801Z 
2025-01-10T13:23:47.7221895Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7222274Z _ TestPlasma.test_plasma_properties[ionization:nebular-lines_lower_level_index] _
2025-01-10T13:23:47.7222588Z 
2025-01-10T13:23:47.7222818Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c13230>
2025-01-10T13:23:47.7223521Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>
2025-01-10T13:23:47.7223863Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.7224017Z 
2025-01-10T13:23:47.7224162Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7224497Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7224778Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7225000Z         try:
2025-01-10T13:23:47.7225250Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7225557Z         except KeyError:
2025-01-10T13:23:47.7225832Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7226124Z     
2025-01-10T13:23:47.7226315Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7226569Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7226835Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7227140Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7227447Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7227692Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7227975Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7228184Z 
2025-01-10T13:23:47.7228311Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7228634Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7228839Z 
2025-01-10T13:23:47.7228979Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7229295Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7229568Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7229993Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7230297Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7230609Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7230876Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7231145Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7231380Z err_msg = None
2025-01-10T13:23:47.7231492Z 
2025-01-10T13:23:47.7231610Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7231880Z         if err_msg is None:
2025-01-10T13:23:47.7232115Z             if left.shape != right.shape:
2025-01-10T13:23:47.7232373Z                 raise_assert_detail(
2025-01-10T13:23:47.7232678Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7232978Z                 )
2025-01-10T13:23:47.7233356Z     
2025-01-10T13:23:47.7233530Z             diff = 0
2025-01-10T13:23:47.7233764Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7234227Z                 # count up differences
2025-01-10T13:23:47.7234563Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7234897Z                     diff += 1
2025-01-10T13:23:47.7235107Z     
2025-01-10T13:23:47.7235290Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7235591Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7235979Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7236351Z E           AssertionError: Series are different
2025-01-10T13:23:47.7236609Z E           
2025-01-10T13:23:47.7236820Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.7237370Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7238156Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7238883Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7239300Z 
2025-01-10T13:23:47.7239617Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7240223Z _ TestPlasma.test_plasma_properties[ionization:nebular-lines_upper_level_index] _
2025-01-10T13:23:47.7240523Z 
2025-01-10T13:23:47.7240750Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c13470>
2025-01-10T13:23:47.7241229Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>
2025-01-10T13:23:47.7241566Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.7241722Z 
2025-01-10T13:23:47.7241869Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7242201Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7242483Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7242706Z         try:
2025-01-10T13:23:47.7242952Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7243564Z         except KeyError:
2025-01-10T13:23:47.7243840Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7244135Z     
2025-01-10T13:23:47.7244317Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7244567Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7244831Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7245133Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7245435Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7245682Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7245964Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7246160Z 
2025-01-10T13:23:47.7246290Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7246608Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7246846Z 
2025-01-10T13:23:47.7246992Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7247429Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7247703Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7247978Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7248274Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7248585Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7248853Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7249124Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7249358Z err_msg = None
2025-01-10T13:23:47.7249470Z 
2025-01-10T13:23:47.7249583Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7249852Z         if err_msg is None:
2025-01-10T13:23:47.7250084Z             if left.shape != right.shape:
2025-01-10T13:23:47.7250338Z                 raise_assert_detail(
2025-01-10T13:23:47.7250646Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7250950Z                 )
2025-01-10T13:23:47.7251138Z     
2025-01-10T13:23:47.7251304Z             diff = 0
2025-01-10T13:23:47.7251537Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7251824Z                 # count up differences
2025-01-10T13:23:47.7252155Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7252492Z                     diff += 1
2025-01-10T13:23:47.7252705Z     
2025-01-10T13:23:47.7252886Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7253303Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7253696Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7254055Z E           AssertionError: Series are different
2025-01-10T13:23:47.7254313Z E           
2025-01-10T13:23:47.7254524Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.7255074Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7255884Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7256710Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7257292Z 
2025-01-10T13:23:47.7257604Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7258182Z ___________ TestPlasma.test_plasma_properties[ionization:nebular-nu] ___________
2025-01-10T13:23:47.7258460Z 
2025-01-10T13:23:47.7258589Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7258931Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7259242Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7259672Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7260022Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7260335Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7260593Z err_msg = None
2025-01-10T13:23:47.7260706Z 
2025-01-10T13:23:47.7260823Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7261095Z         if err_msg is None:
2025-01-10T13:23:47.7261336Z             if left.shape != right.shape:
2025-01-10T13:23:47.7261593Z                 raise_assert_detail(
2025-01-10T13:23:47.7261899Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7262202Z                 )
2025-01-10T13:23:47.7262385Z     
2025-01-10T13:23:47.7262550Z             diff = 0
2025-01-10T13:23:47.7262787Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7263181Z                 # count up differences
2025-01-10T13:23:47.7263523Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7263862Z                     diff += 1
2025-01-10T13:23:47.7264073Z     
2025-01-10T13:23:47.7264253Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7264554Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7264941Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7265315Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7265580Z E           
2025-01-10T13:23:47.7265797Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7266250Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7266855Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7267194Z 
2025-01-10T13:23:47.7267503Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7267887Z 
2025-01-10T13:23:47.7268067Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7268325Z 
2025-01-10T13:23:47.7268548Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c12930>
2025-01-10T13:23:47.7269059Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>, attr = 'nu'
2025-01-10T13:23:47.7269511Z 
2025-01-10T13:23:47.7269657Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7269994Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7270273Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7270492Z         try:
2025-01-10T13:23:47.7270733Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7271040Z         except KeyError:
2025-01-10T13:23:47.7271314Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7271605Z     
2025-01-10T13:23:47.7271789Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7272037Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7272298Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7272598Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7272912Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7273289Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7273582Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7273954Z 
2025-01-10T13:23:47.7274087Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7274406Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7274753Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7275055Z     ???
2025-01-10T13:23:47.7275262Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7275461Z 
2025-01-10T13:23:47.7275533Z >   ???
2025-01-10T13:23:47.7275753Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7276029Z E   
2025-01-10T13:23:47.7276249Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7276572Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7276842Z E          ...
2025-01-10T13:23:47.7277040Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7277344Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7277679Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7277949Z E          ...
2025-01-10T13:23:47.7278144Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7278445Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7278758Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7278940Z 
2025-01-10T13:23:47.7279037Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7279391Z _____ TestPlasma.test_plasma_properties[ionization:nebular-wavelength_cm] ______
2025-01-10T13:23:47.7279678Z 
2025-01-10T13:23:47.7279816Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7280161Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7280476Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7280792Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7281140Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7281447Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7281700Z err_msg = None
2025-01-10T13:23:47.7281815Z 
2025-01-10T13:23:47.7281928Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7282203Z         if err_msg is None:
2025-01-10T13:23:47.7282441Z             if left.shape != right.shape:
2025-01-10T13:23:47.7282699Z                 raise_assert_detail(
2025-01-10T13:23:47.7283003Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7283449Z                 )
2025-01-10T13:23:47.7283633Z     
2025-01-10T13:23:47.7283798Z             diff = 0
2025-01-10T13:23:47.7284026Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7284451Z                 # count up differences
2025-01-10T13:23:47.7284790Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7285125Z                     diff += 1
2025-01-10T13:23:47.7285335Z     
2025-01-10T13:23:47.7285516Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7285820Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7286206Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7286576Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7286843Z E           
2025-01-10T13:23:47.7287057Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7287508Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7288248Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7288589Z 
2025-01-10T13:23:47.7288896Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7289287Z 
2025-01-10T13:23:47.7289459Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7289709Z 
2025-01-10T13:23:47.7289937Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c12810>
2025-01-10T13:23:47.7290408Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>
2025-01-10T13:23:47.7290744Z attr = 'wavelength_cm'
2025-01-10T13:23:47.7290871Z 
2025-01-10T13:23:47.7291021Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7291356Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7291640Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7291863Z         try:
2025-01-10T13:23:47.7292111Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7292417Z         except KeyError:
2025-01-10T13:23:47.7292689Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7292988Z     
2025-01-10T13:23:47.7293354Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7293612Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7293875Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7294176Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7294478Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7294723Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7295008Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7295213Z 
2025-01-10T13:23:47.7295343Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7295662Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7296002Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7296300Z     ???
2025-01-10T13:23:47.7296508Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7296705Z 
2025-01-10T13:23:47.7296781Z >   ???
2025-01-10T13:23:47.7297003Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7297280Z E   
2025-01-10T13:23:47.7297500Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7297819Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7298087Z E          ...
2025-01-10T13:23:47.7298283Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7298747Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7299077Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7299348Z E          ...
2025-01-10T13:23:47.7299544Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7299837Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7300147Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7300335Z 
2025-01-10T13:23:47.7300427Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7300764Z __________ TestPlasma.test_plasma_properties[ionization:nebular-f_lu] __________
2025-01-10T13:23:47.7301041Z 
2025-01-10T13:23:47.7301170Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7301550Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7301861Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7302297Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7302647Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7302956Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7303334Z err_msg = None
2025-01-10T13:23:47.7303444Z 
2025-01-10T13:23:47.7303561Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7303831Z         if err_msg is None:
2025-01-10T13:23:47.7304066Z             if left.shape != right.shape:
2025-01-10T13:23:47.7304325Z                 raise_assert_detail(
2025-01-10T13:23:47.7304629Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7304931Z                 )
2025-01-10T13:23:47.7305113Z     
2025-01-10T13:23:47.7305280Z             diff = 0
2025-01-10T13:23:47.7305512Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7305807Z                 # count up differences
2025-01-10T13:23:47.7306137Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7306472Z                     diff += 1
2025-01-10T13:23:47.7306683Z     
2025-01-10T13:23:47.7306867Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7307172Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7307559Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7307938Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7308203Z E           
2025-01-10T13:23:47.7308421Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7308870Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7309475Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7309816Z 
2025-01-10T13:23:47.7310134Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7310524Z 
2025-01-10T13:23:47.7310691Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7310950Z 
2025-01-10T13:23:47.7311171Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c128d0>
2025-01-10T13:23:47.7311685Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>, attr = 'f_lu'
2025-01-10T13:23:47.7312107Z 
2025-01-10T13:23:47.7312253Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7312585Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7312865Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7313269Z         try:
2025-01-10T13:23:47.7313520Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7313825Z         except KeyError:
2025-01-10T13:23:47.7314095Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7314390Z     
2025-01-10T13:23:47.7314571Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7314821Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7315080Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7315380Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7315681Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7315928Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7316241Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7316564Z 
2025-01-10T13:23:47.7316689Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7317006Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7317348Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7317647Z     ???
2025-01-10T13:23:47.7317855Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7318054Z 
2025-01-10T13:23:47.7318126Z >   ???
2025-01-10T13:23:47.7318347Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7318621Z E   
2025-01-10T13:23:47.7318848Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7319171Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7319440Z E          ...
2025-01-10T13:23:47.7319642Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7319947Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7320281Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7320549Z E          ...
2025-01-10T13:23:47.7320744Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7321040Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7321351Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7321535Z 
2025-01-10T13:23:47.7321632Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7321986Z ______ TestPlasma.test_plasma_properties[ionization:nebular-tau_sobolevs] ______
2025-01-10T13:23:47.7322283Z 
2025-01-10T13:23:47.7322416Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7322766Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7323204Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7323525Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7323872Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7324183Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7324439Z err_msg = None
2025-01-10T13:23:47.7324548Z 
2025-01-10T13:23:47.7324664Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7324932Z         if err_msg is None:
2025-01-10T13:23:47.7325183Z             if left.shape != right.shape:
2025-01-10T13:23:47.7325443Z                 raise_assert_detail(
2025-01-10T13:23:47.7325747Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7326049Z                 )
2025-01-10T13:23:47.7326230Z     
2025-01-10T13:23:47.7326396Z             diff = 0
2025-01-10T13:23:47.7326629Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7327053Z                 # count up differences
2025-01-10T13:23:47.7327389Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7327729Z                     diff += 1
2025-01-10T13:23:47.7327938Z     
2025-01-10T13:23:47.7328117Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7328417Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7328804Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7329177Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7329440Z E           
2025-01-10T13:23:47.7329658Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7330104Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7330826Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7331164Z 
2025-01-10T13:23:47.7331475Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7331865Z 
2025-01-10T13:23:47.7332037Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7332295Z 
2025-01-10T13:23:47.7332518Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c12960>
2025-01-10T13:23:47.7333208Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>
2025-01-10T13:23:47.7333542Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.7333676Z 
2025-01-10T13:23:47.7333813Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7334147Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7334425Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7334647Z         try:
2025-01-10T13:23:47.7334891Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7335199Z         except KeyError:
2025-01-10T13:23:47.7335467Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7335772Z     
2025-01-10T13:23:47.7335956Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7336211Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7336477Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7336784Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7337089Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7337335Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7337629Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7337899Z             else:
2025-01-10T13:23:47.7338112Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7338396Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7338584Z 
2025-01-10T13:23:47.7338718Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7339035Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7339380Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7339677Z     ???
2025-01-10T13:23:47.7340109Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7340361Z 
2025-01-10T13:23:47.7340502Z >   ???
2025-01-10T13:23:47.7340842Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7341272Z E   
2025-01-10T13:23:47.7341604Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7342143Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7342572Z E          ...
2025-01-10T13:23:47.7342888Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7343480Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7343942Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7344308Z E          ...
2025-01-10T13:23:47.7355891Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7356520Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7357076Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7357391Z 
2025-01-10T13:23:47.7357553Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7358034Z ______ TestPlasma.test_plasma_properties[ionization:nebular-beta_sobolev] ______
2025-01-10T13:23:47.7358340Z 
2025-01-10T13:23:47.7358484Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7359034Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7359355Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7359678Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7360029Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7360344Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7360601Z err_msg = None
2025-01-10T13:23:47.7360720Z 
2025-01-10T13:23:47.7360837Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7361115Z         if err_msg is None:
2025-01-10T13:23:47.7361354Z             if left.shape != right.shape:
2025-01-10T13:23:47.7361616Z                 raise_assert_detail(
2025-01-10T13:23:47.7361944Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7362270Z                 )
2025-01-10T13:23:47.7362461Z     
2025-01-10T13:23:47.7362637Z             diff = 0
2025-01-10T13:23:47.7362879Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7363345Z                 # count up differences
2025-01-10T13:23:47.7363685Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7364019Z                     diff += 1
2025-01-10T13:23:47.7364233Z     
2025-01-10T13:23:47.7364414Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7364718Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7365105Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7365468Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7365735Z E           
2025-01-10T13:23:47.7365952Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7366409Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7367014Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7367356Z 
2025-01-10T13:23:47.7367677Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7368062Z 
2025-01-10T13:23:47.7368239Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7368651Z 
2025-01-10T13:23:47.7368880Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c11d90>
2025-01-10T13:23:47.7369358Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>
2025-01-10T13:23:47.7369689Z attr = 'beta_sobolev'
2025-01-10T13:23:47.7369813Z 
2025-01-10T13:23:47.7369961Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7370297Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7370577Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7370802Z         try:
2025-01-10T13:23:47.7371050Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7371355Z         except KeyError:
2025-01-10T13:23:47.7371625Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7371921Z     
2025-01-10T13:23:47.7372100Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7372352Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7372619Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7373427Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7373840Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7374094Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7374380Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7374647Z             else:
2025-01-10T13:23:47.7374857Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7375142Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7375337Z 
2025-01-10T13:23:47.7375465Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7375788Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7376135Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7376431Z     ???
2025-01-10T13:23:47.7376637Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7376841Z 
2025-01-10T13:23:47.7376913Z >   ???
2025-01-10T13:23:47.7377136Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7377412Z E   
2025-01-10T13:23:47.7377633Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7377959Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7378227Z E          ...
2025-01-10T13:23:47.7378422Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7378721Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7379047Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7379310Z E          ...
2025-01-10T13:23:47.7379506Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7379807Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7380118Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7380302Z 
2025-01-10T13:23:47.7380404Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7380747Z ________ TestPlasma.test_plasma_properties[ionization:nebular-j_blues] _________
2025-01-10T13:23:47.7381034Z 
2025-01-10T13:23:47.7381163Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7381508Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7381821Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7382136Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7382473Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7382772Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7383179Z err_msg = None
2025-01-10T13:23:47.7383298Z 
2025-01-10T13:23:47.7383414Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7383853Z         if err_msg is None:
2025-01-10T13:23:47.7384091Z             if left.shape != right.shape:
2025-01-10T13:23:47.7384357Z                 raise_assert_detail(
2025-01-10T13:23:47.7384663Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7384966Z                 )
2025-01-10T13:23:47.7385146Z     
2025-01-10T13:23:47.7385308Z             diff = 0
2025-01-10T13:23:47.7385541Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7385821Z                 # count up differences
2025-01-10T13:23:47.7386152Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7386484Z                     diff += 1
2025-01-10T13:23:47.7386693Z     
2025-01-10T13:23:47.7386873Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7387174Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7387564Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7387942Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7388339Z E           
2025-01-10T13:23:47.7388558Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7389007Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7389600Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7389937Z 
2025-01-10T13:23:47.7390249Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7390646Z 
2025-01-10T13:23:47.7390821Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7391074Z 
2025-01-10T13:23:47.7391302Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c12ae0>
2025-01-10T13:23:47.7391779Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef595fc0b0>
2025-01-10T13:23:47.7392298Z attr = 'j_blues'
2025-01-10T13:23:47.7392502Z 
2025-01-10T13:23:47.7392731Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7393462Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7393800Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7394021Z         try:
2025-01-10T13:23:47.7394266Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7394572Z         except KeyError:
2025-01-10T13:23:47.7394843Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7395136Z     
2025-01-10T13:23:47.7395319Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7395566Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7395829Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7396123Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7396423Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7396667Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7396949Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7397213Z             else:
2025-01-10T13:23:47.7397419Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7397697Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7397882Z 
2025-01-10T13:23:47.7398011Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7398336Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7398828Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7399127Z     ???
2025-01-10T13:23:47.7399329Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7399526Z 
2025-01-10T13:23:47.7399595Z >   ???
2025-01-10T13:23:47.7399813Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7400087Z E   
2025-01-10T13:23:47.7400306Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7400625Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7400886Z E          ...
2025-01-10T13:23:47.7401079Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7401410Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7401733Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7402001Z E          ...
2025-01-10T13:23:47.7402201Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7402503Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7402940Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7403273Z 
2025-01-10T13:23:47.7403369Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7403702Z ___________ TestPlasma.test_plasma_properties[ionization:lte-lines] ____________
2025-01-10T13:23:47.7403974Z 
2025-01-10T13:23:47.7404108Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7404443Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7404750Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7405055Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7405393Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7405688Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7405946Z err_msg = None
2025-01-10T13:23:47.7406058Z 
2025-01-10T13:23:47.7406168Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7406435Z         if err_msg is None:
2025-01-10T13:23:47.7406664Z             if left.shape != right.shape:
2025-01-10T13:23:47.7406925Z                 raise_assert_detail(
2025-01-10T13:23:47.7407230Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7407532Z                 )
2025-01-10T13:23:47.7407712Z     
2025-01-10T13:23:47.7407874Z             diff = 0
2025-01-10T13:23:47.7408100Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7408374Z                 # count up differences
2025-01-10T13:23:47.7408704Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7409034Z                     diff += 1
2025-01-10T13:23:47.7409241Z     
2025-01-10T13:23:47.7409423Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7409733Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7410216Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7410857Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7411297Z E           
2025-01-10T13:23:47.7411651Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7412111Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7412704Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7413313Z 
2025-01-10T13:23:47.7413627Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7414007Z 
2025-01-10T13:23:47.7414178Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7414427Z 
2025-01-10T13:23:47.7414654Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c12750>
2025-01-10T13:23:47.7415124Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>
2025-01-10T13:23:47.7415449Z attr = 'lines'
2025-01-10T13:23:47.7415556Z 
2025-01-10T13:23:47.7415698Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7416027Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7416306Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7416537Z         try:
2025-01-10T13:23:47.7416783Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7417233Z         except KeyError:
2025-01-10T13:23:47.7417502Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7417789Z     
2025-01-10T13:23:47.7417967Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7418218Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7418477Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7418779Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7419077Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7419319Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7419597Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7419862Z             else:
2025-01-10T13:23:47.7420067Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7420348Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7420538Z 
2025-01-10T13:23:47.7420669Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7420994Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7421337Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7421634Z     ???
2025-01-10T13:23:47.7421834Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7422028Z 
2025-01-10T13:23:47.7422102Z >   ???
2025-01-10T13:23:47.7422318Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7422590Z E   
2025-01-10T13:23:47.7422805Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7423222Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7423486Z E          ...
2025-01-10T13:23:47.7423677Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7423976Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7424352Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7424618Z E          ...
2025-01-10T13:23:47.7424804Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7425096Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7425404Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7425594Z 
2025-01-10T13:23:47.7425689Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7426042Z __ TestPlasma.test_plasma_properties[ionization:lte-lines_lower_level_index] ___
2025-01-10T13:23:47.7426330Z 
2025-01-10T13:23:47.7426562Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c107d0>
2025-01-10T13:23:47.7427035Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>
2025-01-10T13:23:47.7427372Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.7427594Z 
2025-01-10T13:23:47.7427839Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7428612Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7429091Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7429383Z         try:
2025-01-10T13:23:47.7429633Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7429942Z         except KeyError:
2025-01-10T13:23:47.7430212Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7430501Z     
2025-01-10T13:23:47.7430679Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7430927Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7431187Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7431492Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7431792Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7432035Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7432322Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7432518Z 
2025-01-10T13:23:47.7432651Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7433286Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7433487Z 
2025-01-10T13:23:47.7433628Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7433938Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7434208Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7434484Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7434780Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7435089Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7435352Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7435621Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7435854Z err_msg = None
2025-01-10T13:23:47.7435966Z 
2025-01-10T13:23:47.7436085Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7436362Z         if err_msg is None:
2025-01-10T13:23:47.7436594Z             if left.shape != right.shape:
2025-01-10T13:23:47.7436849Z                 raise_assert_detail(
2025-01-10T13:23:47.7437150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7437449Z                 )
2025-01-10T13:23:47.7437629Z     
2025-01-10T13:23:47.7437791Z             diff = 0
2025-01-10T13:23:47.7438016Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7438294Z                 # count up differences
2025-01-10T13:23:47.7438623Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7438960Z                     diff += 1
2025-01-10T13:23:47.7439176Z     
2025-01-10T13:23:47.7439353Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7439654Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7440048Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7440415Z E           AssertionError: Series are different
2025-01-10T13:23:47.7440673Z E           
2025-01-10T13:23:47.7440883Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.7441429Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7442192Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7443192Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7443606Z 
2025-01-10T13:23:47.7443924Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7444515Z __ TestPlasma.test_plasma_properties[ionization:lte-lines_upper_level_index] ___
2025-01-10T13:23:47.7444806Z 
2025-01-10T13:23:47.7445032Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c10e30>
2025-01-10T13:23:47.7445511Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>
2025-01-10T13:23:47.7446150Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.7446419Z 
2025-01-10T13:23:47.7446649Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7447210Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7447641Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7447863Z         try:
2025-01-10T13:23:47.7448106Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7448406Z         except KeyError:
2025-01-10T13:23:47.7448675Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7448962Z     
2025-01-10T13:23:47.7449140Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7449385Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7449646Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7449949Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7450259Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7450507Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7450780Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7450976Z 
2025-01-10T13:23:47.7451106Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7451423Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7451624Z 
2025-01-10T13:23:47.7451767Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7452082Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7452355Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7452628Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7452927Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7453370Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7453645Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7453918Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7454153Z err_msg = None
2025-01-10T13:23:47.7454266Z 
2025-01-10T13:23:47.7454377Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7454644Z         if err_msg is None:
2025-01-10T13:23:47.7454875Z             if left.shape != right.shape:
2025-01-10T13:23:47.7455135Z                 raise_assert_detail(
2025-01-10T13:23:47.7455438Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7455739Z                 )
2025-01-10T13:23:47.7455922Z     
2025-01-10T13:23:47.7456087Z             diff = 0
2025-01-10T13:23:47.7456315Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7456596Z                 # count up differences
2025-01-10T13:23:47.7456923Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7457401Z                     diff += 1
2025-01-10T13:23:47.7457617Z     
2025-01-10T13:23:47.7457796Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7458095Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7458484Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7458843Z E           AssertionError: Series are different
2025-01-10T13:23:47.7459101Z E           
2025-01-10T13:23:47.7459303Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.7459851Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7460659Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7461589Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7462036Z 
2025-01-10T13:23:47.7462350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7462925Z _____________ TestPlasma.test_plasma_properties[ionization:lte-nu] _____________
2025-01-10T13:23:47.7463312Z 
2025-01-10T13:23:47.7463442Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7463780Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7464093Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7464405Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7464824Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7465376Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7465800Z err_msg = None
2025-01-10T13:23:47.7465978Z 
2025-01-10T13:23:47.7466162Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7466494Z         if err_msg is None:
2025-01-10T13:23:47.7466729Z             if left.shape != right.shape:
2025-01-10T13:23:47.7466995Z                 raise_assert_detail(
2025-01-10T13:23:47.7467298Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7467596Z                 )
2025-01-10T13:23:47.7467775Z     
2025-01-10T13:23:47.7467939Z             diff = 0
2025-01-10T13:23:47.7468175Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7468454Z                 # count up differences
2025-01-10T13:23:47.7468782Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7469119Z                     diff += 1
2025-01-10T13:23:47.7469330Z     
2025-01-10T13:23:47.7469511Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7469811Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7470198Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7470722Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7470994Z E           
2025-01-10T13:23:47.7471215Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7471663Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7472270Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7472605Z 
2025-01-10T13:23:47.7472912Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7473557Z 
2025-01-10T13:23:47.7473729Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7473986Z 
2025-01-10T13:23:47.7474211Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c17920>
2025-01-10T13:23:47.7474724Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>, attr = 'nu'
2025-01-10T13:23:47.7475015Z 
2025-01-10T13:23:47.7475156Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7475490Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7475772Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7475993Z         try:
2025-01-10T13:23:47.7476236Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7476546Z         except KeyError:
2025-01-10T13:23:47.7476818Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7477114Z     
2025-01-10T13:23:47.7477303Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7477549Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7477808Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7478109Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7478410Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7478653Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7478938Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7479130Z 
2025-01-10T13:23:47.7479264Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7479587Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7479929Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7480227Z     ???
2025-01-10T13:23:47.7480433Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7480638Z 
2025-01-10T13:23:47.7480709Z >   ???
2025-01-10T13:23:47.7480935Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7481210Z E   
2025-01-10T13:23:47.7481429Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7481749Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7482015Z E          ...
2025-01-10T13:23:47.7482213Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7482524Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7482852Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7483269Z E          ...
2025-01-10T13:23:47.7483570Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7484077Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7484601Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7484910Z 
2025-01-10T13:23:47.7485013Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7485505Z _______ TestPlasma.test_plasma_properties[ionization:lte-wavelength_cm] ________
2025-01-10T13:23:47.7485796Z 
2025-01-10T13:23:47.7485932Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7486273Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7486586Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7486896Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7487236Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7487542Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7487794Z err_msg = None
2025-01-10T13:23:47.7487909Z 
2025-01-10T13:23:47.7488020Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7488290Z         if err_msg is None:
2025-01-10T13:23:47.7488527Z             if left.shape != right.shape:
2025-01-10T13:23:47.7488906Z                 raise_assert_detail(
2025-01-10T13:23:47.7489214Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7489519Z                 )
2025-01-10T13:23:47.7489701Z     
2025-01-10T13:23:47.7489864Z             diff = 0
2025-01-10T13:23:47.7490093Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7490372Z                 # count up differences
2025-01-10T13:23:47.7490711Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7491048Z                     diff += 1
2025-01-10T13:23:47.7491258Z     
2025-01-10T13:23:47.7491439Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7491744Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7492128Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7492505Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7492774Z E           
2025-01-10T13:23:47.7492984Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7493560Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7494153Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7494490Z 
2025-01-10T13:23:47.7494797Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7495189Z 
2025-01-10T13:23:47.7495364Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7495615Z 
2025-01-10T13:23:47.7495841Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c17da0>
2025-01-10T13:23:47.7496315Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>
2025-01-10T13:23:47.7496642Z attr = 'wavelength_cm'
2025-01-10T13:23:47.7496768Z 
2025-01-10T13:23:47.7496916Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7497247Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7497527Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7497746Z         try:
2025-01-10T13:23:47.7497990Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7498291Z         except KeyError:
2025-01-10T13:23:47.7498562Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7498973Z     
2025-01-10T13:23:47.7499158Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7499407Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7499671Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7499971Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7500267Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7500632Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7501117Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7501493Z 
2025-01-10T13:23:47.7501709Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7502142Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7502493Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7502790Z     ???
2025-01-10T13:23:47.7502996Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7503301Z 
2025-01-10T13:23:47.7503548Z >   ???
2025-01-10T13:23:47.7503777Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7504053Z E   
2025-01-10T13:23:47.7504277Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7504599Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7504864Z E          ...
2025-01-10T13:23:47.7505061Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7505362Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7505691Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7505956Z E          ...
2025-01-10T13:23:47.7506152Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7506446Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7506756Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7506945Z 
2025-01-10T13:23:47.7507038Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7507377Z ____________ TestPlasma.test_plasma_properties[ionization:lte-f_lu] ____________
2025-01-10T13:23:47.7507654Z 
2025-01-10T13:23:47.7507789Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7508131Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7508448Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7508758Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7509100Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7509406Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7509657Z err_msg = None
2025-01-10T13:23:47.7509765Z 
2025-01-10T13:23:47.7509881Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7509972Z         if err_msg is None:
2025-01-10T13:23:47.7510072Z             if left.shape != right.shape:
2025-01-10T13:23:47.7510162Z                 raise_assert_detail(
2025-01-10T13:23:47.7510309Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7510389Z                 )
2025-01-10T13:23:47.7510462Z     
2025-01-10T13:23:47.7510542Z             diff = 0
2025-01-10T13:23:47.7510656Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7510751Z                 # count up differences
2025-01-10T13:23:47.7510920Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7511003Z                     diff += 1
2025-01-10T13:23:47.7511074Z     
2025-01-10T13:23:47.7511168Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7511304Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7511479Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7511720Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7511793Z E           
2025-01-10T13:23:47.7511912Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7512170Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7512432Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7512438Z 
2025-01-10T13:23:47.7512752Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7512830Z 
2025-01-10T13:23:47.7513002Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7513008Z 
2025-01-10T13:23:47.7513344Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c17fb0>
2025-01-10T13:23:47.7513549Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>, attr = 'f_lu'
2025-01-10T13:23:47.7513554Z 
2025-01-10T13:23:47.7513692Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7513806Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7513895Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7513969Z         try:
2025-01-10T13:23:47.7514116Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7514203Z         except KeyError:
2025-01-10T13:23:47.7514341Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7514420Z     
2025-01-10T13:23:47.7514513Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7514611Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7514701Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7514839Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7514926Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7515024Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7515137Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7515142Z 
2025-01-10T13:23:47.7515274Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7515387Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7515538Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7515614Z     ???
2025-01-10T13:23:47.7515723Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7515731Z 
2025-01-10T13:23:47.7515810Z >   ???
2025-01-10T13:23:47.7515937Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7516012Z E   
2025-01-10T13:23:47.7516142Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7516261Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7516335Z E          ...
2025-01-10T13:23:47.7516430Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7516560Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7516679Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7516755Z E          ...
2025-01-10T13:23:47.7516846Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7516977Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7517082Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7517087Z 
2025-01-10T13:23:47.7517328Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7517527Z ________ TestPlasma.test_plasma_properties[ionization:lte-tau_sobolevs] ________
2025-01-10T13:23:47.7517532Z 
2025-01-10T13:23:47.7517666Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7517793Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7517898Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7518029Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7518158Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7518257Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7518334Z err_msg = None
2025-01-10T13:23:47.7518338Z 
2025-01-10T13:23:47.7518452Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7518611Z         if err_msg is None:
2025-01-10T13:23:47.7518969Z             if left.shape != right.shape:
2025-01-10T13:23:47.7519118Z                 raise_assert_detail(
2025-01-10T13:23:47.7519373Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7519490Z                 )
2025-01-10T13:23:47.7519609Z     
2025-01-10T13:23:47.7519728Z             diff = 0
2025-01-10T13:23:47.7519918Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7520071Z                 # count up differences
2025-01-10T13:23:47.7520262Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7520349Z                     diff += 1
2025-01-10T13:23:47.7520421Z     
2025-01-10T13:23:47.7520516Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7520655Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7520831Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7520961Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7521038Z E           
2025-01-10T13:23:47.7521155Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7521422Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7521685Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7521690Z 
2025-01-10T13:23:47.7522008Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7522019Z 
2025-01-10T13:23:47.7522192Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7522198Z 
2025-01-10T13:23:47.7522419Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c168d0>
2025-01-10T13:23:47.7522592Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>
2025-01-10T13:23:47.7522675Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.7522680Z 
2025-01-10T13:23:47.7522820Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7522941Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7523175Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7523256Z         try:
2025-01-10T13:23:47.7523400Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7523486Z         except KeyError:
2025-01-10T13:23:47.7523624Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7523837Z     
2025-01-10T13:23:47.7523928Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7524028Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7524119Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7524255Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7524342Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7524439Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7524555Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7524628Z             else:
2025-01-10T13:23:47.7524730Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7524838Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7524843Z 
2025-01-10T13:23:47.7524977Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7525091Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7525246Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7525427Z     ???
2025-01-10T13:23:47.7525542Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7525547Z 
2025-01-10T13:23:47.7525618Z >   ???
2025-01-10T13:23:47.7525750Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7525825Z E   
2025-01-10T13:23:47.7525954Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7526071Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7526145Z E          ...
2025-01-10T13:23:47.7526239Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7526369Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7526489Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7526562Z E          ...
2025-01-10T13:23:47.7526654Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7526783Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7526896Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7526901Z 
2025-01-10T13:23:47.7526991Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7527190Z ________ TestPlasma.test_plasma_properties[ionization:lte-beta_sobolev] ________
2025-01-10T13:23:47.7527195Z 
2025-01-10T13:23:47.7527330Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7527460Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7527563Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7527699Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7527828Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7527926Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7528014Z err_msg = None
2025-01-10T13:23:47.7528019Z 
2025-01-10T13:23:47.7528132Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7528219Z         if err_msg is None:
2025-01-10T13:23:47.7528321Z             if left.shape != right.shape:
2025-01-10T13:23:47.7528405Z                 raise_assert_detail(
2025-01-10T13:23:47.7528554Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7528626Z                 )
2025-01-10T13:23:47.7528700Z     
2025-01-10T13:23:47.7528774Z             diff = 0
2025-01-10T13:23:47.7528890Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7528979Z                 # count up differences
2025-01-10T13:23:47.7529153Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7529230Z                     diff += 1
2025-01-10T13:23:47.7529305Z     
2025-01-10T13:23:47.7529486Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7529631Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7529805Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7529923Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7530000Z E           
2025-01-10T13:23:47.7530111Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7530372Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7530629Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7530717Z 
2025-01-10T13:23:47.7531019Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7531024Z 
2025-01-10T13:23:47.7531196Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7531201Z 
2025-01-10T13:23:47.7531423Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c17320>
2025-01-10T13:23:47.7531593Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>
2025-01-10T13:23:47.7531672Z attr = 'beta_sobolev'
2025-01-10T13:23:47.7531677Z 
2025-01-10T13:23:47.7531819Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7531935Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7532029Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7532111Z         try:
2025-01-10T13:23:47.7532255Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7532341Z         except KeyError:
2025-01-10T13:23:47.7532479Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7532553Z     
2025-01-10T13:23:47.7532641Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7532741Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7532835Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7532975Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7533166Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7533267Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7533378Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7533456Z             else:
2025-01-10T13:23:47.7533552Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7533664Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7533673Z 
2025-01-10T13:23:47.7533807Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7533921Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7534070Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7534143Z     ???
2025-01-10T13:23:47.7534256Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7534261Z 
2025-01-10T13:23:47.7534331Z >   ???
2025-01-10T13:23:47.7534462Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7534532Z E   
2025-01-10T13:23:47.7534664Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7534776Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7534858Z E          ...
2025-01-10T13:23:47.7534947Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7535081Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7535342Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7535415Z E          ...
2025-01-10T13:23:47.7535507Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7535632Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7535742Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7535747Z 
2025-01-10T13:23:47.7535836Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7536030Z __________ TestPlasma.test_plasma_properties[ionization:lte-j_blues] ___________
2025-01-10T13:23:47.7536034Z 
2025-01-10T13:23:47.7536162Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7536293Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7536395Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7536526Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7536883Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7537053Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7537191Z err_msg = None
2025-01-10T13:23:47.7537199Z 
2025-01-10T13:23:47.7537377Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7537519Z         if err_msg is None:
2025-01-10T13:23:47.7537670Z             if left.shape != right.shape:
2025-01-10T13:23:47.7537814Z                 raise_assert_detail(
2025-01-10T13:23:47.7538047Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7538179Z                 )
2025-01-10T13:23:47.7538260Z     
2025-01-10T13:23:47.7538336Z             diff = 0
2025-01-10T13:23:47.7538457Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7538547Z                 # count up differences
2025-01-10T13:23:47.7538735Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7538820Z                     diff += 1
2025-01-10T13:23:47.7538897Z     
2025-01-10T13:23:47.7538990Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7539133Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7539303Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7539421Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7539494Z E           
2025-01-10T13:23:47.7539615Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7539872Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7540140Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7540146Z 
2025-01-10T13:23:47.7540456Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7540461Z 
2025-01-10T13:23:47.7540631Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7540641Z 
2025-01-10T13:23:47.7540863Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c159d0>
2025-01-10T13:23:47.7541035Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef4bede7e0>
2025-01-10T13:23:47.7541111Z attr = 'j_blues'
2025-01-10T13:23:47.7541116Z 
2025-01-10T13:23:47.7541386Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7541509Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7541599Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7541672Z         try:
2025-01-10T13:23:47.7541817Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7541898Z         except KeyError:
2025-01-10T13:23:47.7542043Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7542113Z     
2025-01-10T13:23:47.7542205Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7542300Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7542393Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7542531Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7542618Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7542717Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7542828Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7542986Z             else:
2025-01-10T13:23:47.7543201Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7543320Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7543325Z 
2025-01-10T13:23:47.7543451Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7543570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7543714Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7543792Z     ???
2025-01-10T13:23:47.7543907Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7543912Z 
2025-01-10T13:23:47.7543985Z >   ???
2025-01-10T13:23:47.7544119Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7544190Z E   
2025-01-10T13:23:47.7544324Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7544436Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7544529Z E          ...
2025-01-10T13:23:47.7544620Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7544762Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7544875Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7544954Z E          ...
2025-01-10T13:23:47.7545041Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7545173Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7545284Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7545289Z 
2025-01-10T13:23:47.7545378Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7545568Z ___________ TestPlasma.test_plasma_properties[excitation:lte-lines] ____________
2025-01-10T13:23:47.7545573Z 
2025-01-10T13:23:47.7545698Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7545831Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7545937Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7546074Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7546198Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7546297Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7546378Z err_msg = None
2025-01-10T13:23:47.7546383Z 
2025-01-10T13:23:47.7546492Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7546578Z         if err_msg is None:
2025-01-10T13:23:47.7546673Z             if left.shape != right.shape:
2025-01-10T13:23:47.7546762Z                 raise_assert_detail(
2025-01-10T13:23:47.7546905Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7546986Z                 )
2025-01-10T13:23:47.7547187Z     
2025-01-10T13:23:47.7547273Z             diff = 0
2025-01-10T13:23:47.7547384Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7547478Z                 # count up differences
2025-01-10T13:23:47.7547647Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7547733Z                     diff += 1
2025-01-10T13:23:47.7547808Z     
2025-01-10T13:23:47.7547897Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7548039Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7548211Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7548332Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7548406Z E           
2025-01-10T13:23:47.7548524Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7548781Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7549162Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7549168Z 
2025-01-10T13:23:47.7549475Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7549480Z 
2025-01-10T13:23:47.7549649Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7549654Z 
2025-01-10T13:23:47.7549883Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c16cc0>
2025-01-10T13:23:47.7550055Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>
2025-01-10T13:23:47.7550137Z attr = 'lines'
2025-01-10T13:23:47.7550141Z 
2025-01-10T13:23:47.7550286Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7550402Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7550492Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7550564Z         try:
2025-01-10T13:23:47.7550713Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7550796Z         except KeyError:
2025-01-10T13:23:47.7550938Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7551009Z     
2025-01-10T13:23:47.7551106Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7551202Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7551299Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7551429Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7551529Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7551619Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7551737Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7551814Z             else:
2025-01-10T13:23:47.7551911Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7552023Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7552028Z 
2025-01-10T13:23:47.7552152Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7552270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7552422Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7552501Z     ???
2025-01-10T13:23:47.7552608Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7552613Z 
2025-01-10T13:23:47.7552689Z >   ???
2025-01-10T13:23:47.7552902Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7552983Z E   
2025-01-10T13:23:47.7553464Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7553599Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7553678Z E          ...
2025-01-10T13:23:47.7553974Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7554115Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7554231Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7554310Z E          ...
2025-01-10T13:23:47.7554397Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7554528Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7554635Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7554639Z 
2025-01-10T13:23:47.7554806Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7555164Z __ TestPlasma.test_plasma_properties[excitation:lte-lines_lower_level_index] ___
2025-01-10T13:23:47.7555362Z 
2025-01-10T13:23:47.7555840Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c169f0>
2025-01-10T13:23:47.7556245Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>
2025-01-10T13:23:47.7556435Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.7556443Z 
2025-01-10T13:23:47.7556759Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7556999Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7557412Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7557579Z         try:
2025-01-10T13:23:47.7557906Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7558083Z         except KeyError:
2025-01-10T13:23:47.7558382Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7558608Z     
2025-01-10T13:23:47.7558887Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7559097Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7559295Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7559466Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7559662Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7559858Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7571018Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7571043Z 
2025-01-10T13:23:47.7571216Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7571343Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7571350Z 
2025-01-10T13:23:47.7571494Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7571587Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7571697Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7571786Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7571947Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7572038Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7572147Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7572226Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7572307Z err_msg = None
2025-01-10T13:23:47.7572311Z 
2025-01-10T13:23:47.7572429Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7572514Z         if err_msg is None:
2025-01-10T13:23:47.7572611Z             if left.shape != right.shape:
2025-01-10T13:23:47.7572698Z                 raise_assert_detail(
2025-01-10T13:23:47.7572848Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7572922Z                 )
2025-01-10T13:23:47.7572993Z     
2025-01-10T13:23:47.7573218Z             diff = 0
2025-01-10T13:23:47.7573339Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7573615Z                 # count up differences
2025-01-10T13:23:47.7573932Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7574071Z                     diff += 1
2025-01-10T13:23:47.7574193Z     
2025-01-10T13:23:47.7574343Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7574571Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7574858Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7575028Z E           AssertionError: Series are different
2025-01-10T13:23:47.7575152Z E           
2025-01-10T13:23:47.7575304Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.7575673Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7576151Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7576481Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7576493Z 
2025-01-10T13:23:47.7576825Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7577037Z __ TestPlasma.test_plasma_properties[excitation:lte-lines_upper_level_index] ___
2025-01-10T13:23:47.7577043Z 
2025-01-10T13:23:47.7577272Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c143b0>
2025-01-10T13:23:47.7577448Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>
2025-01-10T13:23:47.7577542Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.7577547Z 
2025-01-10T13:23:47.7577691Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7577815Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7577904Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7577976Z         try:
2025-01-10T13:23:47.7578123Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7578204Z         except KeyError:
2025-01-10T13:23:47.7578351Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7578425Z     
2025-01-10T13:23:47.7578514Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7578607Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7578699Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7578834Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7578923Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7579012Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7579123Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7579129Z 
2025-01-10T13:23:47.7579257Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7579374Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7579379Z 
2025-01-10T13:23:47.7579515Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7579727Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7579845Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7579926Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7580068Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7580150Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7580258Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7580339Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7580418Z err_msg = None
2025-01-10T13:23:47.7580423Z 
2025-01-10T13:23:47.7580538Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7580623Z         if err_msg is None:
2025-01-10T13:23:47.7580723Z             if left.shape != right.shape:
2025-01-10T13:23:47.7580809Z                 raise_assert_detail(
2025-01-10T13:23:47.7580961Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7581121Z                 )
2025-01-10T13:23:47.7581195Z     
2025-01-10T13:23:47.7581275Z             diff = 0
2025-01-10T13:23:47.7581398Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7581487Z                 # count up differences
2025-01-10T13:23:47.7581662Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7581745Z                     diff += 1
2025-01-10T13:23:47.7581824Z     
2025-01-10T13:23:47.7581913Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7582060Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7582244Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7582353Z E           AssertionError: Series are different
2025-01-10T13:23:47.7582433Z E           
2025-01-10T13:23:47.7582541Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.7582919Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7583467Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7583849Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7583863Z 
2025-01-10T13:23:47.7584192Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7584380Z _____________ TestPlasma.test_plasma_properties[excitation:lte-nu] _____________
2025-01-10T13:23:47.7584393Z 
2025-01-10T13:23:47.7584525Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7584662Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7584762Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7584902Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7585194Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7585294Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7585372Z err_msg = None
2025-01-10T13:23:47.7585376Z 
2025-01-10T13:23:47.7585497Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7585580Z         if err_msg is None:
2025-01-10T13:23:47.7585684Z             if left.shape != right.shape:
2025-01-10T13:23:47.7585775Z                 raise_assert_detail(
2025-01-10T13:23:47.7585918Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7586000Z                 )
2025-01-10T13:23:47.7586071Z     
2025-01-10T13:23:47.7586154Z             diff = 0
2025-01-10T13:23:47.7586266Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7586361Z                 # count up differences
2025-01-10T13:23:47.7586535Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7586752Z                     diff += 1
2025-01-10T13:23:47.7586823Z     
2025-01-10T13:23:47.7586920Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7587061Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7587238Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7587353Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7587436Z E           
2025-01-10T13:23:47.7587555Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7587814Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7588090Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7588097Z 
2025-01-10T13:23:47.7588397Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7588409Z 
2025-01-10T13:23:47.7588582Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7588587Z 
2025-01-10T13:23:47.7588823Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c15640>
2025-01-10T13:23:47.7589021Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>, attr = 'nu'
2025-01-10T13:23:47.7589025Z 
2025-01-10T13:23:47.7589174Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7589300Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7589394Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7589466Z         try:
2025-01-10T13:23:47.7589615Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7589697Z         except KeyError:
2025-01-10T13:23:47.7589846Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7589922Z     
2025-01-10T13:23:47.7590010Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7590113Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7590203Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7590344Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7590432Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7590532Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7590644Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7590752Z 
2025-01-10T13:23:47.7590892Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7591006Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7591160Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7591238Z     ???
2025-01-10T13:23:47.7591349Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7591354Z 
2025-01-10T13:23:47.7591432Z >   ???
2025-01-10T13:23:47.7591560Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7591638Z E   
2025-01-10T13:23:47.7591766Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7591886Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7591962Z E          ...
2025-01-10T13:23:47.7592062Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7592281Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7592507Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7592789Z E          ...
2025-01-10T13:23:47.7592946Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7593292Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7593475Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7593482Z 
2025-01-10T13:23:47.7593632Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7593951Z _______ TestPlasma.test_plasma_properties[excitation:lte-wavelength_cm] ________
2025-01-10T13:23:47.7593958Z 
2025-01-10T13:23:47.7594096Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7594226Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7594332Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7594466Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7594606Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7594707Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7594785Z err_msg = None
2025-01-10T13:23:47.7594790Z 
2025-01-10T13:23:47.7594909Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7594990Z         if err_msg is None:
2025-01-10T13:23:47.7595091Z             if left.shape != right.shape:
2025-01-10T13:23:47.7595178Z                 raise_assert_detail(
2025-01-10T13:23:47.7595327Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7595399Z                 )
2025-01-10T13:23:47.7595474Z     
2025-01-10T13:23:47.7595548Z             diff = 0
2025-01-10T13:23:47.7595665Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7595755Z                 # count up differences
2025-01-10T13:23:47.7595931Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7596015Z                     diff += 1
2025-01-10T13:23:47.7596091Z     
2025-01-10T13:23:47.7596184Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7596322Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7596497Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7596610Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7596688Z E           
2025-01-10T13:23:47.7596802Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7597066Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7597474Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7597485Z 
2025-01-10T13:23:47.7597789Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7597795Z 
2025-01-10T13:23:47.7597973Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7597978Z 
2025-01-10T13:23:47.7598199Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c15280>
2025-01-10T13:23:47.7598372Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>
2025-01-10T13:23:47.7598455Z attr = 'wavelength_cm'
2025-01-10T13:23:47.7598465Z 
2025-01-10T13:23:47.7598608Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7598834Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7598919Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7598996Z         try:
2025-01-10T13:23:47.7599139Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7599226Z         except KeyError:
2025-01-10T13:23:47.7599364Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7599443Z     
2025-01-10T13:23:47.7599531Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7599631Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7599722Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7599860Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7599948Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7600045Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7600163Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7600180Z 
2025-01-10T13:23:47.7600305Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7600425Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7600572Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7600651Z     ???
2025-01-10T13:23:47.7600761Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7600767Z 
2025-01-10T13:23:47.7600843Z >   ???
2025-01-10T13:23:47.7600970Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7601049Z E   
2025-01-10T13:23:47.7601176Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7601295Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7601368Z E          ...
2025-01-10T13:23:47.7601501Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7601638Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7601761Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7601838Z E          ...
2025-01-10T13:23:47.7601924Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7602054Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7602160Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7602165Z 
2025-01-10T13:23:47.7602258Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7602450Z ____________ TestPlasma.test_plasma_properties[excitation:lte-f_lu] ____________
2025-01-10T13:23:47.7602454Z 
2025-01-10T13:23:47.7602585Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7602712Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7602814Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7603276Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7603420Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7603521Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7603599Z err_msg = None
2025-01-10T13:23:47.7603604Z 
2025-01-10T13:23:47.7603721Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7603803Z         if err_msg is None:
2025-01-10T13:23:47.7603906Z             if left.shape != right.shape:
2025-01-10T13:23:47.7603992Z                 raise_assert_detail(
2025-01-10T13:23:47.7604142Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7604219Z                 )
2025-01-10T13:23:47.7604289Z     
2025-01-10T13:23:47.7604366Z             diff = 0
2025-01-10T13:23:47.7604477Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7604571Z                 # count up differences
2025-01-10T13:23:47.7604746Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7604962Z                     diff += 1
2025-01-10T13:23:47.7605033Z     
2025-01-10T13:23:47.7605125Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7605263Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7605437Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7605549Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7605626Z E           
2025-01-10T13:23:47.7605737Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7605999Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7606277Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7606283Z 
2025-01-10T13:23:47.7606585Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7606590Z 
2025-01-10T13:23:47.7606762Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7606767Z 
2025-01-10T13:23:47.7606995Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c15760>
2025-01-10T13:23:47.7607192Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>, attr = 'f_lu'
2025-01-10T13:23:47.7607197Z 
2025-01-10T13:23:47.7607340Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7607459Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7607550Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7607624Z         try:
2025-01-10T13:23:47.7607769Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7607851Z         except KeyError:
2025-01-10T13:23:47.7607995Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7608066Z     
2025-01-10T13:23:47.7608160Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7608260Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7608352Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7608497Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7608586Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7608683Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7608794Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7608948Z 
2025-01-10T13:23:47.7609093Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7609206Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7609360Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7609432Z     ???
2025-01-10T13:23:47.7609545Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7609550Z 
2025-01-10T13:23:47.7609625Z >   ???
2025-01-10T13:23:47.7609751Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7609826Z E   
2025-01-10T13:23:47.7609954Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7610069Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7610142Z E          ...
2025-01-10T13:23:47.7610238Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7610371Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7610639Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7610770Z E          ...
2025-01-10T13:23:47.7610933Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7611153Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7611340Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7611348Z 
2025-01-10T13:23:47.7611500Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7611832Z ________ TestPlasma.test_plasma_properties[excitation:lte-tau_sobolevs] ________
2025-01-10T13:23:47.7611839Z 
2025-01-10T13:23:47.7612056Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7612269Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7612407Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7612545Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7612685Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7612782Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7612864Z err_msg = None
2025-01-10T13:23:47.7612869Z 
2025-01-10T13:23:47.7612986Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7613273Z         if err_msg is None:
2025-01-10T13:23:47.7613383Z             if left.shape != right.shape:
2025-01-10T13:23:47.7613471Z                 raise_assert_detail(
2025-01-10T13:23:47.7613620Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7613692Z                 )
2025-01-10T13:23:47.7613765Z     
2025-01-10T13:23:47.7613838Z             diff = 0
2025-01-10T13:23:47.7613954Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7614043Z                 # count up differences
2025-01-10T13:23:47.7614222Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7614308Z                     diff += 1
2025-01-10T13:23:47.7614385Z     
2025-01-10T13:23:47.7614474Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7614613Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7614787Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7614902Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7614982Z E           
2025-01-10T13:23:47.7615096Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7615357Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7615856Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7615868Z 
2025-01-10T13:23:47.7616177Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7616182Z 
2025-01-10T13:23:47.7616355Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7616360Z 
2025-01-10T13:23:47.7616593Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c15d00>
2025-01-10T13:23:47.7616763Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>
2025-01-10T13:23:47.7616843Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.7616857Z 
2025-01-10T13:23:47.7616998Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7617232Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7617318Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7617395Z         try:
2025-01-10T13:23:47.7617538Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7617625Z         except KeyError:
2025-01-10T13:23:47.7617762Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7617839Z     
2025-01-10T13:23:47.7617926Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7618028Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7618119Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7618256Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7618343Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7618442Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7618567Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7618656Z             else:
2025-01-10T13:23:47.7618759Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7618866Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7618871Z 
2025-01-10T13:23:47.7619003Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7619117Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7619267Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7619341Z     ???
2025-01-10T13:23:47.7619460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7619464Z 
2025-01-10T13:23:47.7619534Z >   ???
2025-01-10T13:23:47.7619665Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7619736Z E   
2025-01-10T13:23:47.7619870Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7619985Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7620067Z E          ...
2025-01-10T13:23:47.7620164Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7620295Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7620412Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7620484Z E          ...
2025-01-10T13:23:47.7620575Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7620704Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7620815Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7620820Z 
2025-01-10T13:23:47.7620908Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7621109Z ________ TestPlasma.test_plasma_properties[excitation:lte-beta_sobolev] ________
2025-01-10T13:23:47.7621114Z 
2025-01-10T13:23:47.7621244Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7621525Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7621635Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7621770Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7621898Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7621995Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7622076Z err_msg = None
2025-01-10T13:23:47.7622081Z 
2025-01-10T13:23:47.7622193Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7622281Z         if err_msg is None:
2025-01-10T13:23:47.7622381Z             if left.shape != right.shape:
2025-01-10T13:23:47.7622471Z                 raise_assert_detail(
2025-01-10T13:23:47.7622612Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7622698Z                 )
2025-01-10T13:23:47.7622772Z     
2025-01-10T13:23:47.7622927Z             diff = 0
2025-01-10T13:23:47.7623177Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7623272Z                 # count up differences
2025-01-10T13:23:47.7623447Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7623525Z                     diff += 1
2025-01-10T13:23:47.7623600Z     
2025-01-10T13:23:47.7623691Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7623840Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7624010Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7624128Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7624202Z E           
2025-01-10T13:23:47.7624324Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7624588Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7624858Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7624864Z 
2025-01-10T13:23:47.7625172Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7625178Z 
2025-01-10T13:23:47.7625353Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7625357Z 
2025-01-10T13:23:47.7625584Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c15ca0>
2025-01-10T13:23:47.7625761Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>
2025-01-10T13:23:47.7625842Z attr = 'beta_sobolev'
2025-01-10T13:23:47.7625847Z 
2025-01-10T13:23:47.7625990Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7626106Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7626196Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7626270Z         try:
2025-01-10T13:23:47.7626414Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7626496Z         except KeyError:
2025-01-10T13:23:47.7626638Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7626714Z     
2025-01-10T13:23:47.7626802Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7626906Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7626996Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7627264Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7627354Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7627449Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7627559Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7627639Z             else:
2025-01-10T13:23:47.7627734Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7627844Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7627849Z 
2025-01-10T13:23:47.7627972Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7628093Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7628241Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7628314Z     ???
2025-01-10T13:23:47.7628429Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7628434Z 
2025-01-10T13:23:47.7628501Z >   ???
2025-01-10T13:23:47.7628635Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7628818Z E   
2025-01-10T13:23:47.7628952Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7629063Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7629140Z E          ...
2025-01-10T13:23:47.7629229Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7629361Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7629474Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7629551Z E          ...
2025-01-10T13:23:47.7629639Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7629767Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7629877Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7629882Z 
2025-01-10T13:23:47.7629971Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7630163Z __________ TestPlasma.test_plasma_properties[excitation:lte-j_blues] ___________
2025-01-10T13:23:47.7630177Z 
2025-01-10T13:23:47.7630303Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7630439Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7630539Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7630677Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7630800Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7630900Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7630981Z err_msg = None
2025-01-10T13:23:47.7630986Z 
2025-01-10T13:23:47.7631095Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7631183Z         if err_msg is None:
2025-01-10T13:23:47.7631279Z             if left.shape != right.shape:
2025-01-10T13:23:47.7631374Z                 raise_assert_detail(
2025-01-10T13:23:47.7631521Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7631599Z                 )
2025-01-10T13:23:47.7631668Z     
2025-01-10T13:23:47.7631748Z             diff = 0
2025-01-10T13:23:47.7631859Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7631951Z                 # count up differences
2025-01-10T13:23:47.7632117Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7632202Z                     diff += 1
2025-01-10T13:23:47.7632277Z     
2025-01-10T13:23:47.7632366Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7632512Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7632681Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7632799Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7632986Z E           
2025-01-10T13:23:47.7633206Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7633463Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7633728Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7633733Z 
2025-01-10T13:23:47.7634036Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7634046Z 
2025-01-10T13:23:47.7634333Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7634338Z 
2025-01-10T13:23:47.7634563Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c15ac0>
2025-01-10T13:23:47.7634728Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34520260>
2025-01-10T13:23:47.7634815Z attr = 'j_blues'
2025-01-10T13:23:47.7634820Z 
2025-01-10T13:23:47.7634960Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7635075Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7635166Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7635238Z         try:
2025-01-10T13:23:47.7635384Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7635468Z         except KeyError:
2025-01-10T13:23:47.7635609Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7635681Z     
2025-01-10T13:23:47.7635779Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7635878Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7635977Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7636107Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7636200Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7636297Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7636408Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7636487Z             else:
2025-01-10T13:23:47.7636581Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7636691Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7636696Z 
2025-01-10T13:23:47.7636819Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7636937Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7637082Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7637164Z     ???
2025-01-10T13:23:47.7637279Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7637284Z 
2025-01-10T13:23:47.7637359Z >   ???
2025-01-10T13:23:47.7637524Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7637653Z E   
2025-01-10T13:23:47.7637888Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7638078Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7638208Z E          ...
2025-01-10T13:23:47.7638349Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7638567Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7638752Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7638876Z E          ...
2025-01-10T13:23:47.7639015Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7639235Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7639569Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7639581Z 
2025-01-10T13:23:47.7639681Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7639880Z ________ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines] ________
2025-01-10T13:23:47.7639889Z 
2025-01-10T13:23:47.7640017Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7640152Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7640249Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7640386Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7640509Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7640608Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7640693Z err_msg = None
2025-01-10T13:23:47.7640697Z 
2025-01-10T13:23:47.7640891Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7640978Z         if err_msg is None:
2025-01-10T13:23:47.7641074Z             if left.shape != right.shape:
2025-01-10T13:23:47.7641164Z                 raise_assert_detail(
2025-01-10T13:23:47.7641312Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7641388Z                 )
2025-01-10T13:23:47.7641459Z     
2025-01-10T13:23:47.7641538Z             diff = 0
2025-01-10T13:23:47.7641650Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7641744Z                 # count up differences
2025-01-10T13:23:47.7641913Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7642002Z                     diff += 1
2025-01-10T13:23:47.7642073Z     
2025-01-10T13:23:47.7642167Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7642307Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7642486Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7642602Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7642675Z E           
2025-01-10T13:23:47.7642793Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7643185Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7643451Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7643465Z 
2025-01-10T13:23:47.7643778Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7643783Z 
2025-01-10T13:23:47.7643948Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7643953Z 
2025-01-10T13:23:47.7644183Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c15df0>
2025-01-10T13:23:47.7644349Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>
2025-01-10T13:23:47.7644430Z attr = 'lines'
2025-01-10T13:23:47.7644434Z 
2025-01-10T13:23:47.7644571Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7644692Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7644775Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7644854Z         try:
2025-01-10T13:23:47.7644999Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7645217Z         except KeyError:
2025-01-10T13:23:47.7645360Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7645431Z     
2025-01-10T13:23:47.7645523Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7645618Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7645714Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7645846Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7645938Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7646028Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7646144Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7646217Z             else:
2025-01-10T13:23:47.7646316Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7646422Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7646432Z 
2025-01-10T13:23:47.7646557Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7646790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7646934Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7647012Z     ???
2025-01-10T13:23:47.7647122Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7647126Z 
2025-01-10T13:23:47.7647202Z >   ???
2025-01-10T13:23:47.7647327Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7647402Z E   
2025-01-10T13:23:47.7647529Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7647644Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7647716Z E          ...
2025-01-10T13:23:47.7647811Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7647940Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7648058Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7648143Z E          ...
2025-01-10T13:23:47.7648234Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7648365Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7648469Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7648473Z 
2025-01-10T13:23:47.7648567Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7648791Z _ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_lower_level_index] _
2025-01-10T13:23:47.7648796Z 
2025-01-10T13:23:47.7649019Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c166c0>
2025-01-10T13:23:47.7649182Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>
2025-01-10T13:23:47.7649277Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.7649282Z 
2025-01-10T13:23:47.7649423Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7649537Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7649634Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7649711Z         try:
2025-01-10T13:23:47.7649854Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7649936Z         except KeyError:
2025-01-10T13:23:47.7650080Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7650151Z     
2025-01-10T13:23:47.7650242Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7650338Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7650433Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7650564Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7650654Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7650749Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7650858Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7650863Z 
2025-01-10T13:23:47.7650992Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7651194Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7651203Z 
2025-01-10T13:23:47.7651343Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7651428Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7651542Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7651625Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7651768Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7651854Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7651966Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7652054Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7652133Z err_msg = None
2025-01-10T13:23:47.7652137Z 
2025-01-10T13:23:47.7652249Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7652335Z         if err_msg is None:
2025-01-10T13:23:47.7652544Z             if left.shape != right.shape:
2025-01-10T13:23:47.7652630Z                 raise_assert_detail(
2025-01-10T13:23:47.7652777Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7652849Z                 )
2025-01-10T13:23:47.7652924Z     
2025-01-10T13:23:47.7652998Z             diff = 0
2025-01-10T13:23:47.7653251Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7653344Z                 # count up differences
2025-01-10T13:23:47.7653514Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7653596Z                     diff += 1
2025-01-10T13:23:47.7653667Z     
2025-01-10T13:23:47.7653759Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7653892Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7654066Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7654181Z E           AssertionError: Series are different
2025-01-10T13:23:47.7654259Z E           
2025-01-10T13:23:47.7654360Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.7654727Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7655058Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7655389Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7655396Z 
2025-01-10T13:23:47.7655707Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7655979Z _ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_upper_level_index] _
2025-01-10T13:23:47.7655989Z 
2025-01-10T13:23:47.7656373Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c15790>
2025-01-10T13:23:47.7656670Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>
2025-01-10T13:23:47.7656937Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.7656947Z 
2025-01-10T13:23:47.7657099Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7657217Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7657309Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7657381Z         try:
2025-01-10T13:23:47.7657528Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7657610Z         except KeyError:
2025-01-10T13:23:47.7657753Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7657828Z     
2025-01-10T13:23:47.7657916Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7658017Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7658107Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7658246Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7658333Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7658434Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7658659Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7658664Z 
2025-01-10T13:23:47.7658802Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7658918Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7658923Z 
2025-01-10T13:23:47.7659065Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7659157Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7659266Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7659352Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7659490Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7659581Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7659686Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7659776Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7659862Z err_msg = None
2025-01-10T13:23:47.7659866Z 
2025-01-10T13:23:47.7659981Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7660064Z         if err_msg is None:
2025-01-10T13:23:47.7660163Z             if left.shape != right.shape:
2025-01-10T13:23:47.7660252Z                 raise_assert_detail(
2025-01-10T13:23:47.7660396Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7660479Z                 )
2025-01-10T13:23:47.7660551Z     
2025-01-10T13:23:47.7660632Z             diff = 0
2025-01-10T13:23:47.7660742Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7660834Z                 # count up differences
2025-01-10T13:23:47.7661002Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7661086Z                     diff += 1
2025-01-10T13:23:47.7661164Z     
2025-01-10T13:23:47.7661254Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7661394Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7661569Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7661674Z E           AssertionError: Series are different
2025-01-10T13:23:47.7661752Z E           
2025-01-10T13:23:47.7661859Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.7662223Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7662605Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7663216Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7663227Z 
2025-01-10T13:23:47.7663537Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7663741Z _________ TestPlasma.test_plasma_properties[excitation:dilute-lte-nu] __________
2025-01-10T13:23:47.7663860Z 
2025-01-10T13:23:47.7663991Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7664126Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7664232Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7664364Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7664490Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7664585Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7664667Z err_msg = None
2025-01-10T13:23:47.7664671Z 
2025-01-10T13:23:47.7664780Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7664866Z         if err_msg is None:
2025-01-10T13:23:47.7664967Z             if left.shape != right.shape:
2025-01-10T13:23:47.7665063Z                 raise_assert_detail(
2025-01-10T13:23:47.7665205Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7665285Z                 )
2025-01-10T13:23:47.7665359Z     
2025-01-10T13:23:47.7665433Z             diff = 0
2025-01-10T13:23:47.7665548Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7665637Z                 # count up differences
2025-01-10T13:23:47.7665808Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7665886Z                     diff += 1
2025-01-10T13:23:47.7665962Z     
2025-01-10T13:23:47.7666050Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7666189Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7666356Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7666474Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7666554Z E           
2025-01-10T13:23:47.7666671Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7666928Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7667194Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7667200Z 
2025-01-10T13:23:47.7667504Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7667631Z 
2025-01-10T13:23:47.7667806Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7667816Z 
2025-01-10T13:23:47.7668037Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c14830>
2025-01-10T13:23:47.7668239Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>, attr = 'nu'
2025-01-10T13:23:47.7668244Z 
2025-01-10T13:23:47.7668380Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7668501Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7668588Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7668664Z         try:
2025-01-10T13:23:47.7668804Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7668892Z         except KeyError:
2025-01-10T13:23:47.7669028Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7669104Z     
2025-01-10T13:23:47.7669195Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7669379Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7669473Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7669605Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7669696Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7669789Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7669904Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7669910Z 
2025-01-10T13:23:47.7670035Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7670153Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7670301Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7670379Z     ???
2025-01-10T13:23:47.7670488Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7670493Z 
2025-01-10T13:23:47.7670568Z >   ???
2025-01-10T13:23:47.7670705Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7670780Z E   
2025-01-10T13:23:47.7670913Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7671026Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7671104Z E          ...
2025-01-10T13:23:47.7671193Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7671327Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7671440Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7671521Z E          ...
2025-01-10T13:23:47.7671608Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7671740Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7671844Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7671849Z 
2025-01-10T13:23:47.7671945Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7672155Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-wavelength_cm] ____
2025-01-10T13:23:47.7672167Z 
2025-01-10T13:23:47.7672293Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7672430Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7672528Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7672667Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7672791Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7672890Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7672966Z err_msg = None
2025-01-10T13:23:47.7672970Z 
2025-01-10T13:23:47.7673191Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7673279Z         if err_msg is None:
2025-01-10T13:23:47.7673373Z             if left.shape != right.shape:
2025-01-10T13:23:47.7673603Z                 raise_assert_detail(
2025-01-10T13:23:47.7673868Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7674004Z                 )
2025-01-10T13:23:47.7674124Z     
2025-01-10T13:23:47.7674258Z             diff = 0
2025-01-10T13:23:47.7674441Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7674588Z                 # count up differences
2025-01-10T13:23:47.7674868Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7675003Z                     diff += 1
2025-01-10T13:23:47.7675111Z     
2025-01-10T13:23:47.7675211Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7675351Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7675526Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7675645Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7675889Z E           
2025-01-10T13:23:47.7676009Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7676266Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7676530Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7676536Z 
2025-01-10T13:23:47.7676847Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7676855Z 
2025-01-10T13:23:47.7677028Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7677033Z 
2025-01-10T13:23:47.7677261Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c14590>
2025-01-10T13:23:47.7677425Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>
2025-01-10T13:23:47.7677514Z attr = 'wavelength_cm'
2025-01-10T13:23:47.7677519Z 
2025-01-10T13:23:47.7677656Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7677781Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7677867Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7677945Z         try:
2025-01-10T13:23:47.7678092Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7678174Z         except KeyError:
2025-01-10T13:23:47.7678320Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7678393Z     
2025-01-10T13:23:47.7678494Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7678595Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7678690Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7678822Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7678921Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7679014Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7679130Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7679135Z 
2025-01-10T13:23:47.7679260Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7679379Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7679533Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7679605Z     ???
2025-01-10T13:23:47.7679720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7679725Z 
2025-01-10T13:23:47.7679891Z >   ???
2025-01-10T13:23:47.7680024Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7680098Z E   
2025-01-10T13:23:47.7680231Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7680342Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7680421Z E          ...
2025-01-10T13:23:47.7680509Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7680646Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7680758Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7680836Z E          ...
2025-01-10T13:23:47.7680928Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7681054Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7681165Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7681170Z 
2025-01-10T13:23:47.7681261Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7681466Z ________ TestPlasma.test_plasma_properties[excitation:dilute-lte-f_lu] _________
2025-01-10T13:23:47.7681563Z 
2025-01-10T13:23:47.7681695Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7681833Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7681932Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7682071Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7682205Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7682303Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7682386Z err_msg = None
2025-01-10T13:23:47.7682391Z 
2025-01-10T13:23:47.7682502Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7682589Z         if err_msg is None:
2025-01-10T13:23:47.7682688Z             if left.shape != right.shape:
2025-01-10T13:23:47.7682785Z                 raise_assert_detail(
2025-01-10T13:23:47.7682929Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7683009Z                 )
2025-01-10T13:23:47.7683249Z     
2025-01-10T13:23:47.7683330Z             diff = 0
2025-01-10T13:23:47.7683444Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7683538Z                 # count up differences
2025-01-10T13:23:47.7683711Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7683789Z                     diff += 1
2025-01-10T13:23:47.7683864Z     
2025-01-10T13:23:47.7683962Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7684106Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7684278Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7684404Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7684487Z E           
2025-01-10T13:23:47.7684606Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7684868Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7685130Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7685136Z 
2025-01-10T13:23:47.7685441Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7685586Z 
2025-01-10T13:23:47.7685758Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7685764Z 
2025-01-10T13:23:47.7685990Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c17140>
2025-01-10T13:23:47.7686200Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>, attr = 'f_lu'
2025-01-10T13:23:47.7686205Z 
2025-01-10T13:23:47.7686342Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7686463Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7686549Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7686627Z         try:
2025-01-10T13:23:47.7686766Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7686852Z         except KeyError:
2025-01-10T13:23:47.7686990Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7687065Z     
2025-01-10T13:23:47.7687157Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7687368Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7687458Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7687596Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7687688Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7687778Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7687896Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7687901Z 
2025-01-10T13:23:47.7688026Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7688141Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7688286Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7688363Z     ???
2025-01-10T13:23:47.7688472Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7688476Z 
2025-01-10T13:23:47.7688561Z >   ???
2025-01-10T13:23:47.7688688Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7688769Z E   
2025-01-10T13:23:47.7688898Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7689017Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7689096Z E          ...
2025-01-10T13:23:47.7689184Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7689319Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7689434Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7689513Z E          ...
2025-01-10T13:23:47.7689601Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7689732Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7689836Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7689841Z 
2025-01-10T13:23:47.7689935Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7690142Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-tau_sobolevs] _____
2025-01-10T13:23:47.7690149Z 
2025-01-10T13:23:47.7690286Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7690415Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7690513Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7690650Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7690773Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7690874Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7690950Z err_msg = None
2025-01-10T13:23:47.7690956Z 
2025-01-10T13:23:47.7691069Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7691152Z         if err_msg is None:
2025-01-10T13:23:47.7691344Z             if left.shape != right.shape:
2025-01-10T13:23:47.7691434Z                 raise_assert_detail(
2025-01-10T13:23:47.7691582Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7691659Z                 )
2025-01-10T13:23:47.7691729Z     
2025-01-10T13:23:47.7691807Z             diff = 0
2025-01-10T13:23:47.7691917Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7692012Z                 # count up differences
2025-01-10T13:23:47.7692179Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7692261Z                     diff += 1
2025-01-10T13:23:47.7692330Z     
2025-01-10T13:23:47.7692455Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7692695Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7692994Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7693322Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7693643Z E           
2025-01-10T13:23:47.7693830Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7694203Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7694470Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7694476Z 
2025-01-10T13:23:47.7694783Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7694803Z 
2025-01-10T13:23:47.7694971Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7694976Z 
2025-01-10T13:23:47.7695202Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d42ed0>
2025-01-10T13:23:47.7695368Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>
2025-01-10T13:23:47.7695453Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.7695459Z 
2025-01-10T13:23:47.7695596Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7695716Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7695801Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7695879Z         try:
2025-01-10T13:23:47.7696020Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7696106Z         except KeyError:
2025-01-10T13:23:47.7696249Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7696323Z     
2025-01-10T13:23:47.7696415Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7696517Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7696613Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7696743Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7696835Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7696926Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7697044Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7697117Z             else:
2025-01-10T13:23:47.7697216Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7697326Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7697331Z 
2025-01-10T13:23:47.7697459Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7697577Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7697720Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7697957Z     ???
2025-01-10T13:23:47.7698067Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7698072Z 
2025-01-10T13:23:47.7698148Z >   ???
2025-01-10T13:23:47.7698274Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7698350Z E   
2025-01-10T13:23:47.7698478Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7698593Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7698667Z E          ...
2025-01-10T13:23:47.7698760Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7698888Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7699008Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7699085Z E          ...
2025-01-10T13:23:47.7699173Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7699302Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7699492Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7699497Z 
2025-01-10T13:23:47.7699595Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7699797Z ____ TestPlasma.test_plasma_properties[excitation:dilute-lte-beta_sobolev] _____
2025-01-10T13:23:47.7699802Z 
2025-01-10T13:23:47.7699932Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7700060Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7700164Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7700296Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7700424Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7700527Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7700608Z err_msg = None
2025-01-10T13:23:47.7700617Z 
2025-01-10T13:23:47.7700732Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7700814Z         if err_msg is None:
2025-01-10T13:23:47.7700916Z             if left.shape != right.shape:
2025-01-10T13:23:47.7701001Z                 raise_assert_detail(
2025-01-10T13:23:47.7701150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7701223Z                 )
2025-01-10T13:23:47.7701299Z     
2025-01-10T13:23:47.7701375Z             diff = 0
2025-01-10T13:23:47.7701524Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7701611Z                 # count up differences
2025-01-10T13:23:47.7701793Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7701876Z                     diff += 1
2025-01-10T13:23:47.7701947Z     
2025-01-10T13:23:47.7702040Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7702180Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7702358Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7702471Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7702551Z E           
2025-01-10T13:23:47.7702669Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7702931Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7703328Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7703470Z 
2025-01-10T13:23:47.7703779Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7703785Z 
2025-01-10T13:23:47.7703966Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7703971Z 
2025-01-10T13:23:47.7704191Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d43170>
2025-01-10T13:23:47.7704360Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>
2025-01-10T13:23:47.7704445Z attr = 'beta_sobolev'
2025-01-10T13:23:47.7704450Z 
2025-01-10T13:23:47.7704586Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7704707Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7704791Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7704871Z         try:
2025-01-10T13:23:47.7705014Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7705209Z         except KeyError:
2025-01-10T13:23:47.7705346Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7705424Z     
2025-01-10T13:23:47.7705511Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7705615Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7705705Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7705841Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7705932Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7706023Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7706137Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7706211Z             else:
2025-01-10T13:23:47.7706311Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7706419Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7706423Z 
2025-01-10T13:23:47.7706557Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7706674Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7706824Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7706896Z     ???
2025-01-10T13:23:47.7707009Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7707014Z 
2025-01-10T13:23:47.7707090Z >   ???
2025-01-10T13:23:47.7707216Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7707291Z E   
2025-01-10T13:23:47.7707418Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7707534Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7707607Z E          ...
2025-01-10T13:23:47.7707699Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7707828Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7707950Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7708027Z E          ...
2025-01-10T13:23:47.7708119Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7708245Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7708355Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7708360Z 
2025-01-10T13:23:47.7708453Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7708655Z _______ TestPlasma.test_plasma_properties[excitation:dilute-lte-j_blues] _______
2025-01-10T13:23:47.7708660Z 
2025-01-10T13:23:47.7708791Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7708919Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7709024Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7709157Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7709377Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7709477Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7709560Z err_msg = None
2025-01-10T13:23:47.7709565Z 
2025-01-10T13:23:47.7709680Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7709763Z         if err_msg is None:
2025-01-10T13:23:47.7709863Z             if left.shape != right.shape:
2025-01-10T13:23:47.7709949Z                 raise_assert_detail(
2025-01-10T13:23:47.7710095Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7710166Z                 )
2025-01-10T13:23:47.7710240Z     
2025-01-10T13:23:47.7710314Z             diff = 0
2025-01-10T13:23:47.7710431Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7710519Z                 # count up differences
2025-01-10T13:23:47.7710696Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7710981Z                     diff += 1
2025-01-10T13:23:47.7711109Z     
2025-01-10T13:23:47.7711262Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7711497Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7711790Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7711973Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7712098Z E           
2025-01-10T13:23:47.7712278Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7712553Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7712818Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7712834Z 
2025-01-10T13:23:47.7713248Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7713254Z 
2025-01-10T13:23:47.7713427Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7713432Z 
2025-01-10T13:23:47.7713651Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d43110>
2025-01-10T13:23:47.7713821Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef384f27b0>
2025-01-10T13:23:47.7713901Z attr = 'j_blues'
2025-01-10T13:23:47.7713906Z 
2025-01-10T13:23:47.7714047Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7714168Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7714264Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7714343Z         try:
2025-01-10T13:23:47.7714482Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7714567Z         except KeyError:
2025-01-10T13:23:47.7714702Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7714778Z     
2025-01-10T13:23:47.7714863Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7714963Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7715051Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7715185Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7715271Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7715367Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7715476Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7715695Z             else:
2025-01-10T13:23:47.7715790Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7715907Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7715912Z 
2025-01-10T13:23:47.7716041Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7716154Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7716304Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7716375Z     ???
2025-01-10T13:23:47.7716490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7716495Z 
2025-01-10T13:23:47.7716564Z >   ???
2025-01-10T13:23:47.7716695Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7716765Z E   
2025-01-10T13:23:47.7716897Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7717006Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7717090Z E          ...
2025-01-10T13:23:47.7717178Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7717428Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7717545Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7717620Z E          ...
2025-01-10T13:23:47.7717713Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7717840Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7717952Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7717957Z 
2025-01-10T13:23:47.7718047Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7718296Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines] _
2025-01-10T13:23:47.7718302Z 
2025-01-10T13:23:47.7718427Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7718560Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7718675Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7718806Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7718936Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7719031Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7719113Z err_msg = None
2025-01-10T13:23:47.7719118Z 
2025-01-10T13:23:47.7719227Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7719316Z         if err_msg is None:
2025-01-10T13:23:47.7719412Z             if left.shape != right.shape:
2025-01-10T13:23:47.7719503Z                 raise_assert_detail(
2025-01-10T13:23:47.7719645Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7719723Z                 )
2025-01-10T13:23:47.7719798Z     
2025-01-10T13:23:47.7719877Z             diff = 0
2025-01-10T13:23:47.7720002Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7720091Z                 # count up differences
2025-01-10T13:23:47.7720264Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7720342Z                     diff += 1
2025-01-10T13:23:47.7720418Z     
2025-01-10T13:23:47.7720509Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7720648Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7720816Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7720934Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7721006Z E           
2025-01-10T13:23:47.7721125Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7721380Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7721757Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7721763Z 
2025-01-10T13:23:47.7722067Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7722073Z 
2025-01-10T13:23:47.7722241Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7722251Z 
2025-01-10T13:23:47.7722473Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d42750>
2025-01-10T13:23:47.7722649Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>
2025-01-10T13:23:47.7722803Z attr = 'lines'
2025-01-10T13:23:47.7722808Z 
2025-01-10T13:23:47.7722948Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7723173Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7723267Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7723340Z         try:
2025-01-10T13:23:47.7723486Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7723569Z         except KeyError:
2025-01-10T13:23:47.7723712Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7723782Z     
2025-01-10T13:23:47.7723876Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7723975Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7724063Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7724200Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7724291Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7724390Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7724500Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7724580Z             else:
2025-01-10T13:23:47.7724674Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7724786Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7724790Z 
2025-01-10T13:23:47.7724916Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7725034Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7725177Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7725254Z     ???
2025-01-10T13:23:47.7725369Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7725374Z 
2025-01-10T13:23:47.7725444Z >   ???
2025-01-10T13:23:47.7725575Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7725647Z E   
2025-01-10T13:23:47.7725783Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7725893Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7725970Z E          ...
2025-01-10T13:23:47.7726058Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7726191Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7726304Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7726382Z E          ...
2025-01-10T13:23:47.7726469Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7726599Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7726710Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7726715Z 
2025-01-10T13:23:47.7726804Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7727105Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index] _
2025-01-10T13:23:47.7727234Z 
2025-01-10T13:23:47.7727461Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d42180>
2025-01-10T13:23:47.7727633Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>
2025-01-10T13:23:47.7727721Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.7727726Z 
2025-01-10T13:23:47.7727866Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7727980Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7728071Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7728148Z         try:
2025-01-10T13:23:47.7728287Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7728372Z         except KeyError:
2025-01-10T13:23:47.7728509Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7728584Z     
2025-01-10T13:23:47.7728670Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7728770Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7728865Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7729135Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7729287Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7729461Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7729641Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7729648Z 
2025-01-10T13:23:47.7729863Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7730057Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7730065Z 
2025-01-10T13:23:47.7730287Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7730432Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7730605Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7730742Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7730941Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7731037Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7731145Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7731235Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7731313Z err_msg = None
2025-01-10T13:23:47.7731323Z 
2025-01-10T13:23:47.7731436Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7731521Z         if err_msg is None:
2025-01-10T13:23:47.7731615Z             if left.shape != right.shape:
2025-01-10T13:23:47.7731703Z                 raise_assert_detail(
2025-01-10T13:23:47.7731848Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7731930Z                 )
2025-01-10T13:23:47.7732001Z     
2025-01-10T13:23:47.7732080Z             diff = 0
2025-01-10T13:23:47.7732192Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7732289Z                 # count up differences
2025-01-10T13:23:47.7732461Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7732545Z                     diff += 1
2025-01-10T13:23:47.7732615Z     
2025-01-10T13:23:47.7732707Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7732852Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7733170Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7733284Z E           AssertionError: Series are different
2025-01-10T13:23:47.7733358Z E           
2025-01-10T13:23:47.7733465Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.7733829Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7734311Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7734642Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7734652Z 
2025-01-10T13:23:47.7734956Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7735361Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index] _
2025-01-10T13:23:47.7735366Z 
2025-01-10T13:23:47.7735591Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d42930>
2025-01-10T13:23:47.7735755Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>
2025-01-10T13:23:47.7735853Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.7735858Z 
2025-01-10T13:23:47.7735995Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7736115Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7736199Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7736276Z         try:
2025-01-10T13:23:47.7736415Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7736505Z         except KeyError:
2025-01-10T13:23:47.7736642Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7736725Z     
2025-01-10T13:23:47.7736812Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7736911Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7737005Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7737137Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7737229Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7737320Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7737437Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7737443Z 
2025-01-10T13:23:47.7737565Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7737682Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7737687Z 
2025-01-10T13:23:47.7737820Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7737915Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7738027Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7738115Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7738259Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7738345Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7738455Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7738536Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7738619Z err_msg = None
2025-01-10T13:23:47.7738624Z 
2025-01-10T13:23:47.7738732Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7738819Z         if err_msg is None:
2025-01-10T13:23:47.7738913Z             if left.shape != right.shape:
2025-01-10T13:23:47.7739004Z                 raise_assert_detail(
2025-01-10T13:23:47.7739146Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7739321Z                 )
2025-01-10T13:23:47.7739392Z     
2025-01-10T13:23:47.7739471Z             diff = 0
2025-01-10T13:23:47.7739588Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7739675Z                 # count up differences
2025-01-10T13:23:47.7739848Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7739927Z                     diff += 1
2025-01-10T13:23:47.7740002Z     
2025-01-10T13:23:47.7740089Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7740227Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7740396Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7740506Z E           AssertionError: Series are different
2025-01-10T13:23:47.7740578Z E           
2025-01-10T13:23:47.7740685Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.7741052Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7741537Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7741909Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7741923Z 
2025-01-10T13:23:47.7742230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7742469Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu] _
2025-01-10T13:23:47.7742474Z 
2025-01-10T13:23:47.7742608Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7742737Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7742839Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7742974Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7743233Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7743337Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7743415Z err_msg = None
2025-01-10T13:23:47.7743419Z 
2025-01-10T13:23:47.7743531Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7743613Z         if err_msg is None:
2025-01-10T13:23:47.7743716Z             if left.shape != right.shape:
2025-01-10T13:23:47.7743800Z                 raise_assert_detail(
2025-01-10T13:23:47.7743946Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7744020Z                 )
2025-01-10T13:23:47.7744096Z     
2025-01-10T13:23:47.7744172Z             diff = 0
2025-01-10T13:23:47.7744285Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7744372Z                 # count up differences
2025-01-10T13:23:47.7744668Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7744759Z                     diff += 1
2025-01-10T13:23:47.7744830Z     
2025-01-10T13:23:47.7744923Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7745058Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7745242Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7753990Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7754175Z E           
2025-01-10T13:23:47.7754388Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7754823Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7755291Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7755303Z 
2025-01-10T13:23:47.7755644Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7755650Z 
2025-01-10T13:23:47.7755836Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7755842Z 
2025-01-10T13:23:47.7756070Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d424e0>
2025-01-10T13:23:47.7756278Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>, attr = 'nu'
2025-01-10T13:23:47.7756282Z 
2025-01-10T13:23:47.7756431Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7756562Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7756657Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7756733Z         try:
2025-01-10T13:23:47.7756886Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7756969Z         except KeyError:
2025-01-10T13:23:47.7757113Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7757185Z     
2025-01-10T13:23:47.7757279Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7757375Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7757471Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7757608Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7757700Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7757791Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7757909Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7757919Z 
2025-01-10T13:23:47.7758056Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7758175Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7758334Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7758407Z     ???
2025-01-10T13:23:47.7758526Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7758531Z 
2025-01-10T13:23:47.7758601Z >   ???
2025-01-10T13:23:47.7758743Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7758813Z E   
2025-01-10T13:23:47.7758957Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7759069Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7759149Z E          ...
2025-01-10T13:23:47.7759245Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7759376Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7759630Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7759706Z E          ...
2025-01-10T13:23:47.7759798Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7759926Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7760039Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7760044Z 
2025-01-10T13:23:47.7760134Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7760415Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm] _
2025-01-10T13:23:47.7760421Z 
2025-01-10T13:23:47.7760554Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7760691Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7760797Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7760940Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7761201Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7761296Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7761377Z err_msg = None
2025-01-10T13:23:47.7761382Z 
2025-01-10T13:23:47.7761497Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7761587Z         if err_msg is None:
2025-01-10T13:23:47.7761684Z             if left.shape != right.shape:
2025-01-10T13:23:47.7761776Z                 raise_assert_detail(
2025-01-10T13:23:47.7761924Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7762005Z                 )
2025-01-10T13:23:47.7762081Z     
2025-01-10T13:23:47.7762156Z             diff = 0
2025-01-10T13:23:47.7762277Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7762367Z                 # count up differences
2025-01-10T13:23:47.7762553Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7762634Z                     diff += 1
2025-01-10T13:23:47.7762712Z     
2025-01-10T13:23:47.7762804Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7762945Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7763261Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7763388Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7763468Z E           
2025-01-10T13:23:47.7763590Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7763852Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7764125Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7764135Z 
2025-01-10T13:23:47.7764457Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7764462Z 
2025-01-10T13:23:47.7764727Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7764749Z 
2025-01-10T13:23:47.7765141Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d42090>
2025-01-10T13:23:47.7765433Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>
2025-01-10T13:23:47.7765570Z attr = 'wavelength_cm'
2025-01-10T13:23:47.7765745Z 
2025-01-10T13:23:47.7765988Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7766194Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7766324Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7766401Z         try:
2025-01-10T13:23:47.7766556Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7766640Z         except KeyError:
2025-01-10T13:23:47.7766787Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7766863Z     
2025-01-10T13:23:47.7766953Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7767056Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7767147Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7767286Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7767374Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7767474Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7767593Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7767725Z 
2025-01-10T13:23:47.7767860Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7767979Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7768137Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7768211Z     ???
2025-01-10T13:23:47.7768328Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7768333Z 
2025-01-10T13:23:47.7768408Z >   ???
2025-01-10T13:23:47.7768540Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7768616Z E   
2025-01-10T13:23:47.7768743Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7768861Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7768937Z E          ...
2025-01-10T13:23:47.7769033Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7769168Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7769294Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7769367Z E          ...
2025-01-10T13:23:47.7769458Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7769583Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7769697Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7769702Z 
2025-01-10T13:23:47.7769797Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7770034Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu] _
2025-01-10T13:23:47.7770039Z 
2025-01-10T13:23:47.7770176Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7770307Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7770412Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7770552Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7770687Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7770782Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7770865Z err_msg = None
2025-01-10T13:23:47.7770870Z 
2025-01-10T13:23:47.7770989Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7771072Z         if err_msg is None:
2025-01-10T13:23:47.7771176Z             if left.shape != right.shape:
2025-01-10T13:23:47.7771262Z                 raise_assert_detail(
2025-01-10T13:23:47.7771415Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7771488Z                 )
2025-01-10T13:23:47.7771564Z     
2025-01-10T13:23:47.7771638Z             diff = 0
2025-01-10T13:23:47.7771756Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7771936Z                 # count up differences
2025-01-10T13:23:47.7772118Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7772197Z                     diff += 1
2025-01-10T13:23:47.7772272Z     
2025-01-10T13:23:47.7772362Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7772503Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7772673Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7772793Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7772865Z E           
2025-01-10T13:23:47.7772987Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7773427Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7773861Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7773868Z 
2025-01-10T13:23:47.7774189Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7774194Z 
2025-01-10T13:23:47.7774368Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7774373Z 
2025-01-10T13:23:47.7774601Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d41d60>
2025-01-10T13:23:47.7774805Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>, attr = 'f_lu'
2025-01-10T13:23:47.7774818Z 
2025-01-10T13:23:47.7774956Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7775085Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7775171Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7775249Z         try:
2025-01-10T13:23:47.7775391Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7775480Z         except KeyError:
2025-01-10T13:23:47.7775618Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7775693Z     
2025-01-10T13:23:47.7775780Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7775880Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7775973Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7776114Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7776200Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7776294Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7776414Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7776422Z 
2025-01-10T13:23:47.7776549Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7776668Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7776817Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7776893Z     ???
2025-01-10T13:23:47.7777002Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7777007Z 
2025-01-10T13:23:47.7777083Z >   ???
2025-01-10T13:23:47.7777210Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7777287Z E   
2025-01-10T13:23:47.7777423Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7777540Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7777622Z E          ...
2025-01-10T13:23:47.7777710Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7777989Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7778107Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7778186Z E          ...
2025-01-10T13:23:47.7778273Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7778401Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7778507Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7778515Z 
2025-01-10T13:23:47.7778611Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7778882Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs] _
2025-01-10T13:23:47.7778888Z 
2025-01-10T13:23:47.7779022Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7779156Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7779256Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7779399Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7779607Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7779707Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7779784Z err_msg = None
2025-01-10T13:23:47.7779789Z 
2025-01-10T13:23:47.7779905Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7779987Z         if err_msg is None:
2025-01-10T13:23:47.7780090Z             if left.shape != right.shape:
2025-01-10T13:23:47.7780174Z                 raise_assert_detail(
2025-01-10T13:23:47.7780322Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7780399Z                 )
2025-01-10T13:23:47.7780469Z     
2025-01-10T13:23:47.7780548Z             diff = 0
2025-01-10T13:23:47.7780659Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7780757Z                 # count up differences
2025-01-10T13:23:47.7780932Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7781014Z                     diff += 1
2025-01-10T13:23:47.7781086Z     
2025-01-10T13:23:47.7781180Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7781316Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7781490Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7781607Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7781685Z E           
2025-01-10T13:23:47.7781804Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7782067Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7782338Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7782344Z 
2025-01-10T13:23:47.7782649Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7782662Z 
2025-01-10T13:23:47.7782885Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7782895Z 
2025-01-10T13:23:47.7783431Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d410a0>
2025-01-10T13:23:47.7783690Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>
2025-01-10T13:23:47.7783921Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.7783927Z 
2025-01-10T13:23:47.7784075Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7784203Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7784288Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7784365Z         try:
2025-01-10T13:23:47.7784504Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7784591Z         except KeyError:
2025-01-10T13:23:47.7784736Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7784807Z     
2025-01-10T13:23:47.7784900Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7784995Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7785088Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7785221Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7785313Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7785403Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7785526Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7785723Z             else:
2025-01-10T13:23:47.7785828Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7785941Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7785946Z 
2025-01-10T13:23:47.7786081Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7786194Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7786346Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7786423Z     ???
2025-01-10T13:23:47.7786532Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7786537Z 
2025-01-10T13:23:47.7786611Z >   ???
2025-01-10T13:23:47.7786737Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7786813Z E   
2025-01-10T13:23:47.7786938Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7787059Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7787137Z E          ...
2025-01-10T13:23:47.7787231Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7787362Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7787481Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7787562Z E          ...
2025-01-10T13:23:47.7787650Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7787781Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7787886Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7787891Z 
2025-01-10T13:23:47.7787985Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7788251Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev] _
2025-01-10T13:23:47.7788256Z 
2025-01-10T13:23:47.7788392Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7788526Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7788628Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7788760Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7788889Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7788991Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7789066Z err_msg = None
2025-01-10T13:23:47.7789071Z 
2025-01-10T13:23:47.7789186Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7789267Z         if err_msg is None:
2025-01-10T13:23:47.7789370Z             if left.shape != right.shape:
2025-01-10T13:23:47.7789455Z                 raise_assert_detail(
2025-01-10T13:23:47.7789601Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7789768Z                 )
2025-01-10T13:23:47.7789846Z     
2025-01-10T13:23:47.7789920Z             diff = 0
2025-01-10T13:23:47.7790034Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7790121Z                 # count up differences
2025-01-10T13:23:47.7790293Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7790376Z                     diff += 1
2025-01-10T13:23:47.7790447Z     
2025-01-10T13:23:47.7790540Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7790675Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7790847Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7790957Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7791033Z E           
2025-01-10T13:23:47.7791147Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7791414Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7791764Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7791770Z 
2025-01-10T13:23:47.7792072Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7792078Z 
2025-01-10T13:23:47.7792249Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7792258Z 
2025-01-10T13:23:47.7792477Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d40950>
2025-01-10T13:23:47.7792660Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>
2025-01-10T13:23:47.7792746Z attr = 'beta_sobolev'
2025-01-10T13:23:47.7792751Z 
2025-01-10T13:23:47.7792887Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7793010Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7793247Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7793324Z         try:
2025-01-10T13:23:47.7793461Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7793547Z         except KeyError:
2025-01-10T13:23:47.7793683Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7793761Z     
2025-01-10T13:23:47.7793850Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7793950Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7794045Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7794185Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7794506Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7794597Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7794714Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7794788Z             else:
2025-01-10T13:23:47.7794889Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7794995Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7795000Z 
2025-01-10T13:23:47.7795129Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7795241Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7795395Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7795467Z     ???
2025-01-10T13:23:47.7795589Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7795736Z 
2025-01-10T13:23:47.7795819Z >   ???
2025-01-10T13:23:47.7795948Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7796023Z E   
2025-01-10T13:23:47.7796151Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7796268Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7796341Z E          ...
2025-01-10T13:23:47.7796435Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7796561Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7796678Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7796750Z E          ...
2025-01-10T13:23:47.7796843Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7796969Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7797080Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7797085Z 
2025-01-10T13:23:47.7797185Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7797547Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues] _
2025-01-10T13:23:47.7797553Z 
2025-01-10T13:23:47.7797686Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7797812Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7797916Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7798047Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7798173Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7798273Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7798348Z err_msg = None
2025-01-10T13:23:47.7798353Z 
2025-01-10T13:23:47.7798466Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7798553Z         if err_msg is None:
2025-01-10T13:23:47.7798657Z             if left.shape != right.shape:
2025-01-10T13:23:47.7798741Z                 raise_assert_detail(
2025-01-10T13:23:47.7798890Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7798963Z                 )
2025-01-10T13:23:47.7799037Z     
2025-01-10T13:23:47.7799111Z             diff = 0
2025-01-10T13:23:47.7799225Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7799313Z                 # count up differences
2025-01-10T13:23:47.7799486Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7799564Z                     diff += 1
2025-01-10T13:23:47.7799639Z     
2025-01-10T13:23:47.7799733Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7799868Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7800042Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7800162Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7800239Z E           
2025-01-10T13:23:47.7800353Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7800613Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7800871Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7800883Z 
2025-01-10T13:23:47.7801277Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7801287Z 
2025-01-10T13:23:47.7801488Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7801494Z 
2025-01-10T13:23:47.7801748Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d415e0>
2025-01-10T13:23:47.7802038Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348cc770>
2025-01-10T13:23:47.7802161Z attr = 'j_blues'
2025-01-10T13:23:47.7802177Z 
2025-01-10T13:23:47.7802407Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7802615Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7802758Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7802884Z         try:
2025-01-10T13:23:47.7803252Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7803391Z         except KeyError:
2025-01-10T13:23:47.7803617Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7803919Z     
2025-01-10T13:23:47.7804016Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7804119Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7804209Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7804349Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7804436Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7804534Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7804646Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7804725Z             else:
2025-01-10T13:23:47.7804826Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7804932Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7804937Z 
2025-01-10T13:23:47.7805069Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7805186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7805340Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7805419Z     ???
2025-01-10T13:23:47.7805534Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7805539Z 
2025-01-10T13:23:47.7805610Z >   ???
2025-01-10T13:23:47.7805738Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7805808Z E   
2025-01-10T13:23:47.7805940Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7806055Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7806129Z E          ...
2025-01-10T13:23:47.7806224Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7806354Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7806475Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7806548Z E          ...
2025-01-10T13:23:47.7806644Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7806772Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7806884Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7806889Z 
2025-01-10T13:23:47.7806981Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7807190Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines] ____
2025-01-10T13:23:47.7807194Z 
2025-01-10T13:23:47.7807327Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7807458Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7807561Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7807693Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7807821Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7808046Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7808132Z err_msg = None
2025-01-10T13:23:47.7808136Z 
2025-01-10T13:23:47.7808247Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7808334Z         if err_msg is None:
2025-01-10T13:23:47.7808430Z             if left.shape != right.shape:
2025-01-10T13:23:47.7808521Z                 raise_assert_detail(
2025-01-10T13:23:47.7808669Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7808742Z                 )
2025-01-10T13:23:47.7808816Z     
2025-01-10T13:23:47.7808890Z             diff = 0
2025-01-10T13:23:47.7809004Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7809092Z                 # count up differences
2025-01-10T13:23:47.7809266Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7809344Z                     diff += 1
2025-01-10T13:23:47.7809422Z     
2025-01-10T13:23:47.7809516Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7809737Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7809905Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7810024Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7810101Z E           
2025-01-10T13:23:47.7810213Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7810475Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7810731Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7810745Z 
2025-01-10T13:23:47.7811051Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7811056Z 
2025-01-10T13:23:47.7811228Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7811233Z 
2025-01-10T13:23:47.7811454Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d40e00>
2025-01-10T13:23:47.7811626Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>
2025-01-10T13:23:47.7811702Z attr = 'lines'
2025-01-10T13:23:47.7811707Z 
2025-01-10T13:23:47.7811846Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7811960Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7812050Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7812127Z         try:
2025-01-10T13:23:47.7812270Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7812360Z         except KeyError:
2025-01-10T13:23:47.7812497Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7812576Z     
2025-01-10T13:23:47.7812664Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7812763Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7812851Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7812988Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7813220Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7813325Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7813438Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7813518Z             else:
2025-01-10T13:23:47.7813616Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7813726Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7813852Z 
2025-01-10T13:23:47.7813986Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7814106Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7814258Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7814331Z     ???
2025-01-10T13:23:47.7814446Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7814450Z 
2025-01-10T13:23:47.7814521Z >   ???
2025-01-10T13:23:47.7814652Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7814723Z E   
2025-01-10T13:23:47.7814853Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7814964Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7815043Z E          ...
2025-01-10T13:23:47.7815130Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7815262Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7815380Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7815571Z E          ...
2025-01-10T13:23:47.7815663Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7815786Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7815896Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7815901Z 
2025-01-10T13:23:47.7815992Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7816250Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index] _
2025-01-10T13:23:47.7816255Z 
2025-01-10T13:23:47.7816473Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d41610>
2025-01-10T13:23:47.7816643Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>
2025-01-10T13:23:47.7816733Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.7816743Z 
2025-01-10T13:23:47.7816879Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7817007Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7817098Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7817176Z         try:
2025-01-10T13:23:47.7817316Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7817402Z         except KeyError:
2025-01-10T13:23:47.7817539Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7817614Z     
2025-01-10T13:23:47.7817701Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7817801Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7817891Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7818028Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7818114Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7818210Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7818320Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7818333Z 
2025-01-10T13:23:47.7818458Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7818578Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7818583Z 
2025-01-10T13:23:47.7818716Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7818806Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7818914Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7819000Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7819139Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7819226Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7819330Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7819415Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7819498Z err_msg = None
2025-01-10T13:23:47.7819646Z 
2025-01-10T13:23:47.7819759Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7819849Z         if err_msg is None:
2025-01-10T13:23:47.7819946Z             if left.shape != right.shape:
2025-01-10T13:23:47.7820036Z                 raise_assert_detail(
2025-01-10T13:23:47.7820179Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7820257Z                 )
2025-01-10T13:23:47.7820326Z     
2025-01-10T13:23:47.7820406Z             diff = 0
2025-01-10T13:23:47.7820516Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7820610Z                 # count up differences
2025-01-10T13:23:47.7820857Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7821005Z                     diff += 1
2025-01-10T13:23:47.7821132Z     
2025-01-10T13:23:47.7821283Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7821512Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7821924Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7822096Z E           AssertionError: Series are different
2025-01-10T13:23:47.7822224Z E           
2025-01-10T13:23:47.7822354Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.7822720Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7823161Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7823504Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7823511Z 
2025-01-10T13:23:47.7823820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7824074Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index] _
2025-01-10T13:23:47.7824079Z 
2025-01-10T13:23:47.7824306Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61d41a30>
2025-01-10T13:23:47.7824480Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>
2025-01-10T13:23:47.7824582Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.7824587Z 
2025-01-10T13:23:47.7824724Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7824845Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7824930Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7825007Z         try:
2025-01-10T13:23:47.7825148Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7825235Z         except KeyError:
2025-01-10T13:23:47.7825373Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7825449Z     
2025-01-10T13:23:47.7825541Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7825636Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7825730Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7825864Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7826083Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7826182Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7826296Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7826301Z 
2025-01-10T13:23:47.7826426Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7826543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7826548Z 
2025-01-10T13:23:47.7826683Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7826773Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7826884Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7826965Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7827109Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7827192Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7827305Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7827496Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7827576Z err_msg = None
2025-01-10T13:23:47.7827581Z 
2025-01-10T13:23:47.7827692Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7827779Z         if err_msg is None:
2025-01-10T13:23:47.7827874Z             if left.shape != right.shape:
2025-01-10T13:23:47.7827964Z                 raise_assert_detail(
2025-01-10T13:23:47.7828106Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7828185Z                 )
2025-01-10T13:23:47.7828260Z     
2025-01-10T13:23:47.7828333Z             diff = 0
2025-01-10T13:23:47.7828448Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7828536Z                 # count up differences
2025-01-10T13:23:47.7828713Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7828799Z                     diff += 1
2025-01-10T13:23:47.7828880Z     
2025-01-10T13:23:47.7828968Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7829111Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7829278Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7829387Z E           AssertionError: Series are different
2025-01-10T13:23:47.7829460Z E           
2025-01-10T13:23:47.7829573Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.7829945Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7830316Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7830693Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7830699Z 
2025-01-10T13:23:47.7831008Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7831307Z _____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-nu] ______
2025-01-10T13:23:47.7831312Z 
2025-01-10T13:23:47.7831444Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7831571Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7831683Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7831819Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7831942Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7832042Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7832119Z err_msg = None
2025-01-10T13:23:47.7832123Z 
2025-01-10T13:23:47.7832234Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7832320Z         if err_msg is None:
2025-01-10T13:23:47.7832497Z             if left.shape != right.shape:
2025-01-10T13:23:47.7832583Z                 raise_assert_detail(
2025-01-10T13:23:47.7832729Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7832803Z                 )
2025-01-10T13:23:47.7832877Z     
2025-01-10T13:23:47.7832953Z             diff = 0
2025-01-10T13:23:47.7833199Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7833295Z                 # count up differences
2025-01-10T13:23:47.7833461Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7833544Z                     diff += 1
2025-01-10T13:23:47.7833613Z     
2025-01-10T13:23:47.7833706Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7833838Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7834010Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7834133Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7834211Z E           
2025-01-10T13:23:47.7834326Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7834587Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7834850Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7834856Z 
2025-01-10T13:23:47.7835154Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7835162Z 
2025-01-10T13:23:47.7835335Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7835340Z 
2025-01-10T13:23:47.7835564Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd4da0>
2025-01-10T13:23:47.7835764Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>, attr = 'nu'
2025-01-10T13:23:47.7835769Z 
2025-01-10T13:23:47.7835910Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7836027Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7836117Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7836189Z         try:
2025-01-10T13:23:47.7836334Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7836418Z         except KeyError:
2025-01-10T13:23:47.7836560Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7836776Z     
2025-01-10T13:23:47.7836871Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7836966Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7837063Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7837199Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7837284Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7837379Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7837489Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7837494Z 
2025-01-10T13:23:47.7837622Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7837735Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7837886Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7837960Z     ???
2025-01-10T13:23:47.7838074Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7838084Z 
2025-01-10T13:23:47.7838416Z >   ???
2025-01-10T13:23:47.7838658Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7838788Z E   
2025-01-10T13:23:47.7838995Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7839119Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7839194Z E          ...
2025-01-10T13:23:47.7839294Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7839428Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7839551Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7839624Z E          ...
2025-01-10T13:23:47.7839716Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7839843Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7839959Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7839971Z 
2025-01-10T13:23:47.7840062Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7840296Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-wavelength_cm] _
2025-01-10T13:23:47.7840301Z 
2025-01-10T13:23:47.7840437Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7840564Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7840668Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7840801Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7840929Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7841024Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7841106Z err_msg = None
2025-01-10T13:23:47.7841111Z 
2025-01-10T13:23:47.7841224Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7841316Z         if err_msg is None:
2025-01-10T13:23:47.7841421Z             if left.shape != right.shape:
2025-01-10T13:23:47.7841508Z                 raise_assert_detail(
2025-01-10T13:23:47.7841658Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7841730Z                 )
2025-01-10T13:23:47.7841805Z     
2025-01-10T13:23:47.7841879Z             diff = 0
2025-01-10T13:23:47.7841997Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7842087Z                 # count up differences
2025-01-10T13:23:47.7842260Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7842341Z                     diff += 1
2025-01-10T13:23:47.7842416Z     
2025-01-10T13:23:47.7842507Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7842648Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7842817Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7843175Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7843257Z E           
2025-01-10T13:23:47.7843372Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7843633Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7843890Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7843896Z 
2025-01-10T13:23:47.7844209Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7844331Z 
2025-01-10T13:23:47.7844509Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7844515Z 
2025-01-10T13:23:47.7844737Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd51f0>
2025-01-10T13:23:47.7844909Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>
2025-01-10T13:23:47.7844991Z attr = 'wavelength_cm'
2025-01-10T13:23:47.7844996Z 
2025-01-10T13:23:47.7845137Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7845253Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7845343Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7845415Z         try:
2025-01-10T13:23:47.7845560Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7845647Z         except KeyError:
2025-01-10T13:23:47.7845792Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7845872Z     
2025-01-10T13:23:47.7845960Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7846059Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7846150Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7846288Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7846375Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7846472Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7846584Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7846589Z 
2025-01-10T13:23:47.7846718Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7846832Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7846984Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7847064Z     ???
2025-01-10T13:23:47.7847173Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7847185Z 
2025-01-10T13:23:47.7847262Z >   ???
2025-01-10T13:23:47.7847390Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7847465Z E   
2025-01-10T13:23:47.7847595Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7847713Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7847786Z E          ...
2025-01-10T13:23:47.7847880Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7848012Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7848131Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7848204Z E          ...
2025-01-10T13:23:47.7848298Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7848429Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7848534Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7848656Z 
2025-01-10T13:23:47.7848755Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7848964Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-f_lu] _____
2025-01-10T13:23:47.7848969Z 
2025-01-10T13:23:47.7849103Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7849230Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7849333Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7849464Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7849592Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7849696Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7849774Z err_msg = None
2025-01-10T13:23:47.7849778Z 
2025-01-10T13:23:47.7849898Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7849988Z         if err_msg is None:
2025-01-10T13:23:47.7850172Z             if left.shape != right.shape:
2025-01-10T13:23:47.7850258Z                 raise_assert_detail(
2025-01-10T13:23:47.7850411Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7850483Z                 )
2025-01-10T13:23:47.7850560Z     
2025-01-10T13:23:47.7850634Z             diff = 0
2025-01-10T13:23:47.7850752Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7850842Z                 # count up differences
2025-01-10T13:23:47.7851015Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7851103Z                     diff += 1
2025-01-10T13:23:47.7851175Z     
2025-01-10T13:23:47.7851270Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7851407Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7851582Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7851700Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7851779Z E           
2025-01-10T13:23:47.7851892Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7852153Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7852414Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7852427Z 
2025-01-10T13:23:47.7852731Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7852743Z 
2025-01-10T13:23:47.7852915Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7852920Z 
2025-01-10T13:23:47.7853252Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd5280>
2025-01-10T13:23:47.7853458Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>, attr = 'f_lu'
2025-01-10T13:23:47.7853463Z 
2025-01-10T13:23:47.7853605Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7853722Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7853811Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7853883Z         try:
2025-01-10T13:23:47.7854028Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7854110Z         except KeyError:
2025-01-10T13:23:47.7854251Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7854459Z     
2025-01-10T13:23:47.7854552Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7854645Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7854742Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7854874Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7854966Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7855057Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7855173Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7855178Z 
2025-01-10T13:23:47.7855307Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7855419Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7855569Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7855642Z     ???
2025-01-10T13:23:47.7855756Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7855873Z 
2025-01-10T13:23:47.7855947Z >   ???
2025-01-10T13:23:47.7856080Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7856152Z E   
2025-01-10T13:23:47.7856366Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7856566Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7856692Z E          ...
2025-01-10T13:23:47.7856850Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7857066Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7857257Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7857374Z E          ...
2025-01-10T13:23:47.7857520Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7857729Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7857885Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7857901Z 
2025-01-10T13:23:47.7857993Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7858220Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs] _
2025-01-10T13:23:47.7858226Z 
2025-01-10T13:23:47.7858351Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7858486Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7858589Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7858721Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7858849Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7858944Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7859026Z err_msg = None
2025-01-10T13:23:47.7859030Z 
2025-01-10T13:23:47.7859140Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7859230Z         if err_msg is None:
2025-01-10T13:23:47.7859329Z             if left.shape != right.shape:
2025-01-10T13:23:47.7859421Z                 raise_assert_detail(
2025-01-10T13:23:47.7859571Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7859645Z                 )
2025-01-10T13:23:47.7859721Z     
2025-01-10T13:23:47.7859795Z             diff = 0
2025-01-10T13:23:47.7859913Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7860001Z                 # count up differences
2025-01-10T13:23:47.7860175Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7860254Z                     diff += 1
2025-01-10T13:23:47.7860329Z     
2025-01-10T13:23:47.7860419Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7860560Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7860726Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7860966Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7861040Z E           
2025-01-10T13:23:47.7861158Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7861420Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7861679Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7861689Z 
2025-01-10T13:23:47.7861994Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7862092Z 
2025-01-10T13:23:47.7862267Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7862272Z 
2025-01-10T13:23:47.7862493Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd77d0>
2025-01-10T13:23:47.7862665Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>
2025-01-10T13:23:47.7862745Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.7862750Z 
2025-01-10T13:23:47.7862898Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7863147Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7863245Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7863319Z         try:
2025-01-10T13:23:47.7863467Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7863548Z         except KeyError:
2025-01-10T13:23:47.7863696Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7863777Z     
2025-01-10T13:23:47.7863864Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7863966Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7864056Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7864193Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7864281Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7864376Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7864486Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7864564Z             else:
2025-01-10T13:23:47.7864659Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7864771Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7864776Z 
2025-01-10T13:23:47.7864902Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7865020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7865176Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7865248Z     ???
2025-01-10T13:23:47.7865360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7865365Z 
2025-01-10T13:23:47.7865435Z >   ???
2025-01-10T13:23:47.7865568Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7865638Z E   
2025-01-10T13:23:47.7865776Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7865887Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7865967Z E          ...
2025-01-10T13:23:47.7866055Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7866192Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7866305Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7866383Z E          ...
2025-01-10T13:23:47.7866609Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7866746Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7866860Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7866865Z 
2025-01-10T13:23:47.7866957Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7867175Z _ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-beta_sobolev] _
2025-01-10T13:23:47.7867180Z 
2025-01-10T13:23:47.7867307Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7867437Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7867533Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7867669Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7867799Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7867898Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7868092Z err_msg = None
2025-01-10T13:23:47.7868097Z 
2025-01-10T13:23:47.7868208Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7868295Z         if err_msg is None:
2025-01-10T13:23:47.7868391Z             if left.shape != right.shape:
2025-01-10T13:23:47.7868480Z                 raise_assert_detail(
2025-01-10T13:23:47.7868622Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7868701Z                 )
2025-01-10T13:23:47.7868772Z     
2025-01-10T13:23:47.7868851Z             diff = 0
2025-01-10T13:23:47.7868964Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7869058Z                 # count up differences
2025-01-10T13:23:47.7869235Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7869314Z                     diff += 1
2025-01-10T13:23:47.7869394Z     
2025-01-10T13:23:47.7869483Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7869631Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7869797Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7869916Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7869988Z E           
2025-01-10T13:23:47.7870105Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7870357Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7870621Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7870638Z 
2025-01-10T13:23:47.7870942Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7870947Z 
2025-01-10T13:23:47.7871114Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7871119Z 
2025-01-10T13:23:47.7871344Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd6720>
2025-01-10T13:23:47.7871510Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>
2025-01-10T13:23:47.7871599Z attr = 'beta_sobolev'
2025-01-10T13:23:47.7871604Z 
2025-01-10T13:23:47.7871746Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7871862Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7872041Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7872118Z         try:
2025-01-10T13:23:47.7872263Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7872345Z         except KeyError:
2025-01-10T13:23:47.7872487Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7872557Z     
2025-01-10T13:23:47.7872649Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7872745Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7872840Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7872980Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7873198Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7873296Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7873408Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7873486Z             else:
2025-01-10T13:23:47.7873581Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7873699Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7873822Z 
2025-01-10T13:23:47.7873951Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7874070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7874216Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7874293Z     ???
2025-01-10T13:23:47.7874403Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7874408Z 
2025-01-10T13:23:47.7874497Z >   ???
2025-01-10T13:23:47.7874732Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7874853Z E   
2025-01-10T13:23:47.7875082Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7875267Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7875392Z E          ...
2025-01-10T13:23:47.7875535Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7875758Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7875949Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7876083Z E          ...
2025-01-10T13:23:47.7876178Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7876310Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7876416Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7876420Z 
2025-01-10T13:23:47.7876516Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7876727Z ___ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-j_blues] ___
2025-01-10T13:23:47.7876732Z 
2025-01-10T13:23:47.7876861Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7876997Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7877099Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7877241Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7877369Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7877469Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7877545Z err_msg = None
2025-01-10T13:23:47.7877549Z 
2025-01-10T13:23:47.7877666Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7877754Z         if err_msg is None:
2025-01-10T13:23:47.7877850Z             if left.shape != right.shape:
2025-01-10T13:23:47.7877941Z                 raise_assert_detail(
2025-01-10T13:23:47.7878085Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7878163Z                 )
2025-01-10T13:23:47.7878232Z     
2025-01-10T13:23:47.7878311Z             diff = 0
2025-01-10T13:23:47.7878423Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7878679Z                 # count up differences
2025-01-10T13:23:47.7878856Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7878940Z                     diff += 1
2025-01-10T13:23:47.7879010Z     
2025-01-10T13:23:47.7879105Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7879242Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7879415Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7879532Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7879605Z E           
2025-01-10T13:23:47.7879721Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7879979Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7880329Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7880335Z 
2025-01-10T13:23:47.7880646Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7880650Z 
2025-01-10T13:23:47.7880816Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7880821Z 
2025-01-10T13:23:47.7881044Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd62d0>
2025-01-10T13:23:47.7881210Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b8d6150>
2025-01-10T13:23:47.7881292Z attr = 'j_blues'
2025-01-10T13:23:47.7881300Z 
2025-01-10T13:23:47.7881440Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7881562Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7881648Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7881725Z         try:
2025-01-10T13:23:47.7881872Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7881953Z         except KeyError:
2025-01-10T13:23:47.7882098Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7882168Z     
2025-01-10T13:23:47.7882261Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7882356Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7882450Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7882580Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7882672Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7882763Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7882883Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7882962Z             else:
2025-01-10T13:23:47.7883195Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7883305Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7883315Z 
2025-01-10T13:23:47.7883440Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7883557Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7883701Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7883778Z     ???
2025-01-10T13:23:47.7883885Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7883890Z 
2025-01-10T13:23:47.7883964Z >   ???
2025-01-10T13:23:47.7884091Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7884167Z E   
2025-01-10T13:23:47.7884293Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7884559Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7884637Z E          ...
2025-01-10T13:23:47.7884731Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7884866Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7884978Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7885055Z E          ...
2025-01-10T13:23:47.7885143Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7885272Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7885376Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7885380Z 
2025-01-10T13:23:47.7885473Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7885681Z ___ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines] ____
2025-01-10T13:23:47.7885685Z 
2025-01-10T13:23:47.7885819Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7885954Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7886167Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7886306Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7886428Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7886531Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7886612Z err_msg = None
2025-01-10T13:23:47.7886617Z 
2025-01-10T13:23:47.7886730Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7886812Z         if err_msg is None:
2025-01-10T13:23:47.7886913Z             if left.shape != right.shape:
2025-01-10T13:23:47.7886998Z                 raise_assert_detail(
2025-01-10T13:23:47.7887150Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7887229Z                 )
2025-01-10T13:23:47.7887308Z     
2025-01-10T13:23:47.7887387Z             diff = 0
2025-01-10T13:23:47.7887498Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7887592Z                 # count up differences
2025-01-10T13:23:47.7887760Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7887843Z                     diff += 1
2025-01-10T13:23:47.7887914Z     
2025-01-10T13:23:47.7888008Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7888141Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7888317Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7888429Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7888506Z E           
2025-01-10T13:23:47.7888616Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7888876Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7889144Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7889151Z 
2025-01-10T13:23:47.7889449Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7889454Z 
2025-01-10T13:23:47.7889627Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7889632Z 
2025-01-10T13:23:47.7889950Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd6000>
2025-01-10T13:23:47.7890119Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>
2025-01-10T13:23:47.7890201Z attr = 'lines'
2025-01-10T13:23:47.7890205Z 
2025-01-10T13:23:47.7890341Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7890461Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7890546Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7890623Z         try:
2025-01-10T13:23:47.7890766Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7890852Z         except KeyError:
2025-01-10T13:23:47.7890989Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7891066Z     
2025-01-10T13:23:47.7891154Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7891253Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7891346Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7891482Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7891655Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7891746Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7891860Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7891933Z             else:
2025-01-10T13:23:47.7892034Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7892195Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7892205Z 
2025-01-10T13:23:47.7892431Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7892627Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7892884Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7893002Z     ???
2025-01-10T13:23:47.7893319Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7893325Z 
2025-01-10T13:23:47.7893453Z >   ???
2025-01-10T13:23:47.7893663Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7893779Z E   
2025-01-10T13:23:47.7893911Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7894027Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7894101Z E          ...
2025-01-10T13:23:47.7894199Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7894328Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7894447Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7894519Z E          ...
2025-01-10T13:23:47.7894614Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7894739Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7894850Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7894855Z 
2025-01-10T13:23:47.7894948Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7895210Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index] _
2025-01-10T13:23:47.7895219Z 
2025-01-10T13:23:47.7895444Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd5ee0>
2025-01-10T13:23:47.7895607Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>
2025-01-10T13:23:47.7895700Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.7895705Z 
2025-01-10T13:23:47.7895839Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7895960Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7896044Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7896120Z         try:
2025-01-10T13:23:47.7896267Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7896349Z         except KeyError:
2025-01-10T13:23:47.7896491Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7896562Z     
2025-01-10T13:23:47.7896656Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7896909Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7897010Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7897151Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7897246Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7897345Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7897465Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7897470Z 
2025-01-10T13:23:47.7897596Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7897721Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7897726Z 
2025-01-10T13:23:47.7897866Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7897953Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7898068Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7898156Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7898408Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7898492Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7898604Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7898683Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7898767Z err_msg = None
2025-01-10T13:23:47.7898771Z 
2025-01-10T13:23:47.7898881Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7898972Z         if err_msg is None:
2025-01-10T13:23:47.7899074Z             if left.shape != right.shape:
2025-01-10T13:23:47.7899159Z                 raise_assert_detail(
2025-01-10T13:23:47.7899306Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7899380Z                 )
2025-01-10T13:23:47.7899455Z     
2025-01-10T13:23:47.7899530Z             diff = 0
2025-01-10T13:23:47.7899654Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7899748Z                 # count up differences
2025-01-10T13:23:47.7899923Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7900004Z                     diff += 1
2025-01-10T13:23:47.7900081Z     
2025-01-10T13:23:47.7900170Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7900311Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7900481Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7900592Z E           AssertionError: Series are different
2025-01-10T13:23:47.7900672Z E           
2025-01-10T13:23:47.7900777Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.7901150Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7901517Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7901855Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7901956Z 
2025-01-10T13:23:47.7902271Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7902526Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index] _
2025-01-10T13:23:47.7902532Z 
2025-01-10T13:23:47.7902761Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd5880>
2025-01-10T13:23:47.7902939Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>
2025-01-10T13:23:47.7903180Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.7903187Z 
2025-01-10T13:23:47.7903335Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7903453Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7903547Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7903620Z         try:
2025-01-10T13:23:47.7903768Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7903975Z         except KeyError:
2025-01-10T13:23:47.7904123Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7904194Z     
2025-01-10T13:23:47.7904286Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7904382Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7904475Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7904614Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7904701Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7904796Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7904907Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7904911Z 
2025-01-10T13:23:47.7905042Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7905160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7905165Z 
2025-01-10T13:23:47.7905305Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7905396Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7905509Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7905593Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7905738Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7905830Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7905936Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7906020Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7906096Z err_msg = None
2025-01-10T13:23:47.7906101Z 
2025-01-10T13:23:47.7906214Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7906295Z         if err_msg is None:
2025-01-10T13:23:47.7906392Z             if left.shape != right.shape:
2025-01-10T13:23:47.7906477Z                 raise_assert_detail(
2025-01-10T13:23:47.7906631Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7906708Z                 )
2025-01-10T13:23:47.7906783Z     
2025-01-10T13:23:47.7906857Z             diff = 0
2025-01-10T13:23:47.7906975Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7907070Z                 # count up differences
2025-01-10T13:23:47.7907239Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7907323Z                     diff += 1
2025-01-10T13:23:47.7907393Z     
2025-01-10T13:23:47.7907486Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7907620Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7907796Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7907900Z E           AssertionError: Series are different
2025-01-10T13:23:47.7907979Z E           
2025-01-10T13:23:47.7908241Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.7908615Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7908991Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7909358Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7909450Z 
2025-01-10T13:23:47.7909766Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7909975Z _____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-nu] _____
2025-01-10T13:23:47.7909980Z 
2025-01-10T13:23:47.7910150Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7910381Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7910550Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7910797Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7910963Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7911066Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7911150Z err_msg = None
2025-01-10T13:23:47.7911155Z 
2025-01-10T13:23:47.7911268Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7911355Z         if err_msg is None:
2025-01-10T13:23:47.7911449Z             if left.shape != right.shape:
2025-01-10T13:23:47.7911542Z                 raise_assert_detail(
2025-01-10T13:23:47.7911683Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7911761Z                 )
2025-01-10T13:23:47.7911830Z     
2025-01-10T13:23:47.7911909Z             diff = 0
2025-01-10T13:23:47.7912022Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7912119Z                 # count up differences
2025-01-10T13:23:47.7912294Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7912377Z                     diff += 1
2025-01-10T13:23:47.7912453Z     
2025-01-10T13:23:47.7912541Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7912683Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7912853Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7912974Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7913183Z E           
2025-01-10T13:23:47.7913305Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7913563Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7913977Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7913983Z 
2025-01-10T13:23:47.7914296Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7914302Z 
2025-01-10T13:23:47.7914471Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7914476Z 
2025-01-10T13:23:47.7914705Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd66f0>
2025-01-10T13:23:47.7914907Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>, attr = 'nu'
2025-01-10T13:23:47.7914921Z 
2025-01-10T13:23:47.7915061Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7915288Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7915373Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7915449Z         try:
2025-01-10T13:23:47.7915590Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7915676Z         except KeyError:
2025-01-10T13:23:47.7915816Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7915890Z     
2025-01-10T13:23:47.7915978Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7916080Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7916172Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7916309Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7916395Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7916493Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7916615Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7916625Z 
2025-01-10T13:23:47.7916751Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7916871Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7917017Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7917095Z     ???
2025-01-10T13:23:47.7917207Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7917212Z 
2025-01-10T13:23:47.7917288Z >   ???
2025-01-10T13:23:47.7917416Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7917492Z E   
2025-01-10T13:23:47.7917622Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7917740Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7917813Z E          ...
2025-01-10T13:23:47.7917908Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7918049Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7918166Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7918244Z E          ...
2025-01-10T13:23:47.7918331Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7918461Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7918568Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7918573Z 
2025-01-10T13:23:47.7918667Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7918892Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm] _
2025-01-10T13:23:47.7918898Z 
2025-01-10T13:23:47.7919032Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7919163Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7919273Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7919511Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7919639Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7919740Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7919817Z err_msg = None
2025-01-10T13:23:47.7919822Z 
2025-01-10T13:23:47.7919938Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7920020Z         if err_msg is None:
2025-01-10T13:23:47.7920119Z             if left.shape != right.shape:
2025-01-10T13:23:47.7920204Z                 raise_assert_detail(
2025-01-10T13:23:47.7920352Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7920429Z                 )
2025-01-10T13:23:47.7920499Z     
2025-01-10T13:23:47.7920580Z             diff = 0
2025-01-10T13:23:47.7920694Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7920792Z                 # count up differences
2025-01-10T13:23:47.7921049Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7921134Z                     diff += 1
2025-01-10T13:23:47.7921204Z     
2025-01-10T13:23:47.7921299Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7921434Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7921610Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7921724Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7921803Z E           
2025-01-10T13:23:47.7921914Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7922176Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7922448Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7922453Z 
2025-01-10T13:23:47.7922757Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7922761Z 
2025-01-10T13:23:47.7922935Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7922940Z 
2025-01-10T13:23:47.7923442Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd7c20>
2025-01-10T13:23:47.7923629Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>
2025-01-10T13:23:47.7923721Z attr = 'wavelength_cm'
2025-01-10T13:23:47.7923726Z 
2025-01-10T13:23:47.7923869Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7923991Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7924075Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7924153Z         try:
2025-01-10T13:23:47.7924293Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7924379Z         except KeyError:
2025-01-10T13:23:47.7924517Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7924593Z     
2025-01-10T13:23:47.7924687Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7924782Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7924874Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7925004Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7925095Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7925186Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7925436Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7925444Z 
2025-01-10T13:23:47.7925573Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7925702Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7925855Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7925934Z     ???
2025-01-10T13:23:47.7926045Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7926057Z 
2025-01-10T13:23:47.7926129Z >   ???
2025-01-10T13:23:47.7926265Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7926337Z E   
2025-01-10T13:23:47.7926473Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7926586Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7926669Z E          ...
2025-01-10T13:23:47.7926758Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7926902Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7927148Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7927231Z E          ...
2025-01-10T13:23:47.7935856Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7936160Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7936363Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7936371Z 
2025-01-10T13:23:47.7936531Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7936811Z ____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-f_lu] ____
2025-01-10T13:23:47.7936817Z 
2025-01-10T13:23:47.7936962Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7937108Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7937217Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7937377Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7937513Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7937612Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7937699Z err_msg = None
2025-01-10T13:23:47.7937703Z 
2025-01-10T13:23:47.7937823Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7937915Z         if err_msg is None:
2025-01-10T13:23:47.7938016Z             if left.shape != right.shape:
2025-01-10T13:23:47.7938108Z                 raise_assert_detail(
2025-01-10T13:23:47.7938261Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7938340Z                 )
2025-01-10T13:23:47.7938417Z     
2025-01-10T13:23:47.7938495Z             diff = 0
2025-01-10T13:23:47.7938617Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7938715Z                 # count up differences
2025-01-10T13:23:47.7938899Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7938982Z                     diff += 1
2025-01-10T13:23:47.7939058Z     
2025-01-10T13:23:47.7939152Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7939299Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7939472Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7939595Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7939669Z E           
2025-01-10T13:23:47.7939791Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7940052Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7940508Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7940515Z 
2025-01-10T13:23:47.7940839Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7940845Z 
2025-01-10T13:23:47.7941022Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7941033Z 
2025-01-10T13:23:47.7941256Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd7380>
2025-01-10T13:23:47.7941464Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>, attr = 'f_lu'
2025-01-10T13:23:47.7941474Z 
2025-01-10T13:23:47.7941786Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7941913Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7942001Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7942085Z         try:
2025-01-10T13:23:47.7942227Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7942322Z         except KeyError:
2025-01-10T13:23:47.7942460Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7942536Z     
2025-01-10T13:23:47.7942626Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7942729Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7942826Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7942960Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7943194Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7943297Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7943419Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7943431Z 
2025-01-10T13:23:47.7943559Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7943679Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7943830Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7943910Z     ???
2025-01-10T13:23:47.7944019Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7944029Z 
2025-01-10T13:23:47.7944101Z >   ???
2025-01-10T13:23:47.7944229Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7944296Z E   
2025-01-10T13:23:47.7944427Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7944542Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7944622Z E          ...
2025-01-10T13:23:47.7944711Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7944855Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7944971Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7945050Z E          ...
2025-01-10T13:23:47.7945138Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7945268Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7945372Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7945384Z 
2025-01-10T13:23:47.7945474Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7945702Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs] _
2025-01-10T13:23:47.7945707Z 
2025-01-10T13:23:47.7945836Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7945973Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7946073Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7946338Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7946463Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7946564Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7946641Z err_msg = None
2025-01-10T13:23:47.7946652Z 
2025-01-10T13:23:47.7946767Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7946855Z         if err_msg is None:
2025-01-10T13:23:47.7946954Z             if left.shape != right.shape:
2025-01-10T13:23:47.7947044Z                 raise_assert_detail(
2025-01-10T13:23:47.7947189Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7947267Z                 )
2025-01-10T13:23:47.7947338Z     
2025-01-10T13:23:47.7947417Z             diff = 0
2025-01-10T13:23:47.7947530Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7947631Z                 # count up differences
2025-01-10T13:23:47.7947915Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7948000Z                     diff += 1
2025-01-10T13:23:47.7948071Z     
2025-01-10T13:23:47.7948165Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7948302Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7948477Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7948599Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7948672Z E           
2025-01-10T13:23:47.7948791Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7949050Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7949325Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7949331Z 
2025-01-10T13:23:47.7949657Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7949662Z 
2025-01-10T13:23:47.7949838Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7949842Z 
2025-01-10T13:23:47.7950076Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd7470>
2025-01-10T13:23:47.7950244Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>
2025-01-10T13:23:47.7950335Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.7950343Z 
2025-01-10T13:23:47.7950485Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7950609Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7950701Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7950775Z         try:
2025-01-10T13:23:47.7950926Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7951009Z         except KeyError:
2025-01-10T13:23:47.7951155Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7951227Z     
2025-01-10T13:23:47.7951321Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7951422Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7951517Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7951650Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7951743Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7951927Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7952050Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7952134Z             else:
2025-01-10T13:23:47.7952231Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7952351Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7952355Z 
2025-01-10T13:23:47.7952490Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7952611Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7952768Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7952849Z     ???
2025-01-10T13:23:47.7952967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7952972Z 
2025-01-10T13:23:47.7953186Z >   ???
2025-01-10T13:23:47.7953327Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7953399Z E   
2025-01-10T13:23:47.7953535Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7953791Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7953871Z E          ...
2025-01-10T13:23:47.7953981Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7954218Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7954426Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7954553Z E          ...
2025-01-10T13:23:47.7954707Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7954918Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7955100Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7955107Z 
2025-01-10T13:23:47.7955255Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7955641Z _ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev] _
2025-01-10T13:23:47.7955648Z 
2025-01-10T13:23:47.7955783Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7955932Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7956039Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7956173Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7956301Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7956397Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7956483Z err_msg = None
2025-01-10T13:23:47.7956488Z 
2025-01-10T13:23:47.7956604Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7956695Z         if err_msg is None:
2025-01-10T13:23:47.7956795Z             if left.shape != right.shape:
2025-01-10T13:23:47.7956886Z                 raise_assert_detail(
2025-01-10T13:23:47.7957039Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7957126Z                 )
2025-01-10T13:23:47.7957202Z     
2025-01-10T13:23:47.7957276Z             diff = 0
2025-01-10T13:23:47.7957396Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7957487Z                 # count up differences
2025-01-10T13:23:47.7957664Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7957744Z                     diff += 1
2025-01-10T13:23:47.7957820Z     
2025-01-10T13:23:47.7957911Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7958055Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7958227Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7958346Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7958421Z E           
2025-01-10T13:23:47.7958539Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7958954Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7959220Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7959226Z 
2025-01-10T13:23:47.7959540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7959545Z 
2025-01-10T13:23:47.7959720Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7959729Z 
2025-01-10T13:23:47.7959954Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd7da0>
2025-01-10T13:23:47.7960229Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>
2025-01-10T13:23:47.7960312Z attr = 'beta_sobolev'
2025-01-10T13:23:47.7960316Z 
2025-01-10T13:23:47.7960467Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7960586Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7960681Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7960754Z         try:
2025-01-10T13:23:47.7960904Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7960987Z         except KeyError:
2025-01-10T13:23:47.7961131Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7961207Z     
2025-01-10T13:23:47.7961297Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7961396Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7961495Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7961642Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7961732Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7961828Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7961940Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7962020Z             else:
2025-01-10T13:23:47.7962116Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7962227Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7962232Z 
2025-01-10T13:23:47.7962356Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7962475Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7962628Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7962701Z     ???
2025-01-10T13:23:47.7962816Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7962824Z 
2025-01-10T13:23:47.7962898Z >   ???
2025-01-10T13:23:47.7963172Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7963247Z E   
2025-01-10T13:23:47.7963383Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7963496Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7963576Z E          ...
2025-01-10T13:23:47.7963666Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7963800Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7963914Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7963993Z E          ...
2025-01-10T13:23:47.7964082Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7964211Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7964322Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7964326Z 
2025-01-10T13:23:47.7964546Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7964765Z __ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-j_blues] ___
2025-01-10T13:23:47.7964769Z 
2025-01-10T13:23:47.7964897Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7965032Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7965132Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7965268Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7965393Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7965492Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7965574Z err_msg = None
2025-01-10T13:23:47.7965579Z 
2025-01-10T13:23:47.7965692Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7965784Z         if err_msg is None:
2025-01-10T13:23:47.7965994Z             if left.shape != right.shape:
2025-01-10T13:23:47.7966085Z                 raise_assert_detail(
2025-01-10T13:23:47.7966231Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7966312Z                 )
2025-01-10T13:23:47.7966383Z     
2025-01-10T13:23:47.7966461Z             diff = 0
2025-01-10T13:23:47.7966574Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7966669Z                 # count up differences
2025-01-10T13:23:47.7966840Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7966928Z                     diff += 1
2025-01-10T13:23:47.7967004Z     
2025-01-10T13:23:47.7967094Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7967234Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7967407Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7967530Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7967609Z E           
2025-01-10T13:23:47.7967724Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7967981Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7968242Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7968248Z 
2025-01-10T13:23:47.7968554Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7968568Z 
2025-01-10T13:23:47.7968736Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7968741Z 
2025-01-10T13:23:47.7968971Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61dd7110>
2025-01-10T13:23:47.7969137Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59263260>
2025-01-10T13:23:47.7969220Z attr = 'j_blues'
2025-01-10T13:23:47.7969225Z 
2025-01-10T13:23:47.7969370Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7969487Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7969578Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7969652Z         try:
2025-01-10T13:23:47.7969797Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7969881Z         except KeyError:
2025-01-10T13:23:47.7970025Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7970191Z     
2025-01-10T13:23:47.7970286Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7970381Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7970475Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7970607Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7970700Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7970798Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7970907Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7970989Z             else:
2025-01-10T13:23:47.7971090Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7971201Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7971206Z 
2025-01-10T13:23:47.7971332Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7971450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7971600Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7971756Z     ???
2025-01-10T13:23:47.7971867Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7971872Z 
2025-01-10T13:23:47.7971948Z >   ???
2025-01-10T13:23:47.7972102Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7972236Z E   
2025-01-10T13:23:47.7972477Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7972670Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7972799Z E          ...
2025-01-10T13:23:47.7972943Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7973293Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7973482Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7973604Z E          ...
2025-01-10T13:23:47.7973750Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7973924Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7974039Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7974044Z 
2025-01-10T13:23:47.7974141Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7974383Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines] _
2025-01-10T13:23:47.7974388Z 
2025-01-10T13:23:47.7974519Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7974659Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7974759Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7974898Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7975023Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7975123Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7975212Z err_msg = None
2025-01-10T13:23:47.7975222Z 
2025-01-10T13:23:47.7975337Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7975424Z         if err_msg is None:
2025-01-10T13:23:47.7975522Z             if left.shape != right.shape:
2025-01-10T13:23:47.7975611Z                 raise_assert_detail(
2025-01-10T13:23:47.7975758Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7975835Z                 )
2025-01-10T13:23:47.7975905Z     
2025-01-10T13:23:47.7975983Z             diff = 0
2025-01-10T13:23:47.7976099Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7976193Z                 # count up differences
2025-01-10T13:23:47.7976364Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7976448Z                     diff += 1
2025-01-10T13:23:47.7976518Z     
2025-01-10T13:23:47.7976760Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7976905Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7977078Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7977196Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.7977269Z E           
2025-01-10T13:23:47.7977384Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.7977642Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7977906Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7978018Z 
2025-01-10T13:23:47.7978338Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7978343Z 
2025-01-10T13:23:47.7978515Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.7978520Z 
2025-01-10T13:23:47.7978745Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c95c10>
2025-01-10T13:23:47.7978910Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>
2025-01-10T13:23:47.7978992Z attr = 'lines'
2025-01-10T13:23:47.7978997Z 
2025-01-10T13:23:47.7979136Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7979259Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7979349Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7979426Z         try:
2025-01-10T13:23:47.7979572Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7979661Z         except KeyError:
2025-01-10T13:23:47.7979804Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7979874Z     
2025-01-10T13:23:47.7979967Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7980061Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7980157Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7980292Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7980383Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7980475Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7980590Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7980664Z             else:
2025-01-10T13:23:47.7980764Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.7980877Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.7980885Z 
2025-01-10T13:23:47.7981015Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.7981133Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7981281Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.7981357Z     ???
2025-01-10T13:23:47.7981466Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7981471Z 
2025-01-10T13:23:47.7981549Z >   ???
2025-01-10T13:23:47.7981675Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.7981752Z E   
2025-01-10T13:23:47.7981881Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.7982000Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7982073Z E          ...
2025-01-10T13:23:47.7982167Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7982299Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7982524Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.7982605Z E          ...
2025-01-10T13:23:47.7982692Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.7982820Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.7982925Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.7982930Z 
2025-01-10T13:23:47.7983164Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.7983455Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index] _
2025-01-10T13:23:47.7983461Z 
2025-01-10T13:23:47.7983690Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c95cd0>
2025-01-10T13:23:47.7983860Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>
2025-01-10T13:23:47.7983947Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.7983952Z 
2025-01-10T13:23:47.7984092Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7984214Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7984428Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7984500Z         try:
2025-01-10T13:23:47.7984652Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7984734Z         except KeyError:
2025-01-10T13:23:47.7984874Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7984944Z     
2025-01-10T13:23:47.7985036Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7985130Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7985226Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7985359Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7985451Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7985545Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7985654Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7985663Z 
2025-01-10T13:23:47.7985790Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7985908Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7985912Z 
2025-01-10T13:23:47.7986052Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7986137Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7986249Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7986331Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7986477Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.7986564Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.7986667Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7986750Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.7986827Z err_msg = None
2025-01-10T13:23:47.7986835Z 
2025-01-10T13:23:47.7986950Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7987034Z         if err_msg is None:
2025-01-10T13:23:47.7987133Z             if left.shape != right.shape:
2025-01-10T13:23:47.7987215Z                 raise_assert_detail(
2025-01-10T13:23:47.7987363Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7987436Z                 )
2025-01-10T13:23:47.7987516Z     
2025-01-10T13:23:47.7987590Z             diff = 0
2025-01-10T13:23:47.7987705Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7987796Z                 # count up differences
2025-01-10T13:23:47.7987966Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7988052Z                     diff += 1
2025-01-10T13:23:47.7988124Z     
2025-01-10T13:23:47.7988216Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7988354Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7988655Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7988761Z E           AssertionError: Series are different
2025-01-10T13:23:47.7988839Z E           
2025-01-10T13:23:47.7988942Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.7989319Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7989649Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7990215Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.7990238Z 
2025-01-10T13:23:47.7990768Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7991252Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index] _
2025-01-10T13:23:47.7991262Z 
2025-01-10T13:23:47.7991544Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c95d90>
2025-01-10T13:23:47.7991723Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>
2025-01-10T13:23:47.7991821Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.7991826Z 
2025-01-10T13:23:47.7991970Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.7992088Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.7992173Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.7992250Z         try:
2025-01-10T13:23:47.7992391Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.7992477Z         except KeyError:
2025-01-10T13:23:47.7992615Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.7992688Z     
2025-01-10T13:23:47.7992778Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.7992876Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.7992964Z             if attr == "selected_atoms":
2025-01-10T13:23:47.7993238Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.7993331Z             elif actual.ndim == 1:
2025-01-10T13:23:47.7993433Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.7993543Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.7993551Z 
2025-01-10T13:23:47.7993676Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.7993792Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.7993797Z 
2025-01-10T13:23:47.7993933Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7994022Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7994130Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7994214Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7994351Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.7994439Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.7994689Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.7994778Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.7994857Z err_msg = None
2025-01-10T13:23:47.7994861Z 
2025-01-10T13:23:47.7994970Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7995055Z         if err_msg is None:
2025-01-10T13:23:47.7995149Z             if left.shape != right.shape:
2025-01-10T13:23:47.7995239Z                 raise_assert_detail(
2025-01-10T13:23:47.7995377Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.7995452Z                 )
2025-01-10T13:23:47.7995522Z     
2025-01-10T13:23:47.7995598Z             diff = 0
2025-01-10T13:23:47.7995708Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.7995802Z                 # count up differences
2025-01-10T13:23:47.7995967Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.7996163Z                     diff += 1
2025-01-10T13:23:47.7996232Z     
2025-01-10T13:23:47.7996325Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.7996464Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.7996633Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.7996744Z E           AssertionError: Series are different
2025-01-10T13:23:47.7996821Z E           
2025-01-10T13:23:47.7996930Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.7997293Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.7997672Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7998044Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.7998050Z 
2025-01-10T13:23:47.7998358Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.7998582Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-nu] __
2025-01-10T13:23:47.7998587Z 
2025-01-10T13:23:47.7998723Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7998852Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7998954Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7999089Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.7999215Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.7999310Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.7999393Z err_msg = None
2025-01-10T13:23:47.7999397Z 
2025-01-10T13:23:47.7999506Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.7999678Z         if err_msg is None:
2025-01-10T13:23:47.7999783Z             if left.shape != right.shape:
2025-01-10T13:23:47.7999869Z                 raise_assert_detail(
2025-01-10T13:23:47.8000017Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8000089Z                 )
2025-01-10T13:23:47.8000163Z     
2025-01-10T13:23:47.8000235Z             diff = 0
2025-01-10T13:23:47.8000348Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8000434Z                 # count up differences
2025-01-10T13:23:47.8000605Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8000684Z                     diff += 1
2025-01-10T13:23:47.8000760Z     
2025-01-10T13:23:47.8000848Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8000985Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8001152Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8001378Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8001455Z E           
2025-01-10T13:23:47.8001605Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8001867Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8002125Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8002134Z 
2025-01-10T13:23:47.8002439Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8002449Z 
2025-01-10T13:23:47.8002621Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8002627Z 
2025-01-10T13:23:47.8002847Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c96000>
2025-01-10T13:23:47.8003145Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>, attr = 'nu'
2025-01-10T13:23:47.8003151Z 
2025-01-10T13:23:47.8003291Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8003410Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8003495Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8003572Z         try:
2025-01-10T13:23:47.8003712Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8003797Z         except KeyError:
2025-01-10T13:23:47.8003938Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8004018Z     
2025-01-10T13:23:47.8004107Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8004200Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8004290Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8004425Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8004514Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8004605Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8004721Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8004726Z 
2025-01-10T13:23:47.8004851Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8004968Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8005118Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8005190Z     ???
2025-01-10T13:23:47.8005303Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8005451Z 
2025-01-10T13:23:47.8005525Z >   ???
2025-01-10T13:23:47.8005657Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8005727Z E   
2025-01-10T13:23:47.8005860Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8005972Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8006050Z E          ...
2025-01-10T13:23:47.8006139Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8006276Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8006388Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8006464Z E          ...
2025-01-10T13:23:47.8006550Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8006680Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8006789Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8006801Z 
2025-01-10T13:23:47.8006892Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8007259Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm] _
2025-01-10T13:23:47.8007265Z 
2025-01-10T13:23:47.8007392Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8007522Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8007620Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8007758Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8007881Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8007980Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8008082Z err_msg = None
2025-01-10T13:23:47.8008088Z 
2025-01-10T13:23:47.8008283Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8008443Z         if err_msg is None:
2025-01-10T13:23:47.8008609Z             if left.shape != right.shape:
2025-01-10T13:23:47.8008757Z                 raise_assert_detail(
2025-01-10T13:23:47.8008995Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8009119Z                 )
2025-01-10T13:23:47.8009234Z     
2025-01-10T13:23:47.8009358Z             diff = 0
2025-01-10T13:23:47.8009546Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8009668Z                 # count up differences
2025-01-10T13:23:47.8009843Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8009929Z                     diff += 1
2025-01-10T13:23:47.8010002Z     
2025-01-10T13:23:47.8010094Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8010237Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8010409Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8010541Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8010615Z E           
2025-01-10T13:23:47.8010731Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8010986Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8011247Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8011378Z 
2025-01-10T13:23:47.8011695Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8011707Z 
2025-01-10T13:23:47.8011877Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8011882Z 
2025-01-10T13:23:47.8012112Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c960f0>
2025-01-10T13:23:47.8012279Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>
2025-01-10T13:23:47.8012365Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8012370Z 
2025-01-10T13:23:47.8012513Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8012628Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8012720Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8012792Z         try:
2025-01-10T13:23:47.8012942Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8013151Z         except KeyError:
2025-01-10T13:23:47.8013311Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8013507Z     
2025-01-10T13:23:47.8013603Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8013699Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8013793Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8013931Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8014023Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8014118Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8014229Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8014234Z 
2025-01-10T13:23:47.8014369Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8014485Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8014637Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8014709Z     ???
2025-01-10T13:23:47.8014823Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8014837Z 
2025-01-10T13:23:47.8014909Z >   ???
2025-01-10T13:23:47.8015043Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8015113Z E   
2025-01-10T13:23:47.8015245Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8015359Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8015437Z E          ...
2025-01-10T13:23:47.8015530Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8015661Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8015777Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8015850Z E          ...
2025-01-10T13:23:47.8015942Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8016068Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8016179Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8016187Z 
2025-01-10T13:23:47.8016280Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8016498Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu] _
2025-01-10T13:23:47.8016503Z 
2025-01-10T13:23:47.8016629Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8016764Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8016866Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8016999Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8017125Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8017220Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8017302Z err_msg = None
2025-01-10T13:23:47.8017307Z 
2025-01-10T13:23:47.8017419Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8017629Z         if err_msg is None:
2025-01-10T13:23:47.8017725Z             if left.shape != right.shape:
2025-01-10T13:23:47.8017813Z                 raise_assert_detail(
2025-01-10T13:23:47.8017961Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8018033Z                 )
2025-01-10T13:23:47.8018105Z     
2025-01-10T13:23:47.8018178Z             diff = 0
2025-01-10T13:23:47.8018293Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8018382Z                 # count up differences
2025-01-10T13:23:47.8018554Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8018632Z                     diff += 1
2025-01-10T13:23:47.8018712Z     
2025-01-10T13:23:47.8018802Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8018945Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8019120Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8019324Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8019397Z E           
2025-01-10T13:23:47.8019514Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8019777Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8020033Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8020042Z 
2025-01-10T13:23:47.8020358Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8020363Z 
2025-01-10T13:23:47.8020535Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8020540Z 
2025-01-10T13:23:47.8020764Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c961b0>
2025-01-10T13:23:47.8020970Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>, attr = 'f_lu'
2025-01-10T13:23:47.8020975Z 
2025-01-10T13:23:47.8021113Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8021235Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8021320Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8021398Z         try:
2025-01-10T13:23:47.8021541Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8021631Z         except KeyError:
2025-01-10T13:23:47.8021774Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8021854Z     
2025-01-10T13:23:47.8021946Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8022040Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8022136Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8022268Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8022361Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8022452Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8022568Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8022573Z 
2025-01-10T13:23:47.8022700Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8022817Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8022963Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8023142Z     ???
2025-01-10T13:23:47.8023256Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8023392Z 
2025-01-10T13:23:47.8023467Z >   ???
2025-01-10T13:23:47.8023599Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8023671Z E   
2025-01-10T13:23:47.8023804Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8023916Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8023994Z E          ...
2025-01-10T13:23:47.8024082Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8024217Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8024330Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8024409Z E          ...
2025-01-10T13:23:47.8024499Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8024630Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8024737Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8024752Z 
2025-01-10T13:23:47.8024973Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8025225Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs] _
2025-01-10T13:23:47.8025230Z 
2025-01-10T13:23:47.8025358Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8025491Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8025591Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8025729Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8025852Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8025954Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8026037Z err_msg = None
2025-01-10T13:23:47.8026041Z 
2025-01-10T13:23:47.8026150Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8026315Z         if err_msg is None:
2025-01-10T13:23:47.8026480Z             if left.shape != right.shape:
2025-01-10T13:23:47.8026630Z                 raise_assert_detail(
2025-01-10T13:23:47.8026870Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8026996Z                 )
2025-01-10T13:23:47.8027111Z     
2025-01-10T13:23:47.8027238Z             diff = 0
2025-01-10T13:23:47.8027419Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8027567Z                 # count up differences
2025-01-10T13:23:47.8027828Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8027919Z                     diff += 1
2025-01-10T13:23:47.8027991Z     
2025-01-10T13:23:47.8028085Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8028228Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8028402Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8028526Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8028599Z E           
2025-01-10T13:23:47.8028717Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8028975Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8029234Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8029337Z 
2025-01-10T13:23:47.8029651Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8029659Z 
2025-01-10T13:23:47.8029828Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8029833Z 
2025-01-10T13:23:47.8030060Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c96930>
2025-01-10T13:23:47.8030227Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>
2025-01-10T13:23:47.8030313Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8030318Z 
2025-01-10T13:23:47.8030457Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8030580Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8030671Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8030744Z         try:
2025-01-10T13:23:47.8030891Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8030973Z         except KeyError:
2025-01-10T13:23:47.8031120Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8031273Z     
2025-01-10T13:23:47.8031365Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8031460Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8031555Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8031688Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8031781Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8031872Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8031986Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8032066Z             else:
2025-01-10T13:23:47.8032162Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8032275Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8032280Z 
2025-01-10T13:23:47.8032407Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8032525Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8032681Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8032758Z     ???
2025-01-10T13:23:47.8032871Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8032876Z 
2025-01-10T13:23:47.8032954Z >   ???
2025-01-10T13:23:47.8033214Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8033294Z E   
2025-01-10T13:23:47.8033424Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8033546Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8033625Z E          ...
2025-01-10T13:23:47.8033714Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8033848Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8033961Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8034039Z E          ...
2025-01-10T13:23:47.8034129Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8034266Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8034373Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8034378Z 
2025-01-10T13:23:47.8034474Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8034716Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev] _
2025-01-10T13:23:47.8034722Z 
2025-01-10T13:23:47.8034854Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8034987Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8035084Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8035221Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8035344Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8035573Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8035651Z err_msg = None
2025-01-10T13:23:47.8035655Z 
2025-01-10T13:23:47.8035772Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8035853Z         if err_msg is None:
2025-01-10T13:23:47.8035954Z             if left.shape != right.shape:
2025-01-10T13:23:47.8036041Z                 raise_assert_detail(
2025-01-10T13:23:47.8036189Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8036265Z                 )
2025-01-10T13:23:47.8036333Z     
2025-01-10T13:23:47.8036410Z             diff = 0
2025-01-10T13:23:47.8036524Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8036618Z                 # count up differences
2025-01-10T13:23:47.8036789Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8036872Z                     diff += 1
2025-01-10T13:23:47.8036949Z     
2025-01-10T13:23:47.8037153Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8037289Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8037465Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8037580Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8037658Z E           
2025-01-10T13:23:47.8037779Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8038034Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8038523Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8038539Z 
2025-01-10T13:23:47.8038844Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8038855Z 
2025-01-10T13:23:47.8039025Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8039030Z 
2025-01-10T13:23:47.8039256Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c969f0>
2025-01-10T13:23:47.8039424Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>
2025-01-10T13:23:47.8039510Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8039514Z 
2025-01-10T13:23:47.8039651Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8039778Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8039866Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8039948Z         try:
2025-01-10T13:23:47.8040089Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8040178Z         except KeyError:
2025-01-10T13:23:47.8040320Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8040394Z     
2025-01-10T13:23:47.8040486Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8040580Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8040676Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8040810Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8040902Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8040992Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8041107Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8041181Z             else:
2025-01-10T13:23:47.8041281Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8041479Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8041489Z 
2025-01-10T13:23:47.8041619Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8041738Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8041886Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8041963Z     ???
2025-01-10T13:23:47.8042073Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8042077Z 
2025-01-10T13:23:47.8042154Z >   ???
2025-01-10T13:23:47.8042281Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8042357Z E   
2025-01-10T13:23:47.8042484Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8042601Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8042675Z E          ...
2025-01-10T13:23:47.8042769Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8042903Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8043207Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8043287Z E          ...
2025-01-10T13:23:47.8043377Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8043506Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8043614Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8043618Z 
2025-01-10T13:23:47.8043711Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8043940Z _ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues] _
2025-01-10T13:23:47.8043945Z 
2025-01-10T13:23:47.8044076Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8044203Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8044312Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8044457Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8044580Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8044679Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8044757Z err_msg = None
2025-01-10T13:23:47.8044761Z 
2025-01-10T13:23:47.8044891Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8045043Z         if err_msg is None:
2025-01-10T13:23:47.8045210Z             if left.shape != right.shape:
2025-01-10T13:23:47.8045348Z                 raise_assert_detail(
2025-01-10T13:23:47.8045595Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8045719Z                 )
2025-01-10T13:23:47.8045846Z     
2025-01-10T13:23:47.8045976Z             diff = 0
2025-01-10T13:23:47.8046171Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8046331Z                 # count up differences
2025-01-10T13:23:47.8046628Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8046762Z                     diff += 1
2025-01-10T13:23:47.8046880Z     
2025-01-10T13:23:47.8047034Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8047257Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8047552Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8047736Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8047862Z E           
2025-01-10T13:23:47.8048046Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8048503Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8049148Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8049158Z 
2025-01-10T13:23:47.8049557Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8049564Z 
2025-01-10T13:23:47.8049737Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8049742Z 
2025-01-10T13:23:47.8049968Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c96b70>
2025-01-10T13:23:47.8050142Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59176a50>
2025-01-10T13:23:47.8050232Z attr = 'j_blues'
2025-01-10T13:23:47.8050372Z 
2025-01-10T13:23:47.8050516Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8050638Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8050722Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8050799Z         try:
2025-01-10T13:23:47.8050938Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8051027Z         except KeyError:
2025-01-10T13:23:47.8051165Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8051241Z     
2025-01-10T13:23:47.8051330Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8051429Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8051521Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8051660Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8051752Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8051845Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8051969Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8052043Z             else:
2025-01-10T13:23:47.8052143Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8052250Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8052254Z 
2025-01-10T13:23:47.8052386Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8052502Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8052652Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8052725Z     ???
2025-01-10T13:23:47.8052839Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8052844Z 
2025-01-10T13:23:47.8052918Z >   ???
2025-01-10T13:23:47.8053172Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8053251Z E   
2025-01-10T13:23:47.8053380Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8053505Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8053579Z E          ...
2025-01-10T13:23:47.8053672Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8053802Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8053919Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8053992Z E          ...
2025-01-10T13:23:47.8054085Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8054212Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8054322Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8054327Z 
2025-01-10T13:23:47.8054422Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8054632Z ____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines] ____
2025-01-10T13:23:47.8054636Z 
2025-01-10T13:23:47.8054767Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8055025Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8055126Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8055258Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8055384Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8055479Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8055561Z err_msg = None
2025-01-10T13:23:47.8055565Z 
2025-01-10T13:23:47.8055677Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8055759Z         if err_msg is None:
2025-01-10T13:23:47.8055856Z             if left.shape != right.shape:
2025-01-10T13:23:47.8055942Z                 raise_assert_detail(
2025-01-10T13:23:47.8056088Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8056273Z                 )
2025-01-10T13:23:47.8056347Z     
2025-01-10T13:23:47.8056421Z             diff = 0
2025-01-10T13:23:47.8056536Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8056624Z                 # count up differences
2025-01-10T13:23:47.8056797Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8056876Z                     diff += 1
2025-01-10T13:23:47.8056952Z     
2025-01-10T13:23:47.8057040Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8057180Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8057354Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8057469Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8057547Z E           
2025-01-10T13:23:47.8057658Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8057923Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8058183Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8058193Z 
2025-01-10T13:23:47.8058492Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8058498Z 
2025-01-10T13:23:47.8058670Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8058678Z 
2025-01-10T13:23:47.8058899Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c97950>
2025-01-10T13:23:47.8059077Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34aa24b0>
2025-01-10T13:23:47.8059155Z attr = 'lines'
2025-01-10T13:23:47.8059160Z 
2025-01-10T13:23:47.8059300Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8059420Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8059506Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8059585Z         try:
2025-01-10T13:23:47.8059723Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8059809Z         except KeyError:
2025-01-10T13:23:47.8059949Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8060027Z     
2025-01-10T13:23:47.8060115Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8060216Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8060306Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8060559Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8060650Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8060745Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8060855Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8060933Z             else:
2025-01-10T13:23:47.8061030Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8061144Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8061149Z 
2025-01-10T13:23:47.8061278Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8061390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8061537Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8061612Z     ???
2025-01-10T13:23:47.8061726Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8061735Z 
2025-01-10T13:23:47.8061805Z >   ???
2025-01-10T13:23:47.8062024Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8062132Z E   
2025-01-10T13:23:47.8062370Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8062557Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8062683Z E          ...
2025-01-10T13:23:47.8062831Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8063182Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8063380Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8063506Z E          ...
2025-01-10T13:23:47.8063603Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8063730Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8063839Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8063844Z 
2025-01-10T13:23:47.8063934Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8064194Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index] _
2025-01-10T13:23:47.8064204Z 
2025-01-10T13:23:47.8064423Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c97a10>
2025-01-10T13:23:47.8064594Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34aa24b0>
2025-01-10T13:23:47.8064688Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8064693Z 
2025-01-10T13:23:47.8064828Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8064949Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8065034Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8065112Z         try:
2025-01-10T13:23:47.8065252Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8065339Z         except KeyError:
2025-01-10T13:23:47.8065475Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8065553Z     
2025-01-10T13:23:47.8065645Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8065747Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8065836Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8065972Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8066062Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8066155Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8066271Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8066276Z 
2025-01-10T13:23:47.8066401Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8066519Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8066524Z 
2025-01-10T13:23:47.8066660Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8066755Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8066865Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8067102Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8067248Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8067332Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8067442Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8067522Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8067604Z err_msg = None
2025-01-10T13:23:47.8067609Z 
2025-01-10T13:23:47.8067717Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8067804Z         if err_msg is None:
2025-01-10T13:23:47.8067901Z             if left.shape != right.shape:
2025-01-10T13:23:47.8067990Z                 raise_assert_detail(
2025-01-10T13:23:47.8068132Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8068212Z                 )
2025-01-10T13:23:47.8068283Z     
2025-01-10T13:23:47.8068367Z             diff = 0
2025-01-10T13:23:47.8068590Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8068680Z                 # count up differences
2025-01-10T13:23:47.8068854Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8068932Z                     diff += 1
2025-01-10T13:23:47.8069005Z     
2025-01-10T13:23:47.8069093Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8069232Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8069412Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8069522Z E           AssertionError: Series are different
2025-01-10T13:23:47.8069596Z E           
2025-01-10T13:23:47.8069705Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8070072Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8070416Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8070750Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8070762Z 
2025-01-10T13:23:47.8071073Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8071318Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index] _
2025-01-10T13:23:47.8071323Z 
2025-01-10T13:23:47.8071548Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c97ad0>
2025-01-10T13:23:47.8071715Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34aa24b0>
2025-01-10T13:23:47.8071814Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8071819Z 
2025-01-10T13:23:47.8071956Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8072078Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8072162Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8072241Z         try:
2025-01-10T13:23:47.8072499Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8072589Z         except KeyError:
2025-01-10T13:23:47.8072733Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8072805Z     
2025-01-10T13:23:47.8072897Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8072991Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8073222Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8073359Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8073451Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8073543Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8073658Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8073663Z 
2025-01-10T13:23:47.8073787Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8073905Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8073914Z 
2025-01-10T13:23:47.8074053Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8074259Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8074373Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8074454Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8074602Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8074687Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8074799Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8074878Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8074962Z err_msg = None
2025-01-10T13:23:47.8074966Z 
2025-01-10T13:23:47.8075075Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8075168Z         if err_msg is None:
2025-01-10T13:23:47.8075267Z             if left.shape != right.shape:
2025-01-10T13:23:47.8075356Z                 raise_assert_detail(
2025-01-10T13:23:47.8075506Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8075581Z                 )
2025-01-10T13:23:47.8075658Z     
2025-01-10T13:23:47.8075732Z             diff = 0
2025-01-10T13:23:47.8075853Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8075941Z                 # count up differences
2025-01-10T13:23:47.8076116Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8076195Z                     diff += 1
2025-01-10T13:23:47.8076274Z     
2025-01-10T13:23:47.8076362Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8076502Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8076670Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8076780Z E           AssertionError: Series are different
2025-01-10T13:23:47.8076862Z E           
2025-01-10T13:23:47.8076968Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8077337Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8077704Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8078212Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8078224Z 
2025-01-10T13:23:47.8078530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8078729Z _____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-nu] ______
2025-01-10T13:23:47.8078735Z 
2025-01-10T13:23:47.8078866Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8078998Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8079102Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8079317Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8079444Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8079546Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8079622Z err_msg = None
2025-01-10T13:23:47.8079627Z 
2025-01-10T13:23:47.8079738Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8079820Z         if err_msg is None:
2025-01-10T13:23:47.8079919Z             if left.shape != right.shape:
2025-01-10T13:23:47.8080004Z                 raise_assert_detail(
2025-01-10T13:23:47.8080149Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8080225Z                 )
2025-01-10T13:23:47.8080352Z     
2025-01-10T13:23:47.8080494Z             diff = 0
2025-01-10T13:23:47.8080689Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8080853Z                 # count up differences
2025-01-10T13:23:47.8081134Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8081268Z                     diff += 1
2025-01-10T13:23:47.8081387Z     
2025-01-10T13:23:47.8081542Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8081701Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8081876Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8081989Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8082067Z E           
2025-01-10T13:23:47.8082186Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8082445Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8082714Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8082720Z 
2025-01-10T13:23:47.8083128Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8083140Z 
2025-01-10T13:23:47.8083313Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8083318Z 
2025-01-10T13:23:47.8083551Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c97d10>
2025-01-10T13:23:47.8083752Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34aa24b0>, attr = 'nu'
2025-01-10T13:23:47.8083901Z 
2025-01-10T13:23:47.8084057Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8084178Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8084269Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8084342Z         try:
2025-01-10T13:23:47.8084487Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8084569Z         except KeyError:
2025-01-10T13:23:47.8084713Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8084791Z     
2025-01-10T13:23:47.8084879Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8084982Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8085072Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8085210Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8085297Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8085396Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8085513Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8085628Z 
2025-01-10T13:23:47.8085763Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8085876Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8086033Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8086104Z     ???
2025-01-10T13:23:47.8086219Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8086224Z 
2025-01-10T13:23:47.8086299Z >   ???
2025-01-10T13:23:47.8086426Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8086503Z E   
2025-01-10T13:23:47.8086634Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8086753Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8086827Z E          ...
2025-01-10T13:23:47.8086919Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8087059Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8087178Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8087252Z E          ...
2025-01-10T13:23:47.8087344Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8087475Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8087586Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8087590Z 
2025-01-10T13:23:47.8087684Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8087902Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-wavelength_cm] _
2025-01-10T13:23:47.8087908Z 
2025-01-10T13:23:47.8088042Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8088171Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8088279Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8088413Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8088544Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8088640Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8088721Z err_msg = None
2025-01-10T13:23:47.8088726Z 
2025-01-10T13:23:47.8088839Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8088921Z         if err_msg is None:
2025-01-10T13:23:47.8089021Z             if left.shape != right.shape:
2025-01-10T13:23:47.8089106Z                 raise_assert_detail(
2025-01-10T13:23:47.8089253Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8089325Z                 )
2025-01-10T13:23:47.8089398Z     
2025-01-10T13:23:47.8089473Z             diff = 0
2025-01-10T13:23:47.8089589Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8089775Z                 # count up differences
2025-01-10T13:23:47.8089954Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8090032Z                     diff += 1
2025-01-10T13:23:47.8090110Z     
2025-01-10T13:23:47.8090198Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8090336Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8090510Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8090623Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8090701Z E           
2025-01-10T13:23:47.8090813Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8091075Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8091421Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8091434Z 
2025-01-10T13:23:47.8091735Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8091741Z 
2025-01-10T13:23:47.8091916Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8091921Z 
2025-01-10T13:23:47.8092143Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c97dd0>
2025-01-10T13:23:47.8092317Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34aa24b0>
2025-01-10T13:23:47.8092401Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8092410Z 
2025-01-10T13:23:47.8092553Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8092672Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8092757Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8092834Z         try:
2025-01-10T13:23:47.8092973Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8093158Z         except KeyError:
2025-01-10T13:23:47.8093298Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8093374Z     
2025-01-10T13:23:47.8093461Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8093560Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8093650Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8093785Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8093875Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8093977Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8094092Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8094102Z 
2025-01-10T13:23:47.8094226Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8094343Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8094489Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8094567Z     ???
2025-01-10T13:23:47.8094675Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8094680Z 
2025-01-10T13:23:47.8094756Z >   ???
2025-01-10T13:23:47.8094881Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8094957Z E   
2025-01-10T13:23:47.8095084Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8095200Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8095273Z E          ...
2025-01-10T13:23:47.8095518Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8095661Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8095774Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8095853Z E          ...
2025-01-10T13:23:47.8095941Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8096071Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8096176Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8096181Z 
2025-01-10T13:23:47.8096274Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8096478Z ____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-f_lu] _____
2025-01-10T13:23:47.8096482Z 
2025-01-10T13:23:47.8096617Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8096743Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8096852Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8097098Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8097222Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8097323Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8097399Z err_msg = None
2025-01-10T13:23:47.8097404Z 
2025-01-10T13:23:47.8097519Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8097602Z         if err_msg is None:
2025-01-10T13:23:47.8097704Z             if left.shape != right.shape:
2025-01-10T13:23:47.8097788Z                 raise_assert_detail(
2025-01-10T13:23:47.8097933Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8098005Z                 )
2025-01-10T13:23:47.8098081Z     
2025-01-10T13:23:47.8098164Z             diff = 0
2025-01-10T13:23:47.8098280Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8098377Z                 # count up differences
2025-01-10T13:23:47.8098545Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8098628Z                     diff += 1
2025-01-10T13:23:47.8098699Z     
2025-01-10T13:23:47.8098793Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8098930Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8099183Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8099371Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8099499Z E           
2025-01-10T13:23:47.8099679Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8100136Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8100420Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8100427Z 
2025-01-10T13:23:47.8100726Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8100731Z 
2025-01-10T13:23:47.8100903Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8100907Z 
2025-01-10T13:23:47.8101134Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61c97e90>
2025-01-10T13:23:47.8101337Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34aa24b0>, attr = 'f_lu'
2025-01-10T13:23:47.8101454Z 
2025-01-10T13:23:47.8101630Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8101747Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8101837Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8101910Z         try:
2025-01-10T13:23:47.8102055Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8102137Z         except KeyError:
2025-01-10T13:23:47.8102277Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8102349Z     
2025-01-10T13:23:47.8102441Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8102536Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8102635Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8102776Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8102864Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8102966Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8103308Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8103313Z 
2025-01-10T13:23:47.8103442Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8103555Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8103707Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8103778Z     ???
2025-01-10T13:23:47.8103892Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8103897Z 
2025-01-10T13:23:47.8103967Z >   ???
2025-01-10T13:23:47.8104098Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8104173Z E   
2025-01-10T13:23:47.8104300Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8104418Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8104492Z E          ...
2025-01-10T13:23:47.8104592Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8104725Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8104842Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8104915Z E          ...
2025-01-10T13:23:47.8105006Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8105131Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8105238Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8105242Z 
2025-01-10T13:23:47.8105330Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8105547Z _ TestPlasma.test_plasma_properties[line_interaction_type:scatter-tau_sobolevs] _
2025-01-10T13:23:47.8105552Z 
2025-01-10T13:23:47.8105681Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8105807Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8105911Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8106046Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8106181Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8106277Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8106363Z err_msg = None
2025-01-10T13:23:47.8106368Z 
2025-01-10T13:23:47.8106475Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8106564Z         if err_msg is None:
2025-01-10T13:23:47.8106664Z             if left.shape != right.shape:
2025-01-10T13:23:47.8106749Z                 raise_assert_detail(
2025-01-10T13:23:47.8106899Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8106976Z                 )
2025-01-10T13:23:47.8107053Z     
2025-01-10T13:23:47.8107129Z             diff = 0
2025-01-10T13:23:47.8107401Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8107498Z                 # count up differences
2025-01-10T13:23:47.8107677Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8107759Z                     diff += 1
2025-01-10T13:23:47.8107836Z     
2025-01-10T13:23:47.8107929Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8108075Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8108249Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8108370Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8108449Z E           
2025-01-10T13:23:47.8108561Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8108823Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8109184Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8109195Z 
2025-01-10T13:23:47.8109499Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8109504Z 
2025-01-10T13:23:47.8109683Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8109687Z 
2025-01-10T13:23:47.8109910Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b54650>
2025-01-10T13:23:47.8110086Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34aa24b0>
2025-01-10T13:23:47.8110171Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8110180Z 
2025-01-10T13:23:47.8110324Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8110443Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8117337Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8117454Z         try:
2025-01-10T13:23:47.8117630Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8117721Z         except KeyError:
2025-01-10T13:23:47.8117871Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8117949Z     
2025-01-10T13:23:47.8118045Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8118226Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8118389Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8118613Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8118761Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8118921Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8119129Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8119245Z             else:
2025-01-10T13:23:47.8119352Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8119465Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8119470Z 
2025-01-10T13:23:47.8119610Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8119729Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8119889Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8119968Z     ???
2025-01-10T13:23:47.8120079Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8120084Z 
2025-01-10T13:23:47.8120160Z >   ???
2025-01-10T13:23:47.8120289Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8120366Z E   
2025-01-10T13:23:47.8120685Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8120811Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8120887Z E          ...
2025-01-10T13:23:47.8120985Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8121117Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8121239Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8121312Z E          ...
2025-01-10T13:23:47.8121406Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8121537Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8121648Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8121653Z 
2025-01-10T13:23:47.8121754Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8121965Z ___ TestPlasma.test_plasma_properties[line_interaction_type:scatter-j_blues] ___
2025-01-10T13:23:47.8121970Z 
2025-01-10T13:23:47.8122111Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8122377Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8122484Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8122622Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8122754Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8122853Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8122931Z err_msg = None
2025-01-10T13:23:47.8122936Z 
2025-01-10T13:23:47.8123183Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8123273Z         if err_msg is None:
2025-01-10T13:23:47.8123377Z             if left.shape != right.shape:
2025-01-10T13:23:47.8123463Z                 raise_assert_detail(
2025-01-10T13:23:47.8123618Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8123704Z                 )
2025-01-10T13:23:47.8123781Z     
2025-01-10T13:23:47.8123855Z             diff = 0
2025-01-10T13:23:47.8123973Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8124066Z                 # count up differences
2025-01-10T13:23:47.8124242Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8124329Z                     diff += 1
2025-01-10T13:23:47.8124401Z     
2025-01-10T13:23:47.8124500Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8124636Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8124815Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8124929Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8125008Z E           
2025-01-10T13:23:47.8125120Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8125387Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8125641Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8125653Z 
2025-01-10T13:23:47.8125974Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8125980Z 
2025-01-10T13:23:47.8126164Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8126320Z 
2025-01-10T13:23:47.8126557Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b54890>
2025-01-10T13:23:47.8126732Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef34aa24b0>
2025-01-10T13:23:47.8126814Z attr = 'j_blues'
2025-01-10T13:23:47.8126819Z 
2025-01-10T13:23:47.8126961Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8127086Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8127173Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8127251Z         try:
2025-01-10T13:23:47.8127394Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8127482Z         except KeyError:
2025-01-10T13:23:47.8127624Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8127700Z     
2025-01-10T13:23:47.8127789Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8127891Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8127987Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8128235Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8128323Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8128425Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8128545Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8128618Z             else:
2025-01-10T13:23:47.8128722Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8128830Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8128835Z 
2025-01-10T13:23:47.8128968Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8129083Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8129236Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8129310Z     ???
2025-01-10T13:23:47.8129424Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8129438Z 
2025-01-10T13:23:47.8129509Z >   ???
2025-01-10T13:23:47.8129643Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8129720Z E   
2025-01-10T13:23:47.8129848Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8129966Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8130041Z E          ...
2025-01-10T13:23:47.8130135Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8130266Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8130383Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8130457Z E          ...
2025-01-10T13:23:47.8130548Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8130672Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8130782Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8130790Z 
2025-01-10T13:23:47.8130881Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8131099Z ___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines] ___
2025-01-10T13:23:47.8131103Z 
2025-01-10T13:23:47.8131236Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8131368Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8131476Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8131609Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8131739Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8131832Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8131914Z err_msg = None
2025-01-10T13:23:47.8131919Z 
2025-01-10T13:23:47.8132031Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8132214Z         if err_msg is None:
2025-01-10T13:23:47.8132324Z             if left.shape != right.shape:
2025-01-10T13:23:47.8132414Z                 raise_assert_detail(
2025-01-10T13:23:47.8132567Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8132639Z                 )
2025-01-10T13:23:47.8132713Z     
2025-01-10T13:23:47.8132787Z             diff = 0
2025-01-10T13:23:47.8132902Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8132994Z                 # count up differences
2025-01-10T13:23:47.8133272Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8133354Z                     diff += 1
2025-01-10T13:23:47.8133430Z     
2025-01-10T13:23:47.8133518Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8133658Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8133826Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8134072Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8134145Z E           
2025-01-10T13:23:47.8134262Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8134518Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8134778Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8134784Z 
2025-01-10T13:23:47.8135098Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8135110Z 
2025-01-10T13:23:47.8135282Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8135292Z 
2025-01-10T13:23:47.8135514Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b55610>
2025-01-10T13:23:47.8135682Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>
2025-01-10T13:23:47.8135755Z attr = 'lines'
2025-01-10T13:23:47.8135759Z 
2025-01-10T13:23:47.8135899Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8136016Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8136108Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8136180Z         try:
2025-01-10T13:23:47.8136329Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8136454Z         except KeyError:
2025-01-10T13:23:47.8136700Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8136830Z     
2025-01-10T13:23:47.8136978Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8137136Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8137281Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8137512Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8137607Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8137709Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8137823Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8137901Z             else:
2025-01-10T13:23:47.8137995Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8138108Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8138113Z 
2025-01-10T13:23:47.8138237Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8138354Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8138638Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8138720Z     ???
2025-01-10T13:23:47.8138834Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8138838Z 
2025-01-10T13:23:47.8138909Z >   ???
2025-01-10T13:23:47.8139041Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8139111Z E   
2025-01-10T13:23:47.8139245Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8139358Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8139437Z E          ...
2025-01-10T13:23:47.8139527Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8139661Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8139775Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8139853Z E          ...
2025-01-10T13:23:47.8139941Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8140074Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8140268Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8140273Z 
2025-01-10T13:23:47.8140363Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8140624Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index] _
2025-01-10T13:23:47.8140629Z 
2025-01-10T13:23:47.8140849Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b556d0>
2025-01-10T13:23:47.8141019Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>
2025-01-10T13:23:47.8141108Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8141113Z 
2025-01-10T13:23:47.8141251Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8141365Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8141457Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8141535Z         try:
2025-01-10T13:23:47.8141679Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8141773Z         except KeyError:
2025-01-10T13:23:47.8141911Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8141987Z     
2025-01-10T13:23:47.8142075Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8142175Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8142266Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8142406Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8142491Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8142586Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8142694Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8142699Z 
2025-01-10T13:23:47.8142826Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8142942Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8142950Z 
2025-01-10T13:23:47.8143259Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8143358Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8143466Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8143552Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8143690Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8143778Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8143882Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8143967Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8144043Z err_msg = None
2025-01-10T13:23:47.8144053Z 
2025-01-10T13:23:47.8144164Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8144250Z         if err_msg is None:
2025-01-10T13:23:47.8144346Z             if left.shape != right.shape:
2025-01-10T13:23:47.8144560Z                 raise_assert_detail(
2025-01-10T13:23:47.8144709Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8144788Z                 )
2025-01-10T13:23:47.8144858Z     
2025-01-10T13:23:47.8144936Z             diff = 0
2025-01-10T13:23:47.8145046Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8145140Z                 # count up differences
2025-01-10T13:23:47.8145309Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8145393Z                     diff += 1
2025-01-10T13:23:47.8145463Z     
2025-01-10T13:23:47.8145554Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8145689Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8145862Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8145972Z E           AssertionError: Series are different
2025-01-10T13:23:47.8146049Z E           
2025-01-10T13:23:47.8146289Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8146656Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8146988Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8147319Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8147329Z 
2025-01-10T13:23:47.8147637Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8147898Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index] _
2025-01-10T13:23:47.8147904Z 
2025-01-10T13:23:47.8148126Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b55790>
2025-01-10T13:23:47.8148299Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>
2025-01-10T13:23:47.8148397Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8148401Z 
2025-01-10T13:23:47.8148540Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8148664Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8148749Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8148826Z         try:
2025-01-10T13:23:47.8148969Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8149055Z         except KeyError:
2025-01-10T13:23:47.8149191Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8149267Z     
2025-01-10T13:23:47.8149353Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8149451Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8149539Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8149679Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8149769Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8149859Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8149972Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8150063Z 
2025-01-10T13:23:47.8150195Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8150313Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8150318Z 
2025-01-10T13:23:47.8150450Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8150539Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8150647Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8150736Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8150879Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8150961Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8151070Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8151153Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8151238Z err_msg = None
2025-01-10T13:23:47.8151243Z 
2025-01-10T13:23:47.8151429Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8151515Z         if err_msg is None:
2025-01-10T13:23:47.8151610Z             if left.shape != right.shape:
2025-01-10T13:23:47.8151699Z                 raise_assert_detail(
2025-01-10T13:23:47.8151839Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8151917Z                 )
2025-01-10T13:23:47.8151988Z     
2025-01-10T13:23:47.8152065Z             diff = 0
2025-01-10T13:23:47.8152181Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8152268Z                 # count up differences
2025-01-10T13:23:47.8152439Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8152518Z                     diff += 1
2025-01-10T13:23:47.8152593Z     
2025-01-10T13:23:47.8152680Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8152822Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8152996Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8153225Z E           AssertionError: Series are different
2025-01-10T13:23:47.8153298Z E           
2025-01-10T13:23:47.8153402Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8153769Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8154227Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8154915Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8154925Z 
2025-01-10T13:23:47.8155351Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8155556Z ____ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-nu] _____
2025-01-10T13:23:47.8155693Z 
2025-01-10T13:23:47.8155832Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8155965Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8156071Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8156211Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8156332Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8156428Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8156504Z err_msg = None
2025-01-10T13:23:47.8156509Z 
2025-01-10T13:23:47.8156622Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8156706Z         if err_msg is None:
2025-01-10T13:23:47.8156813Z             if left.shape != right.shape:
2025-01-10T13:23:47.8156896Z                 raise_assert_detail(
2025-01-10T13:23:47.8157047Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8157242Z                 )
2025-01-10T13:23:47.8157316Z     
2025-01-10T13:23:47.8157393Z             diff = 0
2025-01-10T13:23:47.8157507Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8157601Z                 # count up differences
2025-01-10T13:23:47.8157777Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8157858Z                     diff += 1
2025-01-10T13:23:47.8157927Z     
2025-01-10T13:23:47.8158019Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8158157Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8158329Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8158448Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8158524Z E           
2025-01-10T13:23:47.8158642Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8158910Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8159177Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8159183Z 
2025-01-10T13:23:47.8159491Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8159496Z 
2025-01-10T13:23:47.8159672Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8159683Z 
2025-01-10T13:23:47.8159911Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b559d0>
2025-01-10T13:23:47.8160107Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>, attr = 'nu'
2025-01-10T13:23:47.8160112Z 
2025-01-10T13:23:47.8160253Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8160370Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8160459Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8160530Z         try:
2025-01-10T13:23:47.8160675Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8160756Z         except KeyError:
2025-01-10T13:23:47.8160897Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8160966Z     
2025-01-10T13:23:47.8161056Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8161150Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8161339Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8161482Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8161569Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8161666Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8161776Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8161781Z 
2025-01-10T13:23:47.8161911Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8162023Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8162177Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8162248Z     ???
2025-01-10T13:23:47.8162362Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8162367Z 
2025-01-10T13:23:47.8162435Z >   ???
2025-01-10T13:23:47.8162567Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8162646Z E   
2025-01-10T13:23:47.8162774Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8162972Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8163163Z E          ...
2025-01-10T13:23:47.8163258Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8163388Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8163504Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8163575Z E          ...
2025-01-10T13:23:47.8163662Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8163785Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8163894Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8163899Z 
2025-01-10T13:23:47.8163987Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8164221Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-wavelength_cm] _
2025-01-10T13:23:47.8164225Z 
2025-01-10T13:23:47.8164363Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8164495Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8164598Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8164731Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8164857Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8164950Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8165030Z err_msg = None
2025-01-10T13:23:47.8165034Z 
2025-01-10T13:23:47.8165145Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8165233Z         if err_msg is None:
2025-01-10T13:23:47.8165337Z             if left.shape != right.shape:
2025-01-10T13:23:47.8165421Z                 raise_assert_detail(
2025-01-10T13:23:47.8165571Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8165647Z                 )
2025-01-10T13:23:47.8165720Z     
2025-01-10T13:23:47.8165792Z             diff = 0
2025-01-10T13:23:47.8165907Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8165994Z                 # count up differences
2025-01-10T13:23:47.8166166Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8166244Z                     diff += 1
2025-01-10T13:23:47.8166321Z     
2025-01-10T13:23:47.8166409Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8166549Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8166718Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8166836Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8166916Z E           
2025-01-10T13:23:47.8167172Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8167435Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8167691Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8167701Z 
2025-01-10T13:23:47.8168000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8168005Z 
2025-01-10T13:23:47.8168176Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8168286Z 
2025-01-10T13:23:47.8168510Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b55a90>
2025-01-10T13:23:47.8168680Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>
2025-01-10T13:23:47.8168761Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8168766Z 
2025-01-10T13:23:47.8168906Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8169020Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8169107Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8169180Z         try:
2025-01-10T13:23:47.8169322Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8169407Z         except KeyError:
2025-01-10T13:23:47.8169543Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8169619Z     
2025-01-10T13:23:47.8169706Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8169804Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8169903Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8170038Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8170124Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8170215Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8170326Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8170331Z 
2025-01-10T13:23:47.8170460Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8170569Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8170719Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8170796Z     ???
2025-01-10T13:23:47.8170904Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8170908Z 
2025-01-10T13:23:47.8170982Z >   ???
2025-01-10T13:23:47.8171108Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8171184Z E   
2025-01-10T13:23:47.8171316Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8171432Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8171506Z E          ...
2025-01-10T13:23:47.8171602Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8171731Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8171848Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8171921Z E          ...
2025-01-10T13:23:47.8172020Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8172152Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8172259Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8172264Z 
2025-01-10T13:23:47.8172391Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8172757Z ___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-f_lu] ____
2025-01-10T13:23:47.8172877Z 
2025-01-10T13:23:47.8173222Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8173445Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8173603Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8173741Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8173868Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8173966Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8174043Z err_msg = None
2025-01-10T13:23:47.8174047Z 
2025-01-10T13:23:47.8174158Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8174240Z         if err_msg is None:
2025-01-10T13:23:47.8174339Z             if left.shape != right.shape:
2025-01-10T13:23:47.8174425Z                 raise_assert_detail(
2025-01-10T13:23:47.8174581Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8174778Z                 )
2025-01-10T13:23:47.8174853Z     
2025-01-10T13:23:47.8174930Z             diff = 0
2025-01-10T13:23:47.8175050Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8175137Z                 # count up differences
2025-01-10T13:23:47.8175309Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8175393Z                     diff += 1
2025-01-10T13:23:47.8175463Z     
2025-01-10T13:23:47.8175562Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8175697Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8175871Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8175984Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8176061Z E           
2025-01-10T13:23:47.8176178Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8176441Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8176702Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8176707Z 
2025-01-10T13:23:47.8177010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8177014Z 
2025-01-10T13:23:47.8177193Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8177202Z 
2025-01-10T13:23:47.8177429Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b55b50>
2025-01-10T13:23:47.8177635Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>, attr = 'f_lu'
2025-01-10T13:23:47.8177640Z 
2025-01-10T13:23:47.8177783Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8177900Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8177992Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8178065Z         try:
2025-01-10T13:23:47.8178212Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8178294Z         except KeyError:
2025-01-10T13:23:47.8178437Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8178512Z     
2025-01-10T13:23:47.8178604Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8178698Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8178913Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8179050Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8179139Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8179234Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8179345Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8179350Z 
2025-01-10T13:23:47.8179478Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8179590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8179740Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8179812Z     ???
2025-01-10T13:23:47.8179924Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8179928Z 
2025-01-10T13:23:47.8179999Z >   ???
2025-01-10T13:23:47.8180128Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8180206Z E   
2025-01-10T13:23:47.8180338Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8180567Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8180645Z E          ...
2025-01-10T13:23:47.8180738Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8180869Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8180987Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8181060Z E          ...
2025-01-10T13:23:47.8181150Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8181274Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8181383Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8181388Z 
2025-01-10T13:23:47.8181477Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8181702Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs] _
2025-01-10T13:23:47.8181711Z 
2025-01-10T13:23:47.8181839Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8181975Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8182080Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8182214Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8182339Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8182432Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8182510Z err_msg = None
2025-01-10T13:23:47.8182514Z 
2025-01-10T13:23:47.8182623Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8182709Z         if err_msg is None:
2025-01-10T13:23:47.8182802Z             if left.shape != right.shape:
2025-01-10T13:23:47.8182891Z                 raise_assert_detail(
2025-01-10T13:23:47.8183173Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8183253Z                 )
2025-01-10T13:23:47.8183328Z     
2025-01-10T13:23:47.8183401Z             diff = 0
2025-01-10T13:23:47.8183517Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8183604Z                 # count up differences
2025-01-10T13:23:47.8183777Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8183855Z                     diff += 1
2025-01-10T13:23:47.8183930Z     
2025-01-10T13:23:47.8184019Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8184159Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8184330Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8184447Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8184519Z E           
2025-01-10T13:23:47.8184765Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8185030Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8185285Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8185291Z 
2025-01-10T13:23:47.8185603Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8185608Z 
2025-01-10T13:23:47.8185787Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8185891Z 
2025-01-10T13:23:47.8186117Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b562d0>
2025-01-10T13:23:47.8186290Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>
2025-01-10T13:23:47.8186371Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8186376Z 
2025-01-10T13:23:47.8186517Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8186634Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8186723Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8186797Z         try:
2025-01-10T13:23:47.8186941Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8187022Z         except KeyError:
2025-01-10T13:23:47.8187166Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8187242Z     
2025-01-10T13:23:47.8187332Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8187440Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8187534Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8187671Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8187758Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8187853Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8187962Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8188039Z             else:
2025-01-10T13:23:47.8188133Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8188242Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8188248Z 
2025-01-10T13:23:47.8188372Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8188488Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8188639Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8188711Z     ???
2025-01-10T13:23:47.8188829Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8188838Z 
2025-01-10T13:23:47.8188908Z >   ???
2025-01-10T13:23:47.8189041Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8189111Z E   
2025-01-10T13:23:47.8189242Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8189355Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8189431Z E          ...
2025-01-10T13:23:47.8189518Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8189650Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8189762Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8189839Z E          ...
2025-01-10T13:23:47.8189930Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8190052Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8190160Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8190279Z 
2025-01-10T13:23:47.8190381Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8190616Z _ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-beta_sobolev] _
2025-01-10T13:23:47.8190623Z 
2025-01-10T13:23:47.8190849Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8191067Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8191225Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8191450Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8191664Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8191781Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8191863Z err_msg = None
2025-01-10T13:23:47.8191868Z 
2025-01-10T13:23:47.8191986Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8192175Z         if err_msg is None:
2025-01-10T13:23:47.8192272Z             if left.shape != right.shape:
2025-01-10T13:23:47.8192360Z                 raise_assert_detail(
2025-01-10T13:23:47.8192503Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8192582Z                 )
2025-01-10T13:23:47.8192652Z     
2025-01-10T13:23:47.8192730Z             diff = 0
2025-01-10T13:23:47.8192842Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8192933Z                 # count up differences
2025-01-10T13:23:47.8193343Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8193469Z                     diff += 1
2025-01-10T13:23:47.8193547Z     
2025-01-10T13:23:47.8193637Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8193782Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8193954Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8194076Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8194149Z E           
2025-01-10T13:23:47.8194265Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8194521Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8194783Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8194792Z 
2025-01-10T13:23:47.8195106Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8195111Z 
2025-01-10T13:23:47.8195281Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8195287Z 
2025-01-10T13:23:47.8195515Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b56390>
2025-01-10T13:23:47.8195683Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>
2025-01-10T13:23:47.8195772Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8195777Z 
2025-01-10T13:23:47.8195919Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8196036Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8196124Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8196197Z         try:
2025-01-10T13:23:47.8196340Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8196553Z         except KeyError:
2025-01-10T13:23:47.8196694Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8196769Z     
2025-01-10T13:23:47.8196858Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8196952Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8197044Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8197176Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8197265Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8197359Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8197468Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8197546Z             else:
2025-01-10T13:23:47.8197640Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8197750Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8197755Z 
2025-01-10T13:23:47.8197879Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8198001Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8198263Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8198338Z     ???
2025-01-10T13:23:47.8198443Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8198448Z 
2025-01-10T13:23:47.8198524Z >   ???
2025-01-10T13:23:47.8198653Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8198723Z E   
2025-01-10T13:23:47.8198855Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8198966Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8199050Z E          ...
2025-01-10T13:23:47.8199139Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8199274Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8199387Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8199466Z E          ...
2025-01-10T13:23:47.8199559Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8199694Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8199798Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8199803Z 
2025-01-10T13:23:47.8199900Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8200111Z __ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-j_blues] __
2025-01-10T13:23:47.8200116Z 
2025-01-10T13:23:47.8200242Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8200376Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8200474Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8200612Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8200734Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8200839Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8200915Z err_msg = None
2025-01-10T13:23:47.8200920Z 
2025-01-10T13:23:47.8201040Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8201130Z         if err_msg is None:
2025-01-10T13:23:47.8201226Z             if left.shape != right.shape:
2025-01-10T13:23:47.8201318Z                 raise_assert_detail(
2025-01-10T13:23:47.8201460Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8201572Z                 )
2025-01-10T13:23:47.8201643Z     
2025-01-10T13:23:47.8201722Z             diff = 0
2025-01-10T13:23:47.8201833Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8201926Z                 # count up differences
2025-01-10T13:23:47.8202093Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8202177Z                     diff += 1
2025-01-10T13:23:47.8202335Z     
2025-01-10T13:23:47.8202434Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8202570Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8202743Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8202859Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8202932Z E           
2025-01-10T13:23:47.8203189Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8203445Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8203705Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8203835Z 
2025-01-10T13:23:47.8204146Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8204151Z 
2025-01-10T13:23:47.8204319Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8204324Z 
2025-01-10T13:23:47.8204549Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b56510>
2025-01-10T13:23:47.8204717Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef348ccbc0>
2025-01-10T13:23:47.8204800Z attr = 'j_blues'
2025-01-10T13:23:47.8204804Z 
2025-01-10T13:23:47.8204941Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8205062Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8205152Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8205234Z         try:
2025-01-10T13:23:47.8205380Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8205463Z         except KeyError:
2025-01-10T13:23:47.8205605Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8205677Z     
2025-01-10T13:23:47.8205769Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8205863Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8205958Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8206089Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8206180Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8206271Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8206386Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8206458Z             else:
2025-01-10T13:23:47.8206558Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8206669Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8206681Z 
2025-01-10T13:23:47.8206807Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8206923Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8207070Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8207146Z     ???
2025-01-10T13:23:47.8207255Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8207260Z 
2025-01-10T13:23:47.8207336Z >   ???
2025-01-10T13:23:47.8207463Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8207540Z E   
2025-01-10T13:23:47.8207668Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8207787Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8207861Z E          ...
2025-01-10T13:23:47.8207955Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8208212Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8208333Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8208413Z E          ...
2025-01-10T13:23:47.8208502Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8208634Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8208740Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8208745Z 
2025-01-10T13:23:47.8208840Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8209191Z __ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines] ___
2025-01-10T13:23:47.8209201Z 
2025-01-10T13:23:47.8209433Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8209658Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8209768Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8209915Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8210161Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8210265Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8210343Z err_msg = None
2025-01-10T13:23:47.8210347Z 
2025-01-10T13:23:47.8210465Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8210548Z         if err_msg is None:
2025-01-10T13:23:47.8210650Z             if left.shape != right.shape:
2025-01-10T13:23:47.8210736Z                 raise_assert_detail(
2025-01-10T13:23:47.8210887Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8210959Z                 )
2025-01-10T13:23:47.8211033Z     
2025-01-10T13:23:47.8211114Z             diff = 0
2025-01-10T13:23:47.8211224Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8211323Z                 # count up differences
2025-01-10T13:23:47.8211501Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8211588Z                     diff += 1
2025-01-10T13:23:47.8211658Z     
2025-01-10T13:23:47.8211753Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8211892Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8212065Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8212179Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8212257Z E           
2025-01-10T13:23:47.8212369Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8212631Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8212902Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8212908Z 
2025-01-10T13:23:47.8213380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8213387Z 
2025-01-10T13:23:47.8213563Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8213569Z 
2025-01-10T13:23:47.8213795Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b57290>
2025-01-10T13:23:47.8213964Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>
2025-01-10T13:23:47.8214170Z attr = 'lines'
2025-01-10T13:23:47.8214175Z 
2025-01-10T13:23:47.8214324Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8214446Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8214532Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8214608Z         try:
2025-01-10T13:23:47.8214749Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8214835Z         except KeyError:
2025-01-10T13:23:47.8214974Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8215050Z     
2025-01-10T13:23:47.8215139Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8215239Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8215336Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8215469Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8215560Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8215651Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8215772Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8216013Z             else:
2025-01-10T13:23:47.8216115Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8216225Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8216230Z 
2025-01-10T13:23:47.8216361Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8216473Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8216620Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8216693Z     ???
2025-01-10T13:23:47.8216807Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8216812Z 
2025-01-10T13:23:47.8216891Z >   ???
2025-01-10T13:23:47.8217019Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8217095Z E   
2025-01-10T13:23:47.8217223Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8217343Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8217421Z E          ...
2025-01-10T13:23:47.8217515Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8217645Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8217763Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8217836Z E          ...
2025-01-10T13:23:47.8217928Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8218052Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8218159Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8218164Z 
2025-01-10T13:23:47.8218259Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8218518Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index] _
2025-01-10T13:23:47.8218524Z 
2025-01-10T13:23:47.8218749Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b57350>
2025-01-10T13:23:47.8218928Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>
2025-01-10T13:23:47.8219022Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8219027Z 
2025-01-10T13:23:47.8219164Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8219283Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8219368Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8219446Z         try:
2025-01-10T13:23:47.8219590Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8219672Z         except KeyError:
2025-01-10T13:23:47.8219815Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8219887Z     
2025-01-10T13:23:47.8219978Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8220073Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8220168Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8220393Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8220488Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8220578Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8220696Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8220700Z 
2025-01-10T13:23:47.8220825Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8220940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8220946Z 
2025-01-10T13:23:47.8221087Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8221176Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8221290Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8221372Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8221518Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8221607Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8221796Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8221875Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8221958Z err_msg = None
2025-01-10T13:23:47.8221962Z 
2025-01-10T13:23:47.8222072Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8222159Z         if err_msg is None:
2025-01-10T13:23:47.8222259Z             if left.shape != right.shape:
2025-01-10T13:23:47.8222347Z                 raise_assert_detail(
2025-01-10T13:23:47.8222494Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8222567Z                 )
2025-01-10T13:23:47.8222644Z     
2025-01-10T13:23:47.8222718Z             diff = 0
2025-01-10T13:23:47.8222833Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8222921Z                 # count up differences
2025-01-10T13:23:47.8223205Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8223297Z                     diff += 1
2025-01-10T13:23:47.8223372Z     
2025-01-10T13:23:47.8223460Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8223602Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8223775Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8223886Z E           AssertionError: Series are different
2025-01-10T13:23:47.8223968Z E           
2025-01-10T13:23:47.8224073Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8224445Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8224778Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8225109Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8225114Z 
2025-01-10T13:23:47.8225428Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8225817Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index] _
2025-01-10T13:23:47.8225823Z 
2025-01-10T13:23:47.8226046Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b57410>
2025-01-10T13:23:47.8226218Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>
2025-01-10T13:23:47.8226309Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8226313Z 
2025-01-10T13:23:47.8226453Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8226570Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8226659Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8226779Z         try:
2025-01-10T13:23:47.8227033Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8227171Z         except KeyError:
2025-01-10T13:23:47.8227416Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8227513Z     
2025-01-10T13:23:47.8227611Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8227841Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8227937Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8228079Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8228165Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8228261Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8228371Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8228377Z 
2025-01-10T13:23:47.8228507Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8228625Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8228630Z 
2025-01-10T13:23:47.8228770Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8228858Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8228971Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8229064Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8229208Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8229295Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8229400Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8229489Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8229566Z err_msg = None
2025-01-10T13:23:47.8229570Z 
2025-01-10T13:23:47.8229684Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8229766Z         if err_msg is None:
2025-01-10T13:23:47.8229864Z             if left.shape != right.shape:
2025-01-10T13:23:47.8229949Z                 raise_assert_detail(
2025-01-10T13:23:47.8230096Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8230169Z                 )
2025-01-10T13:23:47.8230249Z     
2025-01-10T13:23:47.8230323Z             diff = 0
2025-01-10T13:23:47.8230447Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8230540Z                 # count up differences
2025-01-10T13:23:47.8230711Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8230795Z                     diff += 1
2025-01-10T13:23:47.8230867Z     
2025-01-10T13:23:47.8230961Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8231097Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8231272Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8231378Z E           AssertionError: Series are different
2025-01-10T13:23:47.8231455Z E           
2025-01-10T13:23:47.8231558Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8231924Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8232391Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8232760Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8232863Z 
2025-01-10T13:23:47.8233299Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8233508Z ____ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-nu] ____
2025-01-10T13:23:47.8233513Z 
2025-01-10T13:23:47.8233641Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8233771Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8233871Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8234009Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8234130Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8234244Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8234327Z err_msg = None
2025-01-10T13:23:47.8234331Z 
2025-01-10T13:23:47.8234440Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8234528Z         if err_msg is None:
2025-01-10T13:23:47.8234623Z             if left.shape != right.shape:
2025-01-10T13:23:47.8234713Z                 raise_assert_detail(
2025-01-10T13:23:47.8234857Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8234936Z                 )
2025-01-10T13:23:47.8235007Z     
2025-01-10T13:23:47.8235085Z             diff = 0
2025-01-10T13:23:47.8235198Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8235290Z                 # count up differences
2025-01-10T13:23:47.8235456Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8235547Z                     diff += 1
2025-01-10T13:23:47.8235626Z     
2025-01-10T13:23:47.8235715Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8235855Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8236023Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8236142Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8236215Z E           
2025-01-10T13:23:47.8236332Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8236588Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8236851Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8236992Z 
2025-01-10T13:23:47.8237299Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8237304Z 
2025-01-10T13:23:47.8237475Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8237480Z 
2025-01-10T13:23:47.8237705Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b57650>
2025-01-10T13:23:47.8237905Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>, attr = 'nu'
2025-01-10T13:23:47.8237914Z 
2025-01-10T13:23:47.8238051Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8238172Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8238260Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8238467Z         try:
2025-01-10T13:23:47.8238609Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8238696Z         except KeyError:
2025-01-10T13:23:47.8238835Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8238909Z     
2025-01-10T13:23:47.8238998Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8239097Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8239187Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8239326Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8239415Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8239512Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8239628Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8239633Z 
2025-01-10T13:23:47.8239759Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8239886Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8240037Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8240118Z     ???
2025-01-10T13:23:47.8240236Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8240241Z 
2025-01-10T13:23:47.8240316Z >   ???
2025-01-10T13:23:47.8240447Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8240525Z E   
2025-01-10T13:23:47.8240657Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8240778Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8240853Z E          ...
2025-01-10T13:23:47.8240948Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8241085Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8241203Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8241286Z E          ...
2025-01-10T13:23:47.8241375Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8241511Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8241619Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8241624Z 
2025-01-10T13:23:47.8241716Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8241945Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-wavelength_cm] _
2025-01-10T13:23:47.8241950Z 
2025-01-10T13:23:47.8242090Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8242230Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8242331Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8242469Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8242596Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8242789Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8242866Z err_msg = None
2025-01-10T13:23:47.8242870Z 
2025-01-10T13:23:47.8242988Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8243273Z         if err_msg is None:
2025-01-10T13:23:47.8243378Z             if left.shape != right.shape:
2025-01-10T13:23:47.8243465Z                 raise_assert_detail(
2025-01-10T13:23:47.8243613Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8243691Z                 )
2025-01-10T13:23:47.8243761Z     
2025-01-10T13:23:47.8243841Z             diff = 0
2025-01-10T13:23:47.8243954Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8244049Z                 # count up differences
2025-01-10T13:23:47.8244217Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8244308Z                     diff += 1
2025-01-10T13:23:47.8244501Z     
2025-01-10T13:23:47.8244598Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8244735Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8244907Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8245024Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8245101Z E           
2025-01-10T13:23:47.8245293Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8245770Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8246232Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8246253Z 
2025-01-10T13:23:47.8246762Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8246769Z 
2025-01-10T13:23:47.8246950Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8246955Z 
2025-01-10T13:23:47.8247185Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b57710>
2025-01-10T13:23:47.8247353Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>
2025-01-10T13:23:47.8247442Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8247446Z 
2025-01-10T13:23:47.8247586Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8247708Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8247802Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8247880Z         try:
2025-01-10T13:23:47.8248021Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8248108Z         except KeyError:
2025-01-10T13:23:47.8248247Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8248323Z     
2025-01-10T13:23:47.8248415Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8248512Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8248607Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8248738Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8248830Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8248922Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8249038Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8249043Z 
2025-01-10T13:23:47.8249168Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8249429Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8249579Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8249655Z     ???
2025-01-10T13:23:47.8249764Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8249773Z 
2025-01-10T13:23:47.8249844Z >   ???
2025-01-10T13:23:47.8249978Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8250049Z E   
2025-01-10T13:23:47.8250182Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8250294Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8250372Z E          ...
2025-01-10T13:23:47.8250461Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8250599Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8250711Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8250793Z E          ...
2025-01-10T13:23:47.8250969Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8251101Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8251213Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8251223Z 
2025-01-10T13:23:47.8251311Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8251521Z ___ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-f_lu] ___
2025-01-10T13:23:47.8251526Z 
2025-01-10T13:23:47.8251654Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8251787Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8251884Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8252021Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8252144Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8252255Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8252333Z err_msg = None
2025-01-10T13:23:47.8252343Z 
2025-01-10T13:23:47.8252456Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8252544Z         if err_msg is None:
2025-01-10T13:23:47.8252640Z             if left.shape != right.shape:
2025-01-10T13:23:47.8252730Z                 raise_assert_detail(
2025-01-10T13:23:47.8252874Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8252951Z                 )
2025-01-10T13:23:47.8253200Z     
2025-01-10T13:23:47.8253285Z             diff = 0
2025-01-10T13:23:47.8253398Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8253491Z                 # count up differences
2025-01-10T13:23:47.8253658Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8253746Z                     diff += 1
2025-01-10T13:23:47.8253821Z     
2025-01-10T13:23:47.8253918Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8254053Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8254224Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8254342Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8254416Z E           
2025-01-10T13:23:47.8254533Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8254792Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8255054Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8255217Z 
2025-01-10T13:23:47.8255543Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8255549Z 
2025-01-10T13:23:47.8255725Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8255730Z 
2025-01-10T13:23:47.8255964Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b577d0>
2025-01-10T13:23:47.8256167Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>, attr = 'f_lu'
2025-01-10T13:23:47.8256172Z 
2025-01-10T13:23:47.8256315Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8256431Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8256527Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8256721Z         try:
2025-01-10T13:23:47.8256863Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8256951Z         except KeyError:
2025-01-10T13:23:47.8257090Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8257168Z     
2025-01-10T13:23:47.8257256Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8257356Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8257447Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8257586Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8257673Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8257767Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8257877Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8257882Z 
2025-01-10T13:23:47.8258011Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8258131Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8258283Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8258360Z     ???
2025-01-10T13:23:47.8258468Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8258472Z 
2025-01-10T13:23:47.8258547Z >   ???
2025-01-10T13:23:47.8258672Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8258747Z E   
2025-01-10T13:23:47.8258876Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8258994Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8259068Z E          ...
2025-01-10T13:23:47.8259163Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8259293Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8259411Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8259491Z E          ...
2025-01-10T13:23:47.8259581Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8259711Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8259817Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8259822Z 
2025-01-10T13:23:47.8259917Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8260150Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs] _
2025-01-10T13:23:47.8260155Z 
2025-01-10T13:23:47.8260286Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8260414Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8260515Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8260655Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8260779Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8260973Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8261053Z err_msg = None
2025-01-10T13:23:47.8261058Z 
2025-01-10T13:23:47.8261171Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8261253Z         if err_msg is None:
2025-01-10T13:23:47.8261353Z             if left.shape != right.shape:
2025-01-10T13:23:47.8261439Z                 raise_assert_detail(
2025-01-10T13:23:47.8261589Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8261720Z                 )
2025-01-10T13:23:47.8261854Z     
2025-01-10T13:23:47.8261984Z             diff = 0
2025-01-10T13:23:47.8262174Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8262273Z                 # count up differences
2025-01-10T13:23:47.8262447Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8262538Z                     diff += 1
2025-01-10T13:23:47.8262709Z     
2025-01-10T13:23:47.8262803Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8262943Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8263234Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8263352Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8263430Z E           
2025-01-10T13:23:47.8263544Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8263809Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8264071Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8264086Z 
2025-01-10T13:23:47.8264398Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8264404Z 
2025-01-10T13:23:47.8264581Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8264587Z 
2025-01-10T13:23:47.8264812Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b57f50>
2025-01-10T13:23:47.8264999Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>
2025-01-10T13:23:47.8265085Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8265090Z 
2025-01-10T13:23:47.8265231Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8265359Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8265450Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8265528Z         try:
2025-01-10T13:23:47.8265674Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8265761Z         except KeyError:
2025-01-10T13:23:47.8265903Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8265979Z     
2025-01-10T13:23:47.8266067Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8266167Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8266259Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8266398Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8266490Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8266582Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8266697Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8266772Z             else:
2025-01-10T13:23:47.8267000Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8267113Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8267118Z 
2025-01-10T13:23:47.8267247Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8267361Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8267514Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8267586Z     ???
2025-01-10T13:23:47.8267698Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8267702Z 
2025-01-10T13:23:47.8267779Z >   ???
2025-01-10T13:23:47.8267907Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8267982Z E   
2025-01-10T13:23:47.8268113Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8268231Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8268305Z E          ...
2025-01-10T13:23:47.8268403Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8268651Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8268768Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8268841Z E          ...
2025-01-10T13:23:47.8268933Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8269060Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8269174Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8269179Z 
2025-01-10T13:23:47.8269274Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8269498Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-beta_sobolev] _
2025-01-10T13:23:47.8269503Z 
2025-01-10T13:23:47.8269636Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8269764Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8269875Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8270014Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8270142Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8270238Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8270325Z err_msg = None
2025-01-10T13:23:47.8270329Z 
2025-01-10T13:23:47.8270444Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8270527Z         if err_msg is None:
2025-01-10T13:23:47.8270627Z             if left.shape != right.shape:
2025-01-10T13:23:47.8270713Z                 raise_assert_detail(
2025-01-10T13:23:47.8270862Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8270935Z                 )
2025-01-10T13:23:47.8271011Z     
2025-01-10T13:23:47.8271086Z             diff = 0
2025-01-10T13:23:47.8271206Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8271299Z                 # count up differences
2025-01-10T13:23:47.8271471Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8271550Z                     diff += 1
2025-01-10T13:23:47.8271626Z     
2025-01-10T13:23:47.8271715Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8271858Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8272033Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8272147Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8272225Z E           
2025-01-10T13:23:47.8272339Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8272601Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8272952Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8272963Z 
2025-01-10T13:23:47.8273423Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8273430Z 
2025-01-10T13:23:47.8273602Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8273608Z 
2025-01-10T13:23:47.8273830Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b88050>
2025-01-10T13:23:47.8274005Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>
2025-01-10T13:23:47.8274208Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8274213Z 
2025-01-10T13:23:47.8274356Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8274477Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8274562Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8274641Z         try:
2025-01-10T13:23:47.8274779Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8274866Z         except KeyError:
2025-01-10T13:23:47.8275005Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8275082Z     
2025-01-10T13:23:47.8275170Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8275268Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8275358Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8275494Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8275581Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8275679Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8275794Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8275876Z             else:
2025-01-10T13:23:47.8275976Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8276088Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8276094Z 
2025-01-10T13:23:47.8276224Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8276338Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8276491Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8276563Z     ???
2025-01-10T13:23:47.8276679Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8276685Z 
2025-01-10T13:23:47.8276754Z >   ???
2025-01-10T13:23:47.8276890Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8276960Z E   
2025-01-10T13:23:47.8277100Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8277217Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8277296Z E          ...
2025-01-10T13:23:47.8277390Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8277524Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8277643Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8277717Z E          ...
2025-01-10T13:23:47.8277809Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8277935Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8278043Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8278048Z 
2025-01-10T13:23:47.8278138Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8278350Z _ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-j_blues] __
2025-01-10T13:23:47.8278355Z 
2025-01-10T13:23:47.8278624Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8278761Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8278865Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8278998Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8279125Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8279220Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8279300Z err_msg = None
2025-01-10T13:23:47.8279304Z 
2025-01-10T13:23:47.8279416Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8279502Z         if err_msg is None:
2025-01-10T13:23:47.8279597Z             if left.shape != right.shape:
2025-01-10T13:23:47.8279686Z                 raise_assert_detail(
2025-01-10T13:23:47.8279834Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8279993Z                 )
2025-01-10T13:23:47.8280068Z     
2025-01-10T13:23:47.8280141Z             diff = 0
2025-01-10T13:23:47.8280277Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8280438Z                 # count up differences
2025-01-10T13:23:47.8280745Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8280871Z                     diff += 1
2025-01-10T13:23:47.8280990Z     
2025-01-10T13:23:47.8281131Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8281364Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8281829Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8281950Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8282030Z E           
2025-01-10T13:23:47.8282143Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8282415Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8282671Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8282677Z 
2025-01-10T13:23:47.8282989Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8282994Z 
2025-01-10T13:23:47.8283291Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8283305Z 
2025-01-10T13:23:47.8283526Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b881d0>
2025-01-10T13:23:47.8283700Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f01fb60>
2025-01-10T13:23:47.8283779Z attr = 'j_blues'
2025-01-10T13:23:47.8283783Z 
2025-01-10T13:23:47.8283931Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8284048Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8284149Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8284222Z         try:
2025-01-10T13:23:47.8284370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8284454Z         except KeyError:
2025-01-10T13:23:47.8284598Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8284675Z     
2025-01-10T13:23:47.8284766Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8284868Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8285097Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8285244Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8285331Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8285426Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8285536Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8285614Z             else:
2025-01-10T13:23:47.8285712Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8285825Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8285830Z 
2025-01-10T13:23:47.8285955Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8286076Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8286228Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8286303Z     ???
2025-01-10T13:23:47.8286420Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8286533Z 
2025-01-10T13:23:47.8286609Z >   ???
2025-01-10T13:23:47.8286744Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8286815Z E   
2025-01-10T13:23:47.8286948Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8287064Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8287145Z E          ...
2025-01-10T13:23:47.8287234Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8294329Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8294504Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8294584Z E          ...
2025-01-10T13:23:47.8294686Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8294826Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8294942Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8294954Z 
2025-01-10T13:23:47.8295050Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8295279Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines] ___
2025-01-10T13:23:47.8295284Z 
2025-01-10T13:23:47.8295422Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8295567Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8295680Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8295821Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8295960Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8296059Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8296149Z err_msg = None
2025-01-10T13:23:47.8296154Z 
2025-01-10T13:23:47.8296274Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8296367Z         if err_msg is None:
2025-01-10T13:23:47.8296471Z             if left.shape != right.shape:
2025-01-10T13:23:47.8296564Z                 raise_assert_detail(
2025-01-10T13:23:47.8296716Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8296797Z                 )
2025-01-10T13:23:47.8296873Z     
2025-01-10T13:23:47.8296947Z             diff = 0
2025-01-10T13:23:47.8297068Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8297158Z                 # count up differences
2025-01-10T13:23:47.8297337Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8297416Z                     diff += 1
2025-01-10T13:23:47.8297493Z     
2025-01-10T13:23:47.8297585Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8297732Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8297904Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8298225Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8298301Z E           
2025-01-10T13:23:47.8298422Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8298683Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8298950Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8298956Z 
2025-01-10T13:23:47.8299371Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8299552Z 
2025-01-10T13:23:47.8299861Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8299883Z 
2025-01-10T13:23:47.8300270Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b88f50>
2025-01-10T13:23:47.8300562Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>
2025-01-10T13:23:47.8300692Z attr = 'lines'
2025-01-10T13:23:47.8300699Z 
2025-01-10T13:23:47.8300933Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8301127Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8301278Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8301408Z         try:
2025-01-10T13:23:47.8301621Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8301708Z         except KeyError:
2025-01-10T13:23:47.8301862Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8301939Z     
2025-01-10T13:23:47.8302034Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8302138Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8302230Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8302374Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8302461Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8302557Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8302668Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8302746Z             else:
2025-01-10T13:23:47.8302842Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8302955Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8302960Z 
2025-01-10T13:23:47.8303209Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8303333Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8303489Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8303574Z     ???
2025-01-10T13:23:47.8303690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8303696Z 
2025-01-10T13:23:47.8303766Z >   ???
2025-01-10T13:23:47.8303902Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8303973Z E   
2025-01-10T13:23:47.8304108Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8304224Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8304304Z E          ...
2025-01-10T13:23:47.8304395Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8304534Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8304647Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8304729Z E          ...
2025-01-10T13:23:47.8304816Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8305115Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8305234Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8305238Z 
2025-01-10T13:23:47.8305331Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8305603Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index] _
2025-01-10T13:23:47.8305609Z 
2025-01-10T13:23:47.8305830Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b89010>
2025-01-10T13:23:47.8306004Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>
2025-01-10T13:23:47.8306094Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8306099Z 
2025-01-10T13:23:47.8306248Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8306365Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8306458Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8306537Z         try:
2025-01-10T13:23:47.8306692Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8306908Z         except KeyError:
2025-01-10T13:23:47.8307049Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8307127Z     
2025-01-10T13:23:47.8307213Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8307313Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8307406Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8307547Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8307640Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8307738Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8307849Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8307854Z 
2025-01-10T13:23:47.8307986Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8308107Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8308117Z 
2025-01-10T13:23:47.8308260Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8308352Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8308460Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8308548Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8308688Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8308776Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8308882Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8308969Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8309049Z err_msg = None
2025-01-10T13:23:47.8309054Z 
2025-01-10T13:23:47.8309174Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8309263Z         if err_msg is None:
2025-01-10T13:23:47.8309361Z             if left.shape != right.shape:
2025-01-10T13:23:47.8309455Z                 raise_assert_detail(
2025-01-10T13:23:47.8309606Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8309686Z                 )
2025-01-10T13:23:47.8309757Z     
2025-01-10T13:23:47.8309837Z             diff = 0
2025-01-10T13:23:47.8309950Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8310045Z                 # count up differences
2025-01-10T13:23:47.8310215Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8310301Z                     diff += 1
2025-01-10T13:23:47.8310369Z     
2025-01-10T13:23:47.8310460Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8310605Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8310775Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8310887Z E           AssertionError: Series are different
2025-01-10T13:23:47.8311054Z E           
2025-01-10T13:23:47.8311167Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8311536Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8311862Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8312195Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8312275Z 
2025-01-10T13:23:47.8312596Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8312855Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index] _
2025-01-10T13:23:47.8312861Z 
2025-01-10T13:23:47.8313243Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b890d0>
2025-01-10T13:23:47.8313413Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>
2025-01-10T13:23:47.8313510Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8313515Z 
2025-01-10T13:23:47.8313663Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8313789Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8313878Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8313950Z         try:
2025-01-10T13:23:47.8314094Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8314177Z         except KeyError:
2025-01-10T13:23:47.8314318Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8314389Z     
2025-01-10T13:23:47.8314478Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8314570Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8314664Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8314798Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8314893Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8314984Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8315101Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8315112Z 
2025-01-10T13:23:47.8315243Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8315357Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8315363Z 
2025-01-10T13:23:47.8315504Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8315590Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8315703Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8315784Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8315928Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8316012Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8316122Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8316207Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8316452Z err_msg = None
2025-01-10T13:23:47.8316462Z 
2025-01-10T13:23:47.8316574Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8316655Z         if err_msg is None:
2025-01-10T13:23:47.8316757Z             if left.shape != right.shape:
2025-01-10T13:23:47.8316842Z                 raise_assert_detail(
2025-01-10T13:23:47.8316989Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8317062Z                 )
2025-01-10T13:23:47.8317137Z     
2025-01-10T13:23:47.8317211Z             diff = 0
2025-01-10T13:23:47.8317327Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8317416Z                 # count up differences
2025-01-10T13:23:47.8317590Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8317674Z                     diff += 1
2025-01-10T13:23:47.8317744Z     
2025-01-10T13:23:47.8317851Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8318100Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8318598Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8318779Z E           AssertionError: Series are different
2025-01-10T13:23:47.8318905Z E           
2025-01-10T13:23:47.8319072Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8319698Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8320074Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8320454Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8320460Z 
2025-01-10T13:23:47.8320779Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8320987Z ____ TestPlasma.test_plasma_properties[disable_electron_scattering:True-nu] ____
2025-01-10T13:23:47.8320995Z 
2025-01-10T13:23:47.8321123Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8321260Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8321359Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8321496Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8321617Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8321716Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8321793Z err_msg = None
2025-01-10T13:23:47.8321803Z 
2025-01-10T13:23:47.8321911Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8321996Z         if err_msg is None:
2025-01-10T13:23:47.8322092Z             if left.shape != right.shape:
2025-01-10T13:23:47.8322183Z                 raise_assert_detail(
2025-01-10T13:23:47.8322429Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8322510Z                 )
2025-01-10T13:23:47.8322581Z     
2025-01-10T13:23:47.8322663Z             diff = 0
2025-01-10T13:23:47.8322775Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8322867Z                 # count up differences
2025-01-10T13:23:47.8323180Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8323269Z                     diff += 1
2025-01-10T13:23:47.8323339Z     
2025-01-10T13:23:47.8323433Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8323582Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8323750Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8323869Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8323943Z E           
2025-01-10T13:23:47.8324067Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8324453Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8324715Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8324720Z 
2025-01-10T13:23:47.8325024Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8325029Z 
2025-01-10T13:23:47.8325205Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8325214Z 
2025-01-10T13:23:47.8325444Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b89310>
2025-01-10T13:23:47.8325642Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>, attr = 'nu'
2025-01-10T13:23:47.8325647Z 
2025-01-10T13:23:47.8325787Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8325903Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8325994Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8326075Z         try:
2025-01-10T13:23:47.8326216Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8326301Z         except KeyError:
2025-01-10T13:23:47.8326439Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8326514Z     
2025-01-10T13:23:47.8326605Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8326703Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8326797Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8326937Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8327024Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8327122Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8327232Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8327237Z 
2025-01-10T13:23:47.8327367Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8327488Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8327635Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8327712Z     ???
2025-01-10T13:23:47.8327823Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8327827Z 
2025-01-10T13:23:47.8327903Z >   ???
2025-01-10T13:23:47.8328032Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8328245Z E   
2025-01-10T13:23:47.8328375Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8328497Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8328571Z E          ...
2025-01-10T13:23:47.8328664Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8328795Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8328914Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8328992Z E          ...
2025-01-10T13:23:47.8329079Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8329209Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8329314Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8329319Z 
2025-01-10T13:23:47.8329412Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8329643Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-wavelength_cm] _
2025-01-10T13:23:47.8329653Z 
2025-01-10T13:23:47.8329785Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8330015Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8330119Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8330256Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8330378Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8330476Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8330552Z err_msg = None
2025-01-10T13:23:47.8330557Z 
2025-01-10T13:23:47.8330669Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8330752Z         if err_msg is None:
2025-01-10T13:23:47.8330851Z             if left.shape != right.shape:
2025-01-10T13:23:47.8330935Z                 raise_assert_detail(
2025-01-10T13:23:47.8331087Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8331164Z                 )
2025-01-10T13:23:47.8331237Z     
2025-01-10T13:23:47.8331311Z             diff = 0
2025-01-10T13:23:47.8331427Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8331521Z                 # count up differences
2025-01-10T13:23:47.8331688Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8331772Z                     diff += 1
2025-01-10T13:23:47.8331841Z     
2025-01-10T13:23:47.8331935Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8332070Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8332241Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8332353Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8332429Z E           
2025-01-10T13:23:47.8332542Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8332801Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8333172Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8333179Z 
2025-01-10T13:23:47.8333477Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8333482Z 
2025-01-10T13:23:47.8333653Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8333784Z 
2025-01-10T13:23:47.8334006Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b893d0>
2025-01-10T13:23:47.8334176Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>
2025-01-10T13:23:47.8334261Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8334266Z 
2025-01-10T13:23:47.8334402Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8334522Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8334607Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8334684Z         try:
2025-01-10T13:23:47.8334822Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8334908Z         except KeyError:
2025-01-10T13:23:47.8335043Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8335118Z     
2025-01-10T13:23:47.8335208Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8335316Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8335529Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8335731Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8335893Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8336048Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8336239Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8336248Z 
2025-01-10T13:23:47.8336458Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8336648Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8336889Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8337011Z     ???
2025-01-10T13:23:47.8337202Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8337211Z 
2025-01-10T13:23:47.8337302Z >   ???
2025-01-10T13:23:47.8337440Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8337520Z E   
2025-01-10T13:23:47.8337660Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8337772Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8337850Z E          ...
2025-01-10T13:23:47.8337939Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8338072Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8338185Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8338261Z E          ...
2025-01-10T13:23:47.8338347Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8338475Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8338577Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8338581Z 
2025-01-10T13:23:47.8338674Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8338879Z ___ TestPlasma.test_plasma_properties[disable_electron_scattering:True-f_lu] ___
2025-01-10T13:23:47.8338888Z 
2025-01-10T13:23:47.8339016Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8339147Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8339244Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8339380Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8339503Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8339602Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8339679Z err_msg = None
2025-01-10T13:23:47.8339685Z 
2025-01-10T13:23:47.8339800Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8339884Z         if err_msg is None:
2025-01-10T13:23:47.8339981Z             if left.shape != right.shape:
2025-01-10T13:23:47.8340071Z                 raise_assert_detail(
2025-01-10T13:23:47.8340326Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8340402Z                 )
2025-01-10T13:23:47.8340472Z     
2025-01-10T13:23:47.8340549Z             diff = 0
2025-01-10T13:23:47.8340660Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8340751Z                 # count up differences
2025-01-10T13:23:47.8340919Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8341002Z                     diff += 1
2025-01-10T13:23:47.8341071Z     
2025-01-10T13:23:47.8341164Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8341300Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8341473Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8341589Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8341670Z E           
2025-01-10T13:23:47.8341787Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8342123Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8342384Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8342389Z 
2025-01-10T13:23:47.8342696Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8342700Z 
2025-01-10T13:23:47.8342872Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8342880Z 
2025-01-10T13:23:47.8343229Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b89490>
2025-01-10T13:23:47.8343431Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>, attr = 'f_lu'
2025-01-10T13:23:47.8343436Z 
2025-01-10T13:23:47.8343577Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8343690Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8343786Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8343857Z         try:
2025-01-10T13:23:47.8343999Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8344088Z         except KeyError:
2025-01-10T13:23:47.8344226Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8344299Z     
2025-01-10T13:23:47.8344386Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8344484Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8344587Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8344723Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8344808Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8344904Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8345013Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8345017Z 
2025-01-10T13:23:47.8345145Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8345255Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8345404Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8345480Z     ???
2025-01-10T13:23:47.8345588Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8345592Z 
2025-01-10T13:23:47.8345666Z >   ???
2025-01-10T13:23:47.8345793Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8345994Z E   
2025-01-10T13:23:47.8346125Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8346239Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8346312Z E          ...
2025-01-10T13:23:47.8346404Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8346531Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8346645Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8346719Z E          ...
2025-01-10T13:23:47.8346807Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8346934Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8347035Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8347040Z 
2025-01-10T13:23:47.8347134Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8347355Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-tau_sobolevs] _
2025-01-10T13:23:47.8347365Z 
2025-01-10T13:23:47.8347609Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8347732Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8347833Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8347960Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8348087Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8348186Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8348263Z err_msg = None
2025-01-10T13:23:47.8348267Z 
2025-01-10T13:23:47.8348380Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8348461Z         if err_msg is None:
2025-01-10T13:23:47.8348559Z             if left.shape != right.shape:
2025-01-10T13:23:47.8348642Z                 raise_assert_detail(
2025-01-10T13:23:47.8348793Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8348869Z                 )
2025-01-10T13:23:47.8348945Z     
2025-01-10T13:23:47.8349018Z             diff = 0
2025-01-10T13:23:47.8349132Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8349220Z                 # count up differences
2025-01-10T13:23:47.8349390Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8349474Z                     diff += 1
2025-01-10T13:23:47.8349543Z     
2025-01-10T13:23:47.8349635Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8349768Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8349937Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8350048Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8350132Z E           
2025-01-10T13:23:47.8350243Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8350505Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8350763Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8350768Z 
2025-01-10T13:23:47.8351065Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8351070Z 
2025-01-10T13:23:47.8351347Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8351357Z 
2025-01-10T13:23:47.8351577Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b89c10>
2025-01-10T13:23:47.8351747Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>
2025-01-10T13:23:47.8351830Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8351835Z 
2025-01-10T13:23:47.8351974Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8352092Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8352179Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8352253Z         try:
2025-01-10T13:23:47.8352390Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8352474Z         except KeyError:
2025-01-10T13:23:47.8352610Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8352685Z     
2025-01-10T13:23:47.8352771Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8352874Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8353189Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8353328Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8353413Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8353556Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8353762Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8353877Z             else:
2025-01-10T13:23:47.8354025Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8354182Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8354188Z 
2025-01-10T13:23:47.8354377Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8354543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8354771Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8354884Z     ???
2025-01-10T13:23:47.8355062Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8355075Z 
2025-01-10T13:23:47.8355190Z >   ???
2025-01-10T13:23:47.8355392Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8355509Z E   
2025-01-10T13:23:47.8355709Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8355887Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8356002Z E          ...
2025-01-10T13:23:47.8356150Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8356364Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8356556Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8356677Z E          ...
2025-01-10T13:23:47.8356835Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8357033Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8357210Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8357235Z 
2025-01-10T13:23:47.8357380Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8357783Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-beta_sobolev] _
2025-01-10T13:23:47.8357795Z 
2025-01-10T13:23:47.8358033Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8358255Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8358425Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8358655Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8358882Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8359057Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8359199Z err_msg = None
2025-01-10T13:23:47.8359209Z 
2025-01-10T13:23:47.8359662Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8359819Z         if err_msg is None:
2025-01-10T13:23:47.8359993Z             if left.shape != right.shape:
2025-01-10T13:23:47.8360145Z                 raise_assert_detail(
2025-01-10T13:23:47.8360415Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8360546Z                 )
2025-01-10T13:23:47.8360679Z     
2025-01-10T13:23:47.8360816Z             diff = 0
2025-01-10T13:23:47.8361018Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8361167Z                 # count up differences
2025-01-10T13:23:47.8361459Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8361600Z                     diff += 1
2025-01-10T13:23:47.8361730Z     
2025-01-10T13:23:47.8361884Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8362125Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8362427Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8362825Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8362946Z E           
2025-01-10T13:23:47.8363339Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8363822Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8364289Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8364318Z 
2025-01-10T13:23:47.8364846Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8364855Z 
2025-01-10T13:23:47.8365152Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8365161Z 
2025-01-10T13:23:47.8365543Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b89cd0>
2025-01-10T13:23:47.8365832Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>
2025-01-10T13:23:47.8365962Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8365969Z 
2025-01-10T13:23:47.8366195Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8366401Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8366557Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8366692Z         try:
2025-01-10T13:23:47.8366940Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8367095Z         except KeyError:
2025-01-10T13:23:47.8367345Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8367472Z     
2025-01-10T13:23:47.8367620Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8367779Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8367926Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8368163Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8368304Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8368463Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8368653Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8368786Z             else:
2025-01-10T13:23:47.8368947Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8369137Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8369145Z 
2025-01-10T13:23:47.8369370Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8369867Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8370145Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8370268Z     ???
2025-01-10T13:23:47.8370458Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8370466Z 
2025-01-10T13:23:47.8370587Z >   ???
2025-01-10T13:23:47.8370815Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8370936Z E   
2025-01-10T13:23:47.8371170Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8371359Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8371484Z E          ...
2025-01-10T13:23:47.8371622Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8371885Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8372101Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8372232Z E          ...
2025-01-10T13:23:47.8372383Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8372791Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8372978Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8372986Z 
2025-01-10T13:23:47.8373330Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8373687Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:True-j_blues] __
2025-01-10T13:23:47.8373696Z 
2025-01-10T13:23:47.8373924Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8374147Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8374302Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8374530Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8374746Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8374920Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8375048Z err_msg = None
2025-01-10T13:23:47.8375054Z 
2025-01-10T13:23:47.8375236Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8375391Z         if err_msg is None:
2025-01-10T13:23:47.8375552Z             if left.shape != right.shape:
2025-01-10T13:23:47.8375705Z                 raise_assert_detail(
2025-01-10T13:23:47.8375964Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8376068Z                 )
2025-01-10T13:23:47.8376146Z     
2025-01-10T13:23:47.8376224Z             diff = 0
2025-01-10T13:23:47.8376344Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8376434Z                 # count up differences
2025-01-10T13:23:47.8376613Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8376700Z                     diff += 1
2025-01-10T13:23:47.8376779Z     
2025-01-10T13:23:47.8376870Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8377013Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8377183Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8377304Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8377379Z E           
2025-01-10T13:23:47.8377499Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8377758Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8378030Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8378205Z 
2025-01-10T13:23:47.8378532Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8378538Z 
2025-01-10T13:23:47.8378714Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8378725Z 
2025-01-10T13:23:47.8378950Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b89e50>
2025-01-10T13:23:47.8379126Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef605b7740>
2025-01-10T13:23:47.8379203Z attr = 'j_blues'
2025-01-10T13:23:47.8379208Z 
2025-01-10T13:23:47.8379356Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8379476Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8379576Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8379757Z         try:
2025-01-10T13:23:47.8379907Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8379989Z         except KeyError:
2025-01-10T13:23:47.8380135Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8380207Z     
2025-01-10T13:23:47.8380300Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8380401Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8380491Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8380630Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8380717Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8380812Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8380923Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8381000Z             else:
2025-01-10T13:23:47.8381097Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8381213Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8381222Z 
2025-01-10T13:23:47.8381352Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8381470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8381618Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8381694Z     ???
2025-01-10T13:23:47.8381808Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8381813Z 
2025-01-10T13:23:47.8381882Z >   ???
2025-01-10T13:23:47.8382013Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8382081Z E   
2025-01-10T13:23:47.8382213Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8382325Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8382400Z E          ...
2025-01-10T13:23:47.8382488Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8382624Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8382740Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8382816Z E          ...
2025-01-10T13:23:47.8382903Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8383198Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8383313Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8383318Z 
2025-01-10T13:23:47.8383407Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8383617Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines] __
2025-01-10T13:23:47.8383622Z 
2025-01-10T13:23:47.8383750Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8383885Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8383985Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8384267Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8384390Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8384488Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8384569Z err_msg = None
2025-01-10T13:23:47.8384573Z 
2025-01-10T13:23:47.8384686Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8384773Z         if err_msg is None:
2025-01-10T13:23:47.8384871Z             if left.shape != right.shape:
2025-01-10T13:23:47.8384964Z                 raise_assert_detail(
2025-01-10T13:23:47.8385110Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8385185Z                 )
2025-01-10T13:23:47.8385254Z     
2025-01-10T13:23:47.8385331Z             diff = 0
2025-01-10T13:23:47.8385443Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8385541Z                 # count up differences
2025-01-10T13:23:47.8385820Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8385915Z                     diff += 1
2025-01-10T13:23:47.8385993Z     
2025-01-10T13:23:47.8386084Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8386224Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8386395Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8386513Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8386587Z E           
2025-01-10T13:23:47.8386707Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8386965Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8387242Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8387248Z 
2025-01-10T13:23:47.8387563Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8387567Z 
2025-01-10T13:23:47.8387739Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8387744Z 
2025-01-10T13:23:47.8387974Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8abd0>
2025-01-10T13:23:47.8388144Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>
2025-01-10T13:23:47.8388243Z attr = 'lines'
2025-01-10T13:23:47.8388255Z 
2025-01-10T13:23:47.8388507Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8388709Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8388864Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8388990Z         try:
2025-01-10T13:23:47.8389228Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8389359Z         except KeyError:
2025-01-10T13:23:47.8389589Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8389704Z     
2025-01-10T13:23:47.8389863Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8389972Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8390072Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8390208Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8390301Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8390393Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8390626Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8390705Z             else:
2025-01-10T13:23:47.8390802Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8390915Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8390921Z 
2025-01-10T13:23:47.8391048Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8391165Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8391310Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8391387Z     ???
2025-01-10T13:23:47.8391498Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8391503Z 
2025-01-10T13:23:47.8391578Z >   ???
2025-01-10T13:23:47.8391704Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8391780Z E   
2025-01-10T13:23:47.8391914Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8392112Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8392191Z E          ...
2025-01-10T13:23:47.8392283Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8392418Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8392531Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8392612Z E          ...
2025-01-10T13:23:47.8392700Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8392830Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8392935Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8392940Z 
2025-01-10T13:23:47.8393204Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8393476Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index] _
2025-01-10T13:23:47.8393486Z 
2025-01-10T13:23:47.8393706Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8ac90>
2025-01-10T13:23:47.8393892Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>
2025-01-10T13:23:47.8393981Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8393985Z 
2025-01-10T13:23:47.8394126Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8394239Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8394331Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8394403Z         try:
2025-01-10T13:23:47.8394547Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8394628Z         except KeyError:
2025-01-10T13:23:47.8394770Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8394841Z     
2025-01-10T13:23:47.8394933Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8395033Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8395124Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8395266Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8395356Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8395450Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8395557Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8395562Z 
2025-01-10T13:23:47.8395691Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8395803Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8395808Z 
2025-01-10T13:23:47.8395946Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8396038Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8396151Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8396238Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8396375Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8396589Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8396696Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8396779Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8396857Z err_msg = None
2025-01-10T13:23:47.8396861Z 
2025-01-10T13:23:47.8396977Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8397058Z         if err_msg is None:
2025-01-10T13:23:47.8397158Z             if left.shape != right.shape:
2025-01-10T13:23:47.8397243Z                 raise_assert_detail(
2025-01-10T13:23:47.8397391Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8397466Z                 )
2025-01-10T13:23:47.8397536Z     
2025-01-10T13:23:47.8397615Z             diff = 0
2025-01-10T13:23:47.8397727Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8397822Z                 # count up differences
2025-01-10T13:23:47.8397996Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8398191Z                     diff += 1
2025-01-10T13:23:47.8398263Z     
2025-01-10T13:23:47.8398355Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8398491Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8398664Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8398769Z E           AssertionError: Series are different
2025-01-10T13:23:47.8398846Z E           
2025-01-10T13:23:47.8398948Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8399316Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8399663Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8399991Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8400002Z 
2025-01-10T13:23:47.8400311Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8400587Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index] _
2025-01-10T13:23:47.8400593Z 
2025-01-10T13:23:47.8400813Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8ad50>
2025-01-10T13:23:47.8400985Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>
2025-01-10T13:23:47.8401074Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8401079Z 
2025-01-10T13:23:47.8401220Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8401339Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8401423Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8401499Z         try:
2025-01-10T13:23:47.8401673Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8401760Z         except KeyError:
2025-01-10T13:23:47.8401898Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8402060Z     
2025-01-10T13:23:47.8402158Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8402259Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8402349Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8402490Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8402578Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8402675Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8402785Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8402795Z 
2025-01-10T13:23:47.8402918Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8403177Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8403183Z 
2025-01-10T13:23:47.8403321Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8403411Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8403525Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8403750Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8403890Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8403979Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8404091Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8404177Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8404261Z err_msg = None
2025-01-10T13:23:47.8404266Z 
2025-01-10T13:23:47.8404374Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8404460Z         if err_msg is None:
2025-01-10T13:23:47.8404554Z             if left.shape != right.shape:
2025-01-10T13:23:47.8404643Z                 raise_assert_detail(
2025-01-10T13:23:47.8404785Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8404861Z                 )
2025-01-10T13:23:47.8404936Z     
2025-01-10T13:23:47.8405019Z             diff = 0
2025-01-10T13:23:47.8405131Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8405224Z                 # count up differences
2025-01-10T13:23:47.8405395Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8405479Z                     diff += 1
2025-01-10T13:23:47.8405549Z     
2025-01-10T13:23:47.8405639Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8405780Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8405948Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8406057Z E           AssertionError: Series are different
2025-01-10T13:23:47.8406132Z E           
2025-01-10T13:23:47.8406240Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8406661Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8407362Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8408032Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8408236Z 
2025-01-10T13:23:47.8408577Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8408792Z ___ TestPlasma.test_plasma_properties[disable_electron_scattering:False-nu] ____
2025-01-10T13:23:47.8408798Z 
2025-01-10T13:23:47.8408935Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8409065Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8409175Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8409309Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8409436Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8409616Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8409701Z err_msg = None
2025-01-10T13:23:47.8409706Z 
2025-01-10T13:23:47.8409824Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8409912Z         if err_msg is None:
2025-01-10T13:23:47.8410015Z             if left.shape != right.shape:
2025-01-10T13:23:47.8410101Z                 raise_assert_detail(
2025-01-10T13:23:47.8410258Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8410330Z                 )
2025-01-10T13:23:47.8410407Z     
2025-01-10T13:23:47.8410480Z             diff = 0
2025-01-10T13:23:47.8410600Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8410688Z                 # count up differences
2025-01-10T13:23:47.8410861Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8410943Z                     diff += 1
2025-01-10T13:23:47.8411023Z     
2025-01-10T13:23:47.8411113Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8411252Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8411420Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8411540Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8411619Z E           
2025-01-10T13:23:47.8411731Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8411998Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8412253Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8412271Z 
2025-01-10T13:23:47.8412571Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8412576Z 
2025-01-10T13:23:47.8412753Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8412758Z 
2025-01-10T13:23:47.8412981Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8af90>
2025-01-10T13:23:47.8413331Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>, attr = 'nu'
2025-01-10T13:23:47.8413338Z 
2025-01-10T13:23:47.8413477Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8413600Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8413834Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8413917Z         try:
2025-01-10T13:23:47.8414057Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8414145Z         except KeyError:
2025-01-10T13:23:47.8414289Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8414359Z     
2025-01-10T13:23:47.8414452Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8414549Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8414644Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8414779Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8414871Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8414963Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8415081Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8415086Z 
2025-01-10T13:23:47.8415211Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8415339Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8415604Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8415678Z     ???
2025-01-10T13:23:47.8415791Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8415795Z 
2025-01-10T13:23:47.8415864Z >   ???
2025-01-10T13:23:47.8415995Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8416066Z E   
2025-01-10T13:23:47.8416198Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8416312Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8416389Z E          ...
2025-01-10T13:23:47.8416479Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8416615Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8416728Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8416812Z E          ...
2025-01-10T13:23:47.8416905Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8417032Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8417144Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8417149Z 
2025-01-10T13:23:47.8417238Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8417478Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-wavelength_cm] _
2025-01-10T13:23:47.8417483Z 
2025-01-10T13:23:47.8417611Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8417744Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8417842Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8417981Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8418104Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8418211Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8418292Z err_msg = None
2025-01-10T13:23:47.8418297Z 
2025-01-10T13:23:47.8418409Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8418496Z         if err_msg is None:
2025-01-10T13:23:47.8418592Z             if left.shape != right.shape:
2025-01-10T13:23:47.8418681Z                 raise_assert_detail(
2025-01-10T13:23:47.8418823Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8418901Z                 )
2025-01-10T13:23:47.8418972Z     
2025-01-10T13:23:47.8419051Z             diff = 0
2025-01-10T13:23:47.8419163Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8419255Z                 # count up differences
2025-01-10T13:23:47.8419423Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8419601Z                     diff += 1
2025-01-10T13:23:47.8419683Z     
2025-01-10T13:23:47.8419773Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8419911Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8420079Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8420198Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8420270Z E           
2025-01-10T13:23:47.8420385Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8420640Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8420904Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8420989Z 
2025-01-10T13:23:47.8421303Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8421309Z 
2025-01-10T13:23:47.8421475Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8421481Z 
2025-01-10T13:23:47.8421707Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8b050>
2025-01-10T13:23:47.8421871Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>
2025-01-10T13:23:47.8421960Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8421964Z 
2025-01-10T13:23:47.8422106Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8422225Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8422318Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8422390Z         try:
2025-01-10T13:23:47.8422534Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8422616Z         except KeyError:
2025-01-10T13:23:47.8422758Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8422831Z     
2025-01-10T13:23:47.8422922Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8423125Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8423223Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8423354Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8423450Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8423545Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8423655Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8423660Z 
2025-01-10T13:23:47.8423788Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8423912Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8424105Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8424238Z     ???
2025-01-10T13:23:47.8424439Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8424448Z 
2025-01-10T13:23:47.8424572Z >   ???
2025-01-10T13:23:47.8424716Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8424792Z E   
2025-01-10T13:23:47.8424933Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8425047Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8425126Z E          ...
2025-01-10T13:23:47.8425220Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8425350Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8425466Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8425679Z E          ...
2025-01-10T13:23:47.8425772Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8425896Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8426006Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8426012Z 
2025-01-10T13:23:47.8426101Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8426314Z __ TestPlasma.test_plasma_properties[disable_electron_scattering:False-f_lu] ___
2025-01-10T13:23:47.8426318Z 
2025-01-10T13:23:47.8426446Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8426581Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8426687Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8426820Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8426956Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8427203Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8427286Z err_msg = None
2025-01-10T13:23:47.8427290Z 
2025-01-10T13:23:47.8427403Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8427491Z         if err_msg is None:
2025-01-10T13:23:47.8427587Z             if left.shape != right.shape:
2025-01-10T13:23:47.8427677Z                 raise_assert_detail(
2025-01-10T13:23:47.8427827Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8427900Z                 )
2025-01-10T13:23:47.8427975Z     
2025-01-10T13:23:47.8428048Z             diff = 0
2025-01-10T13:23:47.8428165Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8428253Z                 # count up differences
2025-01-10T13:23:47.8428427Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8428514Z                     diff += 1
2025-01-10T13:23:47.8428589Z     
2025-01-10T13:23:47.8428677Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8428818Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8428987Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8429108Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8429182Z E           
2025-01-10T13:23:47.8429298Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8429559Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8429823Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8429837Z 
2025-01-10T13:23:47.8430143Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8430148Z 
2025-01-10T13:23:47.8430329Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8430334Z 
2025-01-10T13:23:47.8430554Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8b110>
2025-01-10T13:23:47.8430761Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>, attr = 'f_lu'
2025-01-10T13:23:47.8430766Z 
2025-01-10T13:23:47.8430903Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8431024Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8431205Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8431282Z         try:
2025-01-10T13:23:47.8431423Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8431510Z         except KeyError:
2025-01-10T13:23:47.8431649Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8431726Z     
2025-01-10T13:23:47.8431819Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8431914Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8432008Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8432141Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8432233Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8432324Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8432438Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8432443Z 
2025-01-10T13:23:47.8432568Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8432771Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8432918Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8432994Z     ???
2025-01-10T13:23:47.8433244Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8433256Z 
2025-01-10T13:23:47.8433326Z >   ???
2025-01-10T13:23:47.8433459Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8433536Z E   
2025-01-10T13:23:47.8433671Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8433781Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8433859Z E          ...
2025-01-10T13:23:47.8433947Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8434081Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8434194Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8434277Z E          ...
2025-01-10T13:23:47.8434368Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8434496Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8434601Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8434610Z 
2025-01-10T13:23:47.8434699Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8434931Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-tau_sobolevs] _
2025-01-10T13:23:47.8434936Z 
2025-01-10T13:23:47.8435063Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8435193Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8435290Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8435427Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8435553Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8435656Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8435741Z err_msg = None
2025-01-10T13:23:47.8435746Z 
2025-01-10T13:23:47.8435856Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8435941Z         if err_msg is None:
2025-01-10T13:23:47.8436036Z             if left.shape != right.shape:
2025-01-10T13:23:47.8436126Z                 raise_assert_detail(
2025-01-10T13:23:47.8436267Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8436344Z                 )
2025-01-10T13:23:47.8436413Z     
2025-01-10T13:23:47.8436492Z             diff = 0
2025-01-10T13:23:47.8436604Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8436698Z                 # count up differences
2025-01-10T13:23:47.8436865Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8437080Z                     diff += 1
2025-01-10T13:23:47.8437150Z     
2025-01-10T13:23:47.8437245Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8437385Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8437554Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8437673Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8437745Z E           
2025-01-10T13:23:47.8437863Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8438119Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8438380Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8438498Z 
2025-01-10T13:23:47.8438805Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8438810Z 
2025-01-10T13:23:47.8438978Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8438983Z 
2025-01-10T13:23:47.8439207Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8b890>
2025-01-10T13:23:47.8439373Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>
2025-01-10T13:23:47.8439458Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8439463Z 
2025-01-10T13:23:47.8439599Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8439724Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8439816Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8439887Z         try:
2025-01-10T13:23:47.8440031Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8440112Z         except KeyError:
2025-01-10T13:23:47.8440253Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8440324Z     
2025-01-10T13:23:47.8440418Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8440512Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8440607Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8440737Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8440832Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8440923Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8441038Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8441112Z             else:
2025-01-10T13:23:47.8441218Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8441336Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8441341Z 
2025-01-10T13:23:47.8441467Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8441584Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8441729Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8441806Z     ???
2025-01-10T13:23:47.8441914Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8441919Z 
2025-01-10T13:23:47.8441995Z >   ???
2025-01-10T13:23:47.8442123Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8442199Z E   
2025-01-10T13:23:47.8442326Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8442443Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8442524Z E          ...
2025-01-10T13:23:47.8442709Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8442868Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8443195Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8443343Z E          ...
2025-01-10T13:23:47.8443498Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8443727Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8443908Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8443915Z 
2025-01-10T13:23:47.8444065Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8444459Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-beta_sobolev] _
2025-01-10T13:23:47.8444468Z 
2025-01-10T13:23:47.8444630Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8444766Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8444874Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8445152Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8445278Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8445379Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8445456Z err_msg = None
2025-01-10T13:23:47.8445460Z 
2025-01-10T13:23:47.8445577Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8445657Z         if err_msg is None:
2025-01-10T13:23:47.8445758Z             if left.shape != right.shape:
2025-01-10T13:23:47.8445842Z                 raise_assert_detail(
2025-01-10T13:23:47.8445991Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8446067Z                 )
2025-01-10T13:23:47.8446136Z     
2025-01-10T13:23:47.8446215Z             diff = 0
2025-01-10T13:23:47.8446335Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8446437Z                 # count up differences
2025-01-10T13:23:47.8446605Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8446688Z                     diff += 1
2025-01-10T13:23:47.8446758Z     
2025-01-10T13:23:47.8446851Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8446988Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8447162Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8447276Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8447355Z E           
2025-01-10T13:23:47.8447467Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8447735Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8448008Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8448014Z 
2025-01-10T13:23:47.8448319Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8448329Z 
2025-01-10T13:23:47.8448501Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8448506Z 
2025-01-10T13:23:47.8448736Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8b950>
2025-01-10T13:23:47.8448904Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>
2025-01-10T13:23:47.8449156Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8449161Z 
2025-01-10T13:23:47.8449301Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8449423Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8449508Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8449585Z         try:
2025-01-10T13:23:47.8449726Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8449813Z         except KeyError:
2025-01-10T13:23:47.8449951Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8450026Z     
2025-01-10T13:23:47.8450117Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8450212Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8450305Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8450437Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8450536Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8450716Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8450838Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8450912Z             else:
2025-01-10T13:23:47.8451012Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8451126Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8451130Z 
2025-01-10T13:23:47.8451267Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8451381Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8451539Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8451616Z     ???
2025-01-10T13:23:47.8451729Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8451733Z 
2025-01-10T13:23:47.8451807Z >   ???
2025-01-10T13:23:47.8451937Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8452017Z E   
2025-01-10T13:23:47.8452152Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8452277Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8452351Z E          ...
2025-01-10T13:23:47.8452446Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8452579Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8452738Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8452871Z E          ...
2025-01-10T13:23:47.8453159Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8453400Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8453582Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8453590Z 
2025-01-10T13:23:47.8453745Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8454102Z _ TestPlasma.test_plasma_properties[disable_electron_scattering:False-j_blues] _
2025-01-10T13:23:47.8454116Z 
2025-01-10T13:23:47.8454333Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8454471Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8454575Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8454713Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8454840Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8454938Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8455016Z err_msg = None
2025-01-10T13:23:47.8455021Z 
2025-01-10T13:23:47.8455145Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8455226Z         if err_msg is None:
2025-01-10T13:23:47.8455346Z             if left.shape != right.shape:
2025-01-10T13:23:47.8455434Z                 raise_assert_detail(
2025-01-10T13:23:47.8455728Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8455804Z                 )
2025-01-10T13:23:47.8455879Z     
2025-01-10T13:23:47.8455954Z             diff = 0
2025-01-10T13:23:47.8456074Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8456163Z                 # count up differences
2025-01-10T13:23:47.8456339Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8456422Z                     diff += 1
2025-01-10T13:23:47.8456491Z     
2025-01-10T13:23:47.8456586Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8456721Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8456895Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8457009Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8457087Z E           
2025-01-10T13:23:47.8457204Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8457585Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8457847Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8457853Z 
2025-01-10T13:23:47.8458158Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8458163Z 
2025-01-10T13:23:47.8458337Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8458349Z 
2025-01-10T13:23:47.8458574Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61b8bad0>
2025-01-10T13:23:47.8458753Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5bc22510>
2025-01-10T13:23:47.8458835Z attr = 'j_blues'
2025-01-10T13:23:47.8458840Z 
2025-01-10T13:23:47.8458980Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8459101Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8459186Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8459263Z         try:
2025-01-10T13:23:47.8459403Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8459492Z         except KeyError:
2025-01-10T13:23:47.8459630Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8459706Z     
2025-01-10T13:23:47.8459794Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8459892Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8459990Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8460129Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8460220Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8460312Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8460427Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8460509Z             else:
2025-01-10T13:23:47.8460609Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8460718Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8460723Z 
2025-01-10T13:23:47.8460856Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8460968Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8461119Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8461192Z     ???
2025-01-10T13:23:47.8461306Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8461401Z 
2025-01-10T13:23:47.8461474Z >   ???
2025-01-10T13:23:47.8461607Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8461683Z E   
2025-01-10T13:23:47.8461813Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8461929Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8462003Z E          ...
2025-01-10T13:23:47.8462095Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8462224Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8462342Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8462415Z E          ...
2025-01-10T13:23:47.8462506Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8462630Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8462739Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8462749Z 
2025-01-10T13:23:47.8462922Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8463362Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] _
2025-01-10T13:23:47.8463369Z 
2025-01-10T13:23:47.8463503Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8463631Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8463737Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8463869Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8463995Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8464089Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8464171Z err_msg = None
2025-01-10T13:23:47.8464176Z 
2025-01-10T13:23:47.8464296Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8464383Z         if err_msg is None:
2025-01-10T13:23:47.8464482Z             if left.shape != right.shape:
2025-01-10T13:23:47.8464566Z                 raise_assert_detail(
2025-01-10T13:23:47.8464713Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8464785Z                 )
2025-01-10T13:23:47.8464860Z     
2025-01-10T13:23:47.8464934Z             diff = 0
2025-01-10T13:23:47.8465051Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8465139Z                 # count up differences
2025-01-10T13:23:47.8465315Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8465396Z                     diff += 1
2025-01-10T13:23:47.8465477Z     
2025-01-10T13:23:47.8465566Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8465705Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8465881Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8465999Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8466075Z E           
2025-01-10T13:23:47.8466185Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8466446Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8466705Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8466839Z 
2025-01-10T13:23:47.8467152Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8467157Z 
2025-01-10T13:23:47.8467329Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8467334Z 
2025-01-10T13:23:47.8467555Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba8890>
2025-01-10T13:23:47.8467728Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8467804Z attr = 'lines'
2025-01-10T13:23:47.8467809Z 
2025-01-10T13:23:47.8467949Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8468065Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8468155Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8468231Z         try:
2025-01-10T13:23:47.8468370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8468455Z         except KeyError:
2025-01-10T13:23:47.8468596Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8468785Z     
2025-01-10T13:23:47.8468873Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8468972Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8469061Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8469198Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8469286Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8469384Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8469497Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8469574Z             else:
2025-01-10T13:23:47.8469688Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8469890Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8469901Z 
2025-01-10T13:23:47.8470125Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8470326Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8470590Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8470708Z     ???
2025-01-10T13:23:47.8470893Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8470901Z 
2025-01-10T13:23:47.8471014Z >   ???
2025-01-10T13:23:47.8471235Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8471316Z E   
2025-01-10T13:23:47.8471452Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8471566Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8471644Z E          ...
2025-01-10T13:23:47.8471734Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8471867Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8471986Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8472062Z E          ...
2025-01-10T13:23:47.8472156Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8472283Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8472391Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8472396Z 
2025-01-10T13:23:47.8472485Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8472799Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] _
2025-01-10T13:23:47.8472805Z 
2025-01-10T13:23:47.8473178Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba8950>
2025-01-10T13:23:47.8473357Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8473454Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8473459Z 
2025-01-10T13:23:47.8473594Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8473713Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8473967Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8474046Z         try:
2025-01-10T13:23:47.8474192Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8474281Z         except KeyError:
2025-01-10T13:23:47.8474419Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8474494Z     
2025-01-10T13:23:47.8474580Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8474679Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8474767Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8474904Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8474997Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8475090Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8475205Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8475210Z 
2025-01-10T13:23:47.8475336Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8475454Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8475570Z 
2025-01-10T13:23:47.8475708Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8475799Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8475909Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8476004Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8476143Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8476231Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8476341Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8476422Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8476502Z err_msg = None
2025-01-10T13:23:47.8476507Z 
2025-01-10T13:23:47.8476617Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8484376Z         if err_msg is None:
2025-01-10T13:23:47.8484544Z             if left.shape != right.shape:
2025-01-10T13:23:47.8484645Z                 raise_assert_detail(
2025-01-10T13:23:47.8484820Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8484896Z                 )
2025-01-10T13:23:47.8484974Z     
2025-01-10T13:23:47.8485049Z             diff = 0
2025-01-10T13:23:47.8485180Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8485279Z                 # count up differences
2025-01-10T13:23:47.8485458Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8485546Z                     diff += 1
2025-01-10T13:23:47.8485618Z     
2025-01-10T13:23:47.8485714Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8485858Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8486036Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8486149Z E           AssertionError: Series are different
2025-01-10T13:23:47.8486233Z E           
2025-01-10T13:23:47.8486339Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8486711Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8487046Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8487576Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8487589Z 
2025-01-10T13:23:47.8487918Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8488235Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] _
2025-01-10T13:23:47.8488248Z 
2025-01-10T13:23:47.8488650Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba8a10>
2025-01-10T13:23:47.8488955Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8489119Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8489288Z 
2025-01-10T13:23:47.8489528Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8489721Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8489875Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8489994Z         try:
2025-01-10T13:23:47.8490144Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8490235Z         except KeyError:
2025-01-10T13:23:47.8490376Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8490452Z     
2025-01-10T13:23:47.8490541Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8490645Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8490736Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8490879Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8490968Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8491069Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8491185Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8491190Z 
2025-01-10T13:23:47.8491323Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8491446Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8491451Z 
2025-01-10T13:23:47.8491588Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8491679Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8491789Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8491876Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8492014Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8492105Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8492210Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8492299Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8492380Z err_msg = None
2025-01-10T13:23:47.8492389Z 
2025-01-10T13:23:47.8492502Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8492588Z         if err_msg is None:
2025-01-10T13:23:47.8492684Z             if left.shape != right.shape:
2025-01-10T13:23:47.8492775Z                 raise_assert_detail(
2025-01-10T13:23:47.8492920Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8492999Z                 )
2025-01-10T13:23:47.8493214Z     
2025-01-10T13:23:47.8493297Z             diff = 0
2025-01-10T13:23:47.8493414Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8493512Z                 # count up differences
2025-01-10T13:23:47.8493681Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8493767Z                     diff += 1
2025-01-10T13:23:47.8493966Z     
2025-01-10T13:23:47.8494063Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8494206Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8494381Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8494491Z E           AssertionError: Series are different
2025-01-10T13:23:47.8494569Z E           
2025-01-10T13:23:47.8494680Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8495044Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8495415Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8495917Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8495925Z 
2025-01-10T13:23:47.8496243Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8496520Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] _
2025-01-10T13:23:47.8496529Z 
2025-01-10T13:23:47.8496669Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8496797Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8496904Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8497040Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8497167Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8497260Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8497346Z err_msg = None
2025-01-10T13:23:47.8497351Z 
2025-01-10T13:23:47.8497463Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8497550Z         if err_msg is None:
2025-01-10T13:23:47.8497651Z             if left.shape != right.shape:
2025-01-10T13:23:47.8497745Z                 raise_assert_detail(
2025-01-10T13:23:47.8497897Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8497969Z                 )
2025-01-10T13:23:47.8498045Z     
2025-01-10T13:23:47.8498120Z             diff = 0
2025-01-10T13:23:47.8498238Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8498329Z                 # count up differences
2025-01-10T13:23:47.8498502Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8498581Z                     diff += 1
2025-01-10T13:23:47.8498657Z     
2025-01-10T13:23:47.8498746Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8498887Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8499055Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8499266Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8499348Z E           
2025-01-10T13:23:47.8499460Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8499723Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8499979Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8499989Z 
2025-01-10T13:23:47.8500291Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8500395Z 
2025-01-10T13:23:47.8500584Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8500590Z 
2025-01-10T13:23:47.8500817Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba8c50>
2025-01-10T13:23:47.8501024Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>, attr = 'nu'
2025-01-10T13:23:47.8501029Z 
2025-01-10T13:23:47.8501174Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8501293Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8501384Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8501458Z         try:
2025-01-10T13:23:47.8501637Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8501721Z         except KeyError:
2025-01-10T13:23:47.8501864Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8501936Z     
2025-01-10T13:23:47.8502034Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8502135Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8502231Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8502367Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8502458Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8502548Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8502665Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8502670Z 
2025-01-10T13:23:47.8502802Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8502917Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8503175Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8503250Z     ???
2025-01-10T13:23:47.8503365Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8503370Z 
2025-01-10T13:23:47.8503447Z >   ???
2025-01-10T13:23:47.8503581Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8503655Z E   
2025-01-10T13:23:47.8503789Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8503902Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8503981Z E          ...
2025-01-10T13:23:47.8504079Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8504216Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8504336Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8504410Z E          ...
2025-01-10T13:23:47.8504503Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8504628Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8504738Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8504743Z 
2025-01-10T13:23:47.8504834Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8505241Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] _
2025-01-10T13:23:47.8505251Z 
2025-01-10T13:23:47.8505381Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8505511Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8505618Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8505752Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8505878Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8505972Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8506055Z err_msg = None
2025-01-10T13:23:47.8506059Z 
2025-01-10T13:23:47.8506168Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8506256Z         if err_msg is None:
2025-01-10T13:23:47.8506358Z             if left.shape != right.shape:
2025-01-10T13:23:47.8506555Z                 raise_assert_detail(
2025-01-10T13:23:47.8506704Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8506783Z                 )
2025-01-10T13:23:47.8506861Z     
2025-01-10T13:23:47.8506972Z             diff = 0
2025-01-10T13:23:47.8507173Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8507322Z                 # count up differences
2025-01-10T13:23:47.8507619Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8507744Z                     diff += 1
2025-01-10T13:23:47.8507822Z     
2025-01-10T13:23:47.8507914Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8508057Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8508226Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8508350Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8508432Z E           
2025-01-10T13:23:47.8508555Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8508812Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8509073Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8509080Z 
2025-01-10T13:23:47.8509384Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8509396Z 
2025-01-10T13:23:47.8509564Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8509574Z 
2025-01-10T13:23:47.8509796Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba8d10>
2025-01-10T13:23:47.8509970Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8510053Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8510058Z 
2025-01-10T13:23:47.8510199Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8510316Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8510406Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8510478Z         try:
2025-01-10T13:23:47.8510623Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8510706Z         except KeyError:
2025-01-10T13:23:47.8510849Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8511027Z     
2025-01-10T13:23:47.8511129Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8511230Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8511319Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8511458Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8511545Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8511641Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8511752Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8511756Z 
2025-01-10T13:23:47.8511886Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8511999Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8512149Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8512221Z     ???
2025-01-10T13:23:47.8512335Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8512345Z 
2025-01-10T13:23:47.8512497Z >   ???
2025-01-10T13:23:47.8512626Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8512703Z E   
2025-01-10T13:23:47.8512830Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8512945Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8513176Z E          ...
2025-01-10T13:23:47.8513274Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8513404Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8513519Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8513592Z E          ...
2025-01-10T13:23:47.8513683Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8513809Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8513919Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8513924Z 
2025-01-10T13:23:47.8514024Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8514290Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] _
2025-01-10T13:23:47.8514296Z 
2025-01-10T13:23:47.8514428Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8514553Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8514656Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8514787Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8514912Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8515007Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8515089Z err_msg = None
2025-01-10T13:23:47.8515093Z 
2025-01-10T13:23:47.8515212Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8515298Z         if err_msg is None:
2025-01-10T13:23:47.8515403Z             if left.shape != right.shape:
2025-01-10T13:23:47.8515488Z                 raise_assert_detail(
2025-01-10T13:23:47.8515639Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8515712Z                 )
2025-01-10T13:23:47.8515787Z     
2025-01-10T13:23:47.8515861Z             diff = 0
2025-01-10T13:23:47.8515978Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8516066Z                 # count up differences
2025-01-10T13:23:47.8516239Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8516318Z                     diff += 1
2025-01-10T13:23:47.8516397Z     
2025-01-10T13:23:47.8516484Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8516624Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8516797Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8517059Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8517138Z E           
2025-01-10T13:23:47.8517249Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8517509Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8517766Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8517777Z 
2025-01-10T13:23:47.8518080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8518190Z 
2025-01-10T13:23:47.8518371Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8518376Z 
2025-01-10T13:23:47.8518596Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba8dd0>
2025-01-10T13:23:47.8518803Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>, attr = 'f_lu'
2025-01-10T13:23:47.8518808Z 
2025-01-10T13:23:47.8518943Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8519062Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8519151Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8519223Z         try:
2025-01-10T13:23:47.8519368Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8519449Z         except KeyError:
2025-01-10T13:23:47.8519595Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8519669Z     
2025-01-10T13:23:47.8519768Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8519863Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8519956Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8520089Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8520181Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8520275Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8520388Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8520393Z 
2025-01-10T13:23:47.8520521Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8520631Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8520782Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8520852Z     ???
2025-01-10T13:23:47.8520964Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8520972Z 
2025-01-10T13:23:47.8521047Z >   ???
2025-01-10T13:23:47.8521178Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8521249Z E   
2025-01-10T13:23:47.8521379Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8521490Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8521570Z E          ...
2025-01-10T13:23:47.8521659Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8521793Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8521910Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8521983Z E          ...
2025-01-10T13:23:47.8522073Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8522197Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8522307Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8522311Z 
2025-01-10T13:23:47.8522502Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8522833Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] _
2025-01-10T13:23:47.8522839Z 
2025-01-10T13:23:47.8523167Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba93d0>
2025-01-10T13:23:47.8523338Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8523435Z attr = 'stimulated_emission_factor'
2025-01-10T13:23:47.8523440Z 
2025-01-10T13:23:47.8523573Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8523690Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8523773Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8523850Z         try:
2025-01-10T13:23:47.8524092Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8524245Z         except KeyError:
2025-01-10T13:23:47.8524477Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8524613Z     
2025-01-10T13:23:47.8524952Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8525112Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8525265Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8525496Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8525592Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8525684Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8525802Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8525875Z             else:
2025-01-10T13:23:47.8525976Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8526084Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8526089Z 
2025-01-10T13:23:47.8526219Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8526330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8526490Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8526567Z     ???
2025-01-10T13:23:47.8526684Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8526689Z 
2025-01-10T13:23:47.8526762Z >   ???
2025-01-10T13:23:47.8526943Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:47.8527017Z E   
2025-01-10T13:23:47.8527181Z E   DataFrame.iloc[:, 0] (column name="0") values are different (0.80972 %)
2025-01-10T13:23:47.8527548Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8532060Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995981197664222, 0.9995995247961845, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812817, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235593, ...]
2025-01-10T13:23:47.8536865Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995995247961845, 0.9995981197664222, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812795, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235604, ...]
2025-01-10T13:23:47.8537174Z E   At positional index 124, first diff: 0.9928779361771577 != 0.9929028359129612
2025-01-10T13:23:47.8537180Z 
2025-01-10T13:23:47.8537275Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8537577Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] _
2025-01-10T13:23:47.8537583Z 
2025-01-10T13:23:47.8537717Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8537850Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8537960Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8538098Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8538220Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8538319Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8538396Z err_msg = None
2025-01-10T13:23:47.8538401Z 
2025-01-10T13:23:47.8538517Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8538601Z         if err_msg is None:
2025-01-10T13:23:47.8538702Z             if left.shape != right.shape:
2025-01-10T13:23:47.8538786Z                 raise_assert_detail(
2025-01-10T13:23:47.8538936Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8539131Z                 )
2025-01-10T13:23:47.8539205Z     
2025-01-10T13:23:47.8539285Z             diff = 0
2025-01-10T13:23:47.8539401Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8539494Z                 # count up differences
2025-01-10T13:23:47.8539669Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8539751Z                     diff += 1
2025-01-10T13:23:47.8539821Z     
2025-01-10T13:23:47.8539912Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8540049Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8540223Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8540337Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8540415Z E           
2025-01-10T13:23:47.8540527Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8540787Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8541131Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8541137Z 
2025-01-10T13:23:47.8541443Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8541449Z 
2025-01-10T13:23:47.8541620Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8541625Z 
2025-01-10T13:23:47.8541847Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba9490>
2025-01-10T13:23:47.8542061Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8542228Z attr = 'previous_beta_sobolev'
2025-01-10T13:23:47.8542237Z 
2025-01-10T13:23:47.8542469Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8542677Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8542818Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8542943Z         try:
2025-01-10T13:23:47.8543319Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8543459Z         except KeyError:
2025-01-10T13:23:47.8543692Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8543799Z     
2025-01-10T13:23:47.8543890Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8543990Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8544081Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8544227Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8544323Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8544415Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8544528Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8544602Z             else:
2025-01-10T13:23:47.8544700Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8544812Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8544817Z 
2025-01-10T13:23:47.8544949Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8545061Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8545221Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8545292Z     ???
2025-01-10T13:23:47.8545406Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8545411Z 
2025-01-10T13:23:47.8545642Z >   ???
2025-01-10T13:23:47.8545775Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8545855Z E   
2025-01-10T13:23:47.8545983Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8546099Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8546172Z E          ...
2025-01-10T13:23:47.8546264Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8546393Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8546513Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8546583Z E          ...
2025-01-10T13:23:47.8546674Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8546799Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8546909Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8546914Z 
2025-01-10T13:23:47.8547010Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8547289Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] _
2025-01-10T13:23:47.8547403Z 
2025-01-10T13:23:47.8547540Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8547665Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8547767Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8547899Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8548022Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8548116Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8548196Z err_msg = None
2025-01-10T13:23:47.8548200Z 
2025-01-10T13:23:47.8548315Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8548397Z         if err_msg is None:
2025-01-10T13:23:47.8548502Z             if left.shape != right.shape:
2025-01-10T13:23:47.8548590Z                 raise_assert_detail(
2025-01-10T13:23:47.8548736Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8548808Z                 )
2025-01-10T13:23:47.8548882Z     
2025-01-10T13:23:47.8548955Z             diff = 0
2025-01-10T13:23:47.8549070Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8549159Z                 # count up differences
2025-01-10T13:23:47.8549331Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8549408Z                     diff += 1
2025-01-10T13:23:47.8549485Z     
2025-01-10T13:23:47.8549573Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8549713Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8549885Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8550002Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8550083Z E           
2025-01-10T13:23:47.8550195Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8550457Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8550713Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8550724Z 
2025-01-10T13:23:47.8551025Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8551146Z 
2025-01-10T13:23:47.8551333Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8551338Z 
2025-01-10T13:23:47.8551563Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba9550>
2025-01-10T13:23:47.8551731Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8551810Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8551815Z 
2025-01-10T13:23:47.8551958Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8552081Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8552166Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8552242Z         try:
2025-01-10T13:23:47.8552388Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8552473Z         except KeyError:
2025-01-10T13:23:47.8552612Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8552691Z     
2025-01-10T13:23:47.8552865Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8552967Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8553203Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8553354Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8553440Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8553537Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8553652Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8553729Z             else:
2025-01-10T13:23:47.8553828Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8553936Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8553941Z 
2025-01-10T13:23:47.8554073Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8554192Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8554351Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8554427Z     ???
2025-01-10T13:23:47.8554543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8554547Z 
2025-01-10T13:23:47.8554617Z >   ???
2025-01-10T13:23:47.8554749Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8554819Z E   
2025-01-10T13:23:47.8554952Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8555065Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8555142Z E          ...
2025-01-10T13:23:47.8555235Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8555366Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8555484Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8555557Z E          ...
2025-01-10T13:23:47.8555644Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8555773Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8555887Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8555892Z 
2025-01-10T13:23:47.8555982Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8556266Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] _
2025-01-10T13:23:47.8556271Z 
2025-01-10T13:23:47.8556426Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8556651Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8556827Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8556974Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8557103Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8557416Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8557504Z err_msg = None
2025-01-10T13:23:47.8557509Z 
2025-01-10T13:23:47.8557624Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8557712Z         if err_msg is None:
2025-01-10T13:23:47.8557810Z             if left.shape != right.shape:
2025-01-10T13:23:47.8557902Z                 raise_assert_detail(
2025-01-10T13:23:47.8558053Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8558127Z                 )
2025-01-10T13:23:47.8558202Z     
2025-01-10T13:23:47.8558276Z             diff = 0
2025-01-10T13:23:47.8558393Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8558484Z                 # count up differences
2025-01-10T13:23:47.8558657Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8558736Z                     diff += 1
2025-01-10T13:23:47.8558811Z     
2025-01-10T13:23:47.8558905Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8559164Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8559332Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8559447Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8559520Z E           
2025-01-10T13:23:47.8559635Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8559897Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8560156Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8560171Z 
2025-01-10T13:23:47.8560551Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8560561Z 
2025-01-10T13:23:47.8560856Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8560866Z 
2025-01-10T13:23:47.8561155Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba9610>
2025-01-10T13:23:47.8561597Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8561679Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8561685Z 
2025-01-10T13:23:47.8561829Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8561946Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8562036Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8562113Z         try:
2025-01-10T13:23:47.8562259Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8562351Z         except KeyError:
2025-01-10T13:23:47.8562490Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8562564Z     
2025-01-10T13:23:47.8562652Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8562751Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8562841Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8562976Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8563199Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8563301Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8563417Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8563495Z             else:
2025-01-10T13:23:47.8563591Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8563704Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8563847Z 
2025-01-10T13:23:47.8563996Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8564115Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8564275Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8564348Z     ???
2025-01-10T13:23:47.8564465Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8564470Z 
2025-01-10T13:23:47.8564540Z >   ???
2025-01-10T13:23:47.8564678Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8564750Z E   
2025-01-10T13:23:47.8564887Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8565001Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8565079Z E          ...
2025-01-10T13:23:47.8565170Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8565308Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8565431Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8565638Z E          ...
2025-01-10T13:23:47.8565731Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8565858Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8565971Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8565976Z 
2025-01-10T13:23:47.8566066Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8566337Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] _
2025-01-10T13:23:47.8566342Z 
2025-01-10T13:23:47.8566473Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8566609Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8566712Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8566850Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8566983Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8567079Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8567160Z err_msg = None
2025-01-10T13:23:47.8567164Z 
2025-01-10T13:23:47.8567279Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8567365Z         if err_msg is None:
2025-01-10T13:23:47.8567463Z             if left.shape != right.shape:
2025-01-10T13:23:47.8567555Z                 raise_assert_detail(
2025-01-10T13:23:47.8567701Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8567782Z                 )
2025-01-10T13:23:47.8567854Z     
2025-01-10T13:23:47.8567933Z             diff = 0
2025-01-10T13:23:47.8568050Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8568139Z                 # count up differences
2025-01-10T13:23:47.8568319Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8568404Z                     diff += 1
2025-01-10T13:23:47.8568483Z     
2025-01-10T13:23:47.8568574Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8568715Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8568885Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8569004Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8569078Z E           
2025-01-10T13:23:47.8569197Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8569453Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8569816Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8569823Z 
2025-01-10T13:23:47.8570139Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8570144Z 
2025-01-10T13:23:47.8570319Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8570324Z 
2025-01-10T13:23:47.8570554Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61ba9790>
2025-01-10T13:23:47.8570726Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef59750380>
2025-01-10T13:23:47.8570804Z attr = 'j_blues'
2025-01-10T13:23:47.8570812Z 
2025-01-10T13:23:47.8570959Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8571155Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8571247Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8571322Z         try:
2025-01-10T13:23:47.8571469Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8571550Z         except KeyError:
2025-01-10T13:23:47.8571698Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8571770Z     
2025-01-10T13:23:47.8571862Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8571958Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8572053Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8572191Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8572276Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8572369Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8572484Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8572569Z             else:
2025-01-10T13:23:47.8572664Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8572774Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8572779Z 
2025-01-10T13:23:47.8572904Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8573169Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8573320Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8573397Z     ???
2025-01-10T13:23:47.8573507Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8573516Z 
2025-01-10T13:23:47.8573586Z >   ???
2025-01-10T13:23:47.8573719Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8573790Z E   
2025-01-10T13:23:47.8573924Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8574040Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8574120Z E          ...
2025-01-10T13:23:47.8574210Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8574344Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8574456Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8574533Z E          ...
2025-01-10T13:23:47.8574621Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8574757Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8574861Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8574871Z 
2025-01-10T13:23:47.8574962Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8575219Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] _
2025-01-10T13:23:47.8575225Z 
2025-01-10T13:23:47.8575355Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8575636Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8575740Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8575883Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8576009Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8576109Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8576192Z err_msg = None
2025-01-10T13:23:47.8576196Z 
2025-01-10T13:23:47.8576310Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8576399Z         if err_msg is None:
2025-01-10T13:23:47.8576495Z             if left.shape != right.shape:
2025-01-10T13:23:47.8576585Z                 raise_assert_detail(
2025-01-10T13:23:47.8576732Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8576814Z                 )
2025-01-10T13:23:47.8576992Z     
2025-01-10T13:23:47.8577072Z             diff = 0
2025-01-10T13:23:47.8577188Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8577281Z                 # count up differences
2025-01-10T13:23:47.8577451Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8577538Z                     diff += 1
2025-01-10T13:23:47.8577609Z     
2025-01-10T13:23:47.8577707Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8577846Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8578015Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8578133Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8578207Z E           
2025-01-10T13:23:47.8578323Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8578580Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8578922Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8578935Z 
2025-01-10T13:23:47.8579464Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8579475Z 
2025-01-10T13:23:47.8579766Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8579775Z 
2025-01-10T13:23:47.8580171Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61baa510>
2025-01-10T13:23:47.8580460Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8580590Z attr = 'lines'
2025-01-10T13:23:47.8580597Z 
2025-01-10T13:23:47.8580820Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8580945Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8581036Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8581110Z         try:
2025-01-10T13:23:47.8581255Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8581338Z         except KeyError:
2025-01-10T13:23:47.8581482Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8581558Z     
2025-01-10T13:23:47.8581651Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8581747Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8581843Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8582093Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8582189Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8582282Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8582398Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8582478Z             else:
2025-01-10T13:23:47.8582574Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8582685Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8582690Z 
2025-01-10T13:23:47.8582816Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8582935Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8583209Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8583288Z     ???
2025-01-10T13:23:47.8583400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8583405Z 
2025-01-10T13:23:47.8583486Z >   ???
2025-01-10T13:23:47.8583613Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8583813Z E   
2025-01-10T13:23:47.8583950Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8584068Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8584146Z E          ...
2025-01-10T13:23:47.8584234Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8584372Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8584486Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8584564Z E          ...
2025-01-10T13:23:47.8584651Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8584783Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8584890Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8584894Z 
2025-01-10T13:23:47.8584990Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8585289Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] _
2025-01-10T13:23:47.8585304Z 
2025-01-10T13:23:47.8585528Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61baa5d0>
2025-01-10T13:23:47.8585700Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8585789Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8585794Z 
2025-01-10T13:23:47.8585936Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8586049Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8586137Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8586213Z         try:
2025-01-10T13:23:47.8586357Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8586439Z         except KeyError:
2025-01-10T13:23:47.8586582Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8586653Z     
2025-01-10T13:23:47.8586755Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8586855Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8586950Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8587087Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8587173Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8587271Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8587381Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8587386Z 
2025-01-10T13:23:47.8587514Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8587624Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8587629Z 
2025-01-10T13:23:47.8587772Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8587860Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8587975Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8588185Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8588336Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8588425Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8588532Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8588616Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8588694Z err_msg = None
2025-01-10T13:23:47.8588698Z 
2025-01-10T13:23:47.8588812Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8588895Z         if err_msg is None:
2025-01-10T13:23:47.8588996Z             if left.shape != right.shape:
2025-01-10T13:23:47.8589082Z                 raise_assert_detail(
2025-01-10T13:23:47.8589228Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8589301Z                 )
2025-01-10T13:23:47.8589379Z     
2025-01-10T13:23:47.8589464Z             diff = 0
2025-01-10T13:23:47.8589576Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8589757Z                 # count up differences
2025-01-10T13:23:47.8589924Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8590007Z                     diff += 1
2025-01-10T13:23:47.8590079Z     
2025-01-10T13:23:47.8590231Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8590453Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8590743Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8590923Z E           AssertionError: Series are different
2025-01-10T13:23:47.8591052Z E           
2025-01-10T13:23:47.8591221Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8591819Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8592169Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8592497Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8592516Z 
2025-01-10T13:23:47.8592824Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8593270Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] _
2025-01-10T13:23:47.8593277Z 
2025-01-10T13:23:47.8593506Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61baa690>
2025-01-10T13:23:47.8593678Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8593771Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8593776Z 
2025-01-10T13:23:47.8593917Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8594035Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8594128Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8594207Z         try:
2025-01-10T13:23:47.8594500Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8594593Z         except KeyError:
2025-01-10T13:23:47.8594733Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8594810Z     
2025-01-10T13:23:47.8594902Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8595003Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8595095Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8595234Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8595320Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8595419Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8595531Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8595536Z 
2025-01-10T13:23:47.8595666Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8595788Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8595798Z 
2025-01-10T13:23:47.8595932Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8596153Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8596263Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8596349Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8596488Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8596581Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8596686Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8596768Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8596845Z err_msg = None
2025-01-10T13:23:47.8596852Z 
2025-01-10T13:23:47.8596960Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8597048Z         if err_msg is None:
2025-01-10T13:23:47.8597144Z             if left.shape != right.shape:
2025-01-10T13:23:47.8597240Z                 raise_assert_detail(
2025-01-10T13:23:47.8597388Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8597468Z                 )
2025-01-10T13:23:47.8597540Z     
2025-01-10T13:23:47.8597622Z             diff = 0
2025-01-10T13:23:47.8597736Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8597833Z                 # count up differences
2025-01-10T13:23:47.8598006Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8598093Z                     diff += 1
2025-01-10T13:23:47.8598165Z     
2025-01-10T13:23:47.8598259Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8598398Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8598568Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8598679Z E           AssertionError: Series are different
2025-01-10T13:23:47.8598756Z E           
2025-01-10T13:23:47.8598869Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8599232Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8599605Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8600074Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8600085Z 
2025-01-10T13:23:47.8600390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8600640Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] _
2025-01-10T13:23:47.8600646Z 
2025-01-10T13:23:47.8600780Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8600908Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8601016Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8601224Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8601352Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8601447Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8601533Z err_msg = None
2025-01-10T13:23:47.8601538Z 
2025-01-10T13:23:47.8601681Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8601772Z         if err_msg is None:
2025-01-10T13:23:47.8601874Z             if left.shape != right.shape:
2025-01-10T13:23:47.8601960Z                 raise_assert_detail(
2025-01-10T13:23:47.8602108Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8602181Z                 )
2025-01-10T13:23:47.8602257Z     
2025-01-10T13:23:47.8602331Z             diff = 0
2025-01-10T13:23:47.8602452Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8602548Z                 # count up differences
2025-01-10T13:23:47.8602721Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8602801Z                     diff += 1
2025-01-10T13:23:47.8602878Z     
2025-01-10T13:23:47.8602969Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8603215Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8603386Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8603506Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8603584Z E           
2025-01-10T13:23:47.8603698Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8603961Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8604364Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8604375Z 
2025-01-10T13:23:47.8604915Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8604925Z 
2025-01-10T13:23:47.8605215Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8605223Z 
2025-01-10T13:23:47.8605611Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61baa8d0>
2025-01-10T13:23:47.8605826Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>, attr = 'nu'
2025-01-10T13:23:47.8605973Z 
2025-01-10T13:23:47.8606118Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8606240Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8606327Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8606405Z         try:
2025-01-10T13:23:47.8606546Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8606634Z         except KeyError:
2025-01-10T13:23:47.8606777Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8606849Z     
2025-01-10T13:23:47.8606941Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8607038Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8607133Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8607268Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8607362Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8607459Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8607691Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8607696Z 
2025-01-10T13:23:47.8607825Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8607946Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8608098Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8608171Z     ???
2025-01-10T13:23:47.8608287Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8608292Z 
2025-01-10T13:23:47.8608364Z >   ???
2025-01-10T13:23:47.8608497Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8608569Z E   
2025-01-10T13:23:47.8608703Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8608819Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8608898Z E          ...
2025-01-10T13:23:47.8608993Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8609136Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8609249Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8609327Z E          ...
2025-01-10T13:23:47.8609415Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8609547Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8609659Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8609664Z 
2025-01-10T13:23:47.8609754Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8610024Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] _
2025-01-10T13:23:47.8610029Z 
2025-01-10T13:23:47.8610162Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8610291Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8610393Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8610534Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8610656Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8610757Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8610841Z err_msg = None
2025-01-10T13:23:47.8610845Z 
2025-01-10T13:23:47.8610954Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8611039Z         if err_msg is None:
2025-01-10T13:23:47.8611134Z             if left.shape != right.shape:
2025-01-10T13:23:47.8611225Z                 raise_assert_detail(
2025-01-10T13:23:47.8611370Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8611449Z                 )
2025-01-10T13:23:47.8611520Z     
2025-01-10T13:23:47.8611603Z             diff = 0
2025-01-10T13:23:47.8611805Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8611904Z                 # count up differences
2025-01-10T13:23:47.8612075Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8612160Z                     diff += 1
2025-01-10T13:23:47.8612237Z     
2025-01-10T13:23:47.8612326Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8612468Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8612638Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8612754Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8612828Z E           
2025-01-10T13:23:47.8612946Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8613337Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8613728Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8613734Z 
2025-01-10T13:23:47.8614042Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8614047Z 
2025-01-10T13:23:47.8614215Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8614220Z 
2025-01-10T13:23:47.8614451Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61baa990>
2025-01-10T13:23:47.8614619Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8614713Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8614718Z 
2025-01-10T13:23:47.8614861Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8614976Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8615066Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8615139Z         try:
2025-01-10T13:23:47.8615303Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8615386Z         except KeyError:
2025-01-10T13:23:47.8615530Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8615602Z     
2025-01-10T13:23:47.8615696Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8615793Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8615888Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8616020Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8616113Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8616217Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8616330Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8616335Z 
2025-01-10T13:23:47.8616468Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8616581Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8616732Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8616806Z     ???
2025-01-10T13:23:47.8616921Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8616926Z 
2025-01-10T13:23:47.8616999Z >   ???
2025-01-10T13:23:47.8617133Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8617204Z E   
2025-01-10T13:23:47.8617338Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8617451Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8617672Z E          ...
2025-01-10T13:23:47.8617765Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8617901Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8618022Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8618096Z E          ...
2025-01-10T13:23:47.8618192Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8618319Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8618429Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8618434Z 
2025-01-10T13:23:47.8618523Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8618778Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] _
2025-01-10T13:23:47.8618783Z 
2025-01-10T13:23:47.8618911Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8619039Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8619245Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8619378Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8619508Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8619601Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8619682Z err_msg = None
2025-01-10T13:23:47.8619686Z 
2025-01-10T13:23:47.8619802Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8619891Z         if err_msg is None:
2025-01-10T13:23:47.8619988Z             if left.shape != right.shape:
2025-01-10T13:23:47.8620079Z                 raise_assert_detail(
2025-01-10T13:23:47.8620224Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8620298Z                 )
2025-01-10T13:23:47.8620372Z     
2025-01-10T13:23:47.8620459Z             diff = 0
2025-01-10T13:23:47.8620579Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8620668Z                 # count up differences
2025-01-10T13:23:47.8620840Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8620920Z                     diff += 1
2025-01-10T13:23:47.8620996Z     
2025-01-10T13:23:47.8621089Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8621230Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8621402Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8621522Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8621596Z E           
2025-01-10T13:23:47.8621714Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8621976Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8622288Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8622299Z 
2025-01-10T13:23:47.8622838Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8622849Z 
2025-01-10T13:23:47.8623272Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8623286Z 
2025-01-10T13:23:47.8623666Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61baaa50>
2025-01-10T13:23:47.8624113Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>, attr = 'f_lu'
2025-01-10T13:23:47.8624126Z 
2025-01-10T13:23:47.8624269Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8624393Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8624479Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8624557Z         try:
2025-01-10T13:23:47.8624698Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8624787Z         except KeyError:
2025-01-10T13:23:47.8624930Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8625006Z     
2025-01-10T13:23:47.8625100Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8625195Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8625292Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8625425Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8625522Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8625732Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8625850Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8625855Z 
2025-01-10T13:23:47.8625980Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8626097Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8626244Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8626323Z     ???
2025-01-10T13:23:47.8626432Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8626443Z 
2025-01-10T13:23:47.8626514Z >   ???
2025-01-10T13:23:47.8626646Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8626718Z E   
2025-01-10T13:23:47.8626851Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8626964Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8627048Z E          ...
2025-01-10T13:23:47.8627143Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8627280Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8627393Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8627473Z E          ...
2025-01-10T13:23:47.8627561Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8627691Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8627796Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8627806Z 
2025-01-10T13:23:47.8627896Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8628205Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] _
2025-01-10T13:23:47.8628211Z 
2025-01-10T13:23:47.8628436Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bab050>
2025-01-10T13:23:47.8628610Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8628710Z attr = 'stimulated_emission_factor'
2025-01-10T13:23:47.8628715Z 
2025-01-10T13:23:47.8628856Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8628970Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8629061Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8629135Z         try:
2025-01-10T13:23:47.8629277Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8629364Z         except KeyError:
2025-01-10T13:23:47.8629503Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8629580Z     
2025-01-10T13:23:47.8629668Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8629768Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8629858Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8629997Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8630175Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8630279Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8630392Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8630473Z             else:
2025-01-10T13:23:47.8630568Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8630683Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8630688Z 
2025-01-10T13:23:47.8630817Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8630930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8631082Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8631155Z     ???
2025-01-10T13:23:47.8631270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8631275Z 
2025-01-10T13:23:47.8631345Z >   ???
2025-01-10T13:23:47.8631527Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:47.8631605Z E   
2025-01-10T13:23:47.8631864Z E   DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:23:47.8632225Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8637285Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
2025-01-10T13:23:47.8642893Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:23:47.8643507Z E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:23:47.8643515Z 
2025-01-10T13:23:47.8643615Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8643915Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] _
2025-01-10T13:23:47.8643920Z 
2025-01-10T13:23:47.8644063Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8644195Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8644303Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8644444Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8644581Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8644682Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8644761Z err_msg = None
2025-01-10T13:23:47.8644765Z 
2025-01-10T13:23:47.8644889Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8644973Z         if err_msg is None:
2025-01-10T13:23:47.8645078Z             if left.shape != right.shape:
2025-01-10T13:23:47.8645165Z                 raise_assert_detail(
2025-01-10T13:23:47.8645318Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8645393Z                 )
2025-01-10T13:23:47.8645471Z     
2025-01-10T13:23:47.8645547Z             diff = 0
2025-01-10T13:23:47.8645665Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8645760Z                 # count up differences
2025-01-10T13:23:47.8645944Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8646025Z                     diff += 1
2025-01-10T13:23:47.8646105Z     
2025-01-10T13:23:47.8646201Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8646343Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8646518Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8646633Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8646711Z E           
2025-01-10T13:23:47.8646825Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8647089Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8647465Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8647477Z 
2025-01-10T13:23:47.8647783Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8647789Z 
2025-01-10T13:23:47.8647965Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8647970Z 
2025-01-10T13:23:47.8648195Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bab110>
2025-01-10T13:23:47.8648370Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8648459Z attr = 'previous_beta_sobolev'
2025-01-10T13:23:47.8648473Z 
2025-01-10T13:23:47.8648730Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8648856Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8648941Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8649021Z         try:
2025-01-10T13:23:47.8649163Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8649252Z         except KeyError:
2025-01-10T13:23:47.8649392Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8649468Z     
2025-01-10T13:23:47.8649557Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8649659Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8649752Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8649889Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8649977Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8650077Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8650200Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8650280Z             else:
2025-01-10T13:23:47.8650381Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8650492Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8650497Z 
2025-01-10T13:23:47.8650629Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8650745Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8650898Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8650971Z     ???
2025-01-10T13:23:47.8651086Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8651091Z 
2025-01-10T13:23:47.8651162Z >   ???
2025-01-10T13:23:47.8651293Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8651364Z E   
2025-01-10T13:23:47.8651500Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8651621Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8651699Z E          ...
2025-01-10T13:23:47.8651797Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8651931Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8652049Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8652127Z E          ...
2025-01-10T13:23:47.8652220Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8652346Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8652457Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8652462Z 
2025-01-10T13:23:47.8652552Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8652827Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] _
2025-01-10T13:23:47.8652833Z 
2025-01-10T13:23:47.8652967Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8653318Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8653426Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8653566Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8653702Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8653802Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8653887Z err_msg = None
2025-01-10T13:23:47.8653891Z 
2025-01-10T13:23:47.8654004Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8654090Z         if err_msg is None:
2025-01-10T13:23:47.8654194Z             if left.shape != right.shape:
2025-01-10T13:23:47.8654280Z                 raise_assert_detail(
2025-01-10T13:23:47.8654435Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8654628Z                 )
2025-01-10T13:23:47.8654703Z     
2025-01-10T13:23:47.8654778Z             diff = 0
2025-01-10T13:23:47.8654895Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8654985Z                 # count up differences
2025-01-10T13:23:47.8655162Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8655240Z                     diff += 1
2025-01-10T13:23:47.8655319Z     
2025-01-10T13:23:47.8655410Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8655555Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8655726Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8655846Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8655925Z E           
2025-01-10T13:23:47.8656039Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8656305Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8656569Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8656574Z 
2025-01-10T13:23:47.8656884Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8656889Z 
2025-01-10T13:23:47.8657063Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8657071Z 
2025-01-10T13:23:47.8657297Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bab1d0>
2025-01-10T13:23:47.8657473Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8657555Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8657560Z 
2025-01-10T13:23:47.8657705Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8657822Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8657915Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8657988Z         try:
2025-01-10T13:23:47.8658138Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8658227Z         except KeyError:
2025-01-10T13:23:47.8658367Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8658444Z     
2025-01-10T13:23:47.8658534Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8658638Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8658940Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8659198Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8659351Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8659512Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8659700Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8659828Z             else:
2025-01-10T13:23:47.8659984Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8660165Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8660172Z 
2025-01-10T13:23:47.8660389Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8660546Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8660703Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8660778Z     ???
2025-01-10T13:23:47.8660897Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8660908Z 
2025-01-10T13:23:47.8660979Z >   ???
2025-01-10T13:23:47.8661221Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8661292Z E   
2025-01-10T13:23:47.8661427Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8661542Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8661621Z E          ...
2025-01-10T13:23:47.8661711Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8661847Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8661967Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8662040Z E          ...
2025-01-10T13:23:47.8662133Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8662258Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8662368Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8662373Z 
2025-01-10T13:23:47.8662467Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8662741Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] _
2025-01-10T13:23:47.8662751Z 
2025-01-10T13:23:47.8662881Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8663011Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8663244Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8663380Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8663508Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8663604Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8663684Z err_msg = None
2025-01-10T13:23:47.8663689Z 
2025-01-10T13:23:47.8663801Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8663896Z         if err_msg is None:
2025-01-10T13:23:47.8663997Z             if left.shape != right.shape:
2025-01-10T13:23:47.8664088Z                 raise_assert_detail(
2025-01-10T13:23:47.8664237Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8664315Z                 )
2025-01-10T13:23:47.8664389Z     
2025-01-10T13:23:47.8664468Z             diff = 0
2025-01-10T13:23:47.8664587Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8664676Z                 # count up differences
2025-01-10T13:23:47.8664849Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8664929Z                     diff += 1
2025-01-10T13:23:47.8665006Z     
2025-01-10T13:23:47.8665097Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8665238Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8665408Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8665659Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8665734Z E           
2025-01-10T13:23:47.8665853Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8666110Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8666374Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8666380Z 
2025-01-10T13:23:47.8666695Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8666800Z 
2025-01-10T13:23:47.8666974Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8666980Z 
2025-01-10T13:23:47.8667206Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bab290>
2025-01-10T13:23:47.8667382Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8667463Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8667468Z 
2025-01-10T13:23:47.8667613Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8667729Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8667825Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8667899Z         try:
2025-01-10T13:23:47.8668044Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8668127Z         except KeyError:
2025-01-10T13:23:47.8668273Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8668354Z     
2025-01-10T13:23:47.8668447Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8668542Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8668637Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8668777Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8668864Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8668960Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8669071Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8669148Z             else:
2025-01-10T13:23:47.8669243Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8669356Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8669361Z 
2025-01-10T13:23:47.8669487Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8669607Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8669757Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8669840Z     ???
2025-01-10T13:23:47.8669952Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8669961Z 
2025-01-10T13:23:47.8670032Z >   ???
2025-01-10T13:23:47.8670166Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8670237Z E   
2025-01-10T13:23:47.8670370Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8670482Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8670561Z E          ...
2025-01-10T13:23:47.8670651Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8670784Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8670896Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8670982Z E          ...
2025-01-10T13:23:47.8671070Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8671314Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8671425Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8671434Z 
2025-01-10T13:23:47.8671522Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8671783Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] _
2025-01-10T13:23:47.8671789Z 
2025-01-10T13:23:47.8671918Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8672050Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8672148Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8672283Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8672406Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8672511Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8672671Z err_msg = None
2025-01-10T13:23:47.8672676Z 
2025-01-10T13:23:47.8672787Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8672875Z         if err_msg is None:
2025-01-10T13:23:47.8672973Z             if left.shape != right.shape:
2025-01-10T13:23:47.8673206Z                 raise_assert_detail(
2025-01-10T13:23:47.8673353Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8673436Z                 )
2025-01-10T13:23:47.8673509Z     
2025-01-10T13:23:47.8673590Z             diff = 0
2025-01-10T13:23:47.8673704Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8673800Z                 # count up differences
2025-01-10T13:23:47.8673972Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8674057Z                     diff += 1
2025-01-10T13:23:47.8674133Z     
2025-01-10T13:23:47.8674231Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8674378Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8674554Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8674676Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8674750Z E           
2025-01-10T13:23:47.8674869Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8675126Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8675395Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8675408Z 
2025-01-10T13:23:47.8675728Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8675733Z 
2025-01-10T13:23:47.8675906Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8675911Z 
2025-01-10T13:23:47.8676144Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bab410>
2025-01-10T13:23:47.8676315Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef36ea9790>
2025-01-10T13:23:47.8676400Z attr = 'j_blues'
2025-01-10T13:23:47.8676404Z 
2025-01-10T13:23:47.8676544Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8676670Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8676760Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8677104Z         try:
2025-01-10T13:23:47.8677372Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8677513Z         except KeyError:
2025-01-10T13:23:47.8677754Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8677873Z     
2025-01-10T13:23:47.8678026Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8678180Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8678343Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8678486Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8678582Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8678675Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8678797Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8678878Z             else:
2025-01-10T13:23:47.8678976Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8679096Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8679256Z 
2025-01-10T13:23:47.8679392Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8679515Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8679665Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8679745Z     ???
2025-01-10T13:23:47.8679857Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8679861Z 
2025-01-10T13:23:47.8687631Z >   ???
2025-01-10T13:23:47.8687828Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8687904Z E   
2025-01-10T13:23:47.8688051Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8688172Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8688248Z E          ...
2025-01-10T13:23:47.8688348Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8688496Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8688630Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8688704Z E          ...
2025-01-10T13:23:47.8688800Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8688937Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8689052Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8689057Z 
2025-01-10T13:23:47.8689157Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8689366Z _____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines] ______
2025-01-10T13:23:47.8689371Z 
2025-01-10T13:23:47.8689510Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8689645Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8689752Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8689899Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8690036Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8690137Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8690217Z err_msg = None
2025-01-10T13:23:47.8690221Z 
2025-01-10T13:23:47.8690346Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8690430Z         if err_msg is None:
2025-01-10T13:23:47.8690540Z             if left.shape != right.shape:
2025-01-10T13:23:47.8690627Z                 raise_assert_detail(
2025-01-10T13:23:47.8690787Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8690861Z                 )
2025-01-10T13:23:47.8690935Z     
2025-01-10T13:23:47.8691008Z             diff = 0
2025-01-10T13:23:47.8691123Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8691395Z                 # count up differences
2025-01-10T13:23:47.8691583Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8691672Z                     diff += 1
2025-01-10T13:23:47.8691744Z     
2025-01-10T13:23:47.8691842Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8691983Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8692162Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8692283Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8692362Z E           
2025-01-10T13:23:47.8692476Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8692743Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8693269Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8693277Z 
2025-01-10T13:23:47.8693599Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8693604Z 
2025-01-10T13:23:47.8693785Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8693791Z 
2025-01-10T13:23:47.8694018Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd41d0>
2025-01-10T13:23:47.8694197Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8694279Z attr = 'lines'
2025-01-10T13:23:47.8694288Z 
2025-01-10T13:23:47.8694434Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8694566Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8694653Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8694729Z         try:
2025-01-10T13:23:47.8694969Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8695172Z         except KeyError:
2025-01-10T13:23:47.8695434Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8695583Z     
2025-01-10T13:23:47.8695740Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8695908Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8696055Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8696288Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8696436Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8696587Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8696752Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8696834Z             else:
2025-01-10T13:23:47.8696940Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8697050Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8697055Z 
2025-01-10T13:23:47.8697195Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8697313Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8697472Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8697545Z     ???
2025-01-10T13:23:47.8697663Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8697668Z 
2025-01-10T13:23:47.8697743Z >   ???
2025-01-10T13:23:47.8697875Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8697951Z E   
2025-01-10T13:23:47.8698081Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8698353Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8698430Z E          ...
2025-01-10T13:23:47.8698524Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8698654Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8698773Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8698847Z E          ...
2025-01-10T13:23:47.8698941Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8699065Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8699177Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8699182Z 
2025-01-10T13:23:47.8699273Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8699512Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] _
2025-01-10T13:23:47.8699517Z 
2025-01-10T13:23:47.8699748Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4290>
2025-01-10T13:23:47.8699921Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8700149Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8700154Z 
2025-01-10T13:23:47.8700294Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8700415Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8700500Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8700579Z         try:
2025-01-10T13:23:47.8700720Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8700809Z         except KeyError:
2025-01-10T13:23:47.8700946Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8701024Z     
2025-01-10T13:23:47.8701118Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8701212Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8701310Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8701448Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8701548Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8701684Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8701801Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8701806Z 
2025-01-10T13:23:47.8701931Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8702048Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8702053Z 
2025-01-10T13:23:47.8702188Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8702282Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8702393Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8702474Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8702624Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8702708Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8702822Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8702914Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8702990Z err_msg = None
2025-01-10T13:23:47.8702994Z 
2025-01-10T13:23:47.8703237Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8703321Z         if err_msg is None:
2025-01-10T13:23:47.8703422Z             if left.shape != right.shape:
2025-01-10T13:23:47.8703507Z                 raise_assert_detail(
2025-01-10T13:23:47.8703657Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8703729Z                 )
2025-01-10T13:23:47.8703805Z     
2025-01-10T13:23:47.8703879Z             diff = 0
2025-01-10T13:23:47.8703997Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8704086Z                 # count up differences
2025-01-10T13:23:47.8704261Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8704472Z                     diff += 1
2025-01-10T13:23:47.8704555Z     
2025-01-10T13:23:47.8704647Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8704783Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8704957Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8705061Z E           AssertionError: Series are different
2025-01-10T13:23:47.8705139Z E           
2025-01-10T13:23:47.8705242Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8705614Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8706057Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8706384Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8706390Z 
2025-01-10T13:23:47.8706703Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8706948Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] _
2025-01-10T13:23:47.8706958Z 
2025-01-10T13:23:47.8707183Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4350>
2025-01-10T13:23:47.8707355Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8707447Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8707452Z 
2025-01-10T13:23:47.8707596Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8707711Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8707800Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8707873Z         try:
2025-01-10T13:23:47.8708020Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8708101Z         except KeyError:
2025-01-10T13:23:47.8708244Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8708320Z     
2025-01-10T13:23:47.8708411Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8708513Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8708602Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8708741Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8708827Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8708926Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8709036Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8709041Z 
2025-01-10T13:23:47.8709170Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8709283Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8709288Z 
2025-01-10T13:23:47.8709427Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8709517Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8709624Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8709811Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8709953Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8710038Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8710140Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8710222Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8710297Z err_msg = None
2025-01-10T13:23:47.8710302Z 
2025-01-10T13:23:47.8710418Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8710499Z         if err_msg is None:
2025-01-10T13:23:47.8710599Z             if left.shape != right.shape:
2025-01-10T13:23:47.8710685Z                 raise_assert_detail(
2025-01-10T13:23:47.8710832Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8710909Z                 )
2025-01-10T13:23:47.8710979Z     
2025-01-10T13:23:47.8711057Z             diff = 0
2025-01-10T13:23:47.8711174Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8711350Z                 # count up differences
2025-01-10T13:23:47.8711523Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8711607Z                     diff += 1
2025-01-10T13:23:47.8711677Z     
2025-01-10T13:23:47.8711771Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8711909Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8712083Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8712187Z E           AssertionError: Series are different
2025-01-10T13:23:47.8712265Z E           
2025-01-10T13:23:47.8712373Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8712735Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8713443Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8714124Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8714155Z 
2025-01-10T13:23:47.8714654Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8714859Z _______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-nu] _______
2025-01-10T13:23:47.8714863Z 
2025-01-10T13:23:47.8714992Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8715124Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8715230Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8715363Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8715492Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8715735Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8715818Z err_msg = None
2025-01-10T13:23:47.8715822Z 
2025-01-10T13:23:47.8715935Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8716025Z         if err_msg is None:
2025-01-10T13:23:47.8716122Z             if left.shape != right.shape:
2025-01-10T13:23:47.8716211Z                 raise_assert_detail(
2025-01-10T13:23:47.8716355Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8716434Z                 )
2025-01-10T13:23:47.8716507Z     
2025-01-10T13:23:47.8716580Z             diff = 0
2025-01-10T13:23:47.8716697Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8716785Z                 # count up differences
2025-01-10T13:23:47.8716957Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8717035Z                     diff += 1
2025-01-10T13:23:47.8717117Z     
2025-01-10T13:23:47.8717323Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8717467Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8717635Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8717753Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8717826Z E           
2025-01-10T13:23:47.8717944Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8718201Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8718470Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8718483Z 
2025-01-10T13:23:47.8718790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8718795Z 
2025-01-10T13:23:47.8718964Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8718974Z 
2025-01-10T13:23:47.8719196Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4590>
2025-01-10T13:23:47.8719402Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>, attr = 'nu'
2025-01-10T13:23:47.8719407Z 
2025-01-10T13:23:47.8719546Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8719669Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8719754Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8719837Z         try:
2025-01-10T13:23:47.8719981Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8720068Z         except KeyError:
2025-01-10T13:23:47.8720205Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8720282Z     
2025-01-10T13:23:47.8720368Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8720468Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8720564Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8720695Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8720786Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8720878Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8720993Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8720998Z 
2025-01-10T13:23:47.8721123Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8721243Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8721492Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8721575Z     ???
2025-01-10T13:23:47.8721689Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8721694Z 
2025-01-10T13:23:47.8721772Z >   ???
2025-01-10T13:23:47.8721907Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8721978Z E   
2025-01-10T13:23:47.8722115Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8722228Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8722313Z E          ...
2025-01-10T13:23:47.8722403Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8722541Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8722654Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8722734Z E          ...
2025-01-10T13:23:47.8722828Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8723304Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8723424Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8723429Z 
2025-01-10T13:23:47.8723525Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8723738Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] __
2025-01-10T13:23:47.8723743Z 
2025-01-10T13:23:47.8723873Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8724011Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8724110Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8724247Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8724371Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8724475Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8724554Z err_msg = None
2025-01-10T13:23:47.8724558Z 
2025-01-10T13:23:47.8724673Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8724760Z         if err_msg is None:
2025-01-10T13:23:47.8724856Z             if left.shape != right.shape:
2025-01-10T13:23:47.8724944Z                 raise_assert_detail(
2025-01-10T13:23:47.8725087Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8725162Z                 )
2025-01-10T13:23:47.8725232Z     
2025-01-10T13:23:47.8725309Z             diff = 0
2025-01-10T13:23:47.8725422Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8725517Z                 # count up differences
2025-01-10T13:23:47.8725685Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8725769Z                     diff += 1
2025-01-10T13:23:47.8725844Z     
2025-01-10T13:23:47.8725939Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8726080Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8726256Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8726383Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8726457Z E           
2025-01-10T13:23:47.8726577Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8726835Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8727093Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8727235Z 
2025-01-10T13:23:47.8727544Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8727549Z 
2025-01-10T13:23:47.8727717Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8727722Z 
2025-01-10T13:23:47.8727947Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4650>
2025-01-10T13:23:47.8728115Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8728201Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8728206Z 
2025-01-10T13:23:47.8728344Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8728464Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8728558Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8728739Z         try:
2025-01-10T13:23:47.8728886Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8728968Z         except KeyError:
2025-01-10T13:23:47.8729111Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8729181Z     
2025-01-10T13:23:47.8729273Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8729366Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8729461Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8729592Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8729680Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8729768Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8729881Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8729886Z 
2025-01-10T13:23:47.8730009Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8730131Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8730288Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8730360Z     ???
2025-01-10T13:23:47.8730474Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8730479Z 
2025-01-10T13:23:47.8730548Z >   ???
2025-01-10T13:23:47.8730679Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8730749Z E   
2025-01-10T13:23:47.8730882Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8730992Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8731075Z E          ...
2025-01-10T13:23:47.8731163Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8731298Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8731411Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8731489Z E          ...
2025-01-10T13:23:47.8731658Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8731890Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8732076Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8732085Z 
2025-01-10T13:23:47.8732236Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8732572Z ______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-f_lu] ______
2025-01-10T13:23:47.8732579Z 
2025-01-10T13:23:47.8732790Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8733003Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8733331Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8733473Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8733604Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8733874Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8733956Z err_msg = None
2025-01-10T13:23:47.8733961Z 
2025-01-10T13:23:47.8734072Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8734157Z         if err_msg is None:
2025-01-10T13:23:47.8734253Z             if left.shape != right.shape:
2025-01-10T13:23:47.8734341Z                 raise_assert_detail(
2025-01-10T13:23:47.8734485Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8734561Z                 )
2025-01-10T13:23:47.8734631Z     
2025-01-10T13:23:47.8734708Z             diff = 0
2025-01-10T13:23:47.8734819Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8734911Z                 # count up differences
2025-01-10T13:23:47.8735082Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8735160Z                     diff += 1
2025-01-10T13:23:47.8735239Z     
2025-01-10T13:23:47.8735443Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8735588Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8735760Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8735881Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8735956Z E           
2025-01-10T13:23:47.8736074Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8736329Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8736596Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8736611Z 
2025-01-10T13:23:47.8736921Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8736926Z 
2025-01-10T13:23:47.8737093Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8737098Z 
2025-01-10T13:23:47.8737321Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4710>
2025-01-10T13:23:47.8737528Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>, attr = 'f_lu'
2025-01-10T13:23:47.8737533Z 
2025-01-10T13:23:47.8737670Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8737791Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8737877Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8737961Z         try:
2025-01-10T13:23:47.8738105Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8738192Z         except KeyError:
2025-01-10T13:23:47.8738332Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8738408Z     
2025-01-10T13:23:47.8738496Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8738595Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8738685Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8738820Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8738908Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8738998Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8739113Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8739118Z 
2025-01-10T13:23:47.8739240Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8739352Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8739595Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8739673Z     ???
2025-01-10T13:23:47.8739784Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8739788Z 
2025-01-10T13:23:47.8739861Z >   ???
2025-01-10T13:23:47.8739987Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8740062Z E   
2025-01-10T13:23:47.8740191Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8740307Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8740385Z E          ...
2025-01-10T13:23:47.8740475Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8740608Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8740720Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8740798Z E          ...
2025-01-10T13:23:47.8740890Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8741122Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8741228Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8741233Z 
2025-01-10T13:23:47.8741327Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8741565Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] _
2025-01-10T13:23:47.8741576Z 
2025-01-10T13:23:47.8741798Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4d10>
2025-01-10T13:23:47.8741970Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8742063Z attr = 'stimulated_emission_factor'
2025-01-10T13:23:47.8742068Z 
2025-01-10T13:23:47.8742205Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8742319Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8742408Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8742485Z         try:
2025-01-10T13:23:47.8742634Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8742716Z         except KeyError:
2025-01-10T13:23:47.8742859Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8742930Z     
2025-01-10T13:23:47.8743188Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8743294Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8743383Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8743518Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8743604Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8743697Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8743806Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8743883Z             else:
2025-01-10T13:23:47.8743977Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8744091Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8744100Z 
2025-01-10T13:23:47.8744230Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8744345Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8744489Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8744565Z     ???
2025-01-10T13:23:47.8744677Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8744682Z 
2025-01-10T13:23:47.8744751Z >   ???
2025-01-10T13:23:47.8744931Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:47.8745001Z E   
2025-01-10T13:23:47.8745174Z E   DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:23:47.8745536Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8750511Z E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
2025-01-10T13:23:47.8756313Z E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:23:47.8756549Z E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:23:47.8756704Z 
2025-01-10T13:23:47.8756807Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8757050Z _ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] _
2025-01-10T13:23:47.8757056Z 
2025-01-10T13:23:47.8757196Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8757330Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8757437Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8757574Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8757703Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8757801Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8757883Z err_msg = None
2025-01-10T13:23:47.8757894Z 
2025-01-10T13:23:47.8758011Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8758209Z         if err_msg is None:
2025-01-10T13:23:47.8758313Z             if left.shape != right.shape:
2025-01-10T13:23:47.8758400Z                 raise_assert_detail(
2025-01-10T13:23:47.8758555Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8758629Z                 )
2025-01-10T13:23:47.8758710Z     
2025-01-10T13:23:47.8758784Z             diff = 0
2025-01-10T13:23:47.8758901Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8758990Z                 # count up differences
2025-01-10T13:23:47.8759168Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8759247Z                     diff += 1
2025-01-10T13:23:47.8759322Z     
2025-01-10T13:23:47.8759413Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8759557Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8759739Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8759861Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8759940Z E           
2025-01-10T13:23:47.8760056Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8760323Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8760583Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8760597Z 
2025-01-10T13:23:47.8760917Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8760923Z 
2025-01-10T13:23:47.8761102Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8761107Z 
2025-01-10T13:23:47.8761332Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4dd0>
2025-01-10T13:23:47.8761505Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8761595Z attr = 'previous_beta_sobolev'
2025-01-10T13:23:47.8761600Z 
2025-01-10T13:23:47.8761745Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8761865Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8761957Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8762029Z         try:
2025-01-10T13:23:47.8762183Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8762371Z         except KeyError:
2025-01-10T13:23:47.8762522Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8762598Z     
2025-01-10T13:23:47.8762686Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8762786Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8762879Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8763173Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8763268Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8763363Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8763477Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8763554Z             else:
2025-01-10T13:23:47.8763651Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8763764Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8763769Z 
2025-01-10T13:23:47.8763902Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8764023Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8764305Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8764378Z     ???
2025-01-10T13:23:47.8764492Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8764497Z 
2025-01-10T13:23:47.8764567Z >   ???
2025-01-10T13:23:47.8764701Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8764770Z E   
2025-01-10T13:23:47.8764903Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8765018Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8765097Z E          ...
2025-01-10T13:23:47.8765186Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8765321Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8765438Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8765514Z E          ...
2025-01-10T13:23:47.8765610Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8765737Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8765848Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8765852Z 
2025-01-10T13:23:47.8765941Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8766149Z __ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] __
2025-01-10T13:23:47.8766154Z 
2025-01-10T13:23:47.8766284Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8766419Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8766519Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8766656Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8766784Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8766889Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8766972Z err_msg = None
2025-01-10T13:23:47.8766977Z 
2025-01-10T13:23:47.8767097Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8767185Z         if err_msg is None:
2025-01-10T13:23:47.8767281Z             if left.shape != right.shape:
2025-01-10T13:23:47.8767372Z                 raise_assert_detail(
2025-01-10T13:23:47.8767517Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8767599Z                 )
2025-01-10T13:23:47.8767672Z     
2025-01-10T13:23:47.8767750Z             diff = 0
2025-01-10T13:23:47.8767862Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8767974Z                 # count up differences
2025-01-10T13:23:47.8768285Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8768618Z                     diff += 1
2025-01-10T13:23:47.8768759Z     
2025-01-10T13:23:47.8768909Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8769142Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8769429Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8769628Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8769710Z E           
2025-01-10T13:23:47.8769831Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8770091Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8770360Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8770470Z 
2025-01-10T13:23:47.8770788Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8770795Z 
2025-01-10T13:23:47.8770970Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8770976Z 
2025-01-10T13:23:47.8771207Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4e90>
2025-01-10T13:23:47.8771384Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8771465Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8771470Z 
2025-01-10T13:23:47.8771613Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8771737Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8771831Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8771903Z         try:
2025-01-10T13:23:47.8772049Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8772131Z         except KeyError:
2025-01-10T13:23:47.8772274Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8772344Z     
2025-01-10T13:23:47.8772438Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8772533Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8772628Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8772765Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8772851Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8772946Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8773195Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8773276Z             else:
2025-01-10T13:23:47.8773377Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8773493Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8773498Z 
2025-01-10T13:23:47.8773625Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8773742Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8773888Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8773965Z     ???
2025-01-10T13:23:47.8774076Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8774085Z 
2025-01-10T13:23:47.8774154Z >   ???
2025-01-10T13:23:47.8774286Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8774357Z E   
2025-01-10T13:23:47.8774491Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8774603Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8774682Z E          ...
2025-01-10T13:23:47.8774919Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8775063Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8775177Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8775254Z E          ...
2025-01-10T13:23:47.8775342Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8775474Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8775579Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8775589Z 
2025-01-10T13:23:47.8775678Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8775885Z __ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] __
2025-01-10T13:23:47.8775890Z 
2025-01-10T13:23:47.8776018Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8776150Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8776254Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8776504Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8776626Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8776725Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8776801Z err_msg = None
2025-01-10T13:23:47.8776810Z 
2025-01-10T13:23:47.8776920Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8777005Z         if err_msg is None:
2025-01-10T13:23:47.8777102Z             if left.shape != right.shape:
2025-01-10T13:23:47.8777192Z                 raise_assert_detail(
2025-01-10T13:23:47.8777335Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8777411Z                 )
2025-01-10T13:23:47.8777481Z     
2025-01-10T13:23:47.8777560Z             diff = 0
2025-01-10T13:23:47.8777676Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8777772Z                 # count up differences
2025-01-10T13:23:47.8777941Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8778023Z                     diff += 1
2025-01-10T13:23:47.8778098Z     
2025-01-10T13:23:47.8778193Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8778335Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8778503Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8778620Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8778692Z E           
2025-01-10T13:23:47.8778809Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8779065Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8779333Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8779339Z 
2025-01-10T13:23:47.8779646Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8779652Z 
2025-01-10T13:23:47.8779820Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8779825Z 
2025-01-10T13:23:47.8780049Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd4f50>
2025-01-10T13:23:47.8780218Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8780410Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8780415Z 
2025-01-10T13:23:47.8780555Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8780675Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8780766Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8780840Z         try:
2025-01-10T13:23:47.8780985Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8781067Z         except KeyError:
2025-01-10T13:23:47.8781213Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8781284Z     
2025-01-10T13:23:47.8781377Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8781473Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8781568Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8781701Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8781792Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8781886Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8782088Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8782161Z             else:
2025-01-10T13:23:47.8782262Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8782376Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8782381Z 
2025-01-10T13:23:47.8782504Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8782624Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8782769Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8782847Z     ???
2025-01-10T13:23:47.8782955Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8782960Z 
2025-01-10T13:23:47.8783179Z >   ???
2025-01-10T13:23:47.8783313Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8783389Z E   
2025-01-10T13:23:47.8783524Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8783651Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8783730Z E          ...
2025-01-10T13:23:47.8783819Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8783952Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8784063Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8784141Z E          ...
2025-01-10T13:23:47.8784225Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8784353Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8784459Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8784464Z 
2025-01-10T13:23:47.8784558Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8784758Z ____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues] _____
2025-01-10T13:23:47.8784763Z 
2025-01-10T13:23:47.8784897Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8785032Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8785129Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8785267Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8785390Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8785491Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8785568Z err_msg = None
2025-01-10T13:23:47.8785572Z 
2025-01-10T13:23:47.8785686Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8785771Z         if err_msg is None:
2025-01-10T13:23:47.8785871Z             if left.shape != right.shape:
2025-01-10T13:23:47.8785957Z                 raise_assert_detail(
2025-01-10T13:23:47.8786228Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8786357Z                 )
2025-01-10T13:23:47.8786484Z     
2025-01-10T13:23:47.8786624Z             diff = 0
2025-01-10T13:23:47.8786814Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8786967Z                 # count up differences
2025-01-10T13:23:47.8787253Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8787385Z                     diff += 1
2025-01-10T13:23:47.8787499Z     
2025-01-10T13:23:47.8787648Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8787864Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8788043Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8788157Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8788236Z E           
2025-01-10T13:23:47.8788346Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8788764Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8789028Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8789034Z 
2025-01-10T13:23:47.8789338Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8789349Z 
2025-01-10T13:23:47.8789517Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8789525Z 
2025-01-10T13:23:47.8789755Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd50d0>
2025-01-10T13:23:47.8789922Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5966ed50>
2025-01-10T13:23:47.8790004Z attr = 'j_blues'
2025-01-10T13:23:47.8790008Z 
2025-01-10T13:23:47.8790146Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8790265Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8790350Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8790428Z         try:
2025-01-10T13:23:47.8790566Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8790653Z         except KeyError:
2025-01-10T13:23:47.8790790Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8790866Z     
2025-01-10T13:23:47.8790960Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8791058Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8791157Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8791291Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8791381Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8791471Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8791584Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8791658Z             else:
2025-01-10T13:23:47.8791757Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8791862Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8791867Z 
2025-01-10T13:23:47.8791997Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8792107Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8792258Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8792336Z     ???
2025-01-10T13:23:47.8792443Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8792538Z 
2025-01-10T13:23:47.8792615Z >   ???
2025-01-10T13:23:47.8792743Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8792818Z E   
2025-01-10T13:23:47.8792946Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8793331Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8793459Z E          ...
2025-01-10T13:23:47.8793614Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8793750Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8793870Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8793944Z E          ...
2025-01-10T13:23:47.8794038Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8794170Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8794275Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8794290Z 
2025-01-10T13:23:47.8794385Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8794770Z _______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines] _______
2025-01-10T13:23:47.8794775Z 
2025-01-10T13:23:47.8794910Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8795040Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8795142Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8795274Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8795401Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8795500Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8795577Z err_msg = None
2025-01-10T13:23:47.8795581Z 
2025-01-10T13:23:47.8795696Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8795786Z         if err_msg is None:
2025-01-10T13:23:47.8795891Z             if left.shape != right.shape:
2025-01-10T13:23:47.8795978Z                 raise_assert_detail(
2025-01-10T13:23:47.8796124Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8796196Z                 )
2025-01-10T13:23:47.8796272Z     
2025-01-10T13:23:47.8796347Z             diff = 0
2025-01-10T13:23:47.8796463Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8796551Z                 # count up differences
2025-01-10T13:23:47.8796724Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8796808Z                     diff += 1
2025-01-10T13:23:47.8796879Z     
2025-01-10T13:23:47.8796975Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8797111Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8797284Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8797404Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8797483Z E           
2025-01-10T13:23:47.8797594Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8797860Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8798121Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8798127Z 
2025-01-10T13:23:47.8798574Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8798584Z 
2025-01-10T13:23:47.8798756Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8798761Z 
2025-01-10T13:23:47.8798982Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd5e50>
2025-01-10T13:23:47.8799157Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>
2025-01-10T13:23:47.8799237Z attr = 'lines'
2025-01-10T13:23:47.8799242Z 
2025-01-10T13:23:47.8799379Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8799498Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8799583Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8799661Z         try:
2025-01-10T13:23:47.8799797Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8799883Z         except KeyError:
2025-01-10T13:23:47.8800026Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8800184Z     
2025-01-10T13:23:47.8800272Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8800372Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8800460Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8800597Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8800687Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8800780Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8800894Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8800968Z             else:
2025-01-10T13:23:47.8801067Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8801175Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8801179Z 
2025-01-10T13:23:47.8801309Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8801421Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8801576Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8801692Z     ???
2025-01-10T13:23:47.8801807Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8801812Z 
2025-01-10T13:23:47.8801882Z >   ???
2025-01-10T13:23:47.8802013Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8802089Z E   
2025-01-10T13:23:47.8802217Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8802334Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8802406Z E          ...
2025-01-10T13:23:47.8802500Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8802632Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8802753Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8802827Z E          ...
2025-01-10T13:23:47.8802918Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8803211Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8803327Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8803332Z 
2025-01-10T13:23:47.8803423Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8803654Z _ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index] _
2025-01-10T13:23:47.8803659Z 
2025-01-10T13:23:47.8803881Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd5f10>
2025-01-10T13:23:47.8804050Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>
2025-01-10T13:23:47.8804143Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8804148Z 
2025-01-10T13:23:47.8804284Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8804401Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8804484Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8804562Z         try:
2025-01-10T13:23:47.8804834Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8804981Z         except KeyError:
2025-01-10T13:23:47.8805222Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8805355Z     
2025-01-10T13:23:47.8805513Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8805671Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8805823Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8806044Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8806188Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8806333Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8806526Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8806532Z 
2025-01-10T13:23:47.8806665Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8806782Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8806794Z 
2025-01-10T13:23:47.8806930Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8807165Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8807281Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8807364Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8807511Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8807596Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8807709Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8807791Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8807874Z err_msg = None
2025-01-10T13:23:47.8807878Z 
2025-01-10T13:23:47.8807989Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8808075Z         if err_msg is None:
2025-01-10T13:23:47.8808170Z             if left.shape != right.shape:
2025-01-10T13:23:47.8808263Z                 raise_assert_detail(
2025-01-10T13:23:47.8808415Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8808488Z                 )
2025-01-10T13:23:47.8808563Z     
2025-01-10T13:23:47.8808637Z             diff = 0
2025-01-10T13:23:47.8808757Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8808846Z                 # count up differences
2025-01-10T13:23:47.8809021Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8809100Z                     diff += 1
2025-01-10T13:23:47.8809179Z     
2025-01-10T13:23:47.8809266Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8809410Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8809579Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8809689Z E           AssertionError: Series are different
2025-01-10T13:23:47.8809766Z E           
2025-01-10T13:23:47.8809879Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8810251Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8810579Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8810913Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8811034Z 
2025-01-10T13:23:47.8811348Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8811573Z _ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index] _
2025-01-10T13:23:47.8811578Z 
2025-01-10T13:23:47.8811801Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd5fd0>
2025-01-10T13:23:47.8811972Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>
2025-01-10T13:23:47.8812068Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8812072Z 
2025-01-10T13:23:47.8812216Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8812416Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8812507Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8812580Z         try:
2025-01-10T13:23:47.8812734Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8812818Z         except KeyError:
2025-01-10T13:23:47.8812962Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8813163Z     
2025-01-10T13:23:47.8813262Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8813360Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8813454Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8813589Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8813680Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8813771Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8813886Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8813897Z 
2025-01-10T13:23:47.8814030Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8814147Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8814153Z 
2025-01-10T13:23:47.8814293Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8814381Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8814492Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8814572Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8814715Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8814798Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8814908Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8814993Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8815072Z err_msg = None
2025-01-10T13:23:47.8815076Z 
2025-01-10T13:23:47.8815193Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8815274Z         if err_msg is None:
2025-01-10T13:23:47.8815378Z             if left.shape != right.shape:
2025-01-10T13:23:47.8815467Z                 raise_assert_detail(
2025-01-10T13:23:47.8815614Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8815685Z                 )
2025-01-10T13:23:47.8815762Z     
2025-01-10T13:23:47.8815836Z             diff = 0
2025-01-10T13:23:47.8815952Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8816041Z                 # count up differences
2025-01-10T13:23:47.8816218Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8816303Z                     diff += 1
2025-01-10T13:23:47.8816375Z     
2025-01-10T13:23:47.8816505Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8816893Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8817194Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8817346Z E           AssertionError: Series are different
2025-01-10T13:23:47.8817427Z E           
2025-01-10T13:23:47.8817533Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8817904Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8818271Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8818832Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8818838Z 
2025-01-10T13:23:47.8819154Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8819354Z ________ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-nu] _________
2025-01-10T13:23:47.8819359Z 
2025-01-10T13:23:47.8819494Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8819632Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8819731Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8819870Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8819991Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8820090Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8820167Z err_msg = None
2025-01-10T13:23:47.8820177Z 
2025-01-10T13:23:47.8820285Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8820371Z         if err_msg is None:
2025-01-10T13:23:47.8820469Z             if left.shape != right.shape:
2025-01-10T13:23:47.8820559Z                 raise_assert_detail(
2025-01-10T13:23:47.8820708Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8820789Z                 )
2025-01-10T13:23:47.8820860Z     
2025-01-10T13:23:47.8820941Z             diff = 0
2025-01-10T13:23:47.8821052Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8821147Z                 # count up differences
2025-01-10T13:23:47.8821316Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8821405Z                     diff += 1
2025-01-10T13:23:47.8821475Z     
2025-01-10T13:23:47.8821570Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8821703Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8821876Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8821995Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8822068Z E           
2025-01-10T13:23:47.8822304Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8822566Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8822829Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8822834Z 
2025-01-10T13:23:47.8823298Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8823306Z 
2025-01-10T13:23:47.8823475Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8823615Z 
2025-01-10T13:23:47.8823846Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd6210>
2025-01-10T13:23:47.8824046Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>, attr = 'nu'
2025-01-10T13:23:47.8824051Z 
2025-01-10T13:23:47.8824266Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8824469Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8824623Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8824761Z         try:
2025-01-10T13:23:47.8825001Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8825143Z         except KeyError:
2025-01-10T13:23:47.8825369Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8825490Z     
2025-01-10T13:23:47.8825630Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8825784Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8825891Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8826039Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8826128Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8826227Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8826345Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8826350Z 
2025-01-10T13:23:47.8826484Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8826607Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8826755Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8826833Z     ???
2025-01-10T13:23:47.8826941Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8826946Z 
2025-01-10T13:23:47.8827020Z >   ???
2025-01-10T13:23:47.8827150Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8827225Z E   
2025-01-10T13:23:47.8827359Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8827482Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8827555Z E          ...
2025-01-10T13:23:47.8827653Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8827784Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8827904Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8827982Z E          ...
2025-01-10T13:23:47.8828069Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8828201Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8828309Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8828313Z 
2025-01-10T13:23:47.8828408Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8828608Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-wavelength_cm] ___
2025-01-10T13:23:47.8828613Z 
2025-01-10T13:23:47.8828911Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8829051Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8829156Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8829288Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8829419Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8829519Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8829596Z err_msg = None
2025-01-10T13:23:47.8829600Z 
2025-01-10T13:23:47.8829715Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8829797Z         if err_msg is None:
2025-01-10T13:23:47.8829898Z             if left.shape != right.shape:
2025-01-10T13:23:47.8829984Z                 raise_assert_detail(
2025-01-10T13:23:47.8830138Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8830293Z                 )
2025-01-10T13:23:47.8830368Z     
2025-01-10T13:23:47.8830442Z             diff = 0
2025-01-10T13:23:47.8830559Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8830653Z                 # count up differences
2025-01-10T13:23:47.8830823Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8830907Z                     diff += 1
2025-01-10T13:23:47.8830978Z     
2025-01-10T13:23:47.8831075Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8831211Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8831386Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8831499Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8831576Z E           
2025-01-10T13:23:47.8831691Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8832006Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8832283Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8832289Z 
2025-01-10T13:23:47.8832597Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8832602Z 
2025-01-10T13:23:47.8832777Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8832788Z 
2025-01-10T13:23:47.8833310Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd62d0>
2025-01-10T13:23:47.8833498Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>
2025-01-10T13:23:47.8833585Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8833591Z 
2025-01-10T13:23:47.8833727Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8833850Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8833935Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8834013Z         try:
2025-01-10T13:23:47.8834153Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8834240Z         except KeyError:
2025-01-10T13:23:47.8834377Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8834454Z     
2025-01-10T13:23:47.8834543Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8834642Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8834878Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8835026Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8835120Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8835215Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8835331Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8835338Z 
2025-01-10T13:23:47.8835463Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8835583Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8835731Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8835808Z     ???
2025-01-10T13:23:47.8835918Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8835924Z 
2025-01-10T13:23:47.8835999Z >   ???
2025-01-10T13:23:47.8836126Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8836208Z E   
2025-01-10T13:23:47.8836344Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8836570Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8836649Z E          ...
2025-01-10T13:23:47.8836739Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8836873Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8836986Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8837063Z E          ...
2025-01-10T13:23:47.8837150Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8837279Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8837384Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8837389Z 
2025-01-10T13:23:47.8837483Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8837672Z _______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-f_lu] ________
2025-01-10T13:23:47.8837688Z 
2025-01-10T13:23:47.8837815Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8837952Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8838050Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8838188Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8838311Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8838413Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8838492Z err_msg = None
2025-01-10T13:23:47.8838496Z 
2025-01-10T13:23:47.8838613Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8838694Z         if err_msg is None:
2025-01-10T13:23:47.8838797Z             if left.shape != right.shape:
2025-01-10T13:23:47.8838887Z                 raise_assert_detail(
2025-01-10T13:23:47.8839034Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8839116Z                 )
2025-01-10T13:23:47.8839186Z     
2025-01-10T13:23:47.8839265Z             diff = 0
2025-01-10T13:23:47.8839379Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8839473Z                 # count up differences
2025-01-10T13:23:47.8839643Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8839726Z                     diff += 1
2025-01-10T13:23:47.8839797Z     
2025-01-10T13:23:47.8839894Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8840032Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8840208Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8840322Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8840399Z E           
2025-01-10T13:23:47.8840632Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8840893Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8841155Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8841160Z 
2025-01-10T13:23:47.8841460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8841470Z 
2025-01-10T13:23:47.8841637Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8841719Z 
2025-01-10T13:23:47.8841949Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd6390>
2025-01-10T13:23:47.8842153Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>, attr = 'f_lu'
2025-01-10T13:23:47.8842157Z 
2025-01-10T13:23:47.8842297Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8842412Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8842504Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8842576Z         try:
2025-01-10T13:23:47.8842719Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8842803Z         except KeyError:
2025-01-10T13:23:47.8842944Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8843155Z     
2025-01-10T13:23:47.8843245Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8843344Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8843440Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8843581Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8843667Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8843764Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8843875Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8843880Z 
2025-01-10T13:23:47.8844008Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8844119Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8844269Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8844345Z     ???
2025-01-10T13:23:47.8844453Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8844458Z 
2025-01-10T13:23:47.8844532Z >   ???
2025-01-10T13:23:47.8844659Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8844737Z E   
2025-01-10T13:23:47.8844866Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8844984Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8845059Z E          ...
2025-01-10T13:23:47.8845152Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8845282Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8845400Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8845472Z E          ...
2025-01-10T13:23:47.8845565Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8845693Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8845803Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8845808Z 
2025-01-10T13:23:47.8845906Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8846105Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs] ____
2025-01-10T13:23:47.8846236Z 
2025-01-10T13:23:47.8846372Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8846505Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8846606Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8846737Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8846870Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8846972Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8847049Z err_msg = None
2025-01-10T13:23:47.8847054Z 
2025-01-10T13:23:47.8847168Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8847252Z         if err_msg is None:
2025-01-10T13:23:47.8847350Z             if left.shape != right.shape:
2025-01-10T13:23:47.8847434Z                 raise_assert_detail(
2025-01-10T13:23:47.8847588Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8847804Z                 )
2025-01-10T13:23:47.8847880Z     
2025-01-10T13:23:47.8847955Z             diff = 0
2025-01-10T13:23:47.8848070Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8848158Z                 # count up differences
2025-01-10T13:23:47.8848331Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8848409Z                     diff += 1
2025-01-10T13:23:47.8848485Z     
2025-01-10T13:23:47.8848579Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8848713Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8848887Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8849000Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8849076Z E           
2025-01-10T13:23:47.8849193Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8849460Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8849716Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8849726Z 
2025-01-10T13:23:47.8850027Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8850032Z 
2025-01-10T13:23:47.8850207Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8850217Z 
2025-01-10T13:23:47.8850656Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd6b10>
2025-01-10T13:23:47.8850940Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>
2025-01-10T13:23:47.8851027Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8851038Z 
2025-01-10T13:23:47.8851180Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8851302Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8851386Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8851462Z         try:
2025-01-10T13:23:47.8851604Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8851692Z         except KeyError:
2025-01-10T13:23:47.8851830Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8851905Z     
2025-01-10T13:23:47.8851992Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8852092Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8852289Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8852429Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8852516Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8852611Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8852722Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8852802Z             else:
2025-01-10T13:23:47.8852904Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8853138Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8853144Z 
2025-01-10T13:23:47.8853278Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8853393Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8853547Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8853623Z     ???
2025-01-10T13:23:47.8853738Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8853869Z 
2025-01-10T13:23:47.8853942Z >   ???
2025-01-10T13:23:47.8854076Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8854146Z E   
2025-01-10T13:23:47.8854280Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8854398Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8854472Z E          ...
2025-01-10T13:23:47.8854567Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8854697Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8854816Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8854888Z E          ...
2025-01-10T13:23:47.8854979Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8855104Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8855215Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8855225Z 
2025-01-10T13:23:47.8855318Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8855528Z ___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-beta_sobolev] ____
2025-01-10T13:23:47.8855533Z 
2025-01-10T13:23:47.8855671Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8855800Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8855904Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8856038Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8856168Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8856263Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8856346Z err_msg = None
2025-01-10T13:23:47.8856350Z 
2025-01-10T13:23:47.8856462Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8856555Z         if err_msg is None:
2025-01-10T13:23:47.8856653Z             if left.shape != right.shape:
2025-01-10T13:23:47.8856744Z                 raise_assert_detail(
2025-01-10T13:23:47.8856927Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8857060Z                 )
2025-01-10T13:23:47.8857190Z     
2025-01-10T13:23:47.8857317Z             diff = 0
2025-01-10T13:23:47.8857511Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8857661Z                 # count up differences
2025-01-10T13:23:47.8857957Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8858085Z                     diff += 1
2025-01-10T13:23:47.8858208Z     
2025-01-10T13:23:47.8858352Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8858584Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8858916Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8859053Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8859136Z E           
2025-01-10T13:23:47.8859253Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8859516Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8859775Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8859785Z 
2025-01-10T13:23:47.8860102Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8860183Z 
2025-01-10T13:23:47.8860367Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8860372Z 
2025-01-10T13:23:47.8860599Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd6bd0>
2025-01-10T13:23:47.8860777Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>
2025-01-10T13:23:47.8860860Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8860865Z 
2025-01-10T13:23:47.8861013Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8861133Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8861224Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8861297Z         try:
2025-01-10T13:23:47.8861449Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8861537Z         except KeyError:
2025-01-10T13:23:47.8861683Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8861765Z     
2025-01-10T13:23:47.8861854Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8861956Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8862048Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8862188Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8862279Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8862378Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8862491Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8862570Z             else:
2025-01-10T13:23:47.8862667Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8862780Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8862785Z 
2025-01-10T13:23:47.8862913Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8863486Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8863658Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8863731Z     ???
2025-01-10T13:23:47.8863850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8863855Z 
2025-01-10T13:23:47.8863927Z >   ???
2025-01-10T13:23:47.8864063Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8864134Z E   
2025-01-10T13:23:47.8864269Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8864382Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8864464Z E          ...
2025-01-10T13:23:47.8864558Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8864696Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8864817Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8864891Z E          ...
2025-01-10T13:23:47.8865128Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8865263Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8865375Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8865379Z 
2025-01-10T13:23:47.8865470Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8865671Z ______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-j_blues] ______
2025-01-10T13:23:47.8865676Z 
2025-01-10T13:23:47.8865806Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8865948Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8866056Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8866193Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8866327Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8866429Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8866618Z err_msg = None
2025-01-10T13:23:47.8866622Z 
2025-01-10T13:23:47.8866735Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8866823Z         if err_msg is None:
2025-01-10T13:23:47.8866921Z             if left.shape != right.shape:
2025-01-10T13:23:47.8867013Z                 raise_assert_detail(
2025-01-10T13:23:47.8867159Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8867238Z                 )
2025-01-10T13:23:47.8867318Z     
2025-01-10T13:23:47.8867400Z             diff = 0
2025-01-10T13:23:47.8867521Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8867612Z                 # count up differences
2025-01-10T13:23:47.8867794Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8867876Z                     diff += 1
2025-01-10T13:23:47.8867964Z     
2025-01-10T13:23:47.8868062Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8868208Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8868382Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8868504Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8868580Z E           
2025-01-10T13:23:47.8868699Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8868957Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8869225Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8869237Z 
2025-01-10T13:23:47.8869550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8869555Z 
2025-01-10T13:23:47.8869724Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8869736Z 
2025-01-10T13:23:47.8869961Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd6d50>
2025-01-10T13:23:47.8870138Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5b57bad0>
2025-01-10T13:23:47.8870218Z attr = 'j_blues'
2025-01-10T13:23:47.8870223Z 
2025-01-10T13:23:47.8870368Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8870487Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8870695Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8870774Z         try:
2025-01-10T13:23:47.8870926Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8871010Z         except KeyError:
2025-01-10T13:23:47.8871160Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8871232Z     
2025-01-10T13:23:47.8871326Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8871423Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8871522Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8871660Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8871750Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8871845Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8871957Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8872038Z             else:
2025-01-10T13:23:47.8872134Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8872253Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8872338Z 
2025-01-10T13:23:47.8872472Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8872593Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8872745Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8872825Z     ???
2025-01-10T13:23:47.8881381Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8881404Z 
2025-01-10T13:23:47.8881501Z >   ???
2025-01-10T13:23:47.8881648Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8881722Z E   
2025-01-10T13:23:47.8881912Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8882117Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8882245Z E          ...
2025-01-10T13:23:47.8882392Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8882652Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8882864Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8883000Z E          ...
2025-01-10T13:23:47.8883309Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8883505Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8883627Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8883632Z 
2025-01-10T13:23:47.8883739Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8883948Z ________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines] ________
2025-01-10T13:23:47.8883953Z 
2025-01-10T13:23:47.8884095Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8884231Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8884338Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8884488Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8884620Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8884721Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8884799Z err_msg = None
2025-01-10T13:23:47.8884803Z 
2025-01-10T13:23:47.8884929Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8885015Z         if err_msg is None:
2025-01-10T13:23:47.8885122Z             if left.shape != right.shape:
2025-01-10T13:23:47.8885210Z                 raise_assert_detail(
2025-01-10T13:23:47.8885366Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8885439Z                 )
2025-01-10T13:23:47.8885516Z     
2025-01-10T13:23:47.8885591Z             diff = 0
2025-01-10T13:23:47.8885713Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8886043Z                 # count up differences
2025-01-10T13:23:47.8886230Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8886316Z                     diff += 1
2025-01-10T13:23:47.8886387Z     
2025-01-10T13:23:47.8886484Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8886625Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8886805Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8886922Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8887002Z E           
2025-01-10T13:23:47.8887116Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8887383Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8887771Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8887777Z 
2025-01-10T13:23:47.8888093Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8888098Z 
2025-01-10T13:23:47.8888278Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8888284Z 
2025-01-10T13:23:47.8888515Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd7ad0>
2025-01-10T13:23:47.8888686Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>
2025-01-10T13:23:47.8888770Z attr = 'lines'
2025-01-10T13:23:47.8888779Z 
2025-01-10T13:23:47.8888932Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8889057Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8889145Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8889226Z         try:
2025-01-10T13:23:47.8889370Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8889462Z         except KeyError:
2025-01-10T13:23:47.8889601Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8889678Z     
2025-01-10T13:23:47.8889768Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8889869Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8889965Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8890099Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8890194Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8890286Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8890401Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8890476Z             else:
2025-01-10T13:23:47.8890579Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8890689Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8890693Z 
2025-01-10T13:23:47.8890827Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8890944Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8891097Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8891171Z     ???
2025-01-10T13:23:47.8891288Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8891293Z 
2025-01-10T13:23:47.8891370Z >   ???
2025-01-10T13:23:47.8891498Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8891575Z E   
2025-01-10T13:23:47.8891705Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8891920Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8892000Z E          ...
2025-01-10T13:23:47.8892097Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8892230Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8892354Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8892428Z E          ...
2025-01-10T13:23:47.8892521Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8892646Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8892758Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8892763Z 
2025-01-10T13:23:47.8892858Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8893234Z _ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index] _
2025-01-10T13:23:47.8893241Z 
2025-01-10T13:23:47.8893469Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd7b90>
2025-01-10T13:23:47.8893643Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>
2025-01-10T13:23:47.8893887Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8893892Z 
2025-01-10T13:23:47.8894032Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8894156Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8894242Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8894322Z         try:
2025-01-10T13:23:47.8894463Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8894553Z         except KeyError:
2025-01-10T13:23:47.8894699Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8894770Z     
2025-01-10T13:23:47.8894864Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8894959Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8895055Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8895188Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8895291Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8895382Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8895499Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8895504Z 
2025-01-10T13:23:47.8895631Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8895750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8895754Z 
2025-01-10T13:23:47.8895897Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8895985Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8896102Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8896185Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8896328Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8896413Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8896533Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8896615Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8896698Z err_msg = None
2025-01-10T13:23:47.8896702Z 
2025-01-10T13:23:47.8896813Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8896902Z         if err_msg is None:
2025-01-10T13:23:47.8897003Z             if left.shape != right.shape:
2025-01-10T13:23:47.8897092Z                 raise_assert_detail(
2025-01-10T13:23:47.8897241Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8897320Z                 )
2025-01-10T13:23:47.8897390Z     
2025-01-10T13:23:47.8897472Z             diff = 0
2025-01-10T13:23:47.8897585Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8897679Z                 # count up differences
2025-01-10T13:23:47.8897847Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8898079Z                     diff += 1
2025-01-10T13:23:47.8898155Z     
2025-01-10T13:23:47.8898254Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8898397Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8898577Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8898688Z E           AssertionError: Series are different
2025-01-10T13:23:47.8898761Z E           
2025-01-10T13:23:47.8898868Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8899236Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8899654Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8899984Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8899990Z 
2025-01-10T13:23:47.8900299Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8900525Z _ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index] _
2025-01-10T13:23:47.8900535Z 
2025-01-10T13:23:47.8900758Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd7c50>
2025-01-10T13:23:47.8900931Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>
2025-01-10T13:23:47.8901026Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8901031Z 
2025-01-10T13:23:47.8901169Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8901290Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8901375Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8901456Z         try:
2025-01-10T13:23:47.8901597Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8901720Z         except KeyError:
2025-01-10T13:23:47.8901858Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8901934Z     
2025-01-10T13:23:47.8902026Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8902131Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8902224Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8902363Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8902453Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8902543Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8902660Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8902665Z 
2025-01-10T13:23:47.8902790Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8902907Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8902912Z 
2025-01-10T13:23:47.8903168Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8903266Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8903374Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8903590Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8903734Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8903824Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8903935Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8904013Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8904096Z err_msg = None
2025-01-10T13:23:47.8904100Z 
2025-01-10T13:23:47.8904208Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8904295Z         if err_msg is None:
2025-01-10T13:23:47.8904389Z             if left.shape != right.shape:
2025-01-10T13:23:47.8904478Z                 raise_assert_detail(
2025-01-10T13:23:47.8904619Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8904696Z                 )
2025-01-10T13:23:47.8904766Z     
2025-01-10T13:23:47.8904851Z             diff = 0
2025-01-10T13:23:47.8904966Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8905176Z                 # count up differences
2025-01-10T13:23:47.8905351Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8905431Z                     diff += 1
2025-01-10T13:23:47.8905508Z     
2025-01-10T13:23:47.8905596Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8905736Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8905905Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8906015Z E           AssertionError: Series are different
2025-01-10T13:23:47.8906089Z E           
2025-01-10T13:23:47.8906195Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8906560Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8907228Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8907632Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8907649Z 
2025-01-10T13:23:47.8907963Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8908155Z _________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-nu] __________
2025-01-10T13:23:47.8908161Z 
2025-01-10T13:23:47.8908299Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8908428Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8908535Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8908665Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8908791Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8908991Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8909074Z err_msg = None
2025-01-10T13:23:47.8909079Z 
2025-01-10T13:23:47.8909196Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8909277Z         if err_msg is None:
2025-01-10T13:23:47.8909376Z             if left.shape != right.shape:
2025-01-10T13:23:47.8909461Z                 raise_assert_detail(
2025-01-10T13:23:47.8909610Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8909683Z                 )
2025-01-10T13:23:47.8909757Z     
2025-01-10T13:23:47.8909831Z             diff = 0
2025-01-10T13:23:47.8909948Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8910038Z                 # count up differences
2025-01-10T13:23:47.8910211Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8910290Z                     diff += 1
2025-01-10T13:23:47.8910372Z     
2025-01-10T13:23:47.8910553Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8910690Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8910861Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8910974Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8911052Z E           
2025-01-10T13:23:47.8911165Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8911428Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8911687Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8911710Z 
2025-01-10T13:23:47.8912008Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8912013Z 
2025-01-10T13:23:47.8912186Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8912191Z 
2025-01-10T13:23:47.8912413Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd7e90>
2025-01-10T13:23:47.8912617Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>, attr = 'nu'
2025-01-10T13:23:47.8912622Z 
2025-01-10T13:23:47.8912763Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8912884Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8912974Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8913174Z         try:
2025-01-10T13:23:47.8913326Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8913409Z         except KeyError:
2025-01-10T13:23:47.8913551Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8913622Z     
2025-01-10T13:23:47.8913715Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8913811Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8913906Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8914037Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8914129Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8914219Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8914337Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8914342Z 
2025-01-10T13:23:47.8914472Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8914585Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8914886Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8914959Z     ???
2025-01-10T13:23:47.8915075Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8915080Z 
2025-01-10T13:23:47.8915149Z >   ???
2025-01-10T13:23:47.8915286Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8915357Z E   
2025-01-10T13:23:47.8915494Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8915609Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8915688Z E          ...
2025-01-10T13:23:47.8915778Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8915914Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8916033Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8916106Z E          ...
2025-01-10T13:23:47.8916202Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8916463Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8916576Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8916581Z 
2025-01-10T13:23:47.8916672Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8916879Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-wavelength_cm] ____
2025-01-10T13:23:47.8916884Z 
2025-01-10T13:23:47.8917011Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8917143Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8917246Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8917377Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8917504Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8917603Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8917691Z err_msg = None
2025-01-10T13:23:47.8917696Z 
2025-01-10T13:23:47.8917807Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8917894Z         if err_msg is None:
2025-01-10T13:23:47.8917991Z             if left.shape != right.shape:
2025-01-10T13:23:47.8918081Z                 raise_assert_detail(
2025-01-10T13:23:47.8918226Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8918304Z                 )
2025-01-10T13:23:47.8918374Z     
2025-01-10T13:23:47.8918454Z             diff = 0
2025-01-10T13:23:47.8918574Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8918663Z                 # count up differences
2025-01-10T13:23:47.8918837Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8918917Z                     diff += 1
2025-01-10T13:23:47.8918996Z     
2025-01-10T13:23:47.8919089Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8919230Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8919400Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8919518Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8919592Z E           
2025-01-10T13:23:47.8919709Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8919965Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8920228Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8920331Z 
2025-01-10T13:23:47.8920648Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8920653Z 
2025-01-10T13:23:47.8920822Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8920833Z 
2025-01-10T13:23:47.8921056Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61bd7f50>
2025-01-10T13:23:47.8921228Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>
2025-01-10T13:23:47.8921309Z attr = 'wavelength_cm'
2025-01-10T13:23:47.8921314Z 
2025-01-10T13:23:47.8921464Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8921579Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8921674Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8921822Z         try:
2025-01-10T13:23:47.8921970Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8922053Z         except KeyError:
2025-01-10T13:23:47.8922200Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8922270Z     
2025-01-10T13:23:47.8922368Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8922467Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8922556Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8922699Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8922787Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8922882Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8922992Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8922998Z 
2025-01-10T13:23:47.8923250Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8923371Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8923531Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8923602Z     ???
2025-01-10T13:23:47.8923716Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8923721Z 
2025-01-10T13:23:47.8923798Z >   ???
2025-01-10T13:23:47.8923926Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8924000Z E   
2025-01-10T13:23:47.8924130Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8924247Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8924321Z E          ...
2025-01-10T13:23:47.8924416Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8924546Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8924665Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8924741Z E          ...
2025-01-10T13:23:47.8924833Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8924962Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8925082Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8925088Z 
2025-01-10T13:23:47.8925184Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8925376Z ________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-f_lu] _________
2025-01-10T13:23:47.8925381Z 
2025-01-10T13:23:47.8925513Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8925641Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8925746Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8925879Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8926007Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8926230Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8926312Z err_msg = None
2025-01-10T13:23:47.8926317Z 
2025-01-10T13:23:47.8926433Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8926515Z         if err_msg is None:
2025-01-10T13:23:47.8926618Z             if left.shape != right.shape:
2025-01-10T13:23:47.8926702Z                 raise_assert_detail(
2025-01-10T13:23:47.8926851Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8926924Z                 )
2025-01-10T13:23:47.8926999Z     
2025-01-10T13:23:47.8927073Z             diff = 0
2025-01-10T13:23:47.8927190Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8927279Z                 # count up differences
2025-01-10T13:23:47.8927455Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8927541Z                     diff += 1
2025-01-10T13:23:47.8927617Z     
2025-01-10T13:23:47.8927823Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8927965Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8928142Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8928254Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8928332Z E           
2025-01-10T13:23:47.8928444Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8928707Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8928969Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8928989Z 
2025-01-10T13:23:47.8929295Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8929300Z 
2025-01-10T13:23:47.8929475Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8929480Z 
2025-01-10T13:23:47.8929704Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fc050>
2025-01-10T13:23:47.8929913Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>, attr = 'f_lu'
2025-01-10T13:23:47.8929917Z 
2025-01-10T13:23:47.8930055Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8930177Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8930267Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8930349Z         try:
2025-01-10T13:23:47.8930493Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8930575Z         except KeyError:
2025-01-10T13:23:47.8930718Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8930789Z     
2025-01-10T13:23:47.8930882Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8930977Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8931072Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8931203Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8931294Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8931386Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8931500Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8931505Z 
2025-01-10T13:23:47.8931629Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8931949Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8932228Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8932349Z     ???
2025-01-10T13:23:47.8932470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8932475Z 
2025-01-10T13:23:47.8932547Z >   ???
2025-01-10T13:23:47.8932682Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8932755Z E   
2025-01-10T13:23:47.8932892Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8933005Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8933277Z E          ...
2025-01-10T13:23:47.8933371Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8933505Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8933619Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8933697Z E          ...
2025-01-10T13:23:47.8933801Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8934108Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8934219Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8934224Z 
2025-01-10T13:23:47.8934316Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8934528Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs] _____
2025-01-10T13:23:47.8934533Z 
2025-01-10T13:23:47.8934665Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8934802Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8934902Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8935045Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8935176Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8935280Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8935362Z err_msg = None
2025-01-10T13:23:47.8935366Z 
2025-01-10T13:23:47.8935479Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8935566Z         if err_msg is None:
2025-01-10T13:23:47.8935663Z             if left.shape != right.shape:
2025-01-10T13:23:47.8935754Z                 raise_assert_detail(
2025-01-10T13:23:47.8935900Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8935979Z                 )
2025-01-10T13:23:47.8936050Z     
2025-01-10T13:23:47.8936130Z             diff = 0
2025-01-10T13:23:47.8936245Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8936342Z                 # count up differences
2025-01-10T13:23:47.8936520Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8936600Z                     diff += 1
2025-01-10T13:23:47.8936679Z     
2025-01-10T13:23:47.8936775Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8936919Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8937089Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8937212Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8937287Z E           
2025-01-10T13:23:47.8937407Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8937664Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8937926Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8938085Z 
2025-01-10T13:23:47.8938400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8938405Z 
2025-01-10T13:23:47.8938576Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8938581Z 
2025-01-10T13:23:47.8938809Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fc7d0>
2025-01-10T13:23:47.8938985Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>
2025-01-10T13:23:47.8939066Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.8939071Z 
2025-01-10T13:23:47.8939218Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8939336Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8939432Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8939582Z         try:
2025-01-10T13:23:47.8939729Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8939815Z         except KeyError:
2025-01-10T13:23:47.8939959Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8940031Z     
2025-01-10T13:23:47.8940125Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8940220Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8940317Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8940451Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8940548Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8940645Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8940758Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8940836Z             else:
2025-01-10T13:23:47.8940932Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8941050Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8941060Z 
2025-01-10T13:23:47.8941187Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8941307Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8941483Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8941622Z     ???
2025-01-10T13:23:47.8941819Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8941835Z 
2025-01-10T13:23:47.8941961Z >   ???
2025-01-10T13:23:47.8942107Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8942180Z E   
2025-01-10T13:23:47.8942318Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8942434Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8942513Z E          ...
2025-01-10T13:23:47.8942605Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8942748Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8942868Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8942947Z E          ...
2025-01-10T13:23:47.8943170Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8943306Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8943411Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8943422Z 
2025-01-10T13:23:47.8943511Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8943718Z ____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-beta_sobolev] _____
2025-01-10T13:23:47.8943723Z 
2025-01-10T13:23:47.8943854Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8943991Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8944091Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8944402Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8944533Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8944633Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8944710Z err_msg = None
2025-01-10T13:23:47.8944721Z 
2025-01-10T13:23:47.8944833Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8944923Z         if err_msg is None:
2025-01-10T13:23:47.8945021Z             if left.shape != right.shape:
2025-01-10T13:23:47.8945112Z                 raise_assert_detail(
2025-01-10T13:23:47.8945267Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8945344Z                 )
2025-01-10T13:23:47.8945416Z     
2025-01-10T13:23:47.8945496Z             diff = 0
2025-01-10T13:23:47.8945610Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8945712Z                 # count up differences
2025-01-10T13:23:47.8945991Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8946081Z                     diff += 1
2025-01-10T13:23:47.8946153Z     
2025-01-10T13:23:47.8946250Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8946389Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8946567Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8946689Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8946763Z E           
2025-01-10T13:23:47.8946883Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8947138Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8947412Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8947419Z 
2025-01-10T13:23:47.8947729Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8947734Z 
2025-01-10T13:23:47.8947902Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8947908Z 
2025-01-10T13:23:47.8948135Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fc890>
2025-01-10T13:23:47.8948305Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>
2025-01-10T13:23:47.8948394Z attr = 'beta_sobolev'
2025-01-10T13:23:47.8948403Z 
2025-01-10T13:23:47.8948542Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8948663Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8948756Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8948828Z         try:
2025-01-10T13:23:47.8948973Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8949057Z         except KeyError:
2025-01-10T13:23:47.8949202Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8949274Z     
2025-01-10T13:23:47.8949366Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8949475Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8949590Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8949725Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8949816Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8949908Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8950118Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8950193Z             else:
2025-01-10T13:23:47.8950295Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8950408Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8950413Z 
2025-01-10T13:23:47.8950538Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8950743Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8951002Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8951092Z     ???
2025-01-10T13:23:47.8951206Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8951211Z 
2025-01-10T13:23:47.8951289Z >   ???
2025-01-10T13:23:47.8951417Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8951495Z E   
2025-01-10T13:23:47.8951622Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8951746Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8951951Z E          ...
2025-01-10T13:23:47.8952041Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8952174Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8952291Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8952369Z E          ...
2025-01-10T13:23:47.8952458Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8952588Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8952693Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8952698Z 
2025-01-10T13:23:47.8952792Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8952986Z _______ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-j_blues] _______
2025-01-10T13:23:47.8952991Z 
2025-01-10T13:23:47.8953261Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8953411Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8953508Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8953644Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8953769Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8953867Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8953945Z err_msg = None
2025-01-10T13:23:47.8953949Z 
2025-01-10T13:23:47.8954062Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8954145Z         if err_msg is None:
2025-01-10T13:23:47.8954247Z             if left.shape != right.shape:
2025-01-10T13:23:47.8954333Z                 raise_assert_detail(
2025-01-10T13:23:47.8954483Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8954563Z                 )
2025-01-10T13:23:47.8954637Z     
2025-01-10T13:23:47.8954715Z             diff = 0
2025-01-10T13:23:47.8954829Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8954924Z                 # count up differences
2025-01-10T13:23:47.8955095Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8955179Z                     diff += 1
2025-01-10T13:23:47.8955251Z     
2025-01-10T13:23:47.8955347Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8955485Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8955663Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8955775Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8955853Z E           
2025-01-10T13:23:47.8955966Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8956357Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8956626Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8956632Z 
2025-01-10T13:23:47.8956935Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8956940Z 
2025-01-10T13:23:47.8957114Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8957123Z 
2025-01-10T13:23:47.8957350Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fca10>
2025-01-10T13:23:47.8957632Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef5923c950>
2025-01-10T13:23:47.8957715Z attr = 'j_blues'
2025-01-10T13:23:47.8957720Z 
2025-01-10T13:23:47.8957857Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8957977Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8958063Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8958141Z         try:
2025-01-10T13:23:47.8958282Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8958369Z         except KeyError:
2025-01-10T13:23:47.8958507Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8958583Z     
2025-01-10T13:23:47.8958676Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8958770Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8958863Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8958998Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8959091Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8959180Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8959294Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8959367Z             else:
2025-01-10T13:23:47.8959466Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8959574Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8959579Z 
2025-01-10T13:23:47.8959707Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8959820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8959976Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8960053Z     ???
2025-01-10T13:23:47.8960161Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8960169Z 
2025-01-10T13:23:47.8960245Z >   ???
2025-01-10T13:23:47.8960376Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8960452Z E   
2025-01-10T13:23:47.8960582Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8960699Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8960772Z E          ...
2025-01-10T13:23:47.8960869Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8960999Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8961119Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8961192Z E          ...
2025-01-10T13:23:47.8961284Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8961414Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8961521Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8961526Z 
2025-01-10T13:23:47.8961622Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8961952Z ____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines] _____
2025-01-10T13:23:47.8961962Z 
2025-01-10T13:23:47.8962094Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8962221Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8962324Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8962456Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8962587Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8962686Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8962763Z err_msg = None
2025-01-10T13:23:47.8962767Z 
2025-01-10T13:23:47.8962882Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8962964Z         if err_msg is None:
2025-01-10T13:23:47.8963206Z             if left.shape != right.shape:
2025-01-10T13:23:47.8963426Z                 raise_assert_detail(
2025-01-10T13:23:47.8963584Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8963657Z                 )
2025-01-10T13:23:47.8963732Z     
2025-01-10T13:23:47.8963807Z             diff = 0
2025-01-10T13:23:47.8963925Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8964014Z                 # count up differences
2025-01-10T13:23:47.8964193Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8964277Z                     diff += 1
2025-01-10T13:23:47.8964348Z     
2025-01-10T13:23:47.8964446Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8964587Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8964774Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8964894Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8964981Z E           
2025-01-10T13:23:47.8965092Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8965356Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8965613Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8965623Z 
2025-01-10T13:23:47.8965926Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8965937Z 
2025-01-10T13:23:47.8966111Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8966116Z 
2025-01-10T13:23:47.8966337Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fd790>
2025-01-10T13:23:47.8966512Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>
2025-01-10T13:23:47.8966594Z attr = 'lines'
2025-01-10T13:23:47.8966599Z 
2025-01-10T13:23:47.8966735Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8966855Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8966940Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8967021Z         try:
2025-01-10T13:23:47.8967163Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8967250Z         except KeyError:
2025-01-10T13:23:47.8967386Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8967596Z     
2025-01-10T13:23:47.8967690Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8967790Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8967879Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8968015Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8968101Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8968198Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8968313Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8968387Z             else:
2025-01-10T13:23:47.8968487Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.8968594Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.8968599Z 
2025-01-10T13:23:47.8968730Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.8968842Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8968999Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8969156Z     ???
2025-01-10T13:23:47.8969270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8969275Z 
2025-01-10T13:23:47.8969345Z >   ???
2025-01-10T13:23:47.8969479Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8969556Z E   
2025-01-10T13:23:47.8969685Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8969803Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8969878Z E          ...
2025-01-10T13:23:47.8969971Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8970097Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8970213Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8970284Z E          ...
2025-01-10T13:23:47.8970374Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8970505Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8970618Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8970623Z 
2025-01-10T13:23:47.8970714Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8970969Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index] _
2025-01-10T13:23:47.8970974Z 
2025-01-10T13:23:47.8971201Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fd850>
2025-01-10T13:23:47.8971369Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>
2025-01-10T13:23:47.8971463Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.8971468Z 
2025-01-10T13:23:47.8971602Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8971723Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8971809Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8971888Z         try:
2025-01-10T13:23:47.8972025Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8972119Z         except KeyError:
2025-01-10T13:23:47.8972257Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8972333Z     
2025-01-10T13:23:47.8972426Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8972522Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8972618Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8972748Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8972838Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8972929Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8973166Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8973172Z 
2025-01-10T13:23:47.8973299Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8973416Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8973421Z 
2025-01-10T13:23:47.8973682Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8973784Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8973899Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8973983Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8974128Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.8974212Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.8974325Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8974404Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.8974486Z err_msg = None
2025-01-10T13:23:47.8974490Z 
2025-01-10T13:23:47.8974599Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8974691Z         if err_msg is None:
2025-01-10T13:23:47.8974785Z             if left.shape != right.shape:
2025-01-10T13:23:47.8974877Z                 raise_assert_detail(
2025-01-10T13:23:47.8975072Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8975424Z                 )
2025-01-10T13:23:47.8975554Z     
2025-01-10T13:23:47.8975634Z             diff = 0
2025-01-10T13:23:47.8975762Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8975854Z                 # count up differences
2025-01-10T13:23:47.8976035Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8976116Z                     diff += 1
2025-01-10T13:23:47.8976192Z     
2025-01-10T13:23:47.8976285Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8976431Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8976606Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8976719Z E           AssertionError: Series are different
2025-01-10T13:23:47.8976794Z E           
2025-01-10T13:23:47.8976911Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.8977291Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8977623Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8977957Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8977969Z 
2025-01-10T13:23:47.8978291Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8978542Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index] _
2025-01-10T13:23:47.8978547Z 
2025-01-10T13:23:47.8978778Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fd910>
2025-01-10T13:23:47.8978952Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>
2025-01-10T13:23:47.8979047Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.8979052Z 
2025-01-10T13:23:47.8979192Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8979413Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8979510Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8979583Z         try:
2025-01-10T13:23:47.8979730Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8979813Z         except KeyError:
2025-01-10T13:23:47.8979956Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8980027Z     
2025-01-10T13:23:47.8980119Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8980213Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8980311Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8980445Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8980541Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8980633Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8980752Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8980762Z 
2025-01-10T13:23:47.8980893Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8981106Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8981111Z 
2025-01-10T13:23:47.8981254Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8981340Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8981454Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8981536Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8981680Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.8981768Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.8981878Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.8981963Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.8982041Z err_msg = None
2025-01-10T13:23:47.8982050Z 
2025-01-10T13:23:47.8982169Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8982259Z         if err_msg is None:
2025-01-10T13:23:47.8982361Z             if left.shape != right.shape:
2025-01-10T13:23:47.8982450Z                 raise_assert_detail(
2025-01-10T13:23:47.8982599Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8982672Z                 )
2025-01-10T13:23:47.8982749Z     
2025-01-10T13:23:47.8982823Z             diff = 0
2025-01-10T13:23:47.8982940Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8983190Z                 # count up differences
2025-01-10T13:23:47.8983371Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8983450Z                     diff += 1
2025-01-10T13:23:47.8983528Z     
2025-01-10T13:23:47.8983621Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8983757Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8983937Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8984044Z E           AssertionError: Series are different
2025-01-10T13:23:47.8984122Z E           
2025-01-10T13:23:47.8984225Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.8984598Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.8984964Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8985836Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.8985847Z 
2025-01-10T13:23:47.8986324Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8986645Z ______ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-nu] ______
2025-01-10T13:23:47.8986654Z 
2025-01-10T13:23:47.8986855Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8987333Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8987523Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8987769Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8987990Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8988158Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8988287Z err_msg = None
2025-01-10T13:23:47.8988295Z 
2025-01-10T13:23:47.8988485Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8988627Z         if err_msg is None:
2025-01-10T13:23:47.8988784Z             if left.shape != right.shape:
2025-01-10T13:23:47.8988932Z                 raise_assert_detail(
2025-01-10T13:23:47.8989173Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8989321Z                 )
2025-01-10T13:23:47.8989393Z     
2025-01-10T13:23:47.8989473Z             diff = 0
2025-01-10T13:23:47.8989590Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8989685Z                 # count up differences
2025-01-10T13:23:47.8989859Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8989947Z                     diff += 1
2025-01-10T13:23:47.8990017Z     
2025-01-10T13:23:47.8990113Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8990253Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8990432Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8990554Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8990627Z E           
2025-01-10T13:23:47.8990746Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8991011Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8991281Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.8991287Z 
2025-01-10T13:23:47.8991610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.8991615Z 
2025-01-10T13:23:47.8991787Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.8991903Z 
2025-01-10T13:23:47.8992143Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fdb50>
2025-01-10T13:23:47.8992346Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>, attr = 'nu'
2025-01-10T13:23:47.8992351Z 
2025-01-10T13:23:47.8992499Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.8992618Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.8992711Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.8992790Z         try:
2025-01-10T13:23:47.8992932Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.8993210Z         except KeyError:
2025-01-10T13:23:47.8993424Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.8993503Z     
2025-01-10T13:23:47.8993593Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.8993694Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.8993787Z             if attr == "selected_atoms":
2025-01-10T13:23:47.8993934Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.8994183Z             elif actual.ndim == 1:
2025-01-10T13:23:47.8994284Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.8994399Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.8994404Z 
2025-01-10T13:23:47.8994539Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.8994660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8994809Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.8994886Z     ???
2025-01-10T13:23:47.8994997Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.8995002Z 
2025-01-10T13:23:47.8995076Z >   ???
2025-01-10T13:23:47.8995204Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.8995281Z E   
2025-01-10T13:23:47.8995410Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.8995541Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8995617Z E          ...
2025-01-10T13:23:47.8995714Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8995847Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8995968Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.8996047Z E          ...
2025-01-10T13:23:47.8996134Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.8996268Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.8996383Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.8996388Z 
2025-01-10T13:23:47.8996484Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.8996709Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm] _
2025-01-10T13:23:47.8996714Z 
2025-01-10T13:23:47.8996847Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8996984Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8997092Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8997223Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.8997355Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.8997459Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.8997538Z err_msg = None
2025-01-10T13:23:47.8997542Z 
2025-01-10T13:23:47.8997659Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.8997742Z         if err_msg is None:
2025-01-10T13:23:47.8997842Z             if left.shape != right.shape:
2025-01-10T13:23:47.8997927Z                 raise_assert_detail(
2025-01-10T13:23:47.8998077Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.8998294Z                 )
2025-01-10T13:23:47.8998371Z     
2025-01-10T13:23:47.8998445Z             diff = 0
2025-01-10T13:23:47.8998566Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.8998654Z                 # count up differences
2025-01-10T13:23:47.8998830Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.8998916Z                     diff += 1
2025-01-10T13:23:47.8998987Z     
2025-01-10T13:23:47.8999081Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.8999218Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.8999392Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.8999505Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.8999584Z E           
2025-01-10T13:23:47.8999697Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.8999963Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9000315Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9000322Z 
2025-01-10T13:23:47.9000626Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9000632Z 
2025-01-10T13:23:47.9000805Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9000818Z 
2025-01-10T13:23:47.9001043Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fdc10>
2025-01-10T13:23:47.9001222Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>
2025-01-10T13:23:47.9001308Z attr = 'wavelength_cm'
2025-01-10T13:23:47.9001313Z 
2025-01-10T13:23:47.9001451Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9001574Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9001660Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9001776Z         try:
2025-01-10T13:23:47.9001917Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9002006Z         except KeyError:
2025-01-10T13:23:47.9002155Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9002284Z     
2025-01-10T13:23:47.9002437Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9002608Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9002751Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9002906Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9003000Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9003276Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9003403Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9003409Z 
2025-01-10T13:23:47.9003536Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.9003657Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9003807Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9003883Z     ???
2025-01-10T13:23:47.9003993Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9003998Z 
2025-01-10T13:23:47.9004074Z >   ???
2025-01-10T13:23:47.9004203Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9004280Z E   
2025-01-10T13:23:47.9004553Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9004677Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9004757Z E          ...
2025-01-10T13:23:47.9004857Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9004993Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9005108Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9005188Z E          ...
2025-01-10T13:23:47.9005277Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9005412Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9005518Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9005523Z 
2025-01-10T13:23:47.9005618Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9005822Z _____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-f_lu] _____
2025-01-10T13:23:47.9005832Z 
2025-01-10T13:23:47.9005967Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9006239Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9006338Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9006477Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9006603Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9006703Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9006779Z err_msg = None
2025-01-10T13:23:47.9006783Z 
2025-01-10T13:23:47.9006894Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9006978Z         if err_msg is None:
2025-01-10T13:23:47.9007078Z             if left.shape != right.shape:
2025-01-10T13:23:47.9007174Z                 raise_assert_detail(
2025-01-10T13:23:47.9007321Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9007409Z                 )
2025-01-10T13:23:47.9007480Z     
2025-01-10T13:23:47.9007562Z             diff = 0
2025-01-10T13:23:47.9007676Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9007772Z                 # count up differences
2025-01-10T13:23:47.9007946Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9008031Z                     diff += 1
2025-01-10T13:23:47.9008101Z     
2025-01-10T13:23:47.9008196Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9008331Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9008505Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9008619Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9008698Z E           
2025-01-10T13:23:47.9008819Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9009083Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9009346Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9009353Z 
2025-01-10T13:23:47.9009660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9009670Z 
2025-01-10T13:23:47.9009841Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9009938Z 
2025-01-10T13:23:47.9010174Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fdcd0>
2025-01-10T13:23:47.9010374Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>, attr = 'f_lu'
2025-01-10T13:23:47.9010379Z 
2025-01-10T13:23:47.9010524Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9010641Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9010732Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9010804Z         try:
2025-01-10T13:23:47.9010951Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9011034Z         except KeyError:
2025-01-10T13:23:47.9011176Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9011253Z     
2025-01-10T13:23:47.9011341Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9011441Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9011537Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9011755Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9011843Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9011939Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9012051Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9012056Z 
2025-01-10T13:23:47.9012188Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.9012302Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9012454Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9012530Z     ???
2025-01-10T13:23:47.9012641Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9012646Z 
2025-01-10T13:23:47.9012720Z >   ???
2025-01-10T13:23:47.9012846Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9012920Z E   
2025-01-10T13:23:47.9013237Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9013373Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9013448Z E          ...
2025-01-10T13:23:47.9013542Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9013675Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9013795Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9013869Z E          ...
2025-01-10T13:23:47.9013961Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9014086Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9014199Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9014204Z 
2025-01-10T13:23:47.9014299Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9014515Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs] _
2025-01-10T13:23:47.9014520Z 
2025-01-10T13:23:47.9014654Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9014790Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9014892Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9015025Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9015157Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9015256Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9015333Z err_msg = None
2025-01-10T13:23:47.9015337Z 
2025-01-10T13:23:47.9015455Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9015538Z         if err_msg is None:
2025-01-10T13:23:47.9015640Z             if left.shape != right.shape:
2025-01-10T13:23:47.9015726Z                 raise_assert_detail(
2025-01-10T13:23:47.9015880Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9016093Z                 )
2025-01-10T13:23:47.9016170Z     
2025-01-10T13:23:47.9016246Z             diff = 0
2025-01-10T13:23:47.9016363Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9016453Z                 # count up differences
2025-01-10T13:23:47.9016629Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9016709Z                     diff += 1
2025-01-10T13:23:47.9016785Z     
2025-01-10T13:23:47.9016879Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9017015Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9017190Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9017305Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9017384Z E           
2025-01-10T13:23:47.9017497Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9017769Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9018137Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9018148Z 
2025-01-10T13:23:47.9018454Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9018459Z 
2025-01-10T13:23:47.9018632Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9018641Z 
2025-01-10T13:23:47.9018869Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fe450>
2025-01-10T13:23:47.9019045Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>
2025-01-10T13:23:47.9019128Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.9019137Z 
2025-01-10T13:23:47.9019279Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9019402Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9019488Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9019567Z         try:
2025-01-10T13:23:47.9019709Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9019795Z         except KeyError:
2025-01-10T13:23:47.9019935Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9020012Z     
2025-01-10T13:23:47.9020100Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9020200Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9020295Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9020439Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9020525Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9020623Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9020735Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9020819Z             else:
2025-01-10T13:23:47.9020920Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9021028Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.9021033Z 
2025-01-10T13:23:47.9021166Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.9021279Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9021433Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9021506Z     ???
2025-01-10T13:23:47.9021623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9021719Z 
2025-01-10T13:23:47.9021799Z >   ???
2025-01-10T13:23:47.9021933Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9022004Z E   
2025-01-10T13:23:47.9022139Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9022257Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9022333Z E          ...
2025-01-10T13:23:47.9022428Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9022559Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9022676Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9022750Z E          ...
2025-01-10T13:23:47.9022843Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9022967Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9023281Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9023289Z 
2025-01-10T13:23:47.9023394Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9023735Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev] _
2025-01-10T13:23:47.9023740Z 
2025-01-10T13:23:47.9023873Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9024003Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9024105Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9024238Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9024365Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9024460Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9024544Z err_msg = None
2025-01-10T13:23:47.9024548Z 
2025-01-10T13:23:47.9024659Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9024750Z         if err_msg is None:
2025-01-10T13:23:47.9024851Z             if left.shape != right.shape:
2025-01-10T13:23:47.9024948Z                 raise_assert_detail(
2025-01-10T13:23:47.9025097Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9025170Z                 )
2025-01-10T13:23:47.9025245Z     
2025-01-10T13:23:47.9025320Z             diff = 0
2025-01-10T13:23:47.9025442Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9025532Z                 # count up differences
2025-01-10T13:23:47.9025705Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9025785Z                     diff += 1
2025-01-10T13:23:47.9025860Z     
2025-01-10T13:23:47.9025950Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9026089Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9026257Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9026383Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9026461Z E           
2025-01-10T13:23:47.9026573Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9026835Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9027092Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9027097Z 
2025-01-10T13:23:47.9027549Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9027559Z 
2025-01-10T13:23:47.9027733Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9027739Z 
2025-01-10T13:23:47.9027964Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fe510>
2025-01-10T13:23:47.9028134Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>
2025-01-10T13:23:47.9028216Z attr = 'beta_sobolev'
2025-01-10T13:23:47.9028221Z 
2025-01-10T13:23:47.9028361Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9028478Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9028568Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9028642Z         try:
2025-01-10T13:23:47.9028789Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9028871Z         except KeyError:
2025-01-10T13:23:47.9029014Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9029185Z     
2025-01-10T13:23:47.9029274Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9029374Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9029464Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9029603Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9029690Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9029790Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9029899Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9029979Z             else:
2025-01-10T13:23:47.9030076Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9030189Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.9030193Z 
2025-01-10T13:23:47.9030322Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.9030440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9030596Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9030674Z     ???
2025-01-10T13:23:47.9030791Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9030796Z 
2025-01-10T13:23:47.9030866Z >   ???
2025-01-10T13:23:47.9030999Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9031070Z E   
2025-01-10T13:23:47.9031202Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9031314Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9031394Z E          ...
2025-01-10T13:23:47.9031482Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9031617Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9031732Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9031811Z E          ...
2025-01-10T13:23:47.9031903Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9032034Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9032149Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9032154Z 
2025-01-10T13:23:47.9032248Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9032461Z ___ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-j_blues] ____
2025-01-10T13:23:47.9032465Z 
2025-01-10T13:23:47.9032596Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9032728Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9032827Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9032965Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9033323Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9033590Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9033682Z err_msg = None
2025-01-10T13:23:47.9033687Z 
2025-01-10T13:23:47.9033806Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9033895Z         if err_msg is None:
2025-01-10T13:23:47.9033995Z             if left.shape != right.shape:
2025-01-10T13:23:47.9034088Z                 raise_assert_detail(
2025-01-10T13:23:47.9034235Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9034313Z                 )
2025-01-10T13:23:47.9034384Z     
2025-01-10T13:23:47.9034464Z             diff = 0
2025-01-10T13:23:47.9034577Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9034675Z                 # count up differences
2025-01-10T13:23:47.9034853Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9034933Z                     diff += 1
2025-01-10T13:23:47.9035064Z     
2025-01-10T13:23:47.9035231Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9035655Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9035838Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9035957Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9036032Z E           
2025-01-10T13:23:47.9036154Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9036411Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9036674Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9036689Z 
2025-01-10T13:23:47.9037003Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9037008Z 
2025-01-10T13:23:47.9037182Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9037186Z 
2025-01-10T13:23:47.9037415Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619fe690>
2025-01-10T13:23:47.9037587Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef0e9a5880>
2025-01-10T13:23:47.9037665Z attr = 'j_blues'
2025-01-10T13:23:47.9037669Z 
2025-01-10T13:23:47.9037815Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9037933Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9038024Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9038102Z         try:
2025-01-10T13:23:47.9038254Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9038337Z         except KeyError:
2025-01-10T13:23:47.9038482Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9038554Z     
2025-01-10T13:23:47.9038647Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9038741Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9038836Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9038971Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9039064Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9039160Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9039272Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9039350Z             else:
2025-01-10T13:23:47.9039446Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9039559Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.9039661Z 
2025-01-10T13:23:47.9039790Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.9039907Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9040054Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9040132Z     ???
2025-01-10T13:23:47.9040243Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9040253Z 
2025-01-10T13:23:47.9040324Z >   ???
2025-01-10T13:23:47.9040457Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9040528Z E   
2025-01-10T13:23:47.9040663Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9040774Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9040853Z E          ...
2025-01-10T13:23:47.9040942Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9041076Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9041275Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9041353Z E          ...
2025-01-10T13:23:47.9041439Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9041568Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9041674Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9041684Z 
2025-01-10T13:23:47.9041773Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9042031Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines] _
2025-01-10T13:23:47.9042037Z 
2025-01-10T13:23:47.9042171Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9042307Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9042405Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9042548Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9042678Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9042783Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9042859Z err_msg = None
2025-01-10T13:23:47.9042870Z 
2025-01-10T13:23:47.9042981Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9043255Z         if err_msg is None:
2025-01-10T13:23:47.9043361Z             if left.shape != right.shape:
2025-01-10T13:23:47.9043453Z                 raise_assert_detail(
2025-01-10T13:23:47.9043598Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9043675Z                 )
2025-01-10T13:23:47.9043746Z     
2025-01-10T13:23:47.9043825Z             diff = 0
2025-01-10T13:23:47.9043937Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9044029Z                 # count up differences
2025-01-10T13:23:47.9044210Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9044294Z                     diff += 1
2025-01-10T13:23:47.9044365Z     
2025-01-10T13:23:47.9044458Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9044593Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9044769Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9044886Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9044959Z E           
2025-01-10T13:23:47.9045077Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9045333Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9045748Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9045754Z 
2025-01-10T13:23:47.9046061Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9046066Z 
2025-01-10T13:23:47.9046235Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9046239Z 
2025-01-10T13:23:47.9046465Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619ff410>
2025-01-10T13:23:47.9046633Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>
2025-01-10T13:23:47.9046716Z attr = 'lines'
2025-01-10T13:23:47.9046725Z 
2025-01-10T13:23:47.9046861Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9047086Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9047176Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9047250Z         try:
2025-01-10T13:23:47.9047393Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9047478Z         except KeyError:
2025-01-10T13:23:47.9047620Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9047693Z     
2025-01-10T13:23:47.9047786Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9047881Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9047979Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9048113Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9048206Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9048298Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9048420Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9048500Z             else:
2025-01-10T13:23:47.9048601Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9048712Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.9048717Z 
2025-01-10T13:23:47.9048843Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.9048963Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9049109Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9049187Z     ???
2025-01-10T13:23:47.9049299Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9049304Z 
2025-01-10T13:23:47.9049383Z >   ???
2025-01-10T13:23:47.9049511Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9049596Z E   
2025-01-10T13:23:47.9049726Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9049851Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9049940Z E          ...
2025-01-10T13:23:47.9050031Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9050169Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9050285Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9050364Z E          ...
2025-01-10T13:23:47.9050455Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9050588Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9050694Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9050699Z 
2025-01-10T13:23:47.9050797Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9051111Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index] _
2025-01-10T13:23:47.9051116Z 
2025-01-10T13:23:47.9051354Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619ff4d0>
2025-01-10T13:23:47.9051663Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>
2025-01-10T13:23:47.9051764Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.9051768Z 
2025-01-10T13:23:47.9051916Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9052035Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9052130Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9052205Z         try:
2025-01-10T13:23:47.9052354Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9052437Z         except KeyError:
2025-01-10T13:23:47.9052580Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9052651Z     
2025-01-10T13:23:47.9052745Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9052838Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9052935Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9053256Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9053484Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9053590Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9053706Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9053711Z 
2025-01-10T13:23:47.9053844Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.9070466Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9070507Z 
2025-01-10T13:23:47.9070806Z left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.9070965Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.9071160Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9071301Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.9071550Z right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
2025-01-10T13:23:47.9071689Z        52, 52, 50, 51, 50, 51, 52, 52, 52, ...
2025-01-10T13:23:47.9071887Z        21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9072023Z        21, 15, 25, 23, 22, 22, 23, 24, 25])
2025-01-10T13:23:47.9072146Z err_msg = None
2025-01-10T13:23:47.9072151Z 
2025-01-10T13:23:47.9072278Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9072367Z         if err_msg is None:
2025-01-10T13:23:47.9072470Z             if left.shape != right.shape:
2025-01-10T13:23:47.9072565Z                 raise_assert_detail(
2025-01-10T13:23:47.9072724Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9072804Z                 )
2025-01-10T13:23:47.9072874Z     
2025-01-10T13:23:47.9072954Z             diff = 0
2025-01-10T13:23:47.9073287Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9073407Z                 # count up differences
2025-01-10T13:23:47.9073593Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9073683Z                     diff += 1
2025-01-10T13:23:47.9073758Z     
2025-01-10T13:23:47.9073852Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9073997Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9074173Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9074286Z E           AssertionError: Series are different
2025-01-10T13:23:47.9074360Z E           
2025-01-10T13:23:47.9074470Z E           Series values are different (4.04858 %)
2025-01-10T13:23:47.9074842Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.9075371Z E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9075707Z E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9075713Z 
2025-01-10T13:23:47.9076038Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9076357Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index] _
2025-01-10T13:23:47.9076466Z 
2025-01-10T13:23:47.9076700Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619ff590>
2025-01-10T13:23:47.9076874Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>
2025-01-10T13:23:47.9076972Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.9076977Z 
2025-01-10T13:23:47.9077121Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9077246Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9077335Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9077414Z         try:
2025-01-10T13:23:47.9077567Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9077650Z         except KeyError:
2025-01-10T13:23:47.9077795Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9077870Z     
2025-01-10T13:23:47.9077964Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9078065Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9078164Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9078302Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9078397Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9078489Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9078605Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9078611Z 
2025-01-10T13:23:47.9078739Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.9078863Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9078868Z 
2025-01-10T13:23:47.9079009Z left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.9079094Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.9079209Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.9079301Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.9079446Z right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
2025-01-10T13:23:47.9079532Z        67, 66, 60, 61, 59, 58, 62, 60, 59, ...
2025-01-10T13:23:47.9079643Z        31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
2025-01-10T13:23:47.9079724Z        24, 16, 30, 28, 27, 26, 26, 28, 29])
2025-01-10T13:23:47.9079808Z err_msg = None
2025-01-10T13:23:47.9079813Z 
2025-01-10T13:23:47.9079934Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9080017Z         if err_msg is None:
2025-01-10T13:23:47.9080121Z             if left.shape != right.shape:
2025-01-10T13:23:47.9080207Z                 raise_assert_detail(
2025-01-10T13:23:47.9080355Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9080428Z                 )
2025-01-10T13:23:47.9080503Z     
2025-01-10T13:23:47.9080697Z             diff = 0
2025-01-10T13:23:47.9080828Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9080921Z                 # count up differences
2025-01-10T13:23:47.9081098Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9081177Z                     diff += 1
2025-01-10T13:23:47.9081252Z     
2025-01-10T13:23:47.9081342Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9081486Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9081659Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9081765Z E           AssertionError: Series are different
2025-01-10T13:23:47.9081843Z E           
2025-01-10T13:23:47.9081947Z E           Series values are different (6.47773 %)
2025-01-10T13:23:47.9082316Z E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.9082771Z E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.9083384Z E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:47.9083402Z 
2025-01-10T13:23:47.9083732Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9083979Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu] _
2025-01-10T13:23:47.9083989Z 
2025-01-10T13:23:47.9084122Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9084260Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9084362Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9084499Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9084622Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9084733Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9084810Z err_msg = None
2025-01-10T13:23:47.9084815Z 
2025-01-10T13:23:47.9084934Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9085023Z         if err_msg is None:
2025-01-10T13:23:47.9085127Z             if left.shape != right.shape:
2025-01-10T13:23:47.9085221Z                 raise_assert_detail(
2025-01-10T13:23:47.9085367Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9085444Z                 )
2025-01-10T13:23:47.9085514Z     
2025-01-10T13:23:47.9085594Z             diff = 0
2025-01-10T13:23:47.9085709Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9085803Z                 # count up differences
2025-01-10T13:23:47.9085971Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9086185Z                     diff += 1
2025-01-10T13:23:47.9086264Z     
2025-01-10T13:23:47.9086358Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9086495Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9086668Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9086782Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9086862Z E           
2025-01-10T13:23:47.9086980Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9087240Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9087505Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9087620Z 
2025-01-10T13:23:47.9087924Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9087935Z 
2025-01-10T13:23:47.9088105Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9088111Z 
2025-01-10T13:23:47.9088336Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619ff7d0>
2025-01-10T13:23:47.9088536Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>, attr = 'nu'
2025-01-10T13:23:47.9088540Z 
2025-01-10T13:23:47.9088688Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9088806Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9088905Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9088985Z         try:
2025-01-10T13:23:47.9089132Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9089214Z         except KeyError:
2025-01-10T13:23:47.9089359Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9089434Z     
2025-01-10T13:23:47.9089524Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9089623Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9089713Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9089853Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9089940Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9090037Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9090149Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9090154Z 
2025-01-10T13:23:47.9090286Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.9090408Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9090565Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9090637Z     ???
2025-01-10T13:23:47.9090753Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9090758Z 
2025-01-10T13:23:47.9090832Z >   ???
2025-01-10T13:23:47.9090961Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9091036Z E   
2025-01-10T13:23:47.9091164Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9091280Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9091355Z E          ...
2025-01-10T13:23:47.9091451Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9091585Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9091703Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9091867Z E          ...
2025-01-10T13:23:47.9091961Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9092091Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9092205Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9092210Z 
2025-01-10T13:23:47.9092305Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9092598Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm] _
2025-01-10T13:23:47.9092604Z 
2025-01-10T13:23:47.9092740Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9092868Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9092973Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9093237Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9093369Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9093594Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9093679Z err_msg = None
2025-01-10T13:23:47.9093684Z 
2025-01-10T13:23:47.9093804Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9093887Z         if err_msg is None:
2025-01-10T13:23:47.9093992Z             if left.shape != right.shape:
2025-01-10T13:23:47.9094078Z                 raise_assert_detail(
2025-01-10T13:23:47.9094231Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9094304Z                 )
2025-01-10T13:23:47.9094379Z     
2025-01-10T13:23:47.9094454Z             diff = 0
2025-01-10T13:23:47.9094573Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9094664Z                 # count up differences
2025-01-10T13:23:47.9094840Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9094923Z                     diff += 1
2025-01-10T13:23:47.9095007Z     
2025-01-10T13:23:47.9095103Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9095240Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9095414Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9095531Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9095611Z E           
2025-01-10T13:23:47.9095724Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9095987Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9096243Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9096262Z 
2025-01-10T13:23:47.9096572Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9096577Z 
2025-01-10T13:23:47.9096752Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9096757Z 
2025-01-10T13:23:47.9096983Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619ff890>
2025-01-10T13:23:47.9097157Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>
2025-01-10T13:23:47.9097239Z attr = 'wavelength_cm'
2025-01-10T13:23:47.9097244Z 
2025-01-10T13:23:47.9097391Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9097513Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9097725Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9097805Z         try:
2025-01-10T13:23:47.9097946Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9098033Z         except KeyError:
2025-01-10T13:23:47.9098173Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9098251Z     
2025-01-10T13:23:47.9098340Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9098441Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9098531Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9098668Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9098755Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9098852Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9098962Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9098972Z 
2025-01-10T13:23:47.9099101Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.9099309Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9099459Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9099535Z     ???
2025-01-10T13:23:47.9099646Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9099651Z 
2025-01-10T13:23:47.9099730Z >   ???
2025-01-10T13:23:47.9099859Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9099935Z E   
2025-01-10T13:23:47.9100064Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9100182Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9100259Z E          ...
2025-01-10T13:23:47.9100355Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9100490Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9100600Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9100681Z E          ...
2025-01-10T13:23:47.9100842Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9101068Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9101247Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9101256Z 
2025-01-10T13:23:47.9101390Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9101674Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu] _
2025-01-10T13:23:47.9101680Z 
2025-01-10T13:23:47.9101845Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9101974Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9102080Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9102219Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9102349Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9102454Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9102531Z err_msg = None
2025-01-10T13:23:47.9102535Z 
2025-01-10T13:23:47.9102651Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9102735Z         if err_msg is None:
2025-01-10T13:23:47.9102834Z             if left.shape != right.shape:
2025-01-10T13:23:47.9102920Z                 raise_assert_detail(
2025-01-10T13:23:47.9103206Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9103289Z                 )
2025-01-10T13:23:47.9103420Z     
2025-01-10T13:23:47.9103542Z             diff = 0
2025-01-10T13:23:47.9103660Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9103752Z                 # count up differences
2025-01-10T13:23:47.9103920Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9104183Z                     diff += 1
2025-01-10T13:23:47.9104254Z     
2025-01-10T13:23:47.9104348Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9104484Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9104660Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9104777Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9104856Z E           
2025-01-10T13:23:47.9104970Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9105235Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9105499Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9105617Z 
2025-01-10T13:23:47.9105926Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9105931Z 
2025-01-10T13:23:47.9106103Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9106108Z 
2025-01-10T13:23:47.9106333Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef619ff950>
2025-01-10T13:23:47.9106535Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>, attr = 'f_lu'
2025-01-10T13:23:47.9106540Z 
2025-01-10T13:23:47.9106684Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9106803Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9106903Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9106976Z         try:
2025-01-10T13:23:47.9107122Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9107207Z         except KeyError:
2025-01-10T13:23:47.9107351Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9107421Z     
2025-01-10T13:23:47.9107514Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9107613Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9107704Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9107841Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9107927Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9108025Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9108137Z >               pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9108141Z 
2025-01-10T13:23:47.9108270Z tardis/plasma/tests/test_complete_plasmas.py:192: 
2025-01-10T13:23:47.9108393Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9108543Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9108615Z     ???
2025-01-10T13:23:47.9108730Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9108735Z 
2025-01-10T13:23:47.9108810Z >   ???
2025-01-10T13:23:47.9108938Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9109015Z E   
2025-01-10T13:23:47.9109146Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9109263Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9109337Z E          ...
2025-01-10T13:23:47.9109437Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9109567Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9109683Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9109855Z E          ...
2025-01-10T13:23:47.9109955Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9110090Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9110205Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9110209Z 
2025-01-10T13:23:47.9110306Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9110581Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs] _
2025-01-10T13:23:47.9110587Z 
2025-01-10T13:23:47.9110718Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9110844Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9110948Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9111080Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9111211Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9111380Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9111477Z err_msg = None
2025-01-10T13:23:47.9111484Z 
2025-01-10T13:23:47.9111687Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9111828Z         if err_msg is None:
2025-01-10T13:23:47.9111999Z             if left.shape != right.shape:
2025-01-10T13:23:47.9112094Z                 raise_assert_detail(
2025-01-10T13:23:47.9112249Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9112324Z                 )
2025-01-10T13:23:47.9112397Z     
2025-01-10T13:23:47.9112471Z             diff = 0
2025-01-10T13:23:47.9112590Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9112681Z                 # count up differences
2025-01-10T13:23:47.9112855Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9112948Z                     diff += 1
2025-01-10T13:23:47.9113168Z     
2025-01-10T13:23:47.9113265Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9113409Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9113584Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9113698Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9113776Z E           
2025-01-10T13:23:47.9113888Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9114150Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9114412Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9114427Z 
2025-01-10T13:23:47.9114731Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9114736Z 
2025-01-10T13:23:47.9114908Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9114913Z 
2025-01-10T13:23:47.9115134Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61a20110>
2025-01-10T13:23:47.9115305Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>
2025-01-10T13:23:47.9115385Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.9115389Z 
2025-01-10T13:23:47.9115538Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9115791Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9115887Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9115965Z         try:
2025-01-10T13:23:47.9116105Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9116191Z         except KeyError:
2025-01-10T13:23:47.9116329Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9116404Z     
2025-01-10T13:23:47.9116492Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9116592Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9116682Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9116818Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9116906Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9117003Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9117114Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9117201Z             else:
2025-01-10T13:23:47.9117300Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9117528Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.9117533Z 
2025-01-10T13:23:47.9117661Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.9117775Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9117925Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9117998Z     ???
2025-01-10T13:23:47.9118112Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9118117Z 
2025-01-10T13:23:47.9118187Z >   ???
2025-01-10T13:23:47.9118318Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9118392Z E   
2025-01-10T13:23:47.9118527Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9118637Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9118719Z E          ...
2025-01-10T13:23:47.9118816Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9118952Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9119069Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9119143Z E          ...
2025-01-10T13:23:47.9119235Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9119361Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9119472Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9119477Z 
2025-01-10T13:23:47.9119567Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9119847Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev] _
2025-01-10T13:23:47.9119853Z 
2025-01-10T13:23:47.9119980Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9120110Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9120219Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9120350Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9120476Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9120573Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9120655Z err_msg = None
2025-01-10T13:23:47.9120659Z 
2025-01-10T13:23:47.9120769Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9120857Z         if err_msg is None:
2025-01-10T13:23:47.9120955Z             if left.shape != right.shape:
2025-01-10T13:23:47.9121044Z                 raise_assert_detail(
2025-01-10T13:23:47.9121187Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9121294Z                 )
2025-01-10T13:23:47.9121427Z     
2025-01-10T13:23:47.9121684Z             diff = 0
2025-01-10T13:23:47.9121869Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9121961Z                 # count up differences
2025-01-10T13:23:47.9122146Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9122226Z                     diff += 1
2025-01-10T13:23:47.9122302Z     
2025-01-10T13:23:47.9122394Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9122537Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9122707Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9122829Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9122903Z E           
2025-01-10T13:23:47.9123138Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9123403Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9123823Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9123829Z 
2025-01-10T13:23:47.9124141Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9124147Z 
2025-01-10T13:23:47.9124317Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9124327Z 
2025-01-10T13:23:47.9124550Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61a201d0>
2025-01-10T13:23:47.9124727Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>
2025-01-10T13:23:47.9124813Z attr = 'beta_sobolev'
2025-01-10T13:23:47.9124818Z 
2025-01-10T13:23:47.9124962Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9125087Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9125178Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9125251Z         try:
2025-01-10T13:23:47.9125396Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9125478Z         except KeyError:
2025-01-10T13:23:47.9125623Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9125698Z     
2025-01-10T13:23:47.9125787Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9125886Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9125976Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9126113Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9126204Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9126303Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9126416Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9126494Z             else:
2025-01-10T13:23:47.9126590Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9126702Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.9126707Z 
2025-01-10T13:23:47.9126837Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.9126959Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9127113Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9127187Z     ???
2025-01-10T13:23:47.9127299Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9127303Z 
2025-01-10T13:23:47.9127370Z >   ???
2025-01-10T13:23:47.9127505Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9127736Z E   
2025-01-10T13:23:47.9127881Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9127993Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9128071Z E          ...
2025-01-10T13:23:47.9128161Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9128299Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9128411Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9128489Z E          ...
2025-01-10T13:23:47.9128577Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9128710Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9128820Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9128825Z 
2025-01-10T13:23:47.9128917Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9129187Z _ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues] _
2025-01-10T13:23:47.9129198Z 
2025-01-10T13:23:47.9129411Z left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9129548Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9129648Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9129790Z right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
2025-01-10T13:23:47.9129914Z         3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
2025-01-10T13:23:47.9130014Z        21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
2025-01-10T13:23:47.9130096Z err_msg = None
2025-01-10T13:23:47.9130101Z 
2025-01-10T13:23:47.9130215Z     def _raise(left, right, err_msg) -> NoReturn:
2025-01-10T13:23:47.9130303Z         if err_msg is None:
2025-01-10T13:23:47.9130403Z             if left.shape != right.shape:
2025-01-10T13:23:47.9130496Z                 raise_assert_detail(
2025-01-10T13:23:47.9130649Z                     obj, f"{obj} shapes are different", left.shape, right.shape
2025-01-10T13:23:47.9130728Z                 )
2025-01-10T13:23:47.9130797Z     
2025-01-10T13:23:47.9130877Z             diff = 0
2025-01-10T13:23:47.9130990Z             for left_arr, right_arr in zip(left, right):
2025-01-10T13:23:47.9131085Z                 # count up differences
2025-01-10T13:23:47.9131255Z                 if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
2025-01-10T13:23:47.9131339Z                     diff += 1
2025-01-10T13:23:47.9131413Z     
2025-01-10T13:23:47.9131505Z             diff = diff * 100.0 / left.size
2025-01-10T13:23:47.9131646Z             msg = f"{obj} values are different ({np.round(diff, 5)} %)"
2025-01-10T13:23:47.9131815Z >           raise_assert_detail(obj, msg, left, right, index_values=index_values)
2025-01-10T13:23:47.9131935Z E           AssertionError: numpy array are different
2025-01-10T13:23:47.9132013Z E           
2025-01-10T13:23:47.9132136Z E           numpy array values are different (4.04858 %)
2025-01-10T13:23:47.9132396Z E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9132662Z E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:47.9132668Z 
2025-01-10T13:23:47.9132980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
2025-01-10T13:23:47.9133205Z 
2025-01-10T13:23:47.9133385Z During handling of the above exception, another exception occurred:
2025-01-10T13:23:47.9133395Z 
2025-01-10T13:23:47.9133623Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7fef61a20350>
2025-01-10T13:23:47.9133790Z plasma = <tardis.plasma.base.BasePlasma object at 0x7fef2f2d0860>
2025-01-10T13:23:47.9133874Z attr = 'j_blues'
2025-01-10T13:23:47.9133879Z 
2025-01-10T13:23:47.9134021Z     @pytest.mark.parametrize("attr", combined_properties)
2025-01-10T13:23:47.9134136Z     def test_plasma_properties(self, plasma, attr):
2025-01-10T13:23:47.9134228Z         key = f"plasma/{attr}"
2025-01-10T13:23:47.9134303Z         try:
2025-01-10T13:23:47.9134451Z             expected = pd.read_hdf(self.regression_data.fpath, key)
2025-01-10T13:23:47.9134533Z         except KeyError:
2025-01-10T13:23:47.9134682Z             pytest.skip(f"Key {key} not found in regression data")
2025-01-10T13:23:47.9134752Z     
2025-01-10T13:23:47.9134850Z         if hasattr(plasma, attr):
2025-01-10T13:23:47.9134953Z             actual = getattr(plasma, attr)
2025-01-10T13:23:47.9135160Z             if attr == "selected_atoms":
2025-01-10T13:23:47.9135298Z                 npt.assert_allclose(actual.values, expected.values)
2025-01-10T13:23:47.9135393Z             elif actual.ndim == 1:
2025-01-10T13:23:47.9135489Z                 actual = pd.Series(actual)
2025-01-10T13:23:47.9135601Z                 pdt.assert_series_equal(actual, expected)
2025-01-10T13:23:47.9135680Z             else:
2025-01-10T13:23:47.9135776Z                 actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9135891Z >               pdt.assert_frame_equal(actual, expected)
2025-01-10T13:23:47.9135896Z 
2025-01-10T13:23:47.9136024Z tardis/plasma/tests/test_complete_plasmas.py:195: 
2025-01-10T13:23:47.9136144Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9136294Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9136370Z     ???
2025-01-10T13:23:47.9136486Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9136497Z 
2025-01-10T13:23:47.9136570Z >   ???
2025-01-10T13:23:47.9136697Z E   AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:47.9136774Z E   
2025-01-10T13:23:47.9136909Z E   MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:47.9137023Z E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9137102Z E          ...
2025-01-10T13:23:47.9137193Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9137329Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9137443Z E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9137519Z E          ...
2025-01-10T13:23:47.9137604Z E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:47.9137733Z E         dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:47.9137891Z E   At positional index 75, first diff: 7 != 6
2025-01-10T13:23:47.9137906Z 
2025-01-10T13:23:47.9138069Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9138356Z _________________ test_hdf_plasma[stimulated_emission_factor] __________________
2025-01-10T13:23:47.9138369Z 
2025-01-10T13:23:47.9138605Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef33f0f110>
2025-01-10T13:23:47.9138703Z attr = 'stimulated_emission_factor'
2025-01-10T13:23:47.9138973Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef2f2d0590>
2025-01-10T13:23:47.9138979Z 
2025-01-10T13:23:47.9139127Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:23:47.9139297Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:23:47.9139425Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:23:47.9139556Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:23:47.9139677Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:23:47.9139889Z             if hasattr(actual, "cgs"):
2025-01-10T13:23:47.9139986Z                 actual = actual.cgs.value
2025-01-10T13:23:47.9140093Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:23:47.9140097Z 
2025-01-10T13:23:47.9140200Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:23:47.9140317Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9140322Z 
2025-01-10T13:23:47.9140653Z args = (<function assert_allclose.<locals>.compare at 0x7fef4cebe2a0>, array([[0.        , 0.        , 0.        , ..., 0.   ...1,
2025-01-10T13:23:47.9140733Z         0.01476858],
2025-01-10T13:23:47.9140872Z        [0.01433244, 0.01435378, 0.01437513, ..., 0.0146952 , 0.01471653,
2025-01-10T13:23:47.9140952Z         0.01473787]]))
2025-01-10T13:23:47.9141212Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9141228Z 
2025-01-10T13:23:47.9141387Z     @wraps(func)
2025-01-10T13:23:47.9141485Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9141573Z         with self._recreate_cm():
2025-01-10T13:23:47.9141666Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9141756Z E           AssertionError: 
2025-01-10T13:23:47.9141874Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9141947Z E           
2025-01-10T13:23:47.9142057Z E           Mismatched elements: 120 / 584480 (0.0205%)
2025-01-10T13:23:47.9142176Z E           Max absolute difference among violations: 1.
2025-01-10T13:23:47.9142294Z E           Max relative difference among violations: 1.
2025-01-10T13:23:47.9142440Z E            ACTUAL: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:23:47.9142552Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:23:47.9142656Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:23:47.9142816Z E            DESIRED: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:23:47.9142924Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:23:47.9143225Z E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:23:47.9143237Z 
2025-01-10T13:23:47.9143506Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9143670Z ___________________ test_hdf_plasma[lines_lower_level_index] ___________________
2025-01-10T13:23:47.9143675Z 
2025-01-10T13:23:47.9143903Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef33f0f110>
2025-01-10T13:23:47.9143991Z attr = 'lines_lower_level_index'
2025-01-10T13:23:47.9144265Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef358ed580>
2025-01-10T13:23:47.9144270Z 
2025-01-10T13:23:47.9144428Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:23:47.9144604Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:23:47.9144731Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:23:47.9144864Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:23:47.9144988Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:23:47.9145077Z             if hasattr(actual, "cgs"):
2025-01-10T13:23:47.9145176Z                 actual = actual.cgs.value
2025-01-10T13:23:47.9145282Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:23:47.9145286Z 
2025-01-10T13:23:47.9145398Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:23:47.9145511Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9145522Z 
2025-01-10T13:23:47.9145917Z args = (<function assert_allclose.<locals>.compare at 0x7fef32269c60>, array([2577, 2577, 2577, ..., 3886, 3846, 3885]), array([2577, 2577, 2577, ..., 3886, 3846, 3885]))
2025-01-10T13:23:47.9146313Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9146319Z 
2025-01-10T13:23:47.9146395Z     @wraps(func)
2025-01-10T13:23:47.9146483Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9146577Z         with self._recreate_cm():
2025-01-10T13:23:47.9146670Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9146756Z E           AssertionError: 
2025-01-10T13:23:47.9146873Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9146946Z E           
2025-01-10T13:23:47.9147054Z E           Mismatched elements: 748 / 29224 (2.56%)
2025-01-10T13:23:47.9147179Z E           Max absolute difference among violations: 4005
2025-01-10T13:23:47.9147312Z E           Max relative difference among violations: 26.00649351
2025-01-10T13:23:47.9147445Z E            ACTUAL: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:23:47.9147582Z E            DESIRED: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:23:47.9147714Z 
2025-01-10T13:23:47.9147975Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9148264Z ___________________ test_hdf_plasma[lines_upper_level_index] ___________________
2025-01-10T13:23:47.9148272Z 
2025-01-10T13:23:47.9148565Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef33f0f110>
2025-01-10T13:23:47.9148658Z attr = 'lines_upper_level_index'
2025-01-10T13:23:47.9148939Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef5b5fe3f0>
2025-01-10T13:23:47.9148945Z 
2025-01-10T13:23:47.9149095Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:23:47.9149258Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:23:47.9149385Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:23:47.9149528Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:23:47.9149662Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:23:47.9149751Z             if hasattr(actual, "cgs"):
2025-01-10T13:23:47.9149847Z                 actual = actual.cgs.value
2025-01-10T13:23:47.9149951Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:23:47.9149956Z 
2025-01-10T13:23:47.9150067Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:23:47.9150177Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9150187Z 
2025-01-10T13:23:47.9150574Z args = (<function assert_allclose.<locals>.compare at 0x7fef3945c2c0>, array([2613, 2612, 2611, ..., 3899, 3852, 3898]), array([2613, 2612, 2611, ..., 3899, 3852, 3898]))
2025-01-10T13:23:47.9150831Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9150835Z 
2025-01-10T13:23:47.9150915Z     @wraps(func)
2025-01-10T13:23:47.9151005Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9151096Z         with self._recreate_cm():
2025-01-10T13:23:47.9151189Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9151274Z E           AssertionError: 
2025-01-10T13:23:47.9151386Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9151460Z E           
2025-01-10T13:23:47.9151566Z E           Mismatched elements: 1847 / 29224 (6.32%)
2025-01-10T13:23:47.9151691Z E           Max absolute difference among violations: 4046
2025-01-10T13:23:47.9151822Z E           Max relative difference among violations: 24.82208589
2025-01-10T13:23:47.9151952Z E            ACTUAL: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:23:47.9152077Z E            DESIRED: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:23:47.9152082Z 
2025-01-10T13:23:47.9152284Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9152564Z ________________________ test_hdf_plasma[beta_sobolev] _________________________
2025-01-10T13:23:47.9152574Z 
2025-01-10T13:23:47.9152807Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef33f0f110>
2025-01-10T13:23:47.9152887Z attr = 'beta_sobolev'
2025-01-10T13:23:47.9153434Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef34afa3f0>
2025-01-10T13:23:47.9153444Z 
2025-01-10T13:23:47.9153597Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:23:47.9153760Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:23:47.9153887Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:23:47.9154017Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:23:47.9154140Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:23:47.9154227Z             if hasattr(actual, "cgs"):
2025-01-10T13:23:47.9154321Z                 actual = actual.cgs.value
2025-01-10T13:23:47.9154431Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:23:47.9154568Z 
2025-01-10T13:23:47.9154677Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:23:47.9154792Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9154796Z 
2025-01-10T13:23:47.9155063Z args = (<function assert_allclose.<locals>.compare at 0x7fef3945e7a0>, array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.9155143Z        [1., 1., .....,
2025-01-10T13:23:47.9155230Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.9155311Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.9155389Z        [1., 1., 1., ..., 1., 1., 1.]]))
2025-01-10T13:23:47.9155643Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9155648Z 
2025-01-10T13:23:47.9155724Z     @wraps(func)
2025-01-10T13:23:47.9155814Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9155906Z         with self._recreate_cm():
2025-01-10T13:23:47.9156005Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9156094Z E           AssertionError: 
2025-01-10T13:23:47.9156200Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9156278Z E           
2025-01-10T13:23:47.9156382Z E           Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:23:47.9156516Z E           Max absolute difference among violations: 0.99984222
2025-01-10T13:23:47.9156652Z E           Max relative difference among violations: 6337.12154973
2025-01-10T13:23:47.9156762Z E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.9156850Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.9156949Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:23:47.9157054Z E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.9157144Z E                  [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:47.9157237Z E                  [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:23:47.9157246Z 
2025-01-10T13:23:47.9157453Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9157602Z ____________________________ test_hdf_plasma[lines] ____________________________
2025-01-10T13:23:47.9157607Z 
2025-01-10T13:23:47.9157834Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef33f0f110>
2025-01-10T13:23:47.9157915Z attr = 'lines'
2025-01-10T13:23:47.9158181Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef34e6e120>
2025-01-10T13:23:47.9158187Z 
2025-01-10T13:23:47.9158337Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:23:47.9158501Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:23:47.9158627Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:23:47.9158757Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:23:47.9159017Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:23:47.9159118Z             if hasattr(actual, "cgs"):
2025-01-10T13:23:47.9159207Z                 actual = actual.cgs.value
2025-01-10T13:23:47.9159311Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:23:47.9159316Z 
2025-01-10T13:23:47.9159425Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:23:47.9159538Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9159543Z 
2025-01-10T13:23:47.9159999Z args = (<function assert_allclose.<locals>.compare at 0x7fef4ce72b60>, array([[6.78130000e+04, 6.67720000e+01, 2.70301683e-02...       [1.04462000e+05, 9.99900019e+05, 2.64868307e-04, ...,
2025-01-10T13:23:47.9160112Z         4.44653904e+09, 1.76709163e+00, 9.99900019e-03]]))
2025-01-10T13:23:47.9160363Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9160378Z 
2025-01-10T13:23:47.9160454Z     @wraps(func)
2025-01-10T13:23:47.9160622Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9160709Z         with self._recreate_cm():
2025-01-10T13:23:47.9160802Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9160888Z E           AssertionError: 
2025-01-10T13:23:47.9160999Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9161072Z E           
2025-01-10T13:23:47.9161181Z E           Mismatched elements: 13335 / 263016 (5.07%)
2025-01-10T13:23:47.9161318Z E           Max absolute difference among violations: 4.25260542e+12
2025-01-10T13:23:47.9161458Z E           Max relative difference among violations: 18196.0085861
2025-01-10T13:23:47.9161631Z E            ACTUAL: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:23:47.9161727Z E                   4.043917e+10, 6.677200e-07],
2025-01-10T13:23:47.9161873Z E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:23:47.9162048Z E            DESIRED: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:23:47.9162146Z E                   4.043917e+10, 6.677200e-07],
2025-01-10T13:23:47.9162278Z E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:23:47.9162284Z 
2025-01-10T13:23:47.9162490Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9162922Z ____________________________ test_hdf_plasma[f_lu] _____________________________
2025-01-10T13:23:47.9162927Z 
2025-01-10T13:23:47.9163337Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef33f0f110>
2025-01-10T13:23:47.9163420Z attr = 'f_lu'
2025-01-10T13:23:47.9163686Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef34e6e210>
2025-01-10T13:23:47.9163691Z 
2025-01-10T13:23:47.9163842Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:23:47.9164005Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:23:47.9164139Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:23:47.9164271Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:23:47.9164395Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:23:47.9164484Z             if hasattr(actual, "cgs"):
2025-01-10T13:23:47.9164581Z                 actual = actual.cgs.value
2025-01-10T13:23:47.9164686Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:23:47.9164691Z 
2025-01-10T13:23:47.9164808Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:23:47.9164924Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9164929Z 
2025-01-10T13:23:47.9165399Z args = (<function assert_allclose.<locals>.compare at 0x7fef4ce44f40>, array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02,...), array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02, ...,
2025-01-10T13:23:47.9165643Z        9.93184643e-04, 1.12688279e+00, 4.41447178e-04]))
2025-01-10T13:23:47.9165903Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9165908Z 
2025-01-10T13:23:47.9165989Z     @wraps(func)
2025-01-10T13:23:47.9166076Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9166167Z         with self._recreate_cm():
2025-01-10T13:23:47.9166255Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9166348Z E           AssertionError: 
2025-01-10T13:23:47.9166462Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9166536Z E           
2025-01-10T13:23:47.9166713Z E           Mismatched elements: 2221 / 29224 (7.6%)
2025-01-10T13:23:47.9166940Z E           Max absolute difference among violations: 2.92713618
2025-01-10T13:23:47.9167168Z E           Max relative difference among violations: 18196.0085861
2025-01-10T13:23:47.9167432Z E            ACTUAL: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:23:47.9167681Z E                  1.126883e+00, 4.414472e-04])
2025-01-10T13:23:47.9167858Z E            DESIRED: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:23:47.9167954Z E                  1.126883e+00, 4.414472e-04])
2025-01-10T13:23:47.9167959Z 
2025-01-10T13:23:47.9168168Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9168328Z ________________________ test_hdf_plasma[tau_sobolevs] _________________________
2025-01-10T13:23:47.9168333Z 
2025-01-10T13:23:47.9168569Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7fef33f0f110>
2025-01-10T13:23:47.9168653Z attr = 'tau_sobolevs'
2025-01-10T13:23:47.9168932Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef5b5fe2d0>
2025-01-10T13:23:47.9168937Z 
2025-01-10T13:23:47.9169086Z     @pytest.mark.parametrize("attr", plasma_properties_list)
2025-01-10T13:23:47.9169264Z     def test_hdf_plasma(simulation_verysimple, attr, regression_data):
2025-01-10T13:23:47.9169400Z         if hasattr(simulation_verysimple.plasma, attr):
2025-01-10T13:23:47.9169541Z             actual = getattr(simulation_verysimple.plasma, attr)
2025-01-10T13:23:47.9169666Z             expected = regression_data.sync_ndarray(actual)
2025-01-10T13:23:47.9169763Z             if hasattr(actual, "cgs"):
2025-01-10T13:23:47.9169862Z                 actual = actual.cgs.value
2025-01-10T13:23:47.9169967Z >           npt.assert_allclose(actual, expected)
2025-01-10T13:23:47.9169972Z 
2025-01-10T13:23:47.9170084Z tardis/plasma/tests/test_hdf_plasma.py:53: 
2025-01-10T13:23:47.9170202Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9170208Z 
2025-01-10T13:23:47.9170663Z args = (<function assert_allclose.<locals>.compare at 0x7fef3492c860>, array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00...       [7.57366002e-14, 3.42661945e-14, 1.59795775e-14, ...,
2025-01-10T13:23:47.9170777Z         2.25618458e-18, 1.41426559e-18, 8.96636158e-19]]))
2025-01-10T13:23:47.9171045Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9171050Z 
2025-01-10T13:23:47.9171130Z     @wraps(func)
2025-01-10T13:23:47.9171216Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9171312Z         with self._recreate_cm():
2025-01-10T13:23:47.9171400Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9171492Z E           AssertionError: 
2025-01-10T13:23:47.9171601Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9171676Z E           
2025-01-10T13:23:47.9171782Z E           Mismatched elements: 39620 / 584480 (6.78%)
2025-01-10T13:23:47.9171930Z E           Max absolute difference among violations: 282815.33818472
2025-01-10T13:23:47.9172067Z E           Max relative difference among violations: 4.12352828e+47
2025-01-10T13:23:47.9172243Z E            ACTUAL: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:23:47.9172455Z E                   0.000000e+00, 0.000000e+00],
2025-01-10T13:23:47.9172604Z E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:23:47.9172783Z E            DESIRED: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:23:47.9172873Z E                   0.000000e+00, 0.000000e+00],
2025-01-10T13:23:47.9173135Z E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:23:47.9173141Z 
2025-01-10T13:23:47.9173347Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9173521Z __________________ test_plasma_state_iterations[iterations_w] __________________
2025-01-10T13:23:47.9173526Z 
2025-01-10T13:23:47.9173741Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9173829Z attr = 'iterations_w'
2025-01-10T13:23:47.9174109Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef2cd87e00>
2025-01-10T13:23:47.9174235Z 
2025-01-10T13:23:47.9174332Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9174414Z         "attr",
2025-01-10T13:23:47.9174486Z         [
2025-01-10T13:23:47.9174574Z             "iterations_w",
2025-01-10T13:23:47.9174656Z             "iterations_t_rad",
2025-01-10T13:23:47.9174761Z             "iterations_electron_densities",
2025-01-10T13:23:47.9174847Z             "iterations_t_inner",
2025-01-10T13:23:47.9174925Z         ],
2025-01-10T13:23:47.9174997Z     )
2025-01-10T13:23:47.9175198Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9175310Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:23:47.9175404Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9175489Z             actual = actual.value
2025-01-10T13:23:47.9175587Z         actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9175717Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9175904Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9175909Z 
2025-01-10T13:23:47.9176032Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:23:47.9176146Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9176298Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9176370Z     ???
2025-01-10T13:23:47.9176483Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9176488Z 
2025-01-10T13:23:47.9176558Z >   ???
2025-01-10T13:23:47.9176742Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:47.9176813Z E   
2025-01-10T13:23:47.9176979Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:23:47.9177057Z E   [index]: [0, 1]
2025-01-10T13:23:47.9177166Z E   [left]:  [0.40039163797855976, 0.45013644671958974]
2025-01-10T13:23:47.9177285Z E   [right]: [0.40039163797855976, 0.4500690173218345]
2025-01-10T13:23:47.9177455Z E   At positional index 1, first diff: 0.45013644671958974 != 0.4500690173218345
2025-01-10T13:23:47.9177460Z 
2025-01-10T13:23:47.9177555Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9177709Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9178135Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:23:47.9178581Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:23:47.9178740Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:23:47.9178745Z 
2025-01-10T13:23:47.9178749Z 
2025-01-10T13:23:47.9178985Z Packets:                                                                                   4031/? [04:50<00:00,  7.35it/s] [A
2025-01-10T13:23:47.9179130Z 
2025-01-10T13:23:47.9179363Z Packets:                                                                                   14696/? [04:50<00:00, 60.42it/s][A
2025-01-10T13:23:47.9179375Z 
2025-01-10T13:23:47.9179603Z Packets:                                                                                   25511/? [04:50<00:00, 137.20it/s][A
2025-01-10T13:23:47.9179609Z 
2025-01-10T13:23:47.9179827Z Packets:                                                                                   36455/? [04:50<00:00, 248.01it/s][A
2025-01-10T13:23:47.9180316Z Iterations:████████████████████████████████████████████████████████████████████████████████5/5 [04:50<00:00, 102.34s/it]
2025-01-10T13:23:47.9180325Z 
2025-01-10T13:23:47.9180561Z Packets:                                                                                   44030/? [04:50<00:00, 248.01it/s][A
2025-01-10T13:23:47.9180567Z 
2025-01-10T13:23:47.9180786Z Packets:                                                                                   0/40000 [00:00<?, ?it/s]         [A
2025-01-10T13:23:47.9180896Z 
2025-01-10T13:23:47.9181171Z Packets:   ███████████████████▋                                                            9833/40000 [00:00<00:00, 35586.42it/s][A
2025-01-10T13:23:47.9181178Z 
2025-01-10T13:23:47.9181440Z Packets:   ██████████████████████████▊                                                     13392/40000 [00:00<00:00, 35567.97it/s][A
2025-01-10T13:23:47.9181452Z 
2025-01-10T13:23:47.9181721Z Packets:   █████████████████████████████████▉                                              16948/40000 [00:00<00:00, 35519.33it/s][A
2025-01-10T13:23:47.9181727Z 
2025-01-10T13:23:47.9182005Z Packets:   ████████████████████████████████████████▉                                       20498/40000 [00:00<00:00, 35426.42it/s][A
2025-01-10T13:23:47.9182010Z 
2025-01-10T13:23:47.9182287Z Packets:   ████████████████████████████████████████████████                                24052/40000 [00:00<00:00, 35458.42it/s][A
2025-01-10T13:23:47.9182306Z 
2025-01-10T13:23:47.9182599Z Packets:   ███████████████████████████████████████████████████████▎                        27625/40000 [00:00<00:00, 35532.24it/s][A
2025-01-10T13:23:47.9182616Z 
2025-01-10T13:23:47.9182916Z Packets:   ██████████████████████████████████████████████████████████████▎                 31181/40000 [00:00<00:00, 35540.07it/s][A
2025-01-10T13:23:47.9182922Z 
2025-01-10T13:23:47.9183360Z Packets:   █████████████████████████████████████████████████████████████████████▌          34760/40000 [00:00<00:00, 35613.93it/s][A
2025-01-10T13:23:47.9183368Z 
2025-01-10T13:23:47.9183687Z Packets:   ████████████████████████████████████████████████████████████████████████████▋   38327/40000 [00:01<00:00, 35630.04it/s][A
2025-01-10T13:23:47.9183835Z Iterations:                                                                                6/? [04:53<00:00, 68.34s/it] 
2025-01-10T13:23:47.9183841Z 
2025-01-10T13:23:47.9184161Z Packets:   ████████████████████████████████████████████████████████████████████████████████40000/40000 [00:01<00:00, 35630.04it/s][A
2025-01-10T13:23:47.9184480Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9184986Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:23:47.9185166Z ________________ test_plasma_state_iterations[iterations_t_rad] ________________
2025-01-10T13:23:47.9185175Z 
2025-01-10T13:23:47.9185393Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9185485Z attr = 'iterations_t_rad'
2025-01-10T13:23:47.9185758Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef557e4710>
2025-01-10T13:23:47.9185764Z 
2025-01-10T13:23:47.9185864Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9185936Z         "attr",
2025-01-10T13:23:47.9186012Z         [
2025-01-10T13:23:47.9186107Z             "iterations_w",
2025-01-10T13:23:47.9186326Z             "iterations_t_rad",
2025-01-10T13:23:47.9186435Z             "iterations_electron_densities",
2025-01-10T13:23:47.9186521Z             "iterations_t_inner",
2025-01-10T13:23:47.9186599Z         ],
2025-01-10T13:23:47.9186670Z     )
2025-01-10T13:23:47.9186874Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9186988Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:23:47.9187084Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9187170Z             actual = actual.value
2025-01-10T13:23:47.9187268Z         actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9187395Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9187579Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9187585Z 
2025-01-10T13:23:47.9187709Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:23:47.9187832Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9187997Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9188074Z     ???
2025-01-10T13:23:47.9188192Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9188197Z 
2025-01-10T13:23:47.9188269Z >   ???
2025-01-10T13:23:47.9188456Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:47.9188526Z E   
2025-01-10T13:23:47.9188693Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:23:47.9188773Z E   [index]: [0, 1]
2025-01-10T13:23:47.9188882Z E   [left]:  [9967.488442185557, 10090.925208074616]
2025-01-10T13:23:47.9188984Z E   [right]: [9967.488442185557, 10091.396322818851]
2025-01-10T13:23:47.9189165Z E   At positional index 1, first diff: 10090.925208074616 != 10091.396322818851
2025-01-10T13:23:47.9189170Z 
2025-01-10T13:23:47.9189269Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9189457Z _________ test_plasma_state_iterations[iterations_electron_densities] __________
2025-01-10T13:23:47.9189466Z 
2025-01-10T13:23:47.9189689Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9189786Z attr = 'iterations_electron_densities'
2025-01-10T13:23:47.9190058Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef566772c0>
2025-01-10T13:23:47.9190063Z 
2025-01-10T13:23:47.9190157Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9190237Z         "attr",
2025-01-10T13:23:47.9190309Z         [
2025-01-10T13:23:47.9190395Z             "iterations_w",
2025-01-10T13:23:47.9190479Z             "iterations_t_rad",
2025-01-10T13:23:47.9190583Z             "iterations_electron_densities",
2025-01-10T13:23:47.9190675Z             "iterations_t_inner",
2025-01-10T13:23:47.9190747Z         ],
2025-01-10T13:23:47.9190825Z     )
2025-01-10T13:23:47.9191020Z     def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9191229Z         actual = getattr(simulation_one_loop, attr)
2025-01-10T13:23:47.9191319Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9191410Z             actual = actual.value
2025-01-10T13:23:47.9191501Z         actual = pd.DataFrame(actual)
2025-01-10T13:23:47.9191633Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9191806Z >       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9191812Z 
2025-01-10T13:23:47.9191936Z tardis/simulation/tests/test_simulation.py:46: 
2025-01-10T13:23:47.9192048Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9192201Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9192308Z     ???
2025-01-10T13:23:47.9192509Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9192521Z 
2025-01-10T13:23:47.9192658Z >   ???
2025-01-10T13:23:47.9192953Z E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:47.9193339Z E   
2025-01-10T13:23:47.9193517Z E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:23:47.9193601Z E   [index]: [0, 1]
2025-01-10T13:23:47.9193705Z E   [left]:  [2869544645.3209715, 2880986026.9779425]
2025-01-10T13:23:47.9193811Z E   [right]: [2869544645.3209715, 2881024886.0882792]
2025-01-10T13:23:47.9193984Z E   At positional index 1, first diff: 2880986026.9779425 != 2881024886.0882792
2025-01-10T13:23:47.9193989Z 
2025-01-10T13:23:47.9194087Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9194257Z ___________________ test_plasma_estimates[nu_bar_estimator] ____________________
2025-01-10T13:23:47.9194261Z 
2025-01-10T13:23:47.9194478Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9194569Z attr = 'nu_bar_estimator'
2025-01-10T13:23:47.9194839Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef56684d70>
2025-01-10T13:23:47.9194855Z 
2025-01-10T13:23:47.9194952Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9195026Z         "attr",
2025-01-10T13:23:47.9195100Z         [
2025-01-10T13:23:47.9195184Z             "nu_bar_estimator",
2025-01-10T13:23:47.9195277Z             "j_estimator",
2025-01-10T13:23:47.9195356Z             "t_radiative",
2025-01-10T13:23:47.9195446Z             "dilution_factor",
2025-01-10T13:23:47.9195527Z             "output_nus",
2025-01-10T13:23:47.9195614Z             "output_energies",
2025-01-10T13:23:47.9195691Z         ],
2025-01-10T13:23:47.9195763Z     )
2025-01-10T13:23:47.9195950Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9196068Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:23:47.9196154Z             actual = getattr(
2025-01-10T13:23:47.9196346Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:23:47.9196429Z                 attr,
2025-01-10T13:23:47.9196507Z             )
2025-01-10T13:23:47.9196634Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:23:47.9196784Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:23:47.9196905Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:23:47.9196987Z             actual = getattr(
2025-01-10T13:23:47.9197167Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:23:47.9197247Z                 attr,
2025-01-10T13:23:47.9197319Z             )
2025-01-10T13:23:47.9197395Z         else:
2025-01-10T13:23:47.9197530Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:23:47.9197606Z     
2025-01-10T13:23:47.9197696Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9197789Z             actual = actual.value
2025-01-10T13:23:47.9197879Z         actual = pd.Series(actual)
2025-01-10T13:23:47.9198171Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9198359Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9198364Z 
2025-01-10T13:23:47.9198489Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:23:47.9198602Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9198761Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9198838Z     ???
2025-01-10T13:23:47.9198948Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9198953Z 
2025-01-10T13:23:47.9199030Z >   ???
2025-01-10T13:23:47.9199129Z E   AssertionError: Series are different
2025-01-10T13:23:47.9199204Z E   
2025-01-10T13:23:47.9199301Z E   Series values are different (100.0 %)
2025-01-10T13:23:47.9199436Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:23:47.9200629Z E   [left]:  [1.0190851489144414e+29, 8.620293210130916e+28, 7.627182111494611e+28, 6.892948616165262e+28, 6.33792769094367e+28, 5.96002040258715e+28, 5.586558872212224e+28, 5.256359181780157e+28, 5.018051447190144e+28, 4.80142717097284e+28, 4.635443103818662e+28, 4.42760082209026e+28, 4.266701646003403e+28, 4.095148200480327e+28, 3.973054136677623e+28, 3.881348463924801e+28, 3.749648114483988e+28, 3.6669667839395174e+28, 3.5309131816469346e+28, 3.4364426470451254e+28]
2025-01-10T13:23:47.9201967Z E   [right]: [1.0202042777991753e+29, 8.604643039338655e+28, 7.621843612415326e+28, 6.887796775939633e+28, 6.338143063845967e+28, 5.961770832970249e+28, 5.583215038688499e+28, 5.26214201104387e+28, 5.00719468999816e+28, 4.795144203550334e+28, 4.630537292368217e+28, 4.425690259081018e+28, 4.270865369572798e+28, 4.094544283657345e+28, 3.972280940559004e+28, 3.884152385274923e+28, 3.7498225331847723e+28, 3.6666118688506634e+28, 3.5319738797726287e+28, 3.437270715325205e+28]
2025-01-10T13:23:47.9202167Z E   At positional index 0, first diff: 1.0190851489144414e+29 != 1.0202042777991753e+29
2025-01-10T13:23:47.9202179Z 
2025-01-10T13:23:47.9202268Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9202430Z ______________________ test_plasma_estimates[j_estimator] ______________________
2025-01-10T13:23:47.9202435Z 
2025-01-10T13:23:47.9202652Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9202739Z attr = 'j_estimator'
2025-01-10T13:23:47.9203011Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef5668d8e0>
2025-01-10T13:23:47.9203156Z 
2025-01-10T13:23:47.9203253Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9203332Z         "attr",
2025-01-10T13:23:47.9203405Z         [
2025-01-10T13:23:47.9203492Z             "nu_bar_estimator",
2025-01-10T13:23:47.9203572Z             "j_estimator",
2025-01-10T13:23:47.9203655Z             "t_radiative",
2025-01-10T13:23:47.9203738Z             "dilution_factor",
2025-01-10T13:23:47.9203828Z             "output_nus",
2025-01-10T13:23:47.9203909Z             "output_energies",
2025-01-10T13:23:47.9203992Z         ],
2025-01-10T13:23:47.9204063Z     )
2025-01-10T13:23:47.9204247Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9204366Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:23:47.9204454Z             actual = getattr(
2025-01-10T13:23:47.9204653Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:23:47.9204728Z                 attr,
2025-01-10T13:23:47.9204804Z             )
2025-01-10T13:23:47.9204920Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:23:47.9205073Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:23:47.9205194Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:23:47.9205280Z             actual = getattr(
2025-01-10T13:23:47.9205455Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:23:47.9205666Z                 attr,
2025-01-10T13:23:47.9205739Z             )
2025-01-10T13:23:47.9205820Z         else:
2025-01-10T13:23:47.9205956Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:23:47.9206033Z     
2025-01-10T13:23:47.9206126Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9206212Z             actual = actual.value
2025-01-10T13:23:47.9206306Z         actual = pd.Series(actual)
2025-01-10T13:23:47.9206431Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9206614Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9206619Z 
2025-01-10T13:23:47.9206737Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:23:47.9206853Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9207000Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9207082Z     ???
2025-01-10T13:23:47.9207191Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9207304Z 
2025-01-10T13:23:47.9207381Z >   ???
2025-01-10T13:23:47.9207481Z E   AssertionError: Series are different
2025-01-10T13:23:47.9207558Z E   
2025-01-10T13:23:47.9207660Z E   Series values are different (100.0 %)
2025-01-10T13:23:47.9207788Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:23:47.9208742Z E   [left]:  [116548101693134.0, 98287497352449.0, 86880176732435.3, 78272950854373.0, 72163814877095.83, 67694196332568.8, 63443304042094.88, 60039709300008.766, 57626147839330.93, 55320363334244.24, 53407234761435.555, 51398562237742.71, 49867122015465.38, 48237829093150.86, 46995101666576.03, 46046276744657.68, 44990423974887.06, 44175537951010.664, 43032079683987.45, 42141581527839.66]
2025-01-10T13:23:47.9209685Z E   [right]: [116635492761989.08, 98171051632121.94, 86872515261186.84, 78289696965690.05, 72209193315676.42, 67743848273202.76, 63510940656108.0, 60117004438842.5, 57572723670164.91, 55316097836075.18, 53398108009568.71, 51391839595543.54, 49914799926154.195, 48252386019894.61, 46984233483222.1, 46076787175987.44, 45005288890715.74, 44179675761283.02, 43040066710169.69, 42141149121109.82]
2025-01-10T13:23:47.9209872Z E   At positional index 0, first diff: 116548101693134.0 != 116635492761989.08
2025-01-10T13:23:47.9209877Z 
2025-01-10T13:23:47.9209970Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9210126Z ______________________ test_plasma_estimates[t_radiative] ______________________
2025-01-10T13:23:47.9210131Z 
2025-01-10T13:23:47.9210347Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9210428Z attr = 't_radiative'
2025-01-10T13:23:47.9210703Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef5668c110>
2025-01-10T13:23:47.9210708Z 
2025-01-10T13:23:47.9210799Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9210890Z         "attr",
2025-01-10T13:23:47.9210969Z         [
2025-01-10T13:23:47.9211059Z             "nu_bar_estimator",
2025-01-10T13:23:47.9211146Z             "j_estimator",
2025-01-10T13:23:47.9211225Z             "t_radiative",
2025-01-10T13:23:47.9211315Z             "dilution_factor",
2025-01-10T13:23:47.9211395Z             "output_nus",
2025-01-10T13:23:47.9211487Z             "output_energies",
2025-01-10T13:23:47.9211558Z         ],
2025-01-10T13:23:47.9211637Z     )
2025-01-10T13:23:47.9211818Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9211938Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:23:47.9212020Z             actual = getattr(
2025-01-10T13:23:47.9212217Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:23:47.9212292Z                 attr,
2025-01-10T13:23:47.9212374Z             )
2025-01-10T13:23:47.9212499Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:23:47.9212762Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:23:47.9212892Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:23:47.9212976Z             actual = getattr(
2025-01-10T13:23:47.9213261Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:23:47.9213338Z                 attr,
2025-01-10T13:23:47.9213417Z             )
2025-01-10T13:23:47.9213491Z         else:
2025-01-10T13:23:47.9213629Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:23:47.9213700Z     
2025-01-10T13:23:47.9213796Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9213884Z             actual = actual.value
2025-01-10T13:23:47.9213977Z         actual = pd.Series(actual)
2025-01-10T13:23:47.9214101Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9214284Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9214294Z 
2025-01-10T13:23:47.9214531Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:23:47.9214651Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9214803Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9214878Z     ???
2025-01-10T13:23:47.9214993Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9214998Z 
2025-01-10T13:23:47.9215069Z >   ???
2025-01-10T13:23:47.9215179Z E   AssertionError: Series are different
2025-01-10T13:23:47.9215249Z E   
2025-01-10T13:23:47.9215350Z E   Series values are different (90.0 %)
2025-01-10T13:23:47.9215477Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:23:47.9216486Z E   [left]:  [10090.925208074616, 10114.284007169754, 10139.419400388753, 10142.763627360704, 10149.780795955081, 10123.09844072696, 10084.70389705666, 10058.012622231076, 10075.221831273808, 10032.602564737463, 10029.923783575228, 9982.400974610373, 9943.057719983486, 9914.605779635785, 9894.245392559053, 9854.911578885576, 9802.511064512953, 9775.252526407034, 9735.554945100961, 9699.295793920262]
2025-01-10T13:23:47.9217504Z E   [right]: [10091.396322818851, 10113.672762424394, 10138.57214647089, 10142.40782954104, 10149.471061360664, 10124.731447668686, 10084.96501000204, 10057.88480134284, 10073.983914823793, 10031.924501830883, 10029.890159447663, 9982.658841271636, 9943.375727608092, 9914.259749796103, 9893.924180562475, 9854.860600288932, 9802.891513260798, 9774.848565783677, 9735.162327402864, 9698.911095826039]
2025-01-10T13:23:47.9217674Z E   At positional index 0, first diff: 10090.925208074616 != 10091.396322818851
2025-01-10T13:23:47.9217678Z 
2025-01-10T13:23:47.9217776Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9218070Z ____________________ test_plasma_estimates[dilution_factor] ____________________
2025-01-10T13:23:47.9218088Z 
2025-01-10T13:23:47.9218439Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9218547Z attr = 'dilution_factor'
2025-01-10T13:23:47.9218816Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef5668f230>
2025-01-10T13:23:47.9218821Z 
2025-01-10T13:23:47.9218921Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9218996Z         "attr",
2025-01-10T13:23:47.9219073Z         [
2025-01-10T13:23:47.9219155Z             "nu_bar_estimator",
2025-01-10T13:23:47.9219240Z             "j_estimator",
2025-01-10T13:23:47.9219321Z             "t_radiative",
2025-01-10T13:23:47.9219408Z             "dilution_factor",
2025-01-10T13:23:47.9219488Z             "output_nus",
2025-01-10T13:23:47.9219580Z             "output_energies",
2025-01-10T13:23:47.9219652Z         ],
2025-01-10T13:23:47.9219730Z     )
2025-01-10T13:23:47.9219910Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9220029Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:23:47.9220258Z             actual = getattr(
2025-01-10T13:23:47.9220455Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:23:47.9220535Z                 attr,
2025-01-10T13:23:47.9220608Z             )
2025-01-10T13:23:47.9220733Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:23:47.9220935Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:23:47.9221136Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:23:47.9221249Z             actual = getattr(
2025-01-10T13:23:47.9221619Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:23:47.9221742Z                 attr,
2025-01-10T13:23:47.9221899Z             )
2025-01-10T13:23:47.9222006Z         else:
2025-01-10T13:23:47.9222207Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:23:47.9222379Z     
2025-01-10T13:23:47.9222523Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9222778Z             actual = actual.value
2025-01-10T13:23:47.9222899Z         actual = pd.Series(actual)
2025-01-10T13:23:47.9223356Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9223616Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9223623Z 
2025-01-10T13:23:47.9223909Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:23:47.9224057Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9224276Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9224382Z     ???
2025-01-10T13:23:47.9224541Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9224546Z 
2025-01-10T13:23:47.9224757Z >   ???
2025-01-10T13:23:47.9224892Z E   AssertionError: Series are different
2025-01-10T13:23:47.9225027Z E   
2025-01-10T13:23:47.9225154Z E   Series values are different (95.0 %)
2025-01-10T13:23:47.9225345Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:23:47.9226517Z E   [left]:  [0.45013644671958974, 0.3590876501536774, 0.29922866259325875, 0.2578248359585449, 0.22541895309871685, 0.2011998403594266, 0.1825952857379094, 0.16657898370897484, 0.15044998950385866, 0.13972884748944558, 0.12862444897046627, 0.12093391136570561, 0.1134368459236266, 0.1064936133229687, 0.1001521163428717, 0.09484336636678078, 0.090537247519663, 0.08584829670213995, 0.08202005255449264, 0.07823319609488677]
2025-01-10T13:23:47.9227671Z E   [right]: [0.4500690173218345, 0.3591778672440072, 0.299315794490968, 0.2578615845098735, 0.2254422032786788, 0.20109997630618956, 0.18257381854718482, 0.166581017494628, 0.15049754388199085, 0.13975435818105286, 0.12862206084807348, 0.12092168181342122, 0.1134233405695467, 0.10650389106044364, 0.10016109465785483, 0.09484390983006763, 0.09052533757303871, 0.08585912682814001, 0.0820302832176511, 0.07824287530618068]
2025-01-10T13:23:47.9227911Z E   At positional index 0, first diff: 0.45013644671958974 != 0.4500690173218345
2025-01-10T13:23:47.9227919Z 
2025-01-10T13:23:47.9228043Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9228250Z ______________________ test_plasma_estimates[output_nus] _______________________
2025-01-10T13:23:47.9228255Z 
2025-01-10T13:23:47.9228567Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9228848Z attr = 'output_nus'
2025-01-10T13:23:47.9229186Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef5668e3c0>
2025-01-10T13:23:47.9229191Z 
2025-01-10T13:23:47.9229316Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9229457Z         "attr",
2025-01-10T13:23:47.9229609Z         [
2025-01-10T13:23:47.9229778Z             "nu_bar_estimator",
2025-01-10T13:23:47.9229891Z             "j_estimator",
2025-01-10T13:23:47.9230036Z             "t_radiative",
2025-01-10T13:23:47.9230307Z             "dilution_factor",
2025-01-10T13:23:47.9230512Z             "output_nus",
2025-01-10T13:23:47.9230644Z             "output_energies",
2025-01-10T13:23:47.9230785Z         ],
2025-01-10T13:23:47.9230888Z     )
2025-01-10T13:23:47.9231162Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9231376Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:23:47.9231506Z             actual = getattr(
2025-01-10T13:23:47.9231770Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:23:47.9231894Z                 attr,
2025-01-10T13:23:47.9232033Z             )
2025-01-10T13:23:47.9232169Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:23:47.9232447Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:23:47.9232596Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:23:47.9232763Z             actual = getattr(
2025-01-10T13:23:47.9232972Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:23:47.9233370Z                 attr,
2025-01-10T13:23:47.9233532Z             )
2025-01-10T13:23:47.9233709Z         else:
2025-01-10T13:23:47.9233915Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:23:47.9234017Z     
2025-01-10T13:23:47.9234158Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9234319Z             actual = actual.value
2025-01-10T13:23:47.9234507Z         actual = pd.Series(actual)
2025-01-10T13:23:47.9234663Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9234915Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9234921Z 
2025-01-10T13:23:47.9235071Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:23:47.9235287Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9235502Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9235652Z     ???
2025-01-10T13:23:47.9235984Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9235989Z 
2025-01-10T13:23:47.9236089Z >   ???
2025-01-10T13:23:47.9236286Z E   AssertionError: Series are different
2025-01-10T13:23:47.9236489Z E   
2025-01-10T13:23:47.9236778Z E   Series values are different (5.1125 %)
2025-01-10T13:23:47.9237448Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.9242624Z E   [left]:  [1806497964363691.5, 620824050797791.0, 651557470803973.5, 320924283401155.06, 561113873787112.25, 241798291122606.1, 676659115957490.4, 599043646843299.5, 607330789848065.1, 916915882531221.8, 944436308170835.4, 768263702028831.1, 3180981513893847.5, 2598977918829023.0, 857730899770804.0, 618923179519891.8, 551416875835854.44, 1086541433542293.5, 754833971959408.2, 491317193158596.1, 463436938874983.3, 1490288028825510.8, 820033385297487.8, 2452394921854276.0, 735345782477539.2, 754787342662615.8, 1199748305923909.8, 555498342552241.7, 1389852333652706.2, 1385846435296470.8, 368679109418251.0, 1912095724903033.2, 2017769542518466.0, 627651232172153.5, 1067422242306306.2, 948629480189651.8, 1978325812571257.2, 445358814403560.5, 1003063944118045.1, 849728144317407.0, 967658015948004.0, 1280663773931335.5, 1146264300342218.8, 1001861030074981.8, 1119183834838938.5, 508263982580230.94, 1892628101399911.5, 781537280613827.0, 1151086326674402.2, 604499180764604.0, 725902034055549.9, 457814698066574.3, 527262173332999.9, 341748821526544.94, 562192309822701.44, 1275142789503603.2, 657025184715239.1, 723852885328246.5, 1885538050889659.0, 585984121054452.8, 917026429989072.4, 696897964334913.8, 267976306885906.9, 343747179020909.4, 96582762885197.0, 1296746601148043.2, 491334710156273.4, 1492212625817827.0, 764003012375887.5, 1572736205466074.5, 1559683657845856.8, 476769967588303.4, 1860056739912971.5, 702994366583567.1, 1017518348351587.6, 484486056936689.44, 453148114829195.1, 717528815454204.8, 508993320531592.06, 1838746711006649.2, 663648932445292.6, 1322073114843600.0, 601612805662424.9, 1840374275823067.5, 440721373409527.9, 1641950783987409.2, 1588043382663297.8, 1174117968839014.5, 1215683099165958.0, 997747131579365.4, 1168546500179118.0, 1048569696680261.6, 1513832752764706.8, 1363140908755187.5, 430233648082889.1, 386057265404197.6, 1139144647809848.2, 307473380309096.1, 403471109559731.6, 1156219784137886.0, ...]
2025-01-10T13:23:47.9248117Z E   [right]: [1806512041912368.8, 620828912578783.0, 651561681514283.2, 320926793622792.2, 561113831783033.0, 241800185490365.7, 676657497080704.5, 599041295479916.1, 607335547665201.9, 916923063058785.2, 944437910067241.0, 768263081009078.1, 3180974191574679.5, 2598971968757746.0, 857737633068955.4, 618928023168687.5, 551416803496124.25, 1086549942730966.9, 754833333392143.2, 491321027587878.7, 463440568130160.4, 1490299638092356.5, 820039899773855.1, 2452391211684156.5, 735351500669317.2, 754784724695130.1, 1199750254428993.5, 555501175228475.94, 1389863217827777.5, 1385857288100655.8, 368681996608404.06, 1912110698856825.8, 2017785344022282.2, 627651183748411.8, 1067430591325981.9, 948623864004036.0, 1978326785288413.0, 445362302085804.25, 1003071799286044.6, 849734798686120.6, 967665593846029.1, 1280673803031827.2, 1146262107204918.5, 1001868875822752.4, 1119192629281446.4, 508267969421775.25, 1892642922899362.8, 781543400968040.9, 1151095341031394.2, 604503914702702.6, 725907718720482.8, 457818283293006.9, 527261796217634.44, 341748696489478.8, 562196737455386.1, 1275152810939863.2, 657003154645147.8, 723858331274613.6, 1885552835316985.5, 585988709997902.4, 917033611382352.2, 696895494383372.0, 267978405454919.2, 343749870964784.4, 96583519241591.61, 1296758039945233.8, 491338550899887.9, 1492219434855197.0, 764008995416200.5, 1572724795429636.2, 1559695871999531.0, 476770259286661.5, 1860071011741526.8, 702999878183188.2, 1017511963264823.4, 484489851031166.6, 453151663510803.5, 717543258409877.6, 508990329432545.4, 1838756496639701.8, 663654129595372.2, 1322083461079532.0, 601616268613591.0, 1840388688113732.8, 440724823612140.5, 1641895920313314.8, 1588055811374384.5, 1174127163560797.5, 1215687723496508.2, 997743048820577.1, 1168560411536350.2, 1048577905256173.4, 1513844599143900.5, 1363151613665534.0, 430237017317327.8, 386060300653508.2, 1139153568649478.2, 307475792296687.0, 403474269212082.0, 1156228838695875.2, ...]
2025-01-10T13:23:47.9248519Z E   At positional index 56, first diff: 657025184715239.1 != 657003154645147.8
2025-01-10T13:23:47.9248526Z 
2025-01-10T13:23:47.9248760Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9248985Z ____________________ test_plasma_estimates[output_energies] ____________________
2025-01-10T13:23:47.9248999Z 
2025-01-10T13:23:47.9249286Z simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7fef557e54c0>
2025-01-10T13:23:47.9249404Z attr = 'output_energies'
2025-01-10T13:23:47.9249732Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef5669c140>
2025-01-10T13:23:47.9249738Z 
2025-01-10T13:23:47.9249921Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9250099Z         "attr",
2025-01-10T13:23:47.9250205Z         [
2025-01-10T13:23:47.9250361Z             "nu_bar_estimator",
2025-01-10T13:23:47.9250475Z             "j_estimator",
2025-01-10T13:23:47.9250662Z             "t_radiative",
2025-01-10T13:23:47.9250849Z             "dilution_factor",
2025-01-10T13:23:47.9250961Z             "output_nus",
2025-01-10T13:23:47.9251113Z             "output_energies",
2025-01-10T13:23:47.9251216Z         ],
2025-01-10T13:23:47.9251410Z     )
2025-01-10T13:23:47.9251661Z     def test_plasma_estimates(simulation_one_loop, attr, regression_data):
2025-01-10T13:23:47.9251991Z         if attr in ["nu_bar_estimator", "j_estimator"]:
2025-01-10T13:23:47.9252109Z             actual = getattr(
2025-01-10T13:23:47.9252369Z                 simulation_one_loop.transport.transport_state.radfield_mc_estimators,
2025-01-10T13:23:47.9252462Z                 attr,
2025-01-10T13:23:47.9252684Z             )
2025-01-10T13:23:47.9252839Z         elif attr in ["t_radiative", "dilution_factor"]:
2025-01-10T13:23:47.9253196Z             actual = getattr(simulation_one_loop.simulation_state, attr)
2025-01-10T13:23:47.9253382Z         elif attr in ["output_nus", "output_energies"]:
2025-01-10T13:23:47.9253499Z             actual = getattr(
2025-01-10T13:23:47.9253804Z                 simulation_one_loop.transport.transport_state.packet_collection,
2025-01-10T13:23:47.9253911Z                 attr,
2025-01-10T13:23:47.9254058Z             )
2025-01-10T13:23:47.9254161Z         else:
2025-01-10T13:23:47.9254368Z             actual = getattr(simulation_one_loop.transport, attr)
2025-01-10T13:23:47.9254649Z     
2025-01-10T13:23:47.9254920Z         if hasattr(actual, "value"):
2025-01-10T13:23:47.9255115Z             actual = actual.value
2025-01-10T13:23:47.9255318Z         actual = pd.Series(actual)
2025-01-10T13:23:47.9255667Z         expected = regression_data.sync_dataframe(actual)
2025-01-10T13:23:47.9255927Z >       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)
2025-01-10T13:23:47.9255934Z 
2025-01-10T13:23:47.9256121Z tardis/simulation/tests/test_simulation.py:80: 
2025-01-10T13:23:47.9256253Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9256564Z testing.pyx:55: in pandas._libs.testing.assert_almost_equal
2025-01-10T13:23:47.9256669Z     ???
2025-01-10T13:23:47.9256848Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9256853Z 
2025-01-10T13:23:47.9256960Z >   ???
2025-01-10T13:23:47.9257115Z E   AssertionError: Series are different
2025-01-10T13:23:47.9257279Z E   
2025-01-10T13:23:47.9257479Z E   Series values are different (1.3025 %)
2025-01-10T13:23:47.9257913Z E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:47.9264396Z E   [left]:  [2.5801871599548787e-05, 2.5615305276449435e-05, 2.5858344017372144e-05, -2.4286539750273696e-05, 2.4924524325725243e-05, -2.456230824810029e-05, 2.4103043153710077e-05, -2.438655094434287e-05, -2.4539054537501715e-05, 2.5417984817525785e-05, 2.512000535197746e-05, -2.4642582656280976e-05, -2.423335106855554e-05, -2.4507743780475822e-05, 2.4958490988042172e-05, -2.4193730330394604e-05, 2.5671484002468758e-05, 2.571778434062277e-05, 2.464945535255098e-05, -2.422773639583352e-05, 2.5447471360622184e-05, -2.409627635116542e-05, 2.5614844040255083e-05, -2.4320523596905817e-05, 2.5377784576172196e-05, -2.3457066675560312e-05, 2.4369140190445265e-05, 2.5580782093694832e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4679185862134628e-05, 2.5692099696671885e-05, 2.2709368608835504e-05, -2.422769024282858e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.221435871493417e-05, 2.588758262836899e-05, -2.4715605747432618e-05, 2.5511122157387355e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127536098161385e-05, -2.468141895326209e-05, -2.47043179761032e-05, -2.3740908691907106e-05, 2.4832442492096064e-05, -2.413156183708872e-05, -2.4208444730823924e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.413785571902468e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.4718848796409172e-05, 2.5235644879553273e-05, 2.5660116818809676e-05, 2.5705887025490933e-05, -2.3537055466673638e-05, 2.5942471740302383e-05, 2.4779255435154302e-05, -2.4437171482408422e-05, -2.488587475102296e-05, -2.461817145541738e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721589006402834e-05, -2.3916183924792534e-05, -2.4073277575252532e-05, 2.5426114770306902e-05, 2.504304506604637e-05, -2.365600824332809e-05, 2.564649452803889e-05, -2.3899135529642785e-05, 2.5338970275810367e-05, 2.484858251486878e-05, 2.5806793260333468e-05, 2.538037983050111e-05, -2.4207571237562553e-05, 2.4527910111281257e-05, 2.4916625382690475e-05, -2.4248093976538034e-05, -2.4259084902202997e-05, 2.5042343244083765e-05, -2.4184000110453416e-05, 2.534949108326902e-05, -2.438918660146681e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:23:47.9270992Z E   [right]: [2.580187060760512e-05, 2.5615305276449435e-05, 2.585830862681326e-05, -2.4286539523836896e-05, 2.4924327273178824e-05, -2.4562308329704016e-05, 2.4102796735064873e-05, -2.4386264249292878e-05, -2.4539054606359595e-05, 2.5417984817525785e-05, 2.5119851241109903e-05, -2.464236975797002e-05, -2.423310551200988e-05, -2.4507495750261827e-05, 2.4958491461131913e-05, -2.4193730203503752e-05, 2.5671279598406848e-05, 2.571778434758039e-05, 2.464924146734715e-05, -2.4227735746845522e-05, 2.5447471360622184e-05, -2.409627535779648e-05, 2.5614846934356755e-05, -2.4320296346496788e-05, 2.5377783180930537e-05, -2.345680162082186e-05, 2.436898893045542e-05, 2.5580712211859562e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4678990692654424e-05, 2.5692099452386407e-05, 2.270905632364821e-05, -2.4227512425411162e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.2214142249592017e-05, 2.588758262836899e-05, -2.4715606408157026e-05, 2.5511122485544443e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127338442376704e-05, -2.4681216640073288e-05, -2.4704319074974646e-05, -2.3740909354181544e-05, 2.4831415400580145e-05, -2.4131554413805748e-05, -2.420844496771843e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.4137581143845235e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.471887326730884e-05, 2.5235644520855386e-05, 2.5660032958970583e-05, 2.5705887025490933e-05, -2.3536700387812003e-05, 2.5942471740302383e-05, 2.4779076546395e-05, -2.4437167612038533e-05, -2.4885874975052928e-05, -2.461782418608366e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721880722086934e-05, -2.391585609212342e-05, -2.407321716937353e-05, 2.5426114770306902e-05, 2.5043044930642476e-05, -2.3655959156054043e-05, 2.564649452803889e-05, -2.389913546657555e-05, 2.533792518100767e-05, 2.4848582397006154e-05, 2.5806793260333468e-05, 2.5380277617431415e-05, -2.4207282609290893e-05, 2.4528010028979532e-05, 2.491662531246e-05, -2.4248093837055892e-05, -2.4259085434617066e-05, 2.5042343244083765e-05, -2.4184000860153038e-05, 2.534949108326902e-05, -2.4389186927485497e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:23:47.9271455Z E   At positional index 414, first diff: 2.5347525852067693e-05 != 2.5657552576608082e-05
2025-01-10T13:23:47.9271461Z 
2025-01-10T13:23:47.9271588Z testing.pyx:173: AssertionError
2025-01-10T13:23:47.9271864Z ________________ TestSpectrumSolver.test_spectrum_real_packets _________________
2025-01-10T13:23:47.9271869Z 
2025-01-10T13:23:47.9272145Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7fef61946c30>
2025-01-10T13:23:47.9272480Z simulation = <tardis.simulation.base.Simulation object at 0x7fef2d1d9850>
2025-01-10T13:23:47.9272486Z 
2025-01-10T13:23:47.9272678Z     def test_spectrum_real_packets(self, simulation):
2025-01-10T13:23:47.9272973Z         transport_state = simulation.transport.transport_state
2025-01-10T13:23:47.9273461Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:23:47.9273557Z     
2025-01-10T13:23:47.9273894Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:23:47.9274053Z         result = solver.spectrum_real_packets.luminosity
2025-01-10T13:23:47.9274313Z         key = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:23:47.9274453Z         expected = self.get_expected_data(key)
2025-01-10T13:23:47.9274577Z     
2025-01-10T13:23:47.9274766Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9274921Z     
2025-01-10T13:23:47.9275095Z >       assert_quantity_allclose(
2025-01-10T13:23:47.9275202Z             result,
2025-01-10T13:23:47.9275430Z             luminosity,
2025-01-10T13:23:47.9275589Z         )
2025-01-10T13:23:47.9275595Z 
2025-01-10T13:23:47.9275812Z tardis/spectrum/tests/test_spectrum_solver.py:71: 
2025-01-10T13:23:47.9276148Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9276566Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9276692Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9276906Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9276912Z 
2025-01-10T13:23:47.9277485Z args = (<function assert_allclose.<locals>.compare at 0x7fef5b9d4f40>, array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38,...), array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, ...,
2025-01-10T13:23:47.9277625Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9277953Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9277959Z 
2025-01-10T13:23:47.9278072Z     @wraps(func)
2025-01-10T13:23:47.9278265Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9278417Z         with self._recreate_cm():
2025-01-10T13:23:47.9278576Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9278697Z E           AssertionError: 
2025-01-10T13:23:47.9278876Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9279049Z E           
2025-01-10T13:23:47.9279225Z E           Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:23:47.9279434Z E           Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:23:47.9279583Z E           Max relative difference among violations: 1.
2025-01-10T13:23:47.9279820Z E            ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9280010Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9280425Z E            DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9280601Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9280624Z 
2025-01-10T13:23:47.9280977Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9281261Z ___________ TestSpectrumSolver.test_spectrum_real_packets_reabsorbed ___________
2025-01-10T13:23:47.9281267Z 
2025-01-10T13:23:47.9281558Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7fef61946c00>
2025-01-10T13:23:47.9281846Z simulation = <tardis.simulation.base.Simulation object at 0x7fef2d1d9850>
2025-01-10T13:23:47.9281851Z 
2025-01-10T13:23:47.9282035Z     def test_spectrum_real_packets_reabsorbed(self, simulation):
2025-01-10T13:23:47.9282280Z         transport_state = simulation.transport.transport_state
2025-01-10T13:23:47.9282519Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:23:47.9282658Z     
2025-01-10T13:23:47.9282893Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:23:47.9283479Z         result = solver.spectrum_real_packets_reabsorbed.luminosity
2025-01-10T13:23:47.9283822Z         key = "simulation/spectrum_solver/spectrum_real_packets_reabsorbed/luminosity"
2025-01-10T13:23:47.9283979Z         expected = self.get_expected_data(key)
2025-01-10T13:23:47.9284137Z     
2025-01-10T13:23:47.9284280Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9284417Z     
2025-01-10T13:23:47.9284525Z >       assert_quantity_allclose(
2025-01-10T13:23:47.9284928Z             result,
2025-01-10T13:23:47.9285057Z             luminosity,
2025-01-10T13:23:47.9285199Z         )
2025-01-10T13:23:47.9285204Z 
2025-01-10T13:23:47.9285363Z tardis/spectrum/tests/test_spectrum_solver.py:87: 
2025-01-10T13:23:47.9285532Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9286018Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9286151Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9286457Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9286462Z 
2025-01-10T13:23:47.9286963Z args = (<function assert_allclose.<locals>.compare at 0x7fef34abe520>, array([2.03920412e+38, 3.72882494e+38, 2.29646943e+38,...), array([2.03920412e+38, 3.72882494e+38, 2.29646943e+38, ...,
2025-01-10T13:23:47.9287124Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9287477Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9287533Z 
2025-01-10T13:23:47.9287643Z     @wraps(func)
2025-01-10T13:23:47.9287796Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9287916Z         with self._recreate_cm():
2025-01-10T13:23:47.9288060Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9288238Z E           AssertionError: 
2025-01-10T13:23:47.9288433Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9288545Z E           
2025-01-10T13:23:47.9288726Z E           Mismatched elements: 252 / 10000 (2.52%)
2025-01-10T13:23:47.9288899Z E           Max absolute difference among violations: 4.15247374e+37
2025-01-10T13:23:47.9289143Z E           Max relative difference among violations: 1.03027212
2025-01-10T13:23:47.9289362Z E            ACTUAL: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9289521Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9289757Z E            DESIRED: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9289892Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9289898Z 
2025-01-10T13:23:47.9290196Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9290409Z ________________________ TestSpectrumSolver.test_solve _________________________
2025-01-10T13:23:47.9290414Z 
2025-01-10T13:23:47.9290746Z self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7fef61947770>
2025-01-10T13:23:47.9290981Z simulation = <tardis.simulation.base.Simulation object at 0x7fef2d1d9850>
2025-01-10T13:23:47.9290987Z 
2025-01-10T13:23:47.9291166Z     def test_solve(self, simulation):
2025-01-10T13:23:47.9291411Z         transport_state = simulation.transport.transport_state
2025-01-10T13:23:47.9291647Z         spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
2025-01-10T13:23:47.9291785Z     
2025-01-10T13:23:47.9292001Z         solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
2025-01-10T13:23:47.9292245Z         result_real, result_virtual, result_integrated = solver.solve(
2025-01-10T13:23:47.9292346Z             transport_state
2025-01-10T13:23:47.9292545Z         )
2025-01-10T13:23:47.9292761Z         key_real = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:23:47.9292951Z         expected_real = self.get_expected_data(key_real)
2025-01-10T13:23:47.9293399Z     
2025-01-10T13:23:47.9293605Z         luminosity_real = u.Quantity(expected_real, "erg /s")
2025-01-10T13:23:47.9293825Z     
2025-01-10T13:23:47.9293946Z >       assert_quantity_allclose(
2025-01-10T13:23:47.9294120Z             result_real.luminosity,
2025-01-10T13:23:47.9294237Z             luminosity_real,
2025-01-10T13:23:47.9294360Z         )
2025-01-10T13:23:47.9294365Z 
2025-01-10T13:23:47.9294585Z tardis/spectrum/tests/test_spectrum_solver.py:105: 
2025-01-10T13:23:47.9294782Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9295173Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9295335Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9295478Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9295505Z 
2025-01-10T13:23:47.9296053Z args = (<function assert_allclose.<locals>.compare at 0x7fef60b66a20>, array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38,...), array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, ...,
2025-01-10T13:23:47.9296382Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9296674Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9296679Z 
2025-01-10T13:23:47.9296825Z     @wraps(func)
2025-01-10T13:23:47.9296942Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9297137Z         with self._recreate_cm():
2025-01-10T13:23:47.9297292Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9297450Z E           AssertionError: 
2025-01-10T13:23:47.9297593Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9297737Z E           
2025-01-10T13:23:47.9297942Z E           Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:23:47.9298149Z E           Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:23:47.9298503Z E           Max relative difference among violations: 1.
2025-01-10T13:23:47.9306634Z E            ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9306797Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9307012Z E            DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9307111Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9307116Z 
2025-01-10T13:23:47.9307344Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9307542Z __________________ TestTransportSimple.test_j_blue_estimators __________________
2025-01-10T13:23:47.9307548Z 
2025-01-10T13:23:47.9307771Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7fef61949490>
2025-01-10T13:23:47.9307975Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5382db80>
2025-01-10T13:23:47.9307981Z 
2025-01-10T13:23:47.9308110Z     def test_j_blue_estimators(self, simulation):
2025-01-10T13:23:47.9308276Z         key = "simulation/transport/transport_state/j_blue_estimator"
2025-01-10T13:23:47.9308380Z         expected = self.get_expected_data(key)
2025-01-10T13:23:47.9308461Z     
2025-01-10T13:23:47.9308549Z >       npt.assert_allclose(
2025-01-10T13:23:47.9308781Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator,
2025-01-10T13:23:47.9308869Z             expected.values,
2025-01-10T13:23:47.9308947Z         )
2025-01-10T13:23:47.9308952Z 
2025-01-10T13:23:47.9309057Z tardis/tests/test_tardis_full.py:70: 
2025-01-10T13:23:47.9309176Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9309181Z 
2025-01-10T13:23:47.9309459Z args = (<function assert_allclose.<locals>.compare at 0x7fef4ccc4ea0>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9309536Z        [0., 0., .....,
2025-01-10T13:23:47.9309621Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9309892Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9309987Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:23:47.9310249Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9310254Z 
2025-01-10T13:23:47.9310339Z     @wraps(func)
2025-01-10T13:23:47.9310428Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9310515Z         with self._recreate_cm():
2025-01-10T13:23:47.9310611Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9310699Z E           AssertionError: 
2025-01-10T13:23:47.9310817Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9310891Z E           
2025-01-10T13:23:47.9311006Z E           Mismatched elements: 491895 / 584480 (84.2%)
2025-01-10T13:23:47.9311150Z E           Max absolute difference among violations: 5.32418652e-19
2025-01-10T13:23:47.9311285Z E           Max relative difference among violations: 8.78746214
2025-01-10T13:23:47.9311395Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9311610Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9311701Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9311814Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9311902Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9311993Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9311998Z 
2025-01-10T13:23:47.9312211Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9312372Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9312715Z [[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9312790Z 	
2025-01-10T13:23:47.9313646Z 	Reading Atomic Data from /home/runner/work/tardis/tardis/tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
2025-01-10T13:23:47.9313851Z [[1mtardis.io.atom_data.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9314290Z 	Reading Atom Data with: UUID = 6f7b09e887a311e7a06b246e96350010 MD5  = 864f1753714343c41f99cb065710cace  ([1mbase.py[0m:258)
2025-01-10T13:23:47.9314463Z [[1mtardis.io.atom_data.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9314949Z 	Non provided Atomic Data: synpp_refs, photoionization_data, yg_data, two_photon_data, linelist_atoms, linelist_molecules ([1mbase.py[0m:262)
2025-01-10T13:23:47.9315200Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:23:47.9315645Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:23:47.9315829Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9316044Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:23:47.9316217Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9316296Z 	
2025-01-10T13:23:47.9316458Z 	Starting iteration 1 of 5 ([1mbase.py[0m:444)
2025-01-10T13:23:47.9316618Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9316695Z 	
2025-01-10T13:23:47.9316792Z 	Luminosity emitted   = 8.104e+42 erg / s
2025-01-10T13:23:47.9316891Z 	Luminosity absorbed  = 2.674e+42 erg / s
2025-01-10T13:23:47.9316989Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9317100Z  ([1mbase.py[0m:657)
2025-01-10T13:23:47.9317267Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9317337Z 	
2025-01-10T13:23:47.9317502Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:23:47.9317661Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9317737Z 	
2025-01-10T13:23:47.9317845Z 	Shell No.    t_rad    next_t_rad    w   next_w
2025-01-10T13:23:47.9317939Z 	0         9.97e+03 K  1.01e+04 K   0.4   0.449
2025-01-10T13:23:47.9318024Z 	5         9.89e+03 K  1.01e+04 K 0.211   0.201
2025-01-10T13:23:47.9318287Z 	10        9.82e+03 K     1e+04 K 0.143   0.129
2025-01-10T13:23:47.9318372Z 	15        9.75e+03 K  9.85e+03 K 0.105  0.0953
2025-01-10T13:23:47.9318492Z  ([1mbase.py[0m:650)
2025-01-10T13:23:47.9318661Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9318737Z 	
2025-01-10T13:23:47.9318830Z 	Current t_inner = 9974.969 K
2025-01-10T13:23:47.9318954Z 	Expected t_inner for next iteration = 10736.783 K
2025-01-10T13:23:47.9319066Z  ([1mbase.py[0m:652)
2025-01-10T13:23:47.9319231Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9319306Z 	
2025-01-10T13:23:47.9319458Z 	Starting iteration 2 of 5 ([1mbase.py[0m:444)
2025-01-10T13:23:47.9319624Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9319694Z 	
2025-01-10T13:23:47.9319793Z 	Luminosity emitted   = 1.084e+43 erg / s
2025-01-10T13:23:47.9319886Z 	Luminosity absorbed  = 3.624e+42 erg / s
2025-01-10T13:23:47.9319987Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9320239Z  ([1mbase.py[0m:657)
2025-01-10T13:23:47.9320406Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9320476Z 	
2025-01-10T13:23:47.9320630Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:23:47.9320788Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9320867Z 	
2025-01-10T13:23:47.9320979Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:23:47.9321068Z 	0         1.01e+04 K  1.05e+04 K  0.449   0.481
2025-01-10T13:23:47.9321158Z 	5         1.01e+04 K  1.06e+04 K  0.201   0.202
2025-01-10T13:23:47.9321246Z 	10           1e+04 K  1.04e+04 K  0.129   0.127
2025-01-10T13:23:47.9321336Z 	15        9.85e+03 K  1.02e+04 K 0.0953  0.0935
2025-01-10T13:23:47.9321441Z  ([1mbase.py[0m:650)
2025-01-10T13:23:47.9321609Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9321680Z 	
2025-01-10T13:23:47.9321773Z 	Current t_inner = 10736.783 K
2025-01-10T13:23:47.9321893Z 	Expected t_inner for next iteration = 10718.619 K
2025-01-10T13:23:47.9322008Z  ([1mbase.py[0m:652)
2025-01-10T13:23:47.9322172Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9322247Z 	
2025-01-10T13:23:47.9322399Z 	Starting iteration 3 of 5 ([1mbase.py[0m:444)
2025-01-10T13:23:47.9322565Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9322640Z 	
2025-01-10T13:23:47.9322734Z 	Luminosity emitted   = 1.086e+43 erg / s
2025-01-10T13:23:47.9322833Z 	Luminosity absorbed  = 3.514e+42 erg / s
2025-01-10T13:23:47.9322924Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9323309Z  ([1mbase.py[0m:657)
2025-01-10T13:23:47.9323498Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9323728Z 	Iteration converged 1/4 consecutive times. ([1mbase.py[0m:260)
2025-01-10T13:23:47.9323892Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9323989Z 	
2025-01-10T13:23:47.9324267Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:23:47.9324558Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9324632Z 	
2025-01-10T13:23:47.9324747Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:23:47.9324834Z 	0         1.05e+04 K  1.07e+04 K  0.481   0.491
2025-01-10T13:23:47.9324928Z 	5         1.06e+04 K  1.09e+04 K  0.202   0.198
2025-01-10T13:23:47.9325016Z 	10        1.04e+04 K  1.07e+04 K  0.127   0.124
2025-01-10T13:23:47.9325106Z 	15        1.02e+04 K  1.04e+04 K 0.0935  0.0921
2025-01-10T13:23:47.9325220Z  ([1mbase.py[0m:650)
2025-01-10T13:23:47.9325386Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9325465Z 	
2025-01-10T13:23:47.9325553Z 	Current t_inner = 10718.619 K
2025-01-10T13:23:47.9325677Z 	Expected t_inner for next iteration = 10696.651 K
2025-01-10T13:23:47.9325784Z  ([1mbase.py[0m:652)
2025-01-10T13:23:47.9325950Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9326170Z 	
2025-01-10T13:23:47.9326337Z 	Starting iteration 4 of 5 ([1mbase.py[0m:444)
2025-01-10T13:23:47.9326510Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9326585Z 	
2025-01-10T13:23:47.9326680Z 	Luminosity emitted   = 1.082e+43 erg / s
2025-01-10T13:23:47.9326777Z 	Luminosity absorbed  = 3.437e+42 erg / s
2025-01-10T13:23:47.9326870Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9326983Z  ([1mbase.py[0m:657)
2025-01-10T13:23:47.9327150Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9327368Z 	Iteration converged 2/4 consecutive times. ([1mbase.py[0m:260)
2025-01-10T13:23:47.9327533Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9327603Z 	
2025-01-10T13:23:47.9327756Z 	Plasma stratification: ([1mbase.py[0m:649)
2025-01-10T13:23:47.9327915Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9327990Z 	
2025-01-10T13:23:47.9328096Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:23:47.9328194Z 	0         1.07e+04 K  1.09e+04 K  0.491    0.49
2025-01-10T13:23:47.9328407Z 	5         1.09e+04 K   1.1e+04 K  0.198   0.193
2025-01-10T13:23:47.9328499Z 	10        1.07e+04 K  1.08e+04 K  0.124   0.122
2025-01-10T13:23:47.9328586Z 	15        1.04e+04 K  1.05e+04 K 0.0921  0.0902
2025-01-10T13:23:47.9328700Z  ([1mbase.py[0m:650)
2025-01-10T13:23:47.9328861Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9328937Z 	
2025-01-10T13:23:47.9329028Z 	Current t_inner = 10696.651 K
2025-01-10T13:23:47.9329145Z 	Expected t_inner for next iteration = 10684.004 K
2025-01-10T13:23:47.9329257Z  ([1mbase.py[0m:652)
2025-01-10T13:23:47.9329415Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9329493Z 	
2025-01-10T13:23:47.9329591Z 	Simulation finished in 4 iterations 
2025-01-10T13:23:47.9329680Z 	Simulation took 12.80 s
2025-01-10T13:23:47.9329787Z  ([1mbase.py[0m:542)
2025-01-10T13:23:47.9329950Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9330023Z 	
2025-01-10T13:23:47.9330182Z 	Starting iteration 5 of 5 ([1mbase.py[0m:444)
2025-01-10T13:23:47.9330342Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9330417Z 	
2025-01-10T13:23:47.9330509Z 	Luminosity emitted   = 1.074e+43 erg / s
2025-01-10T13:23:47.9330605Z 	Luminosity absorbed  = 3.447e+42 erg / s
2025-01-10T13:23:47.9330697Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9330806Z  ([1mbase.py[0m:657)
2025-01-10T13:23:47.9330973Z ---------------------------- Captured stderr setup -----------------------------
2025-01-10T13:23:47.9330978Z 
2025-01-10T13:23:47.9330982Z 
2025-01-10T13:23:47.9331235Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                [A
2025-01-10T13:23:47.9331241Z 
2025-01-10T13:23:47.9331462Z Packets:                                                                                   0/200000 [00:00<?, ?it/s][A
2025-01-10T13:23:47.9331471Z 
2025-01-10T13:23:47.9331730Z Packets:   ████▏                                                                           10539/200000 [00:00<00:01, 105380.30it/s][A
2025-01-10T13:23:47.9331746Z 
2025-01-10T13:23:47.9331989Z Packets:   ████████▌                                                                       21494/200000 [00:00<00:01, 107829.86it/s][A
2025-01-10T13:23:47.9331996Z 
2025-01-10T13:23:47.9332247Z Packets:   ████████████▉                                                                   32368/200000 [00:00<00:01, 108242.77it/s][A
2025-01-10T13:23:47.9332252Z 
2025-01-10T13:23:47.9332501Z Packets:   █████████████████▎                                                              43193/200000 [00:00<00:01, 108107.89it/s][A
2025-01-10T13:23:47.9332507Z 
2025-01-10T13:23:47.9332765Z Packets:   █████████████████████▋                                                          54197/200000 [00:00<00:01, 108800.43it/s][A
2025-01-10T13:23:47.9332770Z 
2025-01-10T13:23:47.9333338Z Packets:   ██████████████████████████                                                      65086/200000 [00:00<00:01, 108830.82it/s][A
2025-01-10T13:23:47.9333359Z 
2025-01-10T13:23:47.9333633Z Packets:   ██████████████████████████████▍                                                 76042/200000 [00:00<00:01, 109066.17it/s][A
2025-01-10T13:23:47.9333639Z 
2025-01-10T13:23:47.9333915Z Packets:   ██████████████████████████████████▊                                             86949/200000 [00:00<00:01, 108805.29it/s][A
2025-01-10T13:23:47.9333921Z 
2025-01-10T13:23:47.9334195Z Packets:   ███████████████████████████████████████▏                                        97941/200000 [00:00<00:00, 109152.10it/s][A
2025-01-10T13:23:47.9334201Z 
2025-01-10T13:23:47.9334497Z Packets:   ███████████████████████████████████████████▌                                    108857/200000 [00:01<00:00, 109002.64it/s][A
2025-01-10T13:23:47.9334502Z 
2025-01-10T13:23:47.9334796Z Packets:   ███████████████████████████████████████████████▉                                119758/200000 [00:01<00:00, 108707.15it/s][A
2025-01-10T13:23:47.9334943Z 
2025-01-10T13:23:47.9335248Z Packets:   ████████████████████████████████████████████████████▎                           130726/200000 [00:01<00:00, 109000.06it/s][A
2025-01-10T13:23:47.9335254Z 
2025-01-10T13:23:47.9335559Z Packets:   ████████████████████████████████████████████████████████▋                       141627/200000 [00:01<00:00, 108593.42it/s][A
2025-01-10T13:23:47.9335565Z 
2025-01-10T13:23:47.9335867Z Packets:   █████████████████████████████████████████████████████████████                   152614/200000 [00:01<00:00, 108976.41it/s][A
2025-01-10T13:23:47.9335879Z 
2025-01-10T13:23:47.9336184Z Packets:   █████████████████████████████████████████████████████████████████▍              163513/200000 [00:01<00:00, 108673.72it/s][A
2025-01-10T13:23:47.9336190Z 
2025-01-10T13:23:47.9336505Z Packets:   █████████████████████████████████████████████████████████████████████▊          174473/200000 [00:01<00:00, 108947.47it/s][A
2025-01-10T13:23:47.9336539Z 
2025-01-10T13:23:47.9336856Z Packets:   ██████████████████████████████████████████████████████████████████████████▏     185369/200000 [00:01<00:00, 108694.06it/s][A
2025-01-10T13:23:47.9336861Z 
2025-01-10T13:23:47.9337182Z Packets:   ██████████████████████████████████████████████████████████████████████████████▍ 196239/200000 [00:01<00:00, 108548.18it/s][A
2025-01-10T13:23:47.9337341Z Iterations:                                                                                13/? [05:54<00:00, 12.29s/it]
2025-01-10T13:23:47.9337347Z 
2025-01-10T13:23:47.9337683Z Packets:   ███████████████████████████████████████████████████████████████████████████████▉199999/200000 [00:01<00:00, 108548.18it/s][A
2025-01-10T13:23:47.9337689Z 
2025-01-10T13:23:47.9337926Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
2025-01-10T13:23:47.9337931Z 
2025-01-10T13:23:47.9338296Z Packets:   ████▎                                                                           10930/200000 [00:00<00:01, 109290.46it/s][A
2025-01-10T13:23:47.9338319Z 
2025-01-10T13:23:47.9338560Z Packets:   ████████▊                                                                       21959/200000 [00:00<00:01, 109874.92it/s][A
2025-01-10T13:23:47.9338566Z 
2025-01-10T13:23:47.9338814Z Packets:   █████████████▏                                                                  32947/200000 [00:00<00:01, 109668.36it/s][A
2025-01-10T13:23:47.9338819Z 
2025-01-10T13:23:47.9339067Z Packets:   █████████████████▌                                                              43914/200000 [00:00<00:01, 109656.26it/s][A
2025-01-10T13:23:47.9339073Z 
2025-01-10T13:23:47.9339328Z Packets:   █████████████████████▉                                                          54880/200000 [00:00<00:01, 109448.64it/s][A
2025-01-10T13:23:47.9339333Z 
2025-01-10T13:23:47.9339597Z Packets:   ██████████████████████████▎                                                     65825/200000 [00:00<00:01, 109235.59it/s][A
2025-01-10T13:23:47.9339695Z 
2025-01-10T13:23:47.9339962Z Packets:   ██████████████████████████████▋                                                 76794/200000 [00:00<00:01, 109382.61it/s][A
2025-01-10T13:23:47.9339967Z 
2025-01-10T13:23:47.9340242Z Packets:   ███████████████████████████████████                                             87733/200000 [00:00<00:01, 109243.62it/s][A
2025-01-10T13:23:47.9340248Z 
2025-01-10T13:23:47.9340522Z Packets:   ███████████████████████████████████████▍                                        98687/200000 [00:00<00:00, 109333.59it/s][A
2025-01-10T13:23:47.9340528Z 
2025-01-10T13:23:47.9340814Z Packets:   ███████████████████████████████████████████▊                                    109621/200000 [00:01<00:00, 106528.15it/s][A
2025-01-10T13:23:47.9340820Z 
2025-01-10T13:23:47.9341114Z Packets:   ████████████████████████████████████████████████                                120289/200000 [00:01<00:00, 106507.82it/s][A
2025-01-10T13:23:47.9341142Z 
2025-01-10T13:23:47.9341433Z Packets:   ████████████████████████████████████████████████████▍                           131187/200000 [00:01<00:00, 107245.55it/s][A
2025-01-10T13:23:47.9341440Z 
2025-01-10T13:23:47.9341739Z Packets:   ████████████████████████████████████████████████████████▉                       142189/200000 [00:01<00:00, 108076.20it/s][A
2025-01-10T13:23:47.9341744Z 
2025-01-10T13:23:47.9342048Z Packets:   █████████████████████████████████████████████████████████████▏                  153113/200000 [00:01<00:00, 108423.76it/s][A
2025-01-10T13:23:47.9342058Z 
2025-01-10T13:23:47.9342367Z Packets:   █████████████████████████████████████████████████████████████████▌              164040/200000 [00:01<00:00, 108677.59it/s][A
2025-01-10T13:23:47.9342373Z 
2025-01-10T13:23:47.9342689Z Packets:   █████████████████████████████████████████████████████████████████████▉          174989/200000 [00:01<00:00, 108920.96it/s][A
2025-01-10T13:23:47.9342786Z 
2025-01-10T13:23:47.9343425Z Packets:   ██████████████████████████████████████████████████████████████████████████▎     185936/200000 [00:01<00:00, 109082.82it/s][A
2025-01-10T13:23:47.9343435Z 
2025-01-10T13:23:47.9343768Z Packets:   ██████████████████████████████████████████████████████████████████████████████▋ 196873/200000 [00:01<00:00, 109168.53it/s][A
2025-01-10T13:23:47.9343923Z Iterations:                                                                                14/? [05:57<00:00,  9.54s/it]
2025-01-10T13:23:47.9343929Z 
2025-01-10T13:23:47.9344253Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 109168.53it/s][A
2025-01-10T13:23:47.9344259Z 
2025-01-10T13:23:47.9344506Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
2025-01-10T13:23:47.9344512Z 
2025-01-10T13:23:47.9344755Z Packets:   ████▍                                                                           10948/200000 [00:00<00:01, 109468.88it/s][A
2025-01-10T13:23:47.9344792Z 
2025-01-10T13:23:47.9345034Z Packets:   ████████▊                                                                       21933/200000 [00:00<00:01, 109689.89it/s][A
2025-01-10T13:23:47.9345039Z 
2025-01-10T13:23:47.9345291Z Packets:   █████████████▏                                                                  32905/200000 [00:00<00:01, 109701.90it/s][A
2025-01-10T13:23:47.9345297Z 
2025-01-10T13:23:47.9345545Z Packets:   █████████████████▌                                                              43876/200000 [00:00<00:01, 109586.31it/s][A
2025-01-10T13:23:47.9345550Z 
2025-01-10T13:23:47.9345811Z Packets:   █████████████████████▉                                                          54901/200000 [00:00<00:01, 109824.00it/s][A
2025-01-10T13:23:47.9345816Z 
2025-01-10T13:23:47.9346083Z Packets:   ██████████████████████████▎                                                     65884/200000 [00:00<00:01, 109740.45it/s][A
2025-01-10T13:23:47.9346104Z 
2025-01-10T13:23:47.9346368Z Packets:   ██████████████████████████████▊                                                 76921/200000 [00:00<00:01, 109944.93it/s][A
2025-01-10T13:23:47.9346374Z 
2025-01-10T13:23:47.9346652Z Packets:   ███████████████████████████████████▏                                            87957/200000 [00:00<00:01, 110075.77it/s][A
2025-01-10T13:23:47.9346657Z 
2025-01-10T13:23:47.9346934Z Packets:   ███████████████████████████████████████▌                                        98965/200000 [00:00<00:00, 109963.57it/s][A
2025-01-10T13:23:47.9346939Z 
2025-01-10T13:23:47.9347227Z Packets:   ████████████████████████████████████████████                                    110008/200000 [00:01<00:00, 110104.54it/s][A
2025-01-10T13:23:47.9347233Z 
2025-01-10T13:23:47.9347525Z Packets:   ████████████████████████████████████████████████▍                               121039/200000 [00:01<00:00, 110164.60it/s][A
2025-01-10T13:23:47.9347661Z 
2025-01-10T13:23:47.9348071Z Packets:   ████████████████████████████████████████████████████▊                           132067/200000 [00:01<00:00, 110197.64it/s][A
2025-01-10T13:23:47.9348077Z 
2025-01-10T13:23:47.9348379Z Packets:   █████████████████████████████████████████████████████████▏                      143087/200000 [00:01<00:00, 110111.81it/s][A
2025-01-10T13:23:47.9348385Z 
2025-01-10T13:23:47.9348686Z Packets:   █████████████████████████████████████████████████████████████▋                  154120/200000 [00:01<00:00, 110176.03it/s][A
2025-01-10T13:23:47.9348699Z 
2025-01-10T13:23:47.9349006Z Packets:   ██████████████████████████████████████████████████████████████████              165231/200000 [00:01<00:00, 110455.68it/s][A
2025-01-10T13:23:47.9349012Z 
2025-01-10T13:23:47.9349326Z Packets:   ██████████████████████████████████████████████████████████████████████▌         176277/200000 [00:01<00:00, 110428.02it/s][A
2025-01-10T13:23:47.9349348Z 
2025-01-10T13:23:47.9349806Z Packets:   ██████████████████████████████████████████████████████████████████████████▉     187334/200000 [00:01<00:00, 110467.56it/s][A
2025-01-10T13:23:47.9349840Z 
2025-01-10T13:23:47.9350288Z Packets:   ███████████████████████████████████████████████████████████████████████████████▎198381/200000 [00:01<00:00, 110468.24it/s][A
2025-01-10T13:23:47.9350443Z Iterations:                                                                                15/? [06:00<00:00,  7.62s/it]
2025-01-10T13:23:47.9350448Z 
2025-01-10T13:23:47.9350770Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 110468.24it/s][A
2025-01-10T13:23:47.9350776Z 
2025-01-10T13:23:47.9351014Z Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
2025-01-10T13:23:47.9351019Z 
2025-01-10T13:23:47.9351256Z Packets:   ████▍                                                                           11047/200000 [00:00<00:01, 108161.33it/s][A
2025-01-10T13:23:47.9351437Z 
2025-01-10T13:23:47.9351685Z Packets:   ████████▊                                                                       21901/200000 [00:00<00:01, 108379.03it/s][A
2025-01-10T13:23:47.9351691Z 
2025-01-10T13:23:47.9351941Z Packets:   █████████████                                                                   32807/200000 [00:00<00:01, 108687.84it/s][A
2025-01-10T13:23:47.9351947Z 
2025-01-10T13:23:47.9352198Z Packets:   █████████████████▍                                                              43677/200000 [00:00<00:01, 108447.37it/s][A
2025-01-10T13:23:47.9352204Z 
2025-01-10T13:23:47.9352461Z Packets:   █████████████████████▊                                                          54586/200000 [00:00<00:01, 108677.82it/s][A
2025-01-10T13:23:47.9352467Z 
2025-01-10T13:23:47.9352731Z Packets:   ██████████████████████████▏                                                     65454/200000 [00:00<00:01, 108529.36it/s][A
2025-01-10T13:23:47.9352828Z 
2025-01-10T13:23:47.9353321Z Packets:   ██████████████████████████████▌                                                 76308/200000 [00:00<00:01, 108389.33it/s][A
2025-01-10T13:23:47.9353333Z 
2025-01-10T13:23:47.9353624Z Packets:   ██████████████████████████████████▊                                             87148/200000 [00:00<00:01, 108215.71it/s][A
2025-01-10T13:23:47.9353630Z 
2025-01-10T13:23:47.9353906Z Packets:   ███████████████████████████████████████▏                                        97970/200000 [00:00<00:00, 106076.14it/s][A
2025-01-10T13:23:47.9353911Z 
2025-01-10T13:23:47.9354201Z Packets:   ███████████████████████████████████████████▍                                    108738/200000 [00:01<00:00, 106560.29it/s][A
2025-01-10T13:23:47.9354206Z 
2025-01-10T13:23:47.9354500Z Packets:   ███████████████████████████████████████████████▊                                119423/200000 [00:01<00:00, 106647.01it/s][A
2025-01-10T13:23:47.9354519Z 
2025-01-10T13:23:47.9354810Z Packets:   ████████████████████████████████████████████████████                            130196/200000 [00:01<00:00, 106971.89it/s][A
2025-01-10T13:23:47.9354826Z 
2025-01-10T13:23:47.9355126Z Packets:   ████████████████████████████████████████████████████████▍                       141021/200000 [00:01<00:00, 107356.41it/s][A
2025-01-10T13:23:47.9355131Z 
2025-01-10T13:23:47.9355429Z Packets:   ████████████████████████████████████████████████████████████▊                   151944/200000 [00:01<00:00, 107919.60it/s][A
2025-01-10T13:23:47.9355439Z 
2025-01-10T13:23:47.9355742Z Packets:   █████████████████████████████████████████████████████████████████▏              162857/200000 [00:01<00:00, 108282.28it/s][A
2025-01-10T13:23:47.9355748Z 
2025-01-10T13:23:47.9356075Z Packets:   █████████████████████████████████████████████████████████████████████▌          173790/200000 [00:01<00:00, 108594.45it/s][A
2025-01-10T13:23:47.9356081Z 
2025-01-10T13:23:47.9356540Z Packets:   █████████████████████████████████████████████████████████████████████████▊      184651/200000 [00:01<00:00, 108536.98it/s][A
2025-01-10T13:23:47.9356562Z 
2025-01-10T13:23:47.9356885Z Packets:   ██████████████████████████████████████████████████████████████████████████████▏ 195506/200000 [00:01<00:00, 108498.84it/s][A
2025-01-10T13:23:47.9357038Z Iterations:                                                                                16/? [06:03<00:00,  6.30s/it]
2025-01-10T13:23:47.9357043Z 
2025-01-10T13:23:47.9357370Z Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 108498.84it/s][A
2025-01-10T13:23:47.9357376Z 
2025-01-10T13:23:47.9357613Z Packets:                                                                                   0/500000 [00:00<?, ?it/s]                 [A
2025-01-10T13:23:47.9357618Z 
2025-01-10T13:23:47.9357853Z Packets:   █▋                                                                              10851/500000 [00:00<00:13, 35330.41it/s][A
2025-01-10T13:23:47.9357995Z 
2025-01-10T13:23:47.9358232Z Packets:   ██▎                                                                             14385/500000 [00:00<00:13, 35109.31it/s][A
2025-01-10T13:23:47.9358238Z 
2025-01-10T13:23:47.9358470Z Packets:   ██▊                                                                             17878/500000 [00:00<00:14, 33984.22it/s][A
2025-01-10T13:23:47.9358476Z 
2025-01-10T13:23:47.9358706Z Packets:   ███▍                                                                            21351/500000 [00:00<00:13, 34205.24it/s][A
2025-01-10T13:23:47.9358711Z 
2025-01-10T13:23:47.9358945Z Packets:   ███▉                                                                            24821/500000 [00:00<00:13, 34353.39it/s][A
2025-01-10T13:23:47.9358951Z 
2025-01-10T13:23:47.9359188Z Packets:   ████▌                                                                           28260/500000 [00:00<00:13, 34361.98it/s][A
2025-01-10T13:23:47.9359201Z 
2025-01-10T13:23:47.9359432Z Packets:   █████                                                                           31713/500000 [00:00<00:13, 34410.49it/s][A
2025-01-10T13:23:47.9359444Z 
2025-01-10T13:23:47.9359683Z Packets:   █████▋                                                                          35167/500000 [00:01<00:13, 34448.07it/s][A
2025-01-10T13:23:47.9359689Z 
2025-01-10T13:23:47.9359922Z Packets:   ██████▏                                                                         38615/500000 [00:01<00:13, 34456.50it/s][A
2025-01-10T13:23:47.9359927Z 
2025-01-10T13:23:47.9360163Z Packets:   ██████▋                                                                         42074/500000 [00:01<00:13, 34492.94it/s][A
2025-01-10T13:23:47.9360168Z 
2025-01-10T13:23:47.9360406Z Packets:   ███████▎                                                                        45590/500000 [00:01<00:13, 34691.33it/s][A
2025-01-10T13:23:47.9360412Z 
2025-01-10T13:23:47.9360751Z Packets:   ███████▊                                                                        49083/500000 [00:01<00:12, 34762.34it/s][A
2025-01-10T13:23:47.9360764Z 
2025-01-10T13:23:47.9361006Z Packets:   ████████▍                                                                       52559/500000 [00:01<00:12, 34751.73it/s][A
2025-01-10T13:23:47.9361011Z 
2025-01-10T13:23:47.9361247Z Packets:   ████████▉                                                                       56034/500000 [00:01<00:13, 33361.12it/s][A
2025-01-10T13:23:47.9361257Z 
2025-01-10T13:23:47.9361494Z Packets:   █████████▌                                                                      59487/500000 [00:01<00:13, 33699.42it/s][A
2025-01-10T13:23:47.9361500Z 
2025-01-10T13:23:47.9361737Z Packets:   ██████████                                                                      62931/500000 [00:01<00:12, 33916.91it/s][A
2025-01-10T13:23:47.9361743Z 
2025-01-10T13:23:47.9361980Z Packets:   ██████████▋                                                                     66414/500000 [00:01<00:12, 34184.40it/s][A
2025-01-10T13:23:47.9362075Z 
2025-01-10T13:23:47.9362322Z Packets:   ███████████▏                                                                    69838/500000 [00:02<00:12, 34046.28it/s][A
2025-01-10T13:23:47.9362328Z 
2025-01-10T13:23:47.9362575Z Packets:   ███████████▋                                                                    73268/500000 [00:02<00:12, 34117.98it/s][A
2025-01-10T13:23:47.9362580Z 
2025-01-10T13:23:47.9362821Z Packets:   ████████████▎                                                                   76726/500000 [00:02<00:12, 34254.01it/s][A
2025-01-10T13:23:47.9362826Z 
2025-01-10T13:23:47.9363273Z Packets:   ████████████▊                                                                   80154/500000 [00:02<00:12, 34190.71it/s][A
2025-01-10T13:23:47.9363285Z 
2025-01-10T13:23:47.9363555Z Packets:   █████████████▍                                                                  83603/500000 [00:02<00:12, 34274.96it/s][A
2025-01-10T13:23:47.9363576Z 
2025-01-10T13:23:47.9363831Z Packets:   █████████████▉                                                                  87032/500000 [00:02<00:12, 34234.35it/s][A
2025-01-10T13:23:47.9363837Z 
2025-01-10T13:23:47.9364089Z Packets:   ██████████████▍                                                                 90457/500000 [00:02<00:12, 32955.41it/s][A
2025-01-10T13:23:47.9364094Z 
2025-01-10T13:23:47.9364338Z Packets:   ███████████████                                                                 93899/500000 [00:02<00:12, 33377.24it/s][A
2025-01-10T13:23:47.9364343Z 
2025-01-10T13:23:47.9364592Z Packets:   ███████████████▌                                                                97260/500000 [00:02<00:12, 33445.20it/s][A
2025-01-10T13:23:47.9364597Z 
2025-01-10T13:23:47.9364851Z Packets:   ████████████████                                                                100650/500000 [00:02<00:11, 33579.32it/s][A
2025-01-10T13:23:47.9364866Z 
2025-01-10T13:23:47.9365114Z Packets:   ████████████████▋                                                               104104/500000 [00:03<00:11, 33863.50it/s][A
2025-01-10T13:23:47.9365128Z 
2025-01-10T13:23:47.9365381Z Packets:   █████████████████▏                                                              107595/500000 [00:03<00:11, 34174.48it/s][A
2025-01-10T13:23:47.9365387Z 
2025-01-10T13:23:47.9365635Z Packets:   █████████████████▊                                                              111028/500000 [00:03<00:11, 34220.11it/s][A
2025-01-10T13:23:47.9365645Z 
2025-01-10T13:23:47.9365895Z Packets:   ██████████████████▎                                                             114518/500000 [00:03<00:11, 34422.38it/s][A
2025-01-10T13:23:47.9365901Z 
2025-01-10T13:23:47.9366155Z Packets:   ██████████████████▊                                                             117962/500000 [00:03<00:11, 34350.34it/s][A
2025-01-10T13:23:47.9366161Z 
2025-01-10T13:23:47.9366414Z Packets:   ███████████████████▍                                                            121399/500000 [00:03<00:11, 34321.36it/s][A
2025-01-10T13:23:47.9366564Z 
2025-01-10T13:23:47.9366829Z Packets:   ███████████████████▉                                                            124832/500000 [00:03<00:11, 33017.58it/s][A
2025-01-10T13:23:47.9366835Z 
2025-01-10T13:23:47.9367090Z Packets:   ████████████████████▌                                                           128302/500000 [00:03<00:11, 33506.98it/s][A
2025-01-10T13:23:47.9367095Z 
2025-01-10T13:23:47.9367346Z Packets:   █████████████████████                                                           131755/500000 [00:03<00:10, 33799.64it/s][A
2025-01-10T13:23:47.9367351Z 
2025-01-10T13:23:47.9367609Z Packets:   █████████████████████▌                                                          135142/500000 [00:03<00:10, 33562.02it/s][A
2025-01-10T13:23:47.9367615Z 
2025-01-10T13:23:47.9367870Z Packets:   ██████████████████████▏                                                         138613/500000 [00:04<00:10, 33900.24it/s][A
2025-01-10T13:23:47.9368001Z 
2025-01-10T13:23:47.9368264Z Packets:   ██████████████████████▋                                                         142096/500000 [00:04<00:10, 34175.65it/s][A
2025-01-10T13:23:47.9368270Z 
2025-01-10T13:23:47.9368527Z Packets:   ███████████████████████▎                                                        145529/500000 [00:04<00:10, 34220.42it/s][A
2025-01-10T13:23:47.9368532Z 
2025-01-10T13:23:47.9368801Z Packets:   ███████████████████████▊                                                        149048/500000 [00:04<00:10, 34504.27it/s][A
2025-01-10T13:23:47.9368807Z 
2025-01-10T13:23:47.9369072Z Packets:   ████████████████████████▍                                                       152506/500000 [00:04<00:10, 34519.78it/s][A
2025-01-10T13:23:47.9369078Z 
2025-01-10T13:23:47.9369337Z Packets:   ████████████████████████▉                                                       155988/500000 [00:04<00:09, 34609.27it/s][A
2025-01-10T13:23:47.9369353Z 
2025-01-10T13:23:47.9369629Z Packets:   █████████████████████████▌                                                      159450/500000 [00:04<00:10, 33381.51it/s][A
2025-01-10T13:23:47.9369635Z 
2025-01-10T13:23:47.9369894Z Packets:   ██████████████████████████                                                      162917/500000 [00:04<00:09, 33748.77it/s][A
2025-01-10T13:23:47.9369901Z 
2025-01-10T13:23:47.9370172Z Packets:   ██████████████████████████▌                                                     166360/500000 [00:04<00:09, 33948.90it/s][A
2025-01-10T13:23:47.9370177Z 
2025-01-10T13:23:47.9370445Z Packets:   ███████████████████████████▏                                                    169924/500000 [00:04<00:09, 34448.94it/s][A
2025-01-10T13:23:47.9370451Z 
2025-01-10T13:23:47.9370710Z Packets:   ███████████████████████████▋                                                    173420/500000 [00:05<00:09, 34600.34it/s][A
2025-01-10T13:23:47.9371104Z 
2025-01-10T13:23:47.9371379Z Packets:   ████████████████████████████▎                                                   176940/500000 [00:05<00:09, 34775.70it/s][A
2025-01-10T13:23:47.9371393Z 
2025-01-10T13:23:47.9371656Z Packets:   ████████████████████████████▊                                                   180421/500000 [00:05<00:09, 34747.88it/s][A
2025-01-10T13:23:47.9371667Z 
2025-01-10T13:23:47.9371935Z Packets:   █████████████████████████████▍                                                  183914/500000 [00:05<00:09, 34800.57it/s][A
2025-01-10T13:23:47.9371941Z 
2025-01-10T13:23:47.9372210Z Packets:   █████████████████████████████▉                                                  187401/500000 [00:05<00:08, 34820.28it/s][A
2025-01-10T13:23:47.9372215Z 
2025-01-10T13:23:47.9372480Z Packets:   ██████████████████████████████▌                                                 190901/500000 [00:05<00:08, 34871.63it/s][A
2025-01-10T13:23:47.9372486Z 
2025-01-10T13:23:47.9372768Z Packets:   ███████████████████████████████                                                 194389/500000 [00:05<00:09, 33363.78it/s][A
2025-01-10T13:23:47.9372870Z 
2025-01-10T13:23:47.9373492Z Packets:   ███████████████████████████████▋                                                197876/500000 [00:05<00:08, 33800.13it/s][A
2025-01-10T13:23:47.9373502Z 
2025-01-10T13:23:47.9373783Z Packets:   ████████████████████████████████▏                                               201355/500000 [00:05<00:08, 34090.26it/s][A
2025-01-10T13:23:47.9373788Z 
2025-01-10T13:23:47.9374065Z Packets:   ████████████████████████████████▊                                               204850/500000 [00:05<00:08, 34340.78it/s][A
2025-01-10T13:23:47.9374070Z 
2025-01-10T13:23:47.9374341Z Packets:   █████████████████████████████████▎                                              208369/500000 [00:06<00:08, 34589.23it/s][A
2025-01-10T13:23:47.9374352Z 
2025-01-10T13:23:47.9374623Z Packets:   █████████████████████████████████▉                                              211841/500000 [00:06<00:08, 34628.04it/s][A
2025-01-10T13:23:47.9374652Z 
2025-01-10T13:23:47.9375107Z Packets:   ██████████████████████████████████▍                                             215308/500000 [00:06<00:08, 34602.54it/s][A
2025-01-10T13:23:47.9375118Z 
2025-01-10T13:23:47.9375499Z Packets:   ███████████████████████████████████                                             218834/500000 [00:06<00:08, 34797.28it/s][A
2025-01-10T13:23:47.9375506Z 
2025-01-10T13:23:47.9375783Z Packets:   ███████████████████████████████████▌                                            222316/500000 [00:06<00:07, 34772.73it/s][A
2025-01-10T13:23:47.9375788Z 
2025-01-10T13:23:47.9376066Z Packets:   ████████████████████████████████████▏                                           225797/500000 [00:06<00:07, 34782.69it/s][A
2025-01-10T13:23:47.9376071Z 
2025-01-10T13:23:47.9376348Z Packets:   ████████████████████████████████████▋                                           229277/500000 [00:06<00:08, 33377.50it/s][A
2025-01-10T13:23:47.9376508Z 
2025-01-10T13:23:47.9376808Z Packets:   █████████████████████████████████████▏                                          232797/500000 [00:06<00:07, 33906.92it/s][A
2025-01-10T13:23:47.9376814Z 
2025-01-10T13:23:47.9377088Z Packets:   █████████████████████████████████████▊                                          236318/500000 [00:06<00:07, 34288.39it/s][A
2025-01-10T13:23:47.9377100Z 
2025-01-10T13:23:47.9377380Z Packets:   ██████████████████████████████████████▎                                         239803/500000 [00:07<00:07, 34446.58it/s][A
2025-01-10T13:23:47.9377385Z 
2025-01-10T13:23:47.9377665Z Packets:   ██████████████████████████████████████▉                                         243278/500000 [00:07<00:07, 34535.81it/s][A
2025-01-10T13:23:47.9377670Z 
2025-01-10T13:23:47.9377947Z Packets:   ███████████████████████████████████████▍                                        246736/500000 [00:07<00:07, 34540.05it/s][A
2025-01-10T13:23:47.9377964Z 
2025-01-10T13:23:47.9378246Z Packets:   ████████████████████████████████████████                                        250194/500000 [00:07<00:07, 34551.68it/s][A
2025-01-10T13:23:47.9378365Z 
2025-01-10T13:23:47.9378655Z Packets:   ████████████████████████████████████████▌                                       253652/500000 [00:07<00:07, 34526.68it/s][A
2025-01-10T13:23:47.9378661Z 
2025-01-10T13:23:47.9378941Z Packets:   █████████████████████████████████████████▏                                      257165/500000 [00:07<00:06, 34705.29it/s][A
2025-01-10T13:23:47.9378947Z 
2025-01-10T13:23:47.9379230Z Packets:   █████████████████████████████████████████▋                                      260702/500000 [00:07<00:06, 34903.14it/s][A
2025-01-10T13:23:47.9379235Z 
2025-01-10T13:23:47.9379512Z Packets:   ██████████████████████████████████████████▎                                     264194/500000 [00:07<00:07, 33414.24it/s][A
2025-01-10T13:23:47.9379525Z 
2025-01-10T13:23:47.9379805Z Packets:   ██████████████████████████████████████████▊                                     267709/500000 [00:07<00:06, 33918.33it/s][A
2025-01-10T13:23:47.9379833Z 
2025-01-10T13:23:47.9380121Z Packets:   ███████████████████████████████████████████▍                                    271179/500000 [00:07<00:06, 34146.69it/s][A
2025-01-10T13:23:47.9380126Z 
2025-01-10T13:23:47.9380407Z Packets:   ███████████████████████████████████████████▉                                    274603/500000 [00:08<00:06, 34153.28it/s][A
2025-01-10T13:23:47.9380413Z 
2025-01-10T13:23:47.9380701Z Packets:   ████████████████████████████████████████████▍                                   278025/500000 [00:08<00:06, 34128.49it/s][A
2025-01-10T13:23:47.9380706Z 
2025-01-10T13:23:47.9380998Z Packets:   █████████████████████████████████████████████                                   281545/500000 [00:08<00:06, 34445.33it/s][A
2025-01-10T13:23:47.9381004Z 
2025-01-10T13:23:47.9381288Z Packets:   █████████████████████████████████████████████▌                                  285051/500000 [00:08<00:06, 34628.13it/s][A
2025-01-10T13:23:47.9381416Z 
2025-01-10T13:23:47.9381710Z Packets:   ██████████████████████████████████████████████▏                                 288565/500000 [00:08<00:06, 34779.48it/s][A
2025-01-10T13:23:47.9381716Z 
2025-01-10T13:23:47.9382000Z Packets:   ██████████████████████████████████████████████▋                                 292045/500000 [00:08<00:05, 34752.97it/s][A
2025-01-10T13:23:47.9382006Z 
2025-01-10T13:23:47.9382296Z Packets:   ███████████████████████████████████████████████▎                                295522/500000 [00:08<00:05, 34602.11it/s][A
2025-01-10T13:23:47.9382302Z 
2025-01-10T13:23:47.9382589Z Packets:   ███████████████████████████████████████████████▊                                298984/500000 [00:08<00:06, 33345.33it/s][A
2025-01-10T13:23:47.9382595Z 
2025-01-10T13:23:47.9382882Z Packets:   ████████████████████████████████████████████████▍                               302502/500000 [00:08<00:05, 33878.33it/s][A
2025-01-10T13:23:47.9382900Z 
2025-01-10T13:23:47.9383479Z Packets:   ████████████████████████████████████████████████▉                               306066/500000 [00:08<00:05, 34395.41it/s][A
2025-01-10T13:23:47.9383487Z 
2025-01-10T13:23:47.9383775Z Packets:   █████████████████████████████████████████████████▌                              309561/500000 [00:09<00:05, 34557.90it/s][A
2025-01-10T13:23:47.9383786Z 
2025-01-10T13:23:47.9384075Z Packets:   ██████████████████████████████████████████████████                              313033/500000 [00:09<00:05, 34605.89it/s][A
2025-01-10T13:23:47.9384080Z 
2025-01-10T13:23:47.9384376Z Packets:   ██████████████████████████████████████████████████▋                             316564/500000 [00:09<00:05, 34806.93it/s][A
2025-01-10T13:23:47.9384382Z 
2025-01-10T13:23:47.9384671Z Packets:   ███████████████████████████████████████████████████▏                            320048/500000 [00:09<00:05, 34697.74it/s][A
2025-01-10T13:23:47.9384692Z 
2025-01-10T13:23:47.9384984Z Packets:   ███████████████████████████████████████████████████▊                            323578/500000 [00:09<00:05, 34874.58it/s][A
2025-01-10T13:23:47.9385001Z 
2025-01-10T13:23:47.9385302Z Packets:   ████████████████████████████████████████████████████▎                           327067/500000 [00:09<00:04, 34829.93it/s][A
2025-01-10T13:23:47.9385307Z 
2025-01-10T13:23:47.9385606Z Packets:   ████████████████████████████████████████████████████▉                           330565/500000 [00:09<00:04, 34867.98it/s][A
2025-01-10T13:23:47.9385612Z 
2025-01-10T13:23:47.9385912Z Packets:   █████████████████████████████████████████████████████▍                          334095/500000 [00:09<00:04, 34994.04it/s][A
2025-01-10T13:23:47.9385917Z 
2025-01-10T13:23:47.9386210Z Packets:   ██████████████████████████████████████████████████████                          337595/500000 [00:09<00:04, 33381.04it/s][A
2025-01-10T13:23:47.9386223Z 
2025-01-10T13:23:47.9386520Z Packets:   ██████████████████████████████████████████████████████▌                         341112/500000 [00:09<00:04, 33897.69it/s][A
2025-01-10T13:23:47.9386782Z 
2025-01-10T13:23:47.9387089Z Packets:   ███████████████████████████████████████████████████████▏                        344647/500000 [00:10<00:04, 34321.47it/s][A
2025-01-10T13:23:47.9387095Z 
2025-01-10T13:23:47.9387386Z Packets:   ███████████████████████████████████████████████████████▋                        348150/500000 [00:10<00:04, 34524.74it/s][A
2025-01-10T13:23:47.9387391Z 
2025-01-10T13:23:47.9387688Z Packets:   ████████████████████████████████████████████████████████▎                       351626/500000 [00:10<00:04, 34593.62it/s][A
2025-01-10T13:23:47.9387693Z 
2025-01-10T13:23:47.9387990Z Packets:   ████████████████████████████████████████████████████████▊                       355158/500000 [00:10<00:04, 34807.90it/s][A
2025-01-10T13:23:47.9387996Z 
2025-01-10T13:23:47.9388292Z Packets:   █████████████████████████████████████████████████████████▍                      358687/500000 [00:10<00:04, 34950.67it/s][A
2025-01-10T13:23:47.9388324Z 
2025-01-10T13:23:47.9388622Z Packets:   █████████████████████████████████████████████████████████▉                      362185/500000 [00:10<00:03, 34894.93it/s][A
2025-01-10T13:23:47.9388628Z 
2025-01-10T13:23:47.9388926Z Packets:   ██████████████████████████████████████████████████████████▌                     365677/500000 [00:10<00:03, 34756.45it/s][A
2025-01-10T13:23:47.9388938Z 
2025-01-10T13:23:47.9389236Z Packets:   ███████████████████████████████████████████████████████████                     369214/500000 [00:10<00:03, 34935.36it/s][A
2025-01-10T13:23:47.9389242Z 
2025-01-10T13:23:47.9389546Z Packets:   ███████████████████████████████████████████████████████████▋                    372709/500000 [00:10<00:03, 32985.69it/s][A
2025-01-10T13:23:47.9389551Z 
2025-01-10T13:23:47.9389852Z Packets:   ████████████████████████████████████████████████████████████▏                   376190/500000 [00:10<00:03, 33509.55it/s][A
2025-01-10T13:23:47.9389950Z 
2025-01-10T13:23:47.9390272Z Packets:   ████████████████████████████████████████████████████████████▋                   379635/500000 [00:11<00:03, 33782.35it/s][A
2025-01-10T13:23:47.9390278Z 
2025-01-10T13:23:47.9390582Z Packets:   █████████████████████████████████████████████████████████████▎                  383109/500000 [00:11<00:03, 34057.80it/s][A
2025-01-10T13:23:47.9390587Z 
2025-01-10T13:23:47.9390888Z Packets:   █████████████████████████████████████████████████████████████▊                  386569/500000 [00:11<00:03, 34216.48it/s][A
2025-01-10T13:23:47.9390894Z 
2025-01-10T13:23:47.9391202Z Packets:   ██████████████████████████████████████████████████████████████▍                 390056/500000 [00:11<00:03, 34409.74it/s][A
2025-01-10T13:23:47.9391207Z 
2025-01-10T13:23:47.9391510Z Packets:   ██████████████████████████████████████████████████████████████▉                 393542/500000 [00:11<00:03, 34543.34it/s][A
2025-01-10T13:23:47.9391536Z 
2025-01-10T13:23:47.9391835Z Packets:   ███████████████████████████████████████████████████████████████▌                397052/500000 [00:11<00:02, 34708.50it/s][A
2025-01-10T13:23:47.9391925Z 
2025-01-10T13:23:47.9392235Z Packets:   ████████████████████████████████████████████████████████████████                400531/500000 [00:11<00:02, 34732.40it/s][A
2025-01-10T13:23:47.9392240Z 
2025-01-10T13:23:47.9392542Z Packets:   ████████████████████████████████████████████████████████████████▋               404007/500000 [00:11<00:02, 34703.43it/s][A
2025-01-10T13:23:47.9392548Z 
2025-01-10T13:23:47.9392855Z Packets:   █████████████████████████████████████████████████████████████████▏              407479/500000 [00:11<00:02, 33116.97it/s][A
2025-01-10T13:23:47.9392860Z 
2025-01-10T13:23:47.9393320Z Packets:   █████████████████████████████████████████████████████████████████▊              410984/500000 [00:11<00:02, 33664.80it/s][A
2025-01-10T13:23:47.9393328Z 
2025-01-10T13:23:47.9393636Z Packets:   ██████████████████████████████████████████████████████████████████▎             414453/500000 [00:12<00:02, 33962.55it/s][A
2025-01-10T13:23:47.9393672Z 
2025-01-10T13:23:47.9393981Z Packets:   ██████████████████████████████████████████████████████████████████▊             417940/500000 [00:12<00:02, 34227.91it/s][A
2025-01-10T13:23:47.9393987Z 
2025-01-10T13:23:47.9394293Z Packets:   ███████████████████████████████████████████████████████████████████▍            421456/500000 [00:12<00:02, 34502.32it/s][A
2025-01-10T13:23:47.9394298Z 
2025-01-10T13:23:47.9394610Z Packets:   ███████████████████████████████████████████████████████████████████▉            424982/500000 [00:12<00:02, 34727.15it/s][A
2025-01-10T13:23:47.9394616Z 
2025-01-10T13:23:47.9394929Z Packets:   ████████████████████████████████████████████████████████████████████▌           428459/500000 [00:12<00:02, 34671.17it/s][A
2025-01-10T13:23:47.9394934Z 
2025-01-10T13:23:47.9395239Z Packets:   █████████████████████████████████████████████████████████████████████           431929/500000 [00:12<00:01, 34604.37it/s][A
2025-01-10T13:23:47.9395498Z 
2025-01-10T13:23:47.9395819Z Packets:   █████████████████████████████████████████████████████████████████████▋          435424/500000 [00:12<00:01, 34703.35it/s][A
2025-01-10T13:23:47.9395825Z 
2025-01-10T13:23:47.9396137Z Packets:   ██████████████████████████████████████████████████████████████████████▏         438896/500000 [00:12<00:01, 34542.88it/s][A
2025-01-10T13:23:47.9396148Z 
2025-01-10T13:23:47.9396459Z Packets:   ██████████████████████████████████████████████████████████████████████▊         442352/500000 [00:12<00:01, 33192.53it/s][A
2025-01-10T13:23:47.9396465Z 
2025-01-10T13:23:47.9396784Z Packets:   ███████████████████████████████████████████████████████████████████████▎        445777/500000 [00:13<00:01, 33499.52it/s][A
2025-01-10T13:23:47.9396790Z 
2025-01-10T13:23:47.9397098Z Packets:   ███████████████████████████████████████████████████████████████████████▊        449192/500000 [00:13<00:01, 33688.47it/s][A
2025-01-10T13:23:47.9397120Z 
2025-01-10T13:23:47.9397454Z Packets:   ████████████████████████████████████████████████████████████████████████▍       452695/500000 [00:13<00:01, 34081.54it/s][A
2025-01-10T13:23:47.9397460Z 
2025-01-10T13:23:47.9397780Z Packets:   ████████████████████████████████████████████████████████████████████████▉       456243/500000 [00:13<00:01, 34494.64it/s][A
2025-01-10T13:23:47.9397786Z 
2025-01-10T13:23:47.9398098Z Packets:   █████████████████████████████████████████████████████████████████████████▌      459752/500000 [00:13<00:01, 34669.35it/s][A
2025-01-10T13:23:47.9398104Z 
2025-01-10T13:23:47.9398421Z Packets:   ██████████████████████████████████████████████████████████████████████████      463223/500000 [00:13<00:01, 34663.73it/s][A
2025-01-10T13:23:47.9398427Z 
2025-01-10T13:23:47.9398738Z Packets:   ██████████████████████████████████████████████████████████████████████████▋     466764/500000 [00:13<00:00, 34882.29it/s][A
2025-01-10T13:23:47.9398861Z 
2025-01-10T13:23:47.9399184Z Packets:   ███████████████████████████████████████████████████████████████████████████▏    470276/500000 [00:13<00:00, 34943.32it/s][A
2025-01-10T13:23:47.9399204Z 
2025-01-10T13:23:47.9399525Z Packets:   ███████████████████████████████████████████████████████████████████████████▊    473772/500000 [00:13<00:00, 34805.77it/s][A
2025-01-10T13:23:47.9399531Z 
2025-01-10T13:23:47.9399850Z Packets:   ████████████████████████████████████████████████████████████████████████████▎   477254/500000 [00:13<00:00, 33177.91it/s][A
2025-01-10T13:23:47.9399855Z 
2025-01-10T13:23:47.9400380Z Packets:   ████████████████████████████████████████████████████████████████████████████▉   480738/500000 [00:14<00:00, 33657.96it/s][A
2025-01-10T13:23:47.9400391Z 
2025-01-10T13:23:47.9400794Z Packets:   █████████████████████████████████████████████████████████████████████████████▍  484230/500000 [00:14<00:00, 34023.62it/s][A
2025-01-10T13:23:47.9400801Z 
2025-01-10T13:23:47.9401115Z Packets:   ██████████████████████████████████████████████████████████████████████████████  487684/500000 [00:14<00:00, 34173.66it/s][A
2025-01-10T13:23:47.9401246Z 
2025-01-10T13:23:47.9401572Z Packets:   ██████████████████████████████████████████████████████████████████████████████▌ 491187/500000 [00:14<00:00, 34427.14it/s][A
2025-01-10T13:23:47.9401578Z 
2025-01-10T13:23:47.9401942Z Packets:   ███████████████████████████████████████████████████████████████████████████████▏494729/500000 [00:14<00:00, 34720.14it/s][A
2025-01-10T13:23:47.9401954Z 
2025-01-10T13:23:47.9402270Z Packets:   ███████████████████████████████████████████████████████████████████████████████▋498228/500000 [00:14<00:00, 34798.99it/s][A
2025-01-10T13:23:47.9402427Z Iterations:                                                                                17/? [06:20<00:00,  9.40s/it]
2025-01-10T13:23:47.9402433Z 
2025-01-10T13:23:47.9402750Z Packets:   ████████████████████████████████████████████████████████████████████████████████500000/500000 [00:15<00:00, 34798.99it/s][A
2025-01-10T13:23:47.9403157Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9403406Z INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
2025-01-10T13:23:47.9403766Z 	Reading Atomic Data from /home/runner/work/tardis/tardis/tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
2025-01-10T13:23:47.9404146Z INFO     tardis.io.atom_data.base:base.py:258 Reading Atom Data with: UUID = 6f7b09e887a311e7a06b246e96350010 MD5  = 864f1753714343c41f99cb065710cace 
2025-01-10T13:23:47.9404583Z INFO     tardis.io.atom_data.base:base.py:262 Non provided Atomic Data: synpp_refs, photoionization_data, yg_data, two_photon_data, linelist_atoms, linelist_molecules
2025-01-10T13:23:47.9405086Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:23:47.9405311Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:23:47.9405582Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:23:47.9405679Z 	Starting iteration 1 of 5
2025-01-10T13:23:47.9405796Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:23:47.9405895Z 	Luminosity emitted   = 8.104e+42 erg / s
2025-01-10T13:23:47.9405995Z 	Luminosity absorbed  = 2.674e+42 erg / s
2025-01-10T13:23:47.9406088Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9406098Z 
2025-01-10T13:23:47.9406204Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:23:47.9406298Z 	Plasma stratification:
2025-01-10T13:23:47.9406404Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:23:47.9406520Z 	Shell No.    t_rad    next_t_rad    w   next_w
2025-01-10T13:23:47.9406609Z 	0         9.97e+03 K  1.01e+04 K   0.4   0.449
2025-01-10T13:23:47.9406701Z 	5         9.89e+03 K  1.01e+04 K 0.211   0.201
2025-01-10T13:23:47.9406789Z 	10        9.82e+03 K     1e+04 K 0.143   0.129
2025-01-10T13:23:47.9406884Z 	15        9.75e+03 K  9.85e+03 K 0.105  0.0953
2025-01-10T13:23:47.9406893Z 
2025-01-10T13:23:47.9406998Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:23:47.9407092Z 	Current t_inner = 9974.969 K
2025-01-10T13:23:47.9407215Z 	Expected t_inner for next iteration = 10736.783 K
2025-01-10T13:23:47.9407225Z 
2025-01-10T13:23:47.9407334Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:23:47.9407427Z 	Starting iteration 2 of 5
2025-01-10T13:23:47.9407534Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:23:47.9407633Z 	Luminosity emitted   = 1.084e+43 erg / s
2025-01-10T13:23:47.9407726Z 	Luminosity absorbed  = 3.624e+42 erg / s
2025-01-10T13:23:47.9407824Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9407829Z 
2025-01-10T13:23:47.9407931Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:23:47.9408024Z 	Plasma stratification:
2025-01-10T13:23:47.9408131Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:23:47.9408244Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:23:47.9408342Z 	0         1.01e+04 K  1.05e+04 K  0.449   0.481
2025-01-10T13:23:47.9408435Z 	5         1.01e+04 K  1.06e+04 K  0.201   0.202
2025-01-10T13:23:47.9408525Z 	10           1e+04 K  1.04e+04 K  0.129   0.127
2025-01-10T13:23:47.9408620Z 	15        9.85e+03 K  1.02e+04 K 0.0953  0.0935
2025-01-10T13:23:47.9408625Z 
2025-01-10T13:23:47.9408733Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:23:47.9408819Z 	Current t_inner = 10736.783 K
2025-01-10T13:23:47.9408943Z 	Expected t_inner for next iteration = 10718.619 K
2025-01-10T13:23:47.9408948Z 
2025-01-10T13:23:47.9409053Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:23:47.9409145Z 	Starting iteration 3 of 5
2025-01-10T13:23:47.9409251Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:23:47.9409349Z 	Luminosity emitted   = 1.086e+43 erg / s
2025-01-10T13:23:47.9409443Z 	Luminosity absorbed  = 3.514e+42 erg / s
2025-01-10T13:23:47.9409541Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9409663Z 
2025-01-10T13:23:47.9409893Z INFO     tardis.simulation.base:base.py:260 Iteration converged 1/4 consecutive times.
2025-01-10T13:23:47.9410009Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:23:47.9410103Z 	Plasma stratification:
2025-01-10T13:23:47.9410212Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:23:47.9410326Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:23:47.9410418Z 	0         1.05e+04 K  1.07e+04 K  0.481   0.491
2025-01-10T13:23:47.9410512Z 	5         1.06e+04 K  1.09e+04 K  0.202   0.198
2025-01-10T13:23:47.9410599Z 	10        1.04e+04 K  1.07e+04 K  0.127   0.124
2025-01-10T13:23:47.9410694Z 	15        1.02e+04 K  1.04e+04 K 0.0935  0.0921
2025-01-10T13:23:47.9410698Z 
2025-01-10T13:23:47.9410805Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:23:47.9410897Z 	Current t_inner = 10718.619 K
2025-01-10T13:23:47.9411013Z 	Expected t_inner for next iteration = 10696.651 K
2025-01-10T13:23:47.9411017Z 
2025-01-10T13:23:47.9411134Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:23:47.9411327Z 	Starting iteration 4 of 5
2025-01-10T13:23:47.9411432Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:23:47.9411530Z 	Luminosity emitted   = 1.082e+43 erg / s
2025-01-10T13:23:47.9411625Z 	Luminosity absorbed  = 3.437e+42 erg / s
2025-01-10T13:23:47.9411724Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9411728Z 
2025-01-10T13:23:47.9411939Z INFO     tardis.simulation.base:base.py:260 Iteration converged 2/4 consecutive times.
2025-01-10T13:23:47.9412052Z INFO     tardis.simulation.base:base.py:649 
2025-01-10T13:23:47.9412138Z 	Plasma stratification:
2025-01-10T13:23:47.9412249Z INFO     tardis.simulation.base:base.py:650 
2025-01-10T13:23:47.9412360Z 	Shell No.    t_rad    next_t_rad    w    next_w
2025-01-10T13:23:47.9412450Z 	0         1.07e+04 K  1.09e+04 K  0.491    0.49
2025-01-10T13:23:47.9412535Z 	5         1.09e+04 K   1.1e+04 K  0.198   0.193
2025-01-10T13:23:47.9412630Z 	10        1.07e+04 K  1.08e+04 K  0.124   0.122
2025-01-10T13:23:47.9412725Z 	15        1.04e+04 K  1.05e+04 K 0.0921  0.0902
2025-01-10T13:23:47.9412730Z 
2025-01-10T13:23:47.9412832Z INFO     tardis.simulation.base:base.py:652 
2025-01-10T13:23:47.9412922Z 	Current t_inner = 10696.651 K
2025-01-10T13:23:47.9413284Z 	Expected t_inner for next iteration = 10684.004 K
2025-01-10T13:23:47.9413292Z 
2025-01-10T13:23:47.9413403Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:23:47.9413499Z 	Simulation finished in 4 iterations 
2025-01-10T13:23:47.9413590Z 	Simulation took 12.80 s
2025-01-10T13:23:47.9413595Z 
2025-01-10T13:23:47.9413699Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:23:47.9413791Z 	Starting iteration 5 of 5
2025-01-10T13:23:47.9413895Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:23:47.9413998Z 	Luminosity emitted   = 1.074e+43 erg / s
2025-01-10T13:23:47.9414096Z 	Luminosity absorbed  = 3.447e+42 erg / s
2025-01-10T13:23:47.9414187Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9414374Z ______________________ TestTransportSimple.test_spectrum _______________________
2025-01-10T13:23:47.9414383Z 
2025-01-10T13:23:47.9414600Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7fef619481d0>
2025-01-10T13:23:47.9414803Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5382db80>
2025-01-10T13:23:47.9414809Z 
2025-01-10T13:23:47.9414905Z     def test_spectrum(self, simulation):
2025-01-10T13:23:47.9415086Z         key = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
2025-01-10T13:23:47.9415189Z         expected = self.get_expected_data(key)
2025-01-10T13:23:47.9415267Z     
2025-01-10T13:23:47.9415377Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9415453Z     
2025-01-10T13:23:47.9415558Z >       assert_quantity_allclose(
2025-01-10T13:23:47.9415729Z             simulation.spectrum_solver.spectrum_real_packets.luminosity,
2025-01-10T13:23:47.9415813Z             luminosity,
2025-01-10T13:23:47.9416023Z         )
2025-01-10T13:23:47.9416031Z 
2025-01-10T13:23:47.9416133Z tardis/tests/test_tardis_full.py:81: 
2025-01-10T13:23:47.9416252Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9416599Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9416692Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9416811Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9416816Z 
2025-01-10T13:23:47.9417282Z args = (<function assert_allclose.<locals>.compare at 0x7fef561209a0>, array([1.41445923e+39, 1.75365002e+39, 1.41304405e+39,...), array([1.47119190e+39, 1.69564189e+39, 1.35368464e+39, ...,
2025-01-10T13:23:47.9417397Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9417664Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9417673Z 
2025-01-10T13:23:47.9417883Z     @wraps(func)
2025-01-10T13:23:47.9417976Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9418066Z         with self._recreate_cm():
2025-01-10T13:23:47.9418162Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9418248Z E           AssertionError: 
2025-01-10T13:23:47.9418368Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9418443Z E           
2025-01-10T13:23:47.9418552Z E           Mismatched elements: 4832 / 10000 (48.3%)
2025-01-10T13:23:47.9418695Z E           Max absolute difference among violations: 1.38672909e+39
2025-01-10T13:23:47.9418835Z E           Max relative difference among violations: 5.17890748
2025-01-10T13:23:47.9419013Z E            ACTUAL: array([1.414459e+39, 1.753650e+39, 1.413044e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9419105Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9419283Z E            DESIRED: array([1.471192e+39, 1.695642e+39, 1.353685e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9419380Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9419385Z 
2025-01-10T13:23:47.9419595Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9419778Z __________________ TestTransportSimple.test_virtual_spectrum ___________________
2025-01-10T13:23:47.9419783Z 
2025-01-10T13:23:47.9420002Z self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7fef61948410>
2025-01-10T13:23:47.9420198Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5382db80>
2025-01-10T13:23:47.9420209Z 
2025-01-10T13:23:47.9420327Z     def test_virtual_spectrum(self, simulation):
2025-01-10T13:23:47.9420513Z         key = "simulation/spectrum_solver/spectrum_virtual_packets/luminosity"
2025-01-10T13:23:47.9420616Z         expected = self.get_expected_data(key)
2025-01-10T13:23:47.9420698Z     
2025-01-10T13:23:47.9420805Z         luminosity = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9420882Z     
2025-01-10T13:23:47.9420972Z >       assert_quantity_allclose(
2025-01-10T13:23:47.9421155Z             simulation.spectrum_solver.spectrum_virtual_packets.luminosity,
2025-01-10T13:23:47.9421232Z             luminosity,
2025-01-10T13:23:47.9421312Z         )
2025-01-10T13:23:47.9421316Z 
2025-01-10T13:23:47.9421411Z tardis/tests/test_tardis_full.py:92: 
2025-01-10T13:23:47.9421532Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9421866Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9421959Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9422075Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9422079Z 
2025-01-10T13:23:47.9422540Z args = (<function assert_allclose.<locals>.compare at 0x7fef31a722a0>, array([1.45484259e+39, 1.36306291e+39, 1.38939833e+39,...), array([1.44033177e+39, 1.35611403e+39, 1.39755698e+39, ...,
2025-01-10T13:23:47.9422750Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9423006Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9423011Z 
2025-01-10T13:23:47.9423227Z     @wraps(func)
2025-01-10T13:23:47.9423318Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9423406Z         with self._recreate_cm():
2025-01-10T13:23:47.9423504Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9423590Z E           AssertionError: 
2025-01-10T13:23:47.9423704Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9423778Z E           
2025-01-10T13:23:47.9423888Z E           Mismatched elements: 5933 / 10000 (59.3%)
2025-01-10T13:23:47.9424029Z E           Max absolute difference among violations: 5.26760031e+38
2025-01-10T13:23:47.9424171Z E           Max relative difference among violations: 23978.84555943
2025-01-10T13:23:47.9424344Z E            ACTUAL: array([1.454843e+39, 1.363063e+39, 1.389398e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9424563Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9424733Z E            DESIRED: array([1.440332e+39, 1.356114e+39, 1.397557e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9424826Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9424832Z 
2025-01-10T13:23:47.9425036Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9425466Z ___ TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-downbranch] ____
2025-01-10T13:23:47.9425476Z 
2025-01-10T13:23:47.9425924Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef61948d70>
2025-01-10T13:23:47.9426126Z simulation = <tardis.simulation.base.Simulation object at 0x7fef4d048230>
2025-01-10T13:23:47.9426331Z request = <FixtureRequest for <Function test_j_blue_estimators[-1-downbranch]>>
2025-01-10T13:23:47.9426342Z 
2025-01-10T13:23:47.9426474Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:23:47.9426595Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9426686Z         j_blue_estimator = (
2025-01-10T13:23:47.9426908Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:23:47.9426985Z         )
2025-01-10T13:23:47.9427131Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:23:47.9427259Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:23:47.9427264Z 
2025-01-10T13:23:47.9427402Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:23:47.9427521Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9427526Z 
2025-01-10T13:23:47.9427791Z args = (<function assert_allclose.<locals>.compare at 0x7fef31a727a0>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9427872Z        [0., 0., .....,
2025-01-10T13:23:47.9427957Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9428045Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9428132Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:23:47.9428383Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9428388Z 
2025-01-10T13:23:47.9428471Z     @wraps(func)
2025-01-10T13:23:47.9428559Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9428654Z         with self._recreate_cm():
2025-01-10T13:23:47.9428745Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9428836Z E           AssertionError: 
2025-01-10T13:23:47.9428945Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9429025Z E           
2025-01-10T13:23:47.9429137Z E           Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:23:47.9429281Z E           Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:23:47.9429410Z E           Max relative difference among violations: 8.35741234
2025-01-10T13:23:47.9429671Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9429766Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9429858Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9429974Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9430061Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9430154Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9430159Z 
2025-01-10T13:23:47.9430358Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9430581Z ________ TestTransportSimpleFormalIntegral.test_spectrum[-1-downbranch] ________
2025-01-10T13:23:47.9430586Z 
2025-01-10T13:23:47.9430905Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef619493a0>
2025-01-10T13:23:47.9431108Z simulation = <tardis.simulation.base.Simulation object at 0x7fef4d048230>
2025-01-10T13:23:47.9431384Z request = <FixtureRequest for <Function test_spectrum[-1-downbranch]>>
2025-01-10T13:23:47.9431389Z 
2025-01-10T13:23:47.9431505Z     def test_spectrum(self, simulation, request):
2025-01-10T13:23:47.9431619Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9431814Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:23:47.9431983Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:23:47.9432087Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9432215Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:23:47.9432220Z 
2025-01-10T13:23:47.9432356Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:23:47.9432475Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9432816Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9432919Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9433156Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9433161Z 
2025-01-10T13:23:47.9433630Z args = (<function assert_allclose.<locals>.compare at 0x7fef3da92e80>, array([2.01862731e+39, 1.44100026e+39, 1.28363764e+39,...), array([2.16554068e+39, 1.29492551e+39, 1.28560928e+39, ...,
2025-01-10T13:23:47.9433741Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9433994Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9433999Z 
2025-01-10T13:23:47.9434079Z     @wraps(func)
2025-01-10T13:23:47.9434174Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9434262Z         with self._recreate_cm():
2025-01-10T13:23:47.9434357Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9434444Z E           AssertionError: 
2025-01-10T13:23:47.9434563Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9434641Z E           
2025-01-10T13:23:47.9434749Z E           Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:23:47.9434887Z E           Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:23:47.9435021Z E           Max relative difference among violations: 5.83764686
2025-01-10T13:23:47.9435189Z E            ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9435282Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9435451Z E            DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9435543Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9435548Z 
2025-01-10T13:23:47.9435755Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9435987Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-downbranch] ___
2025-01-10T13:23:47.9436113Z 
2025-01-10T13:23:47.9436450Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef61949b20>
2025-01-10T13:23:47.9436644Z simulation = <tardis.simulation.base.Simulation object at 0x7fef4d048230>
2025-01-10T13:23:47.9436854Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-downbranch]>>
2025-01-10T13:23:47.9436859Z 
2025-01-10T13:23:47.9437001Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:23:47.9437116Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9437306Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:23:47.9437474Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:23:47.9437584Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9437702Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:23:47.9437706Z 
2025-01-10T13:23:47.9437849Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:23:47.9438073Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9438408Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9438500Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9438614Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9438619Z 
2025-01-10T13:23:47.9439087Z args = (<function assert_allclose.<locals>.compare at 0x7fef2efee8e0>, array([1.54178275e+39, 1.54564497e+39, 1.54031038e+39,...), array([1.55114238e+39, 1.55522613e+39, 1.54887955e+39, ...,
2025-01-10T13:23:47.9439198Z        2.25671263e+31, 2.27943572e+31, 2.24394350e+31]))
2025-01-10T13:23:47.9439455Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9439460Z 
2025-01-10T13:23:47.9439540Z     @wraps(func)
2025-01-10T13:23:47.9439630Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9439721Z         with self._recreate_cm():
2025-01-10T13:23:47.9439815Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9439902Z E           AssertionError: 
2025-01-10T13:23:47.9440014Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9440088Z E           
2025-01-10T13:23:47.9440195Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:23:47.9440334Z E           Max absolute difference among violations: 5.00661745e+37
2025-01-10T13:23:47.9440472Z E           Max relative difference among violations: 6.79985816
2025-01-10T13:23:47.9440644Z E            ACTUAL: array([1.541783e+39, 1.545645e+39, 1.540310e+39, ..., 2.274707e+31,
2025-01-10T13:23:47.9440733Z E                  2.292907e+31, 2.257206e+31])
2025-01-10T13:23:47.9440908Z E            DESIRED: array([1.551142e+39, 1.555226e+39, 1.548880e+39, ..., 2.256713e+31,
2025-01-10T13:23:47.9440997Z E                  2.279436e+31, 2.243943e+31])
2025-01-10T13:23:47.9441008Z 
2025-01-10T13:23:47.9441215Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9441370Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:23:47.9441375Z 
2025-01-10T13:23:47.9441378Z 
2025-01-10T13:23:47.9441776Z Packets:   ████████████████████████████████████████████████████████████████████████████████100000/100000 [00:12<00:00, 111146.34it/s][A
2025-01-10T13:23:47.9442010Z ____ TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-macroatom] ____
2025-01-10T13:23:47.9442015Z 
2025-01-10T13:23:47.9442333Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef61949580>
2025-01-10T13:23:47.9442532Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5678dac0>
2025-01-10T13:23:47.9442729Z request = <FixtureRequest for <Function test_j_blue_estimators[-1-macroatom]>>
2025-01-10T13:23:47.9442856Z 
2025-01-10T13:23:47.9442999Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:23:47.9443237Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9443331Z         j_blue_estimator = (
2025-01-10T13:23:47.9443554Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:23:47.9443627Z         )
2025-01-10T13:23:47.9443786Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:23:47.9443906Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:23:47.9443911Z 
2025-01-10T13:23:47.9444050Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:23:47.9444162Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9444167Z 
2025-01-10T13:23:47.9444441Z args = (<function assert_allclose.<locals>.compare at 0x7fef34940180>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9444519Z        [0., 0., .....,
2025-01-10T13:23:47.9444610Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9444810Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9444898Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:23:47.9445160Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9445165Z 
2025-01-10T13:23:47.9445242Z     @wraps(func)
2025-01-10T13:23:47.9445330Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9445419Z         with self._recreate_cm():
2025-01-10T13:23:47.9445511Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9445598Z E           AssertionError: 
2025-01-10T13:23:47.9445712Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9445786Z E           
2025-01-10T13:23:47.9445901Z E           Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:23:47.9446040Z E           Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:23:47.9446172Z E           Max relative difference among violations: 4.08461732
2025-01-10T13:23:47.9446286Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9446383Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9446480Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9446591Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9446681Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9446770Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9446775Z 
2025-01-10T13:23:47.9446983Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9447204Z ________ TestTransportSimpleFormalIntegral.test_spectrum[-1-macroatom] _________
2025-01-10T13:23:47.9447209Z 
2025-01-10T13:23:47.9447543Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef61949cd0>
2025-01-10T13:23:47.9447738Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5678dac0>
2025-01-10T13:23:47.9447926Z request = <FixtureRequest for <Function test_spectrum[-1-macroatom]>>
2025-01-10T13:23:47.9447931Z 
2025-01-10T13:23:47.9448045Z     def test_spectrum(self, simulation, request):
2025-01-10T13:23:47.9448151Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9448351Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:23:47.9448511Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:23:47.9448620Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9448740Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:23:47.9448746Z 
2025-01-10T13:23:47.9448885Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:23:47.9448999Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9449337Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9449564Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9449675Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9449679Z 
2025-01-10T13:23:47.9450153Z args = (<function assert_allclose.<locals>.compare at 0x7fef3d7245e0>, array([1.74566518e+39, 1.44733560e+39, 1.29388426e+39,...), array([1.74559473e+39, 1.44727718e+39, 1.29383198e+39, ...,
2025-01-10T13:23:47.9450334Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9450784Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9450791Z 
2025-01-10T13:23:47.9450872Z     @wraps(func)
2025-01-10T13:23:47.9450964Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9451058Z         with self._recreate_cm():
2025-01-10T13:23:47.9451147Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9451238Z E           AssertionError: 
2025-01-10T13:23:47.9451352Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9451528Z E           
2025-01-10T13:23:47.9451630Z E           Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:23:47.9451771Z E           Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:23:47.9451899Z E           Max relative difference among violations: 3.08310014
2025-01-10T13:23:47.9452074Z E            ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9452163Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9452337Z E            DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9452425Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9452436Z 
2025-01-10T13:23:47.9452635Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9452871Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-macroatom] ___
2025-01-10T13:23:47.9452879Z 
2025-01-10T13:23:47.9453342Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef6194a300>
2025-01-10T13:23:47.9453543Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5678dac0>
2025-01-10T13:23:47.9453747Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-macroatom]>>
2025-01-10T13:23:47.9453752Z 
2025-01-10T13:23:47.9453898Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:23:47.9454005Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9454200Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:23:47.9454365Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:23:47.9454468Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9454591Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:23:47.9454596Z 
2025-01-10T13:23:47.9454732Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:23:47.9454851Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9455182Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9455281Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9455390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9455394Z 
2025-01-10T13:23:47.9455858Z args = (<function assert_allclose.<locals>.compare at 0x7fef3da93380>, array([1.54634964e+39, 1.55739996e+39, 1.54657082e+39,...), array([1.54556181e+39, 1.55660766e+39, 1.54591210e+39, ...,
2025-01-10T13:23:47.9455967Z        1.35260736e+31, 1.33049749e+31, 1.29446216e+31]))
2025-01-10T13:23:47.9456218Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9456223Z 
2025-01-10T13:23:47.9456432Z     @wraps(func)
2025-01-10T13:23:47.9456524Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9456616Z         with self._recreate_cm():
2025-01-10T13:23:47.9456708Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9456801Z E           AssertionError: 
2025-01-10T13:23:47.9456910Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9456990Z E           
2025-01-10T13:23:47.9457089Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:23:47.9457233Z E           Max absolute difference among violations: 2.90101642e+37
2025-01-10T13:23:47.9457367Z E           Max relative difference among violations: 96.4428449
2025-01-10T13:23:47.9457535Z E            ACTUAL: array([1.546350e+39, 1.557400e+39, 1.546571e+39, ..., 1.400403e+31,
2025-01-10T13:23:47.9457627Z E                  1.375141e+31, 1.337928e+31])
2025-01-10T13:23:47.9457794Z E            DESIRED: array([1.545562e+39, 1.556608e+39, 1.545912e+39, ..., 1.352607e+31,
2025-01-10T13:23:47.9457889Z E                  1.330497e+31, 1.294462e+31])
2025-01-10T13:23:47.9458025Z 
2025-01-10T13:23:47.9458227Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9458457Z ____ TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-macroatom] ____
2025-01-10T13:23:47.9458463Z 
2025-01-10T13:23:47.9458781Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef61949820>
2025-01-10T13:23:47.9458980Z simulation = <tardis.simulation.base.Simulation object at 0x7fef4c10d8b0>
2025-01-10T13:23:47.9459181Z request = <FixtureRequest for <Function test_j_blue_estimators[30-macroatom]>>
2025-01-10T13:23:47.9459186Z 
2025-01-10T13:23:47.9459316Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:23:47.9459427Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9459511Z         j_blue_estimator = (
2025-01-10T13:23:47.9459730Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:23:47.9459816Z         )
2025-01-10T13:23:47.9459968Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:23:47.9460088Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:23:47.9460093Z 
2025-01-10T13:23:47.9460231Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:23:47.9460346Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9460351Z 
2025-01-10T13:23:47.9460616Z args = (<function assert_allclose.<locals>.compare at 0x7fef80393380>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9460696Z        [0., 0., .....,
2025-01-10T13:23:47.9460776Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9460860Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9460939Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:23:47.9461195Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9461204Z 
2025-01-10T13:23:47.9461284Z     @wraps(func)
2025-01-10T13:23:47.9461374Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9461463Z         with self._recreate_cm():
2025-01-10T13:23:47.9461557Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9461647Z E           AssertionError: 
2025-01-10T13:23:47.9461754Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9461832Z E           
2025-01-10T13:23:47.9461941Z E           Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:23:47.9462082Z E           Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:23:47.9462209Z E           Max relative difference among violations: 4.08461732
2025-01-10T13:23:47.9462320Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9462410Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9462509Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9462720Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9462814Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9462902Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9462912Z 
2025-01-10T13:23:47.9463240Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9463464Z ________ TestTransportSimpleFormalIntegral.test_spectrum[30-macroatom] _________
2025-01-10T13:23:47.9463469Z 
2025-01-10T13:23:47.9463786Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef61949f10>
2025-01-10T13:23:47.9463989Z simulation = <tardis.simulation.base.Simulation object at 0x7fef4c10d8b0>
2025-01-10T13:23:47.9464161Z request = <FixtureRequest for <Function test_spectrum[30-macroatom]>>
2025-01-10T13:23:47.9464166Z 
2025-01-10T13:23:47.9464279Z     def test_spectrum(self, simulation, request):
2025-01-10T13:23:47.9464382Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9464583Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:23:47.9464865Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:23:47.9464968Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9465092Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:23:47.9465097Z 
2025-01-10T13:23:47.9465229Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:23:47.9465344Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9465672Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9465768Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9465878Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9465883Z 
2025-01-10T13:23:47.9466348Z args = (<function assert_allclose.<locals>.compare at 0x7fef4d0393a0>, array([1.74566518e+39, 1.44733560e+39, 1.29388426e+39,...), array([1.74559473e+39, 1.44727718e+39, 1.29383198e+39, ...,
2025-01-10T13:23:47.9466465Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9466716Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9466721Z 
2025-01-10T13:23:47.9466801Z     @wraps(func)
2025-01-10T13:23:47.9466887Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9466984Z         with self._recreate_cm():
2025-01-10T13:23:47.9467075Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9467163Z E           AssertionError: 
2025-01-10T13:23:47.9467269Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9467348Z E           
2025-01-10T13:23:47.9467447Z E           Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:23:47.9467586Z E           Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:23:47.9467726Z E           Max relative difference among violations: 3.08310014
2025-01-10T13:23:47.9467901Z E            ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9467995Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9468164Z E            DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9468256Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9468260Z 
2025-01-10T13:23:47.9468456Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9468785Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-macroatom] ___
2025-01-10T13:23:47.9468797Z 
2025-01-10T13:23:47.9469289Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef6194a510>
2025-01-10T13:23:47.9469494Z simulation = <tardis.simulation.base.Simulation object at 0x7fef4c10d8b0>
2025-01-10T13:23:47.9469854Z request = <FixtureRequest for <Function test_spectrum_integrated[30-macroatom]>>
2025-01-10T13:23:47.9469864Z 
2025-01-10T13:23:47.9470003Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:23:47.9470115Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9470306Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:23:47.9470469Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:23:47.9470572Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9470695Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:23:47.9470699Z 
2025-01-10T13:23:47.9470829Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:23:47.9470945Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9471275Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9471372Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9471570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9471575Z 
2025-01-10T13:23:47.9472031Z args = (<function assert_allclose.<locals>.compare at 0x7fef6c35c5e0>, array([1.54506418e+39, 1.55336544e+39, 1.54364274e+39,...), array([1.54421084e+39, 1.55253343e+39, 1.54295780e+39, ...,
2025-01-10T13:23:47.9472141Z        1.27325829e+31, 1.26097974e+31, 1.22258748e+31]))
2025-01-10T13:23:47.9472389Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9472394Z 
2025-01-10T13:23:47.9472476Z     @wraps(func)
2025-01-10T13:23:47.9472567Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9472654Z         with self._recreate_cm():
2025-01-10T13:23:47.9472748Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9472833Z E           AssertionError: 
2025-01-10T13:23:47.9472945Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9473212Z E           
2025-01-10T13:23:47.9473402Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:23:47.9473556Z E           Max absolute difference among violations: 2.99183385e+37
2025-01-10T13:23:47.9473696Z E           Max relative difference among violations: 98.22574798
2025-01-10T13:23:47.9473865Z E            ACTUAL: array([1.545064e+39, 1.553365e+39, 1.543643e+39, ..., 1.222961e+31,
2025-01-10T13:23:47.9473961Z E                  1.193005e+31, 1.164854e+31])
2025-01-10T13:23:47.9474130Z E            DESIRED: array([1.544211e+39, 1.552533e+39, 1.542958e+39, ..., 1.273258e+31,
2025-01-10T13:23:47.9474222Z E                  1.260980e+31, 1.222587e+31])
2025-01-10T13:23:47.9474227Z 
2025-01-10T13:23:47.9474428Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9474654Z ___ TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-downbranch] ____
2025-01-10T13:23:47.9474662Z 
2025-01-10T13:23:47.9474987Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef61949730>
2025-01-10T13:23:47.9475185Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5666cb30>
2025-01-10T13:23:47.9475387Z request = <FixtureRequest for <Function test_j_blue_estimators[30-downbranch]>>
2025-01-10T13:23:47.9475392Z 
2025-01-10T13:23:47.9475521Z     def test_j_blue_estimators(self, simulation, request):
2025-01-10T13:23:47.9475633Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9475717Z         j_blue_estimator = (
2025-01-10T13:23:47.9475937Z             simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
2025-01-10T13:23:47.9476014Z         )
2025-01-10T13:23:47.9476162Z         expected = regression_data.sync_ndarray(j_blue_estimator)
2025-01-10T13:23:47.9476285Z >       npt.assert_allclose(j_blue_estimator, expected)
2025-01-10T13:23:47.9476291Z 
2025-01-10T13:23:47.9476423Z tardis/tests/test_tardis_full_formal_integral.py:85: 
2025-01-10T13:23:47.9476678Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9476682Z 
2025-01-10T13:23:47.9476946Z args = (<function assert_allclose.<locals>.compare at 0x7fef60ea1a80>, array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9477026Z        [0., 0., .....,
2025-01-10T13:23:47.9477111Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9477195Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9477278Z        [0., 0., 0., ..., 0., 0., 0.]]))
2025-01-10T13:23:47.9477526Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9477532Z 
2025-01-10T13:23:47.9477613Z     @wraps(func)
2025-01-10T13:23:47.9477695Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9477789Z         with self._recreate_cm():
2025-01-10T13:23:47.9477877Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9477966Z E           AssertionError: 
2025-01-10T13:23:47.9478077Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9478273Z E           
2025-01-10T13:23:47.9478382Z E           Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:23:47.9478523Z E           Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:23:47.9478650Z E           Max relative difference among violations: 8.35741234
2025-01-10T13:23:47.9478761Z E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9478853Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9478941Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9479056Z E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9479142Z E                  [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:47.9479236Z E                  [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:47.9479240Z 
2025-01-10T13:23:47.9479437Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9479669Z ________ TestTransportSimpleFormalIntegral.test_spectrum[30-downbranch] ________
2025-01-10T13:23:47.9479674Z 
2025-01-10T13:23:47.9479990Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef61949e50>
2025-01-10T13:23:47.9480186Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5666cb30>
2025-01-10T13:23:47.9480368Z request = <FixtureRequest for <Function test_spectrum[30-downbranch]>>
2025-01-10T13:23:47.9480373Z 
2025-01-10T13:23:47.9480485Z     def test_spectrum(self, simulation, request):
2025-01-10T13:23:47.9480596Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9480789Z         luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
2025-01-10T13:23:47.9480952Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:23:47.9481056Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9481183Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:23:47.9481191Z 
2025-01-10T13:23:47.9481323Z tardis/tests/test_tardis_full_formal_integral.py:92: 
2025-01-10T13:23:47.9481438Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9481770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9481865Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9481979Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9481983Z 
2025-01-10T13:23:47.9482445Z args = (<function assert_allclose.<locals>.compare at 0x7fef3da92700>, array([2.01862731e+39, 1.44100026e+39, 1.28363764e+39,...), array([2.16554068e+39, 1.29492551e+39, 1.28560928e+39, ...,
2025-01-10T13:23:47.9482553Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9482800Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9482895Z 
2025-01-10T13:23:47.9482979Z     @wraps(func)
2025-01-10T13:23:47.9483206Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9483295Z         with self._recreate_cm():
2025-01-10T13:23:47.9483389Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9483475Z E           AssertionError: 
2025-01-10T13:23:47.9483586Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9483663Z E           
2025-01-10T13:23:47.9483773Z E           Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:23:47.9483910Z E           Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:23:47.9484047Z E           Max relative difference among violations: 5.83764686
2025-01-10T13:23:47.9484218Z E            ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9484311Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9484481Z E            DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:23:47.9484731Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9484736Z 
2025-01-10T13:23:47.9484940Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9485172Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-downbranch] ___
2025-01-10T13:23:47.9485177Z 
2025-01-10T13:23:47.9485502Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7fef6194a450>
2025-01-10T13:23:47.9485702Z simulation = <tardis.simulation.base.Simulation object at 0x7fef5666cb30>
2025-01-10T13:23:47.9485913Z request = <FixtureRequest for <Function test_spectrum_integrated[30-downbranch]>>
2025-01-10T13:23:47.9485918Z 
2025-01-10T13:23:47.9486056Z     def test_spectrum_integrated(self, simulation, request):
2025-01-10T13:23:47.9486169Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9486358Z         luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-10T13:23:47.9486529Z         expected = regression_data.sync_ndarray(luminosity.cgs.value)
2025-01-10T13:23:47.9486640Z         expected = u.Quantity(expected, "erg /s")
2025-01-10T13:23:47.9486759Z >       assert_quantity_allclose(luminosity, expected)
2025-01-10T13:23:47.9486764Z 
2025-01-10T13:23:47.9486902Z tardis/tests/test_tardis_full_formal_integral.py:99: 
2025-01-10T13:23:47.9487013Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9487346Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
2025-01-10T13:23:47.9487438Z     np.testing.assert_allclose(
2025-01-10T13:23:47.9487551Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9487555Z 
2025-01-10T13:23:47.9488013Z args = (<function assert_allclose.<locals>.compare at 0x7fef561200e0>, array([1.54059874e+39, 1.54119479e+39, 1.53707604e+39,...), array([1.54917411e+39, 1.55043938e+39, 1.54507053e+39, ...,
2025-01-10T13:23:47.9488129Z        2.08252810e+31, 2.08867593e+31, 2.06027793e+31]))
2025-01-10T13:23:47.9488390Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9488395Z 
2025-01-10T13:23:47.9488472Z     @wraps(func)
2025-01-10T13:23:47.9488561Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9488648Z         with self._recreate_cm():
2025-01-10T13:23:47.9488743Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9488833Z E           AssertionError: 
2025-01-10T13:23:47.9488948Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9489021Z E           
2025-01-10T13:23:47.9489131Z E           Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:23:47.9489269Z E           Max absolute difference among violations: 5.0153284e+37
2025-01-10T13:23:47.9489404Z E           Max relative difference among violations: 5.96359613
2025-01-10T13:23:47.9489706Z E            ACTUAL: array([1.540599e+39, 1.541195e+39, 1.537076e+39, ..., 2.120497e+31,
2025-01-10T13:23:47.9489794Z E                  2.124305e+31, 2.101081e+31])
2025-01-10T13:23:47.9489966Z E            DESIRED: array([1.549174e+39, 1.550439e+39, 1.545071e+39, ..., 2.082528e+31,
2025-01-10T13:23:47.9490053Z E                  2.088676e+31, 2.060278e+31])
2025-01-10T13:23:47.9490059Z 
2025-01-10T13:23:47.9490259Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9490410Z __________________________ test_montecarlo_main_loop ___________________________
2025-01-10T13:23:47.9490415Z 
2025-01-10T13:23:47.9491107Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:23:47.9491390Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef0fef4110>
2025-01-10T13:23:47.9491839Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:23:47.9491846Z 
2025-01-10T13:23:47.9491942Z     def test_montecarlo_main_loop(
2025-01-10T13:23:47.9492034Z         montecarlo_main_loop_config,
2025-01-10T13:23:47.9492122Z         regression_data,
2025-01-10T13:23:47.9492202Z         atomic_dataset,
2025-01-10T13:23:47.9492280Z     ):
2025-01-10T13:23:47.9492387Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:23:47.9492543Z         montecarlo_main_loop_simulation = Simulation.from_config(
2025-01-10T13:23:47.9492642Z             montecarlo_main_loop_config,
2025-01-10T13:23:47.9492731Z             atom_data=atomic_dataset,
2025-01-10T13:23:47.9492831Z             virtual_packet_logging=False,
2025-01-10T13:23:47.9492918Z             legacy_mode_enabled=True,
2025-01-10T13:23:47.9492999Z         )
2025-01-10T13:23:47.9493242Z         montecarlo_main_loop_simulation.run_convergence()
2025-01-10T13:23:47.9493359Z         montecarlo_main_loop_simulation.run_final()
2025-01-10T13:23:47.9493430Z     
2025-01-10T13:23:47.9493563Z         expected_hdf_store = regression_data.sync_hdf_store(
2025-01-10T13:23:47.9493659Z             montecarlo_main_loop_simulation
2025-01-10T13:23:47.9493738Z         )
2025-01-10T13:23:47.9493808Z     
2025-01-10T13:23:47.9493964Z         # Load compare data from refdata
2025-01-10T13:23:47.9494094Z     
2025-01-10T13:23:47.9494265Z         expected_nu = expected_hdf_store[
2025-01-10T13:23:47.9494456Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:23:47.9494537Z         ]
2025-01-10T13:23:47.9494645Z         expected_energy = expected_hdf_store[
2025-01-10T13:23:47.9494781Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:23:47.9494860Z         ]
2025-01-10T13:23:47.9494980Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:23:47.9495141Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:23:47.9495212Z         ]
2025-01-10T13:23:47.9495325Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:23:47.9495452Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:23:47.9495531Z         ]
2025-01-10T13:23:47.9495622Z         expected_hdf_store.close()
2025-01-10T13:23:47.9495834Z         transport_state = montecarlo_main_loop_simulation.transport.transport_state
2025-01-10T13:23:47.9496005Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:23:47.9496150Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:23:47.9496246Z         actual_nu_bar_estimator = (
2025-01-10T13:23:47.9496392Z             transport_state.radfield_mc_estimators.nu_bar_estimator
2025-01-10T13:23:47.9496470Z         )
2025-01-10T13:23:47.9496652Z         actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
2025-01-10T13:23:47.9496870Z     
2025-01-10T13:23:47.9496951Z         # Compare
2025-01-10T13:23:47.9497040Z >       npt.assert_allclose(
2025-01-10T13:23:47.9497198Z             actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-13
2025-01-10T13:23:47.9497275Z         )
2025-01-10T13:23:47.9497280Z 
2025-01-10T13:23:47.9497464Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:57: 
2025-01-10T13:23:47.9497584Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9497588Z 
2025-01-10T13:23:47.9498023Z args = (<function assert_allclose.<locals>.compare at 0x7fef5671f880>, array([9.40997647e+28, 8.06632443e+28, 7.20256533e+28,....88449508e+28, 3.76156653e+28, 3.64401717e+28,
2025-01-10T13:23:47.9498169Z        3.53517538e+28, 3.45355503e+28, 3.34541304e+28, 3.26838651e+28]))
2025-01-10T13:23:47.9498431Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-13, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9498543Z 
2025-01-10T13:23:47.9498623Z     @wraps(func)
2025-01-10T13:23:47.9498713Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9498800Z         with self._recreate_cm():
2025-01-10T13:23:47.9498894Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9498979Z E           AssertionError: 
2025-01-10T13:23:47.9499092Z E           Not equal to tolerance rtol=1e-13, atol=0
2025-01-10T13:23:47.9499167Z E           
2025-01-10T13:23:47.9499271Z E           Mismatched elements: 20 / 20 (100%)
2025-01-10T13:23:47.9499409Z E           Max absolute difference among violations: 2.25821059e+25
2025-01-10T13:23:47.9499541Z E           Max relative difference among violations: 0.00054397
2025-01-10T13:23:47.9499706Z E            ACTUAL: array([9.409976e+28, 8.066324e+28, 7.202565e+28, 6.545908e+28,
2025-01-10T13:23:47.9499827Z E                  6.032330e+28, 5.614178e+28, 5.250313e+28, 4.984748e+28,
2025-01-10T13:23:47.9499959Z E                  4.725851e+28, 4.508107e+28, 4.318094e+28, 4.149110e+28,...
2025-01-10T13:23:47.9500125Z E            DESIRED: array([9.408704e+28, 8.067118e+28, 7.202414e+28, 6.547518e+28,
2025-01-10T13:23:47.9500252Z E                  6.033670e+28, 5.613552e+28, 5.249857e+28, 4.984256e+28,
2025-01-10T13:23:47.9500375Z E                  4.726016e+28, 4.509481e+28, 4.319969e+28, 4.151368e+28,...
2025-01-10T13:23:47.9500380Z 
2025-01-10T13:23:47.9500586Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9500740Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:23:47.9501034Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:23:47.9501483Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:23:47.9501668Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9501923Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:23:47.9502099Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9502177Z 	
2025-01-10T13:23:47.9502273Z 	Simulation finished in 0 iterations 
2025-01-10T13:23:47.9502364Z 	Simulation took 0.00 s
2025-01-10T13:23:47.9502472Z  ([1mbase.py[0m:542)
2025-01-10T13:23:47.9502640Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9502711Z 	
2025-01-10T13:23:47.9502871Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:23:47.9503168Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9503246Z 	
2025-01-10T13:23:47.9503347Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:23:47.9503441Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:23:47.9503538Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9503650Z  ([1mbase.py[0m:657)
2025-01-10T13:23:47.9503809Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:23:47.9503938Z 
2025-01-10T13:23:47.9503942Z 
2025-01-10T13:23:47.9504190Z Packets:                                                                                   11144/? [00:11<00:00, 1009.80it/s][A
2025-01-10T13:23:47.9504196Z 
2025-01-10T13:23:47.9504428Z Packets:                                                                                   21722/? [00:11<00:00, 2348.71it/s][A
2025-01-10T13:23:47.9504432Z 
2025-01-10T13:23:47.9504657Z Packets:                                                                                   32493/? [00:11<00:00, 4237.73it/s][A
2025-01-10T13:23:47.9504661Z 
2025-01-10T13:23:47.9504878Z Packets:                                                                                   43376/? [00:11<00:00, 6849.74it/s][A
2025-01-10T13:23:47.9504883Z 
2025-01-10T13:23:47.9505112Z Packets:                                                                                   54210/? [00:11<00:00, 10345.77it/s][A
2025-01-10T13:23:47.9505117Z 
2025-01-10T13:23:47.9505342Z Packets:                                                                                   65216/? [00:11<00:00, 15022.48it/s][A
2025-01-10T13:23:47.9505453Z 
2025-01-10T13:23:47.9505681Z Packets:                                                                                   76091/? [00:11<00:00, 20901.25it/s][A
2025-01-10T13:23:47.9505687Z 
2025-01-10T13:23:47.9505911Z Packets:                                                                                   86999/? [00:11<00:00, 28158.11it/s][A
2025-01-10T13:23:47.9505916Z 
2025-01-10T13:23:47.9506143Z Packets:                                                                                   98001/? [00:11<00:00, 36769.59it/s][A
2025-01-10T13:23:47.9506299Z Iterations:                                                                                40/? [07:59<00:00,  5.69s/it]
2025-01-10T13:23:47.9506305Z 
2025-01-10T13:23:47.9506530Z Packets:                                                                                   104009/? [00:11<00:00, 36769.59it/s][A
2025-01-10T13:23:47.9506695Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:23:47.9507207Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:23:47.9507429Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:23:47.9507544Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:23:47.9507643Z 	Simulation finished in 0 iterations 
2025-01-10T13:23:47.9507732Z 	Simulation took 0.00 s
2025-01-10T13:23:47.9507737Z 
2025-01-10T13:23:47.9507843Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:23:47.9507940Z 	Starting iteration 1 of 1
2025-01-10T13:23:47.9508046Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:23:47.9508145Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:23:47.9508237Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:23:47.9508339Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9508512Z ____________________ test_montecarlo_main_loop_vpacket_log _____________________
2025-01-10T13:23:47.9508517Z 
2025-01-10T13:23:47.9509191Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:23:47.9509470Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef4b4577d0>
2025-01-10T13:23:47.9509815Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:23:47.9509821Z 
2025-01-10T13:23:47.9509932Z     def test_montecarlo_main_loop_vpacket_log(
2025-01-10T13:23:47.9510030Z         montecarlo_main_loop_config,
2025-01-10T13:23:47.9510112Z         regression_data,
2025-01-10T13:23:47.9510286Z         atomic_dataset,
2025-01-10T13:23:47.9510362Z     ):
2025-01-10T13:23:47.9510477Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:23:47.9510653Z         montecarlo_main_loop_config.montecarlo.no_of_virtual_packets = 5
2025-01-10T13:23:47.9510729Z     
2025-01-10T13:23:47.9510881Z         montecarlo_main_loop_simulation = Simulation.from_config(
2025-01-10T13:23:47.9510982Z             montecarlo_main_loop_config,
2025-01-10T13:23:47.9511074Z             atom_data=atomic_dataset,
2025-01-10T13:23:47.9511172Z             virtual_packet_logging=True,
2025-01-10T13:23:47.9511260Z             legacy_mode_enabled=True,
2025-01-10T13:23:47.9511338Z         )
2025-01-10T13:23:47.9511468Z         montecarlo_main_loop_simulation.run_convergence()
2025-01-10T13:23:47.9511585Z         montecarlo_main_loop_simulation.run_final()
2025-01-10T13:23:47.9511655Z     
2025-01-10T13:23:47.9511798Z         transport = montecarlo_main_loop_simulation.transport
2025-01-10T13:23:47.9511877Z     
2025-01-10T13:23:47.9512078Z         assert transport.montecarlo_configuration.ENABLE_VPACKET_TRACKING is True
2025-01-10T13:23:47.9512322Z     
2025-01-10T13:23:47.9512561Z         expected_hdf_store = regression_data.sync_hdf_store(
2025-01-10T13:23:47.9512734Z             montecarlo_main_loop_simulation
2025-01-10T13:23:47.9512811Z         )
2025-01-10T13:23:47.9512887Z     
2025-01-10T13:23:47.9512983Z         expected_nu = expected_hdf_store[
2025-01-10T13:23:47.9513297Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:23:47.9513374Z         ]
2025-01-10T13:23:47.9513486Z         expected_energy = expected_hdf_store[
2025-01-10T13:23:47.9513627Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:23:47.9513704Z         ]
2025-01-10T13:23:47.9513828Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:23:47.9513978Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:23:47.9514055Z         ]
2025-01-10T13:23:47.9514172Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:23:47.9514312Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:23:47.9514383Z         ]
2025-01-10T13:23:47.9514505Z         expected_vpacket_log_nus = expected_hdf_store[
2025-01-10T13:23:47.9514646Z             "/simulation/transport/transport_state/virt_packet_nus"
2025-01-10T13:23:47.9514722Z         ]
2025-01-10T13:23:47.9514847Z         expected_vpacket_log_energies = expected_hdf_store[
2025-01-10T13:23:47.9515009Z             "/simulation/transport/transport_state/virt_packet_energies"
2025-01-10T13:23:47.9515081Z         ]
2025-01-10T13:23:47.9515156Z     
2025-01-10T13:23:47.9515269Z         transport_state = transport.transport_state
2025-01-10T13:23:47.9515345Z     
2025-01-10T13:23:47.9515518Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:23:47.9515673Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:23:47.9515826Z         actual_nu_bar_estimator = transport_state.nu_bar_estimator
2025-01-10T13:23:47.9515951Z         actual_j_estimator = transport_state.j_estimator
2025-01-10T13:23:47.9516112Z         actual_vpacket_log_nus = transport_state.vpacket_tracker.nus
2025-01-10T13:23:47.9516289Z         actual_vpacket_log_energies = transport_state.vpacket_tracker.energies
2025-01-10T13:23:47.9516366Z     
2025-01-10T13:23:47.9516458Z         expected_hdf_store.close()
2025-01-10T13:23:47.9516538Z         # Compare
2025-01-10T13:23:47.9516630Z >       npt.assert_allclose(
2025-01-10T13:23:47.9516725Z             actual_nu_bar_estimator,
2025-01-10T13:23:47.9516815Z             expected_nu_bar_estimator,
2025-01-10T13:23:47.9516902Z             rtol=1e-12,
2025-01-10T13:23:47.9516979Z             atol=1e-15,
2025-01-10T13:23:47.9517057Z         )
2025-01-10T13:23:47.9517062Z 
2025-01-10T13:23:47.9517250Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:120: 
2025-01-10T13:23:47.9517373Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9517518Z 
2025-01-10T13:23:47.9517964Z args = (<function assert_allclose.<locals>.compare at 0x7fef3d820c20>, array([9.39540882e+28, 8.06337668e+28, 7.18835599e+28,....86491193e+28, 3.76603462e+28, 3.65184134e+28,
2025-01-10T13:23:47.9518106Z        3.55625311e+28, 3.45809153e+28, 3.35093337e+28, 3.25549805e+28]))
2025-01-10T13:23:47.9518384Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-12, atol=1e-15', 'strict': False, ...}
2025-01-10T13:23:47.9518390Z 
2025-01-10T13:23:47.9518467Z     @wraps(func)
2025-01-10T13:23:47.9518558Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9518646Z         with self._recreate_cm():
2025-01-10T13:23:47.9518741Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9518827Z E           AssertionError: 
2025-01-10T13:23:47.9518952Z E           Not equal to tolerance rtol=1e-12, atol=1e-15
2025-01-10T13:23:47.9519030Z E           
2025-01-10T13:23:47.9519134Z E           Mismatched elements: 20 / 20 (100%)
2025-01-10T13:23:47.9519407Z E           Max absolute difference among violations: 1.93283629e+25
2025-01-10T13:23:47.9519537Z E           Max relative difference among violations: 0.00029157
2025-01-10T13:23:47.9519702Z E            ACTUAL: array([9.395409e+28, 8.063377e+28, 7.188356e+28, 6.549146e+28,
2025-01-10T13:23:47.9519823Z E                  6.034629e+28, 5.628414e+28, 5.283421e+28, 4.953453e+28,
2025-01-10T13:23:47.9519952Z E                  4.716735e+28, 4.492320e+28, 4.302194e+28, 4.140106e+28,...
2025-01-10T13:23:47.9520115Z E            DESIRED: array([9.397342e+28, 8.064372e+28, 7.189479e+28, 6.549756e+28,
2025-01-10T13:23:47.9520238Z E                  6.033450e+28, 5.626927e+28, 5.281881e+28, 4.952089e+28,
2025-01-10T13:23:47.9520359Z E                  4.716388e+28, 4.491655e+28, 4.302267e+28, 4.139741e+28,...
2025-01-10T13:23:47.9520370Z 
2025-01-10T13:23:47.9520573Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9520738Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:23:47.9521020Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:23:47.9521469Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:23:47.9521650Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9521868Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:23:47.9522035Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9522111Z 	
2025-01-10T13:23:47.9522208Z 	Simulation finished in 0 iterations 
2025-01-10T13:23:47.9522297Z 	Simulation took 0.00 s
2025-01-10T13:23:47.9522411Z  ([1mbase.py[0m:542)
2025-01-10T13:23:47.9522578Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9522652Z 	
2025-01-10T13:23:47.9522807Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:23:47.9522974Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9523185Z 	
2025-01-10T13:23:47.9523288Z 	Luminosity emitted   = 8.135e+42 erg / s
2025-01-10T13:23:47.9523381Z 	Luminosity absorbed  = 2.646e+42 erg / s
2025-01-10T13:23:47.9523479Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9523591Z  ([1mbase.py[0m:657)
2025-01-10T13:23:47.9523751Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:23:47.9523756Z 
2025-01-10T13:23:47.9523760Z 
2025-01-10T13:23:47.9523997Z Packets:                                                                                   108915/? [00:14<00:00, 10313.35it/s][A
2025-01-10T13:23:47.9524008Z 
2025-01-10T13:23:47.9524234Z Packets:                                                                                   116541/? [00:14<00:00, 12376.48it/s][A
2025-01-10T13:23:47.9524240Z 
2025-01-10T13:23:47.9524468Z Packets:                                                                                   122903/? [00:14<00:00, 14416.83it/s][A
2025-01-10T13:23:47.9524598Z 
2025-01-10T13:23:47.9524830Z Packets:                                                                                   128388/? [00:15<00:00, 16487.46it/s][A
2025-01-10T13:23:47.9524835Z 
2025-01-10T13:23:47.9525063Z Packets:                                                                                   133277/? [00:15<00:00, 18562.22it/s][A
2025-01-10T13:23:47.9525068Z 
2025-01-10T13:23:47.9525296Z Packets:                                                                                   137736/? [00:15<00:00, 20674.55it/s][A
2025-01-10T13:23:47.9525301Z 
2025-01-10T13:23:47.9525518Z Packets:                                                                                   141907/? [00:15<00:00, 22786.90it/s][A
2025-01-10T13:23:47.9525523Z 
2025-01-10T13:23:47.9525751Z Packets:                                                                                   145881/? [00:15<00:00, 24829.64it/s][A
2025-01-10T13:23:47.9525759Z 
2025-01-10T13:23:47.9526116Z Packets:                                                                                   149716/? [00:15<00:00, 26780.25it/s][A
2025-01-10T13:23:47.9526126Z 
2025-01-10T13:23:47.9526347Z Packets:                                                                                   153462/? [00:15<00:00, 28479.97it/s][A
2025-01-10T13:23:47.9526352Z 
2025-01-10T13:23:47.9526578Z Packets:                                                                                   157134/? [00:15<00:00, 29892.09it/s][A
2025-01-10T13:23:47.9526583Z 
2025-01-10T13:23:47.9526802Z Packets:                                                                                   160746/? [00:16<00:00, 31110.83it/s][A
2025-01-10T13:23:47.9526807Z 
2025-01-10T13:23:47.9527030Z Packets:                                                                                   164324/? [00:16<00:00, 32105.29it/s][A
2025-01-10T13:23:47.9527035Z 
2025-01-10T13:23:47.9527258Z Packets:                                                                                   167898/? [00:16<00:00, 33055.10it/s][A
2025-01-10T13:23:47.9527271Z 
2025-01-10T13:23:47.9527490Z Packets:                                                                                   171460/? [00:16<00:00, 33209.08it/s][A
2025-01-10T13:23:47.9527495Z 
2025-01-10T13:23:47.9527720Z Packets:                                                                                   174961/? [00:16<00:00, 33627.73it/s][A
2025-01-10T13:23:47.9527725Z 
2025-01-10T13:23:47.9527942Z Packets:                                                                                   178463/? [00:16<00:00, 34015.97it/s][A
2025-01-10T13:23:47.9527947Z 
2025-01-10T13:23:47.9528171Z Packets:                                                                                   181992/? [00:16<00:00, 34376.24it/s][A
2025-01-10T13:23:47.9528176Z 
2025-01-10T13:23:47.9528402Z Packets:                                                                                   185497/? [00:16<00:00, 34560.18it/s][A
2025-01-10T13:23:47.9528413Z 
2025-01-10T13:23:47.9528634Z Packets:                                                                                   189014/? [00:16<00:00, 34738.96it/s][A
2025-01-10T13:23:47.9528639Z 
2025-01-10T13:23:47.9528862Z Packets:                                                                                   192567/? [00:16<00:00, 34963.80it/s][A
2025-01-10T13:23:47.9528867Z 
2025-01-10T13:23:47.9529087Z Packets:                                                                                   196088/? [00:17<00:00, 34808.73it/s][A
2025-01-10T13:23:47.9529097Z 
2025-01-10T13:23:47.9529316Z Packets:                                                                                   199586/? [00:17<00:00, 34693.21it/s][A
2025-01-10T13:23:47.9529321Z 
2025-01-10T13:23:47.9529546Z Packets:                                                                                   203108/? [00:17<00:00, 34847.72it/s][A
2025-01-10T13:23:47.9529783Z Iterations:                                                                                41/? [08:05<00:00,  5.62s/it]
2025-01-10T13:23:47.9529791Z 
2025-01-10T13:23:47.9530020Z Packets:                                                                                   204009/? [00:17<00:00, 34847.72it/s][A
2025-01-10T13:23:47.9530176Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:23:47.9530680Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:23:47.9530909Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:23:47.9531024Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:23:47.9531129Z 	Simulation finished in 0 iterations 
2025-01-10T13:23:47.9531214Z 	Simulation took 0.00 s
2025-01-10T13:23:47.9531219Z 
2025-01-10T13:23:47.9531329Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:23:47.9531500Z 	Starting iteration 1 of 1
2025-01-10T13:23:47.9531609Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:23:47.9531702Z 	Luminosity emitted   = 8.135e+42 erg / s
2025-01-10T13:23:47.9531801Z 	Luminosity absorbed  = 2.646e+42 erg / s
2025-01-10T13:23:47.9531896Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9532054Z __________________________ test_boundary_interactions __________________________
2025-01-10T13:23:47.9532059Z 
2025-01-10T13:23:47.9532843Z rpacket_tracker = ListType[instance.jitclass.RPacketTracker#7fef6bf74ef0<seed:int64,index:int64,status:array(int64, 1d, A),r:array(float...PacketTracker object at 0x7fef535c1de0>, <numba.experimental.jitclass.boxing.RPacketTracker object at 0x7fef535c1c00>])
2025-01-10T13:23:47.9533232Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef59078e30>
2025-01-10T13:23:47.9533239Z 
2025-01-10T13:23:47.9533412Z     def test_boundary_interactions(rpacket_tracker, regression_data):
2025-01-10T13:23:47.9533520Z         no_of_packets = len(rpacket_tracker)
2025-01-10T13:23:47.9533595Z     
2025-01-10T13:23:47.9533693Z         # Hard coding the number of columns
2025-01-10T13:23:47.9533850Z         # Based on the largest size of boundary_interaction array (60)
2025-01-10T13:23:47.9533963Z         obtained_boundary_interaction = np.full(
2025-01-10T13:23:47.9534050Z             (no_of_packets, 64),
2025-01-10T13:23:47.9534129Z             [-1],
2025-01-10T13:23:47.9534267Z             dtype=rpacket_tracker[0].boundary_interaction.dtype,
2025-01-10T13:23:47.9534344Z         )
2025-01-10T13:23:47.9534414Z     
2025-01-10T13:23:47.9534534Z         for i, tracker in enumerate(rpacket_tracker):
2025-01-10T13:23:47.9534633Z             obtained_boundary_interaction[
2025-01-10T13:23:47.9534749Z                 i, : tracker.boundary_interaction.size
2025-01-10T13:23:47.9534848Z             ] = tracker.boundary_interaction
2025-01-10T13:23:47.9534925Z     
2025-01-10T13:23:47.9535090Z         expected_boundary_interaction = regression_data.sync_ndarray(
2025-01-10T13:23:47.9535195Z             obtained_boundary_interaction
2025-01-10T13:23:47.9535269Z         )
2025-01-10T13:23:47.9535363Z >       npt.assert_array_equal(
2025-01-10T13:23:47.9535522Z             obtained_boundary_interaction, expected_boundary_interaction
2025-01-10T13:23:47.9535604Z         )
2025-01-10T13:23:47.9535608Z 
2025-01-10T13:23:47.9535788Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py:154: 
2025-01-10T13:23:47.9535908Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9536188Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/numpy/_utils/__init__.py:85: in wrapper
2025-01-10T13:23:47.9536275Z     return fun(*args, **kwargs)
2025-01-10T13:23:47.9536393Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9536399Z 
2025-01-10T13:23:47.9536613Z args = (<built-in function eq>, array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:23:47.9536861Z         (-1, -1, -1), (-...-1, -1, -1), (-1, -1, -1)]],
2025-01-10T13:23:47.9537041Z       dtype=[('event_id', '<i8'), ('current_shell_id', '<i8'), ('next_shell_id', '<i8')]))
2025-01-10T13:23:47.9537766Z kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}
2025-01-10T13:23:47.9537779Z 
2025-01-10T13:23:47.9537944Z     @wraps(func)
2025-01-10T13:23:47.9538155Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9538338Z         with self._recreate_cm():
2025-01-10T13:23:47.9538517Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9538638Z E           AssertionError: 
2025-01-10T13:23:47.9538810Z E           Arrays are not equal
2025-01-10T13:23:47.9538916Z E           
2025-01-10T13:23:47.9539125Z E           Mismatched elements: 11291 / 256000 (4.41%)
2025-01-10T13:23:47.9539338Z E            ACTUAL: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:23:47.9539508Z E                   (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:23:47.9539844Z E                  [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:23:47.9540038Z E            DESIRED: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:23:47.9540229Z E                   (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:23:47.9540383Z E                  [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:23:47.9540388Z 
2025-01-10T13:23:47.9540682Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9540878Z ______________________ test_montecarlo_main_loop_weighted ______________________
2025-01-10T13:23:47.9540883Z 
2025-01-10T13:23:47.9541625Z montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
2025-01-10T13:23:47.9542005Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7fef2fc847d0>
2025-01-10T13:23:47.9542402Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
2025-01-10T13:23:47.9549903Z simple_weighted_packet_source = <tardis.transport.montecarlo.weighted_packet_source.BlackBodyWeightedSource object at 0x7fef2fc868d0>
2025-01-10T13:23:47.9549931Z 
2025-01-10T13:23:47.9550075Z     def test_montecarlo_main_loop_weighted(
2025-01-10T13:23:47.9550179Z         montecarlo_main_loop_config,
2025-01-10T13:23:47.9550263Z         regression_data,
2025-01-10T13:23:47.9550349Z         atomic_dataset,
2025-01-10T13:23:47.9550450Z         simple_weighted_packet_source,
2025-01-10T13:23:47.9550528Z     ):
2025-01-10T13:23:47.9550643Z         atomic_dataset = deepcopy(atomic_dataset)
2025-01-10T13:23:47.9550831Z         montecarlo_main_loop_simulation_weighted = Simulation.from_config(
2025-01-10T13:23:47.9550942Z             montecarlo_main_loop_config,
2025-01-10T13:23:47.9551040Z             atom_data=atomic_dataset,
2025-01-10T13:23:47.9551136Z             virtual_packet_logging=False,
2025-01-10T13:23:47.9551231Z             legacy_mode_enabled=True,
2025-01-10T13:23:47.9551309Z         )
2025-01-10T13:23:47.9551475Z         montecarlo_main_loop_simulation_weighted.packet_source = (
2025-01-10T13:23:47.9551578Z             simple_weighted_packet_source
2025-01-10T13:23:47.9551649Z         )
2025-01-10T13:23:47.9551804Z         montecarlo_main_loop_simulation_weighted.run_convergence()
2025-01-10T13:23:47.9551938Z         montecarlo_main_loop_simulation_weighted.run_final()
2025-01-10T13:23:47.9552013Z     
2025-01-10T13:23:47.9552123Z         # Get the montecarlo simple regression data
2025-01-10T13:23:47.9552215Z         regression_data_dir = (
2025-01-10T13:23:47.9552396Z             regression_data.absolute_regression_data_dir.absolute().parents[0]
2025-01-10T13:23:47.9552753Z             / "test_montecarlo_main_loop/test_montecarlo_main_loop.h5"
2025-01-10T13:23:47.9552828Z         )
2025-01-10T13:23:47.9552994Z         expected_hdf_store = pd.HDFStore(regression_data_dir, mode="r")
2025-01-10T13:23:47.9553243Z     
2025-01-10T13:23:47.9553350Z         # Load compare data from refdata
2025-01-10T13:23:47.9553424Z     
2025-01-10T13:23:47.9553518Z         expected_nu = expected_hdf_store[
2025-01-10T13:23:47.9553651Z             "/simulation/transport/transport_state/output_nu"
2025-01-10T13:23:47.9553722Z         ]
2025-01-10T13:23:47.9553826Z         expected_energy = expected_hdf_store[
2025-01-10T13:23:47.9553958Z             "/simulation/transport/transport_state/output_energy"
2025-01-10T13:23:47.9554034Z         ]
2025-01-10T13:23:47.9554153Z         expected_nu_bar_estimator = expected_hdf_store[
2025-01-10T13:23:47.9554299Z             "/simulation/transport/transport_state/nu_bar_estimator"
2025-01-10T13:23:47.9554378Z         ]
2025-01-10T13:23:47.9554492Z         expected_j_estimator = expected_hdf_store[
2025-01-10T13:23:47.9554766Z             "/simulation/transport/transport_state/j_estimator"
2025-01-10T13:23:47.9554842Z         ]
2025-01-10T13:23:47.9554935Z         expected_hdf_store.close()
2025-01-10T13:23:47.9555026Z         transport_state = (
2025-01-10T13:23:47.9555213Z             montecarlo_main_loop_simulation_weighted.transport.transport_state
2025-01-10T13:23:47.9555284Z         )
2025-01-10T13:23:47.9555466Z         actual_energy = transport_state.packet_collection.output_energies
2025-01-10T13:23:47.9555606Z         actual_nu = transport_state.packet_collection.output_nus
2025-01-10T13:23:47.9555740Z         actual_nu_bar_estimator = (
2025-01-10T13:23:47.9555998Z             transport_state.radfield_mc_estimators.nu_bar_estimator
2025-01-10T13:23:47.9556127Z         )
2025-01-10T13:23:47.9556415Z         actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
2025-01-10T13:23:47.9556497Z     
2025-01-10T13:23:47.9556574Z         # Compare
2025-01-10T13:23:47.9556672Z         npt.assert_allclose(
2025-01-10T13:23:47.9556829Z             actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-2
2025-01-10T13:23:47.9556905Z         )
2025-01-10T13:23:47.9557090Z         npt.assert_allclose(actual_j_estimator, expected_j_estimator, rtol=1e-2)
2025-01-10T13:23:47.9557254Z >       npt.assert_allclose(actual_energy, expected_energy, rtol=1e-2)
2025-01-10T13:23:47.9557259Z 
2025-01-10T13:23:47.9557499Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py:65: 
2025-01-10T13:23:47.9557613Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9557618Z 
2025-01-10T13:23:47.9558088Z args = (<function assert_allclose.<locals>.compare at 0x7fef3d9c5c60>, array([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-...ay([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-05, ...,
2025-01-10T13:23:47.9558204Z         1.03375439e-05, -9.75713585e-06,  1.01976360e-05]))
2025-01-10T13:23:47.9558466Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.01, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9558476Z 
2025-01-10T13:23:47.9558558Z     @wraps(func)
2025-01-10T13:23:47.9558644Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9558735Z         with self._recreate_cm():
2025-01-10T13:23:47.9558824Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9558915Z E           AssertionError: 
2025-01-10T13:23:47.9559024Z E           Not equal to tolerance rtol=0.01, atol=0
2025-01-10T13:23:47.9559105Z E           
2025-01-10T13:23:47.9559210Z E           Mismatched elements: 33 / 100000 (0.033%)
2025-01-10T13:23:47.9559357Z E           Max absolute difference among violations: 2.00640487e-05
2025-01-10T13:23:47.9559486Z E           Max relative difference among violations: 2.11614526
2025-01-10T13:23:47.9559673Z E            ACTUAL: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:23:47.9559916Z E                  -9.757136e-06,  1.019764e-05])
2025-01-10T13:23:47.9560103Z E            DESIRED: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:23:47.9560198Z E                  -9.757136e-06,  1.019764e-05])
2025-01-10T13:23:47.9560208Z 
2025-01-10T13:23:47.9560416Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9560579Z ----------------------------- Captured stdout call -----------------------------
2025-01-10T13:23:47.9560894Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-10T13:23:47.9561343Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-10T13:23:47.9561532Z [[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9561753Z 	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
2025-01-10T13:23:47.9561921Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9562085Z 	
2025-01-10T13:23:47.9562186Z 	Simulation finished in 0 iterations 
2025-01-10T13:23:47.9562280Z 	Simulation took 0.00 s
2025-01-10T13:23:47.9562397Z  ([1mbase.py[0m:542)
2025-01-10T13:23:47.9562567Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9562643Z 	
2025-01-10T13:23:47.9562802Z 	Starting iteration 1 of 1 ([1mbase.py[0m:444)
2025-01-10T13:23:47.9562970Z [[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9563195Z 	
2025-01-10T13:23:47.9563304Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:23:47.9563397Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:23:47.9563494Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9563607Z  ([1mbase.py[0m:657)
2025-01-10T13:23:47.9563768Z ----------------------------- Captured stderr call -----------------------------
2025-01-10T13:23:47.9563773Z 
2025-01-10T13:23:47.9563776Z 
2025-01-10T13:23:47.9564014Z Packets:                                                                                   0/100000 [00:00<?, ?it/s]            [A
2025-01-10T13:23:47.9564033Z 
2025-01-10T13:23:47.9564250Z Packets:                                                                                   0/100000 [00:00<?, ?it/s][A
2025-01-10T13:23:47.9564255Z 
2025-01-10T13:23:47.9564522Z Packets:   ████████▌                                                                       10640/100000 [00:00<00:00, 106394.27it/s][A
2025-01-10T13:23:47.9564530Z 
2025-01-10T13:23:47.9564786Z Packets:   █████████████████▏                                                              21470/100000 [00:00<00:00, 107513.06it/s][A
2025-01-10T13:23:47.9564793Z 
2025-01-10T13:23:47.9565060Z Packets:   █████████████████████████▊                                                      32256/100000 [00:00<00:00, 107670.59it/s][A
2025-01-10T13:23:47.9565066Z 
2025-01-10T13:23:47.9565338Z Packets:   ██████████████████████████████████▍                                             43111/100000 [00:00<00:00, 108014.24it/s][A
2025-01-10T13:23:47.9565363Z 
2025-01-10T13:23:47.9565640Z Packets:   ███████████████████████████████████████████▏                                    53985/100000 [00:00<00:00, 108275.33it/s][A
2025-01-10T13:23:47.9565646Z 
2025-01-10T13:23:47.9565946Z Packets:   ███████████████████████████████████████████████████▊                            64839/100000 [00:00<00:00, 108361.93it/s][A
2025-01-10T13:23:47.9565951Z 
2025-01-10T13:23:47.9566260Z Packets:   ████████████████████████████████████████████████████████████▌                   75734/100000 [00:00<00:00, 108552.18it/s][A
2025-01-10T13:23:47.9566271Z 
2025-01-10T13:23:47.9566583Z Packets:   █████████████████████████████████████████████████████████████████████▎          86691/100000 [00:00<00:00, 108874.65it/s][A
2025-01-10T13:23:47.9566588Z 
2025-01-10T13:23:47.9566910Z Packets:   ██████████████████████████████████████████████████████████████████████████████  97612/100000 [00:00<00:00, 108977.32it/s][A
2025-01-10T13:23:47.9567202Z Iterations:                                                                                45/? [08:55<00:00,  8.16s/it]
2025-01-10T13:23:47.9567314Z 
2025-01-10T13:23:47.9567666Z Packets:   ███████████████████████████████████████████████████████████████████████████████▉99999/100000 [00:00<00:00, 108977.32it/s][A
2025-01-10T13:23:47.9567829Z ------------------------------ Captured log call -------------------------------
2025-01-10T13:23:47.9568342Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-10T13:23:47.9568572Z INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
2025-01-10T13:23:47.9568685Z INFO     tardis.simulation.base:base.py:542 
2025-01-10T13:23:47.9568788Z 	Simulation finished in 0 iterations 
2025-01-10T13:23:47.9568873Z 	Simulation took 0.00 s
2025-01-10T13:23:47.9568879Z 
2025-01-10T13:23:47.9568996Z INFO     tardis.simulation.base:base.py:444 
2025-01-10T13:23:47.9569092Z 	Starting iteration 1 of 1
2025-01-10T13:23:47.9569202Z INFO     tardis.simulation.base:base.py:657 
2025-01-10T13:23:47.9569297Z 	Luminosity emitted   = 8.101e+42 erg / s
2025-01-10T13:23:47.9569397Z 	Luminosity absorbed  = 2.679e+42 erg / s
2025-01-10T13:23:47.9569489Z 	Luminosity requested = 1.077e+43 erg / s
2025-01-10T13:23:47.9569708Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data0-plot_data] __
2025-01-10T13:23:47.9569713Z 
2025-01-10T13:23:47.9569980Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170e960>
2025-01-10T13:23:47.9570261Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>
2025-01-10T13:23:47.9570532Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data0-plot_data]>>
2025-01-10T13:23:47.9570616Z attribute = 'plot_data'
2025-01-10T13:23:47.9570621Z 
2025-01-10T13:23:47.9570722Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9570808Z         "attribute",
2025-01-10T13:23:47.9570883Z         [
2025-01-10T13:23:47.9570962Z             "plot_data",
2025-01-10T13:23:47.9571046Z             "plot_colors",
2025-01-10T13:23:47.9571127Z             "new_bin_edges",
2025-01-10T13:23:47.9571204Z         ],
2025-01-10T13:23:47.9571275Z     )
2025-01-10T13:23:47.9571371Z     def test_prepare_plot_data(
2025-01-10T13:23:47.9571449Z         self,
2025-01-10T13:23:47.9571541Z         plotter_prepare_plot_data,
2025-01-10T13:23:47.9571621Z         request,
2025-01-10T13:23:47.9571696Z         attribute,
2025-01-10T13:23:47.9571772Z     ):
2025-01-10T13:23:47.9571844Z         """
2025-01-10T13:23:47.9571988Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:23:47.9572059Z     
2025-01-10T13:23:47.9572474Z         Parameters:
2025-01-10T13:23:47.9572552Z         -----------
2025-01-10T13:23:47.9572733Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:23:47.9572926Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9573219Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:23:47.9573295Z         """
2025-01-10T13:23:47.9573408Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9573553Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:23:47.9573701Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:23:47.9573868Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:23:47.9574019Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:23:47.9574159Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:23:47.9574377Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:23:47.9574581Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:23:47.9574596Z 
2025-01-10T13:23:47.9574830Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:23:47.9575176Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9575182Z 
2025-01-10T13:23:47.9575631Z args = (<function assert_allclose.<locals>.compare at 0x7fef34964b80>, array([11843.96225504, 11843.96225504, 11843.96225504,...1104.14894249, 11194.10880903, 12818.679236  ,
2025-01-10T13:23:47.9575774Z        12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
2025-01-10T13:23:47.9576038Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9576044Z 
2025-01-10T13:23:47.9576123Z     @wraps(func)
2025-01-10T13:23:47.9576215Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9576304Z         with self._recreate_cm():
2025-01-10T13:23:47.9576399Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9576485Z E           AssertionError: 
2025-01-10T13:23:47.9576608Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9576687Z E           
2025-01-10T13:23:47.9576787Z E           (shapes (515,), (508,) mismatch)
2025-01-10T13:23:47.9576952Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:23:47.9577070Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:23:47.9577200Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:23:47.9577357Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:23:47.9577480Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:23:47.9577600Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:23:47.9577606Z 
2025-01-10T13:23:47.9577816Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9577973Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9578242Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9578516Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9578668Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9578975Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9579186Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data1-plot_data] __
2025-01-10T13:23:47.9579192Z 
2025-01-10T13:23:47.9579458Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170ede0>
2025-01-10T13:23:47.9579741Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>
2025-01-10T13:23:47.9580013Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data1-plot_data]>>
2025-01-10T13:23:47.9580226Z attribute = 'plot_data'
2025-01-10T13:23:47.9580244Z 
2025-01-10T13:23:47.9580337Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9580420Z         "attribute",
2025-01-10T13:23:47.9580495Z         [
2025-01-10T13:23:47.9580579Z             "plot_data",
2025-01-10T13:23:47.9580658Z             "plot_colors",
2025-01-10T13:23:47.9580744Z             "new_bin_edges",
2025-01-10T13:23:47.9580814Z         ],
2025-01-10T13:23:47.9580889Z     )
2025-01-10T13:23:47.9580977Z     def test_prepare_plot_data(
2025-01-10T13:23:47.9581055Z         self,
2025-01-10T13:23:47.9581145Z         plotter_prepare_plot_data,
2025-01-10T13:23:47.9581225Z         request,
2025-01-10T13:23:47.9581301Z         attribute,
2025-01-10T13:23:47.9581377Z     ):
2025-01-10T13:23:47.9581449Z         """
2025-01-10T13:23:47.9581593Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:23:47.9581664Z     
2025-01-10T13:23:47.9581748Z         Parameters:
2025-01-10T13:23:47.9581829Z         -----------
2025-01-10T13:23:47.9582102Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:23:47.9582206Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9582371Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:23:47.9582447Z         """
2025-01-10T13:23:47.9582555Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9582697Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:23:47.9582848Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:23:47.9583184Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:23:47.9583425Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:23:47.9583560Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:23:47.9583683Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:23:47.9583814Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:23:47.9583823Z 
2025-01-10T13:23:47.9583974Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:23:47.9584089Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9584094Z 
2025-01-10T13:23:47.9584440Z args = (<function assert_allclose.<locals>.compare at 0x7fef5b747560>, array([11843.96225504, 11843.96225504, 11843.96225504,...47464 ,
2025-01-10T13:23:47.9584578Z        12229.96880815, 12113.40540961, 12605.43283975, 12605.43283975,
2025-01-10T13:23:47.9584665Z        11152.96259546, 11172.04481521]))
2025-01-10T13:23:47.9584919Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9584924Z 
2025-01-10T13:23:47.9585005Z     @wraps(func)
2025-01-10T13:23:47.9585093Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9585186Z         with self._recreate_cm():
2025-01-10T13:23:47.9585284Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9585374Z E           AssertionError: 
2025-01-10T13:23:47.9585489Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9585564Z E           
2025-01-10T13:23:47.9585663Z E           (shapes (560,), (558,) mismatch)
2025-01-10T13:23:47.9585819Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:23:47.9585948Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:23:47.9586071Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:23:47.9586233Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:23:47.9586350Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:23:47.9586476Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:23:47.9586481Z 
2025-01-10T13:23:47.9586835Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9587057Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data2-plot_data] __
2025-01-10T13:23:47.9587062Z 
2025-01-10T13:23:47.9587327Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170f020>
2025-01-10T13:23:47.9587605Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>
2025-01-10T13:23:47.9587880Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data2-plot_data]>>
2025-01-10T13:23:47.9587963Z attribute = 'plot_data'
2025-01-10T13:23:47.9587968Z 
2025-01-10T13:23:47.9588066Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9588146Z         "attribute",
2025-01-10T13:23:47.9588222Z         [
2025-01-10T13:23:47.9588311Z             "plot_data",
2025-01-10T13:23:47.9588392Z             "plot_colors",
2025-01-10T13:23:47.9588478Z             "new_bin_edges",
2025-01-10T13:23:47.9588554Z         ],
2025-01-10T13:23:47.9588740Z     )
2025-01-10T13:23:47.9588836Z     def test_prepare_plot_data(
2025-01-10T13:23:47.9588912Z         self,
2025-01-10T13:23:47.9589006Z         plotter_prepare_plot_data,
2025-01-10T13:23:47.9589085Z         request,
2025-01-10T13:23:47.9589160Z         attribute,
2025-01-10T13:23:47.9589235Z     ):
2025-01-10T13:23:47.9589306Z         """
2025-01-10T13:23:47.9589451Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:23:47.9589522Z     
2025-01-10T13:23:47.9589609Z         Parameters:
2025-01-10T13:23:47.9589685Z         -----------
2025-01-10T13:23:47.9589867Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:23:47.9589967Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9590137Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:23:47.9590214Z         """
2025-01-10T13:23:47.9590325Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9590528Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:23:47.9590798Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:23:47.9591042Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:23:47.9591194Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:23:47.9591325Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:23:47.9591446Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:23:47.9591574Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:23:47.9591579Z 
2025-01-10T13:23:47.9591724Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:23:47.9591843Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9591848Z 
2025-01-10T13:23:47.9592332Z args = (<function assert_allclose.<locals>.compare at 0x7fef4ccda700>, array([11202.14920452, 13552.38987987, 11630.95782059,...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
2025-01-10T13:23:47.9592446Z        15754.62784966, 13174.4766832 , 11238.83568899]))
2025-01-10T13:23:47.9592710Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9592715Z 
2025-01-10T13:23:47.9592797Z     @wraps(func)
2025-01-10T13:23:47.9592882Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9592974Z         with self._recreate_cm():
2025-01-10T13:23:47.9593223Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9593316Z E           AssertionError: 
2025-01-10T13:23:47.9593427Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9593506Z E           
2025-01-10T13:23:47.9593598Z E           (shapes (136,), (147,) mismatch)
2025-01-10T13:23:47.9593759Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:23:47.9594023Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:23:47.9594156Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:23:47.9594313Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:23:47.9594432Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:23:47.9594557Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:23:47.9594562Z 
2025-01-10T13:23:47.9594760Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9594977Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data3-plot_data] __
2025-01-10T13:23:47.9594982Z 
2025-01-10T13:23:47.9595242Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170f260>
2025-01-10T13:23:47.9595527Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>
2025-01-10T13:23:47.9595911Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data3-plot_data]>>
2025-01-10T13:23:47.9596000Z attribute = 'plot_data'
2025-01-10T13:23:47.9596006Z 
2025-01-10T13:23:47.9596105Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9596182Z         "attribute",
2025-01-10T13:23:47.9596259Z         [
2025-01-10T13:23:47.9596338Z             "plot_data",
2025-01-10T13:23:47.9596422Z             "plot_colors",
2025-01-10T13:23:47.9596502Z             "new_bin_edges",
2025-01-10T13:23:47.9596578Z         ],
2025-01-10T13:23:47.9596649Z     )
2025-01-10T13:23:47.9596743Z     def test_prepare_plot_data(
2025-01-10T13:23:47.9596816Z         self,
2025-01-10T13:23:47.9596913Z         plotter_prepare_plot_data,
2025-01-10T13:23:47.9596987Z         request,
2025-01-10T13:23:47.9597067Z         attribute,
2025-01-10T13:23:47.9597138Z     ):
2025-01-10T13:23:47.9597214Z         """
2025-01-10T13:23:47.9597349Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:23:47.9597434Z     
2025-01-10T13:23:47.9597511Z         Parameters:
2025-01-10T13:23:47.9597591Z         -----------
2025-01-10T13:23:47.9597771Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:23:47.9597869Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9598035Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:23:47.9598106Z         """
2025-01-10T13:23:47.9598220Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9598359Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:23:47.9598511Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:23:47.9598669Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:23:47.9598820Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:23:47.9598944Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:23:47.9599078Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:23:47.9599197Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:23:47.9599203Z 
2025-01-10T13:23:47.9599346Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:23:47.9599460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9599465Z 
2025-01-10T13:23:47.9599934Z args = (<function assert_allclose.<locals>.compare at 0x7fef4ccd99e0>, array([11202.14920452, 13552.38987987, 11630.95782059,...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
2025-01-10T13:23:47.9600039Z        12229.96880815, 12113.40540961, 11152.96259546]))
2025-01-10T13:23:47.9600293Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9600298Z 
2025-01-10T13:23:47.9600378Z     @wraps(func)
2025-01-10T13:23:47.9600582Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9600674Z         with self._recreate_cm():
2025-01-10T13:23:47.9600766Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9600852Z E           AssertionError: 
2025-01-10T13:23:47.9600966Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9601039Z E           
2025-01-10T13:23:47.9601134Z E           (shapes (153,), (159,) mismatch)
2025-01-10T13:23:47.9601291Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:23:47.9601412Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:23:47.9601534Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:23:47.9601694Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:23:47.9601839Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:23:47.9601965Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:23:47.9602079Z 
2025-01-10T13:23:47.9602284Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9602494Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data4-plot_data] __
2025-01-10T13:23:47.9602499Z 
2025-01-10T13:23:47.9602762Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170f4d0>
2025-01-10T13:23:47.9603142Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>
2025-01-10T13:23:47.9603420Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data4-plot_data]>>
2025-01-10T13:23:47.9603504Z attribute = 'plot_data'
2025-01-10T13:23:47.9603509Z 
2025-01-10T13:23:47.9603607Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9603689Z         "attribute",
2025-01-10T13:23:47.9603760Z         [
2025-01-10T13:23:47.9603844Z             "plot_data",
2025-01-10T13:23:47.9603927Z             "plot_colors",
2025-01-10T13:23:47.9604020Z             "new_bin_edges",
2025-01-10T13:23:47.9604091Z         ],
2025-01-10T13:23:47.9604165Z     )
2025-01-10T13:23:47.9604254Z     def test_prepare_plot_data(
2025-01-10T13:23:47.9604335Z         self,
2025-01-10T13:23:47.9604425Z         plotter_prepare_plot_data,
2025-01-10T13:23:47.9604503Z         request,
2025-01-10T13:23:47.9604576Z         attribute,
2025-01-10T13:23:47.9604653Z     ):
2025-01-10T13:23:47.9604724Z         """
2025-01-10T13:23:47.9604865Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:23:47.9604935Z     
2025-01-10T13:23:47.9605016Z         Parameters:
2025-01-10T13:23:47.9605092Z         -----------
2025-01-10T13:23:47.9605275Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:23:47.9605373Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9605543Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:23:47.9605625Z         """
2025-01-10T13:23:47.9605737Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9605881Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:23:47.9606028Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:23:47.9606193Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:23:47.9606342Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:23:47.9606470Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:23:47.9606591Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:23:47.9606714Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:23:47.9606719Z 
2025-01-10T13:23:47.9606869Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:23:47.9606983Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9607109Z 
2025-01-10T13:23:47.9607560Z args = (<function assert_allclose.<locals>.compare at 0x7fef4ccda020>, array([11843.96225504, 11843.96225504, 11843.96225504,...1104.14894249, 11194.10880903, 12818.679236  ,
2025-01-10T13:23:47.9607699Z        12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
2025-01-10T13:23:47.9607958Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9607963Z 
2025-01-10T13:23:47.9608038Z     @wraps(func)
2025-01-10T13:23:47.9608127Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9608218Z         with self._recreate_cm():
2025-01-10T13:23:47.9608312Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9608401Z E           AssertionError: 
2025-01-10T13:23:47.9608511Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9608589Z E           
2025-01-10T13:23:47.9608683Z E           (shapes (515,), (508,) mismatch)
2025-01-10T13:23:47.9608846Z E            ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:23:47.9609072Z E                  11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:23:47.9609203Z E                  11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:23:47.9609360Z E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:23:47.9609481Z E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:23:47.9609602Z E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:23:47.9609606Z 
2025-01-10T13:23:47.9609811Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9609973Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9610230Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9610484Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9610641Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9610946Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9611155Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data5-plot_data] __
2025-01-10T13:23:47.9611160Z 
2025-01-10T13:23:47.9611423Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170f710>
2025-01-10T13:23:47.9611700Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>
2025-01-10T13:23:47.9611973Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data5-plot_data]>>
2025-01-10T13:23:47.9612062Z attribute = 'plot_data'
2025-01-10T13:23:47.9612066Z 
2025-01-10T13:23:47.9612156Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9612241Z         "attribute",
2025-01-10T13:23:47.9612312Z         [
2025-01-10T13:23:47.9612399Z             "plot_data",
2025-01-10T13:23:47.9612479Z             "plot_colors",
2025-01-10T13:23:47.9612564Z             "new_bin_edges",
2025-01-10T13:23:47.9612635Z         ],
2025-01-10T13:23:47.9612711Z     )
2025-01-10T13:23:47.9612798Z     def test_prepare_plot_data(
2025-01-10T13:23:47.9612875Z         self,
2025-01-10T13:23:47.9612966Z         plotter_prepare_plot_data,
2025-01-10T13:23:47.9613162Z         request,
2025-01-10T13:23:47.9613239Z         attribute,
2025-01-10T13:23:47.9613315Z     ):
2025-01-10T13:23:47.9613389Z         """
2025-01-10T13:23:47.9613529Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:23:47.9613603Z     
2025-01-10T13:23:47.9613680Z         Parameters:
2025-01-10T13:23:47.9613758Z         -----------
2025-01-10T13:23:47.9613933Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:23:47.9614035Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9614322Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:23:47.9614402Z         """
2025-01-10T13:23:47.9614509Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9614650Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:23:47.9614798Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:23:47.9614963Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:23:47.9615110Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:23:47.9615239Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:23:47.9615364Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:23:47.9615484Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:23:47.9615490Z 
2025-01-10T13:23:47.9615636Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:23:47.9615752Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9615865Z 
2025-01-10T13:23:47.9616339Z args = (<function assert_allclose.<locals>.compare at 0x7fef4ccd8220>, array([12467.89648692, 12467.89648692, 12357.74827994,...), array([13692.75973672, 11362.93720064, 12466.53861691, ...,
2025-01-10T13:23:47.9616440Z        12605.43283975, 11152.96259546, 11172.04481521]))
2025-01-10T13:23:47.9616696Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9616701Z 
2025-01-10T13:23:47.9616777Z     @wraps(func)
2025-01-10T13:23:47.9616859Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9616952Z         with self._recreate_cm():
2025-01-10T13:23:47.9617041Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9617131Z E           AssertionError: 
2025-01-10T13:23:47.9617239Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9617319Z E           
2025-01-10T13:23:47.9617416Z E           (shapes (1481,), (1466,) mismatch)
2025-01-10T13:23:47.9617589Z E            ACTUAL: array([12467.896487, 12467.896487, 12357.74828 , ..., 13068.120893,
2025-01-10T13:23:47.9617677Z E                  11398.237865, 11111.204868])
2025-01-10T13:23:47.9617849Z E            DESIRED: array([13692.759737, 11362.937201, 12466.538617, ..., 12605.43284 ,
2025-01-10T13:23:47.9617936Z E                  11152.962595, 11172.044815])
2025-01-10T13:23:47.9617945Z 
2025-01-10T13:23:47.9618143Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9618298Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9618531Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9618872Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9619026Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9619388Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9619598Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data6-plot_data] __
2025-01-10T13:23:47.9619603Z 
2025-01-10T13:23:47.9619869Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170f950>
2025-01-10T13:23:47.9620149Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>
2025-01-10T13:23:47.9620416Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data6-plot_data]>>
2025-01-10T13:23:47.9620504Z attribute = 'plot_data'
2025-01-10T13:23:47.9620509Z 
2025-01-10T13:23:47.9620600Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9620680Z         "attribute",
2025-01-10T13:23:47.9620842Z         [
2025-01-10T13:23:47.9620929Z             "plot_data",
2025-01-10T13:23:47.9621009Z             "plot_colors",
2025-01-10T13:23:47.9621094Z             "new_bin_edges",
2025-01-10T13:23:47.9621166Z         ],
2025-01-10T13:23:47.9621242Z     )
2025-01-10T13:23:47.9621330Z     def test_prepare_plot_data(
2025-01-10T13:23:47.9621408Z         self,
2025-01-10T13:23:47.9621503Z         plotter_prepare_plot_data,
2025-01-10T13:23:47.9621579Z         request,
2025-01-10T13:23:47.9621658Z         attribute,
2025-01-10T13:23:47.9621729Z     ):
2025-01-10T13:23:47.9621804Z         """
2025-01-10T13:23:47.9621938Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:23:47.9622013Z     
2025-01-10T13:23:47.9622089Z         Parameters:
2025-01-10T13:23:47.9622169Z         -----------
2025-01-10T13:23:47.9622345Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:23:47.9622448Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9622613Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:23:47.9622776Z         """
2025-01-10T13:23:47.9622881Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9623121Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:23:47.9623273Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:23:47.9623437Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:23:47.9623590Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:23:47.9623714Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:23:47.9623838Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:23:47.9623956Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:23:47.9623961Z 
2025-01-10T13:23:47.9624108Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:23:47.9624224Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9624232Z 
2025-01-10T13:23:47.9624710Z args = (<function assert_allclose.<locals>.compare at 0x7fef33f5d4e0>, array([11202.14920452, 13552.38987987, 11630.95782059,...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
2025-01-10T13:23:47.9624817Z        15754.62784966, 13174.4766832 , 11238.83568899]))
2025-01-10T13:23:47.9625074Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9625079Z 
2025-01-10T13:23:47.9625161Z     @wraps(func)
2025-01-10T13:23:47.9625244Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9625334Z         with self._recreate_cm():
2025-01-10T13:23:47.9625422Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9625512Z E           AssertionError: 
2025-01-10T13:23:47.9625620Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9625700Z E           
2025-01-10T13:23:47.9625796Z E           (shapes (136,), (147,) mismatch)
2025-01-10T13:23:47.9625960Z E            ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:23:47.9626080Z E                  15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:23:47.9626213Z E                  12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:23:47.9626375Z E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:23:47.9626492Z E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:23:47.9626618Z E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:23:47.9626624Z 
2025-01-10T13:23:47.9626821Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9627036Z _ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data7-plot_data] __
2025-01-10T13:23:47.9627041Z 
2025-01-10T13:23:47.9627443Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170fb30>
2025-01-10T13:23:47.9627729Z plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>
2025-01-10T13:23:47.9627999Z request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data7-plot_data]>>
2025-01-10T13:23:47.9628085Z attribute = 'plot_data'
2025-01-10T13:23:47.9628090Z 
2025-01-10T13:23:47.9628186Z     @pytest.mark.parametrize(
2025-01-10T13:23:47.9628262Z         "attribute",
2025-01-10T13:23:47.9628337Z         [
2025-01-10T13:23:47.9628417Z             "plot_data",
2025-01-10T13:23:47.9628499Z             "plot_colors",
2025-01-10T13:23:47.9628579Z             "new_bin_edges",
2025-01-10T13:23:47.9628655Z         ],
2025-01-10T13:23:47.9628728Z     )
2025-01-10T13:23:47.9628822Z     def test_prepare_plot_data(
2025-01-10T13:23:47.9628896Z         self,
2025-01-10T13:23:47.9628990Z         plotter_prepare_plot_data,
2025-01-10T13:23:47.9629068Z         request,
2025-01-10T13:23:47.9629260Z         attribute,
2025-01-10T13:23:47.9629331Z     ):
2025-01-10T13:23:47.9629413Z         """
2025-01-10T13:23:47.9629554Z         Test for the _prepare_plot_data method in LIVPlotter.
2025-01-10T13:23:47.9629626Z     
2025-01-10T13:23:47.9629708Z         Parameters:
2025-01-10T13:23:47.9629782Z         -----------
2025-01-10T13:23:47.9629963Z         plotter_prepare_plot_data: The plotter instance with prepared data.
2025-01-10T13:23:47.9630061Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9630229Z         attribute: The attribute to test after preparing the plot data.
2025-01-10T13:23:47.9630302Z         """
2025-01-10T13:23:47.9630413Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9630554Z         if attribute == "plot_data" or attribute == "plot_colors":
2025-01-10T13:23:47.9630707Z             plot_object = getattr(plotter_prepare_plot_data, attribute)
2025-01-10T13:23:47.9630868Z             plot_object = [item for sublist in plot_object for item in sublist]
2025-01-10T13:23:47.9631029Z             if all(isinstance(item, u.Quantity) for item in plot_object):
2025-01-10T13:23:47.9631160Z                 plot_object = [item.value for item in plot_object]
2025-01-10T13:23:47.9631279Z             data = regression_data.sync_ndarray(plot_object)
2025-01-10T13:23:47.9631404Z >           np.testing.assert_allclose(plot_object, data)
2025-01-10T13:23:47.9631409Z 
2025-01-10T13:23:47.9631551Z tardis/visualization/tools/tests/test_liv_plot.py:210: 
2025-01-10T13:23:47.9631671Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9631676Z 
2025-01-10T13:23:47.9632147Z args = (<function assert_allclose.<locals>.compare at 0x7fef4ccd99e0>, array([12467.89648692, 12357.74827994, 11118.74739262,...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
2025-01-10T13:23:47.9632254Z        12229.96880815, 12113.40540961, 11152.96259546]))
2025-01-10T13:23:47.9632513Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9632528Z 
2025-01-10T13:23:47.9632606Z     @wraps(func)
2025-01-10T13:23:47.9632697Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9632786Z         with self._recreate_cm():
2025-01-10T13:23:47.9632881Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9632967Z E           AssertionError: 
2025-01-10T13:23:47.9633184Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9633259Z E           
2025-01-10T13:23:47.9633359Z E           (shapes (381,), (379,) mismatch)
2025-01-10T13:23:47.9633513Z E            ACTUAL: array([12467.896487, 12357.74828 , 11118.747393, 11202.149205,
2025-01-10T13:23:47.9633637Z E                  13552.38988 , 11630.957821, 12006.254109, 15295.708346,
2025-01-10T13:23:47.9633760Z E                  11660.899663, 11789.640304, 15161.117263, 12697.545823,...
2025-01-10T13:23:47.9633922Z E            DESIRED: array([12466.538617, 14269.760975, 11910.794005, 11196.260702,
2025-01-10T13:23:47.9634172Z E                  11633.386223, 12079.529869, 11966.991343, 11263.637708,
2025-01-10T13:23:47.9634293Z E                  14098.493392, 13656.398245, 12124.454378, 11838.909334,...
2025-01-10T13:23:47.9634297Z 
2025-01-10T13:23:47.9634501Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9634656Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9634897Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9635151Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9635306Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9635612Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9635822Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl0] _______
2025-01-10T13:23:47.9635939Z 
2025-01-10T13:23:47.9636213Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef6170e690>
2025-01-10T13:23:47.9636516Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef0e9679e0>
2025-01-10T13:23:47.9637003Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9637247Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl0]>>
2025-01-10T13:23:47.9637252Z 
2025-01-10T13:23:47.9637347Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9637507Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:23:47.9637584Z     ):
2025-01-10T13:23:47.9637698Z         """
2025-01-10T13:23:47.9637923Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9638080Z     
2025-01-10T13:23:47.9638303Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9638434Z     
2025-01-10T13:23:47.9638560Z         Parameters:
2025-01-10T13:23:47.9638705Z         -----------
2025-01-10T13:23:47.9638988Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:23:47.9639261Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:23:47.9639432Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9639559Z         """
2025-01-10T13:23:47.9639736Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:23:47.9639920Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9640207Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:23:47.9640476Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9640658Z             expected_values = expected.get(
2025-01-10T13:23:47.9640812Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9640970Z             ).values.flatten()
2025-01-10T13:23:47.9641208Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:23:47.9641336Z     
2025-01-10T13:23:47.9641571Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9641744Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9641890Z                     expected_values,
2025-01-10T13:23:47.9642039Z                     actual_values,
2025-01-10T13:23:47.9642173Z                     rtol=0.3,
2025-01-10T13:23:47.9642282Z                     atol=3,
2025-01-10T13:23:47.9642411Z                 )
2025-01-10T13:23:47.9642419Z 
2025-01-10T13:23:47.9642675Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:23:47.9642880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9642890Z 
2025-01-10T13:23:47.9643749Z args = (<function assert_allclose.<locals>.compare at 0x7fef567f4ae0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9644105Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:23:47.9644547Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9644558Z 
2025-01-10T13:23:47.9644701Z     @wraps(func)
2025-01-10T13:23:47.9644855Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9645011Z         with self._recreate_cm():
2025-01-10T13:23:47.9645172Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9645301Z E           AssertionError: 
2025-01-10T13:23:47.9645420Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9645555Z E           
2025-01-10T13:23:47.9645727Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:47.9645938Z E           Max absolute difference among violations: 26
2025-01-10T13:23:47.9646173Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:23:47.9646638Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:47.9646811Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:47.9647080Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9647198Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:47.9647204Z 
2025-01-10T13:23:47.9647426Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9647587Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9647852Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9648283Z 	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:420)
2025-01-10T13:23:47.9648452Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9648901Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:420 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
2025-01-10T13:23:47.9649114Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl1] _______
2025-01-10T13:23:47.9649119Z 
2025-01-10T13:23:47.9649382Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e55e0>
2025-01-10T13:23:47.9649689Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef33fa21b0>
2025-01-10T13:23:47.9650174Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9650415Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl1]>>
2025-01-10T13:23:47.9650424Z 
2025-01-10T13:23:47.9650517Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9650680Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:23:47.9650760Z     ):
2025-01-10T13:23:47.9650836Z         """
2025-01-10T13:23:47.9650972Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9651044Z     
2025-01-10T13:23:47.9651180Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9651260Z     
2025-01-10T13:23:47.9651340Z         Parameters:
2025-01-10T13:23:47.9651422Z         -----------
2025-01-10T13:23:47.9651587Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:23:47.9651747Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:23:47.9651845Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9651924Z         """
2025-01-10T13:23:47.9652021Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:23:47.9652137Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9652425Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:23:47.9652581Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9652683Z             expected_values = expected.get(
2025-01-10T13:23:47.9652776Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9652862Z             ).values.flatten()
2025-01-10T13:23:47.9653000Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:23:47.9653236Z     
2025-01-10T13:23:47.9653374Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9653475Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9653560Z                     expected_values,
2025-01-10T13:23:47.9653649Z                     actual_values,
2025-01-10T13:23:47.9653728Z                     rtol=0.3,
2025-01-10T13:23:47.9653810Z                     atol=3,
2025-01-10T13:23:47.9653883Z                 )
2025-01-10T13:23:47.9653891Z 
2025-01-10T13:23:47.9654041Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:23:47.9654289Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9654294Z 
2025-01-10T13:23:47.9654699Z args = (<function assert_allclose.<locals>.compare at 0x7fef31a70680>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9654788Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:23:47.9655044Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9655050Z 
2025-01-10T13:23:47.9655131Z     @wraps(func)
2025-01-10T13:23:47.9655217Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9655308Z         with self._recreate_cm():
2025-01-10T13:23:47.9655445Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9655603Z E           AssertionError: 
2025-01-10T13:23:47.9655790Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9655911Z E           
2025-01-10T13:23:47.9656011Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:47.9656138Z E           Max absolute difference among violations: 26
2025-01-10T13:23:47.9656269Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:23:47.9656438Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:47.9656536Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:47.9656691Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9656784Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:47.9656789Z 
2025-01-10T13:23:47.9656996Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9657203Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl4] _______
2025-01-10T13:23:47.9657211Z 
2025-01-10T13:23:47.9657475Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e4260>
2025-01-10T13:23:47.9657778Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef33fa2270>
2025-01-10T13:23:47.9658271Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9658510Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl4]>>
2025-01-10T13:23:47.9658515Z 
2025-01-10T13:23:47.9658612Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9658771Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:23:47.9658849Z     ):
2025-01-10T13:23:47.9658921Z         """
2025-01-10T13:23:47.9659057Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9659298Z     
2025-01-10T13:23:47.9659434Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9659509Z     
2025-01-10T13:23:47.9659594Z         Parameters:
2025-01-10T13:23:47.9659672Z         -----------
2025-01-10T13:23:47.9659837Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:23:47.9659991Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:23:47.9660089Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9660170Z         """
2025-01-10T13:23:47.9660266Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:23:47.9660381Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9660546Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:23:47.9660702Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9660863Z             expected_values = expected.get(
2025-01-10T13:23:47.9661017Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9661149Z             ).values.flatten()
2025-01-10T13:23:47.9661399Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:23:47.9661471Z     
2025-01-10T13:23:47.9661609Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9661711Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9661796Z                     expected_values,
2025-01-10T13:23:47.9661886Z                     actual_values,
2025-01-10T13:23:47.9661966Z                     rtol=0.3,
2025-01-10T13:23:47.9662048Z                     atol=3,
2025-01-10T13:23:47.9662121Z                 )
2025-01-10T13:23:47.9662125Z 
2025-01-10T13:23:47.9662274Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:23:47.9662393Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9662398Z 
2025-01-10T13:23:47.9662810Z args = (<function assert_allclose.<locals>.compare at 0x7fef30cbc4a0>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   ...]), array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:23:47.9662907Z          2,   5,   5,   5,   5,   0,   0]))
2025-01-10T13:23:47.9663411Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9663425Z 
2025-01-10T13:23:47.9663522Z     @wraps(func)
2025-01-10T13:23:47.9663610Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9663704Z         with self._recreate_cm():
2025-01-10T13:23:47.9663795Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9663886Z E           AssertionError: 
2025-01-10T13:23:47.9663993Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9664072Z E           
2025-01-10T13:23:47.9664170Z E           Mismatched elements: 4 / 20 (20%)
2025-01-10T13:23:47.9664292Z E           Max absolute difference among violations: 24
2025-01-10T13:23:47.9664410Z E           Max relative difference among violations: 0.65
2025-01-10T13:23:47.9664579Z E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:23:47.9664680Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:23:47.9664841Z E            DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:23:47.9664937Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:23:47.9664942Z 
2025-01-10T13:23:47.9665147Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9665310Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9665572Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9665828Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9665979Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9666425Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9666632Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl5] _______
2025-01-10T13:23:47.9666637Z 
2025-01-10T13:23:47.9666897Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e4320>
2025-01-10T13:23:47.9667202Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef3bd15dc0>
2025-01-10T13:23:47.9667684Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9667993Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl5]>>
2025-01-10T13:23:47.9668001Z 
2025-01-10T13:23:47.9668152Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9668367Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:23:47.9668452Z     ):
2025-01-10T13:23:47.9668650Z         """
2025-01-10T13:23:47.9668794Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9668863Z     
2025-01-10T13:23:47.9669002Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9669073Z     
2025-01-10T13:23:47.9669159Z         Parameters:
2025-01-10T13:23:47.9669237Z         -----------
2025-01-10T13:23:47.9669402Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:23:47.9669551Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:23:47.9669652Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9669725Z         """
2025-01-10T13:23:47.9669828Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:23:47.9669938Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9670108Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:23:47.9670264Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9670365Z             expected_values = expected.get(
2025-01-10T13:23:47.9670460Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9670547Z             ).values.flatten()
2025-01-10T13:23:47.9670685Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:23:47.9670756Z     
2025-01-10T13:23:47.9670892Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9670987Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9671077Z                     expected_values,
2025-01-10T13:23:47.9671161Z                     actual_values,
2025-01-10T13:23:47.9671250Z                     rtol=0.3,
2025-01-10T13:23:47.9671327Z                     atol=3,
2025-01-10T13:23:47.9671405Z                 )
2025-01-10T13:23:47.9671410Z 
2025-01-10T13:23:47.9671557Z tardis/visualization/tools/tests/test_liv_plot.py:318: 
2025-01-10T13:23:47.9671681Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9671688Z 
2025-01-10T13:23:47.9672246Z args = (<function assert_allclose.<locals>.compare at 0x7fef4caaa200>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9672341Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:23:47.9672602Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9672608Z 
2025-01-10T13:23:47.9672685Z     @wraps(func)
2025-01-10T13:23:47.9672775Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9672861Z         with self._recreate_cm():
2025-01-10T13:23:47.9672954Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9673166Z E           AssertionError: 
2025-01-10T13:23:47.9673280Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9673359Z E           
2025-01-10T13:23:47.9673641Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:47.9673770Z E           Max absolute difference among violations: 26
2025-01-10T13:23:47.9673900Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:23:47.9674059Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:47.9674151Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:47.9674311Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9674399Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:47.9674404Z 
2025-01-10T13:23:47.9674613Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9674772Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9675032Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9675382Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9675663Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9676019Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9676383Z ______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl7] _______
2025-01-10T13:23:47.9676393Z 
2025-01-10T13:23:47.9676669Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e44a0>
2025-01-10T13:23:47.9676970Z generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef4b5e1b20>
2025-01-10T13:23:47.9677454Z plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9677710Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl7]>>
2025-01-10T13:23:47.9677715Z 
2025-01-10T13:23:47.9677803Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9677966Z         self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
2025-01-10T13:23:47.9678038Z     ):
2025-01-10T13:23:47.9678115Z         """
2025-01-10T13:23:47.9678246Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9678322Z     
2025-01-10T13:23:47.9678449Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9678525Z     
2025-01-10T13:23:47.9678603Z         Parameters:
2025-01-10T13:23:47.9678686Z         -----------
2025-01-10T13:23:47.9678850Z         generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
2025-01-10T13:23:47.9679000Z         plotter_generate_plot_mpl: The Matplotlib plotter fixture.
2025-01-10T13:23:47.9679103Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9679179Z         """
2025-01-10T13:23:47.9679283Z         fig, _ = plotter_generate_plot_mpl
2025-01-10T13:23:47.9679390Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9679557Z         expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
2025-01-10T13:23:47.9679703Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9679805Z             expected_values = expected.get(
2025-01-10T13:23:47.9679894Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9679984Z             ).values.flatten()
2025-01-10T13:23:47.9680115Z             actual_values = getattr(generate_plot_mpl_hdf, item)
2025-01-10T13:23:47.9680194Z     
2025-01-10T13:23:47.9680325Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9680425Z                 np.testing.assert_allclose(
2025-01-10T13:23:47.9680515Z                     expected_values,
2025-01-10T13:23:47.9680597Z                     actual_values,
2025-01-10T13:23:47.9680782Z                     rtol=0.3,
2025-01-10T13:23:47.9680863Z                     atol=3,
2025-01-10T13:23:47.9680946Z                 )
2025-01-10T13:23:47.9681020Z             else:
2025-01-10T13:23:47.9681161Z                 assert np.array_equal(expected_values, actual_values)
2025-01-10T13:23:47.9681232Z     
2025-01-10T13:23:47.9681349Z         labels = expected["plot_data_hdf/scalars"]
2025-01-10T13:23:47.9681470Z         for index1, data in enumerate(fig.get_children()):
2025-01-10T13:23:47.9681576Z             if isinstance(data.get_label(), str):
2025-01-10T13:23:47.9681653Z                 assert (
2025-01-10T13:23:47.9681874Z                     getattr(labels, "label" + str(index1)).decode()
2025-01-10T13:23:47.9682021Z                     == data.get_label()
2025-01-10T13:23:47.9682102Z                 )
2025-01-10T13:23:47.9682202Z             if isinstance(data, Line2D):
2025-01-10T13:23:47.9682299Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9682396Z                     data.get_xydata(),
2025-01-10T13:23:47.9682655Z                     expected.get("plot_data_hdf/" + "data" + str(index1)),
2025-01-10T13:23:47.9682743Z                     rtol=0.3,
2025-01-10T13:23:47.9682819Z                     atol=3,
2025-01-10T13:23:47.9682895Z                 )
2025-01-10T13:23:47.9682900Z 
2025-01-10T13:23:47.9683203Z tardis/visualization/tools/tests/test_liv_plot.py:335: 
2025-01-10T13:23:47.9683335Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9683340Z 
2025-01-10T13:23:47.9683590Z args = (<function assert_allclose.<locals>.compare at 0x7fef5377dbc0>, array([[1.10e+04, 9.00e+00],
2025-01-10T13:23:47.9683684Z        [1.19e+04, 9.00e+0...,
2025-01-10T13:23:47.9683774Z        [1.82e+04, 0.00e+00],
2025-01-10T13:23:47.9683852Z        [1.91e+04, 0.00e+00],
2025-01-10T13:23:47.9683934Z        [1.91e+04, 0.00e+00],
2025-01-10T13:23:47.9684014Z        [2.00e+04, 0.00e+00]]))
2025-01-10T13:23:47.9684274Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9684285Z 
2025-01-10T13:23:47.9684365Z     @wraps(func)
2025-01-10T13:23:47.9684457Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9684544Z         with self._recreate_cm():
2025-01-10T13:23:47.9684642Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9684729Z E           AssertionError: 
2025-01-10T13:23:47.9684841Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9684916Z E           
2025-01-10T13:23:47.9685020Z E           Mismatched elements: 2 / 40 (5%)
2025-01-10T13:23:47.9685139Z E           Max absolute difference among violations: 4.
2025-01-10T13:23:47.9685277Z E           Max relative difference among violations: 1.33333333
2025-01-10T13:23:47.9685380Z E            ACTUAL: array([[1.10e+04, 9.00e+00],
2025-01-10T13:23:47.9685466Z E                  [1.19e+04, 9.00e+00],
2025-01-10T13:23:47.9685559Z E                  [1.19e+04, 5.00e+00],...
2025-01-10T13:23:47.9685661Z E            DESIRED: array([[1.10e+04, 1.10e+01],
2025-01-10T13:23:47.9685751Z E                  [1.19e+04, 1.10e+01],
2025-01-10T13:23:47.9685835Z E                  [1.19e+04, 5.00e+00],...
2025-01-10T13:23:47.9685839Z 
2025-01-10T13:23:47.9686048Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9686204Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9686455Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9686711Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9686900Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9687351Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9687557Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply0] _______
2025-01-10T13:23:47.9687713Z 
2025-01-10T13:23:47.9687988Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e5160>
2025-01-10T13:23:47.9688303Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef4cc56ab0>
2025-01-10T13:23:47.9688406Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9688557Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:23:47.9688696Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:23:47.9688904Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9689146Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply0]>>
2025-01-10T13:23:47.9689151Z 
2025-01-10T13:23:47.9689248Z     def test_generate_plot_ply(
2025-01-10T13:23:47.9689416Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9689497Z     ):
2025-01-10T13:23:47.9689676Z         """
2025-01-10T13:23:47.9689814Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9689885Z     
2025-01-10T13:23:47.9690021Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9690092Z     
2025-01-10T13:23:47.9690176Z         Parameters:
2025-01-10T13:23:47.9690252Z         ----------
2025-01-10T13:23:47.9690419Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:23:47.9690558Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:23:47.9690728Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9690866Z         """
2025-01-10T13:23:47.9690994Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9691110Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9691285Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9691367Z     
2025-01-10T13:23:47.9691514Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9691620Z             expected_values = expected.get(
2025-01-10T13:23:47.9691710Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9691802Z             ).values.flatten()
2025-01-10T13:23:47.9691942Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:23:47.9692019Z     
2025-01-10T13:23:47.9692152Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9692254Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9692346Z                     expected_values,
2025-01-10T13:23:47.9692428Z                     actual_values,
2025-01-10T13:23:47.9692515Z                     rtol=0.3,
2025-01-10T13:23:47.9692592Z                     atol=3,
2025-01-10T13:23:47.9692672Z                 )
2025-01-10T13:23:47.9692677Z 
2025-01-10T13:23:47.9692822Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:23:47.9692945Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9692953Z 
2025-01-10T13:23:47.9693504Z args = (<function assert_allclose.<locals>.compare at 0x7fef4c9fe8e0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9693596Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:23:47.9693850Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9693860Z 
2025-01-10T13:23:47.9693937Z     @wraps(func)
2025-01-10T13:23:47.9694031Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9694119Z         with self._recreate_cm():
2025-01-10T13:23:47.9694213Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9694298Z E           AssertionError: 
2025-01-10T13:23:47.9694410Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9694622Z E           
2025-01-10T13:23:47.9694727Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:47.9694848Z E           Max absolute difference among violations: 26
2025-01-10T13:23:47.9694986Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:23:47.9695145Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:47.9695245Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:47.9695411Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9695502Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:47.9695508Z 
2025-01-10T13:23:47.9695848Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9696020Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9696275Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9696705Z 	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:522)
2025-01-10T13:23:47.9696995Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9697422Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:522 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
2025-01-10T13:23:47.9697629Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply1] _______
2025-01-10T13:23:47.9697634Z 
2025-01-10T13:23:47.9697900Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e5250>
2025-01-10T13:23:47.9698213Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef535febd0>
2025-01-10T13:23:47.9698318Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9698468Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:23:47.9698613Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:23:47.9698821Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9699067Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply1]>>
2025-01-10T13:23:47.9699073Z 
2025-01-10T13:23:47.9699169Z     def test_generate_plot_ply(
2025-01-10T13:23:47.9699336Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9699413Z     ):
2025-01-10T13:23:47.9699484Z         """
2025-01-10T13:23:47.9699618Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9699689Z     
2025-01-10T13:23:47.9699820Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9699890Z     
2025-01-10T13:23:47.9699975Z         Parameters:
2025-01-10T13:23:47.9700052Z         ----------
2025-01-10T13:23:47.9700215Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:23:47.9700360Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:23:47.9700462Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9700534Z         """
2025-01-10T13:23:47.9700634Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9700740Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9700919Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9700995Z     
2025-01-10T13:23:47.9701152Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9701320Z             expected_values = expected.get(
2025-01-10T13:23:47.9701468Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9701595Z             ).values.flatten()
2025-01-10T13:23:47.9701740Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:23:47.9701817Z     
2025-01-10T13:23:47.9701981Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9702203Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9702289Z                     expected_values,
2025-01-10T13:23:47.9702379Z                     actual_values,
2025-01-10T13:23:47.9702459Z                     rtol=0.3,
2025-01-10T13:23:47.9702541Z                     atol=3,
2025-01-10T13:23:47.9702614Z                 )
2025-01-10T13:23:47.9702626Z 
2025-01-10T13:23:47.9702772Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:23:47.9702891Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9702895Z 
2025-01-10T13:23:47.9703524Z args = (<function assert_allclose.<locals>.compare at 0x7fef4c947880>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9703621Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:23:47.9703875Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9704013Z 
2025-01-10T13:23:47.9704101Z     @wraps(func)
2025-01-10T13:23:47.9704185Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9704282Z         with self._recreate_cm():
2025-01-10T13:23:47.9704377Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9704464Z E           AssertionError: 
2025-01-10T13:23:47.9704575Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9704648Z E           
2025-01-10T13:23:47.9704752Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:47.9704870Z E           Max absolute difference among violations: 26
2025-01-10T13:23:47.9705007Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:23:47.9705163Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:47.9705260Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:47.9705421Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9705519Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:47.9705524Z 
2025-01-10T13:23:47.9705732Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9705934Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply4] _______
2025-01-10T13:23:47.9705939Z 
2025-01-10T13:23:47.9706204Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e56a0>
2025-01-10T13:23:47.9706514Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef53823200>
2025-01-10T13:23:47.9706617Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9706765Z     'data': [{'line': {'color': 'rgb(127, 0, 0)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:23:47.9706956Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:23:47.9707277Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9707538Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply4]>>
2025-01-10T13:23:47.9707543Z 
2025-01-10T13:23:47.9707639Z     def test_generate_plot_ply(
2025-01-10T13:23:47.9707809Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9707887Z     ):
2025-01-10T13:23:47.9707962Z         """
2025-01-10T13:23:47.9708097Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9708168Z     
2025-01-10T13:23:47.9708305Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9708378Z     
2025-01-10T13:23:47.9708466Z         Parameters:
2025-01-10T13:23:47.9708545Z         ----------
2025-01-10T13:23:47.9708712Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:23:47.9708852Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:23:47.9709106Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9709185Z         """
2025-01-10T13:23:47.9709287Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9709400Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9709572Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9709653Z     
2025-01-10T13:23:47.9709799Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9709903Z             expected_values = expected.get(
2025-01-10T13:23:47.9709995Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9710087Z             ).values.flatten()
2025-01-10T13:23:47.9710229Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:23:47.9710307Z     
2025-01-10T13:23:47.9710438Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9710542Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9710631Z                     expected_values,
2025-01-10T13:23:47.9710828Z                     actual_values,
2025-01-10T13:23:47.9710907Z                     rtol=0.3,
2025-01-10T13:23:47.9710990Z                     atol=3,
2025-01-10T13:23:47.9711069Z                 )
2025-01-10T13:23:47.9711074Z 
2025-01-10T13:23:47.9711218Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:23:47.9711337Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9711342Z 
2025-01-10T13:23:47.9711747Z args = (<function assert_allclose.<locals>.compare at 0x7fef4c9ffba0>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   ...]), array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:23:47.9711835Z          2,   5,   5,   5,   5,   0,   0]))
2025-01-10T13:23:47.9712085Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9712090Z 
2025-01-10T13:23:47.9712181Z     @wraps(func)
2025-01-10T13:23:47.9712270Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9712362Z         with self._recreate_cm():
2025-01-10T13:23:47.9712454Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9712573Z E           AssertionError: 
2025-01-10T13:23:47.9712770Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9712881Z E           
2025-01-10T13:23:47.9712991Z E           Mismatched elements: 4 / 20 (20%)
2025-01-10T13:23:47.9713256Z E           Max absolute difference among violations: 24
2025-01-10T13:23:47.9713439Z E           Max relative difference among violations: 0.65
2025-01-10T13:23:47.9713602Z E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:23:47.9713699Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:23:47.9713861Z E            DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:23:47.9713955Z E                    2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:23:47.9713966Z 
2025-01-10T13:23:47.9714180Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9714335Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9714593Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9714847Z 	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9715004Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9715306Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9715511Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply5] _______
2025-01-10T13:23:47.9715516Z 
2025-01-10T13:23:47.9715776Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e5760>
2025-01-10T13:23:47.9716269Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef338c82c0>
2025-01-10T13:23:47.9716382Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9716576Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:23:47.9716815Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:23:47.9717024Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9717271Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply5]>>
2025-01-10T13:23:47.9717276Z 
2025-01-10T13:23:47.9717367Z     def test_generate_plot_ply(
2025-01-10T13:23:47.9717538Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9717611Z     ):
2025-01-10T13:23:47.9717692Z         """
2025-01-10T13:23:47.9717828Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9717905Z     
2025-01-10T13:23:47.9718041Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9718238Z     
2025-01-10T13:23:47.9718324Z         Parameters:
2025-01-10T13:23:47.9718402Z         ----------
2025-01-10T13:23:47.9718567Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:23:47.9718705Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:23:47.9718807Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9718882Z         """
2025-01-10T13:23:47.9718987Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9719096Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9719275Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9719347Z     
2025-01-10T13:23:47.9719502Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9719600Z             expected_values = expected.get(
2025-01-10T13:23:47.9719701Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9719798Z             ).values.flatten()
2025-01-10T13:23:47.9719940Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:23:47.9720020Z     
2025-01-10T13:23:47.9720153Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9720255Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9720342Z                     expected_values,
2025-01-10T13:23:47.9720432Z                     actual_values,
2025-01-10T13:23:47.9720514Z                     rtol=0.3,
2025-01-10T13:23:47.9720600Z                     atol=3,
2025-01-10T13:23:47.9720675Z                 )
2025-01-10T13:23:47.9720680Z 
2025-01-10T13:23:47.9720832Z tardis/visualization/tools/tests/test_liv_plot.py:486: 
2025-01-10T13:23:47.9720947Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9720960Z 
2025-01-10T13:23:47.9721357Z args = (<function assert_allclose.<locals>.compare at 0x7fef4c947420>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9721453Z          0,   1,   1,   0,   0,   0,   0]))
2025-01-10T13:23:47.9721707Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9721712Z 
2025-01-10T13:23:47.9721797Z     @wraps(func)
2025-01-10T13:23:47.9721883Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9721978Z         with self._recreate_cm():
2025-01-10T13:23:47.9722068Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9722161Z E           AssertionError: 
2025-01-10T13:23:47.9722267Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9722379Z E           
2025-01-10T13:23:47.9722558Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:47.9722730Z E           Max absolute difference among violations: 26
2025-01-10T13:23:47.9722867Z E           Max relative difference among violations: 0.44067797
2025-01-10T13:23:47.9723317Z E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:47.9723420Z E                    1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:47.9723578Z E            DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:47.9723672Z E                    0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:47.9723677Z 
2025-01-10T13:23:47.9723877Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9724035Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9724284Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9724628Z 	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9724787Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9725289Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9725493Z ______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply7] _______
2025-01-10T13:23:47.9725498Z 
2025-01-10T13:23:47.9725758Z self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7fef617e5910>
2025-01-10T13:23:47.9726074Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7fef535509e0>
2025-01-10T13:23:47.9726173Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9726329Z     'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
2025-01-10T13:23:47.9726469Z               'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
2025-01-10T13:23:47.9726671Z }), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7fef2f2ff920>)
2025-01-10T13:23:47.9726924Z request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply7]>>
2025-01-10T13:23:47.9726929Z 
2025-01-10T13:23:47.9727018Z     def test_generate_plot_ply(
2025-01-10T13:23:47.9727191Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9727264Z     ):
2025-01-10T13:23:47.9727343Z         """
2025-01-10T13:23:47.9727473Z         Test for the generate_plot_mpl method in LIVPlotter.
2025-01-10T13:23:47.9727550Z     
2025-01-10T13:23:47.9727677Z         Compares generated plot data with regression data.
2025-01-10T13:23:47.9727755Z     
2025-01-10T13:23:47.9727835Z         Parameters:
2025-01-10T13:23:47.9727921Z         ----------
2025-01-10T13:23:47.9728130Z         generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
2025-01-10T13:23:47.9728379Z         plotter_generate_plot_mpl: The Plotly plotter fixture.
2025-01-10T13:23:47.9728508Z         request: Pytest's request fixture.
2025-01-10T13:23:47.9728588Z         """
2025-01-10T13:23:47.9728694Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9728802Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9728980Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9729051Z     
2025-01-10T13:23:47.9729206Z         for item in ["_species_name", "_color_list", "step_x", "step_y"]:
2025-01-10T13:23:47.9729307Z             expected_values = expected.get(
2025-01-10T13:23:47.9729403Z                 "plot_data_hdf/" + item
2025-01-10T13:23:47.9729489Z             ).values.flatten()
2025-01-10T13:23:47.9729635Z             actual_values = getattr(generate_plot_plotly_hdf, item)
2025-01-10T13:23:47.9729713Z     
2025-01-10T13:23:47.9729847Z             if np.issubdtype(expected_values.dtype, np.number):
2025-01-10T13:23:47.9729950Z                 np.testing.assert_allclose(
2025-01-10T13:23:47.9730038Z                     expected_values,
2025-01-10T13:23:47.9730255Z                     actual_values,
2025-01-10T13:23:47.9730340Z                     rtol=0.3,
2025-01-10T13:23:47.9730423Z                     atol=3,
2025-01-10T13:23:47.9730496Z                 )
2025-01-10T13:23:47.9730576Z             else:
2025-01-10T13:23:47.9730713Z                 assert np.array_equal(expected_values, actual_values)
2025-01-10T13:23:47.9730824Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9730933Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9731027Z             if data.stackgroup:
2025-01-10T13:23:47.9731106Z                 assert (
2025-01-10T13:23:47.9731199Z                     data.stackgroup
2025-01-10T13:23:47.9731279Z                     == getattr(
2025-01-10T13:23:47.9731401Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9731510Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9731590Z                     ).decode()
2025-01-10T13:23:47.9731681Z                 )
2025-01-10T13:23:47.9731763Z             if data.name:
2025-01-10T13:23:47.9731932Z                 assert (
2025-01-10T13:23:47.9732011Z                     data.name
2025-01-10T13:23:47.9732095Z                     == getattr(
2025-01-10T13:23:47.9732204Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9732305Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9732384Z                     ).decode()
2025-01-10T13:23:47.9732470Z                 )
2025-01-10T13:23:47.9732569Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9732654Z                 data.x,
2025-01-10T13:23:47.9732767Z                 expected.get(group + "x").values.flatten(),
2025-01-10T13:23:47.9732855Z                 rtol=0.3,
2025-01-10T13:23:47.9732940Z                 atol=3,
2025-01-10T13:23:47.9733154Z             )
2025-01-10T13:23:47.9733260Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9733337Z                 data.y,
2025-01-10T13:23:47.9733458Z                 expected.get(group + "y").values.flatten(),
2025-01-10T13:23:47.9733540Z                 rtol=0.3,
2025-01-10T13:23:47.9733622Z                 atol=3,
2025-01-10T13:23:47.9733694Z             )
2025-01-10T13:23:47.9733698Z 
2025-01-10T13:23:47.9733850Z tardis/visualization/tools/tests/test_liv_plot.py:518: 
2025-01-10T13:23:47.9733966Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9733971Z 
2025-01-10T13:23:47.9734489Z args = (<function assert_allclose.<locals>.compare at 0x7fef4c9454e0>, array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]), array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9734634Z         0,  0,  0]))
2025-01-10T13:23:47.9735073Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}
2025-01-10T13:23:47.9735084Z 
2025-01-10T13:23:47.9735200Z     @wraps(func)
2025-01-10T13:23:47.9735533Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9735676Z         with self._recreate_cm():
2025-01-10T13:23:47.9735845Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9735967Z E           AssertionError: 
2025-01-10T13:23:47.9736131Z E           Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:47.9736357Z E           
2025-01-10T13:23:47.9736491Z E           Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:47.9736679Z E           Max absolute difference among violations: 4
2025-01-10T13:23:47.9736847Z E           Max relative difference among violations: 1.33333333
2025-01-10T13:23:47.9737050Z E            ACTUAL: array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
2025-01-10T13:23:47.9737287Z E            DESIRED: array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:47.9737453Z E                   0,  0,  0])
2025-01-10T13:23:47.9737458Z 
2025-01-10T13:23:47.9748872Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9749374Z ---------------------------- Captured stdout setup -----------------------------
2025-01-10T13:23:47.9749688Z [[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
2025-01-10T13:23:47.9749956Z 	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
2025-01-10T13:23:47.9750121Z ------------------------------ Captured log setup ------------------------------
2025-01-10T13:23:47.9750441Z INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
2025-01-10T13:23:47.9750674Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data0] _
2025-01-10T13:23:47.9750680Z 
2025-01-10T13:23:47.9750949Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178cf50>
2025-01-10T13:23:47.9751270Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9751765Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef3c832de0>
2025-01-10T13:23:47.9752228Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data0]>>
2025-01-10T13:23:47.9752234Z 
2025-01-10T13:23:47.9752335Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9752410Z         self,
2025-01-10T13:23:47.9752512Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9752605Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9752689Z         request,
2025-01-10T13:23:47.9752761Z     ):
2025-01-10T13:23:47.9752879Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9753197Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9753296Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9753474Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9753568Z             plot_object = getattr(
2025-01-10T13:23:47.9753700Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9753784Z             )
2025-01-10T13:23:47.9753894Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9754056Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9754170Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9754267Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9754404Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9754478Z                 )
2025-01-10T13:23:47.9754483Z 
2025-01-10T13:23:47.9754642Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9754761Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9754766Z 
2025-01-10T13:23:47.9755240Z args = (<function assert_allclose.<locals>.compare at 0x7fef4b5b5620>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:23:47.9755362Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9755619Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9755625Z 
2025-01-10T13:23:47.9755709Z     @wraps(func)
2025-01-10T13:23:47.9755797Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9755890Z         with self._recreate_cm():
2025-01-10T13:23:47.9755980Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9756076Z E           AssertionError: 
2025-01-10T13:23:47.9756186Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9756275Z E           
2025-01-10T13:23:47.9756377Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:47.9756525Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:23:47.9756663Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:23:47.9756962Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9757065Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9757372Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9757492Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9757497Z 
2025-01-10T13:23:47.9757711Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9757939Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data1] _
2025-01-10T13:23:47.9757944Z 
2025-01-10T13:23:47.9758214Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178d670>
2025-01-10T13:23:47.9758527Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9758853Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef5386eed0>
2025-01-10T13:23:47.9759267Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data1]>>
2025-01-10T13:23:47.9759273Z 
2025-01-10T13:23:47.9759375Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9759450Z         self,
2025-01-10T13:23:47.9759552Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9759643Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9759725Z         request,
2025-01-10T13:23:47.9759798Z     ):
2025-01-10T13:23:47.9759911Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9760094Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9760187Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9760368Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9760455Z             plot_object = getattr(
2025-01-10T13:23:47.9760590Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9760669Z             )
2025-01-10T13:23:47.9760776Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9760936Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9761090Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9761259Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9761430Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9761507Z                 )
2025-01-10T13:23:47.9761512Z 
2025-01-10T13:23:47.9761669Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9761784Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9761794Z 
2025-01-10T13:23:47.9762259Z args = (<function assert_allclose.<locals>.compare at 0x7fef50d5fa60>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:23:47.9762375Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9762631Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9762636Z 
2025-01-10T13:23:47.9762717Z     @wraps(func)
2025-01-10T13:23:47.9762802Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9762894Z         with self._recreate_cm():
2025-01-10T13:23:47.9762983Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9763191Z E           AssertionError: 
2025-01-10T13:23:47.9763303Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9763383Z E           
2025-01-10T13:23:47.9763489Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:47.9763626Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:23:47.9763759Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:23:47.9764063Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9764162Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9764327Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9764421Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9764425Z 
2025-01-10T13:23:47.9764628Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9764853Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data2] _
2025-01-10T13:23:47.9764858Z 
2025-01-10T13:23:47.9765224Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178da90>
2025-01-10T13:23:47.9765599Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9765927Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2d173c20>
2025-01-10T13:23:47.9766380Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data2]>>
2025-01-10T13:23:47.9766386Z 
2025-01-10T13:23:47.9766487Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9766562Z         self,
2025-01-10T13:23:47.9766664Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9766755Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9766833Z         request,
2025-01-10T13:23:47.9766905Z     ):
2025-01-10T13:23:47.9767018Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9767204Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9767292Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9767474Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9767562Z             plot_object = getattr(
2025-01-10T13:23:47.9767695Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9767769Z             )
2025-01-10T13:23:47.9767880Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9768040Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9768153Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9768250Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9768386Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9768462Z                 )
2025-01-10T13:23:47.9768473Z 
2025-01-10T13:23:47.9768623Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9768744Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9768748Z 
2025-01-10T13:23:47.9769366Z args = (<function assert_allclose.<locals>.compare at 0x7fef2d1460c0>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:23:47.9769485Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9769743Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9769748Z 
2025-01-10T13:23:47.9769831Z     @wraps(func)
2025-01-10T13:23:47.9769916Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9770012Z         with self._recreate_cm():
2025-01-10T13:23:47.9770105Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9770191Z E           AssertionError: 
2025-01-10T13:23:47.9770304Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9770377Z E           
2025-01-10T13:23:47.9770482Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:47.9770623Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:23:47.9770756Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:23:47.9770922Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9771117Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9771283Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9771374Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9771378Z 
2025-01-10T13:23:47.9771585Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9771807Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data3] _
2025-01-10T13:23:47.9771812Z 
2025-01-10T13:23:47.9772084Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178db50>
2025-01-10T13:23:47.9772390Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9772715Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef30c2b560>
2025-01-10T13:23:47.9772995Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data3]>>
2025-01-10T13:23:47.9773232Z 
2025-01-10T13:23:47.9773345Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9773420Z         self,
2025-01-10T13:23:47.9773526Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9773621Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9773696Z         request,
2025-01-10T13:23:47.9773772Z     ):
2025-01-10T13:23:47.9773882Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9774071Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9774162Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9774403Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9774557Z             plot_object = getattr(
2025-01-10T13:23:47.9774705Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9774787Z             )
2025-01-10T13:23:47.9774895Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9775060Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9775172Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9775272Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9775402Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9775480Z                 )
2025-01-10T13:23:47.9775484Z 
2025-01-10T13:23:47.9775631Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9775748Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9775753Z 
2025-01-10T13:23:47.9776212Z args = (<function assert_allclose.<locals>.compare at 0x7fef50d5c9a0>, array([1.52953793e-06, 1.14288558e-06, 1.97234209e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
2025-01-10T13:23:47.9776318Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9776574Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9776584Z 
2025-01-10T13:23:47.9776662Z     @wraps(func)
2025-01-10T13:23:47.9776755Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9776843Z         with self._recreate_cm():
2025-01-10T13:23:47.9776938Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9777024Z E           AssertionError: 
2025-01-10T13:23:47.9777140Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9777214Z E           
2025-01-10T13:23:47.9777319Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:47.9777454Z E           Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:23:47.9777589Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:23:47.9777756Z E            ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9777982Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9778154Z E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9778245Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9778249Z 
2025-01-10T13:23:47.9778455Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9778678Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data4] _
2025-01-10T13:23:47.9778683Z 
2025-01-10T13:23:47.9778949Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178dc40>
2025-01-10T13:23:47.9779253Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9779580Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2d171f70>
2025-01-10T13:23:47.9779853Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data4]>>
2025-01-10T13:23:47.9779959Z 
2025-01-10T13:23:47.9780057Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9780136Z         self,
2025-01-10T13:23:47.9780236Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9780334Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9780408Z         request,
2025-01-10T13:23:47.9780484Z     ):
2025-01-10T13:23:47.9780592Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9780781Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9780869Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9781049Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9781137Z             plot_object = getattr(
2025-01-10T13:23:47.9781267Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9781340Z             )
2025-01-10T13:23:47.9781451Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9781683Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9781852Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9781962Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9782092Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9782172Z                 )
2025-01-10T13:23:47.9782176Z 
2025-01-10T13:23:47.9782324Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9782443Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9782448Z 
2025-01-10T13:23:47.9782917Z args = (<function assert_allclose.<locals>.compare at 0x7fef3d6ecfe0>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:23:47.9783184Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9783529Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9783540Z 
2025-01-10T13:23:47.9783619Z     @wraps(func)
2025-01-10T13:23:47.9783710Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9783798Z         with self._recreate_cm():
2025-01-10T13:23:47.9783894Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9783982Z E           AssertionError: 
2025-01-10T13:23:47.9784098Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9784172Z E           
2025-01-10T13:23:47.9784277Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:47.9784418Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:23:47.9784555Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:23:47.9784726Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9784820Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9785143Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9785234Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9785239Z 
2025-01-10T13:23:47.9785456Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9785678Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data5] _
2025-01-10T13:23:47.9785684Z 
2025-01-10T13:23:47.9785958Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178dd30>
2025-01-10T13:23:47.9786271Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9786603Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2d170890>
2025-01-10T13:23:47.9786885Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data5]>>
2025-01-10T13:23:47.9787001Z 
2025-01-10T13:23:47.9787099Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9787177Z         self,
2025-01-10T13:23:47.9787299Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9787453Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9787582Z         request,
2025-01-10T13:23:47.9787702Z     ):
2025-01-10T13:23:47.9787814Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9788001Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9788087Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9788267Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9788353Z             plot_object = getattr(
2025-01-10T13:23:47.9788483Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9788558Z             )
2025-01-10T13:23:47.9788659Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9788828Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9788939Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9789040Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9789169Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9789248Z                 )
2025-01-10T13:23:47.9789253Z 
2025-01-10T13:23:47.9789404Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9789535Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9789540Z 
2025-01-10T13:23:47.9790008Z args = (<function assert_allclose.<locals>.compare at 0x7fef4b5b6660>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:23:47.9790114Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9790375Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9790387Z 
2025-01-10T13:23:47.9790472Z     @wraps(func)
2025-01-10T13:23:47.9790559Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9790655Z         with self._recreate_cm():
2025-01-10T13:23:47.9790746Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9790842Z E           AssertionError: 
2025-01-10T13:23:47.9790952Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9791035Z E           
2025-01-10T13:23:47.9791138Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:47.9791284Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:23:47.9791467Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:23:47.9791728Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9791823Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9792099Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9792197Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9792203Z 
2025-01-10T13:23:47.9792406Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9792636Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data6] _
2025-01-10T13:23:47.9792640Z 
2025-01-10T13:23:47.9792910Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178ddf0>
2025-01-10T13:23:47.9793382Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9793707Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2d133350>
2025-01-10T13:23:47.9793990Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data6]>>
2025-01-10T13:23:47.9794000Z 
2025-01-10T13:23:47.9794098Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9794324Z         self,
2025-01-10T13:23:47.9794426Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9794518Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9794597Z         request,
2025-01-10T13:23:47.9794668Z     ):
2025-01-10T13:23:47.9794782Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9794961Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9795055Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9795229Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9795321Z             plot_object = getattr(
2025-01-10T13:23:47.9795446Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9795523Z             )
2025-01-10T13:23:47.9795630Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9795787Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9795907Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9796006Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9796142Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9796216Z                 )
2025-01-10T13:23:47.9796221Z 
2025-01-10T13:23:47.9796373Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9796487Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9796492Z 
2025-01-10T13:23:47.9796956Z args = (<function assert_allclose.<locals>.compare at 0x7fef4b5b65c0>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:23:47.9797065Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9797472Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9797492Z 
2025-01-10T13:23:47.9797577Z     @wraps(func)
2025-01-10T13:23:47.9797665Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9797759Z         with self._recreate_cm():
2025-01-10T13:23:47.9797850Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9797941Z E           AssertionError: 
2025-01-10T13:23:47.9798049Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9798128Z E           
2025-01-10T13:23:47.9798227Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:47.9798371Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:23:47.9798513Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:23:47.9798680Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9798775Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9798944Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9799179Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9799185Z 
2025-01-10T13:23:47.9799385Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9799610Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data7] _
2025-01-10T13:23:47.9799615Z 
2025-01-10T13:23:47.9799879Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178deb0>
2025-01-10T13:23:47.9800187Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9800515Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b546ff0>
2025-01-10T13:23:47.9800791Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data7]>>
2025-01-10T13:23:47.9800796Z 
2025-01-10T13:23:47.9800899Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9801056Z         self,
2025-01-10T13:23:47.9801159Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9801304Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9801444Z         request,
2025-01-10T13:23:47.9801540Z     ):
2025-01-10T13:23:47.9801656Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9801837Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9801963Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9802141Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9802229Z             plot_object = getattr(
2025-01-10T13:23:47.9802360Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9802433Z             )
2025-01-10T13:23:47.9802537Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9802697Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9802819Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9802917Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9803157Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9803233Z                 )
2025-01-10T13:23:47.9803238Z 
2025-01-10T13:23:47.9803393Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9803508Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9803519Z 
2025-01-10T13:23:47.9803978Z args = (<function assert_allclose.<locals>.compare at 0x7fef4b5b5080>, array([3.52269417e-06, 1.63497091e-06, 3.37014136e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
2025-01-10T13:23:47.9804090Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9804342Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9804351Z 
2025-01-10T13:23:47.9804444Z     @wraps(func)
2025-01-10T13:23:47.9804529Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9804622Z         with self._recreate_cm():
2025-01-10T13:23:47.9804713Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9804806Z E           AssertionError: 
2025-01-10T13:23:47.9804914Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9804994Z E           
2025-01-10T13:23:47.9805100Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:47.9805241Z E           Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:23:47.9805380Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:23:47.9805549Z E            ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9805643Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9805808Z E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:23:47.9806038Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9806043Z 
2025-01-10T13:23:47.9806243Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9806470Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data8] _
2025-01-10T13:23:47.9806475Z 
2025-01-10T13:23:47.9806810Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178df70>
2025-01-10T13:23:47.9807204Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9807535Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef53853b60>
2025-01-10T13:23:47.9807818Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data8]>>
2025-01-10T13:23:47.9807824Z 
2025-01-10T13:23:47.9807928Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9808008Z         self,
2025-01-10T13:23:47.9808245Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9808336Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9808416Z         request,
2025-01-10T13:23:47.9808487Z     ):
2025-01-10T13:23:47.9808604Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9808793Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9808881Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9809063Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9809149Z             plot_object = getattr(
2025-01-10T13:23:47.9809285Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9809358Z             )
2025-01-10T13:23:47.9809466Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9809628Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9809747Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9809849Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9809982Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9810057Z                 )
2025-01-10T13:23:47.9810067Z 
2025-01-10T13:23:47.9810217Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9810338Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9810343Z 
2025-01-10T13:23:47.9810808Z args = (<function assert_allclose.<locals>.compare at 0x7fef4b5b5da0>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:23:47.9810918Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9811174Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9811183Z 
2025-01-10T13:23:47.9811267Z     @wraps(func)
2025-01-10T13:23:47.9811357Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9811520Z         with self._recreate_cm():
2025-01-10T13:23:47.9811689Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9811779Z E           AssertionError: 
2025-01-10T13:23:47.9811896Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9811970Z E           
2025-01-10T13:23:47.9812081Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:47.9812221Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:23:47.9812355Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:23:47.9812524Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9812620Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9812791Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9812978Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9812987Z 
2025-01-10T13:23:47.9813303Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9813533Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data9] _
2025-01-10T13:23:47.9813538Z 
2025-01-10T13:23:47.9813811Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178e030>
2025-01-10T13:23:47.9814118Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9814450Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef3c831400>
2025-01-10T13:23:47.9814729Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data9]>>
2025-01-10T13:23:47.9814734Z 
2025-01-10T13:23:47.9814837Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9814914Z         self,
2025-01-10T13:23:47.9815019Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9815245Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9815320Z         request,
2025-01-10T13:23:47.9815399Z     ):
2025-01-10T13:23:47.9815509Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9815695Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9815796Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9816108Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9816203Z             plot_object = getattr(
2025-01-10T13:23:47.9816337Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9816410Z             )
2025-01-10T13:23:47.9816518Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9816681Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9816805Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9816916Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9817054Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9817136Z                 )
2025-01-10T13:23:47.9817141Z 
2025-01-10T13:23:47.9817289Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9817415Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9817420Z 
2025-01-10T13:23:47.9817886Z args = (<function assert_allclose.<locals>.compare at 0x7fef4b5b49a0>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:23:47.9817999Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9818257Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9818267Z 
2025-01-10T13:23:47.9818349Z     @wraps(func)
2025-01-10T13:23:47.9818445Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9818537Z         with self._recreate_cm():
2025-01-10T13:23:47.9818634Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9818723Z E           AssertionError: 
2025-01-10T13:23:47.9818840Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9818917Z E           
2025-01-10T13:23:47.9819021Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:47.9819159Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:23:47.9819296Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:23:47.9819467Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9819562Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9819731Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9819822Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9819978Z 
2025-01-10T13:23:47.9820195Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9820421Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data10] _
2025-01-10T13:23:47.9820426Z 
2025-01-10T13:23:47.9820709Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178e0f0>
2025-01-10T13:23:47.9821016Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9821485Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2d1708c0>
2025-01-10T13:23:47.9821773Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data10]>>
2025-01-10T13:23:47.9821788Z 
2025-01-10T13:23:47.9821883Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9821962Z         self,
2025-01-10T13:23:47.9822066Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9822286Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9822361Z         request,
2025-01-10T13:23:47.9822437Z     ):
2025-01-10T13:23:47.9822546Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9822733Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9822819Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9822997Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9823230Z             plot_object = getattr(
2025-01-10T13:23:47.9823364Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9823436Z             )
2025-01-10T13:23:47.9823544Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9823710Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9823819Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9823925Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9824057Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9824136Z                 )
2025-01-10T13:23:47.9824140Z 
2025-01-10T13:23:47.9824287Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9824408Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9824414Z 
2025-01-10T13:23:47.9824879Z args = (<function assert_allclose.<locals>.compare at 0x7fef50d5c360>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:23:47.9824989Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9825248Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9825254Z 
2025-01-10T13:23:47.9825329Z     @wraps(func)
2025-01-10T13:23:47.9825425Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9825513Z         with self._recreate_cm():
2025-01-10T13:23:47.9825611Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9825696Z E           AssertionError: 
2025-01-10T13:23:47.9825811Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9825885Z E           
2025-01-10T13:23:47.9825994Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:47.9826127Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:23:47.9826262Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:23:47.9826438Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9826533Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9826824Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9826950Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9827089Z 
2025-01-10T13:23:47.9827310Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9827545Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data11] _
2025-01-10T13:23:47.9827551Z 
2025-01-10T13:23:47.9827820Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178e1b0>
2025-01-10T13:23:47.9828128Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9828458Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b500a70>
2025-01-10T13:23:47.9828743Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data11]>>
2025-01-10T13:23:47.9828748Z 
2025-01-10T13:23:47.9828841Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9828921Z         self,
2025-01-10T13:23:47.9829024Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9829128Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9829316Z         request,
2025-01-10T13:23:47.9829396Z     ):
2025-01-10T13:23:47.9829504Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9829691Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9829778Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9829957Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9830046Z             plot_object = getattr(
2025-01-10T13:23:47.9830178Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9830256Z             )
2025-01-10T13:23:47.9830357Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9830521Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9830630Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9830731Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9830864Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9830948Z                 )
2025-01-10T13:23:47.9830953Z 
2025-01-10T13:23:47.9831098Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9831219Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9831223Z 
2025-01-10T13:23:47.9831685Z args = (<function assert_allclose.<locals>.compare at 0x7fef2d144d60>, array([1.83008477e+46, 1.36745709e+46, 2.35989781e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
2025-01-10T13:23:47.9831794Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9832087Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9832096Z 
2025-01-10T13:23:47.9832234Z     @wraps(func)
2025-01-10T13:23:47.9832366Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9832463Z         with self._recreate_cm():
2025-01-10T13:23:47.9832560Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9832647Z E           AssertionError: 
2025-01-10T13:23:47.9832761Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9832837Z E           
2025-01-10T13:23:47.9832943Z E           Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:47.9833182Z E           Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:23:47.9833321Z E           Max relative difference among violations: 4.03140103
2025-01-10T13:23:47.9833493Z E            ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9833580Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9833751Z E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9833837Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9833842Z 
2025-01-10T13:23:47.9834183Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9834411Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data12] _
2025-01-10T13:23:47.9834415Z 
2025-01-10T13:23:47.9834683Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178e270>
2025-01-10T13:23:47.9834992Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9835315Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b500890>
2025-01-10T13:23:47.9835598Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data12]>>
2025-01-10T13:23:47.9835603Z 
2025-01-10T13:23:47.9835697Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9835776Z         self,
2025-01-10T13:23:47.9835907Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9836078Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9836206Z         request,
2025-01-10T13:23:47.9836435Z     ):
2025-01-10T13:23:47.9836545Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9836733Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9836825Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9836996Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9837090Z             plot_object = getattr(
2025-01-10T13:23:47.9837215Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9837295Z             )
2025-01-10T13:23:47.9837399Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9837566Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9837672Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9837772Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9837902Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9837989Z                 )
2025-01-10T13:23:47.9837994Z 
2025-01-10T13:23:47.9838139Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9838259Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9838264Z 
2025-01-10T13:23:47.9838734Z args = (<function assert_allclose.<locals>.compare at 0x7fef2d144900>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:23:47.9838837Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9839097Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9839102Z 
2025-01-10T13:23:47.9839179Z     @wraps(func)
2025-01-10T13:23:47.9839269Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9839358Z         with self._recreate_cm():
2025-01-10T13:23:47.9839457Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9839546Z E           AssertionError: 
2025-01-10T13:23:47.9839686Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9839822Z E           
2025-01-10T13:23:47.9839986Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:47.9840139Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:23:47.9840275Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:23:47.9840454Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9840544Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9840718Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9840804Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9840809Z 
2025-01-10T13:23:47.9841019Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9841367Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data13] _
2025-01-10T13:23:47.9841378Z 
2025-01-10T13:23:47.9841658Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178e330>
2025-01-10T13:23:47.9841980Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9842305Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5ef140>
2025-01-10T13:23:47.9842591Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data13]>>
2025-01-10T13:23:47.9842596Z 
2025-01-10T13:23:47.9842691Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9842769Z         self,
2025-01-10T13:23:47.9842867Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9842961Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9843188Z         request,
2025-01-10T13:23:47.9843270Z     ):
2025-01-10T13:23:47.9843532Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9843714Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9843806Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9843981Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9844072Z             plot_object = getattr(
2025-01-10T13:23:47.9844196Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9844272Z             )
2025-01-10T13:23:47.9844372Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9844539Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9844645Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9844747Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9844875Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9844961Z                 )
2025-01-10T13:23:47.9844965Z 
2025-01-10T13:23:47.9845119Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9845243Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9845251Z 
2025-01-10T13:23:47.9845869Z args = (<function assert_allclose.<locals>.compare at 0x7fef4b5b6840>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:23:47.9845977Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9846239Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9846245Z 
2025-01-10T13:23:47.9846321Z     @wraps(func)
2025-01-10T13:23:47.9846412Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9846503Z         with self._recreate_cm():
2025-01-10T13:23:47.9846599Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9846695Z E           AssertionError: 
2025-01-10T13:23:47.9846805Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9846884Z E           
2025-01-10T13:23:47.9846985Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:47.9847131Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:23:47.9847264Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:23:47.9847436Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9847526Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9847697Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9847785Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9847796Z 
2025-01-10T13:23:47.9847997Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9848389Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data14] _
2025-01-10T13:23:47.9848398Z 
2025-01-10T13:23:47.9848662Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178e4b0>
2025-01-10T13:23:47.9848985Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9849453Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2cd9ee10>
2025-01-10T13:23:47.9849739Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data14]>>
2025-01-10T13:23:47.9849744Z 
2025-01-10T13:23:47.9849839Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9849917Z         self,
2025-01-10T13:23:47.9850020Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9850112Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9850191Z         request,
2025-01-10T13:23:47.9850267Z     ):
2025-01-10T13:23:47.9850381Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9850663Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9850755Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9850929Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9851022Z             plot_object = getattr(
2025-01-10T13:23:47.9851147Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9851224Z             )
2025-01-10T13:23:47.9851324Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9851490Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9851597Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9851700Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9851832Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9851907Z                 )
2025-01-10T13:23:47.9851915Z 
2025-01-10T13:23:47.9852065Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9852178Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9852183Z 
2025-01-10T13:23:47.9852647Z args = (<function assert_allclose.<locals>.compare at 0x7fef4b5b5760>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:23:47.9852750Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9853010Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9853138Z 
2025-01-10T13:23:47.9853225Z     @wraps(func)
2025-01-10T13:23:47.9853310Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9853401Z         with self._recreate_cm():
2025-01-10T13:23:47.9853489Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9853587Z E           AssertionError: 
2025-01-10T13:23:47.9853699Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9853777Z E           
2025-01-10T13:23:47.9853880Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:47.9854023Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:23:47.9854221Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:23:47.9854460Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9854552Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9854726Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9854818Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9854823Z 
2025-01-10T13:23:47.9855026Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9855253Z _ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data15] _
2025-01-10T13:23:47.9855391Z 
2025-01-10T13:23:47.9855661Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178e5d0>
2025-01-10T13:23:47.9855971Z plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>
2025-01-10T13:23:47.9856292Z calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2d171340>
2025-01-10T13:23:47.9856575Z request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data15]>>
2025-01-10T13:23:47.9856580Z 
2025-01-10T13:23:47.9856679Z     def test_calculate_plotting_data(
2025-01-10T13:23:47.9856754Z         self,
2025-01-10T13:23:47.9856854Z         plotter_calculate_plotting_data,
2025-01-10T13:23:47.9856944Z         calculate_plotting_data_hdf,
2025-01-10T13:23:47.9857023Z         request,
2025-01-10T13:23:47.9857094Z     ):
2025-01-10T13:23:47.9857209Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9857500Z         expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
2025-01-10T13:23:47.9857593Z         group = "plot_data_hdf/"
2025-01-10T13:23:47.9857766Z         for attribute_type, attribute_name in self.plotting_data_attributes:
2025-01-10T13:23:47.9857857Z             plot_object = getattr(
2025-01-10T13:23:47.9858073Z                 plotter_calculate_plotting_data, attribute_name
2025-01-10T13:23:47.9858179Z             )
2025-01-10T13:23:47.9858290Z             if attribute_type == "attributes_np":
2025-01-10T13:23:47.9858450Z                 if isinstance(plot_object, astropy.units.quantity.Quantity):
2025-01-10T13:23:47.9858561Z                     plot_object = plot_object.cgs.value
2025-01-10T13:23:47.9858656Z >               np.testing.assert_allclose(
2025-01-10T13:23:47.9858787Z                     plot_object, expected.get(group + attribute_name)
2025-01-10T13:23:47.9858862Z                 )
2025-01-10T13:23:47.9858871Z 
2025-01-10T13:23:47.9859026Z tardis/visualization/tools/tests/test_sdec_plot.py:227: 
2025-01-10T13:23:47.9859139Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9859144Z 
2025-01-10T13:23:47.9859610Z args = (<function assert_allclose.<locals>.compare at 0x7fef2d144040>, array([4.21488660e+46, 1.95623482e+46, 4.03235790e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
2025-01-10T13:23:47.9859718Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9859968Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9859974Z 
2025-01-10T13:23:47.9860056Z     @wraps(func)
2025-01-10T13:23:47.9860140Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9860232Z         with self._recreate_cm():
2025-01-10T13:23:47.9860321Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9860412Z E           AssertionError: 
2025-01-10T13:23:47.9860524Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9860608Z E           
2025-01-10T13:23:47.9860710Z E           Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:47.9860852Z E           Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:23:47.9860982Z E           Max relative difference among violations: 53038.42648305
2025-01-10T13:23:47.9861155Z E            ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9861246Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9861463Z E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:23:47.9861609Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9861616Z 
2025-01-10T13:23:47.9861917Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9862300Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply0] ______
2025-01-10T13:23:47.9862414Z 
2025-01-10T13:23:47.9862702Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178d5b0>
2025-01-10T13:23:47.9863208Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2fa74620>
2025-01-10T13:23:47.9863367Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9863465Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9863577Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9863720Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:23:47.9863938Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9864183Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply0]>>
2025-01-10T13:23:47.9864188Z 
2025-01-10T13:23:47.9864285Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9864456Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9864677Z     ):
2025-01-10T13:23:47.9864778Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9864891Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9865071Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9865141Z     
2025-01-10T13:23:47.9865257Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9865355Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9865505Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9865615Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9865694Z             )
2025-01-10T13:23:47.9865769Z     
2025-01-10T13:23:47.9865878Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9865986Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9866080Z             if data.stackgroup:
2025-01-10T13:23:47.9866163Z                 assert (
2025-01-10T13:23:47.9866260Z                     data.stackgroup
2025-01-10T13:23:47.9866338Z                     == getattr(
2025-01-10T13:23:47.9866456Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9866562Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9866641Z                     ).decode()
2025-01-10T13:23:47.9866719Z                 )
2025-01-10T13:23:47.9866801Z             if data.name:
2025-01-10T13:23:47.9866886Z                 assert (
2025-01-10T13:23:47.9866965Z                     data.name
2025-01-10T13:23:47.9867050Z                     == getattr(
2025-01-10T13:23:47.9867211Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9867389Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9867477Z                     ).decode()
2025-01-10T13:23:47.9867558Z                 )
2025-01-10T13:23:47.9867653Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9867798Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9867875Z             )
2025-01-10T13:23:47.9867972Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9868093Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9868173Z             )
2025-01-10T13:23:47.9868177Z 
2025-01-10T13:23:47.9868333Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9868449Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9868454Z 
2025-01-10T13:23:47.9868925Z args = (<function assert_allclose.<locals>.compare at 0x7fef2fa02340>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:23:47.9869029Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9869291Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9869430Z 
2025-01-10T13:23:47.9869511Z     @wraps(func)
2025-01-10T13:23:47.9869602Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9869697Z         with self._recreate_cm():
2025-01-10T13:23:47.9869787Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9869877Z E           AssertionError: 
2025-01-10T13:23:47.9869989Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9870070Z E           
2025-01-10T13:23:47.9870171Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:47.9870316Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:23:47.9870446Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:23:47.9870623Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9870712Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9870887Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9871083Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9871094Z 
2025-01-10T13:23:47.9871300Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9871511Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply1] ______
2025-01-10T13:23:47.9871515Z 
2025-01-10T13:23:47.9871785Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178e9c0>
2025-01-10T13:23:47.9872108Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2fa74f80>
2025-01-10T13:23:47.9872206Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9872301Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9872405Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9872512Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:23:47.9872717Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9872974Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply1]>>
2025-01-10T13:23:47.9872980Z 
2025-01-10T13:23:47.9873233Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9873404Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9873482Z     ):
2025-01-10T13:23:47.9873579Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9873694Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9873871Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9873948Z     
2025-01-10T13:23:47.9874058Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9874161Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9874304Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9874419Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9874505Z             )
2025-01-10T13:23:47.9874580Z     
2025-01-10T13:23:47.9874687Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9874796Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9874888Z             if data.stackgroup:
2025-01-10T13:23:47.9874965Z                 assert (
2025-01-10T13:23:47.9875055Z                     data.stackgroup
2025-01-10T13:23:47.9875132Z                     == getattr(
2025-01-10T13:23:47.9875249Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9875350Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9875432Z                     ).decode()
2025-01-10T13:23:47.9875507Z                 )
2025-01-10T13:23:47.9875593Z             if data.name:
2025-01-10T13:23:47.9875670Z                 assert (
2025-01-10T13:23:47.9875756Z                     data.name
2025-01-10T13:23:47.9875834Z                     == getattr(
2025-01-10T13:23:47.9876068Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9876170Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9876249Z                     ).decode()
2025-01-10T13:23:47.9876328Z                 )
2025-01-10T13:23:47.9876422Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9876556Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9876629Z             )
2025-01-10T13:23:47.9876726Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9876846Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9876928Z             )
2025-01-10T13:23:47.9876932Z 
2025-01-10T13:23:47.9877080Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9877199Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9877204Z 
2025-01-10T13:23:47.9877671Z args = (<function assert_allclose.<locals>.compare at 0x7fef3d6ecfe0>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:23:47.9877913Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9878178Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9878184Z 
2025-01-10T13:23:47.9878260Z     @wraps(func)
2025-01-10T13:23:47.9878349Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9878437Z         with self._recreate_cm():
2025-01-10T13:23:47.9878532Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9878617Z E           AssertionError: 
2025-01-10T13:23:47.9878729Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9878802Z E           
2025-01-10T13:23:47.9878906Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:47.9879044Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:23:47.9879180Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:23:47.9879360Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9879448Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9879625Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9879710Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9879715Z 
2025-01-10T13:23:47.9879919Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9880122Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply2] ______
2025-01-10T13:23:47.9880127Z 
2025-01-10T13:23:47.9880396Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178ee10>
2025-01-10T13:23:47.9880717Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2fa2f9b0>
2025-01-10T13:23:47.9880816Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9880914Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9881016Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9881123Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:23:47.9881327Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9881571Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply2]>>
2025-01-10T13:23:47.9881576Z 
2025-01-10T13:23:47.9881664Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9881838Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9881909Z     ):
2025-01-10T13:23:47.9882009Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9882121Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9882292Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9882457Z     
2025-01-10T13:23:47.9882566Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9882670Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9882812Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9882926Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9882996Z             )
2025-01-10T13:23:47.9883175Z     
2025-01-10T13:23:47.9883278Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9883388Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9883474Z             if data.stackgroup:
2025-01-10T13:23:47.9883558Z                 assert (
2025-01-10T13:23:47.9883643Z                     data.stackgroup
2025-01-10T13:23:47.9883726Z                     == getattr(
2025-01-10T13:23:47.9883838Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9883934Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9884020Z                     ).decode()
2025-01-10T13:23:47.9884211Z                 )
2025-01-10T13:23:47.9884296Z             if data.name:
2025-01-10T13:23:47.9884372Z                 assert (
2025-01-10T13:23:47.9884454Z                     data.name
2025-01-10T13:23:47.9884532Z                     == getattr(
2025-01-10T13:23:47.9884641Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9884734Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9884818Z                     ).decode()
2025-01-10T13:23:47.9884891Z                 )
2025-01-10T13:23:47.9884991Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9885119Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9885197Z             )
2025-01-10T13:23:47.9885288Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9885413Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9885490Z             )
2025-01-10T13:23:47.9885498Z 
2025-01-10T13:23:47.9885641Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9885765Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9885770Z 
2025-01-10T13:23:47.9886527Z args = (<function assert_allclose.<locals>.compare at 0x7fef2fa03420>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:23:47.9886713Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9887100Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9887117Z 
2025-01-10T13:23:47.9887206Z     @wraps(func)
2025-01-10T13:23:47.9887298Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9887386Z         with self._recreate_cm():
2025-01-10T13:23:47.9887480Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9887565Z E           AssertionError: 
2025-01-10T13:23:47.9887694Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9887772Z E           
2025-01-10T13:23:47.9887877Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:47.9888017Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:23:47.9888151Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:23:47.9888321Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9888417Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9888589Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9888682Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9888686Z 
2025-01-10T13:23:47.9888894Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9889097Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply3] ______
2025-01-10T13:23:47.9889287Z 
2025-01-10T13:23:47.9889581Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178eed0>
2025-01-10T13:23:47.9889896Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef2d171670>
2025-01-10T13:23:47.9889998Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9890086Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9890196Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9890296Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:23:47.9890509Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9890754Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply3]>>
2025-01-10T13:23:47.9890759Z 
2025-01-10T13:23:47.9890848Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9891021Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9891097Z     ):
2025-01-10T13:23:47.9891288Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9891397Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9891575Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9891646Z     
2025-01-10T13:23:47.9891765Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9891865Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9892013Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9892128Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9892201Z             )
2025-01-10T13:23:47.9892275Z     
2025-01-10T13:23:47.9892376Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9892486Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9892575Z             if data.stackgroup:
2025-01-10T13:23:47.9892661Z                 assert (
2025-01-10T13:23:47.9892749Z                     data.stackgroup
2025-01-10T13:23:47.9892836Z                     == getattr(
2025-01-10T13:23:47.9892944Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9893231Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9893364Z                     ).decode()
2025-01-10T13:23:47.9893446Z                 )
2025-01-10T13:23:47.9893529Z             if data.name:
2025-01-10T13:23:47.9893609Z                 assert (
2025-01-10T13:23:47.9893688Z                     data.name
2025-01-10T13:23:47.9893770Z                     == getattr(
2025-01-10T13:23:47.9893881Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9893974Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9894057Z                     ).decode()
2025-01-10T13:23:47.9894129Z                 )
2025-01-10T13:23:47.9894227Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9894363Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9894444Z             )
2025-01-10T13:23:47.9894534Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9894660Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9894733Z             )
2025-01-10T13:23:47.9894738Z 
2025-01-10T13:23:47.9894891Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9895009Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9895018Z 
2025-01-10T13:23:47.9895488Z args = (<function assert_allclose.<locals>.compare at 0x7fef2fa03380>, array([7.64220430e-15, 3.88447983e-15, 1.58669305e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
2025-01-10T13:23:47.9895592Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9895849Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9895984Z 
2025-01-10T13:23:47.9896072Z     @wraps(func)
2025-01-10T13:23:47.9896159Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9896251Z         with self._recreate_cm():
2025-01-10T13:23:47.9896340Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9896433Z E           AssertionError: 
2025-01-10T13:23:47.9896542Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9896620Z E           
2025-01-10T13:23:47.9896725Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:47.9896867Z E           Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:23:47.9897000Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:23:47.9897173Z E            ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9897265Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9897433Z E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9897528Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9897662Z 
2025-01-10T13:23:47.9897875Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9898082Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply4] ______
2025-01-10T13:23:47.9898087Z 
2025-01-10T13:23:47.9898360Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178d370>
2025-01-10T13:23:47.9898676Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef566eb530>
2025-01-10T13:23:47.9898776Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9898864Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9898974Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9899074Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:23:47.9899283Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9899530Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply4]>>
2025-01-10T13:23:47.9899535Z 
2025-01-10T13:23:47.9899627Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9899792Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9899870Z     ):
2025-01-10T13:23:47.9899970Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9900078Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9900256Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9900326Z     
2025-01-10T13:23:47.9900441Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9900540Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9900687Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9900793Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9900872Z             )
2025-01-10T13:23:47.9900947Z     
2025-01-10T13:23:47.9901053Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9901158Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9901250Z             if data.stackgroup:
2025-01-10T13:23:47.9901328Z                 assert (
2025-01-10T13:23:47.9901416Z                     data.stackgroup
2025-01-10T13:23:47.9901501Z                     == getattr(
2025-01-10T13:23:47.9901608Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9901711Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9901790Z                     ).decode()
2025-01-10T13:23:47.9901904Z                 )
2025-01-10T13:23:47.9901985Z             if data.name:
2025-01-10T13:23:47.9902065Z                 assert (
2025-01-10T13:23:47.9902143Z                     data.name
2025-01-10T13:23:47.9902225Z                     == getattr(
2025-01-10T13:23:47.9902330Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9902529Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9902606Z                     ).decode()
2025-01-10T13:23:47.9902687Z                 )
2025-01-10T13:23:47.9902782Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9902912Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9902989Z             )
2025-01-10T13:23:47.9903253Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9903384Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9903458Z             )
2025-01-10T13:23:47.9903462Z 
2025-01-10T13:23:47.9903618Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9903731Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9903736Z 
2025-01-10T13:23:47.9904205Z args = (<function assert_allclose.<locals>.compare at 0x7fef566fdd00>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:23:47.9904433Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9904690Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9904695Z 
2025-01-10T13:23:47.9904776Z     @wraps(func)
2025-01-10T13:23:47.9904859Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9904950Z         with self._recreate_cm():
2025-01-10T13:23:47.9905042Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9905133Z E           AssertionError: 
2025-01-10T13:23:47.9905241Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9905318Z E           
2025-01-10T13:23:47.9905418Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:47.9905565Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:23:47.9905698Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:23:47.9905879Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9905969Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9906145Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9906236Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9906241Z 
2025-01-10T13:23:47.9906442Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9906648Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply5] ______
2025-01-10T13:23:47.9906653Z 
2025-01-10T13:23:47.9906920Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178c8f0>
2025-01-10T13:23:47.9907237Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5037a0>
2025-01-10T13:23:47.9907334Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9907430Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9907536Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9907640Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:23:47.9907852Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9908092Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply5]>>
2025-01-10T13:23:47.9908097Z 
2025-01-10T13:23:47.9908192Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9908360Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9908440Z     ):
2025-01-10T13:23:47.9908535Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9908648Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9908821Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9908897Z     
2025-01-10T13:23:47.9909133Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9909241Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9909389Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9909498Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9909576Z             )
2025-01-10T13:23:47.9909649Z     
2025-01-10T13:23:47.9909758Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9909863Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9909955Z             if data.stackgroup:
2025-01-10T13:23:47.9910032Z                 assert (
2025-01-10T13:23:47.9910121Z                     data.stackgroup
2025-01-10T13:23:47.9910199Z                     == getattr(
2025-01-10T13:23:47.9910311Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9910410Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9910494Z                     ).decode()
2025-01-10T13:23:47.9910571Z                 )
2025-01-10T13:23:47.9910742Z             if data.name:
2025-01-10T13:23:47.9910817Z                 assert (
2025-01-10T13:23:47.9910903Z                     data.name
2025-01-10T13:23:47.9910987Z                     == getattr(
2025-01-10T13:23:47.9911091Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9911192Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9911269Z                     ).decode()
2025-01-10T13:23:47.9911345Z                 )
2025-01-10T13:23:47.9911437Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9911569Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9911644Z             )
2025-01-10T13:23:47.9911739Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9911859Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9911937Z             )
2025-01-10T13:23:47.9911942Z 
2025-01-10T13:23:47.9912090Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9912214Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9912219Z 
2025-01-10T13:23:47.9912684Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f2518a0>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:23:47.9912785Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9913213Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9913225Z 
2025-01-10T13:23:47.9913312Z     @wraps(func)
2025-01-10T13:23:47.9913403Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9913492Z         with self._recreate_cm():
2025-01-10T13:23:47.9913586Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9913671Z E           AssertionError: 
2025-01-10T13:23:47.9913794Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9913876Z E           
2025-01-10T13:23:47.9913978Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:47.9914122Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:23:47.9914254Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:23:47.9914429Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9914518Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9914692Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9914777Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9914781Z 
2025-01-10T13:23:47.9914985Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9915187Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply6] ______
2025-01-10T13:23:47.9915317Z 
2025-01-10T13:23:47.9915586Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f200>
2025-01-10T13:23:47.9915912Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5ec4a0>
2025-01-10T13:23:47.9916010Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9916103Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9916206Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9916310Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:23:47.9916515Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9916758Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply6]>>
2025-01-10T13:23:47.9916763Z 
2025-01-10T13:23:47.9916851Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9917024Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9917103Z     ):
2025-01-10T13:23:47.9917309Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9917421Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9917593Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9917668Z     
2025-01-10T13:23:47.9917778Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9917879Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9918022Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9918134Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9918205Z             )
2025-01-10T13:23:47.9918282Z     
2025-01-10T13:23:47.9918382Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9918491Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9918577Z             if data.stackgroup:
2025-01-10T13:23:47.9918660Z                 assert (
2025-01-10T13:23:47.9918753Z                     data.stackgroup
2025-01-10T13:23:47.9918834Z                     == getattr(
2025-01-10T13:23:47.9918945Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9919044Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9919127Z                     ).decode()
2025-01-10T13:23:47.9919200Z                 )
2025-01-10T13:23:47.9919285Z             if data.name:
2025-01-10T13:23:47.9919359Z                 assert (
2025-01-10T13:23:47.9919442Z                     data.name
2025-01-10T13:23:47.9919519Z                     == getattr(
2025-01-10T13:23:47.9919626Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9919718Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9919802Z                     ).decode()
2025-01-10T13:23:47.9919874Z                 )
2025-01-10T13:23:47.9919971Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9920101Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9920180Z             )
2025-01-10T13:23:47.9920277Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9920396Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9920475Z             )
2025-01-10T13:23:47.9920479Z 
2025-01-10T13:23:47.9920623Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9920742Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9920747Z 
2025-01-10T13:23:47.9921211Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f250680>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:23:47.9921316Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9921582Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9921701Z 
2025-01-10T13:23:47.9921784Z     @wraps(func)
2025-01-10T13:23:47.9921876Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9921963Z         with self._recreate_cm():
2025-01-10T13:23:47.9922056Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9922141Z E           AssertionError: 
2025-01-10T13:23:47.9922253Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9922325Z E           
2025-01-10T13:23:47.9922431Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:47.9922571Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:23:47.9922711Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:23:47.9922879Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9922973Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9923327Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9923425Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9923551Z 
2025-01-10T13:23:47.9923759Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9923961Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply7] ______
2025-01-10T13:23:47.9923965Z 
2025-01-10T13:23:47.9924233Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f2c0>
2025-01-10T13:23:47.9924546Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5e8800>
2025-01-10T13:23:47.9924646Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9924735Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9924842Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9924946Z               '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
2025-01-10T13:23:47.9925150Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9925397Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply7]>>
2025-01-10T13:23:47.9925406Z 
2025-01-10T13:23:47.9925492Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9925663Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9925733Z     ):
2025-01-10T13:23:47.9925835Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9925941Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9926119Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9926188Z     
2025-01-10T13:23:47.9926302Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9926402Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9926543Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9926658Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9926733Z             )
2025-01-10T13:23:47.9926811Z     
2025-01-10T13:23:47.9926916Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9927024Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9927110Z             if data.stackgroup:
2025-01-10T13:23:47.9927193Z                 assert (
2025-01-10T13:23:47.9927277Z                     data.stackgroup
2025-01-10T13:23:47.9927359Z                     == getattr(
2025-01-10T13:23:47.9927464Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9927565Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9927646Z                     ).decode()
2025-01-10T13:23:47.9927725Z                 )
2025-01-10T13:23:47.9927809Z             if data.name:
2025-01-10T13:23:47.9927884Z                 assert (
2025-01-10T13:23:47.9927967Z                     data.name
2025-01-10T13:23:47.9928043Z                     == getattr(
2025-01-10T13:23:47.9928152Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9928399Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9928482Z                     ).decode()
2025-01-10T13:23:47.9928555Z                 )
2025-01-10T13:23:47.9928653Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9928779Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9928857Z             )
2025-01-10T13:23:47.9928947Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9929073Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9929146Z             )
2025-01-10T13:23:47.9929150Z 
2025-01-10T13:23:47.9929300Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9929421Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9929426Z 
2025-01-10T13:23:47.9929888Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f252020>, array([8.00550570e-15, 5.82912819e-15, 2.43262670e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
2025-01-10T13:23:47.9930079Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9930340Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9930345Z 
2025-01-10T13:23:47.9930427Z     @wraps(func)
2025-01-10T13:23:47.9930511Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9930603Z         with self._recreate_cm():
2025-01-10T13:23:47.9930692Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9930781Z E           AssertionError: 
2025-01-10T13:23:47.9930895Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9930969Z E           
2025-01-10T13:23:47.9931075Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:47.9931213Z E           Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:23:47.9931353Z E           Max relative difference among violations: 21416.68434824
2025-01-10T13:23:47.9931523Z E            ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9931620Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9931788Z E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:23:47.9931879Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9931884Z 
2025-01-10T13:23:47.9932085Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9932291Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply8] ______
2025-01-10T13:23:47.9932296Z 
2025-01-10T13:23:47.9932573Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f380>
2025-01-10T13:23:47.9932888Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b53a1e0>
2025-01-10T13:23:47.9932995Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9933321Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9933445Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9933553Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:23:47.9933772Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9934013Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply8]>>
2025-01-10T13:23:47.9934025Z 
2025-01-10T13:23:47.9934115Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9934288Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9934362Z     ):
2025-01-10T13:23:47.9934465Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9934572Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9934749Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9934820Z     
2025-01-10T13:23:47.9935069Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9935171Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9935324Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9935432Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9935513Z             )
2025-01-10T13:23:47.9935584Z     
2025-01-10T13:23:47.9935692Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9935806Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9935894Z             if data.stackgroup:
2025-01-10T13:23:47.9935975Z                 assert (
2025-01-10T13:23:47.9936061Z                     data.stackgroup
2025-01-10T13:23:47.9936142Z                     == getattr(
2025-01-10T13:23:47.9936249Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9936352Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9936431Z                     ).decode()
2025-01-10T13:23:47.9936513Z                 )
2025-01-10T13:23:47.9936717Z             if data.name:
2025-01-10T13:23:47.9936800Z                 assert (
2025-01-10T13:23:47.9936878Z                     data.name
2025-01-10T13:23:47.9936962Z                     == getattr(
2025-01-10T13:23:47.9937067Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9937166Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9937244Z                     ).decode()
2025-01-10T13:23:47.9937322Z                 )
2025-01-10T13:23:47.9937527Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9937710Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9937854Z             )
2025-01-10T13:23:47.9938123Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9938301Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9938446Z             )
2025-01-10T13:23:47.9938451Z 
2025-01-10T13:23:47.9938688Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9938844Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9938850Z 
2025-01-10T13:23:47.9939422Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f251ee0>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:23:47.9939573Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9939897Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9939903Z 
2025-01-10T13:23:47.9940030Z     @wraps(func)
2025-01-10T13:23:47.9940183Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9940366Z         with self._recreate_cm():
2025-01-10T13:23:47.9940502Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9940670Z E           AssertionError: 
2025-01-10T13:23:47.9940819Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9940972Z E           
2025-01-10T13:23:47.9941090Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:47.9941352Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:23:47.9941516Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:23:47.9942409Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9942533Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9942753Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9942972Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9942977Z 
2025-01-10T13:23:47.9943564Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9943854Z ______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply9] ______
2025-01-10T13:23:47.9943999Z 
2025-01-10T13:23:47.9944315Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f440>
2025-01-10T13:23:47.9944694Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5449b0>
2025-01-10T13:23:47.9944893Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9945088Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9945227Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9945399Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:23:47.9945660Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9945983Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply9]>>
2025-01-10T13:23:47.9945988Z 
2025-01-10T13:23:47.9946180Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9946382Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9946533Z     ):
2025-01-10T13:23:47.9946661Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9955173Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9955421Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9955501Z     
2025-01-10T13:23:47.9955627Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9955732Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9955886Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9956005Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9956078Z             )
2025-01-10T13:23:47.9956155Z     
2025-01-10T13:23:47.9956262Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9956376Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9956465Z             if data.stackgroup:
2025-01-10T13:23:47.9956549Z                 assert (
2025-01-10T13:23:47.9956654Z                     data.stackgroup
2025-01-10T13:23:47.9956736Z                     == getattr(
2025-01-10T13:23:47.9956856Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9956959Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9957043Z                     ).decode()
2025-01-10T13:23:47.9957117Z                 )
2025-01-10T13:23:47.9957201Z             if data.name:
2025-01-10T13:23:47.9957276Z                 assert (
2025-01-10T13:23:47.9957361Z                     data.name
2025-01-10T13:23:47.9957438Z                     == getattr(
2025-01-10T13:23:47.9957548Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9957641Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9957724Z                     ).decode()
2025-01-10T13:23:47.9957796Z                 )
2025-01-10T13:23:47.9957897Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9958032Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9958119Z             )
2025-01-10T13:23:47.9958217Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9958340Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9958421Z             )
2025-01-10T13:23:47.9958426Z 
2025-01-10T13:23:47.9958581Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9958709Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9958714Z 
2025-01-10T13:23:47.9959188Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f251da0>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:23:47.9959300Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9959562Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9959758Z 
2025-01-10T13:23:47.9959845Z     @wraps(func)
2025-01-10T13:23:47.9959948Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9960037Z         with self._recreate_cm():
2025-01-10T13:23:47.9960133Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9960219Z E           AssertionError: 
2025-01-10T13:23:47.9960335Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9960411Z E           
2025-01-10T13:23:47.9960516Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:47.9960656Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:23:47.9960793Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:23:47.9960963Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9961061Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9961236Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9961327Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9961446Z 
2025-01-10T13:23:47.9961661Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9961868Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply10] ______
2025-01-10T13:23:47.9961873Z 
2025-01-10T13:23:47.9962145Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f500>
2025-01-10T13:23:47.9962464Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5ed5e0>
2025-01-10T13:23:47.9962570Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9962658Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9962770Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9962881Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:23:47.9963216Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9963475Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply10]>>
2025-01-10T13:23:47.9963484Z 
2025-01-10T13:23:47.9963572Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9963747Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9963819Z     ):
2025-01-10T13:23:47.9963921Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9964029Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9964210Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9964281Z     
2025-01-10T13:23:47.9964397Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9964495Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9964642Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9964758Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9964830Z             )
2025-01-10T13:23:47.9964909Z     
2025-01-10T13:23:47.9965014Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9965124Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9965211Z             if data.stackgroup:
2025-01-10T13:23:47.9965294Z                 assert (
2025-01-10T13:23:47.9965379Z                     data.stackgroup
2025-01-10T13:23:47.9965462Z                     == getattr(
2025-01-10T13:23:47.9965569Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9965673Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9965753Z                     ).decode()
2025-01-10T13:23:47.9965831Z                 )
2025-01-10T13:23:47.9965910Z             if data.name:
2025-01-10T13:23:47.9965993Z                 assert (
2025-01-10T13:23:47.9966076Z                     data.name
2025-01-10T13:23:47.9966153Z                     == getattr(
2025-01-10T13:23:47.9966261Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9966517Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9966604Z                     ).decode()
2025-01-10T13:23:47.9966677Z                 )
2025-01-10T13:23:47.9966775Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9966915Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9966993Z             )
2025-01-10T13:23:47.9967083Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9967207Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9967280Z             )
2025-01-10T13:23:47.9967285Z 
2025-01-10T13:23:47.9967443Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9967567Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9967572Z 
2025-01-10T13:23:47.9968037Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f253920>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:23:47.9968263Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9968524Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9968529Z 
2025-01-10T13:23:47.9968612Z     @wraps(func)
2025-01-10T13:23:47.9968698Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9968790Z         with self._recreate_cm():
2025-01-10T13:23:47.9968879Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9968970Z E           AssertionError: 
2025-01-10T13:23:47.9969084Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9969159Z E           
2025-01-10T13:23:47.9969262Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:47.9969402Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:23:47.9969537Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:23:47.9969710Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9969811Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9969982Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9970074Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9970079Z 
2025-01-10T13:23:47.9970285Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9970495Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply11] ______
2025-01-10T13:23:47.9970500Z 
2025-01-10T13:23:47.9970772Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f5c0>
2025-01-10T13:23:47.9971087Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5625a0>
2025-01-10T13:23:47.9971191Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9971283Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9971398Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9971503Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:23:47.9971716Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9971958Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply11]>>
2025-01-10T13:23:47.9971963Z 
2025-01-10T13:23:47.9972057Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9972231Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9972304Z     ):
2025-01-10T13:23:47.9972409Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9972519Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9972699Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9972769Z     
2025-01-10T13:23:47.9972885Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9973199Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9973350Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9973461Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9973539Z             )
2025-01-10T13:23:47.9973610Z     
2025-01-10T13:23:47.9973717Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9973823Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9973916Z             if data.stackgroup:
2025-01-10T13:23:47.9973998Z                 assert (
2025-01-10T13:23:47.9974083Z                     data.stackgroup
2025-01-10T13:23:47.9974168Z                     == getattr(
2025-01-10T13:23:47.9974277Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9974380Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9974461Z                     ).decode()
2025-01-10T13:23:47.9974542Z                 )
2025-01-10T13:23:47.9974750Z             if data.name:
2025-01-10T13:23:47.9974835Z                 assert (
2025-01-10T13:23:47.9974914Z                     data.name
2025-01-10T13:23:47.9974995Z                     == getattr(
2025-01-10T13:23:47.9975105Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9975205Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9975283Z                     ).decode()
2025-01-10T13:23:47.9975363Z                 )
2025-01-10T13:23:47.9975458Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9975596Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9975672Z             )
2025-01-10T13:23:47.9975765Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9975890Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9975961Z             )
2025-01-10T13:23:47.9975965Z 
2025-01-10T13:23:47.9976124Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9976249Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9976254Z 
2025-01-10T13:23:47.9976727Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f252c00>, array([9.14386063e+37, 4.64776140e+37, 1.89847059e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
2025-01-10T13:23:47.9976831Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9977098Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9977103Z 
2025-01-10T13:23:47.9977187Z     @wraps(func)
2025-01-10T13:23:47.9977273Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9977367Z         with self._recreate_cm():
2025-01-10T13:23:47.9977455Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9977545Z E           AssertionError: 
2025-01-10T13:23:47.9977653Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9977735Z E           
2025-01-10T13:23:47.9977839Z E           Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:47.9977985Z E           Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:23:47.9978117Z E           Max relative difference among violations: 3.03053629
2025-01-10T13:23:47.9978291Z E            ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9978388Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9978557Z E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9978650Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9978655Z 
2025-01-10T13:23:47.9978860Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9979073Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply12] ______
2025-01-10T13:23:47.9979078Z 
2025-01-10T13:23:47.9979494Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f680>
2025-01-10T13:23:47.9979825Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b59d2e0>
2025-01-10T13:23:47.9979924Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9980017Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9980129Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9980230Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:23:47.9980445Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9980690Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply12]>>
2025-01-10T13:23:47.9980695Z 
2025-01-10T13:23:47.9980789Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9980957Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9981036Z     ):
2025-01-10T13:23:47.9981136Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9981354Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9981526Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9981601Z     
2025-01-10T13:23:47.9981716Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9981810Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9981960Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9982068Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9982144Z             )
2025-01-10T13:23:47.9982214Z     
2025-01-10T13:23:47.9982321Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9982427Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9982520Z             if data.stackgroup:
2025-01-10T13:23:47.9982595Z                 assert (
2025-01-10T13:23:47.9982687Z                     data.stackgroup
2025-01-10T13:23:47.9982767Z                     == getattr(
2025-01-10T13:23:47.9982884Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9982984Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9983284Z                     ).decode()
2025-01-10T13:23:47.9983405Z                 )
2025-01-10T13:23:47.9983489Z             if data.name:
2025-01-10T13:23:47.9983569Z                 assert (
2025-01-10T13:23:47.9983648Z                     data.name
2025-01-10T13:23:47.9983728Z                     == getattr(
2025-01-10T13:23:47.9983834Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9983931Z                         "_" + str(index) + "name",
2025-01-10T13:23:47.9984009Z                     ).decode()
2025-01-10T13:23:47.9984085Z                 )
2025-01-10T13:23:47.9984178Z             np.testing.assert_allclose(
2025-01-10T13:23:47.9984310Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:47.9984386Z             )
2025-01-10T13:23:47.9984485Z >           np.testing.assert_allclose(
2025-01-10T13:23:47.9984606Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:47.9984682Z             )
2025-01-10T13:23:47.9984687Z 
2025-01-10T13:23:47.9984840Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:47.9984954Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:47.9984958Z 
2025-01-10T13:23:47.9985435Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f23c540>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:23:47.9985537Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:47.9985801Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:47.9985807Z 
2025-01-10T13:23:47.9986016Z     @wraps(func)
2025-01-10T13:23:47.9986105Z     def inner(*args, **kwds):
2025-01-10T13:23:47.9986195Z         with self._recreate_cm():
2025-01-10T13:23:47.9986290Z >           return func(*args, **kwds)
2025-01-10T13:23:47.9986381Z E           AssertionError: 
2025-01-10T13:23:47.9986489Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:47.9986566Z E           
2025-01-10T13:23:47.9986676Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:47.9986821Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:23:47.9986955Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:23:47.9987127Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9987216Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9987392Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:23:47.9987478Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:47.9987594Z 
2025-01-10T13:23:47.9987806Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:47.9988013Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply13] ______
2025-01-10T13:23:47.9988027Z 
2025-01-10T13:23:47.9988292Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f740>
2025-01-10T13:23:47.9988615Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5219d0>
2025-01-10T13:23:47.9988711Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:47.9988805Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:47.9988907Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:47.9989011Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:23:47.9989219Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:47.9989471Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply13]>>
2025-01-10T13:23:47.9989480Z 
2025-01-10T13:23:47.9989569Z     def test_generate_plot_mpl(
2025-01-10T13:23:47.9989807Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:47.9989931Z     ):
2025-01-10T13:23:47.9990087Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:47.9990203Z         regression_data = RegressionData(request)
2025-01-10T13:23:47.9990377Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:47.9990451Z     
2025-01-10T13:23:47.9990563Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:47.9990667Z             np.testing.assert_array_equal(
2025-01-10T13:23:47.9990809Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:47.9990924Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:47.9990996Z             )
2025-01-10T13:23:47.9991078Z     
2025-01-10T13:23:47.9991180Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:47.9991295Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:47.9991382Z             if data.stackgroup:
2025-01-10T13:23:47.9991466Z                 assert (
2025-01-10T13:23:47.9991554Z                     data.stackgroup
2025-01-10T13:23:47.9991631Z                     == getattr(
2025-01-10T13:23:47.9991744Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:47.9991842Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:47.9991925Z                     ).decode()
2025-01-10T13:23:47.9991996Z                 )
2025-01-10T13:23:47.9992081Z             if data.name:
2025-01-10T13:23:47.9992156Z                 assert (
2025-01-10T13:23:47.9992238Z                     data.name
2025-01-10T13:23:47.9992314Z                     == getattr(
2025-01-10T13:23:47.9993193Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:47.9993337Z 
2025-01-10T13:23:47.9994003Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl5__.h5
2025-01-10T13:23:47.9994010Z 
2025-01-10T13:23:47.9994331Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:47.9994336Z 
2025-01-10T13:23:47.9995032Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data11__.h5
2025-01-10T13:23:47.9995038Z 
2025-01-10T13:23:47.9995351Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:47.9995356Z 
2025-01-10T13:23:47.9996043Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data7__.h5
2025-01-10T13:23:47.9996154Z 
2025-01-10T13:23:47.9996464Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:47.9996469Z 
2025-01-10T13:23:47.9997125Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply14__.h5
2025-01-10T13:23:47.9997131Z 
2025-01-10T13:23:47.9997435Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:47.9997445Z 
2025-01-10T13:23:47.9998083Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl1__.h5
2025-01-10T13:23:47.9998092Z 
2025-01-10T13:23:47.9998407Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:47.9998411Z 
2025-01-10T13:23:47.9999090Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data6__.h5
2025-01-10T13:23:47.9999095Z 
2025-01-10T13:23:47.9999401Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:47.9999406Z 
2025-01-10T13:23:48.0000048Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply5__.h5
2025-01-10T13:23:48.0000053Z 
2025-01-10T13:23:48.0000356Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0000364Z 
2025-01-10T13:23:48.0001015Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply1__.h5
2025-01-10T13:23:48.0001021Z 
2025-01-10T13:23:48.0001329Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0001334Z 
2025-01-10T13:23:48.0002009Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply12__.h5
2025-01-10T13:23:48.0002015Z 
2025-01-10T13:23:48.0002324Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0002331Z 
2025-01-10T13:23:48.0002966Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl7__.h5
2025-01-10T13:23:48.0003191Z 
2025-01-10T13:23:48.0003514Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0003520Z 
2025-01-10T13:23:48.0004213Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data1__.h5
2025-01-10T13:23:48.0004218Z 
2025-01-10T13:23:48.0004525Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0004531Z 
2025-01-10T13:23:48.0005177Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply7__.h5
2025-01-10T13:23:48.0005183Z 
2025-01-10T13:23:48.0005496Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0005607Z 
2025-01-10T13:23:48.0006253Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply10__.h5
2025-01-10T13:23:48.0006259Z 
2025-01-10T13:23:48.0006571Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0006576Z 
2025-01-10T13:23:48.0007220Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply6__.h5
2025-01-10T13:23:48.0007230Z 
2025-01-10T13:23:48.0007537Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0007542Z 
2025-01-10T13:23:48.0008184Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply0__.h5
2025-01-10T13:23:48.0008193Z 
2025-01-10T13:23:48.0008495Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0008499Z 
2025-01-10T13:23:48.0009189Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data8__.h5
2025-01-10T13:23:48.0009194Z 
2025-01-10T13:23:48.0009505Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0009510Z 
2025-01-10T13:23:48.0010151Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply5__.h5
2025-01-10T13:23:48.0010162Z 
2025-01-10T13:23:48.0010468Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0010473Z 
2025-01-10T13:23:48.0011111Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl0__.h5
2025-01-10T13:23:48.0011116Z 
2025-01-10T13:23:48.0011419Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0011423Z 
2025-01-10T13:23:48.0012111Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data14__.h5
2025-01-10T13:23:48.0012116Z 
2025-01-10T13:23:48.0012419Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0012531Z 
2025-01-10T13:23:48.0013336Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data15__.h5
2025-01-10T13:23:48.0013343Z 
2025-01-10T13:23:48.0013650Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0013654Z 
2025-01-10T13:23:48.0014332Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data9__.h5
2025-01-10T13:23:48.0014337Z 
2025-01-10T13:23:48.0014644Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0014648Z 
2025-01-10T13:23:48.0015298Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply0__.h5
2025-01-10T13:23:48.0015437Z 
2025-01-10T13:23:48.0015745Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0015750Z 
2025-01-10T13:23:48.0016385Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply7__.h5
2025-01-10T13:23:48.0016390Z 
2025-01-10T13:23:48.0016701Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0016706Z 
2025-01-10T13:23:48.0017352Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply3__.h5
2025-01-10T13:23:48.0017364Z 
2025-01-10T13:23:48.0017676Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0017681Z 
2025-01-10T13:23:48.0018364Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data13__.h5
2025-01-10T13:23:48.0018376Z 
2025-01-10T13:23:48.0018678Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0018683Z 
2025-01-10T13:23:48.0019330Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply15__.h5
2025-01-10T13:23:48.0019336Z 
2025-01-10T13:23:48.0019638Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0019649Z 
2025-01-10T13:23:48.0020339Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data3__.h5
2025-01-10T13:23:48.0020344Z 
2025-01-10T13:23:48.0020658Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0020662Z 
2025-01-10T13:23:48.0021302Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply4__.h5
2025-01-10T13:23:48.0021307Z 
2025-01-10T13:23:48.0021616Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0021621Z 
2025-01-10T13:23:48.0022254Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply4__.h5
2025-01-10T13:23:48.0022384Z 
2025-01-10T13:23:48.0022695Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0022699Z 
2025-01-10T13:23:48.0023627Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data0__.h5
2025-01-10T13:23:48.0023636Z 
2025-01-10T13:23:48.0023943Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0023949Z 
2025-01-10T13:23:48.0024595Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply8__.h5
2025-01-10T13:23:48.0024605Z 
2025-01-10T13:23:48.0025046Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0025051Z 
2025-01-10T13:23:48.0025691Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply2__.h5
2025-01-10T13:23:48.0025697Z 
2025-01-10T13:23:48.0026004Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0026009Z 
2025-01-10T13:23:48.0026657Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply13__.h5
2025-01-10T13:23:48.0026662Z 
2025-01-10T13:23:48.0026967Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0026975Z 
2025-01-10T13:23:48.0027667Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data2__.h5
2025-01-10T13:23:48.0027673Z 
2025-01-10T13:23:48.0027976Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0027986Z 
2025-01-10T13:23:48.0028663Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data4__.h5
2025-01-10T13:23:48.0028668Z 
2025-01-10T13:23:48.0028977Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0028983Z 
2025-01-10T13:23:48.0029623Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply11__.h5
2025-01-10T13:23:48.0029635Z 
2025-01-10T13:23:48.0029943Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0029948Z 
2025-01-10T13:23:48.0030634Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data12__.h5
2025-01-10T13:23:48.0030639Z 
2025-01-10T13:23:48.0030940Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0030946Z 
2025-01-10T13:23:48.0031584Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_mpl__plotter_generate_plot_mpl4__.h5
2025-01-10T13:23:48.0031705Z 
2025-01-10T13:23:48.0032018Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0032026Z 
2025-01-10T13:23:48.0032707Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data10__.h5
2025-01-10T13:23:48.0032712Z 
2025-01-10T13:23:48.0033152Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0033158Z 
2025-01-10T13:23:48.0033794Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_liv_plot/test_liv_plotter/test_generate_plot_ply__plotter_generate_plot_ply1__.h5
2025-01-10T13:23:48.0033805Z 
2025-01-10T13:23:48.0034108Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0034116Z 
2025-01-10T13:23:48.0034916Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_calculate_plotting_data__plotter_calculate_plotting_data5__.h5
2025-01-10T13:23:48.0034921Z 
2025-01-10T13:23:48.0035222Z /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:130: UnclosedFileWarning:
2025-01-10T13:23:48.0035226Z 
2025-01-10T13:23:48.0035872Z Closing remaining open file: /home/runner/work/tardis/tardis/tardis-regression-data/tardis/visualization/tools/tests/test_sdec_plot/test_sdec_plotter/test_generate_plot_mpl__plotter_generate_plot_ply9__.h5
2025-01-10T13:23:48.0035877Z 
2025-01-10T13:23:48.0035993Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:48.0036089Z                         "_" + str(index) + "name",
2025-01-10T13:23:48.0036174Z                     ).decode()
2025-01-10T13:23:48.0036250Z                 )
2025-01-10T13:23:48.0036355Z             np.testing.assert_allclose(
2025-01-10T13:23:48.0036492Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:48.0036570Z             )
2025-01-10T13:23:48.0036662Z >           np.testing.assert_allclose(
2025-01-10T13:23:48.0036793Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:48.0036865Z             )
2025-01-10T13:23:48.0036869Z 
2025-01-10T13:23:48.0037025Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:48.0037150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:48.0037154Z 
2025-01-10T13:23:48.0037620Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f23c680>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:23:48.0037731Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:48.0037990Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:48.0038002Z 
2025-01-10T13:23:48.0038085Z     @wraps(func)
2025-01-10T13:23:48.0038169Z     def inner(*args, **kwds):
2025-01-10T13:23:48.0038263Z         with self._recreate_cm():
2025-01-10T13:23:48.0038353Z >           return func(*args, **kwds)
2025-01-10T13:23:48.0038446Z E           AssertionError: 
2025-01-10T13:23:48.0038559Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0038639Z E           
2025-01-10T13:23:48.0038745Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0038887Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:23:48.0039028Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:23:48.0039198Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0039293Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0039585Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0039685Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0039690Z 
2025-01-10T13:23:48.0039893Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:48.0040104Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply14] ______
2025-01-10T13:23:48.0040109Z 
2025-01-10T13:23:48.0040383Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f800>
2025-01-10T13:23:48.0040701Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4b5ecfe0>
2025-01-10T13:23:48.0040807Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:48.0040896Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:48.0041007Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:48.0041112Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:23:48.0041329Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:48.0041693Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply14]>>
2025-01-10T13:23:48.0041698Z 
2025-01-10T13:23:48.0041792Z     def test_generate_plot_mpl(
2025-01-10T13:23:48.0041966Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:48.0042038Z     ):
2025-01-10T13:23:48.0042144Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:48.0042252Z         regression_data = RegressionData(request)
2025-01-10T13:23:48.0042430Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:48.0042501Z     
2025-01-10T13:23:48.0042616Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:48.0042713Z             np.testing.assert_array_equal(
2025-01-10T13:23:48.0042860Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:48.0042972Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:48.0043162Z             )
2025-01-10T13:23:48.0043235Z     
2025-01-10T13:23:48.0043342Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:48.0043451Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:48.0043544Z             if data.stackgroup:
2025-01-10T13:23:48.0043625Z                 assert (
2025-01-10T13:23:48.0043712Z                     data.stackgroup
2025-01-10T13:23:48.0043797Z                     == getattr(
2025-01-10T13:23:48.0043903Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:48.0044007Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:48.0044086Z                     ).decode()
2025-01-10T13:23:48.0044163Z                 )
2025-01-10T13:23:48.0044243Z             if data.name:
2025-01-10T13:23:48.0044325Z                 assert (
2025-01-10T13:23:48.0044405Z                     data.name
2025-01-10T13:23:48.0044491Z                     == getattr(
2025-01-10T13:23:48.0044599Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:48.0044698Z                         "_" + str(index) + "name",
2025-01-10T13:23:48.0044776Z                     ).decode()
2025-01-10T13:23:48.0044854Z                 )
2025-01-10T13:23:48.0044949Z             np.testing.assert_allclose(
2025-01-10T13:23:48.0045084Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:48.0045161Z             )
2025-01-10T13:23:48.0045252Z >           np.testing.assert_allclose(
2025-01-10T13:23:48.0045377Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:48.0045449Z             )
2025-01-10T13:23:48.0045453Z 
2025-01-10T13:23:48.0045603Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:48.0045723Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:48.0045729Z 
2025-01-10T13:23:48.0046354Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f23ccc0>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:23:48.0046461Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:48.0046731Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:48.0046736Z 
2025-01-10T13:23:48.0046818Z     @wraps(func)
2025-01-10T13:23:48.0046903Z     def inner(*args, **kwds):
2025-01-10T13:23:48.0046996Z         with self._recreate_cm():
2025-01-10T13:23:48.0047085Z >           return func(*args, **kwds)
2025-01-10T13:23:48.0047175Z E           AssertionError: 
2025-01-10T13:23:48.0047284Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0047364Z E           
2025-01-10T13:23:48.0047466Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0047611Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:23:48.0047864Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:23:48.0048039Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0048134Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0048304Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0048398Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0048402Z 
2025-01-10T13:23:48.0048604Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:48.0048813Z _____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply15] ______
2025-01-10T13:23:48.0048818Z 
2025-01-10T13:23:48.0049084Z self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7fef6178f8c0>
2025-01-10T13:23:48.0049405Z generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7fef4c4ec440>
2025-01-10T13:23:48.0049508Z plotter_generate_plot_ply = (Figure({
2025-01-10T13:23:48.0049606Z     'data': [{'fillcolor': '#4C4C4C',
2025-01-10T13:23:48.0049714Z               'hovertemplate': '(%{x:.2f}, %{y:.3g})',
2025-01-10T13:23:48.0049814Z               '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
2025-01-10T13:23:48.0050026Z }), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7fef50d76e40>)
2025-01-10T13:23:48.0050269Z request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply15]>>
2025-01-10T13:23:48.0050274Z 
2025-01-10T13:23:48.0050366Z     def test_generate_plot_mpl(
2025-01-10T13:23:48.0050534Z         self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
2025-01-10T13:23:48.0050612Z     ):
2025-01-10T13:23:48.0050709Z         fig, _ = plotter_generate_plot_ply
2025-01-10T13:23:48.0050820Z         regression_data = RegressionData(request)
2025-01-10T13:23:48.0050992Z         expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
2025-01-10T13:23:48.0051075Z     
2025-01-10T13:23:48.0051190Z         for item in ["_species_name", "_color_list"]:
2025-01-10T13:23:48.0051286Z             np.testing.assert_array_equal(
2025-01-10T13:23:48.0051432Z                 expected.get("plot_data_hdf/" + item).values.flatten(),
2025-01-10T13:23:48.0051540Z                 getattr(generate_plot_plotly_hdf, item),
2025-01-10T13:23:48.0051619Z             )
2025-01-10T13:23:48.0051689Z     
2025-01-10T13:23:48.0051799Z         for index, data in enumerate(fig.data):
2025-01-10T13:23:48.0051907Z             group = "plot_data_hdf/" + "_" + str(index)
2025-01-10T13:23:48.0051999Z             if data.stackgroup:
2025-01-10T13:23:48.0052076Z                 assert (
2025-01-10T13:23:48.0052165Z                     data.stackgroup
2025-01-10T13:23:48.0052242Z                     == getattr(
2025-01-10T13:23:48.0052354Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:48.0052547Z                         "_" + str(index) + "stackgroup",
2025-01-10T13:23:48.0052636Z                     ).decode()
2025-01-10T13:23:48.0052714Z                 )
2025-01-10T13:23:48.0052796Z             if data.name:
2025-01-10T13:23:48.0052876Z                 assert (
2025-01-10T13:23:48.0052955Z                     data.name
2025-01-10T13:23:48.0053152Z                     == getattr(
2025-01-10T13:23:48.0053259Z                         expected["/plot_data_hdf/scalars"],
2025-01-10T13:23:48.0053356Z                         "_" + str(index) + "name",
2025-01-10T13:23:48.0053432Z                     ).decode()
2025-01-10T13:23:48.0053508Z                 )
2025-01-10T13:23:48.0053603Z             np.testing.assert_allclose(
2025-01-10T13:23:48.0053735Z                 data.x, expected.get(group + "x").values.flatten()
2025-01-10T13:23:48.0053807Z             )
2025-01-10T13:23:48.0053906Z >           np.testing.assert_allclose(
2025-01-10T13:23:48.0054029Z                 data.y, expected.get(group + "y").values.flatten()
2025-01-10T13:23:48.0054110Z             )
2025-01-10T13:23:48.0054238Z 
2025-01-10T13:23:48.0054390Z tardis/visualization/tools/tests/test_sdec_plot.py:417: 
2025-01-10T13:23:48.0054505Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-10T13:23:48.0054509Z 
2025-01-10T13:23:48.0054979Z args = (<function assert_allclose.<locals>.compare at 0x7fef1f23c220>, array([9.57854901e+37, 6.97452380e+37, 2.91062613e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
2025-01-10T13:23:48.0055080Z        0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
2025-01-10T13:23:48.0055341Z kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}
2025-01-10T13:23:48.0055346Z 
2025-01-10T13:23:48.0055422Z     @wraps(func)
2025-01-10T13:23:48.0055510Z     def inner(*args, **kwds):
2025-01-10T13:23:48.0055598Z         with self._recreate_cm():
2025-01-10T13:23:48.0055692Z >           return func(*args, **kwds)
2025-01-10T13:23:48.0055785Z E           AssertionError: 
2025-01-10T13:23:48.0055899Z E           Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0055978Z E           
2025-01-10T13:23:48.0056082Z E           Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0056229Z E           Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:23:48.0056366Z E           Max relative difference among violations: 21416.6843355
2025-01-10T13:23:48.0056543Z E            ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0056635Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0056813Z E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0056900Z E                  0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0056905Z 
2025-01-10T13:23:48.0057114Z ../../../micromamba/envs/tardis/lib/python3.12/contextlib.py:81: AssertionError
2025-01-10T13:23:48.0057241Z =============================== warnings summary ===============================
2025-01-10T13:23:48.0057365Z tardis/io/configuration/config_validator.py:6
2025-01-10T13:23:48.0057486Z tardis/io/configuration/config_validator.py:6
2025-01-10T13:23:48.0057792Z   /home/runner/work/tardis/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
2025-01-10T13:23:48.0057874Z   
2025-01-10T13:23:48.0058991Z   jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
2025-01-10T13:23:48.0058998Z 
2025-01-10T13:23:48.0059238Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22
2025-01-10T13:23:48.0059602Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
2025-01-10T13:23:48.0059800Z   
2025-01-10T13:23:48.0059959Z   Jupyter is migrating its paths to use standard platformdirs
2025-01-10T13:23:48.0060113Z   given by the platformdirs library.  To remove this warning and
2025-01-10T13:23:48.0060283Z   see the appropriate new directories, set the environment variable
2025-01-10T13:23:48.0060435Z   `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
2025-01-10T13:23:48.0060596Z   The use of platformdirs will be the default in `jupyter_core` v6
2025-01-10T13:23:48.0060601Z 
2025-01-10T13:23:48.0060702Z tardis/plasma/properties/__init__.py:17
2025-01-10T13:23:48.0060985Z   /home/runner/work/tardis/tardis/tardis/plasma/properties/__init__.py:17: DeprecationWarning:
2025-01-10T13:23:48.0061055Z   
2025-01-10T13:23:48.0061607Z   The numpy.linalg.linalg has been made private and renamed to numpy.linalg._linalg. All public functions exported by it are available from numpy.linalg. Please use numpy.linalg.LinAlgError instead.
2025-01-10T13:23:48.0061707Z 
2025-01-10T13:23:48.0066819Z tardis/io/tests/test_HDFWriter.py::test_multi_index_write
2025-01-10T13:23:48.0067126Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:23:48.0067366Z   /home/runner/work/tardis/tardis/tardis/io/util.py:276: PerformanceWarning:
2025-01-10T13:23:48.0067439Z   
2025-01-10T13:23:48.0067514Z   
2025-01-10T13:23:48.0067730Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:23:48.0067992Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-10T13:23:48.0067999Z 
2025-01-10T13:23:48.0068204Z tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
2025-01-10T13:23:48.0068430Z tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
2025-01-10T13:23:48.0068670Z tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
2025-01-10T13:23:48.0068864Z tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
2025-01-10T13:23:48.0069190Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
2025-01-10T13:23:48.0069262Z   
2025-01-10T13:23:48.0069385Z   The current CMFGEN model parser is deprecated
2025-01-10T13:23:48.0069390Z 
2025-01-10T13:23:48.0069503Z tardis/io/tests/test_model_reader.py: 1 warning
2025-01-10T13:23:48.0069685Z tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
2025-01-10T13:23:48.0069996Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
2025-01-10T13:23:48.0070071Z   
2025-01-10T13:23:48.0070187Z   The current CMFGEN model parser is deprecated
2025-01-10T13:23:48.0070191Z 
2025-01-10T13:23:48.0070397Z tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
2025-01-10T13:23:48.0070782Z   /home/runner/work/tardis/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
2025-01-10T13:23:48.0070858Z   
2025-01-10T13:23:48.0071309Z   [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m
2025-01-10T13:23:48.0071315Z 
2025-01-10T13:23:48.0071420Z tardis/model/tests/test_base.py: 6 warnings
2025-01-10T13:23:48.0071546Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-10T13:23:48.0071725Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-10T13:23:48.0071996Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
2025-01-10T13:23:48.0072065Z   
2025-01-10T13:23:48.0072176Z   v_inner_boundary < 0, assuming default value
2025-01-10T13:23:48.0072182Z 
2025-01-10T13:23:48.0072287Z tardis/model/tests/test_base.py: 6 warnings
2025-01-10T13:23:48.0072401Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-10T13:23:48.0072582Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-10T13:23:48.0073277Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
2025-01-10T13:23:48.0073421Z   
2025-01-10T13:23:48.0073580Z   v_outer_boundary < 0, assuming default value
2025-01-10T13:23:48.0073586Z 
2025-01-10T13:23:48.0073931Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:23:48.0074249Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:23:48.0074568Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:23:48.0074877Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
2025-01-10T13:23:48.0075417Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_simple[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:23:48.0075948Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_empty[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:23:48.0076617Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_zeros[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:23:48.0077060Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:23:48.0077425Z tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:23:48.0077673Z   /home/runner/micromamba/envs/tardis/lib/python3.12/pickle.py:323: DeprecationWarning:
2025-01-10T13:23:48.0077747Z   
2025-01-10T13:23:48.0079138Z   numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
2025-01-10T13:23:48.0079155Z 
2025-01-10T13:23:48.0079599Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:23:48.0079901Z   /home/runner/work/tardis/tardis/tardis/plasma/equilibrium/level_populations.py:65: FutureWarning:
2025-01-10T13:23:48.0079971Z   
2025-01-10T13:23:48.0080247Z   A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
2025-01-10T13:23:48.0080685Z   The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.
2025-01-10T13:23:48.0080769Z   
2025-01-10T13:23:48.0081281Z   For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.
2025-01-10T13:23:48.0081288Z 
2025-01-10T13:23:48.0081655Z tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
2025-01-10T13:23:48.0081979Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1374: DeprecationWarning:
2025-01-10T13:23:48.0082048Z   
2025-01-10T13:23:48.0083570Z   numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
2025-01-10T13:23:48.0083703Z 
2025-01-10T13:23:48.0083861Z tardis/plasma/tests/test_complete_plasmas.py: 20 warnings
2025-01-10T13:23:48.0084148Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:23:48.0084226Z   
2025-01-10T13:23:48.0084318Z   Property "atomic_mass" not found
2025-01-10T13:23:48.0084323Z 
2025-01-10T13:23:48.0084751Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
2025-01-10T13:23:48.0085121Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
2025-01-10T13:23:48.0085399Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:23:48.0085472Z   
2025-01-10T13:23:48.0085579Z   Property "j_blues_norm_factor" not found
2025-01-10T13:23:48.0085691Z 
2025-01-10T13:23:48.0086107Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
2025-01-10T13:23:48.0086477Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
2025-01-10T13:23:48.0086750Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:23:48.0086818Z   
2025-01-10T13:23:48.0086925Z   Property "j_blue_estimator" not found
2025-01-10T13:23:48.0086930Z 
2025-01-10T13:23:48.0087307Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
2025-01-10T13:23:48.0087642Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
2025-01-10T13:23:48.0087916Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:23:48.0087996Z   
2025-01-10T13:23:48.0088085Z   Property "volume" not found
2025-01-10T13:23:48.0088095Z 
2025-01-10T13:23:48.0088478Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
2025-01-10T13:23:48.0088816Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
2025-01-10T13:23:48.0089085Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-10T13:23:48.0089160Z   
2025-01-10T13:23:48.0089247Z   Property "r_inner" not found
2025-01-10T13:23:48.0089252Z 
2025-01-10T13:23:48.0089474Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
2025-01-10T13:23:48.0089682Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
2025-01-10T13:23:48.0089891Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
2025-01-10T13:23:48.0090127Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
2025-01-10T13:23:48.0090202Z   
2025-01-10T13:23:48.0090399Z   Requesting inner boundary below inner shell. Extrapolating the inner cell
2025-01-10T13:23:48.0090404Z 
2025-01-10T13:23:48.0090634Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100.0]
2025-01-10T13:23:48.0090872Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[1000.0]
2025-01-10T13:23:48.0091104Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[10000.0]
2025-01-10T13:23:48.0091345Z tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100000.0]
2025-01-10T13:23:48.0091674Z   /home/runner/work/tardis/tardis/tardis/spectrum/tests/test_numba_formal_integral.py:35: DeprecationWarning:
2025-01-10T13:23:48.0091834Z   
2025-01-10T13:23:48.0092126Z   `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
2025-01-10T13:23:48.0092140Z 
2025-01-10T13:23:48.0092351Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-10T13:23:48.0092552Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:70: UserWarning:
2025-01-10T13:23:48.0092623Z   
2025-01-10T13:23:48.0092944Z   SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0
2025-01-10T13:23:48.0092949Z 
2025-01-10T13:23:48.0093265Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-10T13:23:48.0093472Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:111: UserWarning:
2025-01-10T13:23:48.0093541Z   
2025-01-10T13:23:48.0093887Z   SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.
2025-01-10T13:23:48.0093896Z 
2025-01-10T13:23:48.0094097Z tardis/tests/test_util.py::test_calculate_luminosity[string_io0-100 km-result0]
2025-01-10T13:23:48.0094411Z tardis/tests/test_util.py::test_calculate_luminosity[string_io1-500 km-result1]
2025-01-10T13:23:48.0094626Z   /home/runner/work/tardis/tardis/tardis/util/base.py:188: DeprecationWarning:
2025-01-10T13:23:48.0094695Z   
2025-01-10T13:23:48.0094984Z   `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.
2025-01-10T13:23:48.0094989Z 
2025-01-10T13:23:48.0095157Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:23:48.0095451Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:736: DeprecationWarning:
2025-01-10T13:23:48.0095520Z   
2025-01-10T13:23:48.0095630Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:23:48.0095635Z 
2025-01-10T13:23:48.0095803Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:23:48.0096089Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:758: DeprecationWarning:
2025-01-10T13:23:48.0096166Z   
2025-01-10T13:23:48.0096266Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:23:48.0096271Z 
2025-01-10T13:23:48.0096434Z tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
2025-01-10T13:23:48.0096715Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:779: DeprecationWarning:
2025-01-10T13:23:48.0096788Z   
2025-01-10T13:23:48.0096886Z   `in1d` is deprecated. Use `np.isin` instead.
2025-01-10T13:23:48.0096891Z 
2025-01-10T13:23:48.0097224Z tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
2025-01-10T13:23:48.0097499Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
2025-01-10T13:23:48.0097574Z   
2025-01-10T13:23:48.0098419Z   More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
2025-01-10T13:23:48.0098431Z 
2025-01-10T13:23:48.0098777Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0099123Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0099456Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0099796Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0100137Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0100470Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0100996Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:23:48.0101065Z   
2025-01-10T13:23:48.0101262Z   Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
2025-01-10T13:23:48.0101437Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:23:48.0101674Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:23:48.0101679Z 
2025-01-10T13:23:48.0102054Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0102394Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0102737Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:23:48.0102894Z   
2025-01-10T13:23:48.0103179Z   Passing unrecognized arguments to super(FloatText).__init__(min=0).
2025-01-10T13:23:48.0103352Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:23:48.0103588Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:23:48.0103594Z 
2025-01-10T13:23:48.0103932Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-10T13:23:48.0104275Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-10T13:23:48.0104349Z   
2025-01-10T13:23:48.0104524Z   Passing unrecognized arguments to super(HTML).__init__(indent=True).
2025-01-10T13:23:48.0104699Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-10T13:23:48.0104925Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-10T13:23:48.0104938Z 
2025-01-10T13:23:48.0105362Z tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
2025-01-10T13:23:48.0105677Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/qgridnext/grid.py:825: DeprecationWarning:
2025-01-10T13:23:48.0105750Z   
2025-01-10T13:23:48.0106018Z   QgridWidget._grid_options_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.
2025-01-10T13:23:48.0106029Z 
2025-01-10T13:23:48.0106280Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:23:48.0106489Z   /home/runner/work/tardis/tardis/tardis/io/util.py:289: PerformanceWarning:
2025-01-10T13:23:48.0106557Z   
2025-01-10T13:23:48.0106630Z   
2025-01-10T13:23:48.0106831Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:23:48.0107092Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-10T13:23:48.0107100Z 
2025-01-10T13:23:48.0107350Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:23:48.0107559Z   /home/runner/work/tardis/tardis/tardis/io/util.py:292: PerformanceWarning:
2025-01-10T13:23:48.0107628Z   
2025-01-10T13:23:48.0107702Z   
2025-01-10T13:23:48.0107900Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-10T13:23:48.0108082Z   map directly to c-types [inferred_type->mixed,key->values] [items->None]
2025-01-10T13:23:48.0108087Z 
2025-01-10T13:23:48.0108342Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-10T13:23:48.0108580Z   /home/runner/work/tardis/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
2025-01-10T13:23:48.0108655Z   
2025-01-10T13:23:48.0108840Z   The number of interpolate_shells was not specified. The value was set to 80.
2025-01-10T13:23:48.0108970Z 
2025-01-10T13:23:48.0109185Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-01-10T13:23:48.0109191Z 
2025-01-10T13:23:48.0109357Z ---------- coverage: platform linux, python 3.12.4-final-0 -----------
2025-01-10T13:23:48.0109483Z Coverage HTML written to dir coverage_html_report
2025-01-10T13:23:48.0109590Z Coverage XML written to file coverage.xml
2025-01-10T13:23:48.0109595Z 
2025-01-10T13:23:48.0109719Z =========================== short test summary info ============================
2025-01-10T13:23:48.0110126Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_sobolev_line_opacity - AssertionError: MultiIndex level [0] are different
2025-01-10T13:23:48.0110132Z 
2025-01-10T13:23:48.0110265Z MultiIndex level [0] values are different (0.09581 %)
2025-01-10T13:23:48.0110384Z [left]:  Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:23:48.0110458Z        ...
2025-01-10T13:23:48.0110549Z        20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:23:48.0110786Z       dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:23:48.0110904Z [right]: Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
2025-01-10T13:23:48.0110974Z        ...
2025-01-10T13:23:48.0111063Z        20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
2025-01-10T13:23:48.0111183Z       dtype='int64', name='atomic_number', length=29224)
2025-01-10T13:23:48.0111286Z At positional index 54, first diff: 12 != 14
2025-01-10T13:23:48.0111566Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_beta_sobolevs - AssertionError: 
2025-01-10T13:23:48.0111665Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0111670Z 
2025-01-10T13:23:48.0111770Z Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:23:48.0111895Z Max absolute difference among violations: 0.99984222
2025-01-10T13:23:48.0112024Z Max relative difference among violations: 6337.12154973
2025-01-10T13:23:48.0112120Z  ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:48.0112211Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:48.0112295Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:23:48.0112399Z  DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:48.0112482Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:48.0112558Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:23:48.0113251Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0113263Z 
2025-01-10T13:23:48.0113474Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0113650Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0113754Z        ...
2025-01-10T13:23:48.0113846Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0113974Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0114090Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0114166Z        ...
2025-01-10T13:23:48.0114256Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0114378Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0114489Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0114997Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0115004Z 
2025-01-10T13:23:48.0115097Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0115463Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0115933Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0116265Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0116767Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0116772Z 
2025-01-10T13:23:48.0116866Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0117334Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0117700Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0118065Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0118545Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0118552Z 
2025-01-10T13:23:48.0118682Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0118789Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0118864Z        ...
2025-01-10T13:23:48.0118949Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0119077Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0119188Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0119269Z        ...
2025-01-10T13:23:48.0119363Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0119486Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0119592Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0120101Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0120107Z 
2025-01-10T13:23:48.0120235Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0120341Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0120417Z        ...
2025-01-10T13:23:48.0120498Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0120622Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0120729Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0120805Z        ...
2025-01-10T13:23:48.0120998Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0121128Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0121237Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0121715Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0121721Z 
2025-01-10T13:23:48.0121848Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0121952Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0122027Z        ...
2025-01-10T13:23:48.0122108Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0122234Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0122342Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0122423Z        ...
2025-01-10T13:23:48.0122503Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0122631Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0122862Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0123515Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0123525Z 
2025-01-10T13:23:48.0123653Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0123757Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0123833Z        ...
2025-01-10T13:23:48.0123915Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0124039Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0124147Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0124221Z        ...
2025-01-10T13:23:48.0124303Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0124430Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0124550Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0125051Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0125056Z 
2025-01-10T13:23:48.0125183Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0125288Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0125363Z        ...
2025-01-10T13:23:48.0125444Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0125572Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0125681Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0125758Z        ...
2025-01-10T13:23:48.0125841Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0125971Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0126080Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0126579Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0126585Z 
2025-01-10T13:23:48.0126709Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0126816Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0126891Z        ...
2025-01-10T13:23:48.0126974Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0127099Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0127214Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0127289Z        ...
2025-01-10T13:23:48.0127371Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0127494Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0127596Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0128249Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0128259Z 
2025-01-10T13:23:48.0128385Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0128490Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0128564Z        ...
2025-01-10T13:23:48.0128645Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0128768Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0128876Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0128950Z        ...
2025-01-10T13:23:48.0129031Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0129154Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0129256Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0129734Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0129854Z 
2025-01-10T13:23:48.0129955Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0130318Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0130654Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0130987Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0131465Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0131471Z 
2025-01-10T13:23:48.0131567Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0131929Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0132294Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0132665Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0133334Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0133346Z 
2025-01-10T13:23:48.0133470Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0133580Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0133651Z        ...
2025-01-10T13:23:48.0133740Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0133861Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0133974Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0134044Z        ...
2025-01-10T13:23:48.0134132Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0134257Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0134359Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0134853Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0134980Z 
2025-01-10T13:23:48.0135104Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0135216Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0135287Z        ...
2025-01-10T13:23:48.0135372Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0135493Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0135608Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0135678Z        ...
2025-01-10T13:23:48.0135764Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0135887Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0135983Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0136446Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0136459Z 
2025-01-10T13:23:48.0136581Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0136692Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0136760Z        ...
2025-01-10T13:23:48.0136849Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0136967Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0137087Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0137157Z        ...
2025-01-10T13:23:48.0137244Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0137368Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0137465Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0137955Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0137964Z 
2025-01-10T13:23:48.0138089Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0138197Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0138266Z        ...
2025-01-10T13:23:48.0138353Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0138473Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0138585Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0138654Z        ...
2025-01-10T13:23:48.0138740Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0138863Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0138960Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0139461Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0139467Z 
2025-01-10T13:23:48.0139717Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0139836Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0139909Z        ...
2025-01-10T13:23:48.0139996Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0140117Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0140233Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0140309Z        ...
2025-01-10T13:23:48.0140396Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0140521Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0140620Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0141099Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0141105Z 
2025-01-10T13:23:48.0141226Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0141344Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0141503Z        ...
2025-01-10T13:23:48.0141594Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0141713Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0141828Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0141899Z        ...
2025-01-10T13:23:48.0141990Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0142117Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0142214Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0142681Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0142687Z 
2025-01-10T13:23:48.0142808Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0142920Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0142992Z        ...
2025-01-10T13:23:48.0143199Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0143323Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0143436Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0143505Z        ...
2025-01-10T13:23:48.0143593Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0143713Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0143816Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0144298Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0144303Z 
2025-01-10T13:23:48.0144395Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0144765Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0145095Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0145426Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0146036Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0146042Z 
2025-01-10T13:23:48.0146135Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0146496Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0146861Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0147358Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0147816Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0147822Z 
2025-01-10T13:23:48.0147947Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0148051Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0148131Z        ...
2025-01-10T13:23:48.0148218Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0148346Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0148455Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0148533Z        ...
2025-01-10T13:23:48.0148622Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0148744Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0148848Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0149335Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0149340Z 
2025-01-10T13:23:48.0149467Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0149573Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0149649Z        ...
2025-01-10T13:23:48.0149735Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0149865Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0149974Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0150053Z        ...
2025-01-10T13:23:48.0150142Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0150259Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0150362Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0150816Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0150821Z 
2025-01-10T13:23:48.0150948Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0151051Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0151129Z        ...
2025-01-10T13:23:48.0151212Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0151425Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0151535Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0151612Z        ...
2025-01-10T13:23:48.0151693Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0151816Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0151918Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0152401Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0152406Z 
2025-01-10T13:23:48.0152534Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0152639Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0152716Z        ...
2025-01-10T13:23:48.0152797Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0152927Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0153358Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0153490Z        ...
2025-01-10T13:23:48.0153581Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0153717Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0153827Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0154316Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0154321Z 
2025-01-10T13:23:48.0154452Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0154559Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0154636Z        ...
2025-01-10T13:23:48.0154720Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0154850Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0154964Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0155047Z        ...
2025-01-10T13:23:48.0155130Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0155255Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0155362Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0155832Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0155837Z 
2025-01-10T13:23:48.0155966Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0156072Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0156146Z        ...
2025-01-10T13:23:48.0156229Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0156356Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0156464Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0156544Z        ...
2025-01-10T13:23:48.0156631Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0156757Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0156863Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0157356Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0157362Z 
2025-01-10T13:23:48.0157491Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0157596Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0157673Z        ...
2025-01-10T13:23:48.0157756Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0157880Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0157987Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0158061Z        ...
2025-01-10T13:23:48.0158287Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0158418Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0158525Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0159042Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0159047Z 
2025-01-10T13:23:48.0159147Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0159505Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0159830Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0160267Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0160777Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0160782Z 
2025-01-10T13:23:48.0160879Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0161242Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0161607Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0161979Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0162467Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0162472Z 
2025-01-10T13:23:48.0162596Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0162708Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0162778Z        ...
2025-01-10T13:23:48.0162868Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0162989Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0163246Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0163330Z        ...
2025-01-10T13:23:48.0163531Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0163663Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0163761Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0164293Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0164299Z 
2025-01-10T13:23:48.0164422Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0164535Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0164604Z        ...
2025-01-10T13:23:48.0164692Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0164813Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0164926Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0164995Z        ...
2025-01-10T13:23:48.0165083Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0165211Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0165418Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0165904Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0165910Z 
2025-01-10T13:23:48.0166031Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0166144Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0166214Z        ...
2025-01-10T13:23:48.0166301Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0166420Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0166535Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0166606Z        ...
2025-01-10T13:23:48.0166692Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0166818Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0166927Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0167450Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0167455Z 
2025-01-10T13:23:48.0167577Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0167688Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0167758Z        ...
2025-01-10T13:23:48.0167851Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0167972Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0168088Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0168158Z        ...
2025-01-10T13:23:48.0168243Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0168370Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0168471Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0168991Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0168997Z 
2025-01-10T13:23:48.0169119Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0169233Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0169304Z        ...
2025-01-10T13:23:48.0169393Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0169513Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0169627Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0169701Z        ...
2025-01-10T13:23:48.0169790Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0169915Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0170015Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0170599Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0170609Z 
2025-01-10T13:23:48.0170728Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0170840Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0170909Z        ...
2025-01-10T13:23:48.0170998Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0171118Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0171237Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0171307Z        ...
2025-01-10T13:23:48.0171395Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0171517Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0171616Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0172181Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0172307Z 
2025-01-10T13:23:48.0172431Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0172543Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0172612Z        ...
2025-01-10T13:23:48.0172700Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0172817Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0172928Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0172996Z        ...
2025-01-10T13:23:48.0173184Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0173310Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0173412Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0173989Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0174002Z 
2025-01-10T13:23:48.0174093Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0174458Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0174781Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0175111Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0175688Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0175694Z 
2025-01-10T13:23:48.0175792Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0176148Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0176640Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0177003Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0177659Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0177665Z 
2025-01-10T13:23:48.0177794Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0177899Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0177975Z        ...
2025-01-10T13:23:48.0178057Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0178185Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0178298Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0178368Z        ...
2025-01-10T13:23:48.0178457Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0178576Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0178680Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0179266Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0179276Z 
2025-01-10T13:23:48.0179403Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0179508Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0179586Z        ...
2025-01-10T13:23:48.0179668Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0179794Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0179906Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0179978Z        ...
2025-01-10T13:23:48.0180065Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0180187Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0180294Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0180838Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0180846Z 
2025-01-10T13:23:48.0180975Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0181079Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0181156Z        ...
2025-01-10T13:23:48.0181238Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0181363Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0181477Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0181549Z        ...
2025-01-10T13:23:48.0181635Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0181754Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0181860Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0182435Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0182584Z 
2025-01-10T13:23:48.0182724Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0182829Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0182907Z        ...
2025-01-10T13:23:48.0182989Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0183217Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0183336Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0183406Z        ...
2025-01-10T13:23:48.0183495Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0183615Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0183719Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0184295Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0184422Z 
2025-01-10T13:23:48.0184557Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0184663Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0184742Z        ...
2025-01-10T13:23:48.0184825Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0184950Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0185062Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0185132Z        ...
2025-01-10T13:23:48.0185217Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0185336Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0185438Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0185998Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0186010Z 
2025-01-10T13:23:48.0186137Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0186243Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0186318Z        ...
2025-01-10T13:23:48.0186402Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0186527Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0186639Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0186709Z        ...
2025-01-10T13:23:48.0186793Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0186912Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0187015Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0187528Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0187539Z 
2025-01-10T13:23:48.0187667Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0187771Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0187846Z        ...
2025-01-10T13:23:48.0187927Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0188051Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0188163Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0188232Z        ...
2025-01-10T13:23:48.0188320Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0188438Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0188541Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0189068Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0189191Z 
2025-01-10T13:23:48.0189293Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0189649Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0189976Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0190303Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0190912Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0190924Z 
2025-01-10T13:23:48.0191018Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0191380Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0191750Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0192123Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0192627Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0192638Z 
2025-01-10T13:23:48.0192759Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0192871Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0192946Z        ...
2025-01-10T13:23:48.0193124Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0193255Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0193371Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0193447Z        ...
2025-01-10T13:23:48.0193529Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0193654Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0193754Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0194302Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0194450Z 
2025-01-10T13:23:48.0194577Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0194689Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0194767Z        ...
2025-01-10T13:23:48.0194848Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0194973Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0195083Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0195161Z        ...
2025-01-10T13:23:48.0195241Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0195366Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0195464Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0195974Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0195983Z 
2025-01-10T13:23:48.0196214Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0196339Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0196417Z        ...
2025-01-10T13:23:48.0196498Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0196627Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0196735Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0196811Z        ...
2025-01-10T13:23:48.0196893Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0197021Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0197118Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0197656Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0197662Z 
2025-01-10T13:23:48.0197788Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0197902Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0197979Z        ...
2025-01-10T13:23:48.0198060Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0198187Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0198296Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0198371Z        ...
2025-01-10T13:23:48.0198452Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0198576Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0198675Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0199217Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0199222Z 
2025-01-10T13:23:48.0199343Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0199464Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0199538Z        ...
2025-01-10T13:23:48.0199620Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0199745Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0199851Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0199928Z        ...
2025-01-10T13:23:48.0200008Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0200131Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0200228Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0200745Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0200751Z 
2025-01-10T13:23:48.0200873Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0201078Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0201157Z        ...
2025-01-10T13:23:48.0201239Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0201364Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0201474Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0201551Z        ...
2025-01-10T13:23:48.0201631Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0201754Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0201852Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0202404Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0202411Z 
2025-01-10T13:23:48.0202533Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0202643Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0202719Z        ...
2025-01-10T13:23:48.0202882Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0203005Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0203213Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0203291Z        ...
2025-01-10T13:23:48.0203373Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0203498Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0203596Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0204131Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0204136Z 
2025-01-10T13:23:48.0204228Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0204591Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0204923Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0205243Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0205788Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0205793Z 
2025-01-10T13:23:48.0205894Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0206250Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0206619Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0207115Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0207617Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0207628Z 
2025-01-10T13:23:48.0207750Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0207867Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0208044Z        ...
2025-01-10T13:23:48.0208134Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0208258Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0208373Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0208449Z        ...
2025-01-10T13:23:48.0208538Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0208657Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0208764Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0209307Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0209319Z 
2025-01-10T13:23:48.0209440Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0209853Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0209985Z        ...
2025-01-10T13:23:48.0217220Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0217426Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0217557Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0217632Z        ...
2025-01-10T13:23:48.0217726Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0217855Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0217968Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0218507Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0218517Z 
2025-01-10T13:23:48.0218655Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0218772Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0218844Z        ...
2025-01-10T13:23:48.0218946Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0219078Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0219191Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0219261Z        ...
2025-01-10T13:23:48.0219345Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0219464Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0219567Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0220121Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0220132Z 
2025-01-10T13:23:48.0220261Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0220370Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0220441Z        ...
2025-01-10T13:23:48.0220524Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0220835Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0220946Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0221015Z        ...
2025-01-10T13:23:48.0221097Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0221215Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0221318Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0221865Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0221875Z 
2025-01-10T13:23:48.0222000Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0222110Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0222183Z        ...
2025-01-10T13:23:48.0222269Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0222390Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0222614Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0222688Z        ...
2025-01-10T13:23:48.0222774Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0222894Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0222999Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0223700Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0223711Z 
2025-01-10T13:23:48.0223834Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0223946Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0224016Z        ...
2025-01-10T13:23:48.0224103Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0224222Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0224343Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0224414Z        ...
2025-01-10T13:23:48.0224501Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0224619Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0224722Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0225261Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0225272Z 
2025-01-10T13:23:48.0225393Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0225504Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0225576Z        ...
2025-01-10T13:23:48.0225666Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0225783Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0225899Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0225974Z        ...
2025-01-10T13:23:48.0226063Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0226181Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0226283Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0226845Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0226855Z 
2025-01-10T13:23:48.0226949Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0227328Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0227785Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0228112Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0228685Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0228795Z 
2025-01-10T13:23:48.0228897Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0229264Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0229637Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0230008Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0230552Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0230557Z 
2025-01-10T13:23:48.0230699Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0230815Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0230894Z        ...
2025-01-10T13:23:48.0230983Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0231119Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0231237Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0231314Z        ...
2025-01-10T13:23:48.0231401Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0231527Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0231634Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0232229Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0232234Z 
2025-01-10T13:23:48.0232368Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0232479Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0232554Z        ...
2025-01-10T13:23:48.0232640Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0232768Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0232964Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0233159Z        ...
2025-01-10T13:23:48.0233246Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0233371Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0233472Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0234026Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0234032Z 
2025-01-10T13:23:48.0234160Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0234267Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0234343Z        ...
2025-01-10T13:23:48.0234424Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0234548Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0234662Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0234858Z        ...
2025-01-10T13:23:48.0234942Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0235074Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0235176Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0235756Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0235761Z 
2025-01-10T13:23:48.0235888Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0235993Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0236070Z        ...
2025-01-10T13:23:48.0236151Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0236276Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0236383Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0236462Z        ...
2025-01-10T13:23:48.0236549Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0236672Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0236771Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0237349Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0237354Z 
2025-01-10T13:23:48.0237479Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0237584Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0237659Z        ...
2025-01-10T13:23:48.0237741Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0237867Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0237974Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0238055Z        ...
2025-01-10T13:23:48.0238140Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0238265Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0238364Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0238915Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0238921Z 
2025-01-10T13:23:48.0239047Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0239152Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0239229Z        ...
2025-01-10T13:23:48.0239311Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0239438Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0239545Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0239621Z        ...
2025-01-10T13:23:48.0239824Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0239954Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0240053Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0240576Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0240582Z 
2025-01-10T13:23:48.0240709Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0240813Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0240889Z        ...
2025-01-10T13:23:48.0240969Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0241094Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0241200Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0241276Z        ...
2025-01-10T13:23:48.0241359Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0241486Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0241693Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0242224Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0242229Z 
2025-01-10T13:23:48.0242327Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0242688Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0243140Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0243478Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0244003Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0244008Z 
2025-01-10T13:23:48.0244107Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0244467Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0244840Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0245211Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0245844Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0245851Z 
2025-01-10T13:23:48.0245975Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0246085Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0246156Z        ...
2025-01-10T13:23:48.0246244Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0246367Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0246480Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0246552Z        ...
2025-01-10T13:23:48.0246643Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0246874Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0246974Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0247517Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0247522Z 
2025-01-10T13:23:48.0247645Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0247756Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0247828Z        ...
2025-01-10T13:23:48.0247915Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0248034Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0248146Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0248217Z        ...
2025-01-10T13:23:48.0248303Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0248431Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0248536Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0249043Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0249049Z 
2025-01-10T13:23:48.0249171Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0249280Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0249350Z        ...
2025-01-10T13:23:48.0249437Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0249557Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0249670Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0249740Z        ...
2025-01-10T13:23:48.0249826Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0249948Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0250060Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0250595Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0250600Z 
2025-01-10T13:23:48.0250726Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0250839Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0250910Z        ...
2025-01-10T13:23:48.0251000Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0251125Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0251243Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0251313Z        ...
2025-01-10T13:23:48.0251403Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0251522Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0251743Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0252265Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0252271Z 
2025-01-10T13:23:48.0252393Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0252502Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0252574Z        ...
2025-01-10T13:23:48.0252661Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0252781Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0252893Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0252964Z        ...
2025-01-10T13:23:48.0253259Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0253456Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0253567Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0254105Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0254251Z 
2025-01-10T13:23:48.0254379Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0254490Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0254561Z        ...
2025-01-10T13:23:48.0254650Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0254771Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0254884Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0254955Z        ...
2025-01-10T13:23:48.0255042Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0255161Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0255265Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0255805Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0255815Z 
2025-01-10T13:23:48.0255910Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0256275Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0256599Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0256933Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0257470Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0257475Z 
2025-01-10T13:23:48.0257569Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0257930Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0258418Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0258782Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0259370Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0259375Z 
2025-01-10T13:23:48.0259505Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0259612Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0259688Z        ...
2025-01-10T13:23:48.0259771Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0259898Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0260007Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0260084Z        ...
2025-01-10T13:23:48.0260171Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0260293Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0260396Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0260945Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0260954Z 
2025-01-10T13:23:48.0261082Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0261189Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0261265Z        ...
2025-01-10T13:23:48.0261348Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0261473Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0261586Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0261663Z        ...
2025-01-10T13:23:48.0261750Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0261870Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0261973Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0262485Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0262493Z 
2025-01-10T13:23:48.0262621Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0262725Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0262801Z        ...
2025-01-10T13:23:48.0262883Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0263008Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0263265Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0263343Z        ...
2025-01-10T13:23:48.0263429Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0263549Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0263651Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0264188Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0264355Z 
2025-01-10T13:23:48.0264487Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0264591Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0264667Z        ...
2025-01-10T13:23:48.0264748Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0264871Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0264979Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0265054Z        ...
2025-01-10T13:23:48.0265141Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0265262Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0265364Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0265900Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0266036Z 
2025-01-10T13:23:48.0266167Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0266285Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0266359Z        ...
2025-01-10T13:23:48.0266449Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0266571Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0266686Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0266758Z        ...
2025-01-10T13:23:48.0266850Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0266971Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0267079Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0267599Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0267618Z 
2025-01-10T13:23:48.0267744Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0267855Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0267927Z        ...
2025-01-10T13:23:48.0268016Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0268140Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0268254Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0268328Z        ...
2025-01-10T13:23:48.0268417Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0268536Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0268643Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0269166Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0269180Z 
2025-01-10T13:23:48.0269306Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0269415Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0269487Z        ...
2025-01-10T13:23:48.0269574Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0269693Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0269806Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0269878Z        ...
2025-01-10T13:23:48.0269964Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0270082Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0270187Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0270723Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0270836Z 
2025-01-10T13:23:48.0270934Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0271304Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0271634Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0271970Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0272594Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0272599Z 
2025-01-10T13:23:48.0272694Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0273183Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0273561Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0273933Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0274451Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0274462Z 
2025-01-10T13:23:48.0274592Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0274699Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0274779Z        ...
2025-01-10T13:23:48.0274863Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0274992Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0275099Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0275175Z        ...
2025-01-10T13:23:48.0275262Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0275388Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0275488Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0276045Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0276169Z 
2025-01-10T13:23:48.0276303Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0276409Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0276489Z        ...
2025-01-10T13:23:48.0276571Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0276698Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0276807Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0276883Z        ...
2025-01-10T13:23:48.0276966Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0277089Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0277189Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0277711Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0277720Z 
2025-01-10T13:23:48.0277845Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0278060Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0278141Z        ...
2025-01-10T13:23:48.0278224Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0278350Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0278457Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0278536Z        ...
2025-01-10T13:23:48.0278619Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0278744Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0278843Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0279393Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0279398Z 
2025-01-10T13:23:48.0279529Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0279643Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0279722Z        ...
2025-01-10T13:23:48.0279803Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0279930Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0280039Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0280116Z        ...
2025-01-10T13:23:48.0280199Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0280327Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0280426Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0280974Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0280980Z 
2025-01-10T13:23:48.0281106Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0281215Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0281297Z        ...
2025-01-10T13:23:48.0281381Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0281510Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0281617Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0281697Z        ...
2025-01-10T13:23:48.0281781Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0281906Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0282008Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0282538Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0282544Z 
2025-01-10T13:23:48.0282673Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0282778Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0282951Z        ...
2025-01-10T13:23:48.0283148Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0283273Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0283380Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0283456Z        ...
2025-01-10T13:23:48.0283538Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0283663Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0283761Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0284288Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0284294Z 
2025-01-10T13:23:48.0284420Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0284526Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0284606Z        ...
2025-01-10T13:23:48.0284812Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0284941Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0285049Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0285125Z        ...
2025-01-10T13:23:48.0285207Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0285330Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0285430Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0285969Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0285974Z 
2025-01-10T13:23:48.0286072Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0286432Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0286768Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0287098Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0287636Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0287642Z 
2025-01-10T13:23:48.0287741Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0288098Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0288469Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0288987Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0289501Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0289506Z 
2025-01-10T13:23:48.0289630Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0289742Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0289892Z        ...
2025-01-10T13:23:48.0289982Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0290107Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0290223Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0290295Z        ...
2025-01-10T13:23:48.0290383Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0290503Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0290610Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0291167Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0291173Z 
2025-01-10T13:23:48.0291296Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0291410Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0291485Z        ...
2025-01-10T13:23:48.0291580Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0291700Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0291817Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0291889Z        ...
2025-01-10T13:23:48.0291981Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0292099Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0292207Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0292733Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0292741Z 
2025-01-10T13:23:48.0292865Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0292982Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0293233Z        ...
2025-01-10T13:23:48.0293341Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0293471Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0293589Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0293661Z        ...
2025-01-10T13:23:48.0293750Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0293872Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0293981Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0294536Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0294542Z 
2025-01-10T13:23:48.0294669Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0294786Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0294858Z        ...
2025-01-10T13:23:48.0294950Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0295198Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0295322Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0295395Z        ...
2025-01-10T13:23:48.0295487Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0295608Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0295715Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0296272Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0296278Z 
2025-01-10T13:23:48.0296402Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0296517Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0296590Z        ...
2025-01-10T13:23:48.0296678Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0296803Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0297032Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0297106Z        ...
2025-01-10T13:23:48.0297197Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0297322Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0297429Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0297959Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0297964Z 
2025-01-10T13:23:48.0298087Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0298198Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0298270Z        ...
2025-01-10T13:23:48.0298360Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0298483Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0298604Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0298677Z        ...
2025-01-10T13:23:48.0298765Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0298887Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0298991Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0299520Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0299526Z 
2025-01-10T13:23:48.0299646Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0299755Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0299828Z        ...
2025-01-10T13:23:48.0299918Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0300039Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0300158Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0300234Z        ...
2025-01-10T13:23:48.0300327Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0300452Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0300563Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0301114Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0301120Z 
2025-01-10T13:23:48.0301216Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0301581Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0302036Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0302367Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0302919Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0303004Z 
2025-01-10T13:23:48.0303203Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0303568Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0303942Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0304311Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0304842Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0304848Z 
2025-01-10T13:23:48.0304979Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0305087Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0305168Z        ...
2025-01-10T13:23:48.0305251Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0305383Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0305496Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0305579Z        ...
2025-01-10T13:23:48.0305671Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0305792Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0305898Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0306451Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0306457Z 
2025-01-10T13:23:48.0306588Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0306696Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0306779Z        ...
2025-01-10T13:23:48.0306863Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0306995Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0307230Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0307314Z        ...
2025-01-10T13:23:48.0307411Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0307533Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0307640Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0308160Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0308166Z 
2025-01-10T13:23:48.0308296Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0308401Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0308479Z        ...
2025-01-10T13:23:48.0308561Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0308689Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0308800Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0308884Z        ...
2025-01-10T13:23:48.0309146Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0309269Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0309376Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0309922Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0309928Z 
2025-01-10T13:23:48.0310056Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0310162Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0310242Z        ...
2025-01-10T13:23:48.0310326Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0310455Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0310565Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0310651Z        ...
2025-01-10T13:23:48.0310744Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0310866Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0310973Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0311520Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0311525Z 
2025-01-10T13:23:48.0311652Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0311758Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0311838Z        ...
2025-01-10T13:23:48.0311921Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0312047Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0312154Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0312234Z        ...
2025-01-10T13:23:48.0312326Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0312449Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0312553Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0313184Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0313190Z 
2025-01-10T13:23:48.0313320Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0313425Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0313501Z        ...
2025-01-10T13:23:48.0313584Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0313712Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0313821Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0313902Z        ...
2025-01-10T13:23:48.0313991Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0314235Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0314343Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0314910Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0314916Z 
2025-01-10T13:23:48.0315043Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0315148Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0315226Z        ...
2025-01-10T13:23:48.0315311Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0315435Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0315543Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0315620Z        ...
2025-01-10T13:23:48.0315710Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0315833Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0316045Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0316619Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0316624Z 
2025-01-10T13:23:48.0316726Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0317085Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0317422Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0317757Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0318327Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0318339Z 
2025-01-10T13:23:48.0318432Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0318797Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0319163Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0319536Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0320171Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0320178Z 
2025-01-10T13:23:48.0320301Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0320415Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0320486Z        ...
2025-01-10T13:23:48.0320580Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0320711Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0320820Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0320902Z        ...
2025-01-10T13:23:48.0321065Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0321196Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0321295Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0321881Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0321888Z 
2025-01-10T13:23:48.0322010Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0322124Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0322203Z        ...
2025-01-10T13:23:48.0322288Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0322416Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0322526Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0322608Z        ...
2025-01-10T13:23:48.0322691Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0322825Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0322926Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0323584Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0323593Z 
2025-01-10T13:23:48.0323717Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0323837Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0323912Z        ...
2025-01-10T13:23:48.0323995Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0324120Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0324229Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0324305Z        ...
2025-01-10T13:23:48.0324390Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0324520Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0324617Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0325305Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:48.0325311Z 
2025-01-10T13:23:48.0325480Z DataFrame.iloc[:, 0] (column name="0") values are different (0.80972 %)
2025-01-10T13:23:48.0325844Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0330502Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995981197664222, 0.9995995247961845, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812817, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235593, ...]
2025-01-10T13:23:48.0335261Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995995247961845, 0.9995981197664222, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812795, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235604, ...]
2025-01-10T13:23:48.0335465Z At positional index 124, first diff: 0.9928779361771577 != 0.9929028359129612
2025-01-10T13:23:48.0336076Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0336082Z 
2025-01-10T13:23:48.0336332Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0336444Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0336526Z        ...
2025-01-10T13:23:48.0336611Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0336740Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0336849Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0336926Z        ...
2025-01-10T13:23:48.0337009Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0337136Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0337243Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0337819Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0337825Z 
2025-01-10T13:23:48.0337955Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0338216Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0338295Z        ...
2025-01-10T13:23:48.0338378Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0338504Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0338613Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0338689Z        ...
2025-01-10T13:23:48.0338771Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0338898Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0339002Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0339574Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0339579Z 
2025-01-10T13:23:48.0339707Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0339825Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0339901Z        ...
2025-01-10T13:23:48.0339986Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0340113Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0340224Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0340300Z        ...
2025-01-10T13:23:48.0340382Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0340506Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0340611Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0341167Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0341173Z 
2025-01-10T13:23:48.0341301Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0341409Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0341492Z        ...
2025-01-10T13:23:48.0341576Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0341700Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0341808Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0341885Z        ...
2025-01-10T13:23:48.0341969Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0342095Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0342198Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0342741Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0342746Z 
2025-01-10T13:23:48.0342874Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0343197Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0343278Z        ...
2025-01-10T13:23:48.0343360Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0343488Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0343596Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0343672Z        ...
2025-01-10T13:23:48.0343758Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0343880Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0343986Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0344539Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0344545Z 
2025-01-10T13:23:48.0344643Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0345008Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0345461Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0345787Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0346345Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0346356Z 
2025-01-10T13:23:48.0346447Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0346808Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0347168Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0347543Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0348076Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0348186Z 
2025-01-10T13:23:48.0348312Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0348430Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0348502Z        ...
2025-01-10T13:23:48.0348591Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0348718Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0348825Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0348903Z        ...
2025-01-10T13:23:48.0348986Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0349110Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0349208Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0349777Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0349783Z 
2025-01-10T13:23:48.0349909Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0350108Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0350180Z        ...
2025-01-10T13:23:48.0350269Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0350393Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0350505Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0350581Z        ...
2025-01-10T13:23:48.0350663Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0350787Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0350885Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0351417Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0351423Z 
2025-01-10T13:23:48.0351545Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0351661Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0351732Z        ...
2025-01-10T13:23:48.0351818Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0351943Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0352049Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0352128Z        ...
2025-01-10T13:23:48.0352211Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0352334Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0352433Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0353266Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:48.0353274Z 
2025-01-10T13:23:48.0353441Z DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:23:48.0353807Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0358653Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
2025-01-10T13:23:48.0363820Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:23:48.0364016Z At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:23:48.0364624Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0364629Z 
2025-01-10T13:23:48.0364765Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0364876Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0364953Z        ...
2025-01-10T13:23:48.0365039Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0365169Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0365412Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0365494Z        ...
2025-01-10T13:23:48.0365580Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0365711Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0365818Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0366399Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0366405Z 
2025-01-10T13:23:48.0366534Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0366640Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0366718Z        ...
2025-01-10T13:23:48.0366801Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0366930Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0367039Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0367229Z        ...
2025-01-10T13:23:48.0367318Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0367441Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0367547Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0368111Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0368117Z 
2025-01-10T13:23:48.0368245Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0368352Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0368428Z        ...
2025-01-10T13:23:48.0368511Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0368638Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0368745Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0368825Z        ...
2025-01-10T13:23:48.0368917Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0369038Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0369142Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0369689Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0369694Z 
2025-01-10T13:23:48.0369821Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0369925Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0370002Z        ...
2025-01-10T13:23:48.0370083Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0370209Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0370317Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0370396Z        ...
2025-01-10T13:23:48.0370490Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0370611Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0370714Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0371188Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0371194Z 
2025-01-10T13:23:48.0371321Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0371426Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0371501Z        ...
2025-01-10T13:23:48.0371583Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0371708Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0371815Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0371892Z        ...
2025-01-10T13:23:48.0372070Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0372193Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0372296Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0372784Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0372789Z 
2025-01-10T13:23:48.0372889Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0373358Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0373686Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0374145Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0374631Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0374641Z 
2025-01-10T13:23:48.0374733Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0375104Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0375472Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0375844Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0376310Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0376316Z 
2025-01-10T13:23:48.0376438Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0376549Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0376622Z        ...
2025-01-10T13:23:48.0376711Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0376910Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0377100Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0377401Z        ...
2025-01-10T13:23:48.0377493Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0377631Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0377734Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0378247Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0378253Z 
2025-01-10T13:23:48.0378379Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0378491Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0378563Z        ...
2025-01-10T13:23:48.0378653Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0378776Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0378891Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0378967Z        ...
2025-01-10T13:23:48.0379049Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0379310Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0379411Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0379884Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0379890Z 
2025-01-10T13:23:48.0380016Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0380126Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0380198Z        ...
2025-01-10T13:23:48.0380284Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0380405Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0380524Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0380603Z        ...
2025-01-10T13:23:48.0380685Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0380814Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0380918Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0381523Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:48.0381529Z 
2025-01-10T13:23:48.0381693Z DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
2025-01-10T13:23:48.0382059Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0387033Z [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.954026284332555, 0.9540263108772171, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
2025-01-10T13:23:48.0392311Z [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
2025-01-10T13:23:48.0392659Z At positional index 55, first diff: 0.988842577117688 != 0.988854404408907
2025-01-10T13:23:48.0393346Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0393360Z 
2025-01-10T13:23:48.0393491Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0393601Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0393679Z        ...
2025-01-10T13:23:48.0393770Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0393901Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0394008Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0394084Z        ...
2025-01-10T13:23:48.0394167Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0394295Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0394395Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0394901Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0394908Z 
2025-01-10T13:23:48.0395174Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0395284Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0395361Z        ...
2025-01-10T13:23:48.0395443Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0395571Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0395679Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0395757Z        ...
2025-01-10T13:23:48.0395838Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0395962Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0396060Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0396552Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0396558Z 
2025-01-10T13:23:48.0396685Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0396797Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0396981Z        ...
2025-01-10T13:23:48.0397066Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0397191Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0397297Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0397374Z        ...
2025-01-10T13:23:48.0397456Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0397583Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0397682Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0398158Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0398164Z 
2025-01-10T13:23:48.0398290Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0398395Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0398480Z        ...
2025-01-10T13:23:48.0398562Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0398687Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0398795Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0398871Z        ...
2025-01-10T13:23:48.0398953Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0399078Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0399177Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0399672Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0399678Z 
2025-01-10T13:23:48.0399805Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0399910Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0399989Z        ...
2025-01-10T13:23:48.0400072Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0400200Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0400308Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0400383Z        ...
2025-01-10T13:23:48.0400465Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0400589Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0400687Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0401189Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0401195Z 
2025-01-10T13:23:48.0401292Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0401656Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0402121Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0402452Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0403162Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0403168Z 
2025-01-10T13:23:48.0403270Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0403631Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0404001Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0404385Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0404863Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0404869Z 
2025-01-10T13:23:48.0404992Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0405104Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0405179Z        ...
2025-01-10T13:23:48.0405272Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0405398Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0405512Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0405584Z        ...
2025-01-10T13:23:48.0405679Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0405804Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0405904Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0406421Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0406428Z 
2025-01-10T13:23:48.0406549Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0406660Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0406732Z        ...
2025-01-10T13:23:48.0406949Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0407083Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0407199Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0407273Z        ...
2025-01-10T13:23:48.0407363Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0407489Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0407598Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0408082Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0408088Z 
2025-01-10T13:23:48.0408211Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0408324Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0408395Z        ...
2025-01-10T13:23:48.0408487Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0408611Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0408842Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0408915Z        ...
2025-01-10T13:23:48.0409002Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0409122Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0409226Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0409740Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0409745Z 
2025-01-10T13:23:48.0409867Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0409992Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0410064Z        ...
2025-01-10T13:23:48.0410152Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0410273Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0410394Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0410464Z        ...
2025-01-10T13:23:48.0410555Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0410676Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0410780Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0411290Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0411295Z 
2025-01-10T13:23:48.0411419Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0411529Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0411601Z        ...
2025-01-10T13:23:48.0411689Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0411811Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0411930Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0412005Z        ...
2025-01-10T13:23:48.0412092Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0412215Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0412320Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0412813Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0412820Z 
2025-01-10T13:23:48.0412942Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0413179Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0413253Z        ...
2025-01-10T13:23:48.0413340Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0413461Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0413575Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0413786Z        ...
2025-01-10T13:23:48.0413878Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0414003Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0414108Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0414595Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0414600Z 
2025-01-10T13:23:48.0414724Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0414837Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0414909Z        ...
2025-01-10T13:23:48.0414997Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0415118Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0415230Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0415304Z        ...
2025-01-10T13:23:48.0415392Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0415646Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0415751Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0416247Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0416253Z 
2025-01-10T13:23:48.0416345Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0416713Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0417035Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0417372Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0417876Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0417881Z 
2025-01-10T13:23:48.0417972Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0418341Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0418707Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0419076Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0419634Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0419639Z 
2025-01-10T13:23:48.0419768Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0419876Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0419955Z        ...
2025-01-10T13:23:48.0420040Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0420169Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0420278Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0420358Z        ...
2025-01-10T13:23:48.0420441Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0420647Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0420753Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0421255Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0421260Z 
2025-01-10T13:23:48.0421387Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0421500Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0421576Z        ...
2025-01-10T13:23:48.0421660Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0421785Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0421894Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0421971Z        ...
2025-01-10T13:23:48.0422058Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0422187Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0422294Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0422763Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0422768Z 
2025-01-10T13:23:48.0422895Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0423000Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0423180Z        ...
2025-01-10T13:23:48.0423266Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0423395Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0423504Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0423581Z        ...
2025-01-10T13:23:48.0423664Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0423793Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0423901Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0424395Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0424402Z 
2025-01-10T13:23:48.0424528Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0424633Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0424709Z        ...
2025-01-10T13:23:48.0424792Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0424919Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0425026Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0425107Z        ...
2025-01-10T13:23:48.0425190Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0425315Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0425547Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0426044Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0426050Z 
2025-01-10T13:23:48.0426174Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0426279Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0426355Z        ...
2025-01-10T13:23:48.0426441Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0426568Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0426676Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0426753Z        ...
2025-01-10T13:23:48.0426835Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0426961Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0427066Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0427668Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0427673Z 
2025-01-10T13:23:48.0427799Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0427905Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0427984Z        ...
2025-01-10T13:23:48.0428065Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0428189Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0428299Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0428376Z        ...
2025-01-10T13:23:48.0428459Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0428583Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0428686Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0429197Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0429206Z 
2025-01-10T13:23:48.0429333Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0429438Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0429515Z        ...
2025-01-10T13:23:48.0429597Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0429722Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0429831Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0429908Z        ...
2025-01-10T13:23:48.0429990Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0430114Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0430220Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0430749Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0430760Z 
2025-01-10T13:23:48.0430858Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0431215Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0431542Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0431967Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0432495Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0432500Z 
2025-01-10T13:23:48.0432598Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0432963Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0433522Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0433895Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0434416Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0434425Z 
2025-01-10T13:23:48.0434551Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0434667Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0434739Z        ...
2025-01-10T13:23:48.0434832Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0434957Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0435075Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0435154Z        ...
2025-01-10T13:23:48.0435239Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0435365Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0435469Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0436025Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0436034Z 
2025-01-10T13:23:48.0436160Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0436271Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0436342Z        ...
2025-01-10T13:23:48.0436435Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0436557Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0436672Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0436749Z        ...
2025-01-10T13:23:48.0436832Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0436957Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0437058Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0437565Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0437691Z 
2025-01-10T13:23:48.0437837Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0437951Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0438022Z        ...
2025-01-10T13:23:48.0438112Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0438236Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0438355Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0438431Z        ...
2025-01-10T13:23:48.0438514Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0438642Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0438744Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0439281Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0439417Z 
2025-01-10T13:23:48.0439546Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0439664Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0439735Z        ...
2025-01-10T13:23:48.0439825Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0439946Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0440063Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0440133Z        ...
2025-01-10T13:23:48.0440221Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0440345Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0440445Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0440980Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0440991Z 
2025-01-10T13:23:48.0441114Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0441225Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0441296Z        ...
2025-01-10T13:23:48.0441388Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0441508Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0441620Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0441691Z        ...
2025-01-10T13:23:48.0441777Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0441902Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0442001Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0442521Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0442529Z 
2025-01-10T13:23:48.0442654Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0442768Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0442840Z        ...
2025-01-10T13:23:48.0442928Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0443159Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0443277Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0443347Z        ...
2025-01-10T13:23:48.0443436Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0443565Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0443664Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0444246Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0444412Z 
2025-01-10T13:23:48.0444540Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0444654Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0444725Z        ...
2025-01-10T13:23:48.0444811Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0444930Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0445043Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0445113Z        ...
2025-01-10T13:23:48.0445203Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0445328Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0445426Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0446016Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0446022Z 
2025-01-10T13:23:48.0446118Z Series values are different (4.04858 %)
2025-01-10T13:23:48.0446593Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0446922Z [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 56, 55, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0447246Z [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
2025-01-10T13:23:48.0447841Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index] - AssertionError: Series are different
2025-01-10T13:23:48.0447846Z 
2025-01-10T13:23:48.0447944Z Series values are different (6.47773 %)
2025-01-10T13:23:48.0448301Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0448671Z [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 60, 61, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0449045Z [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
2025-01-10T13:23:48.0449599Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0449687Z 
2025-01-10T13:23:48.0449818Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0449930Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0450006Z        ...
2025-01-10T13:23:48.0450090Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0450216Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0450331Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0450402Z        ...
2025-01-10T13:23:48.0450489Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0450609Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0450713Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0451308Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0451395Z 
2025-01-10T13:23:48.0451527Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0451633Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0451711Z        ...
2025-01-10T13:23:48.0451795Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0451921Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0452034Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0452105Z        ...
2025-01-10T13:23:48.0452196Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0452316Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0452420Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0452981Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0452989Z 
2025-01-10T13:23:48.0453216Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0453322Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0453398Z        ...
2025-01-10T13:23:48.0453480Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0453607Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0453719Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0453790Z        ...
2025-01-10T13:23:48.0453876Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0453996Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0454099Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0454696Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0454706Z 
2025-01-10T13:23:48.0454832Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0454941Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0455016Z        ...
2025-01-10T13:23:48.0455098Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0455223Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0455335Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0455406Z        ...
2025-01-10T13:23:48.0455492Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0455610Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0455713Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0456301Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0456306Z 
2025-01-10T13:23:48.0456555Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0456665Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0456741Z        ...
2025-01-10T13:23:48.0456831Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0456951Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0457064Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0457135Z        ...
2025-01-10T13:23:48.0457222Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0457340Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0457443Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0458025Z FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues] - AssertionError: MultiIndex level [2] are different
2025-01-10T13:23:48.0458031Z 
2025-01-10T13:23:48.0458158Z MultiIndex level [2] values are different (4.04858 %)
2025-01-10T13:23:48.0458374Z [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0458450Z        ...
2025-01-10T13:23:48.0458537Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0458656Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0458770Z [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0458843Z        ...
2025-01-10T13:23:48.0458932Z        20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
2025-01-10T13:23:48.0459050Z       dtype='int64', name='level_number_lower', length=247)
2025-01-10T13:23:48.0459154Z At positional index 75, first diff: 7 != 6
2025-01-10T13:23:48.0459459Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[stimulated_emission_factor] - AssertionError: 
2025-01-10T13:23:48.0459566Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0459571Z 
2025-01-10T13:23:48.0459666Z Mismatched elements: 120 / 584480 (0.0205%)
2025-01-10T13:23:48.0459782Z Max absolute difference among violations: 1.
2025-01-10T13:23:48.0459891Z Max relative difference among violations: 1.
2025-01-10T13:23:48.0460038Z  ACTUAL: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:23:48.0460151Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:23:48.0460255Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:23:48.0460403Z  DESIRED: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:23:48.0460502Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
2025-01-10T13:23:48.0460605Z        [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
2025-01-10T13:23:48.0460893Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_lower_level_index] - AssertionError: 
2025-01-10T13:23:48.0460999Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0461004Z 
2025-01-10T13:23:48.0461099Z Mismatched elements: 748 / 29224 (2.56%)
2025-01-10T13:23:48.0461221Z Max absolute difference among violations: 4005
2025-01-10T13:23:48.0461353Z Max relative difference among violations: 26.00649351
2025-01-10T13:23:48.0461477Z  ACTUAL: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:23:48.0461608Z  DESIRED: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
2025-01-10T13:23:48.0461891Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_upper_level_index] - AssertionError: 
2025-01-10T13:23:48.0461993Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0461998Z 
2025-01-10T13:23:48.0462089Z Mismatched elements: 1847 / 29224 (6.32%)
2025-01-10T13:23:48.0462204Z Max absolute difference among violations: 4046
2025-01-10T13:23:48.0462331Z Max relative difference among violations: 24.82208589
2025-01-10T13:23:48.0462454Z  ACTUAL: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:23:48.0462576Z  DESIRED: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
2025-01-10T13:23:48.0462948Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[beta_sobolev] - AssertionError: 
2025-01-10T13:23:48.0463154Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0463159Z 
2025-01-10T13:23:48.0463257Z Mismatched elements: 13536 / 584480 (2.32%)
2025-01-10T13:23:48.0463387Z Max absolute difference among violations: 0.99984222
2025-01-10T13:23:48.0463515Z Max relative difference among violations: 6337.12154973
2025-01-10T13:23:48.0463617Z  ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:48.0463700Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:48.0463784Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:23:48.0463883Z  DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:48.0463966Z        [1., 1., 1., ..., 1., 1., 1.],
2025-01-10T13:23:48.0464044Z        [1., 1., 1., ..., 1., 1., 1.],...
2025-01-10T13:23:48.0464297Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines] - AssertionError: 
2025-01-10T13:23:48.0464406Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0464525Z 
2025-01-10T13:23:48.0464626Z Mismatched elements: 13335 / 263016 (5.07%)
2025-01-10T13:23:48.0464767Z Max absolute difference among violations: 4.25260542e+12
2025-01-10T13:23:48.0464895Z Max relative difference among violations: 18196.0085861
2025-01-10T13:23:48.0465070Z  ACTUAL: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:23:48.0465152Z         4.043917e+10, 6.677200e-07],
2025-01-10T13:23:48.0465300Z        [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:23:48.0465466Z  DESIRED: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
2025-01-10T13:23:48.0465553Z         4.043917e+10, 6.677200e-07],
2025-01-10T13:23:48.0465685Z        [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
2025-01-10T13:23:48.0465929Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[f_lu] - AssertionError: 
2025-01-10T13:23:48.0466038Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0466046Z 
2025-01-10T13:23:48.0466140Z Mismatched elements: 2221 / 29224 (7.6%)
2025-01-10T13:23:48.0466271Z Max absolute difference among violations: 2.92713618
2025-01-10T13:23:48.0466399Z Max relative difference among violations: 18196.0085861
2025-01-10T13:23:48.0466569Z  ACTUAL: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:23:48.0466650Z        1.126883e+00, 4.414472e-04])
2025-01-10T13:23:48.0466819Z  DESIRED: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
2025-01-10T13:23:48.0466901Z        1.126883e+00, 4.414472e-04])
2025-01-10T13:23:48.0467163Z FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[tau_sobolevs] - AssertionError: 
2025-01-10T13:23:48.0467260Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0467264Z 
2025-01-10T13:23:48.0467367Z Mismatched elements: 39620 / 584480 (6.78%)
2025-01-10T13:23:48.0467510Z Max absolute difference among violations: 282815.33818472
2025-01-10T13:23:48.0467645Z Max relative difference among violations: 4.12352828e+47
2025-01-10T13:23:48.0467814Z  ACTUAL: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:23:48.0467895Z         0.000000e+00, 0.000000e+00],
2025-01-10T13:23:48.0468032Z        [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:23:48.0468194Z  DESIRED: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
2025-01-10T13:23:48.0468277Z         0.000000e+00, 0.000000e+00],
2025-01-10T13:23:48.0468406Z        [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
2025-01-10T13:23:48.0468897Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_w] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:48.0468904Z 
2025-01-10T13:23:48.0469074Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:23:48.0469152Z [index]: [0, 1]
2025-01-10T13:23:48.0469379Z [left]:  [0.40039163797855976, 0.45013644671958974]
2025-01-10T13:23:48.0469486Z [right]: [0.40039163797855976, 0.4500690173218345]
2025-01-10T13:23:48.0469661Z At positional index 1, first diff: 0.45013644671958974 != 0.4500690173218345
2025-01-10T13:23:48.0470144Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_t_rad] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:48.0470149Z 
2025-01-10T13:23:48.0470313Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:23:48.0470390Z [index]: [0, 1]
2025-01-10T13:23:48.0470492Z [left]:  [9967.488442185557, 10090.925208074616]
2025-01-10T13:23:48.0470588Z [right]: [9967.488442185557, 10091.396322818851]
2025-01-10T13:23:48.0470763Z At positional index 1, first diff: 10090.925208074616 != 10091.396322818851
2025-01-10T13:23:48.0471297Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_electron_densities] - AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
2025-01-10T13:23:48.0471382Z 
2025-01-10T13:23:48.0471540Z DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
2025-01-10T13:23:48.0471621Z [index]: [0, 1]
2025-01-10T13:23:48.0471717Z [left]:  [2869544645.3209715, 2880986026.9779425]
2025-01-10T13:23:48.0471818Z [right]: [2869544645.3209715, 2881024886.0882792]
2025-01-10T13:23:48.0478112Z At positional index 1, first diff: 2880986026.9779425 != 2881024886.0882792
2025-01-10T13:23:48.0478571Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[nu_bar_estimator] - AssertionError: Series are different
2025-01-10T13:23:48.0478577Z 
2025-01-10T13:23:48.0478680Z Series values are different (100.0 %)
2025-01-10T13:23:48.0478823Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:23:48.0480013Z [left]:  [1.0190851489144414e+29, 8.620293210130916e+28, 7.627182111494611e+28, 6.892948616165262e+28, 6.33792769094367e+28, 5.96002040258715e+28, 5.586558872212224e+28, 5.256359181780157e+28, 5.018051447190144e+28, 4.80142717097284e+28, 4.635443103818662e+28, 4.42760082209026e+28, 4.266701646003403e+28, 4.095148200480327e+28, 3.973054136677623e+28, 3.881348463924801e+28, 3.749648114483988e+28, 3.6669667839395174e+28, 3.5309131816469346e+28, 3.4364426470451254e+28]
2025-01-10T13:23:48.0481222Z [right]: [1.0202042777991753e+29, 8.604643039338655e+28, 7.621843612415326e+28, 6.887796775939633e+28, 6.338143063845967e+28, 5.961770832970249e+28, 5.583215038688499e+28, 5.26214201104387e+28, 5.00719468999816e+28, 4.795144203550334e+28, 4.630537292368217e+28, 4.425690259081018e+28, 4.270865369572798e+28, 4.094544283657345e+28, 3.972280940559004e+28, 3.884152385274923e+28, 3.7498225331847723e+28, 3.6666118688506634e+28, 3.5319738797726287e+28, 3.437270715325205e+28]
2025-01-10T13:23:48.0481426Z At positional index 0, first diff: 1.0190851489144414e+29 != 1.0202042777991753e+29
2025-01-10T13:23:48.0481794Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[j_estimator] - AssertionError: Series are different
2025-01-10T13:23:48.0481805Z 
2025-01-10T13:23:48.0481906Z Series values are different (100.0 %)
2025-01-10T13:23:48.0482030Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:23:48.0482984Z [left]:  [116548101693134.0, 98287497352449.0, 86880176732435.3, 78272950854373.0, 72163814877095.83, 67694196332568.8, 63443304042094.88, 60039709300008.766, 57626147839330.93, 55320363334244.24, 53407234761435.555, 51398562237742.71, 49867122015465.38, 48237829093150.86, 46995101666576.03, 46046276744657.68, 44990423974887.06, 44175537951010.664, 43032079683987.45, 42141581527839.66]
2025-01-10T13:23:48.0484060Z [right]: [116635492761989.08, 98171051632121.94, 86872515261186.84, 78289696965690.05, 72209193315676.42, 67743848273202.76, 63510940656108.0, 60117004438842.5, 57572723670164.91, 55316097836075.18, 53398108009568.71, 51391839595543.54, 49914799926154.195, 48252386019894.61, 46984233483222.1, 46076787175987.44, 45005288890715.74, 44179675761283.02, 43040066710169.69, 42141149121109.82]
2025-01-10T13:23:48.0484402Z At positional index 0, first diff: 116548101693134.0 != 116635492761989.08
2025-01-10T13:23:48.0484769Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[t_radiative] - AssertionError: Series are different
2025-01-10T13:23:48.0484775Z 
2025-01-10T13:23:48.0484875Z Series values are different (90.0 %)
2025-01-10T13:23:48.0484997Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:23:48.0485991Z [left]:  [10090.925208074616, 10114.284007169754, 10139.419400388753, 10142.763627360704, 10149.780795955081, 10123.09844072696, 10084.70389705666, 10058.012622231076, 10075.221831273808, 10032.602564737463, 10029.923783575228, 9982.400974610373, 9943.057719983486, 9914.605779635785, 9894.245392559053, 9854.911578885576, 9802.511064512953, 9775.252526407034, 9735.554945100961, 9699.295793920262]
2025-01-10T13:23:48.0486978Z [right]: [10091.396322818851, 10113.672762424394, 10138.57214647089, 10142.40782954104, 10149.471061360664, 10124.731447668686, 10084.96501000204, 10057.88480134284, 10073.983914823793, 10031.924501830883, 10029.890159447663, 9982.658841271636, 9943.375727608092, 9914.259749796103, 9893.924180562475, 9854.860600288932, 9802.891513260798, 9774.848565783677, 9735.162327402864, 9698.911095826039]
2025-01-10T13:23:48.0487263Z At positional index 0, first diff: 10090.925208074616 != 10091.396322818851
2025-01-10T13:23:48.0487636Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[dilution_factor] - AssertionError: Series are different
2025-01-10T13:23:48.0487641Z 
2025-01-10T13:23:48.0487734Z Series values are different (95.0 %)
2025-01-10T13:23:48.0487861Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
2025-01-10T13:23:48.0488940Z [left]:  [0.45013644671958974, 0.3590876501536774, 0.29922866259325875, 0.2578248359585449, 0.22541895309871685, 0.2011998403594266, 0.1825952857379094, 0.16657898370897484, 0.15044998950385866, 0.13972884748944558, 0.12862444897046627, 0.12093391136570561, 0.1134368459236266, 0.1064936133229687, 0.1001521163428717, 0.09484336636678078, 0.090537247519663, 0.08584829670213995, 0.08202005255449264, 0.07823319609488677]
2025-01-10T13:23:48.0490023Z [right]: [0.4500690173218345, 0.3591778672440072, 0.299315794490968, 0.2578615845098735, 0.2254422032786788, 0.20109997630618956, 0.18257381854718482, 0.166581017494628, 0.15049754388199085, 0.13975435818105286, 0.12862206084807348, 0.12092168181342122, 0.1134233405695467, 0.10650389106044364, 0.10016109465785483, 0.09484390983006763, 0.09052533757303871, 0.08585912682814001, 0.0820302832176511, 0.07824287530618068]
2025-01-10T13:23:48.0490205Z At positional index 0, first diff: 0.45013644671958974 != 0.4500690173218345
2025-01-10T13:23:48.0490562Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_nus] - AssertionError: Series are different
2025-01-10T13:23:48.0490570Z 
2025-01-10T13:23:48.0490672Z Series values are different (5.1125 %)
2025-01-10T13:23:48.0491035Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0496231Z [left]:  [1806497964363691.5, 620824050797791.0, 651557470803973.5, 320924283401155.06, 561113873787112.25, 241798291122606.1, 676659115957490.4, 599043646843299.5, 607330789848065.1, 916915882531221.8, 944436308170835.4, 768263702028831.1, 3180981513893847.5, 2598977918829023.0, 857730899770804.0, 618923179519891.8, 551416875835854.44, 1086541433542293.5, 754833971959408.2, 491317193158596.1, 463436938874983.3, 1490288028825510.8, 820033385297487.8, 2452394921854276.0, 735345782477539.2, 754787342662615.8, 1199748305923909.8, 555498342552241.7, 1389852333652706.2, 1385846435296470.8, 368679109418251.0, 1912095724903033.2, 2017769542518466.0, 627651232172153.5, 1067422242306306.2, 948629480189651.8, 1978325812571257.2, 445358814403560.5, 1003063944118045.1, 849728144317407.0, 967658015948004.0, 1280663773931335.5, 1146264300342218.8, 1001861030074981.8, 1119183834838938.5, 508263982580230.94, 1892628101399911.5, 781537280613827.0, 1151086326674402.2, 604499180764604.0, 725902034055549.9, 457814698066574.3, 527262173332999.9, 341748821526544.94, 562192309822701.44, 1275142789503603.2, 657025184715239.1, 723852885328246.5, 1885538050889659.0, 585984121054452.8, 917026429989072.4, 696897964334913.8, 267976306885906.9, 343747179020909.4, 96582762885197.0, 1296746601148043.2, 491334710156273.4, 1492212625817827.0, 764003012375887.5, 1572736205466074.5, 1559683657845856.8, 476769967588303.4, 1860056739912971.5, 702994366583567.1, 1017518348351587.6, 484486056936689.44, 453148114829195.1, 717528815454204.8, 508993320531592.06, 1838746711006649.2, 663648932445292.6, 1322073114843600.0, 601612805662424.9, 1840374275823067.5, 440721373409527.9, 1641950783987409.2, 1588043382663297.8, 1174117968839014.5, 1215683099165958.0, 997747131579365.4, 1168546500179118.0, 1048569696680261.6, 1513832752764706.8, 1363140908755187.5, 430233648082889.1, 386057265404197.6, 1139144647809848.2, 307473380309096.1, 403471109559731.6, 1156219784137886.0, ...]
2025-01-10T13:23:48.0501545Z [right]: [1806512041912368.8, 620828912578783.0, 651561681514283.2, 320926793622792.2, 561113831783033.0, 241800185490365.7, 676657497080704.5, 599041295479916.1, 607335547665201.9, 916923063058785.2, 944437910067241.0, 768263081009078.1, 3180974191574679.5, 2598971968757746.0, 857737633068955.4, 618928023168687.5, 551416803496124.25, 1086549942730966.9, 754833333392143.2, 491321027587878.7, 463440568130160.4, 1490299638092356.5, 820039899773855.1, 2452391211684156.5, 735351500669317.2, 754784724695130.1, 1199750254428993.5, 555501175228475.94, 1389863217827777.5, 1385857288100655.8, 368681996608404.06, 1912110698856825.8, 2017785344022282.2, 627651183748411.8, 1067430591325981.9, 948623864004036.0, 1978326785288413.0, 445362302085804.25, 1003071799286044.6, 849734798686120.6, 967665593846029.1, 1280673803031827.2, 1146262107204918.5, 1001868875822752.4, 1119192629281446.4, 508267969421775.25, 1892642922899362.8, 781543400968040.9, 1151095341031394.2, 604503914702702.6, 725907718720482.8, 457818283293006.9, 527261796217634.44, 341748696489478.8, 562196737455386.1, 1275152810939863.2, 657003154645147.8, 723858331274613.6, 1885552835316985.5, 585988709997902.4, 917033611382352.2, 696895494383372.0, 267978405454919.2, 343749870964784.4, 96583519241591.61, 1296758039945233.8, 491338550899887.9, 1492219434855197.0, 764008995416200.5, 1572724795429636.2, 1559695871999531.0, 476770259286661.5, 1860071011741526.8, 702999878183188.2, 1017511963264823.4, 484489851031166.6, 453151663510803.5, 717543258409877.6, 508990329432545.4, 1838756496639701.8, 663654129595372.2, 1322083461079532.0, 601616268613591.0, 1840388688113732.8, 440724823612140.5, 1641895920313314.8, 1588055811374384.5, 1174127163560797.5, 1215687723496508.2, 997743048820577.1, 1168560411536350.2, 1048577905256173.4, 1513844599143900.5, 1363151613665534.0, 430237017317327.8, 386060300653508.2, 1139153568649478.2, 307475792296687.0, 403474269212082.0, 1156228838695875.2, ...]
2025-01-10T13:23:48.0501737Z At positional index 56, first diff: 657025184715239.1 != 657003154645147.8
2025-01-10T13:23:48.0502157Z FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_energies] - AssertionError: Series are different
2025-01-10T13:23:48.0502163Z 
2025-01-10T13:23:48.0502258Z Series values are different (1.3025 %)
2025-01-10T13:23:48.0502622Z [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
2025-01-10T13:23:48.0509008Z [left]:  [2.5801871599548787e-05, 2.5615305276449435e-05, 2.5858344017372144e-05, -2.4286539750273696e-05, 2.4924524325725243e-05, -2.456230824810029e-05, 2.4103043153710077e-05, -2.438655094434287e-05, -2.4539054537501715e-05, 2.5417984817525785e-05, 2.512000535197746e-05, -2.4642582656280976e-05, -2.423335106855554e-05, -2.4507743780475822e-05, 2.4958490988042172e-05, -2.4193730330394604e-05, 2.5671484002468758e-05, 2.571778434062277e-05, 2.464945535255098e-05, -2.422773639583352e-05, 2.5447471360622184e-05, -2.409627635116542e-05, 2.5614844040255083e-05, -2.4320523596905817e-05, 2.5377784576172196e-05, -2.3457066675560312e-05, 2.4369140190445265e-05, 2.5580782093694832e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4679185862134628e-05, 2.5692099696671885e-05, 2.2709368608835504e-05, -2.422769024282858e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.221435871493417e-05, 2.588758262836899e-05, -2.4715605747432618e-05, 2.5511122157387355e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127536098161385e-05, -2.468141895326209e-05, -2.47043179761032e-05, -2.3740908691907106e-05, 2.4832442492096064e-05, -2.413156183708872e-05, -2.4208444730823924e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.413785571902468e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.4718848796409172e-05, 2.5235644879553273e-05, 2.5660116818809676e-05, 2.5705887025490933e-05, -2.3537055466673638e-05, 2.5942471740302383e-05, 2.4779255435154302e-05, -2.4437171482408422e-05, -2.488587475102296e-05, -2.461817145541738e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721589006402834e-05, -2.3916183924792534e-05, -2.4073277575252532e-05, 2.5426114770306902e-05, 2.504304506604637e-05, -2.365600824332809e-05, 2.564649452803889e-05, -2.3899135529642785e-05, 2.5338970275810367e-05, 2.484858251486878e-05, 2.5806793260333468e-05, 2.538037983050111e-05, -2.4207571237562553e-05, 2.4527910111281257e-05, 2.4916625382690475e-05, -2.4248093976538034e-05, -2.4259084902202997e-05, 2.5042343244083765e-05, -2.4184000110453416e-05, 2.534949108326902e-05, -2.438918660146681e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:23:48.0515637Z [right]: [2.580187060760512e-05, 2.5615305276449435e-05, 2.585830862681326e-05, -2.4286539523836896e-05, 2.4924327273178824e-05, -2.4562308329704016e-05, 2.4102796735064873e-05, -2.4386264249292878e-05, -2.4539054606359595e-05, 2.5417984817525785e-05, 2.5119851241109903e-05, -2.464236975797002e-05, -2.423310551200988e-05, -2.4507495750261827e-05, 2.4958491461131913e-05, -2.4193730203503752e-05, 2.5671279598406848e-05, 2.571778434758039e-05, 2.464924146734715e-05, -2.4227735746845522e-05, 2.5447471360622184e-05, -2.409627535779648e-05, 2.5614846934356755e-05, -2.4320296346496788e-05, 2.5377783180930537e-05, -2.345680162082186e-05, 2.436898893045542e-05, 2.5580712211859562e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4678990692654424e-05, 2.5692099452386407e-05, 2.270905632364821e-05, -2.4227512425411162e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.2214142249592017e-05, 2.588758262836899e-05, -2.4715606408157026e-05, 2.5511122485544443e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127338442376704e-05, -2.4681216640073288e-05, -2.4704319074974646e-05, -2.3740909354181544e-05, 2.4831415400580145e-05, -2.4131554413805748e-05, -2.420844496771843e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.4137581143845235e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.471887326730884e-05, 2.5235644520855386e-05, 2.5660032958970583e-05, 2.5705887025490933e-05, -2.3536700387812003e-05, 2.5942471740302383e-05, 2.4779076546395e-05, -2.4437167612038533e-05, -2.4885874975052928e-05, -2.461782418608366e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721880722086934e-05, -2.391585609212342e-05, -2.407321716937353e-05, 2.5426114770306902e-05, 2.5043044930642476e-05, -2.3655959156054043e-05, 2.564649452803889e-05, -2.389913546657555e-05, 2.533792518100767e-05, 2.4848582397006154e-05, 2.5806793260333468e-05, 2.5380277617431415e-05, -2.4207282609290893e-05, 2.4528010028979532e-05, 2.491662531246e-05, -2.4248093837055892e-05, -2.4259085434617066e-05, 2.5042343244083765e-05, -2.4184000860153038e-05, 2.534949108326902e-05, -2.4389186927485497e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
2025-01-10T13:23:48.0515984Z At positional index 414, first diff: 2.5347525852067693e-05 != 2.5657552576608082e-05
2025-01-10T13:23:48.0516451Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets - AssertionError: 
2025-01-10T13:23:48.0516559Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0516564Z 
2025-01-10T13:23:48.0516662Z Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:23:48.0516800Z Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:23:48.0516914Z Max relative difference among violations: 1.
2025-01-10T13:23:48.0517082Z  ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0517172Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0517338Z  DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0517424Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0517814Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets_reabsorbed - AssertionError: 
2025-01-10T13:23:48.0517926Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0517931Z 
2025-01-10T13:23:48.0518031Z Mismatched elements: 252 / 10000 (2.52%)
2025-01-10T13:23:48.0518166Z Max absolute difference among violations: 4.15247374e+37
2025-01-10T13:23:48.0518299Z Max relative difference among violations: 1.03027212
2025-01-10T13:23:48.0518459Z  ACTUAL: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0518543Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0518704Z  DESIRED: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0518787Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0519086Z FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve - AssertionError: 
2025-01-10T13:23:48.0519190Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0519195Z 
2025-01-10T13:23:48.0519287Z Mismatched elements: 309 / 10000 (3.09%)
2025-01-10T13:23:48.0519426Z Max absolute difference among violations: 4.30543741e+37
2025-01-10T13:23:48.0519545Z Max relative difference among violations: 1.
2025-01-10T13:23:48.0519705Z  ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0519787Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0519947Z  DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0520029Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0520322Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_j_blue_estimators - AssertionError: 
2025-01-10T13:23:48.0520424Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0520429Z 
2025-01-10T13:23:48.0520529Z Mismatched elements: 491895 / 584480 (84.2%)
2025-01-10T13:23:48.0520665Z Max absolute difference among violations: 5.32418652e-19
2025-01-10T13:23:48.0520789Z Max relative difference among violations: 8.78746214
2025-01-10T13:23:48.0520899Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0521079Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0521165Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0521271Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0521348Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0521432Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0521693Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_spectrum - AssertionError: 
2025-01-10T13:23:48.0521795Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0521800Z 
2025-01-10T13:23:48.0521891Z Mismatched elements: 4832 / 10000 (48.3%)
2025-01-10T13:23:48.0522027Z Max absolute difference among violations: 1.38672909e+39
2025-01-10T13:23:48.0522148Z Max relative difference among violations: 5.17890748
2025-01-10T13:23:48.0522315Z  ACTUAL: array([1.414459e+39, 1.753650e+39, 1.413044e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0522406Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0522575Z  DESIRED: array([1.471192e+39, 1.695642e+39, 1.353685e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0522790Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0523221Z FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_virtual_spectrum - AssertionError: 
2025-01-10T13:23:48.0523324Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0523329Z 
2025-01-10T13:23:48.0523420Z Mismatched elements: 5933 / 10000 (59.3%)
2025-01-10T13:23:48.0523553Z Max absolute difference among violations: 5.26760031e+38
2025-01-10T13:23:48.0523679Z Max relative difference among violations: 23978.84555943
2025-01-10T13:23:48.0523846Z  ACTUAL: array([1.454843e+39, 1.363063e+39, 1.389398e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0523924Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0524091Z  DESIRED: array([1.440332e+39, 1.356114e+39, 1.397557e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0524178Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0524626Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-downbranch] - AssertionError: 
2025-01-10T13:23:48.0524736Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0524741Z 
2025-01-10T13:23:48.0524841Z Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:23:48.0524975Z Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:23:48.0525098Z Max relative difference among violations: 8.35741234
2025-01-10T13:23:48.0525201Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0525283Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0525369Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0525467Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0525550Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0525628Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0526052Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-downbranch] - AssertionError: 
2025-01-10T13:23:48.0526161Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0526166Z 
2025-01-10T13:23:48.0526258Z Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:23:48.0526391Z Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:23:48.0526511Z Max relative difference among violations: 5.83764686
2025-01-10T13:23:48.0526675Z  ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0526754Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0526920Z  DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0526997Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0527447Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-downbranch] - AssertionError: 
2025-01-10T13:23:48.0527550Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0527554Z 
2025-01-10T13:23:48.0527795Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:23:48.0527933Z Max absolute difference among violations: 5.00661745e+37
2025-01-10T13:23:48.0528054Z Max relative difference among violations: 6.79985816
2025-01-10T13:23:48.0528216Z  ACTUAL: array([1.541783e+39, 1.545645e+39, 1.540310e+39, ..., 2.274707e+31,
2025-01-10T13:23:48.0528293Z        2.292907e+31, 2.257206e+31])
2025-01-10T13:23:48.0528458Z  DESIRED: array([1.551142e+39, 1.555226e+39, 1.548880e+39, ..., 2.256713e+31,
2025-01-10T13:23:48.0528535Z        2.279436e+31, 2.243943e+31])
2025-01-10T13:23:48.0528971Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-macroatom] - AssertionError: 
2025-01-10T13:23:48.0529067Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0529077Z 
2025-01-10T13:23:48.0529174Z Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:23:48.0529308Z Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:23:48.0529430Z Max relative difference among violations: 4.08461732
2025-01-10T13:23:48.0529666Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0529744Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0529828Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0529928Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0530009Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0530087Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0530504Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-macroatom] - AssertionError: 
2025-01-10T13:23:48.0530602Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0530612Z 
2025-01-10T13:23:48.0530704Z Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:23:48.0530839Z Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:23:48.0530959Z Max relative difference among violations: 3.08310014
2025-01-10T13:23:48.0531127Z  ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0531208Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0531372Z  DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0531450Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0531892Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-macroatom] - AssertionError: 
2025-01-10T13:23:48.0531988Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0531993Z 
2025-01-10T13:23:48.0532088Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:23:48.0532222Z Max absolute difference among violations: 2.90101642e+37
2025-01-10T13:23:48.0532342Z Max relative difference among violations: 96.4428449
2025-01-10T13:23:48.0532502Z  ACTUAL: array([1.546350e+39, 1.557400e+39, 1.546571e+39, ..., 1.400403e+31,
2025-01-10T13:23:48.0532579Z        1.375141e+31, 1.337928e+31])
2025-01-10T13:23:48.0532745Z  DESIRED: array([1.545562e+39, 1.556608e+39, 1.545912e+39, ..., 1.352607e+31,
2025-01-10T13:23:48.0532826Z        1.330497e+31, 1.294462e+31])
2025-01-10T13:23:48.0533370Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-macroatom] - AssertionError: 
2025-01-10T13:23:48.0533469Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0533474Z 
2025-01-10T13:23:48.0533578Z Mismatched elements: 441248 / 584480 (75.5%)
2025-01-10T13:23:48.0533709Z Max absolute difference among violations: 4.67863561e-19
2025-01-10T13:23:48.0533833Z Max relative difference among violations: 4.08461732
2025-01-10T13:23:48.0533936Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0534014Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0534097Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0534194Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0534276Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0534478Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0534899Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-macroatom] - AssertionError: 
2025-01-10T13:23:48.0534996Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0535001Z 
2025-01-10T13:23:48.0535098Z Mismatched elements: 3913 / 10000 (39.1%)
2025-01-10T13:23:48.0535223Z Max absolute difference among violations: 8.5486318e+38
2025-01-10T13:23:48.0535351Z Max relative difference among violations: 3.08310014
2025-01-10T13:23:48.0535515Z  ACTUAL: array([1.745665e+39, 1.447336e+39, 1.293884e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0535593Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0535755Z  DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0535832Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0536275Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-macroatom] - AssertionError: 
2025-01-10T13:23:48.0536486Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0536491Z 
2025-01-10T13:23:48.0536587Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:23:48.0536714Z Max absolute difference among violations: 2.99183385e+37
2025-01-10T13:23:48.0536846Z Max relative difference among violations: 98.22574798
2025-01-10T13:23:48.0537001Z  ACTUAL: array([1.545064e+39, 1.553365e+39, 1.543643e+39, ..., 1.222961e+31,
2025-01-10T13:23:48.0537084Z        1.193005e+31, 1.164854e+31])
2025-01-10T13:23:48.0537247Z  DESIRED: array([1.544211e+39, 1.552533e+39, 1.542958e+39, ..., 1.273258e+31,
2025-01-10T13:23:48.0537323Z        1.260980e+31, 1.222587e+31])
2025-01-10T13:23:48.0537762Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-downbranch] - AssertionError: 
2025-01-10T13:23:48.0537859Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0537868Z 
2025-01-10T13:23:48.0537969Z Mismatched elements: 441164 / 584480 (75.5%)
2025-01-10T13:23:48.0538103Z Max absolute difference among violations: 7.03072887e-19
2025-01-10T13:23:48.0538230Z Max relative difference among violations: 8.35741234
2025-01-10T13:23:48.0538325Z  ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0538408Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0538486Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0538589Z  DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0538673Z        [0., 0., 0., ..., 0., 0., 0.],
2025-01-10T13:23:48.0538750Z        [0., 0., 0., ..., 0., 0., 0.],...
2025-01-10T13:23:48.0539165Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-downbranch] - AssertionError: 
2025-01-10T13:23:48.0539263Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0539269Z 
2025-01-10T13:23:48.0539369Z Mismatched elements: 3719 / 10000 (37.2%)
2025-01-10T13:23:48.0539500Z Max absolute difference among violations: 2.09719426e+39
2025-01-10T13:23:48.0539627Z Max relative difference among violations: 5.83764686
2025-01-10T13:23:48.0539784Z  ACTUAL: array([2.018627e+39, 1.441000e+39, 1.283638e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0539867Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0540026Z  DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
2025-01-10T13:23:48.0540110Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0540555Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-downbranch] - AssertionError: 
2025-01-10T13:23:48.0540651Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0540656Z 
2025-01-10T13:23:48.0540756Z Mismatched elements: 10000 / 10000 (100%)
2025-01-10T13:23:48.0540884Z Max absolute difference among violations: 5.0153284e+37
2025-01-10T13:23:48.0541008Z Max relative difference among violations: 5.96359613
2025-01-10T13:23:48.0541261Z  ACTUAL: array([1.540599e+39, 1.541195e+39, 1.537076e+39, ..., 2.120497e+31,
2025-01-10T13:23:48.0541348Z        2.124305e+31, 2.101081e+31])
2025-01-10T13:23:48.0541507Z  DESIRED: array([1.549174e+39, 1.550439e+39, 1.545071e+39, ..., 2.082528e+31,
2025-01-10T13:23:48.0541589Z        2.088676e+31, 2.060278e+31])
2025-01-10T13:23:48.0541931Z FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop - AssertionError: 
2025-01-10T13:23:48.0542031Z Not equal to tolerance rtol=1e-13, atol=0
2025-01-10T13:23:48.0542035Z 
2025-01-10T13:23:48.0542126Z Mismatched elements: 20 / 20 (100%)
2025-01-10T13:23:48.0542255Z Max absolute difference among violations: 2.25821059e+25
2025-01-10T13:23:48.0542381Z Max relative difference among violations: 0.00054397
2025-01-10T13:23:48.0542536Z  ACTUAL: array([9.409976e+28, 8.066324e+28, 7.202565e+28, 6.545908e+28,
2025-01-10T13:23:48.0542659Z        6.032330e+28, 5.614178e+28, 5.250313e+28, 4.984748e+28,
2025-01-10T13:23:48.0542786Z        4.725851e+28, 4.508107e+28, 4.318094e+28, 4.149110e+28,...
2025-01-10T13:23:48.0543149Z  DESIRED: array([9.408704e+28, 8.067118e+28, 7.202414e+28, 6.547518e+28,
2025-01-10T13:23:48.0543266Z        6.033670e+28, 5.613552e+28, 5.249857e+28, 4.984256e+28,
2025-01-10T13:23:48.0543393Z        4.726016e+28, 4.509481e+28, 4.319969e+28, 4.151368e+28,...
2025-01-10T13:23:48.0543779Z FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop_vpacket_log - AssertionError: 
2025-01-10T13:23:48.0543890Z Not equal to tolerance rtol=1e-12, atol=1e-15
2025-01-10T13:23:48.0543897Z 
2025-01-10T13:23:48.0543989Z Mismatched elements: 20 / 20 (100%)
2025-01-10T13:23:48.0544116Z Max absolute difference among violations: 1.93283629e+25
2025-01-10T13:23:48.0544242Z Max relative difference among violations: 0.00029157
2025-01-10T13:23:48.0544392Z  ACTUAL: array([9.395409e+28, 8.063377e+28, 7.188356e+28, 6.549146e+28,
2025-01-10T13:23:48.0544509Z        6.034629e+28, 5.628414e+28, 5.283421e+28, 4.953453e+28,
2025-01-10T13:23:48.0544634Z        4.716735e+28, 4.492320e+28, 4.302194e+28, 4.140106e+28,...
2025-01-10T13:23:48.0544791Z  DESIRED: array([9.397342e+28, 8.064372e+28, 7.189479e+28, 6.549756e+28,
2025-01-10T13:23:48.0544900Z        6.033450e+28, 5.626927e+28, 5.281881e+28, 4.952089e+28,
2025-01-10T13:23:48.0545026Z        4.716388e+28, 4.491655e+28, 4.302267e+28, 4.139741e+28,...
2025-01-10T13:23:48.0545361Z FAILED tardis/transport/montecarlo/tests/test_rpacket_tracker.py::test_boundary_interactions - AssertionError: 
2025-01-10T13:23:48.0545443Z Arrays are not equal
2025-01-10T13:23:48.0545448Z 
2025-01-10T13:23:48.0545549Z Mismatched elements: 11291 / 256000 (4.41%)
2025-01-10T13:23:48.0545696Z  ACTUAL: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:23:48.0545785Z         (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:23:48.0545888Z        [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:23:48.0546041Z  DESIRED: array([[( 1,  0, -1), (-1, -1, -1), (-1, -1, -1), ..., (-1, -1, -1),
2025-01-10T13:23:48.0546125Z         (-1, -1, -1), (-1, -1, -1)],
2025-01-10T13:23:48.0546229Z        [( 1,  0,  1), ( 2,  1,  2), ( 3,  2,  3), ..., (-1, -1, -1),...
2025-01-10T13:23:48.0546643Z FAILED tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py::test_montecarlo_main_loop_weighted - AssertionError: 
2025-01-10T13:23:48.0546745Z Not equal to tolerance rtol=0.01, atol=0
2025-01-10T13:23:48.0546749Z 
2025-01-10T13:23:48.0546847Z Mismatched elements: 33 / 100000 (0.033%)
2025-01-10T13:23:48.0546977Z Max absolute difference among violations: 2.00640487e-05
2025-01-10T13:23:48.0547103Z Max relative difference among violations: 2.11614526
2025-01-10T13:23:48.0547276Z  ACTUAL: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:23:48.0547367Z        -9.757136e-06,  1.019764e-05])
2025-01-10T13:23:48.0547540Z  DESIRED: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
2025-01-10T13:23:48.0547760Z        -9.757136e-06,  1.019764e-05])
2025-01-10T13:23:48.0548224Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data0-plot_data] - AssertionError: 
2025-01-10T13:23:48.0548326Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0548330Z 
2025-01-10T13:23:48.0548420Z (shapes (515,), (508,) mismatch)
2025-01-10T13:23:48.0548568Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:23:48.0548686Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:23:48.0548803Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:23:48.0548958Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:23:48.0549068Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:23:48.0549190Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:23:48.0549641Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data1-plot_data] - AssertionError: 
2025-01-10T13:23:48.0549853Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0549858Z 
2025-01-10T13:23:48.0549945Z (shapes (560,), (558,) mismatch)
2025-01-10T13:23:48.0550090Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:23:48.0550205Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:23:48.0550320Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:23:48.0550471Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:23:48.0550582Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:23:48.0550702Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:23:48.0551148Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data2-plot_data] - AssertionError: 
2025-01-10T13:23:48.0551256Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0551260Z 
2025-01-10T13:23:48.0551347Z (shapes (136,), (147,) mismatch)
2025-01-10T13:23:48.0551491Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:23:48.0551604Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:23:48.0551719Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:23:48.0551871Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:23:48.0551978Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:23:48.0552099Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:23:48.0552546Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data3-plot_data] - AssertionError: 
2025-01-10T13:23:48.0552650Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0552658Z 
2025-01-10T13:23:48.0552749Z (shapes (153,), (159,) mismatch)
2025-01-10T13:23:48.0552893Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:23:48.0553008Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:23:48.0553231Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:23:48.0553381Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:23:48.0553489Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:23:48.0553607Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:23:48.0554054Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data4-plot_data] - AssertionError: 
2025-01-10T13:23:48.0554152Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0554156Z 
2025-01-10T13:23:48.0554363Z (shapes (515,), (508,) mismatch)
2025-01-10T13:23:48.0554511Z  ACTUAL: array([11843.962255, 11843.962255, 11843.962255, 12641.932838,
2025-01-10T13:23:48.0554627Z        11474.810417, 11699.367498, 11106.744269, 11824.249628,
2025-01-10T13:23:48.0554745Z        11160.389552, 11202.149205, 11711.65796 , 11600.511585,...
2025-01-10T13:23:48.0554900Z  DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
2025-01-10T13:23:48.0555010Z        12079.529869, 12630.218315, 11469.83903 , 11810.966898,
2025-01-10T13:23:48.0555130Z        11966.991343, 11812.499308, 11222.198064, 11263.637708,...
2025-01-10T13:23:48.0555577Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data5-plot_data] - AssertionError: 
2025-01-10T13:23:48.0555677Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0555681Z 
2025-01-10T13:23:48.0555772Z (shapes (1481,), (1466,) mismatch)
2025-01-10T13:23:48.0555932Z  ACTUAL: array([12467.896487, 12467.896487, 12357.74828 , ..., 13068.120893,
2025-01-10T13:23:48.0556151Z        11398.237865, 11111.204868])
2025-01-10T13:23:48.0556313Z  DESIRED: array([13692.759737, 11362.937201, 12466.538617, ..., 12605.43284 ,
2025-01-10T13:23:48.0556395Z        11152.962595, 11172.044815])
2025-01-10T13:23:48.0556836Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data6-plot_data] - AssertionError: 
2025-01-10T13:23:48.0556937Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0556942Z 
2025-01-10T13:23:48.0557031Z (shapes (136,), (147,) mismatch)
2025-01-10T13:23:48.0557177Z  ACTUAL: array([11202.149205, 13552.38988 , 11630.957821, 12006.254109,
2025-01-10T13:23:48.0557293Z        15295.708346, 11660.899663, 11789.640304, 15161.117263,
2025-01-10T13:23:48.0557410Z        12697.545823, 14157.741775, 11039.708556, 14399.895914,...
2025-01-10T13:23:48.0557561Z  DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
2025-01-10T13:23:48.0557678Z        13656.398245, 12124.454378, 11838.909334, 12616.241701,
2025-01-10T13:23:48.0557818Z        12885.214103, 12350.428924, 15397.475192, 11754.522961,...
2025-01-10T13:23:48.0558266Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data7-plot_data] - AssertionError: 
2025-01-10T13:23:48.0558371Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0558375Z 
2025-01-10T13:23:48.0558465Z (shapes (381,), (379,) mismatch)
2025-01-10T13:23:48.0558615Z  ACTUAL: array([12467.896487, 12357.74828 , 11118.747393, 11202.149205,
2025-01-10T13:23:48.0558734Z        13552.38988 , 11630.957821, 12006.254109, 15295.708346,
2025-01-10T13:23:48.0558854Z        11660.899663, 11789.640304, 15161.117263, 12697.545823,...
2025-01-10T13:23:48.0559014Z  DESIRED: array([12466.538617, 14269.760975, 11910.794005, 11196.260702,
2025-01-10T13:23:48.0559130Z        11633.386223, 12079.529869, 11966.991343, 11263.637708,
2025-01-10T13:23:48.0559259Z        14098.493392, 13656.398245, 12124.454378, 11838.909334,...
2025-01-10T13:23:48.0559686Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl0] - AssertionError: 
2025-01-10T13:23:48.0559788Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0559793Z 
2025-01-10T13:23:48.0559887Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:48.0559996Z Max absolute difference among violations: 26
2025-01-10T13:23:48.0560128Z Max relative difference among violations: 0.44067797
2025-01-10T13:23:48.0560281Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:48.0560372Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:48.0560527Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:48.0560614Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:48.0561028Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl1] - AssertionError: 
2025-01-10T13:23:48.0561233Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0561238Z 
2025-01-10T13:23:48.0561327Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:48.0561438Z Max absolute difference among violations: 26
2025-01-10T13:23:48.0561565Z Max relative difference among violations: 0.44067797
2025-01-10T13:23:48.0561712Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:48.0561797Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:48.0561944Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:48.0562028Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:48.0562438Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl4] - AssertionError: 
2025-01-10T13:23:48.0562536Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0562543Z 
2025-01-10T13:23:48.0562631Z Mismatched elements: 4 / 20 (20%)
2025-01-10T13:23:48.0562822Z Max absolute difference among violations: 24
2025-01-10T13:23:48.0562933Z Max relative difference among violations: 0.65
2025-01-10T13:23:48.0563220Z  ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:23:48.0563310Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:23:48.0563460Z  DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:23:48.0563545Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:23:48.0563955Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl5] - AssertionError: 
2025-01-10T13:23:48.0564055Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0564060Z 
2025-01-10T13:23:48.0564148Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:48.0564258Z Max absolute difference among violations: 26
2025-01-10T13:23:48.0564383Z Max relative difference among violations: 0.44067797
2025-01-10T13:23:48.0564537Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:48.0564618Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:48.0564767Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:48.0564853Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:48.0565261Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl7] - AssertionError: 
2025-01-10T13:23:48.0565358Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0565362Z 
2025-01-10T13:23:48.0565454Z Mismatched elements: 2 / 40 (5%)
2025-01-10T13:23:48.0565562Z Max absolute difference among violations: 4.
2025-01-10T13:23:48.0565683Z Max relative difference among violations: 1.33333333
2025-01-10T13:23:48.0565779Z  ACTUAL: array([[1.10e+04, 9.00e+00],
2025-01-10T13:23:48.0565860Z        [1.19e+04, 9.00e+00],
2025-01-10T13:23:48.0565949Z        [1.19e+04, 5.00e+00],...
2025-01-10T13:23:48.0566041Z  DESIRED: array([[1.10e+04, 1.10e+01],
2025-01-10T13:23:48.0566125Z        [1.19e+04, 1.10e+01],
2025-01-10T13:23:48.0566208Z        [1.19e+04, 5.00e+00],...
2025-01-10T13:23:48.0566620Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply0] - AssertionError: 
2025-01-10T13:23:48.0566718Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0566723Z 
2025-01-10T13:23:48.0566809Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:48.0566920Z Max absolute difference among violations: 26
2025-01-10T13:23:48.0567041Z Max relative difference among violations: 0.44067797
2025-01-10T13:23:48.0567190Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:48.0567271Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:48.0567422Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:48.0567626Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:48.0568058Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply1] - AssertionError: 
2025-01-10T13:23:48.0568157Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0568161Z 
2025-01-10T13:23:48.0568248Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:48.0568356Z Max absolute difference among violations: 26
2025-01-10T13:23:48.0568478Z Max relative difference among violations: 0.44067797
2025-01-10T13:23:48.0568626Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:48.0568706Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:48.0568855Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:48.0568934Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:48.0569349Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply4] - AssertionError: 
2025-01-10T13:23:48.0569557Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0569561Z 
2025-01-10T13:23:48.0569648Z Mismatched elements: 4 / 20 (20%)
2025-01-10T13:23:48.0569757Z Max absolute difference among violations: 24
2025-01-10T13:23:48.0569866Z Max relative difference among violations: 0.65
2025-01-10T13:23:48.0570019Z  ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
2025-01-10T13:23:48.0570099Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:23:48.0570252Z  DESIRED: array([306, 306, 118, 118,  38,  38,  20,  20,  12,  12,   9,   9,   2,
2025-01-10T13:23:48.0570331Z          2,   5,   5,   5,   5,   0,   0])
2025-01-10T13:23:48.0570742Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply5] - AssertionError: 
2025-01-10T13:23:48.0570836Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0570844Z 
2025-01-10T13:23:48.0570936Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:48.0571049Z Max absolute difference among violations: 26
2025-01-10T13:23:48.0571171Z Max relative difference among violations: 0.44067797
2025-01-10T13:23:48.0571317Z  ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
2025-01-10T13:23:48.0571398Z          1,   2,   2,   0,   0,   0,   0])
2025-01-10T13:23:48.0571547Z  DESIRED: array([132, 132,  59,  59,  32,  32,  14,  14,   8,   8,   0,   0,   0,
2025-01-10T13:23:48.0571627Z          0,   1,   1,   0,   0,   0,   0])
2025-01-10T13:23:48.0572040Z FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply7] - AssertionError: 
2025-01-10T13:23:48.0572133Z Not equal to tolerance rtol=0.3, atol=3
2025-01-10T13:23:48.0572138Z 
2025-01-10T13:23:48.0572230Z Mismatched elements: 2 / 20 (10%)
2025-01-10T13:23:48.0572334Z Max absolute difference among violations: 4
2025-01-10T13:23:48.0572463Z Max relative difference among violations: 1.33333333
2025-01-10T13:23:48.0572607Z  ACTUAL: array([9, 9, 5, 5, 7, 7, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0])
2025-01-10T13:23:48.0572755Z  DESIRED: array([11, 11,  5,  5,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,
2025-01-10T13:23:48.0572834Z         0,  0,  0])
2025-01-10T13:23:48.0573437Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data0] - AssertionError: 
2025-01-10T13:23:48.0573543Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0573549Z 
2025-01-10T13:23:48.0573640Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:48.0573780Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:23:48.0573901Z Max relative difference among violations: 4.03140103
2025-01-10T13:23:48.0574070Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0574156Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0574444Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0574533Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0574994Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data1] - AssertionError: 
2025-01-10T13:23:48.0575099Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0575103Z 
2025-01-10T13:23:48.0575193Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:48.0575327Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:23:48.0575448Z Max relative difference among violations: 4.03140103
2025-01-10T13:23:48.0575609Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0575688Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0575854Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0575936Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0576399Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data2] - AssertionError: 
2025-01-10T13:23:48.0576615Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0576619Z 
2025-01-10T13:23:48.0576709Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:48.0576840Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:23:48.0576959Z Max relative difference among violations: 4.03140103
2025-01-10T13:23:48.0577121Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0577200Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0577362Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0577438Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0577910Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data3] - AssertionError: 
2025-01-10T13:23:48.0578021Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0578025Z 
2025-01-10T13:23:48.0578113Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:48.0578245Z Max absolute difference among violations: 4.3299331e-05
2025-01-10T13:23:48.0578365Z Max relative difference among violations: 4.03140103
2025-01-10T13:23:48.0578527Z  ACTUAL: array([1.529538e-06, 1.142886e-06, 1.972342e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0578605Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0578769Z  DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0578847Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0579311Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data4] - AssertionError: 
2025-01-10T13:23:48.0579413Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0579420Z 
2025-01-10T13:23:48.0579508Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:48.0579649Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:23:48.0579780Z Max relative difference among violations: 53038.42648305
2025-01-10T13:23:48.0579940Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0580018Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0580184Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0580263Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0580725Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data5] - AssertionError: 
2025-01-10T13:23:48.0580821Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0580831Z 
2025-01-10T13:23:48.0580919Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:48.0581051Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:23:48.0581294Z Max relative difference among violations: 53038.42648305
2025-01-10T13:23:48.0581458Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0581537Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0581700Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0581779Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0582240Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data6] - AssertionError: 
2025-01-10T13:23:48.0582336Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0582341Z 
2025-01-10T13:23:48.0582434Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:48.0582567Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:23:48.0582695Z Max relative difference among violations: 53038.42648305
2025-01-10T13:23:48.0582855Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0583123Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0583289Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0583366Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0583828Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data7] - AssertionError: 
2025-01-10T13:23:48.0583926Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0583930Z 
2025-01-10T13:23:48.0584025Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:48.0584154Z Max absolute difference among violations: 3.16368526e-05
2025-01-10T13:23:48.0584284Z Max relative difference among violations: 53038.42648305
2025-01-10T13:23:48.0584444Z  ACTUAL: array([3.522694e-06, 1.634971e-06, 3.370141e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0584523Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0584686Z  DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
2025-01-10T13:23:48.0584773Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0585239Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data8] - AssertionError: 
2025-01-10T13:23:48.0585335Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0585340Z 
2025-01-10T13:23:48.0585435Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:48.0585562Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:23:48.0585688Z Max relative difference among violations: 4.03140103
2025-01-10T13:23:48.0585848Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0585928Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0586093Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0586171Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0586636Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data9] - AssertionError: 
2025-01-10T13:23:48.0586735Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0586740Z 
2025-01-10T13:23:48.0586832Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:48.0586957Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:23:48.0587082Z Max relative difference among violations: 4.03140103
2025-01-10T13:23:48.0587238Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0587321Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0587489Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0587567Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0588033Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data10] - AssertionError: 
2025-01-10T13:23:48.0588267Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0588276Z 
2025-01-10T13:23:48.0588374Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:48.0588503Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:23:48.0588628Z Max relative difference among violations: 4.03140103
2025-01-10T13:23:48.0588784Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0588868Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0589027Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0589110Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0589580Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data11] - AssertionError: 
2025-01-10T13:23:48.0589678Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0589682Z 
2025-01-10T13:23:48.0589778Z Mismatched elements: 604 / 1938 (31.2%)
2025-01-10T13:23:48.0589906Z Max absolute difference among violations: 5.1807441e+47
2025-01-10T13:23:48.0590169Z Max relative difference among violations: 4.03140103
2025-01-10T13:23:48.0590323Z  ACTUAL: array([1.830085e+46, 1.367457e+46, 2.359898e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0590405Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0590563Z  DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0590646Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0591114Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data12] - AssertionError: 
2025-01-10T13:23:48.0591212Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0591216Z 
2025-01-10T13:23:48.0591310Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:48.0591439Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:23:48.0591572Z Max relative difference among violations: 53038.42648305
2025-01-10T13:23:48.0591736Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0591820Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0591978Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0592061Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0592522Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data13] - AssertionError: 
2025-01-10T13:23:48.0592624Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0592629Z 
2025-01-10T13:23:48.0592722Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:48.0592850Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:23:48.0592986Z Max relative difference among violations: 53038.42648305
2025-01-10T13:23:48.0593269Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0593364Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0593525Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0593608Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0594067Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data14] - AssertionError: 
2025-01-10T13:23:48.0594169Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0594174Z 
2025-01-10T13:23:48.0594266Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:48.0594393Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:23:48.0594524Z Max relative difference among violations: 53038.42648305
2025-01-10T13:23:48.0594682Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0594766Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0594925Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0595135Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0595606Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data15] - AssertionError: 
2025-01-10T13:23:48.0595711Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0595715Z 
2025-01-10T13:23:48.0595810Z Mismatched elements: 692 / 1938 (35.7%)
2025-01-10T13:23:48.0595941Z Max absolute difference among violations: 3.78533417e+47
2025-01-10T13:23:48.0596073Z Max relative difference among violations: 53038.42648305
2025-01-10T13:23:48.0596230Z  ACTUAL: array([4.214887e+46, 1.956235e+46, 4.032358e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0596313Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0596474Z  DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
2025-01-10T13:23:48.0596557Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0596981Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply0] - AssertionError: 
2025-01-10T13:23:48.0597203Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0597208Z 
2025-01-10T13:23:48.0597298Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:48.0597434Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:23:48.0597561Z Max relative difference among violations: 3.03053629
2025-01-10T13:23:48.0597721Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0597804Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0597963Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0598044Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0598466Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply1] - AssertionError: 
2025-01-10T13:23:48.0598571Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0598580Z 
2025-01-10T13:23:48.0598672Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:48.0598806Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:23:48.0598926Z Max relative difference among violations: 3.03053629
2025-01-10T13:23:48.0599091Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0599184Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0599343Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0599427Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0599842Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply2] - AssertionError: 
2025-01-10T13:23:48.0599944Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0599949Z 
2025-01-10T13:23:48.0600037Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:48.0600170Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:23:48.0600293Z Max relative difference among violations: 3.03053629
2025-01-10T13:23:48.0600457Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0600535Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0600698Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0600782Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0601199Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply3] - AssertionError: 
2025-01-10T13:23:48.0601302Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0601306Z 
2025-01-10T13:23:48.0601398Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:48.0601531Z Max absolute difference among violations: 2.08771842e-13
2025-01-10T13:23:48.0601651Z Max relative difference among violations: 3.03053629
2025-01-10T13:23:48.0601812Z  ACTUAL: array([7.642204e-15, 3.884480e-15, 1.586693e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0602039Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0602207Z  DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0602290Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0602705Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply4] - AssertionError: 
2025-01-10T13:23:48.0602807Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0602811Z 
2025-01-10T13:23:48.0602901Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0603135Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:23:48.0603264Z Max relative difference among violations: 21416.68434824
2025-01-10T13:23:48.0603426Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0603503Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0603668Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0603868Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0604289Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply5] - AssertionError: 
2025-01-10T13:23:48.0604391Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0604396Z 
2025-01-10T13:23:48.0604484Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0604617Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:23:48.0604745Z Max relative difference among violations: 21416.68434824
2025-01-10T13:23:48.0604906Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0604984Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0605148Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0605230Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0605651Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply6] - AssertionError: 
2025-01-10T13:23:48.0605759Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0605764Z 
2025-01-10T13:23:48.0605853Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0605985Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:23:48.0606111Z Max relative difference among violations: 21416.68434824
2025-01-10T13:23:48.0606276Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0606354Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0606515Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0606592Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0607014Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply7] - AssertionError: 
2025-01-10T13:23:48.0607114Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0607127Z 
2025-01-10T13:23:48.0607219Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0607350Z Max absolute difference among violations: 3.02728422e-13
2025-01-10T13:23:48.0607477Z Max relative difference among violations: 21416.68434824
2025-01-10T13:23:48.0607637Z  ACTUAL: array([8.005506e-15, 5.829128e-15, 2.432627e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0607715Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0607877Z  DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
2025-01-10T13:23:48.0607956Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0608374Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply8] - AssertionError: 
2025-01-10T13:23:48.0608470Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0608475Z 
2025-01-10T13:23:48.0608571Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:48.0608698Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:23:48.0608976Z Max relative difference among violations: 3.03053629
2025-01-10T13:23:48.0609139Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0609218Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0609381Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0609459Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0609881Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply9] - AssertionError: 
2025-01-10T13:23:48.0609978Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0609983Z 
2025-01-10T13:23:48.0610076Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:48.0610204Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:23:48.0610330Z Max relative difference among violations: 3.03053629
2025-01-10T13:23:48.0610492Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0610666Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0610836Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0610913Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0611350Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply10] - AssertionError: 
2025-01-10T13:23:48.0611448Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0611452Z 
2025-01-10T13:23:48.0611546Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:48.0611674Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:23:48.0611801Z Max relative difference among violations: 3.03053629
2025-01-10T13:23:48.0611957Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0612041Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0612203Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0612289Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0612713Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply11] - AssertionError: 
2025-01-10T13:23:48.0612812Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0612817Z 
2025-01-10T13:23:48.0612913Z Mismatched elements: 446 / 1938 (23%)
2025-01-10T13:23:48.0613169Z Max absolute difference among violations: 2.49794504e+39
2025-01-10T13:23:48.0613299Z Max relative difference among violations: 3.03053629
2025-01-10T13:23:48.0613457Z  ACTUAL: array([9.143861e+37, 4.647761e+37, 1.898471e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0613542Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0613701Z  DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0613784Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0614207Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply12] - AssertionError: 
2025-01-10T13:23:48.0614310Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0614314Z 
2025-01-10T13:23:48.0614409Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0614538Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:23:48.0614670Z Max relative difference among violations: 21416.6843355
2025-01-10T13:23:48.0614827Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0614912Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0615071Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0615153Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0615571Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply13] - AssertionError: 
2025-01-10T13:23:48.0615798Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0615807Z 
2025-01-10T13:23:48.0615903Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0616032Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:23:48.0616163Z Max relative difference among violations: 21416.6843355
2025-01-10T13:23:48.0616319Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0616402Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0616561Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0616644Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0617060Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply14] - AssertionError: 
2025-01-10T13:23:48.0617160Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0617165Z 
2025-01-10T13:23:48.0617261Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0617393Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:23:48.0617641Z Max relative difference among violations: 21416.6843355
2025-01-10T13:23:48.0617796Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0617880Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0618039Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0618122Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0618539Z FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply15] - AssertionError: 
2025-01-10T13:23:48.0618642Z Not equal to tolerance rtol=1e-07, atol=0
2025-01-10T13:23:48.0618646Z 
2025-01-10T13:23:48.0618739Z Mismatched elements: 533 / 1938 (27.5%)
2025-01-10T13:23:48.0618866Z Max absolute difference among violations: 3.62213099e+39
2025-01-10T13:23:48.0618998Z Max relative difference among violations: 21416.6843355
2025-01-10T13:23:48.0619159Z  ACTUAL: array([9.578549e+37, 6.974524e+37, 2.910626e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0619245Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0619405Z  DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
2025-01-10T13:23:48.0619491Z        0.000000e+00, 0.000000e+00])
2025-01-10T13:23:48.0619762Z = 275 failed, 1163 passed, 329 skipped, 2 deselected, 19 xfailed, 8 xpassed, 251 warnings in 757.55s (0:12:37) =
2025-01-10T13:23:50.2840771Z ##[error]Process completed with exit code 1.
