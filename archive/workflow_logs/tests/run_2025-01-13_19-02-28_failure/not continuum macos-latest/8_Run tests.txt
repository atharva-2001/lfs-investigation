2025-01-13T19:04:15.2095250Z ##[group]Run pytest tardis --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"
2025-01-13T19:04:15.2096440Z [36;1mpytest tardis --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"[0m
2025-01-13T19:04:15.2161700Z shell: /bin/bash -l {0}
2025-01-13T19:04:15.2161980Z env:
2025-01-13T19:04:15.2162230Z   CACHE_NUMBER: 0
2025-01-13T19:04:15.2162790Z   PYTEST_FLAGS: --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-13T19:04:15.2163460Z   CODECOV_TOKEN: 
2025-01-13T19:04:15.2163790Z   MAMBA_ROOT_PREFIX: /Users/runner/micromamba
2025-01-13T19:04:15.2164210Z   MAMBA_EXE: /Users/runner/micromamba-bin/micromamba
2025-01-13T19:04:15.2164620Z   CONDARC: /Users/runner/work/_temp/setup-micromamba/.condarc
2025-01-13T19:04:15.2165050Z ##[endgroup]
2025-01-13T19:04:27.8086670Z ============================= test session starts ==============================
2025-01-13T19:04:27.8087160Z platform darwin -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
2025-01-13T19:04:27.8087450Z rootdir: /Users/runner/work/tardis/tardis
2025-01-13T19:04:27.8087660Z configfile: pyproject.toml
2025-01-13T19:04:27.8087940Z plugins: cov-5.0.0, html-4.1.1, metadata-3.1.1, doctestplus-1.2.1, anyio-4.4.0
2025-01-13T19:04:27.8088270Z collected 1796 items / 2 deselected / 1794 selected
2025-01-13T19:04:27.8088440Z 
2025-01-13T19:04:30.8531530Z tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
2025-01-13T19:04:32.5069580Z tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
2025-01-13T19:04:33.7161710Z tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
2025-01-13T19:04:34.8288250Z tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
2025-01-13T19:04:34.8419010Z tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
2025-01-13T19:04:35.7958720Z tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
2025-01-13T19:04:36.0790410Z tardis/grid/tests/test_grid.py .                                         [  2%]
2025-01-13T19:04:36.0799120Z tardis/gui/tests/test_gui.py s                                           [  2%]
2025-01-13T19:04:38.9703560Z tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
2025-01-13T19:04:38.9771970Z tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
2025-01-13T19:04:38.9922980Z tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
2025-01-13T19:05:08.7477690Z tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
2025-01-13T19:05:08.7747710Z tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
2025-01-13T19:05:08.7854630Z tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
2025-01-13T19:05:08.8058590Z tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
2025-01-13T19:05:08.8206150Z tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
2025-01-13T19:05:09.0399810Z tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
2025-01-13T19:05:09.5132240Z tardis/io/tests/test_atomic.py .....                                     [  7%]
2025-01-13T19:05:09.5310630Z tardis/io/tests/test_decay.py ..                                         [  7%]
2025-01-13T19:05:09.6826590Z tardis/io/tests/test_model_reader.py ......                              [  7%]
2025-01-13T19:05:09.6913350Z tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
2025-01-13T19:05:36.9395070Z tardis/model/tests/test_base.py ........................................ [ 10%]
2025-01-13T19:05:37.6931340Z ............                                                             [ 10%]
2025-01-13T19:05:39.9827280Z tardis/model/tests/test_csvy_model.py .........                          [ 11%]
2025-01-13T19:05:40.0126680Z tardis/model/tests/test_density.py ..                                    [ 11%]
2025-01-13T19:05:41.2334730Z tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
2025-01-13T19:05:42.2771020Z tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
2025-01-13T19:05:43.7878830Z tardis/opacities/tests/test_tau_sobolev.py FF                            [ 12%]
2025-01-13T19:05:46.3607670Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py ...      [ 12%]
2025-01-13T19:06:28.5224330Z tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
2025-01-13T19:06:37.6363310Z tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
2025-01-13T19:06:38.6674880Z tardis/plasma/tests/test_complete_plasmas.py .....................s..... [ 13%]
2025-01-13T19:06:40.6996840Z s....ssssss............s............ss.....s....ssssss............s..... [ 18%]
2025-01-13T19:06:41.9728930Z .......ss.....s....ssssss............s............ss.....s....ssssss.... [ 22%]
2025-01-13T19:06:44.1718640Z ........s............ss.....s........ss............s............ss.....s [ 26%]
2025-01-13T19:06:46.1691000Z ........ss............s............ss.....s....ssssss............s...... [ 30%]
2025-01-13T19:06:46.7077300Z ......ss.....s....ssssss............s............ss.....s.ss.ssssss..... [ 34%]
2025-01-13T19:06:48.6744540Z .......s............ss.....s....ssssss............s............ss.....s. [ 38%]
2025-01-13T19:06:50.6353360Z ...ssssss............s............ss.....s....ssssss............s....... [ 42%]
2025-01-13T19:06:52.6707400Z .....ss.....s....ssssss............s............s...........ssssss...... [ 46%]
2025-01-13T19:06:54.0124400Z ......s............s...........ssssss............s............s......... [ 50%]
2025-01-13T19:06:56.1506770Z ..ssssss............s............ss.....s....ssssss............s........ [ 54%]
2025-01-13T19:06:58.3418680Z ....ss.....s....ssssss..........................s.....s....ssss......... [ 58%]
2025-01-13T19:06:58.5713750Z ...................s.....s....ssss.......                                [ 60%]
2025-01-13T19:06:58.7495650Z tardis/plasma/tests/test_hdf_plasma.py ................................. [ 62%]
2025-01-13T19:06:58.7606860Z ......                                                                   [ 62%]
2025-01-13T19:06:58.9862730Z tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
2025-01-13T19:08:51.3756600Z tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
2025-01-13T19:08:51.3822190Z tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
2025-01-13T19:09:14.7734120Z tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
2025-01-13T19:09:26.5430670Z tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
2025-01-13T19:09:27.1001730Z tardis/simulation/tests/test_convergence.py .....                        [ 64%]
2025-01-13T19:09:33.3478270Z tardis/simulation/tests/test_simulation.py .............                 [ 65%]
2025-01-13T19:09:33.3621250Z tardis/spectrum/tests/test_cuda_formal_integral.py sssssssssssssssssssss [ 66%]
2025-01-13T19:09:33.6752330Z ssss...ssssssssssssssssssssss                                            [ 67%]
2025-01-13T19:09:33.6809620Z tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
2025-01-13T19:09:34.7679770Z tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
2025-01-13T19:09:34.7885720Z ..........                                                               [ 69%]
2025-01-13T19:09:35.0768330Z tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
2025-01-13T19:09:35.1351900Z .........                                                                [ 72%]
2025-01-13T19:09:56.5834350Z tardis/spectrum/tests/test_spectrum_solver.py ....                       [ 72%]
2025-01-13T19:10:48.6678910Z tardis/tests/test_tardis_full.py ....                                    [ 72%]
2025-01-13T19:11:19.8102640Z tardis/tests/test_tardis_full_formal_integral.py ...F...F...F...F        [ 73%]
2025-01-13T19:11:19.8695140Z tardis/tests/test_util.py .............................................  [ 75%]
2025-01-13T19:11:21.7202120Z tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
2025-01-13T19:11:26.6325400Z tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
2025-01-13T19:11:26.7624200Z tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
2025-01-13T19:11:26.7717570Z tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
2025-01-13T19:11:26.7999300Z sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
2025-01-13T19:11:33.3544940Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py x..       [ 81%]
2025-01-13T19:11:33.3640040Z tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
2025-01-13T19:11:35.7104890Z tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
2025-01-13T19:11:36.0340950Z tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
2025-01-13T19:11:36.7117000Z tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
2025-01-13T19:11:36.8026100Z XX.........                                                              [ 84%]
2025-01-13T19:11:36.8285930Z tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
2025-01-13T19:11:37.0322340Z tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
2025-01-13T19:11:37.3225050Z .....                                                                    [ 85%]
2025-01-13T19:11:46.9396600Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py ......         [ 85%]
2025-01-13T19:11:46.9613260Z tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
2025-01-13T19:11:46.9643790Z tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
2025-01-13T19:11:48.3222130Z tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
2025-01-13T19:11:48.3643850Z tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
2025-01-13T19:11:51.0139420Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py . [ 86%]
2025-01-13T19:11:51.0140860Z                                                                          [ 86%]
2025-01-13T19:11:51.4890860Z tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
2025-01-13T19:11:52.9273590Z tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
2025-01-13T19:11:54.5714440Z ......                                                                   [ 88%]
2025-01-13T19:11:58.0782750Z tardis/visualization/tools/tests/test_liv_plot.py ...................... [ 90%]
2025-01-13T19:12:01.2699310Z .............................                                            [ 91%]
2025-01-13T19:12:03.9090660Z tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
2025-01-13T19:12:10.3505600Z ....                                                                     [ 92%]
2025-01-13T19:12:14.5398970Z tardis/visualization/tools/tests/test_sdec_plot.py ..................... [ 94%]
2025-01-13T19:12:20.9880080Z ..............................                                           [ 95%]
2025-01-13T19:12:21.3596090Z tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
2025-01-13T19:12:21.4058010Z ....                                                                     [ 96%]
2025-01-13T19:12:22.2179070Z tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
2025-01-13T19:12:22.7397510Z ..................                                                       [ 98%]
2025-01-13T19:12:25.7442680Z tardis/visualization/widgets/tests/test_shell_info.py ..............EEEE [ 99%]
2025-01-13T19:12:33.0357740Z EEE...                                                                   [100%]
2025-01-13T19:12:33.0359050Z 
2025-01-13T19:12:33.0359470Z ==================================== ERRORS ====================================
2025-01-13T19:12:33.0360160Z _____________ ERROR at setup of TestHDFShellInfo.test_shells_data ______________
2025-01-13T19:12:33.0360980Z 
2025-01-13T19:12:33.0361590Z path_or_buf = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0362250Z path = 'simulation'
2025-01-13T19:12:33.0363000Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:12:33.0363690Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:12:33.0364570Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:12:33.0365380Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:12:33.0365920Z 
2025-01-13T19:12:33.0366190Z     @staticmethod
2025-01-13T19:12:33.0367070Z     def to_hdf_util(
2025-01-13T19:12:33.0367550Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:12:33.0369250Z     ):
2025-01-13T19:12:33.0369890Z         """
2025-01-13T19:12:33.0370290Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:12:33.0371070Z     
2025-01-13T19:12:33.0371440Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:12:33.0372190Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:12:33.0382120Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:12:33.0382630Z     
2025-01-13T19:12:33.0383430Z         Units will be stored as their CGS value
2025-01-13T19:12:33.0383850Z     
2025-01-13T19:12:33.0384270Z         Parameters
2025-01-13T19:12:33.0384620Z         ----------
2025-01-13T19:12:33.0385050Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:12:33.0385450Z             Path or buffer to the HDF file
2025-01-13T19:12:33.0386000Z         path : str
2025-01-13T19:12:33.0386320Z             Path inside the HDF file to store the `elements`
2025-01-13T19:12:33.0386720Z         elements : dict
2025-01-13T19:12:33.0386960Z             A dict of property names and their values to be
2025-01-13T19:12:33.0387240Z             stored.
2025-01-13T19:12:33.0387470Z         overwrite : bool
2025-01-13T19:12:33.0387730Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:12:33.0441080Z     
2025-01-13T19:12:33.0441290Z         Notes
2025-01-13T19:12:33.0441450Z         -----
2025-01-13T19:12:33.0441710Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:12:33.0442080Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:12:33.0442900Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:12:33.0443160Z         """
2025-01-13T19:12:33.0443510Z         if (
2025-01-13T19:12:33.0443900Z             isinstance(path_or_buf, str)
2025-01-13T19:12:33.0444270Z             and os.path.exists(path_or_buf)
2025-01-13T19:12:33.0444650Z             and not overwrite
2025-01-13T19:12:33.0444910Z         ):
2025-01-13T19:12:33.0445120Z             raise FileExistsError(
2025-01-13T19:12:33.0445740Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:12:33.0446230Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:12:33.0446560Z             )
2025-01-13T19:12:33.0446810Z     
2025-01-13T19:12:33.0447370Z         else:
2025-01-13T19:12:33.0447800Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:12:33.0448340Z                 buf = pd.HDFStore(
2025-01-13T19:12:33.0448940Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:12:33.0450090Z                 )
2025-01-13T19:12:33.0450560Z             except TypeError as e:
2025-01-13T19:12:33.0450940Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:12:33.0451340Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:12:33.0451720Z                     logger.debug(
2025-01-13T19:12:33.0452290Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:12:33.0452710Z                     )
2025-01-13T19:12:33.0453110Z                     buf = path_or_buf
2025-01-13T19:12:33.0453350Z                 else:
2025-01-13T19:12:33.0453950Z                     raise e
2025-01-13T19:12:33.0454270Z     
2025-01-13T19:12:33.0454770Z         if not buf.is_open:
2025-01-13T19:12:33.0455000Z             buf.open()
2025-01-13T19:12:33.0455330Z     
2025-01-13T19:12:33.0455510Z         scalars = {}
2025-01-13T19:12:33.0455710Z         for key, value in elements.items():
2025-01-13T19:12:33.0456380Z             if value is None:
2025-01-13T19:12:33.0456630Z                 value = "none"
2025-01-13T19:12:33.0456840Z             if hasattr(value, "cgs"):
2025-01-13T19:12:33.0457260Z                 value = value.cgs.value
2025-01-13T19:12:33.0457630Z             if np.isscalar(value):
2025-01-13T19:12:33.0458320Z                 scalars[key] = value
2025-01-13T19:12:33.0458540Z             elif hasattr(value, "shape"):
2025-01-13T19:12:33.0458740Z                 if value.ndim == 1:
2025-01-13T19:12:33.0459210Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:12:33.0459720Z                     try:
2025-01-13T19:12:33.0460180Z                         pd.Series(value).to_hdf(
2025-01-13T19:12:33.0460420Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0460630Z                         )
2025-01-13T19:12:33.0460800Z                     except NotImplementedError:
2025-01-13T19:12:33.0464570Z                         logger.debug(
2025-01-13T19:12:33.0464900Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:12:33.0468390Z                         )
2025-01-13T19:12:33.0468620Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:12:33.0473050Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0474700Z                         )
2025-01-13T19:12:33.0480220Z                 else:
2025-01-13T19:12:33.0481070Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0483090Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:12:33.0485540Z                 try:
2025-01-13T19:12:33.0486270Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:12:33.0486560Z 
2025-01-13T19:12:33.0486650Z tardis/io/util.py:283: 
2025-01-13T19:12:33.0488650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0489110Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:12:33.0489300Z     data = self.get_properties()
2025-01-13T19:12:33.0489510Z tardis/io/util.py:298: in get_properties
2025-01-13T19:12:33.0489790Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:12:33.0490180Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.0490870Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.0491270Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.0491670Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.0492010Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.0492510Z     res = self.make_source_function()
2025-01-13T19:12:33.0492770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0492930Z 
2025-01-13T19:12:33.0493740Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x1451141d0>
2025-01-13T19:12:33.0493980Z 
2025-01-13T19:12:33.0494050Z     def make_source_function(self):
2025-01-13T19:12:33.0494300Z         """
2025-01-13T19:12:33.0494610Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.0494960Z     
2025-01-13T19:12:33.0497580Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.0498010Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.0498290Z     
2025-01-13T19:12:33.0498690Z         Parameters
2025-01-13T19:12:33.0499020Z         ----------
2025-01-13T19:12:33.0499810Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.0500180Z     
2025-01-13T19:12:33.0500530Z         Returns
2025-01-13T19:12:33.0500730Z         -------
2025-01-13T19:12:33.0501210Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.0501650Z         """
2025-01-13T19:12:33.0502830Z     
2025-01-13T19:12:33.0504200Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.0504570Z         # slice for the active shells
2025-01-13T19:12:33.0504970Z         local_slice = slice(
2025-01-13T19:12:33.0506210Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.0507940Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.0508220Z         )
2025-01-13T19:12:33.0508560Z     
2025-01-13T19:12:33.0509440Z         transport = self.transport
2025-01-13T19:12:33.0510220Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.0510850Z         transition_probabilities = (
2025-01-13T19:12:33.0511930Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.0512540Z         )
2025-01-13T19:12:33.0515540Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.0515880Z 
2025-01-13T19:12:33.0517590Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.0517810Z 
2025-01-13T19:12:33.0518010Z During handling of the above exception, another exception occurred:
2025-01-13T19:12:33.0518910Z 
2025-01-13T19:12:33.0519290Z hdf_file_path = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0521610Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x144f42390>
2025-01-13T19:12:33.0522460Z 
2025-01-13T19:12:33.0522570Z     @pytest.fixture(scope="class")
2025-01-13T19:12:33.0523350Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:12:33.0523730Z >       simulation_verysimple.to_hdf(
2025-01-13T19:12:33.0524510Z             hdf_file_path, overwrite=True
2025-01-13T19:12:33.0525470Z         )  # save sim at hdf_file_path
2025-01-13T19:12:33.0525640Z 
2025-01-13T19:12:33.0525930Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:12:33.0527380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0528290Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:12:33.0529100Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:12:33.0529870Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:12:33.0530660Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0531160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:12:33.0531690Z     return func(*args, **kwargs)
2025-01-13T19:12:33.0532560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:12:33.0533010Z     pytables.to_hdf(
2025-01-13T19:12:33.0533450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:12:33.0534500Z     f(store)
2025-01-13T19:12:33.0534800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:12:33.0536750Z     f = lambda store: store.put(
2025-01-13T19:12:33.0537140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:12:33.0537600Z     self._write_to_group(
2025-01-13T19:12:33.0538050Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:12:33.0538500Z     s.write(
2025-01-13T19:12:33.0538990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:12:33.0539530Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:12:33.0540100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:12:33.0540600Z     vlarr.append(value)
2025-01-13T19:12:33.0541040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:12:33.0541540Z     sequence = atom.toarray(sequence)
2025-01-13T19:12:33.0541910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:12:33.0542260Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:12:33.0542490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0542650Z 
2025-01-13T19:12:33.0542730Z self = ObjectAtom()
2025-01-13T19:12:33.0543160Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x144f423f0>]],
2025-01-13T19:12:33.0543510Z       dtype=object)
2025-01-13T19:12:33.0543750Z 
2025-01-13T19:12:33.0543870Z     def _tobuffer(self, object_):
2025-01-13T19:12:33.0544160Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:12:33.0545770Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.0546020Z 
2025-01-13T19:12:33.0546220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:12:33.0546770Z ________ ERROR at setup of TestHDFShellInfo.test_element_count_data[1] _________
2025-01-13T19:12:33.0547050Z 
2025-01-13T19:12:33.0547380Z path_or_buf = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0547850Z path = 'simulation'
2025-01-13T19:12:33.0548220Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:12:33.0548660Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:12:33.0548960Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:12:33.0549310Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:12:33.0549470Z 
2025-01-13T19:12:33.0549580Z     @staticmethod
2025-01-13T19:12:33.0549830Z     def to_hdf_util(
2025-01-13T19:12:33.0550120Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:12:33.0550500Z     ):
2025-01-13T19:12:33.0550660Z         """
2025-01-13T19:12:33.0550910Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:12:33.0551200Z     
2025-01-13T19:12:33.0551410Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:12:33.0551730Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:12:33.0552090Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:12:33.0552360Z     
2025-01-13T19:12:33.0552500Z         Units will be stored as their CGS value
2025-01-13T19:12:33.0552690Z     
2025-01-13T19:12:33.0552810Z         Parameters
2025-01-13T19:12:33.0552950Z         ----------
2025-01-13T19:12:33.0553190Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:12:33.0553500Z             Path or buffer to the HDF file
2025-01-13T19:12:33.0553700Z         path : str
2025-01-13T19:12:33.0554220Z             Path inside the HDF file to store the `elements`
2025-01-13T19:12:33.0554480Z         elements : dict
2025-01-13T19:12:33.0554710Z             A dict of property names and their values to be
2025-01-13T19:12:33.0554940Z             stored.
2025-01-13T19:12:33.0555140Z         overwrite : bool
2025-01-13T19:12:33.0555450Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:12:33.0555780Z     
2025-01-13T19:12:33.0555900Z         Notes
2025-01-13T19:12:33.0556050Z         -----
2025-01-13T19:12:33.0556270Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:12:33.0556610Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:12:33.0556880Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:12:33.0559900Z         """
2025-01-13T19:12:33.0560080Z         if (
2025-01-13T19:12:33.0560250Z             isinstance(path_or_buf, str)
2025-01-13T19:12:33.0561550Z             and os.path.exists(path_or_buf)
2025-01-13T19:12:33.0562570Z             and not overwrite
2025-01-13T19:12:33.0562770Z         ):
2025-01-13T19:12:33.0562930Z             raise FileExistsError(
2025-01-13T19:12:33.0563200Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:12:33.0564200Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:12:33.0564860Z             )
2025-01-13T19:12:33.0565250Z     
2025-01-13T19:12:33.0565630Z         else:
2025-01-13T19:12:33.0566430Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:12:33.0567280Z                 buf = pd.HDFStore(
2025-01-13T19:12:33.0568750Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:12:33.0569840Z                 )
2025-01-13T19:12:33.0570310Z             except TypeError as e:
2025-01-13T19:12:33.0570920Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:12:33.0571700Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:12:33.0575360Z                     logger.debug(
2025-01-13T19:12:33.0575660Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:12:33.0575900Z                     )
2025-01-13T19:12:33.0576060Z                     buf = path_or_buf
2025-01-13T19:12:33.0576250Z                 else:
2025-01-13T19:12:33.0576390Z                     raise e
2025-01-13T19:12:33.0576550Z     
2025-01-13T19:12:33.0576670Z         if not buf.is_open:
2025-01-13T19:12:33.0576840Z             buf.open()
2025-01-13T19:12:33.0577000Z     
2025-01-13T19:12:33.0577120Z         scalars = {}
2025-01-13T19:12:33.0577330Z         for key, value in elements.items():
2025-01-13T19:12:33.0577540Z             if value is None:
2025-01-13T19:12:33.0577700Z                 value = "none"
2025-01-13T19:12:33.0577890Z             if hasattr(value, "cgs"):
2025-01-13T19:12:33.0578100Z                 value = value.cgs.value
2025-01-13T19:12:33.0578300Z             if np.isscalar(value):
2025-01-13T19:12:33.0578490Z                 scalars[key] = value
2025-01-13T19:12:33.0578700Z             elif hasattr(value, "shape"):
2025-01-13T19:12:33.0578890Z                 if value.ndim == 1:
2025-01-13T19:12:33.0579200Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:12:33.0579460Z                     try:
2025-01-13T19:12:33.0579630Z                         pd.Series(value).to_hdf(
2025-01-13T19:12:33.0579860Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0580070Z                         )
2025-01-13T19:12:33.0580240Z                     except NotImplementedError:
2025-01-13T19:12:33.0580450Z                         logger.debug(
2025-01-13T19:12:33.0580750Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:12:33.0581020Z                         )
2025-01-13T19:12:33.0581190Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:12:33.0582160Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0582620Z                         )
2025-01-13T19:12:33.0582850Z                 else:
2025-01-13T19:12:33.0583080Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0583440Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:12:33.0583760Z                 try:
2025-01-13T19:12:33.0584260Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:12:33.0584530Z 
2025-01-13T19:12:33.0584590Z tardis/io/util.py:283: 
2025-01-13T19:12:33.0598630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0599580Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:12:33.0600360Z     data = self.get_properties()
2025-01-13T19:12:33.0601190Z tardis/io/util.py:298: in get_properties
2025-01-13T19:12:33.0602420Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:12:33.0603890Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.0604860Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.0606430Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.0607670Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.0608800Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.0609940Z     res = self.make_source_function()
2025-01-13T19:12:33.0610750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0612190Z 
2025-01-13T19:12:33.0612690Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x1451141d0>
2025-01-13T19:12:33.0613520Z 
2025-01-13T19:12:33.0613830Z     def make_source_function(self):
2025-01-13T19:12:33.0614370Z         """
2025-01-13T19:12:33.0615120Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.0616700Z     
2025-01-13T19:12:33.0617520Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.0618590Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.0619420Z     
2025-01-13T19:12:33.0619570Z         Parameters
2025-01-13T19:12:33.0619730Z         ----------
2025-01-13T19:12:33.0619900Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.0620090Z     
2025-01-13T19:12:33.0620200Z         Returns
2025-01-13T19:12:33.0620320Z         -------
2025-01-13T19:12:33.0622960Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.0624330Z         """
2025-01-13T19:12:33.0624780Z     
2025-01-13T19:12:33.0624940Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.0625340Z         # slice for the active shells
2025-01-13T19:12:33.0625680Z         local_slice = slice(
2025-01-13T19:12:33.0625980Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.0626460Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.0626710Z         )
2025-01-13T19:12:33.0626880Z     
2025-01-13T19:12:33.0627330Z         transport = self.transport
2025-01-13T19:12:33.0627670Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.0627980Z         transition_probabilities = (
2025-01-13T19:12:33.0628370Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.0628690Z         )
2025-01-13T19:12:33.0629030Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.0629390Z 
2025-01-13T19:12:33.0629650Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.0629840Z 
2025-01-13T19:12:33.0629980Z During handling of the above exception, another exception occurred:
2025-01-13T19:12:33.0631540Z 
2025-01-13T19:12:33.0632080Z hdf_file_path = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0632820Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x144f42390>
2025-01-13T19:12:33.0633090Z 
2025-01-13T19:12:33.0633150Z     @pytest.fixture(scope="class")
2025-01-13T19:12:33.0633400Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:12:33.0633640Z >       simulation_verysimple.to_hdf(
2025-01-13T19:12:33.0634020Z             hdf_file_path, overwrite=True
2025-01-13T19:12:33.0634230Z         )  # save sim at hdf_file_path
2025-01-13T19:12:33.0634370Z 
2025-01-13T19:12:33.0634490Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:12:33.0635250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0635480Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:12:33.0635730Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:12:33.0636130Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:12:33.0636360Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0636850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:12:33.0637200Z     return func(*args, **kwargs)
2025-01-13T19:12:33.0637540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:12:33.0637870Z     pytables.to_hdf(
2025-01-13T19:12:33.0638270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:12:33.0640080Z     f(store)
2025-01-13T19:12:33.0640450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:12:33.0641680Z     f = lambda store: store.put(
2025-01-13T19:12:33.0643490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:12:33.0643910Z     self._write_to_group(
2025-01-13T19:12:33.0645430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:12:33.0646570Z     s.write(
2025-01-13T19:12:33.0646920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:12:33.0647730Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:12:33.0648240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:12:33.0648760Z     vlarr.append(value)
2025-01-13T19:12:33.0649160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:12:33.0649530Z     sequence = atom.toarray(sequence)
2025-01-13T19:12:33.0649870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:12:33.0650550Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:12:33.0650790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0650950Z 
2025-01-13T19:12:33.0651030Z self = ObjectAtom()
2025-01-13T19:12:33.0651430Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x144f423f0>]],
2025-01-13T19:12:33.0651880Z       dtype=object)
2025-01-13T19:12:33.0651970Z 
2025-01-13T19:12:33.0652050Z     def _tobuffer(self, object_):
2025-01-13T19:12:33.0652320Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:12:33.0652720Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.0652980Z 
2025-01-13T19:12:33.0653300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:12:33.0653960Z ________ ERROR at setup of TestHDFShellInfo.test_element_count_data[20] ________
2025-01-13T19:12:33.0654250Z 
2025-01-13T19:12:33.0654740Z path_or_buf = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0656180Z path = 'simulation'
2025-01-13T19:12:33.0656540Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:12:33.0656920Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:12:33.0657180Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:12:33.0657430Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:12:33.0657810Z 
2025-01-13T19:12:33.0657890Z     @staticmethod
2025-01-13T19:12:33.0658040Z     def to_hdf_util(
2025-01-13T19:12:33.0658270Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:12:33.0658510Z     ):
2025-01-13T19:12:33.0658630Z         """
2025-01-13T19:12:33.0658860Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:12:33.0659200Z     
2025-01-13T19:12:33.0659380Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:12:33.0659930Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:12:33.0660290Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:12:33.0660630Z     
2025-01-13T19:12:33.0661160Z         Units will be stored as their CGS value
2025-01-13T19:12:33.0661420Z     
2025-01-13T19:12:33.0661580Z         Parameters
2025-01-13T19:12:33.0661730Z         ----------
2025-01-13T19:12:33.0661920Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:12:33.0662240Z             Path or buffer to the HDF file
2025-01-13T19:12:33.0662490Z         path : str
2025-01-13T19:12:33.0662910Z             Path inside the HDF file to store the `elements`
2025-01-13T19:12:33.0663170Z         elements : dict
2025-01-13T19:12:33.0663420Z             A dict of property names and their values to be
2025-01-13T19:12:33.0663860Z             stored.
2025-01-13T19:12:33.0664030Z         overwrite : bool
2025-01-13T19:12:33.0664260Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:12:33.0664540Z     
2025-01-13T19:12:33.0664770Z         Notes
2025-01-13T19:12:33.0664950Z         -----
2025-01-13T19:12:33.0665190Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:12:33.0665580Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:12:33.0665900Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:12:33.0666120Z         """
2025-01-13T19:12:33.0666260Z         if (
2025-01-13T19:12:33.0666440Z             isinstance(path_or_buf, str)
2025-01-13T19:12:33.0666660Z             and os.path.exists(path_or_buf)
2025-01-13T19:12:33.0666880Z             and not overwrite
2025-01-13T19:12:33.0667050Z         ):
2025-01-13T19:12:33.0667180Z             raise FileExistsError(
2025-01-13T19:12:33.0667450Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:12:33.0667770Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:12:33.0668050Z             )
2025-01-13T19:12:33.0668170Z     
2025-01-13T19:12:33.0668310Z         else:
2025-01-13T19:12:33.0668550Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:12:33.0668830Z                 buf = pd.HDFStore(
2025-01-13T19:12:33.0669050Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:12:33.0669280Z                 )
2025-01-13T19:12:33.0669440Z             except TypeError as e:
2025-01-13T19:12:33.0669680Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:12:33.0669980Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:12:33.0670230Z                     logger.debug(
2025-01-13T19:12:33.0670510Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:12:33.0670790Z                     )
2025-01-13T19:12:33.0671190Z                     buf = path_or_buf
2025-01-13T19:12:33.0671370Z                 else:
2025-01-13T19:12:33.0671500Z                     raise e
2025-01-13T19:12:33.0671650Z     
2025-01-13T19:12:33.0671790Z         if not buf.is_open:
2025-01-13T19:12:33.0671940Z             buf.open()
2025-01-13T19:12:33.0672090Z     
2025-01-13T19:12:33.0672220Z         scalars = {}
2025-01-13T19:12:33.0672390Z         for key, value in elements.items():
2025-01-13T19:12:33.0672590Z             if value is None:
2025-01-13T19:12:33.0672760Z                 value = "none"
2025-01-13T19:12:33.0672930Z             if hasattr(value, "cgs"):
2025-01-13T19:12:33.0673120Z                 value = value.cgs.value
2025-01-13T19:12:33.0673310Z             if np.isscalar(value):
2025-01-13T19:12:33.0673480Z                 scalars[key] = value
2025-01-13T19:12:33.0673700Z             elif hasattr(value, "shape"):
2025-01-13T19:12:33.0673900Z                 if value.ndim == 1:
2025-01-13T19:12:33.0674170Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:12:33.0674750Z                     try:
2025-01-13T19:12:33.0674940Z                         pd.Series(value).to_hdf(
2025-01-13T19:12:33.0675520Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0675850Z                         )
2025-01-13T19:12:33.0676030Z                     except NotImplementedError:
2025-01-13T19:12:33.0676240Z                         logger.debug(
2025-01-13T19:12:33.0676520Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:12:33.0676770Z                         )
2025-01-13T19:12:33.0677120Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:12:33.0677350Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0677570Z                         )
2025-01-13T19:12:33.0677720Z                 else:
2025-01-13T19:12:33.0677940Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0678350Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:12:33.0678590Z                 try:
2025-01-13T19:12:33.0678790Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:12:33.0678970Z 
2025-01-13T19:12:33.0679030Z tardis/io/util.py:283: 
2025-01-13T19:12:33.0679230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0679450Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:12:33.0679640Z     data = self.get_properties()
2025-01-13T19:12:33.0679830Z tardis/io/util.py:298: in get_properties
2025-01-13T19:12:33.0680120Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:12:33.0680450Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.0680790Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.0681120Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.0681470Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.0681820Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.0682080Z     res = self.make_source_function()
2025-01-13T19:12:33.0682310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0682470Z 
2025-01-13T19:12:33.0682640Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x1451141d0>
2025-01-13T19:12:33.0682880Z 
2025-01-13T19:12:33.0682950Z     def make_source_function(self):
2025-01-13T19:12:33.0683150Z         """
2025-01-13T19:12:33.0683430Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.0683750Z     
2025-01-13T19:12:33.0684040Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.0684710Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.0685000Z     
2025-01-13T19:12:33.0685140Z         Parameters
2025-01-13T19:12:33.0685300Z         ----------
2025-01-13T19:12:33.0685480Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.0685730Z     
2025-01-13T19:12:33.0685850Z         Returns
2025-01-13T19:12:33.0686000Z         -------
2025-01-13T19:12:33.0686320Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.0686690Z         """
2025-01-13T19:12:33.0686850Z     
2025-01-13T19:12:33.0687010Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.0687270Z         # slice for the active shells
2025-01-13T19:12:33.0687460Z         local_slice = slice(
2025-01-13T19:12:33.0687670Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.0687950Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.0688180Z         )
2025-01-13T19:12:33.0688290Z     
2025-01-13T19:12:33.0688420Z         transport = self.transport
2025-01-13T19:12:33.0688660Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.0688900Z         transition_probabilities = (
2025-01-13T19:12:33.0689180Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.0689440Z         )
2025-01-13T19:12:33.0689680Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.0689920Z 
2025-01-13T19:12:33.0690050Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.0690290Z 
2025-01-13T19:12:33.0690420Z During handling of the above exception, another exception occurred:
2025-01-13T19:12:33.0690710Z 
2025-01-13T19:12:33.0691000Z hdf_file_path = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0691560Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x144f42390>
2025-01-13T19:12:33.0691830Z 
2025-01-13T19:12:33.0691890Z     @pytest.fixture(scope="class")
2025-01-13T19:12:33.0692140Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:12:33.0692390Z >       simulation_verysimple.to_hdf(
2025-01-13T19:12:33.0692600Z             hdf_file_path, overwrite=True
2025-01-13T19:12:33.0692790Z         )  # save sim at hdf_file_path
2025-01-13T19:12:33.0692920Z 
2025-01-13T19:12:33.0693040Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:12:33.0693320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0693540Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:12:33.0693790Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:12:33.0694040Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:12:33.0694280Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0694740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:12:33.0695130Z     return func(*args, **kwargs)
2025-01-13T19:12:33.0695630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:12:33.0696040Z     pytables.to_hdf(
2025-01-13T19:12:33.0696400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:12:33.0696770Z     f(store)
2025-01-13T19:12:33.0697150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:12:33.0697550Z     f = lambda store: store.put(
2025-01-13T19:12:33.0697950Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:12:33.0698620Z     self._write_to_group(
2025-01-13T19:12:33.0699070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:12:33.0699710Z     s.write(
2025-01-13T19:12:33.0701500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:12:33.0702130Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:12:33.0702720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:12:33.0727570Z     vlarr.append(value)
2025-01-13T19:12:33.0727900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:12:33.0728260Z     sequence = atom.toarray(sequence)
2025-01-13T19:12:33.0728600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:12:33.0728940Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:12:33.0729160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0729310Z 
2025-01-13T19:12:33.0729370Z self = ObjectAtom()
2025-01-13T19:12:33.0729610Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x144f423f0>]],
2025-01-13T19:12:33.0729890Z       dtype=object)
2025-01-13T19:12:33.0729970Z 
2025-01-13T19:12:33.0730040Z     def _tobuffer(self, object_):
2025-01-13T19:12:33.0730260Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:12:33.0730560Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.0730740Z 
2025-01-13T19:12:33.0730930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:12:33.0731340Z _________ ERROR at setup of TestHDFShellInfo.test_ion_count_data[12-1] _________
2025-01-13T19:12:33.0731570Z 
2025-01-13T19:12:33.0732190Z path_or_buf = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0732590Z path = 'simulation'
2025-01-13T19:12:33.0732910Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:12:33.0733290Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:12:33.0733530Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:12:33.0733820Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:12:33.0734020Z 
2025-01-13T19:12:33.0734100Z     @staticmethod
2025-01-13T19:12:33.0734290Z     def to_hdf_util(
2025-01-13T19:12:33.0734580Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:12:33.0734840Z     ):
2025-01-13T19:12:33.0734980Z         """
2025-01-13T19:12:33.0735170Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:12:33.0735410Z     
2025-01-13T19:12:33.0735620Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:12:33.0735990Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:12:33.0736390Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:12:33.0736670Z     
2025-01-13T19:12:33.0736810Z         Units will be stored as their CGS value
2025-01-13T19:12:33.0736990Z     
2025-01-13T19:12:33.0737100Z         Parameters
2025-01-13T19:12:33.0737240Z         ----------
2025-01-13T19:12:33.0737410Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:12:33.0737630Z             Path or buffer to the HDF file
2025-01-13T19:12:33.0737800Z         path : str
2025-01-13T19:12:33.0737970Z             Path inside the HDF file to store the `elements`
2025-01-13T19:12:33.0738180Z         elements : dict
2025-01-13T19:12:33.0738360Z             A dict of property names and their values to be
2025-01-13T19:12:33.0738550Z             stored.
2025-01-13T19:12:33.0738690Z         overwrite : bool
2025-01-13T19:12:33.0738900Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:12:33.0739130Z     
2025-01-13T19:12:33.0739230Z         Notes
2025-01-13T19:12:33.0739350Z         -----
2025-01-13T19:12:33.0739740Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:12:33.0740140Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:12:33.0740410Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:12:33.0740610Z         """
2025-01-13T19:12:33.0740750Z         if (
2025-01-13T19:12:33.0740900Z             isinstance(path_or_buf, str)
2025-01-13T19:12:33.0741120Z             and os.path.exists(path_or_buf)
2025-01-13T19:12:33.0741310Z             and not overwrite
2025-01-13T19:12:33.0741510Z         ):
2025-01-13T19:12:33.0741700Z             raise FileExistsError(
2025-01-13T19:12:33.0742000Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:12:33.0742320Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:12:33.0742540Z             )
2025-01-13T19:12:33.0742660Z     
2025-01-13T19:12:33.0742770Z         else:
2025-01-13T19:12:33.0742950Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:12:33.0743190Z                 buf = pd.HDFStore(
2025-01-13T19:12:33.0743400Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:12:33.0743620Z                 )
2025-01-13T19:12:33.0743750Z             except TypeError as e:
2025-01-13T19:12:33.0743950Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:12:33.0744190Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:12:33.0744400Z                     logger.debug(
2025-01-13T19:12:33.0744630Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:12:33.0744940Z                     )
2025-01-13T19:12:33.0745090Z                     buf = path_or_buf
2025-01-13T19:12:33.0745250Z                 else:
2025-01-13T19:12:33.0745390Z                     raise e
2025-01-13T19:12:33.0745520Z     
2025-01-13T19:12:33.0745640Z         if not buf.is_open:
2025-01-13T19:12:33.0745790Z             buf.open()
2025-01-13T19:12:33.0745940Z     
2025-01-13T19:12:33.0746050Z         scalars = {}
2025-01-13T19:12:33.0746200Z         for key, value in elements.items():
2025-01-13T19:12:33.0746420Z             if value is None:
2025-01-13T19:12:33.0746600Z                 value = "none"
2025-01-13T19:12:33.0746790Z             if hasattr(value, "cgs"):
2025-01-13T19:12:33.0746980Z                 value = value.cgs.value
2025-01-13T19:12:33.0747170Z             if np.isscalar(value):
2025-01-13T19:12:33.0747350Z                 scalars[key] = value
2025-01-13T19:12:33.0747530Z             elif hasattr(value, "shape"):
2025-01-13T19:12:33.0747720Z                 if value.ndim == 1:
2025-01-13T19:12:33.0747940Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:12:33.0748170Z                     try:
2025-01-13T19:12:33.0748330Z                         pd.Series(value).to_hdf(
2025-01-13T19:12:33.0748530Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0748730Z                         )
2025-01-13T19:12:33.0748900Z                     except NotImplementedError:
2025-01-13T19:12:33.0749090Z                         logger.debug(
2025-01-13T19:12:33.0749340Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:12:33.0749580Z                         )
2025-01-13T19:12:33.0749740Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:12:33.0749960Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0750150Z                         )
2025-01-13T19:12:33.0750290Z                 else:
2025-01-13T19:12:33.0750510Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0750830Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:12:33.0751060Z                 try:
2025-01-13T19:12:33.0751260Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:12:33.0751590Z 
2025-01-13T19:12:33.0751650Z tardis/io/util.py:283: 
2025-01-13T19:12:33.0751840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0752050Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:12:33.0752230Z     data = self.get_properties()
2025-01-13T19:12:33.0752410Z tardis/io/util.py:298: in get_properties
2025-01-13T19:12:33.0752680Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:12:33.0752980Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.0753290Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.0753660Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.0754050Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.0754440Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.0754750Z     res = self.make_source_function()
2025-01-13T19:12:33.0755030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0755220Z 
2025-01-13T19:12:33.0755410Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x1451141d0>
2025-01-13T19:12:33.0755660Z 
2025-01-13T19:12:33.0755730Z     def make_source_function(self):
2025-01-13T19:12:33.0755900Z         """
2025-01-13T19:12:33.0756160Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.0756490Z     
2025-01-13T19:12:33.0756800Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.0757320Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.0757590Z     
2025-01-13T19:12:33.0757710Z         Parameters
2025-01-13T19:12:33.0757870Z         ----------
2025-01-13T19:12:33.0758040Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.0758230Z     
2025-01-13T19:12:33.0758350Z         Returns
2025-01-13T19:12:33.0758490Z         -------
2025-01-13T19:12:33.0758760Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.0759090Z         """
2025-01-13T19:12:33.0759210Z     
2025-01-13T19:12:33.0759350Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.0759590Z         # slice for the active shells
2025-01-13T19:12:33.0759780Z         local_slice = slice(
2025-01-13T19:12:33.0760010Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.0760300Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.0760520Z         )
2025-01-13T19:12:33.0760630Z     
2025-01-13T19:12:33.0760750Z         transport = self.transport
2025-01-13T19:12:33.0761000Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.0761260Z         transition_probabilities = (
2025-01-13T19:12:33.0761550Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.0762560Z         )
2025-01-13T19:12:33.0762900Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.0763220Z 
2025-01-13T19:12:33.0763340Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.0763530Z 
2025-01-13T19:12:33.0763660Z During handling of the above exception, another exception occurred:
2025-01-13T19:12:33.0763870Z 
2025-01-13T19:12:33.0764170Z hdf_file_path = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0764720Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x144f42390>
2025-01-13T19:12:33.0765000Z 
2025-01-13T19:12:33.0765070Z     @pytest.fixture(scope="class")
2025-01-13T19:12:33.0765320Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:12:33.0765580Z >       simulation_verysimple.to_hdf(
2025-01-13T19:12:33.0765990Z             hdf_file_path, overwrite=True
2025-01-13T19:12:33.0766180Z         )  # save sim at hdf_file_path
2025-01-13T19:12:33.0766310Z 
2025-01-13T19:12:33.0766440Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:12:33.0766720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0766970Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:12:33.0767220Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:12:33.0767470Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:12:33.0767680Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0768080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:12:33.0768450Z     return func(*args, **kwargs)
2025-01-13T19:12:33.0768800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:12:33.0769130Z     pytables.to_hdf(
2025-01-13T19:12:33.0769430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:12:33.0769770Z     f(store)
2025-01-13T19:12:33.0770070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:12:33.0770440Z     f = lambda store: store.put(
2025-01-13T19:12:33.0770810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:12:33.0771190Z     self._write_to_group(
2025-01-13T19:12:33.0771560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:12:33.0772050Z     s.write(
2025-01-13T19:12:33.0772370Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:12:33.0772850Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:12:33.0773330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:12:33.0773690Z     vlarr.append(value)
2025-01-13T19:12:33.0773980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:12:33.0774320Z     sequence = atom.toarray(sequence)
2025-01-13T19:12:33.0774640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:12:33.0774960Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:12:33.0775180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0775360Z 
2025-01-13T19:12:33.0775410Z self = ObjectAtom()
2025-01-13T19:12:33.0775690Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x144f423f0>]],
2025-01-13T19:12:33.0775980Z       dtype=object)
2025-01-13T19:12:33.0776070Z 
2025-01-13T19:12:33.0776130Z     def _tobuffer(self, object_):
2025-01-13T19:12:33.0776350Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:12:33.0776630Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.0776800Z 
2025-01-13T19:12:33.0776990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:12:33.0777420Z ________ ERROR at setup of TestHDFShellInfo.test_ion_count_data[20-20] _________
2025-01-13T19:12:33.0777640Z 
2025-01-13T19:12:33.0777910Z path_or_buf = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0778290Z path = 'simulation'
2025-01-13T19:12:33.0778600Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:12:33.0778970Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:12:33.0779190Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:12:33.0779430Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:12:33.0779870Z 
2025-01-13T19:12:33.0779920Z     @staticmethod
2025-01-13T19:12:33.0780060Z     def to_hdf_util(
2025-01-13T19:12:33.0780280Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:12:33.0780530Z     ):
2025-01-13T19:12:33.0780640Z         """
2025-01-13T19:12:33.0780830Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:12:33.0781050Z     
2025-01-13T19:12:33.0781220Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:12:33.0781520Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:12:33.0781860Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:12:33.0782120Z     
2025-01-13T19:12:33.0782270Z         Units will be stored as their CGS value
2025-01-13T19:12:33.0782460Z     
2025-01-13T19:12:33.0782570Z         Parameters
2025-01-13T19:12:33.0782710Z         ----------
2025-01-13T19:12:33.0782890Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:12:33.0783120Z             Path or buffer to the HDF file
2025-01-13T19:12:33.0783300Z         path : str
2025-01-13T19:12:33.0783480Z             Path inside the HDF file to store the `elements`
2025-01-13T19:12:33.0783690Z         elements : dict
2025-01-13T19:12:33.0783870Z             A dict of property names and their values to be
2025-01-13T19:12:33.0784080Z             stored.
2025-01-13T19:12:33.0784220Z         overwrite : bool
2025-01-13T19:12:33.0784440Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:12:33.0784680Z     
2025-01-13T19:12:33.0784790Z         Notes
2025-01-13T19:12:33.0785200Z         -----
2025-01-13T19:12:33.0785460Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:12:33.0785790Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:12:33.0786080Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:12:33.0786280Z         """
2025-01-13T19:12:33.0786390Z         if (
2025-01-13T19:12:33.0786530Z             isinstance(path_or_buf, str)
2025-01-13T19:12:33.0786720Z             and os.path.exists(path_or_buf)
2025-01-13T19:12:33.0786910Z             and not overwrite
2025-01-13T19:12:33.0787060Z         ):
2025-01-13T19:12:33.0787190Z             raise FileExistsError(
2025-01-13T19:12:33.0787440Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:12:33.0787730Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:12:33.0787970Z             )
2025-01-13T19:12:33.0788090Z     
2025-01-13T19:12:33.0788200Z         else:
2025-01-13T19:12:33.0788400Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:12:33.0788640Z                 buf = pd.HDFStore(
2025-01-13T19:12:33.0788920Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:12:33.0789150Z                 )
2025-01-13T19:12:33.0789290Z             except TypeError as e:
2025-01-13T19:12:33.0789500Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:12:33.0789770Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:12:33.0790010Z                     logger.debug(
2025-01-13T19:12:33.0790250Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:12:33.0798310Z                     )
2025-01-13T19:12:33.0798550Z                     buf = path_or_buf
2025-01-13T19:12:33.0798730Z                 else:
2025-01-13T19:12:33.0798870Z                     raise e
2025-01-13T19:12:33.0799010Z     
2025-01-13T19:12:33.0799140Z         if not buf.is_open:
2025-01-13T19:12:33.0799290Z             buf.open()
2025-01-13T19:12:33.0799430Z     
2025-01-13T19:12:33.0799540Z         scalars = {}
2025-01-13T19:12:33.0799700Z         for key, value in elements.items():
2025-01-13T19:12:33.0799900Z             if value is None:
2025-01-13T19:12:33.0800400Z                 value = "none"
2025-01-13T19:12:33.0800580Z             if hasattr(value, "cgs"):
2025-01-13T19:12:33.0800770Z                 value = value.cgs.value
2025-01-13T19:12:33.0800950Z             if np.isscalar(value):
2025-01-13T19:12:33.0801130Z                 scalars[key] = value
2025-01-13T19:12:33.0801320Z             elif hasattr(value, "shape"):
2025-01-13T19:12:33.0801510Z                 if value.ndim == 1:
2025-01-13T19:12:33.0801740Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:12:33.0801970Z                     try:
2025-01-13T19:12:33.0802140Z                         pd.Series(value).to_hdf(
2025-01-13T19:12:33.0802360Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0802660Z                         )
2025-01-13T19:12:33.0802830Z                     except NotImplementedError:
2025-01-13T19:12:33.0803030Z                         logger.debug(
2025-01-13T19:12:33.0803280Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:12:33.0803540Z                         )
2025-01-13T19:12:33.0803710Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:12:33.0803950Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0804160Z                         )
2025-01-13T19:12:33.0804300Z                 else:
2025-01-13T19:12:33.0804510Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0804830Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:12:33.0805070Z                 try:
2025-01-13T19:12:33.0805290Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:12:33.0805620Z 
2025-01-13T19:12:33.0805680Z tardis/io/util.py:283: 
2025-01-13T19:12:33.0805870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0806100Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:12:33.0806300Z     data = self.get_properties()
2025-01-13T19:12:33.0806490Z tardis/io/util.py:298: in get_properties
2025-01-13T19:12:33.0806760Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:12:33.0807060Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.0807350Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.0807670Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.0808000Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.0808320Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.0808570Z     res = self.make_source_function()
2025-01-13T19:12:33.0808790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0808960Z 
2025-01-13T19:12:33.0809120Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x1451141d0>
2025-01-13T19:12:33.0809360Z 
2025-01-13T19:12:33.0809430Z     def make_source_function(self):
2025-01-13T19:12:33.0809600Z         """
2025-01-13T19:12:33.0809860Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.0810170Z     
2025-01-13T19:12:33.0810450Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.0810840Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.0811080Z     
2025-01-13T19:12:33.0811190Z         Parameters
2025-01-13T19:12:33.0811320Z         ----------
2025-01-13T19:12:33.0811500Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.0811700Z     
2025-01-13T19:12:33.0811800Z         Returns
2025-01-13T19:12:33.0811930Z         -------
2025-01-13T19:12:33.0812190Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.0812490Z         """
2025-01-13T19:12:33.0812730Z     
2025-01-13T19:12:33.0812870Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.0813100Z         # slice for the active shells
2025-01-13T19:12:33.0813280Z         local_slice = slice(
2025-01-13T19:12:33.0813490Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.0813750Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.0813960Z         )
2025-01-13T19:12:33.0814080Z     
2025-01-13T19:12:33.0814200Z         transport = self.transport
2025-01-13T19:12:33.0814430Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.0814670Z         transition_probabilities = (
2025-01-13T19:12:33.0814950Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.0815220Z         )
2025-01-13T19:12:33.0815460Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.0815690Z 
2025-01-13T19:12:33.0815820Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.0815990Z 
2025-01-13T19:12:33.0816130Z During handling of the above exception, another exception occurred:
2025-01-13T19:12:33.0816330Z 
2025-01-13T19:12:33.0816610Z hdf_file_path = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0817130Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x144f42390>
2025-01-13T19:12:33.0817370Z 
2025-01-13T19:12:33.0817440Z     @pytest.fixture(scope="class")
2025-01-13T19:12:33.0817680Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:12:33.0817930Z >       simulation_verysimple.to_hdf(
2025-01-13T19:12:33.0818260Z             hdf_file_path, overwrite=True
2025-01-13T19:12:33.0818460Z         )  # save sim at hdf_file_path
2025-01-13T19:12:33.0818610Z 
2025-01-13T19:12:33.0818730Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:12:33.0819020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0819240Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:12:33.0819480Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:12:33.0819730Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:12:33.0819940Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0820320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:12:33.0820670Z     return func(*args, **kwargs)
2025-01-13T19:12:33.0821000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:12:33.0821330Z     pytables.to_hdf(
2025-01-13T19:12:33.0821640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:12:33.0821980Z     f(store)
2025-01-13T19:12:33.0822270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:12:33.0822620Z     f = lambda store: store.put(
2025-01-13T19:12:33.0822930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:12:33.0823280Z     self._write_to_group(
2025-01-13T19:12:33.0823610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:12:33.0823960Z     s.write(
2025-01-13T19:12:33.0824240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:12:33.0824640Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:12:33.0825050Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:12:33.0825400Z     vlarr.append(value)
2025-01-13T19:12:33.0825690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:12:33.0826200Z     sequence = atom.toarray(sequence)
2025-01-13T19:12:33.0826520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:12:33.0826900Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:12:33.0827140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0827310Z 
2025-01-13T19:12:33.0827370Z self = ObjectAtom()
2025-01-13T19:12:33.0827630Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x144f423f0>]],
2025-01-13T19:12:33.0827910Z       dtype=object)
2025-01-13T19:12:33.0827990Z 
2025-01-13T19:12:33.0828060Z     def _tobuffer(self, object_):
2025-01-13T19:12:33.0828300Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:12:33.0828610Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.0828790Z 
2025-01-13T19:12:33.0828980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:12:33.0829390Z _______ ERROR at setup of TestHDFShellInfo.test_level_count_data[2-12-1] _______
2025-01-13T19:12:33.0829620Z 
2025-01-13T19:12:33.0829880Z path_or_buf = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0830270Z path = 'simulation'
2025-01-13T19:12:33.0830590Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:12:33.0830950Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:12:33.0831220Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:12:33.0831480Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:12:33.0831780Z 
2025-01-13T19:12:33.0831830Z     @staticmethod
2025-01-13T19:12:33.0831960Z     def to_hdf_util(
2025-01-13T19:12:33.0832210Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:12:33.0832490Z     ):
2025-01-13T19:12:33.0832610Z         """
2025-01-13T19:12:33.0832840Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:12:33.0833140Z     
2025-01-13T19:12:33.0833310Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:12:33.0833640Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:12:33.0833990Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:12:33.0834240Z     
2025-01-13T19:12:33.0834370Z         Units will be stored as their CGS value
2025-01-13T19:12:33.0834560Z     
2025-01-13T19:12:33.0834670Z         Parameters
2025-01-13T19:12:33.0834800Z         ----------
2025-01-13T19:12:33.0834990Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:12:33.0835230Z             Path or buffer to the HDF file
2025-01-13T19:12:33.0835430Z         path : str
2025-01-13T19:12:33.0835620Z             Path inside the HDF file to store the `elements`
2025-01-13T19:12:33.0835840Z         elements : dict
2025-01-13T19:12:33.0836030Z             A dict of property names and their values to be
2025-01-13T19:12:33.0836240Z             stored.
2025-01-13T19:12:33.0836380Z         overwrite : bool
2025-01-13T19:12:33.0836600Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:12:33.0836850Z     
2025-01-13T19:12:33.0836960Z         Notes
2025-01-13T19:12:33.0837080Z         -----
2025-01-13T19:12:33.0837290Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:12:33.0837620Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:12:33.0837890Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:12:33.0838080Z         """
2025-01-13T19:12:33.0838200Z         if (
2025-01-13T19:12:33.0838340Z             isinstance(path_or_buf, str)
2025-01-13T19:12:33.0838540Z             and os.path.exists(path_or_buf)
2025-01-13T19:12:33.0838730Z             and not overwrite
2025-01-13T19:12:33.0839310Z         ):
2025-01-13T19:12:33.0839450Z             raise FileExistsError(
2025-01-13T19:12:33.0839680Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:12:33.0840240Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:12:33.0840500Z             )
2025-01-13T19:12:33.0840620Z     
2025-01-13T19:12:33.0840750Z         else:
2025-01-13T19:12:33.0840970Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:12:33.0841250Z                 buf = pd.HDFStore(
2025-01-13T19:12:33.0841470Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:12:33.0841700Z                 )
2025-01-13T19:12:33.0841840Z             except TypeError as e:
2025-01-13T19:12:33.0842070Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:12:33.0842320Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:12:33.0842670Z                     logger.debug(
2025-01-13T19:12:33.0842920Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:12:33.0843170Z                     )
2025-01-13T19:12:33.0843340Z                     buf = path_or_buf
2025-01-13T19:12:33.0843510Z                 else:
2025-01-13T19:12:33.0843670Z                     raise e
2025-01-13T19:12:33.0843820Z     
2025-01-13T19:12:33.0843950Z         if not buf.is_open:
2025-01-13T19:12:33.0844100Z             buf.open()
2025-01-13T19:12:33.0844240Z     
2025-01-13T19:12:33.0844350Z         scalars = {}
2025-01-13T19:12:33.0844510Z         for key, value in elements.items():
2025-01-13T19:12:33.0844720Z             if value is None:
2025-01-13T19:12:33.0845440Z                 value = "none"
2025-01-13T19:12:33.0845630Z             if hasattr(value, "cgs"):
2025-01-13T19:12:33.0845840Z                 value = value.cgs.value
2025-01-13T19:12:33.0846070Z             if np.isscalar(value):
2025-01-13T19:12:33.0846270Z                 scalars[key] = value
2025-01-13T19:12:33.0846470Z             elif hasattr(value, "shape"):
2025-01-13T19:12:33.0846660Z                 if value.ndim == 1:
2025-01-13T19:12:33.0846900Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:12:33.0847140Z                     try:
2025-01-13T19:12:33.0847300Z                         pd.Series(value).to_hdf(
2025-01-13T19:12:33.0847520Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0847720Z                         )
2025-01-13T19:12:33.0847880Z                     except NotImplementedError:
2025-01-13T19:12:33.0848080Z                         logger.debug(
2025-01-13T19:12:33.0848340Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:12:33.0848590Z                         )
2025-01-13T19:12:33.0848780Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:12:33.0849020Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0849220Z                         )
2025-01-13T19:12:33.0849360Z                 else:
2025-01-13T19:12:33.0849580Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0849900Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:12:33.0850150Z                 try:
2025-01-13T19:12:33.0850350Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:12:33.0850540Z 
2025-01-13T19:12:33.0850600Z tardis/io/util.py:283: 
2025-01-13T19:12:33.0850780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0851000Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:12:33.0851190Z     data = self.get_properties()
2025-01-13T19:12:33.0851380Z tardis/io/util.py:298: in get_properties
2025-01-13T19:12:33.0851650Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:12:33.0851950Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.0852360Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.0852690Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.0853020Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.0853340Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.0853590Z     res = self.make_source_function()
2025-01-13T19:12:33.0853810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0853980Z 
2025-01-13T19:12:33.0854150Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x1451141d0>
2025-01-13T19:12:33.0854410Z 
2025-01-13T19:12:33.0854480Z     def make_source_function(self):
2025-01-13T19:12:33.0854660Z         """
2025-01-13T19:12:33.0854920Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.0855230Z     
2025-01-13T19:12:33.0855510Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.0855950Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.0856190Z     
2025-01-13T19:12:33.0856300Z         Parameters
2025-01-13T19:12:33.0856440Z         ----------
2025-01-13T19:12:33.0856620Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.0856820Z     
2025-01-13T19:12:33.0856940Z         Returns
2025-01-13T19:12:33.0857060Z         -------
2025-01-13T19:12:33.0857320Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.0857740Z         """
2025-01-13T19:12:33.0857870Z     
2025-01-13T19:12:33.0858020Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.0858220Z         # slice for the active shells
2025-01-13T19:12:33.0858400Z         local_slice = slice(
2025-01-13T19:12:33.0858610Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.0858890Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.0858930Z         )
2025-01-13T19:12:33.0858990Z     
2025-01-13T19:12:33.0859070Z         transport = self.transport
2025-01-13T19:12:33.0859180Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.0859480Z         transition_probabilities = (
2025-01-13T19:12:33.0859770Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.0870800Z         )
2025-01-13T19:12:33.0871090Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.0871110Z 
2025-01-13T19:12:33.0871240Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.0871250Z 
2025-01-13T19:12:33.0871390Z During handling of the above exception, another exception occurred:
2025-01-13T19:12:33.0871390Z 
2025-01-13T19:12:33.0871690Z hdf_file_path = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0871870Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x144f42390>
2025-01-13T19:12:33.0871880Z 
2025-01-13T19:12:33.0871950Z     @pytest.fixture(scope="class")
2025-01-13T19:12:33.0872060Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:12:33.0872140Z >       simulation_verysimple.to_hdf(
2025-01-13T19:12:33.0872210Z             hdf_file_path, overwrite=True
2025-01-13T19:12:33.0872650Z /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:113: UnclosedFileWarning:
2025-01-13T19:12:33.0872660Z 
2025-01-13T19:12:33.0872990Z Closing remaining open file: /private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf
2025-01-13T19:12:33.0872990Z 
2025-01-13T19:12:33.0873050Z         )  # save sim at hdf_file_path
2025-01-13T19:12:33.0873060Z 
2025-01-13T19:12:33.0873180Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:12:33.0873620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0873690Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:12:33.0873810Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:12:33.0873880Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:12:33.0873990Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0874230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:12:33.0874310Z     return func(*args, **kwargs)
2025-01-13T19:12:33.0874530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:12:33.0874610Z     pytables.to_hdf(
2025-01-13T19:12:33.0874830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:12:33.0874900Z     f(store)
2025-01-13T19:12:33.0875110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:12:33.0875180Z     f = lambda store: store.put(
2025-01-13T19:12:33.0875380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:12:33.0875440Z     self._write_to_group(
2025-01-13T19:12:33.0875670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:12:33.0875730Z     s.write(
2025-01-13T19:12:33.0875950Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:12:33.0876100Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:12:33.0876450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:12:33.0876520Z     vlarr.append(value)
2025-01-13T19:12:33.0876710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:12:33.0876790Z     sequence = atom.toarray(sequence)
2025-01-13T19:12:33.0876990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:12:33.0877080Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:12:33.0877190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0877190Z 
2025-01-13T19:12:33.0877250Z self = ObjectAtom()
2025-01-13T19:12:33.0877410Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x144f423f0>]],
2025-01-13T19:12:33.0877480Z       dtype=object)
2025-01-13T19:12:33.0877490Z 
2025-01-13T19:12:33.0877560Z     def _tobuffer(self, object_):
2025-01-13T19:12:33.0877700Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:12:33.0877800Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.0877810Z 
2025-01-13T19:12:33.0878000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:12:33.0878160Z ______ ERROR at setup of TestHDFShellInfo.test_level_count_data[3-20-20] _______
2025-01-13T19:12:33.0878160Z 
2025-01-13T19:12:33.0878450Z path_or_buf = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0878520Z path = 'simulation'
2025-01-13T19:12:33.0878750Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:12:33.0878840Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:12:33.0878930Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:12:33.0879040Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:12:33.0879040Z 
2025-01-13T19:12:33.0879090Z     @staticmethod
2025-01-13T19:12:33.0879150Z     def to_hdf_util(
2025-01-13T19:12:33.0879300Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:12:33.0879460Z     ):
2025-01-13T19:12:33.0879520Z         """
2025-01-13T19:12:33.0879640Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:12:33.0879690Z     
2025-01-13T19:12:33.0879790Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:12:33.0879930Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:12:33.0880070Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:12:33.0880120Z     
2025-01-13T19:12:33.0880190Z         Units will be stored as their CGS value
2025-01-13T19:12:33.0880240Z     
2025-01-13T19:12:33.0880290Z         Parameters
2025-01-13T19:12:33.0880350Z         ----------
2025-01-13T19:12:33.0880450Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:12:33.0880520Z             Path or buffer to the HDF file
2025-01-13T19:12:33.0880580Z         path : str
2025-01-13T19:12:33.0880680Z             Path inside the HDF file to store the `elements`
2025-01-13T19:12:33.0880750Z         elements : dict
2025-01-13T19:12:33.0880850Z             A dict of property names and their values to be
2025-01-13T19:12:33.0880900Z             stored.
2025-01-13T19:12:33.0880960Z         overwrite : bool
2025-01-13T19:12:33.0881090Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:12:33.0881130Z     
2025-01-13T19:12:33.0881180Z         Notes
2025-01-13T19:12:33.0881240Z         -----
2025-01-13T19:12:33.0881400Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:12:33.0881550Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:12:33.0881700Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:12:33.0881760Z         """
2025-01-13T19:12:33.0881810Z         if (
2025-01-13T19:12:33.0881890Z             isinstance(path_or_buf, str)
2025-01-13T19:12:33.0881980Z             and os.path.exists(path_or_buf)
2025-01-13T19:12:33.0970750Z             and not overwrite
2025-01-13T19:12:33.0971240Z         ):
2025-01-13T19:12:33.0971510Z             raise FileExistsError(
2025-01-13T19:12:33.0971870Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:12:33.0972170Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:12:33.0972340Z             )
2025-01-13T19:12:33.0972500Z     
2025-01-13T19:12:33.0972670Z         else:
2025-01-13T19:12:33.0973070Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:12:33.0973270Z                 buf = pd.HDFStore(
2025-01-13T19:12:33.0973550Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:12:33.0973760Z                 )
2025-01-13T19:12:33.0973940Z             except TypeError as e:
2025-01-13T19:12:33.0974180Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:12:33.0974500Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:12:33.0974720Z                     logger.debug(
2025-01-13T19:12:33.0975090Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:12:33.0975400Z                     )
2025-01-13T19:12:33.0975580Z                     buf = path_or_buf
2025-01-13T19:12:33.0975630Z                 else:
2025-01-13T19:12:33.0975690Z                     raise e
2025-01-13T19:12:33.0975730Z     
2025-01-13T19:12:33.0975790Z         if not buf.is_open:
2025-01-13T19:12:33.0975840Z             buf.open()
2025-01-13T19:12:33.0975890Z     
2025-01-13T19:12:33.0975940Z         scalars = {}
2025-01-13T19:12:33.0976010Z         for key, value in elements.items():
2025-01-13T19:12:33.0976120Z             if value is None:
2025-01-13T19:12:33.0976180Z                 value = "none"
2025-01-13T19:12:33.0976280Z             if hasattr(value, "cgs"):
2025-01-13T19:12:33.0976340Z                 value = value.cgs.value
2025-01-13T19:12:33.0976950Z             if np.isscalar(value):
2025-01-13T19:12:33.0977020Z                 scalars[key] = value
2025-01-13T19:12:33.0977080Z             elif hasattr(value, "shape"):
2025-01-13T19:12:33.0977140Z                 if value.ndim == 1:
2025-01-13T19:12:33.0977270Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:12:33.0977320Z                     try:
2025-01-13T19:12:33.0977390Z                         pd.Series(value).to_hdf(
2025-01-13T19:12:33.0977480Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0977530Z                         )
2025-01-13T19:12:33.0977610Z                     except NotImplementedError:
2025-01-13T19:12:33.0977670Z                         logger.debug(
2025-01-13T19:12:33.0977810Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:12:33.0977860Z                         )
2025-01-13T19:12:33.0977930Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:12:33.0978020Z                             buf, key=os.path.join(path, key)
2025-01-13T19:12:33.0978080Z                         )
2025-01-13T19:12:33.0978120Z                 else:
2025-01-13T19:12:33.0978250Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0978380Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:12:33.0978430Z                 try:
2025-01-13T19:12:33.0978540Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:12:33.0978540Z 
2025-01-13T19:12:33.0978600Z tardis/io/util.py:283: 
2025-01-13T19:12:33.0978690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0979310Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:12:33.0979380Z     data = self.get_properties()
2025-01-13T19:12:33.0979450Z tardis/io/util.py:298: in get_properties
2025-01-13T19:12:33.0979590Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:12:33.0979690Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.0979820Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.0979950Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.0980090Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.0980200Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.0980270Z     res = self.make_source_function()
2025-01-13T19:12:33.0980360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0980370Z 
2025-01-13T19:12:33.0980540Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x1451141d0>
2025-01-13T19:12:33.0980540Z 
2025-01-13T19:12:33.0980610Z     def make_source_function(self):
2025-01-13T19:12:33.0980650Z         """
2025-01-13T19:12:33.0980850Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.0980900Z     
2025-01-13T19:12:33.0981110Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.0981240Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.0981290Z     
2025-01-13T19:12:33.0981350Z         Parameters
2025-01-13T19:12:33.0981400Z         ----------
2025-01-13T19:12:33.0981480Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.0981520Z     
2025-01-13T19:12:33.0981570Z         Returns
2025-01-13T19:12:33.0981620Z         -------
2025-01-13T19:12:33.0981810Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.0981860Z         """
2025-01-13T19:12:33.0981900Z     
2025-01-13T19:12:33.0981980Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.0982040Z         # slice for the active shells
2025-01-13T19:12:33.0982170Z         local_slice = slice(
2025-01-13T19:12:33.0982270Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.0982370Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.0982420Z         )
2025-01-13T19:12:33.0982460Z     
2025-01-13T19:12:33.0982520Z         transport = self.transport
2025-01-13T19:12:33.0982630Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.0982700Z         transition_probabilities = (
2025-01-13T19:12:33.0982840Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.0982890Z         )
2025-01-13T19:12:33.0983060Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.0983060Z 
2025-01-13T19:12:33.0983170Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.0983170Z 
2025-01-13T19:12:33.0983310Z During handling of the above exception, another exception occurred:
2025-01-13T19:12:33.0983320Z 
2025-01-13T19:12:33.0983600Z hdf_file_path = '/private/var/folders/ml/x_tvfgn50_s7p67dm1ypcqqm0000gn/T/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:12:33.0983780Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x144f42390>
2025-01-13T19:12:33.0983780Z 
2025-01-13T19:12:33.0983850Z     @pytest.fixture(scope="class")
2025-01-13T19:12:33.0983960Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:12:33.0984020Z >       simulation_verysimple.to_hdf(
2025-01-13T19:12:33.0984090Z             hdf_file_path, overwrite=True
2025-01-13T19:12:33.0984160Z         )  # save sim at hdf_file_path
2025-01-13T19:12:33.0984160Z 
2025-01-13T19:12:33.0984330Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:12:33.0984430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0984490Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:12:33.0984610Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:12:33.0984670Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:12:33.0984770Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:12:33.0984990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:12:33.0985070Z     return func(*args, **kwargs)
2025-01-13T19:12:33.0985290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:12:33.0985350Z     pytables.to_hdf(
2025-01-13T19:12:33.0985580Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:12:33.0985640Z     f(store)
2025-01-13T19:12:33.0985870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:12:33.0985930Z     f = lambda store: store.put(
2025-01-13T19:12:33.0986130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:12:33.0986190Z     self._write_to_group(
2025-01-13T19:12:33.0986420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:12:33.0986470Z     s.write(
2025-01-13T19:12:33.0986680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:12:33.0986810Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:12:33.0987020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:12:33.0987080Z     vlarr.append(value)
2025-01-13T19:12:33.0987270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:12:33.0987340Z     sequence = atom.toarray(sequence)
2025-01-13T19:12:33.0987530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:12:33.0987590Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:12:33.0987780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0987790Z 
2025-01-13T19:12:33.0987840Z self = ObjectAtom()
2025-01-13T19:12:33.0988010Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x144f423f0>]],
2025-01-13T19:12:33.0988060Z       dtype=object)
2025-01-13T19:12:33.0988060Z 
2025-01-13T19:12:33.0988120Z     def _tobuffer(self, object_):
2025-01-13T19:12:33.0988230Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:12:33.0988330Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.0988330Z 
2025-01-13T19:12:33.0988510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:12:33.0988610Z =================================== FAILURES ===================================
2025-01-13T19:12:33.0988730Z _____________________ test_calculate_sobolev_line_opacity ______________________
2025-01-13T19:12:33.0988740Z 
2025-01-13T19:12:33.0988920Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x3114e5fd0>
2025-01-13T19:12:33.0989130Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x320b5e7e0>
2025-01-13T19:12:33.0989130Z 
2025-01-13T19:12:33.0989200Z     def test_calculate_sobolev_line_opacity(
2025-01-13T19:12:33.0989280Z         nb_simulation_verysimple, regression_data
2025-01-13T19:12:33.0989330Z     ):
2025-01-13T19:12:33.0989430Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-13T19:12:33.0989470Z     
2025-01-13T19:12:33.0989550Z         actual = calculate_sobolev_line_opacity(
2025-01-13T19:12:33.0989610Z             legacy_plasma.lines,
2025-01-13T19:12:33.0989740Z             legacy_plasma.level_number_density,
2025-01-13T19:12:33.0989810Z             legacy_plasma.time_explosion,
2025-01-13T19:12:33.0989910Z             legacy_plasma.stimulated_emission_factor,
2025-01-13T19:12:33.0989960Z         )
2025-01-13T19:12:33.0990060Z >       expected = regression_data.sync_dataframe(actual)
2025-01-13T19:12:33.0990070Z 
2025-01-13T19:12:33.0990150Z tardis/opacities/tests/test_tau_sobolev.py:21: 
2025-01-13T19:12:33.0990240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0990360Z tardis/tests/fixtures/regression_data.py:88: in sync_dataframe
2025-01-13T19:12:33.0990440Z     return pd.read_hdf(self.fpath, key=key)
2025-01-13T19:12:33.0990530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.0990530Z 
2025-01-13T19:12:33.0990830Z path_or_buf = '/Users/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_sobolev_line_opacity.h5'
2025-01-13T19:12:33.0990960Z key = 'data', mode = 'r', errors = 'strict', where = None, start = None
2025-01-13T19:12:33.0991090Z stop = None, columns = None, iterator = False, chunksize = None, kwargs = {}
2025-01-13T19:12:33.0991150Z exists = False
2025-01-13T19:12:33.0991160Z 
2025-01-13T19:12:33.0991210Z     def read_hdf(
2025-01-13T19:12:33.0991290Z         path_or_buf: FilePath | HDFStore,
2025-01-13T19:12:33.0991340Z         key=None,
2025-01-13T19:12:33.0991390Z         mode: str = "r",
2025-01-13T19:12:33.0991450Z         errors: str = "strict",
2025-01-13T19:12:33.0991520Z         where: str | list | None = None,
2025-01-13T19:12:33.0991570Z         start: int | None = None,
2025-01-13T19:12:33.0991630Z         stop: int | None = None,
2025-01-13T19:12:33.0991700Z         columns: list[str] | None = None,
2025-01-13T19:12:33.0991750Z         iterator: bool = False,
2025-01-13T19:12:33.0991810Z         chunksize: int | None = None,
2025-01-13T19:12:33.0991860Z         **kwargs,
2025-01-13T19:12:33.0991910Z     ):
2025-01-13T19:12:33.0991950Z         """
2025-01-13T19:12:33.0992050Z         Read from the store, close it if we opened it.
2025-01-13T19:12:33.0992090Z     
2025-01-13T19:12:33.0992220Z         Retrieve pandas object stored in file, optionally based on where
2025-01-13T19:12:33.0992350Z         criteria.
2025-01-13T19:12:33.0992400Z     
2025-01-13T19:12:33.1000720Z         .. warning::
2025-01-13T19:12:33.1000780Z     
2025-01-13T19:12:33.1000920Z            Pandas uses PyTables for reading and writing HDF5 files, which allows
2025-01-13T19:12:33.1001090Z            serializing object-dtype data with pickle when using the "fixed" format.
2025-01-13T19:12:33.1001230Z            Loading pickled data received from untrusted sources can be unsafe.
2025-01-13T19:12:33.1001270Z     
2025-01-13T19:12:33.1001490Z            See: https://docs.python.org/3/library/pickle.html for more.
2025-01-13T19:12:33.1001540Z     
2025-01-13T19:12:33.1001590Z         Parameters
2025-01-13T19:12:33.1001650Z         ----------
2025-01-13T19:12:33.1001750Z         path_or_buf : str, path object, pandas.HDFStore
2025-01-13T19:12:33.1001900Z             Any valid string path is acceptable. Only supports the local file system,
2025-01-13T19:12:33.1002010Z             remote URLs and file-like objects are not supported.
2025-01-13T19:12:33.1002060Z     
2025-01-13T19:12:33.1002170Z             If you want to pass in a path object, pandas accepts any
2025-01-13T19:12:33.1002230Z             ``os.PathLike``.
2025-01-13T19:12:33.1002270Z     
2025-01-13T19:12:33.1002420Z             Alternatively, pandas accepts an open :class:`pandas.HDFStore` object.
2025-01-13T19:12:33.1002470Z     
2025-01-13T19:12:33.1002530Z         key : object, optional
2025-01-13T19:12:33.1002650Z             The group identifier in the store. Can be omitted if the HDF file
2025-01-13T19:12:33.1002730Z             contains a single pandas object.
2025-01-13T19:12:33.1002790Z         mode : {'r', 'r+', 'a'}, default 'r'
2025-01-13T19:12:33.1003160Z             Mode to use when opening the file. Ignored if path_or_buf is a
2025-01-13T19:12:33.1003250Z             :class:`pandas.HDFStore`. Default is 'r'.
2025-01-13T19:12:33.1003320Z         errors : str, default 'strict'
2025-01-13T19:12:33.1003440Z             Specifies how encoding and decoding errors are to be handled.
2025-01-13T19:12:33.1003560Z             See the errors argument for :func:`open` for a full list
2025-01-13T19:12:33.1003610Z             of options.
2025-01-13T19:12:33.1003670Z         where : list, optional
2025-01-13T19:12:33.1003750Z             A list of Term (or convertible) objects.
2025-01-13T19:12:33.1003800Z         start : int, optional
2025-01-13T19:12:33.1003870Z             Row number to start selection.
2025-01-13T19:12:33.1003930Z         stop  : int, optional
2025-01-13T19:12:33.1004000Z             Row number to stop selection.
2025-01-13T19:12:33.1004050Z         columns : list, optional
2025-01-13T19:12:33.1004120Z             A list of columns names to return.
2025-01-13T19:12:33.1004180Z         iterator : bool, optional
2025-01-13T19:12:33.1004250Z             Return an iterator object.
2025-01-13T19:12:33.1004310Z         chunksize : int, optional
2025-01-13T19:12:33.1004430Z             Number of rows to include in an iteration when using an iterator.
2025-01-13T19:12:33.1004480Z         **kwargs
2025-01-13T19:12:33.1004580Z             Additional keyword arguments passed to HDFStore.
2025-01-13T19:12:33.1004630Z     
2025-01-13T19:12:33.1004670Z         Returns
2025-01-13T19:12:33.1004720Z         -------
2025-01-13T19:12:33.1004770Z         object
2025-01-13T19:12:33.1004890Z             The selected object. Return type depends on the object stored.
2025-01-13T19:12:33.1004930Z     
2025-01-13T19:12:33.1004980Z         See Also
2025-01-13T19:12:33.1005030Z         --------
2025-01-13T19:12:33.1005130Z         DataFrame.to_hdf : Write a HDF file from a DataFrame.
2025-01-13T19:12:33.1005210Z         HDFStore : Low-level access to HDF files.
2025-01-13T19:12:33.1005270Z     
2025-01-13T19:12:33.1005310Z         Examples
2025-01-13T19:12:33.1005360Z         --------
2025-01-13T19:12:33.1005490Z         >>> df = pd.DataFrame([[1, 1.0, 'a']], columns=['x', 'y', 'z'])  # doctest: +SKIP
2025-01-13T19:12:33.1005580Z         >>> df.to_hdf('./store.h5', 'data')  # doctest: +SKIP
2025-01-13T19:12:33.1005940Z         >>> reread = pd.read_hdf('./store.h5')  # doctest: +SKIP
2025-01-13T19:12:33.1005990Z         """
2025-01-13T19:12:33.1006050Z         if mode not in ["r", "r+", "a"]:
2025-01-13T19:12:33.1006110Z             raise ValueError(
2025-01-13T19:12:33.1006220Z                 f"mode {mode} is not allowed while performing a read. "
2025-01-13T19:12:33.1006290Z                 f"Allowed modes are r, r+ and a."
2025-01-13T19:12:33.1006340Z             )
2025-01-13T19:12:33.1006390Z         # grab the scope
2025-01-13T19:12:33.1006440Z         if where is not None:
2025-01-13T19:12:33.1006530Z             where = _ensure_term(where, scope_level=1)
2025-01-13T19:12:33.1006570Z     
2025-01-13T19:12:33.1006650Z         if isinstance(path_or_buf, HDFStore):
2025-01-13T19:12:33.1006710Z             if not path_or_buf.is_open:
2025-01-13T19:12:33.1006830Z                 raise OSError("The HDFStore must be open for reading.")
2025-01-13T19:12:33.1006890Z     
2025-01-13T19:12:33.1006960Z             store = path_or_buf
2025-01-13T19:12:33.1007020Z             auto_close = False
2025-01-13T19:12:33.1007070Z         else:
2025-01-13T19:12:33.1007150Z             path_or_buf = stringify_path(path_or_buf)
2025-01-13T19:12:33.1007220Z             if not isinstance(path_or_buf, str):
2025-01-13T19:12:33.1007300Z                 raise NotImplementedError(
2025-01-13T19:12:33.1007410Z                     "Support for generic buffers has not been implemented."
2025-01-13T19:12:33.1007460Z                 )
2025-01-13T19:12:33.1007500Z             try:
2025-01-13T19:12:33.1007580Z                 exists = os.path.exists(path_or_buf)
2025-01-13T19:12:33.1007850Z     
2025-01-13T19:12:33.1007920Z             # if filepath is too long
2025-01-13T19:12:33.1007990Z             except (TypeError, ValueError):
2025-01-13T19:12:33.1008040Z                 exists = False
2025-01-13T19:12:33.1008090Z     
2025-01-13T19:12:33.1008150Z             if not exists:
2025-01-13T19:12:33.1008300Z >               raise FileNotFoundError(f"File {path_or_buf} does not exist")
2025-01-13T19:12:33.1008710Z E               FileNotFoundError: File /Users/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_sobolev_line_opacity.h5 does not exist
2025-01-13T19:12:33.1008720Z 
2025-01-13T19:12:33.1008960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:424: FileNotFoundError
2025-01-13T19:12:33.1009100Z ---------------------------- Captured stdout setup -----------------------------
2025-01-13T19:12:33.1014160Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-13T19:12:33.1014530Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-13T19:12:33.1014670Z ---------------------------- Captured stderr setup -----------------------------
2025-01-13T19:12:33.1014670Z 
2025-01-13T19:12:33.1015330Z Iterations:████████████████████████████████████████████████████████████████                4/5 [00:09<00:02,  2.13s/it]
2025-01-13T19:12:33.1015350Z 
2025-01-13T19:12:33.1015530Z Packets:                                                                                   4030/? [00:09<00:00, 24279.50it/s][A
2025-01-13T19:12:33.1015660Z ------------------------------ Captured log setup ------------------------------
2025-01-13T19:12:33.1016060Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-13T19:12:33.1016190Z _________________________ test_calculate_beta_sobolevs _________________________
2025-01-13T19:12:33.1016200Z 
2025-01-13T19:12:33.1016380Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x3114e5fd0>
2025-01-13T19:12:33.1016580Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x31154eae0>
2025-01-13T19:12:33.1016590Z 
2025-01-13T19:12:33.1016900Z     def test_calculate_beta_sobolevs(nb_simulation_verysimple, regression_data):
2025-01-13T19:12:33.1016990Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-13T19:12:33.1017040Z     
2025-01-13T19:12:33.1017130Z         tau_sobolevs = calculate_sobolev_line_opacity(
2025-01-13T19:12:33.1017190Z             legacy_plasma.lines,
2025-01-13T19:12:33.1017270Z             legacy_plasma.level_number_density,
2025-01-13T19:12:33.1017340Z             legacy_plasma.time_explosion,
2025-01-13T19:12:33.1017420Z             legacy_plasma.stimulated_emission_factor,
2025-01-13T19:12:33.1017470Z         )
2025-01-13T19:12:33.1017550Z         actual = calculate_beta_sobolev(tau_sobolevs)
2025-01-13T19:12:33.1017650Z >       expected = regression_data.sync_ndarray(actual)
2025-01-13T19:12:33.1017650Z 
2025-01-13T19:12:33.1017740Z tardis/opacities/tests/test_tau_sobolev.py:35: 
2025-01-13T19:12:33.1017820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1017950Z tardis/tests/fixtures/regression_data.py:111: in sync_ndarray
2025-01-13T19:12:33.1018010Z     return np.load(self.fpath)
2025-01-13T19:12:33.1018100Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1018100Z 
2025-01-13T19:12:33.1018400Z file = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_beta_sobolevs.npy')
2025-01-13T19:12:33.1018560Z mmap_mode = None, allow_pickle = False, fix_imports = True, encoding = 'ASCII'
2025-01-13T19:12:33.1018570Z 
2025-01-13T19:12:33.1018630Z     @set_module('numpy')
2025-01-13T19:12:33.1018760Z     def load(file, mmap_mode=None, allow_pickle=False, fix_imports=True,
2025-01-13T19:12:33.1019000Z              encoding='ASCII', *, max_header_size=format._MAX_HEADER_SIZE):
2025-01-13T19:12:33.1019050Z         """
2025-01-13T19:12:33.1019190Z         Load arrays or pickled objects from ``.npy``, ``.npz`` or pickled files.
2025-01-13T19:12:33.1019230Z     
2025-01-13T19:12:33.1019400Z         .. warning:: Loading files that contain object arrays uses the ``pickle``
2025-01-13T19:12:33.1019530Z                      module, which is not secure against erroneous or maliciously
2025-01-13T19:12:33.1019650Z                      constructed data. Consider passing ``allow_pickle=False`` to
2025-01-13T19:12:33.1019770Z                      load data that is known not to contain object arrays for the
2025-01-13T19:12:33.1019840Z                      safer handling of untrusted sources.
2025-01-13T19:12:33.1019890Z     
2025-01-13T19:12:33.1019940Z         Parameters
2025-01-13T19:12:33.1019990Z         ----------
2025-01-13T19:12:33.1020080Z         file : file-like object, string, or pathlib.Path
2025-01-13T19:12:33.1020190Z             The file to read. File-like objects must support the
2025-01-13T19:12:33.1020280Z             ``seek()`` and ``read()`` methods and must always
2025-01-13T19:12:33.1020390Z             be opened in binary mode.  Pickled files require that the
2025-01-13T19:12:33.1020510Z             file-like object support the ``readline()`` method as well.
2025-01-13T19:12:33.1020610Z         mmap_mode : {None, 'r+', 'r', 'w+', 'c'}, optional
2025-01-13T19:12:33.1020920Z             If not None, then memory-map the file, using the given mode (see
2025-01-13T19:12:33.1021040Z             `numpy.memmap` for a detailed description of the modes).  A
2025-01-13T19:12:33.1021180Z             memory-mapped array is kept on disk. However, it can be accessed
2025-01-13T19:12:33.1021310Z             and sliced like any ndarray.  Memory mapping is especially useful
2025-01-13T19:12:33.1021440Z             for accessing small fragments of large files without reading the
2025-01-13T19:12:33.1021510Z             entire file into memory.
2025-01-13T19:12:33.1021580Z         allow_pickle : bool, optional
2025-01-13T19:12:33.1021710Z             Allow loading pickled object arrays stored in npy files. Reasons for
2025-01-13T19:12:33.1021850Z             disallowing pickles include security, as loading pickled data can
2025-01-13T19:12:33.1022060Z             execute arbitrary code. If pickles are disallowed, loading object
2025-01-13T19:12:33.1022130Z             arrays will fail. Default: False
2025-01-13T19:12:33.1022180Z     
2025-01-13T19:12:33.1022240Z             .. versionchanged:: 1.16.3
2025-01-13T19:12:33.1022340Z                 Made default False in response to CVE-2019-6446.
2025-01-13T19:12:33.1022390Z     
2025-01-13T19:12:33.1022450Z         fix_imports : bool, optional
2025-01-13T19:12:33.1022590Z             Only useful when loading Python 2 generated pickled files on Python 3,
2025-01-13T19:12:33.1022740Z             which includes npy/npz files containing object arrays. If `fix_imports`
2025-01-13T19:12:33.1022880Z             is True, pickle will try to map the old Python 2 names to the new names
2025-01-13T19:12:33.1022940Z             used in Python 3.
2025-01-13T19:12:33.1023000Z         encoding : str, optional
2025-01-13T19:12:33.1023130Z             What encoding to use when reading Python 2 strings. Only useful when
2025-01-13T19:12:33.1023270Z             loading Python 2 generated pickled files in Python 3, which includes
2025-01-13T19:12:33.1023410Z             npy/npz files containing object arrays. Values other than 'latin1',
2025-01-13T19:12:33.1023530Z             'ASCII', and 'bytes' are not allowed, as they can corrupt numerical
2025-01-13T19:12:33.1023590Z             data. Default: 'ASCII'
2025-01-13T19:12:33.1023660Z         max_header_size : int, optional
2025-01-13T19:12:33.1023790Z             Maximum allowed size of the header.  Large headers may not be safe
2025-01-13T19:12:33.1023930Z             to load securely and thus require explicitly passing a larger value.
2025-01-13T19:12:33.1024080Z             See :py:func:`ast.literal_eval()` for details.
2025-01-13T19:12:33.1024210Z             This option is ignored when `allow_pickle` is passed.  In that case
2025-01-13T19:12:33.1024330Z             the file is by definition trusted and the limit is unnecessary.
2025-01-13T19:12:33.1024380Z     
2025-01-13T19:12:33.1024420Z         Returns
2025-01-13T19:12:33.1024470Z         -------
2025-01-13T19:12:33.1024540Z         result : array, tuple, dict, etc.
2025-01-13T19:12:33.1024660Z             Data stored in the file. For ``.npz`` files, the returned instance
2025-01-13T19:12:33.1024790Z             of NpzFile class must be closed to avoid leaking file descriptors.
2025-01-13T19:12:33.1024840Z     
2025-01-13T19:12:33.1024880Z         Raises
2025-01-13T19:12:33.1024930Z         ------
2025-01-13T19:12:33.1024980Z         OSError
2025-01-13T19:12:33.1025070Z             If the input file does not exist or cannot be read.
2025-01-13T19:12:33.1025130Z         UnpicklingError
2025-01-13T19:12:33.1025250Z             If ``allow_pickle=True``, but the file cannot be loaded as a pickle.
2025-01-13T19:12:33.1025310Z         ValueError
2025-01-13T19:12:33.1025440Z             The file contains an object array, but ``allow_pickle=False`` given.
2025-01-13T19:12:33.1025490Z         EOFError
2025-01-13T19:12:33.1025610Z             When calling ``np.load`` multiple times on the same file handle,
2025-01-13T19:12:33.1025680Z             if all data has already been read
2025-01-13T19:12:33.1025720Z     
2025-01-13T19:12:33.1025770Z         See Also
2025-01-13T19:12:33.1025820Z         --------
2025-01-13T19:12:33.1025890Z         save, savez, savez_compressed, loadtxt
2025-01-13T19:12:33.1026020Z         memmap : Create a memory-map to an array stored in a file on disk.
2025-01-13T19:12:33.1026150Z         lib.format.open_memmap : Create or load a memory-mapped ``.npy`` file.
2025-01-13T19:12:33.1026240Z     
2025-01-13T19:12:33.1026280Z         Notes
2025-01-13T19:12:33.1026340Z         -----
2025-01-13T19:12:33.1026480Z         - If the file contains pickle data, then whatever object is stored
2025-01-13T19:12:33.1026550Z           in the pickle is returned.
2025-01-13T19:12:33.1026660Z         - If the file is a ``.npy`` file, then a single array is returned.
2025-01-13T19:12:33.1026830Z         - If the file is a ``.npz`` file, then a dictionary-like object is
2025-01-13T19:12:33.1026960Z           returned, containing ``{filename: array}`` key-value pairs, one for
2025-01-13T19:12:33.1027020Z           each file in the archive.
2025-01-13T19:12:33.1027140Z         - If the file is a ``.npz`` file, the returned value supports the
2025-01-13T19:12:33.1027280Z           context manager protocol in a similar fashion to the open function::
2025-01-13T19:12:33.1027330Z     
2025-01-13T19:12:33.1027390Z             with load('foo.npz') as data:
2025-01-13T19:12:33.1027450Z                 a = data['a']
2025-01-13T19:12:33.1027490Z     
2025-01-13T19:12:33.1027620Z           The underlying file descriptor is closed when exiting the 'with'
2025-01-13T19:12:33.1027670Z           block.
2025-01-13T19:12:33.1027720Z     
2025-01-13T19:12:33.1027770Z         Examples
2025-01-13T19:12:33.1027810Z         --------
2025-01-13T19:12:33.1027880Z         Store data to disk, and load it again:
2025-01-13T19:12:33.1027940Z     
2025-01-13T19:12:33.1028030Z         >>> np.save('/tmp/123', np.array([[1, 2, 3], [4, 5, 6]]))
2025-01-13T19:12:33.1028100Z         >>> np.load('/tmp/123.npy')
2025-01-13T19:12:33.1028150Z         array([[1, 2, 3],
2025-01-13T19:12:33.1028200Z                [4, 5, 6]])
2025-01-13T19:12:33.1028240Z     
2025-01-13T19:12:33.1039440Z         Store compressed data to disk, and load it again:
2025-01-13T19:12:33.1039610Z     
2025-01-13T19:12:33.1039680Z         >>> a=np.array([[1, 2, 3], [4, 5, 6]])
2025-01-13T19:12:33.1039780Z         >>> b=np.array([1, 2])
2025-01-13T19:12:33.1039850Z         >>> np.savez('/tmp/123.npz', a=a, b=b)
2025-01-13T19:12:33.1039940Z         >>> data = np.load('/tmp/123.npz')
2025-01-13T19:12:33.1040300Z         >>> data['a']
2025-01-13T19:12:33.1040390Z         array([[1, 2, 3],
2025-01-13T19:12:33.1040440Z                [4, 5, 6]])
2025-01-13T19:12:33.1040490Z         >>> data['b']
2025-01-13T19:12:33.1040540Z         array([1, 2])
2025-01-13T19:12:33.1040600Z         >>> data.close()
2025-01-13T19:12:33.1040640Z     
2025-01-13T19:12:33.1040750Z         Mem-map the stored array, and then access the second row
2025-01-13T19:12:33.1040810Z         directly from disk:
2025-01-13T19:12:33.1040880Z     
2025-01-13T19:12:33.1040960Z         >>> X = np.load('/tmp/123.npy', mmap_mode='r')
2025-01-13T19:12:33.1041050Z         >>> X[1, :]
2025-01-13T19:12:33.1041100Z         memmap([4, 5, 6])
2025-01-13T19:12:33.1041150Z     
2025-01-13T19:12:33.1041190Z         """
2025-01-13T19:12:33.1041290Z         if encoding not in ('ASCII', 'latin1', 'bytes'):
2025-01-13T19:12:33.1041400Z             # The 'encoding' value for pickle also affects what encoding
2025-01-13T19:12:33.1041520Z             # the serialized binary data of NumPy arrays is loaded
2025-01-13T19:12:33.1041630Z             # in. Pickle does not pass on the encoding information to
2025-01-13T19:12:33.1041740Z             # NumPy. The unpickling code in numpy.core.multiarray is
2025-01-13T19:12:33.1041860Z             # written to assume that unicode data appearing where binary
2025-01-13T19:12:33.1041980Z             # should be is in 'latin1'. 'bytes' is also safe, as is 'ASCII'.
2025-01-13T19:12:33.1042020Z             #
2025-01-13T19:12:33.1042130Z             # Other encoding values can corrupt binary data, and we
2025-01-13T19:12:33.1042250Z             # purposefully disallow them. For the same reason, the errors=
2025-01-13T19:12:33.1042360Z             # argument is not exposed, as values other than 'strict'
2025-01-13T19:12:33.1042460Z             # result can similarly silently corrupt numerical data.
2025-01-13T19:12:33.1042600Z             raise ValueError("encoding must be 'ASCII', 'latin1', or 'bytes'")
2025-01-13T19:12:33.1042650Z     
2025-01-13T19:12:33.1042770Z         pickle_kwargs = dict(encoding=encoding, fix_imports=fix_imports)
2025-01-13T19:12:33.1042820Z     
2025-01-13T19:12:33.1042890Z         with contextlib.ExitStack() as stack:
2025-01-13T19:12:33.1042960Z             if hasattr(file, 'read'):
2025-01-13T19:12:33.1043600Z                 fid = file
2025-01-13T19:12:33.1043660Z                 own_fid = False
2025-01-13T19:12:33.1043710Z             else:
2025-01-13T19:12:33.1043820Z >               fid = stack.enter_context(open(os_fspath(file), "rb"))
2025-01-13T19:12:33.1044220Z E               FileNotFoundError: [Errno 2] No such file or directory: '/Users/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_beta_sobolevs.npy'
2025-01-13T19:12:33.1044230Z 
2025-01-13T19:12:33.1044450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/numpy/lib/npyio.py:427: FileNotFoundError
2025-01-13T19:12:33.1044710Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-downbranch] ___
2025-01-13T19:12:33.1044720Z 
2025-01-13T19:12:33.1044970Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x143b39b20>
2025-01-13T19:12:33.1045120Z simulation = <tardis.simulation.base.Simulation object at 0x154d3f020>
2025-01-13T19:12:33.1045280Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-downbranch]>>
2025-01-13T19:12:33.1045290Z 
2025-01-13T19:12:33.1045400Z     def test_spectrum_integrated(self, simulation, request):
2025-01-13T19:12:33.1045480Z         regression_data = RegressionData(request)
2025-01-13T19:12:33.1045630Z >       luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-13T19:12:33.1045630Z 
2025-01-13T19:12:33.1045740Z tardis/tests/test_tardis_full_formal_integral.py:96: 
2025-01-13T19:12:33.1045830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1045920Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.1046280Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.1046430Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.1046600Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.1046720Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.1046790Z     res = self.make_source_function()
2025-01-13T19:12:33.1046880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1046880Z 
2025-01-13T19:12:33.1047050Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x15ba3a480>
2025-01-13T19:12:33.1047050Z 
2025-01-13T19:12:33.1047120Z     def make_source_function(self):
2025-01-13T19:12:33.1047180Z         """
2025-01-13T19:12:33.1047390Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.1047450Z     
2025-01-13T19:12:33.1047660Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.1047780Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.1047830Z     
2025-01-13T19:12:33.1047900Z         Parameters
2025-01-13T19:12:33.1047960Z         ----------
2025-01-13T19:12:33.1048030Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.1048080Z     
2025-01-13T19:12:33.1048120Z         Returns
2025-01-13T19:12:33.1048170Z         -------
2025-01-13T19:12:33.1048350Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.1048410Z         """
2025-01-13T19:12:33.1048450Z     
2025-01-13T19:12:33.1048530Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.1048590Z         # slice for the active shells
2025-01-13T19:12:33.1048650Z         local_slice = slice(
2025-01-13T19:12:33.1048740Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.1048860Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.1048920Z         )
2025-01-13T19:12:33.1048960Z     
2025-01-13T19:12:33.1049030Z         transport = self.transport
2025-01-13T19:12:33.1049140Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.1049300Z         transition_probabilities = (
2025-01-13T19:12:33.1049440Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.1049500Z         )
2025-01-13T19:12:33.1049680Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.1049680Z 
2025-01-13T19:12:33.1049780Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.1049960Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-macroatom] ___
2025-01-13T19:12:33.1049970Z 
2025-01-13T19:12:33.1050220Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x143b3a300>
2025-01-13T19:12:33.1050370Z simulation = <tardis.simulation.base.Simulation object at 0x16554d3d0>
2025-01-13T19:12:33.1050540Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-macroatom]>>
2025-01-13T19:12:33.1050540Z 
2025-01-13T19:12:33.1050650Z     def test_spectrum_integrated(self, simulation, request):
2025-01-13T19:12:33.1050830Z         regression_data = RegressionData(request)
2025-01-13T19:12:33.1050990Z >       luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-13T19:12:33.1050990Z 
2025-01-13T19:12:33.1051090Z tardis/tests/test_tardis_full_formal_integral.py:96: 
2025-01-13T19:12:33.1051180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1051280Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.1051420Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.1051540Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.1051770Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.1051880Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.1051940Z     res = self.make_source_function()
2025-01-13T19:12:33.1052040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1052040Z 
2025-01-13T19:12:33.1052200Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x313c50770>
2025-01-13T19:12:33.1052200Z 
2025-01-13T19:12:33.1052270Z     def make_source_function(self):
2025-01-13T19:12:33.1052320Z         """
2025-01-13T19:12:33.1052510Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.1052560Z     
2025-01-13T19:12:33.1052760Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.1052880Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.1052930Z     
2025-01-13T19:12:33.1052980Z         Parameters
2025-01-13T19:12:33.1053020Z         ----------
2025-01-13T19:12:33.1053100Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.1053140Z     
2025-01-13T19:12:33.1053190Z         Returns
2025-01-13T19:12:33.1053240Z         -------
2025-01-13T19:12:33.1053430Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.1053490Z         """
2025-01-13T19:12:33.1053540Z     
2025-01-13T19:12:33.1053610Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.1053670Z         # slice for the active shells
2025-01-13T19:12:33.1053730Z         local_slice = slice(
2025-01-13T19:12:33.1053830Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.1053920Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.1053970Z         )
2025-01-13T19:12:33.1054020Z     
2025-01-13T19:12:33.1054100Z         transport = self.transport
2025-01-13T19:12:33.1054220Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.1054300Z         transition_probabilities = (
2025-01-13T19:12:33.1054450Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.1054620Z         )
2025-01-13T19:12:33.1054790Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.1054790Z 
2025-01-13T19:12:33.1054900Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.1055080Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-macroatom] ___
2025-01-13T19:12:33.1055080Z 
2025-01-13T19:12:33.1055330Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x143b3a510>
2025-01-13T19:12:33.1055480Z simulation = <tardis.simulation.base.Simulation object at 0x313c53920>
2025-01-13T19:12:33.1055640Z request = <FixtureRequest for <Function test_spectrum_integrated[30-macroatom]>>
2025-01-13T19:12:33.1055650Z 
2025-01-13T19:12:33.1055750Z     def test_spectrum_integrated(self, simulation, request):
2025-01-13T19:12:33.1055830Z         regression_data = RegressionData(request)
2025-01-13T19:12:33.1055990Z >       luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-13T19:12:33.1055990Z 
2025-01-13T19:12:33.1056090Z tardis/tests/test_tardis_full_formal_integral.py:96: 
2025-01-13T19:12:33.1056180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1056280Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.1056420Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.1056550Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.1056700Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.1056890Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.1056960Z     res = self.make_source_function()
2025-01-13T19:12:33.1057050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1057050Z 
2025-01-13T19:12:33.1057220Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x177ae8da0>
2025-01-13T19:12:33.1057230Z 
2025-01-13T19:12:33.1057290Z     def make_source_function(self):
2025-01-13T19:12:33.1057340Z         """
2025-01-13T19:12:33.1057530Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.1057570Z     
2025-01-13T19:12:33.1057770Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.1057890Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.1057940Z     
2025-01-13T19:12:33.1057990Z         Parameters
2025-01-13T19:12:33.1058040Z         ----------
2025-01-13T19:12:33.1058120Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.1058160Z     
2025-01-13T19:12:33.1058210Z         Returns
2025-01-13T19:12:33.1058260Z         -------
2025-01-13T19:12:33.1058440Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.1058490Z         """
2025-01-13T19:12:33.1058530Z     
2025-01-13T19:12:33.1058610Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.1058670Z         # slice for the active shells
2025-01-13T19:12:33.1058730Z         local_slice = slice(
2025-01-13T19:12:33.1058830Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.1058930Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.1058980Z         )
2025-01-13T19:12:33.1059020Z     
2025-01-13T19:12:33.1059090Z         transport = self.transport
2025-01-13T19:12:33.1059190Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.1059260Z         transition_probabilities = (
2025-01-13T19:12:33.1059400Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.1059450Z         )
2025-01-13T19:12:33.1059610Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.1059680Z 
2025-01-13T19:12:33.1059790Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.1059970Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-downbranch] ___
2025-01-13T19:12:33.1059970Z 
2025-01-13T19:12:33.1060220Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x143b3a450>
2025-01-13T19:12:33.1060370Z simulation = <tardis.simulation.base.Simulation object at 0x154b05a00>
2025-01-13T19:12:33.1060530Z request = <FixtureRequest for <Function test_spectrum_integrated[30-downbranch]>>
2025-01-13T19:12:33.1060530Z 
2025-01-13T19:12:33.1060650Z     def test_spectrum_integrated(self, simulation, request):
2025-01-13T19:12:33.1060730Z         regression_data = RegressionData(request)
2025-01-13T19:12:33.1060880Z >       luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-13T19:12:33.1060880Z 
2025-01-13T19:12:33.1060980Z tardis/tests/test_tardis_full_formal_integral.py:96: 
2025-01-13T19:12:33.1061070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1061160Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:12:33.1061300Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:12:33.1061420Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:12:33.1061550Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:12:33.1061670Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:12:33.1061730Z     res = self.make_source_function()
2025-01-13T19:12:33.1061870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:12:33.1061870Z 
2025-01-13T19:12:33.1062030Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x1662c6120>
2025-01-13T19:12:33.1062030Z 
2025-01-13T19:12:33.1062100Z     def make_source_function(self):
2025-01-13T19:12:33.1062150Z         """
2025-01-13T19:12:33.1062340Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:12:33.1062390Z     
2025-01-13T19:12:33.1062590Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:12:33.1062710Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:12:33.1062760Z     
2025-01-13T19:12:33.1062800Z         Parameters
2025-01-13T19:12:33.1062850Z         ----------
2025-01-13T19:12:33.1062940Z         model : tardis.model.SimulationState
2025-01-13T19:12:33.1063000Z     
2025-01-13T19:12:33.1063050Z         Returns
2025-01-13T19:12:33.1063090Z         -------
2025-01-13T19:12:33.1063280Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:12:33.1063330Z         """
2025-01-13T19:12:33.1063370Z     
2025-01-13T19:12:33.1063450Z         simulation_state = self.simulation_state
2025-01-13T19:12:33.1063520Z         # slice for the active shells
2025-01-13T19:12:33.1063570Z         local_slice = slice(
2025-01-13T19:12:33.1063670Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:12:33.1063770Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:12:33.1063810Z         )
2025-01-13T19:12:33.1063850Z     
2025-01-13T19:12:33.1063910Z         transport = self.transport
2025-01-13T19:12:33.1064020Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:12:33.1064080Z         transition_probabilities = (
2025-01-13T19:12:33.1064260Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:12:33.1064310Z         )
2025-01-13T19:12:33.1064480Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.1064490Z 
2025-01-13T19:12:33.1064590Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:12:33.1065090Z =============================== warnings summary ===============================
2025-01-13T19:12:33.1065180Z tardis/io/configuration/config_validator.py:6
2025-01-13T19:12:33.1065270Z tardis/io/configuration/config_validator.py:6
2025-01-13T19:12:33.1065520Z   /Users/runner/work/tardis/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
2025-01-13T19:12:33.1065620Z   
2025-01-13T19:12:33.1066560Z   jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
2025-01-13T19:12:33.1066570Z 
2025-01-13T19:12:33.1066760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22
2025-01-13T19:12:33.1067050Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
2025-01-13T19:12:33.1067100Z   
2025-01-13T19:12:33.1067210Z   Jupyter is migrating its paths to use standard platformdirs
2025-01-13T19:12:33.1067330Z   given by the platformdirs library.  To remove this warning and
2025-01-13T19:12:33.1067460Z   see the appropriate new directories, set the environment variable
2025-01-13T19:12:33.1067570Z   `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
2025-01-13T19:12:33.1067690Z   The use of platformdirs will be the default in `jupyter_core` v6
2025-01-13T19:12:33.1067690Z 
2025-01-13T19:12:33.1067870Z tardis/io/tests/test_HDFWriter.py::test_multi_index_write
2025-01-13T19:12:33.1068510Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:12:33.1068680Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:276: PerformanceWarning:
2025-01-13T19:12:33.1068730Z   
2025-01-13T19:12:33.1068780Z   
2025-01-13T19:12:33.1068950Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-13T19:12:33.1069150Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-13T19:12:33.1069160Z 
2025-01-13T19:12:33.1069310Z tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
2025-01-13T19:12:33.1069470Z tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
2025-01-13T19:12:33.1069660Z tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
2025-01-13T19:12:33.1069800Z tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
2025-01-13T19:12:33.1070060Z   /Users/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
2025-01-13T19:12:33.1070100Z   
2025-01-13T19:12:33.1070190Z   The current CMFGEN model parser is deprecated
2025-01-13T19:12:33.1070190Z 
2025-01-13T19:12:33.1070280Z tardis/io/tests/test_model_reader.py: 1 warning
2025-01-13T19:12:33.1070410Z tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
2025-01-13T19:12:33.1070710Z   /Users/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
2025-01-13T19:12:33.1070760Z   
2025-01-13T19:12:33.1070850Z   The current CMFGEN model parser is deprecated
2025-01-13T19:12:33.1070850Z 
2025-01-13T19:12:33.1071010Z tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
2025-01-13T19:12:33.1071310Z   /Users/runner/work/tardis/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
2025-01-13T19:12:33.1071350Z   
2025-01-13T19:12:33.1071770Z   [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m
2025-01-13T19:12:33.1071780Z 
2025-01-13T19:12:33.1071860Z tardis/model/tests/test_base.py: 6 warnings
2025-01-13T19:12:33.1071950Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-13T19:12:33.1072090Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-13T19:12:33.1072480Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
2025-01-13T19:12:33.1072520Z   
2025-01-13T19:12:33.1072600Z   v_inner_boundary < 0, assuming default value
2025-01-13T19:12:33.1072600Z 
2025-01-13T19:12:33.1072680Z tardis/model/tests/test_base.py: 6 warnings
2025-01-13T19:12:33.1072770Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-13T19:12:33.1072900Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-13T19:12:33.1073110Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
2025-01-13T19:12:33.1073160Z   
2025-01-13T19:12:33.1073240Z   v_outer_boundary < 0, assuming default value
2025-01-13T19:12:33.1073240Z 
2025-01-13T19:12:33.1073600Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
2025-01-13T19:12:33.1073850Z   /Users/runner/work/tardis/tardis/tardis/plasma/equilibrium/level_populations.py:65: FutureWarning:
2025-01-13T19:12:33.1073900Z   
2025-01-13T19:12:33.1074130Z   A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
2025-01-13T19:12:33.1074480Z   The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.
2025-01-13T19:12:33.1074530Z   
2025-01-13T19:12:33.1074950Z   For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.
2025-01-13T19:12:33.1075030Z 
2025-01-13T19:12:33.1075140Z tardis/plasma/tests/test_complete_plasmas.py: 20 warnings
2025-01-13T19:12:33.1075370Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:12:33.1075420Z   
2025-01-13T19:12:33.1075490Z   Property "atomic_mass" not found
2025-01-13T19:12:33.1075490Z 
2025-01-13T19:12:33.1075850Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
2025-01-13T19:12:33.1076170Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
2025-01-13T19:12:33.1076390Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:12:33.1076440Z   
2025-01-13T19:12:33.1076510Z   Property "j_blues_norm_factor" not found
2025-01-13T19:12:33.1076510Z 
2025-01-13T19:12:33.1076840Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
2025-01-13T19:12:33.1077170Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
2025-01-13T19:12:33.1077400Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:12:33.1077460Z   
2025-01-13T19:12:33.1077520Z   Property "j_blue_estimator" not found
2025-01-13T19:12:33.1077520Z 
2025-01-13T19:12:33.1077830Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
2025-01-13T19:12:33.1078090Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
2025-01-13T19:12:33.1078320Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:12:33.1078370Z   
2025-01-13T19:12:33.1078430Z   Property "volume" not found
2025-01-13T19:12:33.1078440Z 
2025-01-13T19:12:33.1078740Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
2025-01-13T19:12:33.1079010Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
2025-01-13T19:12:33.1079310Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:12:33.1079360Z   
2025-01-13T19:12:33.1079420Z   Property "r_inner" not found
2025-01-13T19:12:33.1079420Z 
2025-01-13T19:12:33.1079590Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
2025-01-13T19:12:33.1079750Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
2025-01-13T19:12:33.1079920Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
2025-01-13T19:12:33.1080100Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
2025-01-13T19:12:33.1080160Z   
2025-01-13T19:12:33.1080310Z   Requesting inner boundary below inner shell. Extrapolating the inner cell
2025-01-13T19:12:33.1080310Z 
2025-01-13T19:12:33.1080480Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-13T19:12:33.1080640Z   /Users/runner/work/tardis/tardis/tardis/spectrum/base.py:70: UserWarning:
2025-01-13T19:12:33.1080690Z   
2025-01-13T19:12:33.1080940Z   SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0
2025-01-13T19:12:33.1080950Z 
2025-01-13T19:12:33.1081120Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-13T19:12:33.1081290Z   /Users/runner/work/tardis/tardis/tardis/spectrum/base.py:111: UserWarning:
2025-01-13T19:12:33.1081330Z   
2025-01-13T19:12:33.1081620Z   SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.
2025-01-13T19:12:33.1081680Z 
2025-01-13T19:12:33.1081850Z tardis/transport/montecarlo/tests/test_vpacket.py::test_trace_vpacket_volley
2025-01-13T19:12:33.1081940Z   <string>:3: NumbaPendingDeprecationWarning:
2025-01-13T19:12:33.1081990Z   
2025-01-13T19:12:33.1082800Z   [1m[1mCode using Numba extension API maybe depending on 'old_style' error-capturing, which is deprecated and will be replaced by 'new_style' in a future release. See details at https://numba.readthedocs.io/en/latest/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors
2025-01-13T19:12:33.1082860Z   Exception origin:
2025-01-13T19:12:33.1083070Z     File "/Users/runner/micromamba/envs/tardis/lib/python3.12/inspect.py", line 3180, in _bind
2025-01-13T19:12:33.1083130Z       raise TypeError(msg) from None
2025-01-13T19:12:33.1083190Z   [0m[0m
2025-01-13T19:12:33.1083190Z 
2025-01-13T19:12:33.1083460Z tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
2025-01-13T19:12:33.1083690Z   /Users/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
2025-01-13T19:12:33.1083740Z   
2025-01-13T19:12:33.1084420Z   More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
2025-01-13T19:12:33.1084430Z 
2025-01-13T19:12:33.1084720Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1084990Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1085260Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1085540Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1085810Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1086080Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1086450Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-13T19:12:33.1086500Z   
2025-01-13T19:12:33.1086650Z   Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
2025-01-13T19:12:33.1086790Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-13T19:12:33.1086990Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-13T19:12:33.1086990Z 
2025-01-13T19:12:33.1087260Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1087540Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1087820Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-13T19:12:33.1087870Z   
2025-01-13T19:12:33.1088010Z   Passing unrecognized arguments to super(FloatText).__init__(min=0).
2025-01-13T19:12:33.1088140Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-13T19:12:33.1088340Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-13T19:12:33.1088350Z 
2025-01-13T19:12:33.1088620Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:12:33.1088900Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-13T19:12:33.1088990Z   
2025-01-13T19:12:33.1089130Z   Passing unrecognized arguments to super(HTML).__init__(indent=True).
2025-01-13T19:12:33.1089270Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-13T19:12:33.1089460Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-13T19:12:33.1089470Z 
2025-01-13T19:12:33.1089800Z tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
2025-01-13T19:12:33.1090060Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/qgridnext/grid.py:825: DeprecationWarning:
2025-01-13T19:12:33.1090110Z   
2025-01-13T19:12:33.1090350Z   QgridWidget._grid_options_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.
2025-01-13T19:12:33.1090360Z 
2025-01-13T19:12:33.1090570Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:12:33.1090770Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:12:33.1091070Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:289: PerformanceWarning:
2025-01-13T19:12:33.1091120Z   
2025-01-13T19:12:33.1091170Z   
2025-01-13T19:12:33.1091330Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-13T19:12:33.1091530Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-13T19:12:33.1091540Z 
2025-01-13T19:12:33.1091740Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:12:33.1091900Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:292: PerformanceWarning:
2025-01-13T19:12:33.1091950Z   
2025-01-13T19:12:33.1091990Z   
2025-01-13T19:12:33.1092150Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-13T19:12:33.1092290Z   map directly to c-types [inferred_type->mixed,key->values] [items->None]
2025-01-13T19:12:33.1092290Z 
2025-01-13T19:12:33.1092500Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:12:33.1092690Z   /Users/runner/work/tardis/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
2025-01-13T19:12:33.1093040Z   
2025-01-13T19:12:33.1093190Z   The number of interpolate_shells was not specified. The value was set to 80.
2025-01-13T19:12:33.1093200Z 
2025-01-13T19:12:33.1093370Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-01-13T19:12:33.1093370Z 
2025-01-13T19:12:33.1093500Z ---------- coverage: platform darwin, python 3.12.4-final-0 ----------
2025-01-13T19:12:33.1093590Z Coverage HTML written to dir coverage_html_report
2025-01-13T19:12:33.1093660Z Coverage XML written to file coverage.xml
2025-01-13T19:12:33.1093670Z 
2025-01-13T19:12:33.1093760Z =========================== short test summary info ============================
2025-01-13T19:12:33.1094370Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_sobolev_line_opacity - FileNotFoundError: File /Users/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_sobolev_line_opacity.h5 does not exist
2025-01-13T19:12:33.1094970Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_beta_sobolevs - FileNotFoundError: [Errno 2] No such file or directory: '/Users/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_beta_sobolevs.npy'
2025-01-13T19:12:33.1095480Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-downbranch] - AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.1095980Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-macroatom] - AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.1097020Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-macroatom] - AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.1097530Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-downbranch] - AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:12:33.1097890Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.1098250Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_element_count_data[1] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.1098630Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_element_count_data[20] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.1098990Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_ion_count_data[12-1] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.1099350Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_ion_count_data[20-20] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.1099740Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_level_count_data[2-12-1] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.1100120Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_level_count_data[3-20-20] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:12:33.1100360Z = 6 failed, 1425 passed, 329 skipped, 2 deselected, 19 xfailed, 8 xpassed, 92 warnings, 7 errors in 486.62s (0:08:06) =
2025-01-13T19:12:34.8305090Z ##[error]Process completed with exit code 1.
