2025-01-13T19:03:44.9853023Z ##[group]Run pytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"
2025-01-13T19:03:44.9854597Z [36;1mpytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"[0m
2025-01-13T19:03:44.9881610Z shell: /usr/bin/bash -l {0}
2025-01-13T19:03:44.9881861Z env:
2025-01-13T19:03:44.9882035Z   CACHE_NUMBER: 0
2025-01-13T19:03:44.9882670Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-13T19:03:44.9883325Z   CODECOV_TOKEN: 
2025-01-13T19:03:44.9883543Z   MAMBA_ROOT_PREFIX: /home/runner/micromamba
2025-01-13T19:03:44.9883852Z   MAMBA_EXE: /home/runner/micromamba-bin/micromamba
2025-01-13T19:03:44.9884208Z   CONDARC: /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-13T19:03:44.9884755Z ##[endgroup]
2025-01-13T19:03:53.7771352Z ============================= test session starts ==============================
2025-01-13T19:03:53.7772132Z platform linux -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
2025-01-13T19:03:53.7772775Z rootdir: /home/runner/work/tardis/tardis
2025-01-13T19:03:53.7773306Z configfile: pyproject.toml
2025-01-13T19:03:53.7773895Z plugins: anyio-4.4.0, doctestplus-1.2.1, cov-5.0.0, html-4.1.1, metadata-3.1.1
2025-01-13T19:03:53.7774860Z collected 1796 items / 2 deselected / 1794 selected
2025-01-13T19:03:53.7775237Z 
2025-01-13T19:03:58.6582551Z tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
2025-01-13T19:04:01.7228226Z tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
2025-01-13T19:04:03.2756064Z tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
2025-01-13T19:04:05.0029766Z tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
2025-01-13T19:04:05.0121140Z tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
2025-01-13T19:04:06.2744061Z tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
2025-01-13T19:04:06.6124154Z tardis/grid/tests/test_grid.py .                                         [  2%]
2025-01-13T19:04:06.6140240Z tardis/gui/tests/test_gui.py s                                           [  2%]
2025-01-13T19:04:10.1035759Z tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
2025-01-13T19:04:10.1161545Z tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
2025-01-13T19:04:10.1431141Z tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
2025-01-13T19:04:47.4621912Z tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
2025-01-13T19:04:47.4766790Z tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
2025-01-13T19:04:47.4869724Z tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
2025-01-13T19:04:47.5169232Z tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
2025-01-13T19:04:47.5371864Z tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
2025-01-13T19:04:47.8352268Z tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
2025-01-13T19:04:48.1460019Z tardis/io/tests/test_atomic.py .....                                     [  7%]
2025-01-13T19:04:48.1654000Z tardis/io/tests/test_decay.py ..                                         [  7%]
2025-01-13T19:04:48.3635465Z tardis/io/tests/test_model_reader.py ......                              [  7%]
2025-01-13T19:04:48.3703013Z tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
2025-01-13T19:05:45.2713308Z tardis/model/tests/test_base.py ........................................ [ 10%]
2025-01-13T19:05:46.2775740Z ............                                                             [ 10%]
2025-01-13T19:05:49.3283876Z tardis/model/tests/test_csvy_model.py .........                          [ 11%]
2025-01-13T19:05:49.3760344Z tardis/model/tests/test_density.py ..                                    [ 11%]
2025-01-13T19:05:50.6534962Z tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
2025-01-13T19:05:51.9933402Z tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
2025-01-13T19:05:53.6757703Z tardis/opacities/tests/test_tau_sobolev.py FF                            [ 12%]
2025-01-13T19:05:56.6776687Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py ...      [ 12%]
2025-01-13T19:06:42.9050619Z tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
2025-01-13T19:06:54.2396141Z tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
2025-01-13T19:06:55.6499876Z tardis/plasma/tests/test_complete_plasmas.py .....................s..... [ 13%]
2025-01-13T19:06:58.5501584Z s....ssssss............s............ss.....s....ssssss............s..... [ 18%]
2025-01-13T19:07:00.2555296Z .......ss.....s....ssssss............s............ss.....s....ssssss.... [ 22%]
2025-01-13T19:07:03.1436366Z ........s............ss.....s........ss............s............ss.....s [ 26%]
2025-01-13T19:07:06.0096118Z ........ss............s............ss.....s....ssssss............s...... [ 30%]
2025-01-13T19:07:06.7511411Z ......ss.....s....ssssss............s............ss.....s.ss.ssssss..... [ 34%]
2025-01-13T19:07:09.6177593Z .......s............ss.....s....ssssss............s............ss.....s. [ 38%]
2025-01-13T19:07:12.7975896Z ...ssssss............s............ss.....s....ssssss............s....... [ 42%]
2025-01-13T19:07:15.8618471Z .....ss.....s....ssssss............s............s...........ssssss...... [ 46%]
2025-01-13T19:07:17.6620819Z ......s............s...........ssssss............s............s......... [ 50%]
2025-01-13T19:07:20.5400474Z ..ssssss............s............ss.....s....ssssss............s........ [ 54%]
2025-01-13T19:07:24.0071873Z ....ss.....s....ssssss..........................s.....s....ssss......... [ 58%]
2025-01-13T19:07:24.3355236Z ...................s.....s....ssss.......                                [ 60%]
2025-01-13T19:07:24.4474171Z tardis/plasma/tests/test_hdf_plasma.py ................................. [ 62%]
2025-01-13T19:07:24.4590618Z ......                                                                   [ 62%]
2025-01-13T19:07:24.5898322Z tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
2025-01-13T19:09:41.0012916Z tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
2025-01-13T19:09:41.0038890Z tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
2025-01-13T19:10:04.3628755Z tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
2025-01-13T19:10:17.3858637Z tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
2025-01-13T19:10:18.1333047Z tardis/simulation/tests/test_convergence.py .....                        [ 64%]
2025-01-13T19:10:26.7113747Z tardis/simulation/tests/test_simulation.py .............                 [ 65%]
2025-01-13T19:10:26.7308194Z tardis/spectrum/tests/test_cuda_formal_integral.py sssssssssssssssssssss [ 66%]
2025-01-13T19:10:27.2084801Z ssss...ssssssssssssssssssssss                                            [ 67%]
2025-01-13T19:10:27.2155983Z tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
2025-01-13T19:10:28.7942120Z tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
2025-01-13T19:10:28.8132314Z ..........                                                               [ 69%]
2025-01-13T19:10:28.9898393Z tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
2025-01-13T19:10:29.0225362Z .........                                                                [ 72%]
2025-01-13T19:10:48.3230755Z tardis/spectrum/tests/test_spectrum_solver.py ....                       [ 72%]
2025-01-13T19:11:50.0878758Z tardis/tests/test_tardis_full.py ....                                    [ 72%]
2025-01-13T19:12:31.1321935Z tardis/tests/test_tardis_full_formal_integral.py ...F...F...F...F        [ 73%]
2025-01-13T19:12:31.2098987Z tardis/tests/test_util.py .............................................  [ 75%]
2025-01-13T19:12:33.8893084Z tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
2025-01-13T19:12:41.5358717Z tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
2025-01-13T19:12:41.7501099Z tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
2025-01-13T19:12:41.7677838Z tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
2025-01-13T19:12:41.8099674Z sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
2025-01-13T19:12:50.6439359Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py x..       [ 81%]
2025-01-13T19:12:50.6507696Z tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
2025-01-13T19:12:56.8933418Z tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
2025-01-13T19:12:57.3955555Z tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
2025-01-13T19:12:58.4264765Z tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
2025-01-13T19:12:58.5643241Z XX.........                                                              [ 84%]
2025-01-13T19:12:58.5918812Z tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
2025-01-13T19:12:58.8938998Z tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
2025-01-13T19:12:59.3368918Z .....                                                                    [ 85%]
2025-01-13T19:13:34.3168744Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py ......         [ 85%]
2025-01-13T19:13:34.3508537Z tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
2025-01-13T19:13:34.3540137Z tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
2025-01-13T19:13:36.7666067Z tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
2025-01-13T19:13:36.7838579Z tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
2025-01-13T19:13:40.1683805Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py . [ 86%]
2025-01-13T19:13:40.1685019Z                                                                          [ 86%]
2025-01-13T19:13:40.9053052Z tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
2025-01-13T19:13:42.2588023Z tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
2025-01-13T19:13:44.4475158Z ......                                                                   [ 88%]
2025-01-13T19:13:49.0738832Z tardis/visualization/tools/tests/test_liv_plot.py ...................... [ 90%]
2025-01-13T19:13:52.1917409Z .............................                                            [ 91%]
2025-01-13T19:13:55.0283054Z tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
2025-01-13T19:14:01.9987328Z ....                                                                     [ 92%]
2025-01-13T19:14:07.9597572Z tardis/visualization/tools/tests/test_sdec_plot.py ..................... [ 94%]
2025-01-13T19:14:16.0302559Z ..............................                                           [ 95%]
2025-01-13T19:14:16.4615304Z tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
2025-01-13T19:14:16.5332680Z ....                                                                     [ 96%]
2025-01-13T19:14:17.5936584Z tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
2025-01-13T19:14:18.2223318Z ..................                                                       [ 98%]
2025-01-13T19:14:21.3115949Z tardis/visualization/widgets/tests/test_shell_info.py ..............EEEE [ 99%]
2025-01-13T19:14:29.5540661Z EEE...                                                                   [100%]
2025-01-13T19:14:29.5541209Z 
2025-01-13T19:14:29.5541432Z ==================================== ERRORS ====================================
2025-01-13T19:14:29.5542124Z _____________ ERROR at setup of TestHDFShellInfo.test_shells_data ______________
2025-01-13T19:14:29.5542639Z 
2025-01-13T19:14:29.5542966Z path_or_buf = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5543590Z path = 'simulation'
2025-01-13T19:14:29.5544637Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:14:29.5545513Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:14:29.5546026Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:14:29.5546598Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:14:29.5547001Z 
2025-01-13T19:14:29.5547144Z     @staticmethod
2025-01-13T19:14:29.5547489Z     def to_hdf_util(
2025-01-13T19:14:29.5548034Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:14:29.5548628Z     ):
2025-01-13T19:14:29.5548913Z         """
2025-01-13T19:14:29.5549334Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:14:29.5549856Z     
2025-01-13T19:14:29.5550246Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:14:29.5550939Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:14:29.5551733Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:14:29.5552345Z     
2025-01-13T19:14:29.5552681Z         Units will be stored as their CGS value
2025-01-13T19:14:29.5553136Z     
2025-01-13T19:14:29.5553428Z         Parameters
2025-01-13T19:14:29.5553775Z         ----------
2025-01-13T19:14:29.5554368Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:14:29.5554941Z             Path or buffer to the HDF file
2025-01-13T19:14:29.5555396Z         path : str
2025-01-13T19:14:29.5555821Z             Path inside the HDF file to store the `elements`
2025-01-13T19:14:29.5556721Z         elements : dict
2025-01-13T19:14:29.5557166Z             A dict of property names and their values to be
2025-01-13T19:14:29.5557670Z             stored.
2025-01-13T19:14:29.5558004Z         overwrite : bool
2025-01-13T19:14:29.5558528Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:14:29.5559097Z     
2025-01-13T19:14:29.5559380Z         Notes
2025-01-13T19:14:29.5559682Z         -----
2025-01-13T19:14:29.5560187Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:14:29.5560949Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:14:29.5561580Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:14:29.5562030Z         """
2025-01-13T19:14:29.5562327Z         if (
2025-01-13T19:14:29.5562674Z             isinstance(path_or_buf, str)
2025-01-13T19:14:29.5563159Z             and os.path.exists(path_or_buf)
2025-01-13T19:14:29.5563638Z             and not overwrite
2025-01-13T19:14:29.5564015Z         ):
2025-01-13T19:14:29.5564489Z             raise FileExistsError(
2025-01-13T19:14:29.5565038Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:14:29.5565711Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:14:29.5566238Z             )
2025-01-13T19:14:29.5566530Z     
2025-01-13T19:14:29.5566810Z         else:
2025-01-13T19:14:29.5567268Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:14:29.5567855Z                 buf = pd.HDFStore(
2025-01-13T19:14:29.5568369Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:14:29.5569171Z                 )
2025-01-13T19:14:29.5569520Z             except TypeError as e:
2025-01-13T19:14:29.5570001Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:14:29.5570589Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:14:29.5571126Z                     logger.debug(
2025-01-13T19:14:29.5571678Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:14:29.5572230Z                     )
2025-01-13T19:14:29.5572578Z                     buf = path_or_buf
2025-01-13T19:14:29.5572989Z                 else:
2025-01-13T19:14:29.5573321Z                     raise e
2025-01-13T19:14:29.5573670Z     
2025-01-13T19:14:29.5573960Z         if not buf.is_open:
2025-01-13T19:14:29.5574485Z             buf.open()
2025-01-13T19:14:29.5574828Z     
2025-01-13T19:14:29.5575116Z         scalars = {}
2025-01-13T19:14:29.5575499Z         for key, value in elements.items():
2025-01-13T19:14:29.5575970Z             if value is None:
2025-01-13T19:14:29.5576361Z                 value = "none"
2025-01-13T19:14:29.5576767Z             if hasattr(value, "cgs"):
2025-01-13T19:14:29.5577213Z                 value = value.cgs.value
2025-01-13T19:14:29.5577656Z             if np.isscalar(value):
2025-01-13T19:14:29.5578092Z                 scalars[key] = value
2025-01-13T19:14:29.5578540Z             elif hasattr(value, "shape"):
2025-01-13T19:14:29.5578993Z                 if value.ndim == 1:
2025-01-13T19:14:29.5579522Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:14:29.5580054Z                     try:
2025-01-13T19:14:29.5580424Z                         pd.Series(value).to_hdf(
2025-01-13T19:14:29.5580927Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5581391Z                         )
2025-01-13T19:14:29.5581784Z                     except NotImplementedError:
2025-01-13T19:14:29.5582249Z                         logger.debug(
2025-01-13T19:14:29.5582819Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:14:29.5583391Z                         )
2025-01-13T19:14:29.5583785Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:14:29.5584716Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5585197Z                         )
2025-01-13T19:14:29.5585546Z                 else:
2025-01-13T19:14:29.5586049Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5586831Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:14:29.5587393Z                 try:
2025-01-13T19:14:29.5587848Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:14:29.5588262Z 
2025-01-13T19:14:29.5588414Z tardis/io/util.py:283: 
2025-01-13T19:14:29.5588850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5589382Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:14:29.5589803Z     data = self.get_properties()
2025-01-13T19:14:29.5590227Z tardis/io/util.py:298: in get_properties
2025-01-13T19:14:29.5590838Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:14:29.5591524Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.5592199Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.5592935Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.5593702Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.5594596Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.5595065Z     res = self.make_source_function()
2025-01-13T19:14:29.5595459Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5595758Z 
2025-01-13T19:14:29.5596074Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16dee736e0>
2025-01-13T19:14:29.5596709Z 
2025-01-13T19:14:29.5596843Z     def make_source_function(self):
2025-01-13T19:14:29.5597172Z         """
2025-01-13T19:14:29.5597667Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.5598250Z     
2025-01-13T19:14:29.5598783Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.5599522Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.5599964Z     
2025-01-13T19:14:29.5600196Z         Parameters
2025-01-13T19:14:29.5600461Z         ----------
2025-01-13T19:14:29.5600762Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.5601116Z     
2025-01-13T19:14:29.5601343Z         Returns
2025-01-13T19:14:29.5601591Z         -------
2025-01-13T19:14:29.5602079Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.5602646Z         """
2025-01-13T19:14:29.5602876Z     
2025-01-13T19:14:29.5603147Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.5603532Z         # slice for the active shells
2025-01-13T19:14:29.5603892Z         local_slice = slice(
2025-01-13T19:14:29.5604418Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.5604976Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.5605406Z         )
2025-01-13T19:14:29.5605658Z     
2025-01-13T19:14:29.5605921Z         transport = self.transport
2025-01-13T19:14:29.5606385Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.5606885Z         transition_probabilities = (
2025-01-13T19:14:29.5607429Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.5607959Z         )
2025-01-13T19:14:29.5608432Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.5608939Z 
2025-01-13T19:14:29.5609159Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.5609508Z 
2025-01-13T19:14:29.5609774Z During handling of the above exception, another exception occurred:
2025-01-13T19:14:29.5610355Z 
2025-01-13T19:14:29.5610625Z hdf_file_path = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5611384Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16dee71190>
2025-01-13T19:14:29.5611897Z 
2025-01-13T19:14:29.5612032Z     @pytest.fixture(scope="class")
2025-01-13T19:14:29.5612514Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:14:29.5613074Z >       simulation_verysimple.to_hdf(
2025-01-13T19:14:29.5613538Z             hdf_file_path, overwrite=True
2025-01-13T19:14:29.5614017Z         )  # save sim at hdf_file_path
2025-01-13T19:14:29.5614499Z 
2025-01-13T19:14:29.5614777Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:14:29.5615394Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5615913Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:14:29.5616482Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:14:29.5617070Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:14:29.5617569Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5618439Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:14:29.5619229Z     return func(*args, **kwargs)
2025-01-13T19:14:29.5619910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:14:29.5620632Z     pytables.to_hdf(
2025-01-13T19:14:29.5621272Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:14:29.5621973Z     f(store)
2025-01-13T19:14:29.5622562Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:14:29.5623464Z     f = lambda store: store.put(
2025-01-13T19:14:29.5624107Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:14:29.5624972Z     self._write_to_group(
2025-01-13T19:14:29.5625674Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:14:29.5626404Z     s.write(
2025-01-13T19:14:29.5626962Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:14:29.5627854Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:14:29.5628817Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:14:29.5629634Z     vlarr.append(value)
2025-01-13T19:14:29.5630266Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:14:29.5630987Z     sequence = atom.toarray(sequence)
2025-01-13T19:14:29.5631665Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:14:29.5632359Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:14:29.5632813Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5633156Z 
2025-01-13T19:14:29.5633284Z self = ObjectAtom()
2025-01-13T19:14:29.5634054Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x7f16da073f80>]],
2025-01-13T19:14:29.5634829Z       dtype=object)
2025-01-13T19:14:29.5635010Z 
2025-01-13T19:14:29.5635151Z     def _tobuffer(self, object_):
2025-01-13T19:14:29.5635616Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:14:29.5636181Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.5636529Z 
2025-01-13T19:14:29.5636916Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:14:29.5637749Z ________ ERROR at setup of TestHDFShellInfo.test_element_count_data[1] _________
2025-01-13T19:14:29.5638232Z 
2025-01-13T19:14:29.5638533Z path_or_buf = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5639126Z path = 'simulation'
2025-01-13T19:14:29.5640101Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:14:29.5640941Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:14:29.5641410Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:14:29.5641919Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:14:29.5642260Z 
2025-01-13T19:14:29.5642388Z     @staticmethod
2025-01-13T19:14:29.5642696Z     def to_hdf_util(
2025-01-13T19:14:29.5643165Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:14:29.5643695Z     ):
2025-01-13T19:14:29.5643950Z         """
2025-01-13T19:14:29.5644489Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:14:29.5644960Z     
2025-01-13T19:14:29.5645319Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:14:29.5645939Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:14:29.5646639Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:14:29.5647170Z     
2025-01-13T19:14:29.5647464Z         Units will be stored as their CGS value
2025-01-13T19:14:29.5647867Z     
2025-01-13T19:14:29.5648114Z         Parameters
2025-01-13T19:14:29.5648403Z         ----------
2025-01-13T19:14:29.5648773Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:14:29.5649312Z             Path or buffer to the HDF file
2025-01-13T19:14:29.5649763Z         path : str
2025-01-13T19:14:29.5650179Z             Path inside the HDF file to store the `elements`
2025-01-13T19:14:29.5650679Z         elements : dict
2025-01-13T19:14:29.5651353Z             A dict of property names and their values to be
2025-01-13T19:14:29.5651801Z             stored.
2025-01-13T19:14:29.5652103Z         overwrite : bool
2025-01-13T19:14:29.5652583Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:14:29.5653120Z     
2025-01-13T19:14:29.5653375Z         Notes
2025-01-13T19:14:29.5653653Z         -----
2025-01-13T19:14:29.5654102Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:14:29.5654962Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:14:29.5655514Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:14:29.5655905Z         """
2025-01-13T19:14:29.5656162Z         if (
2025-01-13T19:14:29.5656460Z             isinstance(path_or_buf, str)
2025-01-13T19:14:29.5656879Z             and os.path.exists(path_or_buf)
2025-01-13T19:14:29.5657279Z             and not overwrite
2025-01-13T19:14:29.5657611Z         ):
2025-01-13T19:14:29.5657900Z             raise FileExistsError(
2025-01-13T19:14:29.5658381Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:14:29.5658968Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:14:29.5659436Z             )
2025-01-13T19:14:29.5659719Z     
2025-01-13T19:14:29.5659997Z         else:
2025-01-13T19:14:29.5660448Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:14:29.5661044Z                 buf = pd.HDFStore(
2025-01-13T19:14:29.5661552Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:14:29.5662064Z                 )
2025-01-13T19:14:29.5662406Z             except TypeError as e:
2025-01-13T19:14:29.5662849Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:14:29.5663375Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:14:29.5663851Z                     logger.debug(
2025-01-13T19:14:29.5664737Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:14:29.5665181Z                     )
2025-01-13T19:14:29.5665420Z                     buf = path_or_buf
2025-01-13T19:14:29.5665687Z                 else:
2025-01-13T19:14:29.5666111Z                     raise e
2025-01-13T19:14:29.5666340Z     
2025-01-13T19:14:29.5666528Z         if not buf.is_open:
2025-01-13T19:14:29.5666759Z             buf.open()
2025-01-13T19:14:29.5666968Z     
2025-01-13T19:14:29.5667145Z         scalars = {}
2025-01-13T19:14:29.5667381Z         for key, value in elements.items():
2025-01-13T19:14:29.5667667Z             if value is None:
2025-01-13T19:14:29.5667911Z                 value = "none"
2025-01-13T19:14:29.5668161Z             if hasattr(value, "cgs"):
2025-01-13T19:14:29.5668436Z                 value = value.cgs.value
2025-01-13T19:14:29.5668715Z             if np.isscalar(value):
2025-01-13T19:14:29.5668976Z                 scalars[key] = value
2025-01-13T19:14:29.5669254Z             elif hasattr(value, "shape"):
2025-01-13T19:14:29.5669532Z                 if value.ndim == 1:
2025-01-13T19:14:29.5669900Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:14:29.5670244Z                     try:
2025-01-13T19:14:29.5670492Z                         pd.Series(value).to_hdf(
2025-01-13T19:14:29.5670813Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5671110Z                         )
2025-01-13T19:14:29.5671361Z                     except NotImplementedError:
2025-01-13T19:14:29.5671653Z                         logger.debug(
2025-01-13T19:14:29.5672005Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:14:29.5672363Z                         )
2025-01-13T19:14:29.5672605Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:14:29.5672919Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5673204Z                         )
2025-01-13T19:14:29.5673544Z                 else:
2025-01-13T19:14:29.5673849Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5674452Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:14:29.5674808Z                 try:
2025-01-13T19:14:29.5675091Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:14:29.5675341Z 
2025-01-13T19:14:29.5675430Z tardis/io/util.py:283: 
2025-01-13T19:14:29.5675674Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5675957Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:14:29.5676194Z     data = self.get_properties()
2025-01-13T19:14:29.5676438Z tardis/io/util.py:298: in get_properties
2025-01-13T19:14:29.5676824Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:14:29.5677479Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.5678112Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.5678617Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.5679032Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.5679436Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.5679750Z     res = self.make_source_function()
2025-01-13T19:14:29.5680020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5680223Z 
2025-01-13T19:14:29.5680443Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16dee736e0>
2025-01-13T19:14:29.5680766Z 
2025-01-13T19:14:29.5680854Z     def make_source_function(self):
2025-01-13T19:14:29.5681095Z         """
2025-01-13T19:14:29.5681441Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.5682006Z     
2025-01-13T19:14:29.5682605Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.5683307Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.5683612Z     
2025-01-13T19:14:29.5683915Z         Parameters
2025-01-13T19:14:29.5684106Z         ----------
2025-01-13T19:14:29.5684456Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.5684707Z     
2025-01-13T19:14:29.5684864Z         Returns
2025-01-13T19:14:29.5685041Z         -------
2025-01-13T19:14:29.5685381Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.5685764Z         """
2025-01-13T19:14:29.5685925Z     
2025-01-13T19:14:29.5686114Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.5686389Z         # slice for the active shells
2025-01-13T19:14:29.5686630Z         local_slice = slice(
2025-01-13T19:14:29.5686898Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.5687236Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.5687515Z         )
2025-01-13T19:14:29.5687676Z     
2025-01-13T19:14:29.5687858Z         transport = self.transport
2025-01-13T19:14:29.5688165Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.5688473Z         transition_probabilities = (
2025-01-13T19:14:29.5688873Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.5689375Z         )
2025-01-13T19:14:29.5689743Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.5690239Z 
2025-01-13T19:14:29.5690390Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.5690610Z 
2025-01-13T19:14:29.5690783Z During handling of the above exception, another exception occurred:
2025-01-13T19:14:29.5691035Z 
2025-01-13T19:14:29.5691205Z hdf_file_path = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5691825Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16dee71190>
2025-01-13T19:14:29.5692142Z 
2025-01-13T19:14:29.5692235Z     @pytest.fixture(scope="class")
2025-01-13T19:14:29.5692532Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:14:29.5692850Z >       simulation_verysimple.to_hdf(
2025-01-13T19:14:29.5693100Z             hdf_file_path, overwrite=True
2025-01-13T19:14:29.5693354Z         )  # save sim at hdf_file_path
2025-01-13T19:14:29.5693517Z 
2025-01-13T19:14:29.5693673Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:14:29.5694028Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5694430Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:14:29.5694730Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:14:29.5695096Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:14:29.5695525Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5696075Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:14:29.5696525Z     return func(*args, **kwargs)
2025-01-13T19:14:29.5696936Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:14:29.5697369Z     pytables.to_hdf(
2025-01-13T19:14:29.5697743Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:14:29.5698153Z     f(store)
2025-01-13T19:14:29.5698509Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:14:29.5698940Z     f = lambda store: store.put(
2025-01-13T19:14:29.5699330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:14:29.5699743Z     self._write_to_group(
2025-01-13T19:14:29.5700166Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:14:29.5700617Z     s.write(
2025-01-13T19:14:29.5700963Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:14:29.5701458Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:14:29.5702152Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:14:29.5702587Z     vlarr.append(value)
2025-01-13T19:14:29.5702955Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:14:29.5703371Z     sequence = atom.toarray(sequence)
2025-01-13T19:14:29.5703761Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:14:29.5704167Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:14:29.5704590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5704797Z 
2025-01-13T19:14:29.5704885Z self = ObjectAtom()
2025-01-13T19:14:29.5705226Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x7f16da073f80>]],
2025-01-13T19:14:29.5705601Z       dtype=object)
2025-01-13T19:14:29.5705711Z 
2025-01-13T19:14:29.5705805Z     def _tobuffer(self, object_):
2025-01-13T19:14:29.5706098Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:14:29.5706446Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.5706656Z 
2025-01-13T19:14:29.5706895Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:14:29.5707404Z ________ ERROR at setup of TestHDFShellInfo.test_element_count_data[20] ________
2025-01-13T19:14:29.5707677Z 
2025-01-13T19:14:29.5707839Z path_or_buf = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5708160Z path = 'simulation'
2025-01-13T19:14:29.5708553Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:14:29.5709143Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:14:29.5709428Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:14:29.5709729Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:14:29.5709936Z 
2025-01-13T19:14:29.5710009Z     @staticmethod
2025-01-13T19:14:29.5710195Z     def to_hdf_util(
2025-01-13T19:14:29.5710480Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:14:29.5710798Z     ):
2025-01-13T19:14:29.5710957Z         """
2025-01-13T19:14:29.5711189Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:14:29.5711473Z     
2025-01-13T19:14:29.5711690Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:14:29.5712060Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:14:29.5712475Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:14:29.5712804Z     
2025-01-13T19:14:29.5712989Z         Units will be stored as their CGS value
2025-01-13T19:14:29.5713238Z     
2025-01-13T19:14:29.5713396Z         Parameters
2025-01-13T19:14:29.5713585Z         ----------
2025-01-13T19:14:29.5713824Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:14:29.5714128Z             Path or buffer to the HDF file
2025-01-13T19:14:29.5714479Z         path : str
2025-01-13T19:14:29.5714705Z             Path inside the HDF file to store the `elements`
2025-01-13T19:14:29.5714983Z         elements : dict
2025-01-13T19:14:29.5715223Z             A dict of property names and their values to be
2025-01-13T19:14:29.5715489Z             stored.
2025-01-13T19:14:29.5715676Z         overwrite : bool
2025-01-13T19:14:29.5715963Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:14:29.5716295Z     
2025-01-13T19:14:29.5716454Z         Notes
2025-01-13T19:14:29.5716632Z         -----
2025-01-13T19:14:29.5716901Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:14:29.5717328Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:14:29.5717672Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:14:29.5718067Z         """
2025-01-13T19:14:29.5718234Z         if (
2025-01-13T19:14:29.5718423Z             isinstance(path_or_buf, str)
2025-01-13T19:14:29.5718687Z             and os.path.exists(path_or_buf)
2025-01-13T19:14:29.5718945Z             and not overwrite
2025-01-13T19:14:29.5719155Z         ):
2025-01-13T19:14:29.5719338Z             raise FileExistsError(
2025-01-13T19:14:29.5719637Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:14:29.5719999Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:14:29.5720285Z             )
2025-01-13T19:14:29.5720450Z     
2025-01-13T19:14:29.5720606Z         else:
2025-01-13T19:14:29.5720860Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:14:29.5721177Z                 buf = pd.HDFStore(
2025-01-13T19:14:29.5721455Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:14:29.5721741Z                 )
2025-01-13T19:14:29.5721932Z             except TypeError as e:
2025-01-13T19:14:29.5722192Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:14:29.5722506Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:14:29.5722792Z                     logger.debug(
2025-01-13T19:14:29.5723097Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:14:29.5723407Z                     )
2025-01-13T19:14:29.5723610Z                     buf = path_or_buf
2025-01-13T19:14:29.5723834Z                 else:
2025-01-13T19:14:29.5724023Z                     raise e
2025-01-13T19:14:29.5724335Z     
2025-01-13T19:14:29.5724696Z         if not buf.is_open:
2025-01-13T19:14:29.5724947Z             buf.open()
2025-01-13T19:14:29.5725135Z     
2025-01-13T19:14:29.5725294Z         scalars = {}
2025-01-13T19:14:29.5725511Z         for key, value in elements.items():
2025-01-13T19:14:29.5725773Z             if value is None:
2025-01-13T19:14:29.5725991Z                 value = "none"
2025-01-13T19:14:29.5726211Z             if hasattr(value, "cgs"):
2025-01-13T19:14:29.5726462Z                 value = value.cgs.value
2025-01-13T19:14:29.5726708Z             if np.isscalar(value):
2025-01-13T19:14:29.5726937Z                 scalars[key] = value
2025-01-13T19:14:29.5727185Z             elif hasattr(value, "shape"):
2025-01-13T19:14:29.5727433Z                 if value.ndim == 1:
2025-01-13T19:14:29.5727727Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:14:29.5728023Z                     try:
2025-01-13T19:14:29.5728241Z                         pd.Series(value).to_hdf(
2025-01-13T19:14:29.5728528Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5728787Z                         )
2025-01-13T19:14:29.5729012Z                     except NotImplementedError:
2025-01-13T19:14:29.5729270Z                         logger.debug(
2025-01-13T19:14:29.5729584Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:14:29.5729899Z                         )
2025-01-13T19:14:29.5730116Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:14:29.5730392Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5730647Z                         )
2025-01-13T19:14:29.5730836Z                 else:
2025-01-13T19:14:29.5731103Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5731494Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:14:29.5731874Z                 try:
2025-01-13T19:14:29.5732276Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:14:29.5732654Z 
2025-01-13T19:14:29.5732794Z tardis/io/util.py:283: 
2025-01-13T19:14:29.5733053Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5733487Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:14:29.5733722Z     data = self.get_properties()
2025-01-13T19:14:29.5733964Z tardis/io/util.py:298: in get_properties
2025-01-13T19:14:29.5734599Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:14:29.5734975Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.5735335Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.5735742Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.5736152Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.5736554Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.5736878Z     res = self.make_source_function()
2025-01-13T19:14:29.5737146Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5737349Z 
2025-01-13T19:14:29.5737561Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16dee736e0>
2025-01-13T19:14:29.5737873Z 
2025-01-13T19:14:29.5737958Z     def make_source_function(self):
2025-01-13T19:14:29.5738185Z         """
2025-01-13T19:14:29.5738518Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.5738915Z     
2025-01-13T19:14:29.5739264Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.5739758Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.5740069Z     
2025-01-13T19:14:29.5740228Z         Parameters
2025-01-13T19:14:29.5740416Z         ----------
2025-01-13T19:14:29.5740631Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.5740999Z     
2025-01-13T19:14:29.5741165Z         Returns
2025-01-13T19:14:29.5741343Z         -------
2025-01-13T19:14:29.5741681Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.5742071Z         """
2025-01-13T19:14:29.5742235Z     
2025-01-13T19:14:29.5742423Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.5742695Z         # slice for the active shells
2025-01-13T19:14:29.5742942Z         local_slice = slice(
2025-01-13T19:14:29.5743212Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.5743543Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.5743819Z         )
2025-01-13T19:14:29.5743981Z     
2025-01-13T19:14:29.5744154Z         transport = self.transport
2025-01-13T19:14:29.5744635Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.5744945Z         transition_probabilities = (
2025-01-13T19:14:29.5745293Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.5745626Z         )
2025-01-13T19:14:29.5745932Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.5746239Z 
2025-01-13T19:14:29.5746379Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.5746603Z 
2025-01-13T19:14:29.5746774Z During handling of the above exception, another exception occurred:
2025-01-13T19:14:29.5747030Z 
2025-01-13T19:14:29.5747194Z hdf_file_path = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5747682Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16dee71190>
2025-01-13T19:14:29.5748000Z 
2025-01-13T19:14:29.5748095Z     @pytest.fixture(scope="class")
2025-01-13T19:14:29.5748390Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:14:29.5748699Z >       simulation_verysimple.to_hdf(
2025-01-13T19:14:29.5748959Z             hdf_file_path, overwrite=True
2025-01-13T19:14:29.5749215Z         )  # save sim at hdf_file_path
2025-01-13T19:14:29.5749375Z 
2025-01-13T19:14:29.5749534Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:14:29.5750016Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5750307Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:14:29.5750627Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:14:29.5750950Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:14:29.5751229Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5751704Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:14:29.5752159Z     return func(*args, **kwargs)
2025-01-13T19:14:29.5752702Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:14:29.5769792Z     pytables.to_hdf(
2025-01-13T19:14:29.5770458Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:14:29.5771124Z     f(store)
2025-01-13T19:14:29.5771704Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:14:29.5772408Z     f = lambda store: store.put(
2025-01-13T19:14:29.5773046Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:14:29.5773708Z     self._write_to_group(
2025-01-13T19:14:29.5774546Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:14:29.5775275Z     s.write(
2025-01-13T19:14:29.5775836Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:14:29.5776651Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:14:29.5777492Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:14:29.5778416Z     vlarr.append(value)
2025-01-13T19:14:29.5779004Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:14:29.5779698Z     sequence = atom.toarray(sequence)
2025-01-13T19:14:29.5780338Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:14:29.5780995Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:14:29.5781431Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5781785Z 
2025-01-13T19:14:29.5781918Z self = ObjectAtom()
2025-01-13T19:14:29.5782504Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x7f16da073f80>]],
2025-01-13T19:14:29.5783216Z       dtype=object)
2025-01-13T19:14:29.5783415Z 
2025-01-13T19:14:29.5783560Z     def _tobuffer(self, object_):
2025-01-13T19:14:29.5784063Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:14:29.5784805Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.5785153Z 
2025-01-13T19:14:29.5785532Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:14:29.5786080Z _________ ERROR at setup of TestHDFShellInfo.test_ion_count_data[12-1] _________
2025-01-13T19:14:29.5786354Z 
2025-01-13T19:14:29.5786519Z path_or_buf = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5786844Z path = 'simulation'
2025-01-13T19:14:29.5787256Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:14:29.5787726Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:14:29.5788009Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:14:29.5788320Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:14:29.5788525Z 
2025-01-13T19:14:29.5788606Z     @staticmethod
2025-01-13T19:14:29.5788803Z     def to_hdf_util(
2025-01-13T19:14:29.5789101Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:14:29.5789424Z     ):
2025-01-13T19:14:29.5789592Z         """
2025-01-13T19:14:29.5790024Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:14:29.5790350Z     
2025-01-13T19:14:29.5790579Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:14:29.5790974Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:14:29.5791402Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:14:29.5791736Z     
2025-01-13T19:14:29.5791939Z         Units will be stored as their CGS value
2025-01-13T19:14:29.5792197Z     
2025-01-13T19:14:29.5792366Z         Parameters
2025-01-13T19:14:29.5792562Z         ----------
2025-01-13T19:14:29.5792807Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:14:29.5793121Z             Path or buffer to the HDF file
2025-01-13T19:14:29.5793368Z         path : str
2025-01-13T19:14:29.5793605Z             Path inside the HDF file to store the `elements`
2025-01-13T19:14:29.5793890Z         elements : dict
2025-01-13T19:14:29.5794145Z             A dict of property names and their values to be
2025-01-13T19:14:29.5794568Z             stored.
2025-01-13T19:14:29.5794761Z         overwrite : bool
2025-01-13T19:14:29.5795057Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:14:29.5795386Z     
2025-01-13T19:14:29.5795549Z         Notes
2025-01-13T19:14:29.5795728Z         -----
2025-01-13T19:14:29.5796008Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:14:29.5796437Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:14:29.5796807Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:14:29.5797078Z         """
2025-01-13T19:14:29.5797246Z         if (
2025-01-13T19:14:29.5797564Z             isinstance(path_or_buf, str)
2025-01-13T19:14:29.5797831Z             and os.path.exists(path_or_buf)
2025-01-13T19:14:29.5798084Z             and not overwrite
2025-01-13T19:14:29.5798301Z         ):
2025-01-13T19:14:29.5798513Z             raise FileExistsError(
2025-01-13T19:14:29.5798818Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:14:29.5799189Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:14:29.5799482Z             )
2025-01-13T19:14:29.5799653Z     
2025-01-13T19:14:29.5799811Z         else:
2025-01-13T19:14:29.5800062Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:14:29.5800383Z                 buf = pd.HDFStore(
2025-01-13T19:14:29.5800667Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:14:29.5800948Z                 )
2025-01-13T19:14:29.5801144Z             except TypeError as e:
2025-01-13T19:14:29.5801426Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:14:29.5801750Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:14:29.5802040Z                     logger.debug(
2025-01-13T19:14:29.5802354Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:14:29.5802668Z                     )
2025-01-13T19:14:29.5802876Z                     buf = path_or_buf
2025-01-13T19:14:29.5803106Z                 else:
2025-01-13T19:14:29.5803297Z                     raise e
2025-01-13T19:14:29.5803500Z     
2025-01-13T19:14:29.5803669Z         if not buf.is_open:
2025-01-13T19:14:29.5803878Z             buf.open()
2025-01-13T19:14:29.5804073Z     
2025-01-13T19:14:29.5804367Z         scalars = {}
2025-01-13T19:14:29.5804584Z         for key, value in elements.items():
2025-01-13T19:14:29.5804842Z             if value is None:
2025-01-13T19:14:29.5805067Z                 value = "none"
2025-01-13T19:14:29.5805297Z             if hasattr(value, "cgs"):
2025-01-13T19:14:29.5805541Z                 value = value.cgs.value
2025-01-13T19:14:29.5805791Z             if np.isscalar(value):
2025-01-13T19:14:29.5806024Z                 scalars[key] = value
2025-01-13T19:14:29.5806398Z             elif hasattr(value, "shape"):
2025-01-13T19:14:29.5806648Z                 if value.ndim == 1:
2025-01-13T19:14:29.5806949Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:14:29.5807251Z                     try:
2025-01-13T19:14:29.5807477Z                         pd.Series(value).to_hdf(
2025-01-13T19:14:29.5807765Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5808030Z                         )
2025-01-13T19:14:29.5808259Z                     except NotImplementedError:
2025-01-13T19:14:29.5808522Z                         logger.debug(
2025-01-13T19:14:29.5808840Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:14:29.5809168Z                         )
2025-01-13T19:14:29.5809388Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:14:29.5809673Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5809932Z                         )
2025-01-13T19:14:29.5810133Z                 else:
2025-01-13T19:14:29.5810403Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5810803Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:14:29.5811112Z                 try:
2025-01-13T19:14:29.5811366Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:14:29.5811596Z 
2025-01-13T19:14:29.5811679Z tardis/io/util.py:283: 
2025-01-13T19:14:29.5811928Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5812213Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:14:29.5812452Z     data = self.get_properties()
2025-01-13T19:14:29.5812814Z tardis/io/util.py:298: in get_properties
2025-01-13T19:14:29.5813155Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:14:29.5813531Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.5813909Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.5814425Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.5814848Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.5815260Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.5815584Z     res = self.make_source_function()
2025-01-13T19:14:29.5815864Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5816068Z 
2025-01-13T19:14:29.5816294Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16dee736e0>
2025-01-13T19:14:29.5816599Z 
2025-01-13T19:14:29.5816693Z     def make_source_function(self):
2025-01-13T19:14:29.5816933Z         """
2025-01-13T19:14:29.5817280Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.5817684Z     
2025-01-13T19:14:29.5818039Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.5818546Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.5818857Z     
2025-01-13T19:14:29.5819021Z         Parameters
2025-01-13T19:14:29.5819211Z         ----------
2025-01-13T19:14:29.5819428Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.5819682Z     
2025-01-13T19:14:29.5819839Z         Returns
2025-01-13T19:14:29.5820019Z         -------
2025-01-13T19:14:29.5820354Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.5820741Z         """
2025-01-13T19:14:29.5820908Z     
2025-01-13T19:14:29.5821107Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.5821382Z         # slice for the active shells
2025-01-13T19:14:29.5821634Z         local_slice = slice(
2025-01-13T19:14:29.5821907Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.5822388Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.5822666Z         )
2025-01-13T19:14:29.5822828Z     
2025-01-13T19:14:29.5823003Z         transport = self.transport
2025-01-13T19:14:29.5823306Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.5823617Z         transition_probabilities = (
2025-01-13T19:14:29.5823965Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.5824400Z         )
2025-01-13T19:14:29.5824708Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.5825037Z 
2025-01-13T19:14:29.5825182Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.5825412Z 
2025-01-13T19:14:29.5825578Z During handling of the above exception, another exception occurred:
2025-01-13T19:14:29.5825837Z 
2025-01-13T19:14:29.5826010Z hdf_file_path = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5826503Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16dee71190>
2025-01-13T19:14:29.5826830Z 
2025-01-13T19:14:29.5826919Z     @pytest.fixture(scope="class")
2025-01-13T19:14:29.5827217Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:14:29.5827541Z >       simulation_verysimple.to_hdf(
2025-01-13T19:14:29.5827797Z             hdf_file_path, overwrite=True
2025-01-13T19:14:29.5828053Z         )  # save sim at hdf_file_path
2025-01-13T19:14:29.5828220Z 
2025-01-13T19:14:29.5828376Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:14:29.5828726Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5829132Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:14:29.5829433Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:14:29.5829755Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:14:29.5830034Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5830517Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:14:29.5830971Z     return func(*args, **kwargs)
2025-01-13T19:14:29.5831383Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:14:29.5831813Z     pytables.to_hdf(
2025-01-13T19:14:29.5832200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:14:29.5832613Z     f(store)
2025-01-13T19:14:29.5832974Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:14:29.5833408Z     f = lambda store: store.put(
2025-01-13T19:14:29.5833813Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:14:29.5834328Z     self._write_to_group(
2025-01-13T19:14:29.5834763Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:14:29.5835223Z     s.write(
2025-01-13T19:14:29.5835578Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:14:29.5836080Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:14:29.5836605Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:14:29.5837048Z     vlarr.append(value)
2025-01-13T19:14:29.5837422Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:14:29.5837847Z     sequence = atom.toarray(sequence)
2025-01-13T19:14:29.5838244Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:14:29.5838660Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:14:29.5838936Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5839142Z 
2025-01-13T19:14:29.5839339Z self = ObjectAtom()
2025-01-13T19:14:29.5839680Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x7f16da073f80>]],
2025-01-13T19:14:29.5840068Z       dtype=object)
2025-01-13T19:14:29.5840180Z 
2025-01-13T19:14:29.5840271Z     def _tobuffer(self, object_):
2025-01-13T19:14:29.5840567Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:14:29.5840920Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.5841136Z 
2025-01-13T19:14:29.5841376Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:14:29.5841885Z ________ ERROR at setup of TestHDFShellInfo.test_ion_count_data[20-20] _________
2025-01-13T19:14:29.5842157Z 
2025-01-13T19:14:29.5842328Z path_or_buf = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5842654Z path = 'simulation'
2025-01-13T19:14:29.5843058Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:14:29.5843554Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:14:29.5843837Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:14:29.5844145Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:14:29.5844466Z 
2025-01-13T19:14:29.5844542Z     @staticmethod
2025-01-13T19:14:29.5844735Z     def to_hdf_util(
2025-01-13T19:14:29.5845023Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:14:29.5845343Z     ):
2025-01-13T19:14:29.5845504Z         """
2025-01-13T19:14:29.5845747Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:14:29.5846043Z     
2025-01-13T19:14:29.5846390Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:14:29.5846771Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:14:29.5847195Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:14:29.5847531Z     
2025-01-13T19:14:29.5847721Z         Units will be stored as their CGS value
2025-01-13T19:14:29.5847971Z     
2025-01-13T19:14:29.5848132Z         Parameters
2025-01-13T19:14:29.5848320Z         ----------
2025-01-13T19:14:29.5848558Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:14:29.5848856Z             Path or buffer to the HDF file
2025-01-13T19:14:29.5849103Z         path : str
2025-01-13T19:14:29.5849333Z             Path inside the HDF file to store the `elements`
2025-01-13T19:14:29.5849613Z         elements : dict
2025-01-13T19:14:29.5849856Z             A dict of property names and their values to be
2025-01-13T19:14:29.5850126Z             stored.
2025-01-13T19:14:29.5850319Z         overwrite : bool
2025-01-13T19:14:29.5850605Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:14:29.5850921Z     
2025-01-13T19:14:29.5851085Z         Notes
2025-01-13T19:14:29.5851262Z         -----
2025-01-13T19:14:29.5851530Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:14:29.5851948Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:14:29.5852295Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:14:29.5852538Z         """
2025-01-13T19:14:29.5852706Z         if (
2025-01-13T19:14:29.5852896Z             isinstance(path_or_buf, str)
2025-01-13T19:14:29.5853160Z             and os.path.exists(path_or_buf)
2025-01-13T19:14:29.5853416Z             and not overwrite
2025-01-13T19:14:29.5853628Z         ):
2025-01-13T19:14:29.5853812Z             raise FileExistsError(
2025-01-13T19:14:29.5854120Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:14:29.5854587Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:14:29.5854881Z             )
2025-01-13T19:14:29.5855048Z     
2025-01-13T19:14:29.5855205Z         else:
2025-01-13T19:14:29.5855580Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:14:29.5855900Z                 buf = pd.HDFStore(
2025-01-13T19:14:29.5856246Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:14:29.5856530Z                 )
2025-01-13T19:14:29.5856723Z             except TypeError as e:
2025-01-13T19:14:29.5856985Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:14:29.5857300Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:14:29.5857582Z                     logger.debug(
2025-01-13T19:14:29.5857885Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:14:29.5858202Z                     )
2025-01-13T19:14:29.5858402Z                     buf = path_or_buf
2025-01-13T19:14:29.5858631Z                 else:
2025-01-13T19:14:29.5858819Z                     raise e
2025-01-13T19:14:29.5859020Z     
2025-01-13T19:14:29.5859196Z         if not buf.is_open:
2025-01-13T19:14:29.5859404Z             buf.open()
2025-01-13T19:14:29.5859595Z     
2025-01-13T19:14:29.5859762Z         scalars = {}
2025-01-13T19:14:29.5859978Z         for key, value in elements.items():
2025-01-13T19:14:29.5860236Z             if value is None:
2025-01-13T19:14:29.5860464Z                 value = "none"
2025-01-13T19:14:29.5860692Z             if hasattr(value, "cgs"):
2025-01-13T19:14:29.5860939Z                 value = value.cgs.value
2025-01-13T19:14:29.5861188Z             if np.isscalar(value):
2025-01-13T19:14:29.5861440Z                 scalars[key] = value
2025-01-13T19:14:29.5861697Z             elif hasattr(value, "shape"):
2025-01-13T19:14:29.5861949Z                 if value.ndim == 1:
2025-01-13T19:14:29.5862357Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:14:29.5862654Z                     try:
2025-01-13T19:14:29.5862876Z                         pd.Series(value).to_hdf(
2025-01-13T19:14:29.5863160Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5863424Z                         )
2025-01-13T19:14:29.5863653Z                     except NotImplementedError:
2025-01-13T19:14:29.5863914Z                         logger.debug(
2025-01-13T19:14:29.5864324Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:14:29.5864651Z                         )
2025-01-13T19:14:29.5864876Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:14:29.5865159Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5865425Z                         )
2025-01-13T19:14:29.5865618Z                 else:
2025-01-13T19:14:29.5865886Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5866291Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:14:29.5866603Z                 try:
2025-01-13T19:14:29.5866855Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:14:29.5867091Z 
2025-01-13T19:14:29.5867173Z tardis/io/util.py:283: 
2025-01-13T19:14:29.5867411Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5867724Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:14:29.5867963Z     data = self.get_properties()
2025-01-13T19:14:29.5868218Z tardis/io/util.py:298: in get_properties
2025-01-13T19:14:29.5868562Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:14:29.5868940Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.5869308Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.5869722Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.5870144Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.5870553Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.5871000Z     res = self.make_source_function()
2025-01-13T19:14:29.5871275Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5871481Z 
2025-01-13T19:14:29.5871699Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16dee736e0>
2025-01-13T19:14:29.5872008Z 
2025-01-13T19:14:29.5872105Z     def make_source_function(self):
2025-01-13T19:14:29.5872336Z         """
2025-01-13T19:14:29.5872682Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.5873085Z     
2025-01-13T19:14:29.5873437Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.5873946Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.5874348Z     
2025-01-13T19:14:29.5874513Z         Parameters
2025-01-13T19:14:29.5874701Z         ----------
2025-01-13T19:14:29.5874918Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.5875185Z     
2025-01-13T19:14:29.5875341Z         Returns
2025-01-13T19:14:29.5875521Z         -------
2025-01-13T19:14:29.5875864Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.5876255Z         """
2025-01-13T19:14:29.5876418Z     
2025-01-13T19:14:29.5876609Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.5876882Z         # slice for the active shells
2025-01-13T19:14:29.5877141Z         local_slice = slice(
2025-01-13T19:14:29.5877414Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.5877751Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.5878168Z         )
2025-01-13T19:14:29.5878332Z     
2025-01-13T19:14:29.5878511Z         transport = self.transport
2025-01-13T19:14:29.5878811Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.5879125Z         transition_probabilities = (
2025-01-13T19:14:29.5879476Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.5879810Z         )
2025-01-13T19:14:29.5880116Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.5880423Z 
2025-01-13T19:14:29.5880562Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.5880786Z 
2025-01-13T19:14:29.5880953Z During handling of the above exception, another exception occurred:
2025-01-13T19:14:29.5881212Z 
2025-01-13T19:14:29.5881379Z hdf_file_path = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5881870Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16dee71190>
2025-01-13T19:14:29.5882200Z 
2025-01-13T19:14:29.5882293Z     @pytest.fixture(scope="class")
2025-01-13T19:14:29.5882592Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:14:29.5882908Z >       simulation_verysimple.to_hdf(
2025-01-13T19:14:29.5883165Z             hdf_file_path, overwrite=True
2025-01-13T19:14:29.5883420Z         )  # save sim at hdf_file_path
2025-01-13T19:14:29.5883582Z 
2025-01-13T19:14:29.5883740Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:14:29.5884090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5884501Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:14:29.5884802Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:14:29.5885121Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:14:29.5885395Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5885872Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:14:29.5886330Z     return func(*args, **kwargs)
2025-01-13T19:14:29.5886738Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:14:29.5887170Z     pytables.to_hdf(
2025-01-13T19:14:29.5887678Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:14:29.5888092Z     f(store)
2025-01-13T19:14:29.5888448Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:14:29.5888884Z     f = lambda store: store.put(
2025-01-13T19:14:29.5889279Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:14:29.5889702Z     self._write_to_group(
2025-01-13T19:14:29.5890128Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:14:29.5890578Z     s.write(
2025-01-13T19:14:29.5890937Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:14:29.5891437Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:14:29.5891954Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:14:29.5892400Z     vlarr.append(value)
2025-01-13T19:14:29.5892771Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:14:29.5893194Z     sequence = atom.toarray(sequence)
2025-01-13T19:14:29.5893594Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:14:29.5894009Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:14:29.5894389Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5894599Z 
2025-01-13T19:14:29.5894675Z self = ObjectAtom()
2025-01-13T19:14:29.5895010Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x7f16da073f80>]],
2025-01-13T19:14:29.5895505Z       dtype=object)
2025-01-13T19:14:29.5895623Z 
2025-01-13T19:14:29.5895709Z     def _tobuffer(self, object_):
2025-01-13T19:14:29.5896003Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:14:29.5896361Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.5896581Z 
2025-01-13T19:14:29.5896824Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:14:29.5897337Z _______ ERROR at setup of TestHDFShellInfo.test_level_count_data[2-12-1] _______
2025-01-13T19:14:29.5897610Z 
2025-01-13T19:14:29.5897778Z path_or_buf = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5898099Z path = 'simulation'
2025-01-13T19:14:29.5898504Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:14:29.5898978Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:14:29.5899266Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:14:29.5899571Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:14:29.5899779Z 
2025-01-13T19:14:29.5899853Z     @staticmethod
2025-01-13T19:14:29.5900050Z     def to_hdf_util(
2025-01-13T19:14:29.5900338Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:14:29.5900659Z     ):
2025-01-13T19:14:29.5900822Z         """
2025-01-13T19:14:29.5901058Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:14:29.5901362Z     
2025-01-13T19:14:29.5901584Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:14:29.5901978Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:14:29.5902433Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:14:29.5902769Z     
2025-01-13T19:14:29.5902984Z         Units will be stored as their CGS value
2025-01-13T19:14:29.5903244Z     
2025-01-13T19:14:29.5903407Z         Parameters
2025-01-13T19:14:29.5903595Z         ----------
2025-01-13T19:14:29.5903830Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:14:29.5904343Z             Path or buffer to the HDF file
2025-01-13T19:14:29.5904591Z         path : str
2025-01-13T19:14:29.5904817Z             Path inside the HDF file to store the `elements`
2025-01-13T19:14:29.5905099Z         elements : dict
2025-01-13T19:14:29.5905346Z             A dict of property names and their values to be
2025-01-13T19:14:29.5905619Z             stored.
2025-01-13T19:14:29.5905809Z         overwrite : bool
2025-01-13T19:14:29.5906097Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:14:29.5906416Z     
2025-01-13T19:14:29.5906575Z         Notes
2025-01-13T19:14:29.5906748Z         -----
2025-01-13T19:14:29.5907023Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:14:29.5907444Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:14:29.5907790Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:14:29.5908037Z         """
2025-01-13T19:14:29.5908202Z         if (
2025-01-13T19:14:29.5908398Z             isinstance(path_or_buf, str)
2025-01-13T19:14:29.5908659Z             and os.path.exists(path_or_buf)
2025-01-13T19:14:29.5908907Z             and not overwrite
2025-01-13T19:14:29.5909122Z         ):
2025-01-13T19:14:29.5909306Z             raise FileExistsError(
2025-01-13T19:14:29.5909614Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:14:29.5909988Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:14:29.5910286Z             )
2025-01-13T19:14:29.5910459Z     
2025-01-13T19:14:29.5910617Z         else:
2025-01-13T19:14:29.5910868Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:14:29.5911320Z                 buf = pd.HDFStore(
2025-01-13T19:14:29.5911600Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:14:29.5911885Z                 )
2025-01-13T19:14:29.5912080Z             except TypeError as e:
2025-01-13T19:14:29.5912355Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:14:29.5912671Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:14:29.5912956Z                     logger.debug(
2025-01-13T19:14:29.5913430Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:14:29.5913901Z                     )
2025-01-13T19:14:29.5914357Z                     buf = path_or_buf
2025-01-13T19:14:29.5914746Z                 else:
2025-01-13T19:14:29.5915027Z                     raise e
2025-01-13T19:14:29.5915231Z     
2025-01-13T19:14:29.5915401Z         if not buf.is_open:
2025-01-13T19:14:29.5915612Z             buf.open()
2025-01-13T19:14:29.5915811Z     
2025-01-13T19:14:29.5915971Z         scalars = {}
2025-01-13T19:14:29.5916193Z         for key, value in elements.items():
2025-01-13T19:14:29.5916448Z             if value is None:
2025-01-13T19:14:29.5916668Z                 value = "none"
2025-01-13T19:14:29.5916899Z             if hasattr(value, "cgs"):
2025-01-13T19:14:29.5917146Z                 value = value.cgs.value
2025-01-13T19:14:29.5917395Z             if np.isscalar(value):
2025-01-13T19:14:29.5917627Z                 scalars[key] = value
2025-01-13T19:14:29.5917877Z             elif hasattr(value, "shape"):
2025-01-13T19:14:29.5918129Z                 if value.ndim == 1:
2025-01-13T19:14:29.5918420Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:14:29.5918723Z                     try:
2025-01-13T19:14:29.5918948Z                         pd.Series(value).to_hdf(
2025-01-13T19:14:29.5919236Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5919507Z                         )
2025-01-13T19:14:29.5919739Z                     except NotImplementedError:
2025-01-13T19:14:29.5920004Z                         logger.debug(
2025-01-13T19:14:29.5920320Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:14:29.5920790Z                         )
2025-01-13T19:14:29.5921013Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:14:29.5921301Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5921560Z                         )
2025-01-13T19:14:29.5921754Z                 else:
2025-01-13T19:14:29.5922029Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5922424Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:14:29.5922739Z                 try:
2025-01-13T19:14:29.5922991Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:14:29.5923220Z 
2025-01-13T19:14:29.5923306Z tardis/io/util.py:283: 
2025-01-13T19:14:29.5923547Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5923834Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:14:29.5924075Z     data = self.get_properties()
2025-01-13T19:14:29.5924471Z tardis/io/util.py:298: in get_properties
2025-01-13T19:14:29.5924810Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:14:29.5925216Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.5925587Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.5925999Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.5926428Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.5926839Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.5927156Z     res = self.make_source_function()
2025-01-13T19:14:29.5927429Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5927760Z 
2025-01-13T19:14:29.5927983Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16dee736e0>
2025-01-13T19:14:29.5928288Z 
2025-01-13T19:14:29.5928380Z     def make_source_function(self):
2025-01-13T19:14:29.5928615Z         """
2025-01-13T19:14:29.5928955Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.5929357Z     
2025-01-13T19:14:29.5929708Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.5930209Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.5930521Z     
2025-01-13T19:14:29.5930682Z         Parameters
2025-01-13T19:14:29.5930871Z         ----------
2025-01-13T19:14:29.5931092Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.5931344Z     
2025-01-13T19:14:29.5931511Z         Returns
2025-01-13T19:14:29.5931699Z         -------
2025-01-13T19:14:29.5932036Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.5932426Z         """
2025-01-13T19:14:29.5932591Z     
2025-01-13T19:14:29.5932787Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.5933062Z         # slice for the active shells
2025-01-13T19:14:29.5933305Z         local_slice = slice(
2025-01-13T19:14:29.5933578Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.5933914Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.5933986Z         )
2025-01-13T19:14:29.5934060Z     
2025-01-13T19:14:29.5934147Z         transport = self.transport
2025-01-13T19:14:29.5934391Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.5934479Z         transition_probabilities = (
2025-01-13T19:14:29.5934663Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.5934736Z         )
2025-01-13T19:14:29.5934954Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.5934960Z 
2025-01-13T19:14:29.5935096Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.5935216Z 
2025-01-13T19:14:29.5935390Z During handling of the above exception, another exception occurred:
2025-01-13T19:14:29.5935395Z 
2025-01-13T19:14:29.5935565Z hdf_file_path = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5935797Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16dee71190>
2025-01-13T19:14:29.5935802Z 
2025-01-13T19:14:29.5935895Z     @pytest.fixture(scope="class")
2025-01-13T19:14:29.5936032Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:14:29.5936127Z >       simulation_verysimple.to_hdf(
2025-01-13T19:14:29.5936219Z             hdf_file_path, overwrite=True
2025-01-13T19:14:29.5936311Z         )  # save sim at hdf_file_path
2025-01-13T19:14:29.5936319Z 
2025-01-13T19:14:29.5936469Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:14:29.5936586Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5936681Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:14:29.5936831Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:14:29.5936925Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:14:29.5937039Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5937325Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:14:29.5937409Z     return func(*args, **kwargs)
2025-01-13T19:14:29.5937675Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:14:29.5937754Z     pytables.to_hdf(
2025-01-13T19:14:29.5938013Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:14:29.5938216Z     f(store)
2025-01-13T19:14:29.5938478Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:14:29.5938573Z     f = lambda store: store.put(
2025-01-13T19:14:29.5938828Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:14:29.5938914Z     self._write_to_group(
2025-01-13T19:14:29.5939203Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:14:29.5939281Z     s.write(
2025-01-13T19:14:29.5939531Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:14:29.5939697Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:14:29.5939966Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:14:29.5940052Z     vlarr.append(value)
2025-01-13T19:14:29.5940294Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:14:29.5940390Z     sequence = atom.toarray(sequence)
2025-01-13T19:14:29.5940621Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:14:29.5940722Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:14:29.5940838Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5940843Z 
2025-01-13T19:14:29.5940920Z self = ObjectAtom()
2025-01-13T19:14:29.5941141Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x7f16da073f80>]],
2025-01-13T19:14:29.5941217Z       dtype=object)
2025-01-13T19:14:29.5941221Z 
2025-01-13T19:14:29.5941312Z     def _tobuffer(self, object_):
2025-01-13T19:14:29.5941449Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:14:29.5941586Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.5941595Z 
2025-01-13T19:14:29.5941828Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:14:29.5942021Z ______ ERROR at setup of TestHDFShellInfo.test_level_count_data[3-20-20] _______
2025-01-13T19:14:29.5942108Z 
2025-01-13T19:14:29.5942276Z path_or_buf = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5942354Z path = 'simulation'
2025-01-13T19:14:29.5942651Z elements = {'iterations_electron_densities': array([[2.86954465e+09, 2.18528594e+09, 1.68079721e+09, 1.30480386e+09,
2025-01-13T19:14:29.5942746Z         1.02...      , 0.        , 0.        , 0.        ,
2025-01-13T19:14:29.5942851Z         0.        , 0.        , 0.        , 0.        , 0.        ]]), ...}
2025-01-13T19:14:29.5942970Z overwrite = True, complevel = 9, complib = 'blosc'
2025-01-13T19:14:29.5942975Z 
2025-01-13T19:14:29.5943052Z     @staticmethod
2025-01-13T19:14:29.5943129Z     def to_hdf_util(
2025-01-13T19:14:29.5943300Z         path_or_buf, path, elements, overwrite, complevel=9, complib="blosc"
2025-01-13T19:14:29.5943379Z     ):
2025-01-13T19:14:29.5943447Z         """
2025-01-13T19:14:29.5943591Z         A function to uniformly store TARDIS data to an HDF file.
2025-01-13T19:14:29.5943660Z     
2025-01-13T19:14:29.5943799Z         Scalars will be stored in a Series under path/scalars
2025-01-13T19:14:29.5943961Z         1D arrays will be stored under path/property_name as distinct Series
2025-01-13T19:14:29.5944138Z         2D arrays will be stored under path/property_name as distinct DataFrames
2025-01-13T19:14:29.5944205Z     
2025-01-13T19:14:29.5944404Z         Units will be stored as their CGS value
2025-01-13T19:14:29.5944472Z     
2025-01-13T19:14:29.5944551Z         Parameters
2025-01-13T19:14:29.5944623Z         ----------
2025-01-13T19:14:29.5944754Z         path_or_buf : str or pandas.io.pytables.HDFStore
2025-01-13T19:14:29.5944848Z             Path or buffer to the HDF file
2025-01-13T19:14:29.5944926Z         path : str
2025-01-13T19:14:29.5945160Z             Path inside the HDF file to store the `elements`
2025-01-13T19:14:29.5945244Z         elements : dict
2025-01-13T19:14:29.5945365Z             A dict of property names and their values to be
2025-01-13T19:14:29.5945435Z             stored.
2025-01-13T19:14:29.5945525Z         overwrite : bool
2025-01-13T19:14:29.5945684Z             If the HDF file path already exists, whether to overwrite it or not
2025-01-13T19:14:29.5945757Z     
2025-01-13T19:14:29.5945825Z         Notes
2025-01-13T19:14:29.5945899Z         -----
2025-01-13T19:14:29.5946068Z         `overwrite` option doesn't have any effect when `path_or_buf` is an
2025-01-13T19:14:29.5946233Z         HDFStore because the user decides on the mode in which they have
2025-01-13T19:14:29.5946331Z         opened the HDFStore ('r', 'w' or 'a').
2025-01-13T19:14:29.5946405Z         """
2025-01-13T19:14:29.5946473Z         if (
2025-01-13T19:14:29.5946569Z             isinstance(path_or_buf, str)
2025-01-13T19:14:29.5946665Z             and os.path.exists(path_or_buf)
2025-01-13T19:14:29.5946756Z             and not overwrite
2025-01-13T19:14:29.5946830Z         ):
2025-01-13T19:14:29.5946916Z             raise FileExistsError(
2025-01-13T19:14:29.5947064Z                 "The specified HDF file already exists. If you still want "
2025-01-13T19:14:29.5947203Z                 "to overwrite it, set function parameter overwrite=True"
2025-01-13T19:14:29.5947276Z             )
2025-01-13T19:14:29.5947344Z     
2025-01-13T19:14:29.5947417Z         else:
2025-01-13T19:14:29.5947567Z             try:  # when path_or_buf is a str, the HDFStore should get created
2025-01-13T19:14:29.5947653Z                 buf = pd.HDFStore(
2025-01-13T19:14:29.5947776Z                     path_or_buf, complevel=complevel, complib=complib
2025-01-13T19:14:29.5947854Z                 )
2025-01-13T19:14:29.5947941Z             except TypeError as e:
2025-01-13T19:14:29.5948056Z                 if str(e) == "Expected bytes, got HDFStore":
2025-01-13T19:14:29.5948183Z                     # when path_or_buf is an HDFStore buffer instead
2025-01-13T19:14:29.5948268Z                     logger.debug(
2025-01-13T19:14:29.5948427Z                         "Expected bytes, got HDFStore. Changing path to HDF buffer"
2025-01-13T19:14:29.5948616Z                     )
2025-01-13T19:14:29.5948705Z                     buf = path_or_buf
2025-01-13T19:14:29.5948775Z                 else:
2025-01-13T19:14:29.5948853Z                     raise e
2025-01-13T19:14:29.5948920Z     
2025-01-13T19:14:29.5949003Z         if not buf.is_open:
2025-01-13T19:14:29.5949078Z             buf.open()
2025-01-13T19:14:29.5949149Z     
2025-01-13T19:14:29.5949220Z         scalars = {}
2025-01-13T19:14:29.5949318Z         for key, value in elements.items():
2025-01-13T19:14:29.5949395Z             if value is None:
2025-01-13T19:14:29.5949478Z                 value = "none"
2025-01-13T19:14:29.5949563Z             if hasattr(value, "cgs"):
2025-01-13T19:14:29.5949654Z                 value = value.cgs.value
2025-01-13T19:14:29.5949740Z             if np.isscalar(value):
2025-01-13T19:14:29.5949828Z                 scalars[key] = value
2025-01-13T19:14:29.5949922Z             elif hasattr(value, "shape"):
2025-01-13T19:14:29.5950004Z                 if value.ndim == 1:
2025-01-13T19:14:29.5950151Z                     # This try,except block is only for model.plasma.levels
2025-01-13T19:14:29.5950223Z                     try:
2025-01-13T19:14:29.5950321Z                         pd.Series(value).to_hdf(
2025-01-13T19:14:29.5950424Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5950501Z                         )
2025-01-13T19:14:29.5950599Z                     except NotImplementedError:
2025-01-13T19:14:29.5950685Z                         logger.debug(
2025-01-13T19:14:29.5950842Z                             "Could not convert SERIES to HDF. Converting DATAFRAME to HDF"
2025-01-13T19:14:29.5950921Z                         )
2025-01-13T19:14:29.5951017Z                         pd.DataFrame(value).to_hdf(
2025-01-13T19:14:29.5951255Z                             buf, key=os.path.join(path, key)
2025-01-13T19:14:29.5951332Z                         )
2025-01-13T19:14:29.5951402Z                 else:
2025-01-13T19:14:29.5951563Z                     pd.DataFrame(value).to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5951720Z             else:  # value is a TARDIS object like model, transport or plasma
2025-01-13T19:14:29.5951796Z                 try:
2025-01-13T19:14:29.5951932Z >                   value.to_hdf(buf, path, name=key, overwrite=overwrite)
2025-01-13T19:14:29.5951937Z 
2025-01-13T19:14:29.5952023Z tardis/io/util.py:283: 
2025-01-13T19:14:29.5952132Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5952223Z tardis/io/util.py:335: in to_hdf
2025-01-13T19:14:29.5952309Z     data = self.get_properties()
2025-01-13T19:14:29.5952413Z tardis/io/util.py:298: in get_properties
2025-01-13T19:14:29.5952577Z     data = {name: getattr(self, name) for name in self.full_hdf_properties}
2025-01-13T19:14:29.5952709Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.5952880Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.5953041Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.5953218Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.5953364Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.5953457Z     res = self.make_source_function()
2025-01-13T19:14:29.5953562Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5953567Z 
2025-01-13T19:14:29.5953789Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16dee736e0>
2025-01-13T19:14:29.5953794Z 
2025-01-13T19:14:29.5953881Z     def make_source_function(self):
2025-01-13T19:14:29.5953955Z         """
2025-01-13T19:14:29.5954203Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.5954376Z     
2025-01-13T19:14:29.5954686Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.5954961Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.5955034Z     
2025-01-13T19:14:29.5955108Z         Parameters
2025-01-13T19:14:29.5955198Z         ----------
2025-01-13T19:14:29.5955302Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.5955378Z     
2025-01-13T19:14:29.5955448Z         Returns
2025-01-13T19:14:29.5955524Z         -------
2025-01-13T19:14:29.5955754Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.5955827Z         """
2025-01-13T19:14:29.5955893Z     
2025-01-13T19:14:29.5956004Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.5956090Z         # slice for the active shells
2025-01-13T19:14:29.5956181Z         local_slice = slice(
2025-01-13T19:14:29.5956314Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.5956440Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.5956517Z         )
2025-01-13T19:14:29.5956584Z     
2025-01-13T19:14:29.5956676Z         transport = self.transport
2025-01-13T19:14:29.5956819Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.5956914Z         transition_probabilities = (
2025-01-13T19:14:29.5957096Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.5957169Z         )
2025-01-13T19:14:29.5957387Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.5957392Z 
2025-01-13T19:14:29.5957536Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.5957541Z 
2025-01-13T19:14:29.5957720Z During handling of the above exception, another exception occurred:
2025-01-13T19:14:29.5957836Z 
2025-01-13T19:14:29.5958011Z hdf_file_path = '/tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf'
2025-01-13T19:14:29.5958254Z simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16dee71190>
2025-01-13T19:14:29.5958263Z 
2025-01-13T19:14:29.5958351Z     @pytest.fixture(scope="class")
2025-01-13T19:14:29.5958499Z     def hdf_shell_info(hdf_file_path, simulation_verysimple):
2025-01-13T19:14:29.5958589Z >       simulation_verysimple.to_hdf(
2025-01-13T19:14:29.5958684Z             hdf_file_path, overwrite=True
2025-01-13T19:14:29.5958770Z         )  # save sim at hdf_file_path
2025-01-13T19:14:29.5958775Z 
2025-01-13T19:14:29.5958936Z tardis/visualization/widgets/tests/test_shell_info.py:33: 
2025-01-13T19:14:29.5959055Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5959142Z tardis/io/util.py:337: in to_hdf
2025-01-13T19:14:29.5959298Z     self.to_hdf_util(file_path_or_buf, buff_path, data, overwrite)
2025-01-13T19:14:29.5959392Z tardis/io/util.py:289: in to_hdf_util
2025-01-13T19:14:29.5959511Z     data.to_hdf(buf, key=os.path.join(path, key))
2025-01-13T19:14:29.5959797Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/util/_decorators.py:333: in wrapper
2025-01-13T19:14:29.5959891Z     return func(*args, **kwargs)
2025-01-13T19:14:29.5960156Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/generic.py:2855: in to_hdf
2025-01-13T19:14:29.5960240Z     pytables.to_hdf(
2025-01-13T19:14:29.5960496Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:311: in to_hdf
2025-01-13T19:14:29.5960574Z     f(store)
2025-01-13T19:14:29.5960831Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:293: in <lambda>
2025-01-13T19:14:29.5960926Z     f = lambda store: store.put(
2025-01-13T19:14:29.5961179Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1160: in put
2025-01-13T19:14:29.5961269Z     self._write_to_group(
2025-01-13T19:14:29.5961568Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:1858: in _write_to_group
2025-01-13T19:14:29.5961639Z     s.write(
2025-01-13T19:14:29.5961996Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3333: in write
2025-01-13T19:14:29.5962158Z     self.write_array(f"block{i}_values", blk.values, items=blk_items)
2025-01-13T19:14:29.5962434Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:3172: in write_array
2025-01-13T19:14:29.5962515Z     vlarr.append(value)
2025-01-13T19:14:29.5962760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/vlarray.py:510: in append
2025-01-13T19:14:29.5962851Z     sequence = atom.toarray(sequence)
2025-01-13T19:14:29.5963090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1040: in toarray
2025-01-13T19:14:29.5963182Z     buffer_ = self._tobuffer(object_)
2025-01-13T19:14:29.5963299Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5963304Z 
2025-01-13T19:14:29.5963385Z self = ObjectAtom()
2025-01-13T19:14:29.5963606Z object_ = array([[<tardis.spectrum.base.SpectrumSolver object at 0x7f16da073f80>]],
2025-01-13T19:14:29.5963690Z       dtype=object)
2025-01-13T19:14:29.5963695Z 
2025-01-13T19:14:29.5963778Z     def _tobuffer(self, object_):
2025-01-13T19:14:29.5963925Z >       return pickle.dumps(object_, pickle.HIGHEST_PROTOCOL)
2025-01-13T19:14:29.5964058Z E       TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.5964063Z 
2025-01-13T19:14:29.5964417Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/tables/atom.py:1173: TypeError
2025-01-13T19:14:29.5964531Z =================================== FAILURES ===================================
2025-01-13T19:14:29.5964688Z _____________________ test_calculate_sobolev_line_opacity ______________________
2025-01-13T19:14:29.5964807Z 
2025-01-13T19:14:29.5965049Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16b016f350>
2025-01-13T19:14:29.5965321Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f16af126f30>
2025-01-13T19:14:29.5965333Z 
2025-01-13T19:14:29.5965437Z     def test_calculate_sobolev_line_opacity(
2025-01-13T19:14:29.5965544Z         nb_simulation_verysimple, regression_data
2025-01-13T19:14:29.5965617Z     ):
2025-01-13T19:14:29.5965742Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-13T19:14:29.5965818Z     
2025-01-13T19:14:29.5965928Z         actual = calculate_sobolev_line_opacity(
2025-01-13T19:14:29.5966011Z             legacy_plasma.lines,
2025-01-13T19:14:29.5966118Z             legacy_plasma.level_number_density,
2025-01-13T19:14:29.5966209Z             legacy_plasma.time_explosion,
2025-01-13T19:14:29.5966324Z             legacy_plasma.stimulated_emission_factor,
2025-01-13T19:14:29.5966393Z         )
2025-01-13T19:14:29.5966525Z >       expected = regression_data.sync_dataframe(actual)
2025-01-13T19:14:29.5966530Z 
2025-01-13T19:14:29.5966642Z tardis/opacities/tests/test_tau_sobolev.py:21: 
2025-01-13T19:14:29.5966757Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5966930Z tardis/tests/fixtures/regression_data.py:88: in sync_dataframe
2025-01-13T19:14:29.5967035Z     return pd.read_hdf(self.fpath, key=key)
2025-01-13T19:14:29.5967140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.5967149Z 
2025-01-13T19:14:29.5967526Z path_or_buf = '/home/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_sobolev_line_opacity.h5'
2025-01-13T19:14:29.5967685Z key = 'data', mode = 'r', errors = 'strict', where = None, start = None
2025-01-13T19:14:29.5967862Z stop = None, columns = None, iterator = False, chunksize = None, kwargs = {}
2025-01-13T19:14:29.5967940Z exists = False
2025-01-13T19:14:29.5967949Z 
2025-01-13T19:14:29.5968021Z     def read_hdf(
2025-01-13T19:14:29.5968121Z         path_or_buf: FilePath | HDFStore,
2025-01-13T19:14:29.5968192Z         key=None,
2025-01-13T19:14:29.5968275Z         mode: str = "r",
2025-01-13T19:14:29.5968355Z         errors: str = "strict",
2025-01-13T19:14:29.5968561Z         where: str | list | None = None,
2025-01-13T19:14:29.5968646Z         start: int | None = None,
2025-01-13T19:14:29.5968731Z         stop: int | None = None,
2025-01-13T19:14:29.5968826Z         columns: list[str] | None = None,
2025-01-13T19:14:29.5968905Z         iterator: bool = False,
2025-01-13T19:14:29.5968995Z         chunksize: int | None = None,
2025-01-13T19:14:29.5969064Z         **kwargs,
2025-01-13T19:14:29.5969136Z     ):
2025-01-13T19:14:29.5969204Z         """
2025-01-13T19:14:29.5969325Z         Read from the store, close it if we opened it.
2025-01-13T19:14:29.5969394Z     
2025-01-13T19:14:29.5969565Z         Retrieve pandas object stored in file, optionally based on where
2025-01-13T19:14:29.5969640Z         criteria.
2025-01-13T19:14:29.5969712Z     
2025-01-13T19:14:29.5975811Z         .. warning::
2025-01-13T19:14:29.5975950Z     
2025-01-13T19:14:29.5976193Z            Pandas uses PyTables for reading and writing HDF5 files, which allows
2025-01-13T19:14:29.5976423Z            serializing object-dtype data with pickle when using the "fixed" format.
2025-01-13T19:14:29.5976608Z            Loading pickled data received from untrusted sources can be unsafe.
2025-01-13T19:14:29.5976683Z     
2025-01-13T19:14:29.5976881Z            See: https://docs.python.org/3/library/pickle.html for more.
2025-01-13T19:14:29.5976950Z     
2025-01-13T19:14:29.5977029Z         Parameters
2025-01-13T19:14:29.5977104Z         ----------
2025-01-13T19:14:29.5977238Z         path_or_buf : str, path object, pandas.HDFStore
2025-01-13T19:14:29.5977435Z             Any valid string path is acceptable. Only supports the local file system,
2025-01-13T19:14:29.5977578Z             remote URLs and file-like objects are not supported.
2025-01-13T19:14:29.5977810Z     
2025-01-13T19:14:29.5977955Z             If you want to pass in a path object, pandas accepts any
2025-01-13T19:14:29.5978039Z             ``os.PathLike``.
2025-01-13T19:14:29.5978110Z     
2025-01-13T19:14:29.5978311Z             Alternatively, pandas accepts an open :class:`pandas.HDFStore` object.
2025-01-13T19:14:29.5978382Z     
2025-01-13T19:14:29.5978463Z         key : object, optional
2025-01-13T19:14:29.5978644Z             The group identifier in the store. Can be omitted if the HDF file
2025-01-13T19:14:29.5978745Z             contains a single pandas object.
2025-01-13T19:14:29.5978831Z         mode : {'r', 'r+', 'a'}, default 'r'
2025-01-13T19:14:29.5978986Z             Mode to use when opening the file. Ignored if path_or_buf is a
2025-01-13T19:14:29.5979093Z             :class:`pandas.HDFStore`. Default is 'r'.
2025-01-13T19:14:29.5979185Z         errors : str, default 'strict'
2025-01-13T19:14:29.5979345Z             Specifies how encoding and decoding errors are to be handled.
2025-01-13T19:14:29.5979488Z             See the errors argument for :func:`open` for a full list
2025-01-13T19:14:29.5979562Z             of options.
2025-01-13T19:14:29.5979650Z         where : list, optional
2025-01-13T19:14:29.5979760Z             A list of Term (or convertible) objects.
2025-01-13T19:14:29.5979845Z         start : int, optional
2025-01-13T19:14:29.5979935Z             Row number to start selection.
2025-01-13T19:14:29.5980019Z         stop  : int, optional
2025-01-13T19:14:29.5980113Z             Row number to stop selection.
2025-01-13T19:14:29.5980197Z         columns : list, optional
2025-01-13T19:14:29.5980294Z             A list of columns names to return.
2025-01-13T19:14:29.5980375Z         iterator : bool, optional
2025-01-13T19:14:29.5980477Z             Return an iterator object.
2025-01-13T19:14:29.5988676Z         chunksize : int, optional
2025-01-13T19:14:29.5988918Z             Number of rows to include in an iteration when using an iterator.
2025-01-13T19:14:29.5989006Z         **kwargs
2025-01-13T19:14:29.5989151Z             Additional keyword arguments passed to HDFStore.
2025-01-13T19:14:29.5989220Z     
2025-01-13T19:14:29.5989296Z         Returns
2025-01-13T19:14:29.5989369Z         -------
2025-01-13T19:14:29.5989623Z         object
2025-01-13T19:14:29.5989798Z             The selected object. Return type depends on the object stored.
2025-01-13T19:14:29.5989872Z     
2025-01-13T19:14:29.5989941Z         See Also
2025-01-13T19:14:29.5990020Z         --------
2025-01-13T19:14:29.5990162Z         DataFrame.to_hdf : Write a HDF file from a DataFrame.
2025-01-13T19:14:29.5990278Z         HDFStore : Low-level access to HDF files.
2025-01-13T19:14:29.5990351Z     
2025-01-13T19:14:29.5990426Z         Examples
2025-01-13T19:14:29.5990504Z         --------
2025-01-13T19:14:29.5990677Z         >>> df = pd.DataFrame([[1, 1.0, 'a']], columns=['x', 'y', 'z'])  # doctest: +SKIP
2025-01-13T19:14:29.5990801Z         >>> df.to_hdf('./store.h5', 'data')  # doctest: +SKIP
2025-01-13T19:14:29.5990935Z         >>> reread = pd.read_hdf('./store.h5')  # doctest: +SKIP
2025-01-13T19:14:29.5991010Z         """
2025-01-13T19:14:29.5991102Z         if mode not in ["r", "r+", "a"]:
2025-01-13T19:14:29.5991199Z             raise ValueError(
2025-01-13T19:14:29.5991351Z                 f"mode {mode} is not allowed while performing a read. "
2025-01-13T19:14:29.5991456Z                 f"Allowed modes are r, r+ and a."
2025-01-13T19:14:29.5991527Z             )
2025-01-13T19:14:29.5991615Z         # grab the scope
2025-01-13T19:14:29.5991696Z         if where is not None:
2025-01-13T19:14:29.5991813Z             where = _ensure_term(where, scope_level=1)
2025-01-13T19:14:29.5991887Z     
2025-01-13T19:14:29.5991986Z         if isinstance(path_or_buf, HDFStore):
2025-01-13T19:14:29.5992081Z             if not path_or_buf.is_open:
2025-01-13T19:14:29.5992228Z                 raise OSError("The HDFStore must be open for reading.")
2025-01-13T19:14:29.5992433Z     
2025-01-13T19:14:29.5992516Z             store = path_or_buf
2025-01-13T19:14:29.5992602Z             auto_close = False
2025-01-13T19:14:29.5992671Z         else:
2025-01-13T19:14:29.5992786Z             path_or_buf = stringify_path(path_or_buf)
2025-01-13T19:14:29.5992890Z             if not isinstance(path_or_buf, str):
2025-01-13T19:14:29.5992992Z                 raise NotImplementedError(
2025-01-13T19:14:29.5993137Z                     "Support for generic buffers has not been implemented."
2025-01-13T19:14:29.5993213Z                 )
2025-01-13T19:14:29.5993282Z             try:
2025-01-13T19:14:29.5993394Z                 exists = os.path.exists(path_or_buf)
2025-01-13T19:14:29.5993467Z     
2025-01-13T19:14:29.5993554Z             # if filepath is too long
2025-01-13T19:14:29.5993657Z             except (TypeError, ValueError):
2025-01-13T19:14:29.5993735Z                 exists = False
2025-01-13T19:14:29.5993806Z     
2025-01-13T19:14:29.5993883Z             if not exists:
2025-01-13T19:14:29.5994060Z >               raise FileNotFoundError(f"File {path_or_buf} does not exist")
2025-01-13T19:14:29.5994737Z E               FileNotFoundError: File /home/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_sobolev_line_opacity.h5 does not exist
2025-01-13T19:14:29.5994751Z 
2025-01-13T19:14:29.5995064Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/io/pytables.py:424: FileNotFoundError
2025-01-13T19:14:29.5995226Z ---------------------------- Captured stdout setup -----------------------------
2025-01-13T19:14:29.5995640Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-13T19:14:29.5996106Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-13T19:14:29.5996260Z ---------------------------- Captured stderr setup -----------------------------
2025-01-13T19:14:29.5996265Z 
2025-01-13T19:14:29.5996594Z Iterations:████████████████████████████████████████████████████████████████                4/5 [00:11<00:02,  2.68s/it]
2025-01-13T19:14:29.5996606Z 
2025-01-13T19:14:29.5996839Z Packets:                                                                                   4030/? [00:11<00:00, 34007.17it/s][A
2025-01-13T19:14:29.5997135Z ------------------------------ Captured log setup ------------------------------
2025-01-13T19:14:29.5997649Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-13T19:14:29.5997807Z _________________________ test_calculate_beta_sobolevs _________________________
2025-01-13T19:14:29.5997812Z 
2025-01-13T19:14:29.5998061Z nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f16b016f350>
2025-01-13T19:14:29.5998341Z regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f16af1779b0>
2025-01-13T19:14:29.5998346Z 
2025-01-13T19:14:29.5998551Z     def test_calculate_beta_sobolevs(nb_simulation_verysimple, regression_data):
2025-01-13T19:14:29.5998678Z         legacy_plasma = nb_simulation_verysimple.plasma
2025-01-13T19:14:29.5998752Z     
2025-01-13T19:14:29.5998869Z         tau_sobolevs = calculate_sobolev_line_opacity(
2025-01-13T19:14:29.5998968Z             legacy_plasma.lines,
2025-01-13T19:14:29.5999068Z             legacy_plasma.level_number_density,
2025-01-13T19:14:29.5999167Z             legacy_plasma.time_explosion,
2025-01-13T19:14:29.5999284Z             legacy_plasma.stimulated_emission_factor,
2025-01-13T19:14:29.5999354Z         )
2025-01-13T19:14:29.5999467Z         actual = calculate_beta_sobolev(tau_sobolevs)
2025-01-13T19:14:29.5999581Z >       expected = regression_data.sync_ndarray(actual)
2025-01-13T19:14:29.5999586Z 
2025-01-13T19:14:29.5999705Z tardis/opacities/tests/test_tau_sobolev.py:35: 
2025-01-13T19:14:29.5999816Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6000096Z tardis/tests/fixtures/regression_data.py:111: in sync_ndarray
2025-01-13T19:14:29.6000185Z     return np.load(self.fpath)
2025-01-13T19:14:29.6000296Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6000305Z 
2025-01-13T19:14:29.6000694Z file = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_beta_sobolevs.npy')
2025-01-13T19:14:29.6000881Z mmap_mode = None, allow_pickle = False, fix_imports = True, encoding = 'ASCII'
2025-01-13T19:14:29.6000887Z 
2025-01-13T19:14:29.6000969Z     @set_module('numpy')
2025-01-13T19:14:29.6001132Z     def load(file, mmap_mode=None, allow_pickle=False, fix_imports=True,
2025-01-13T19:14:29.6001289Z              encoding='ASCII', *, max_header_size=format._MAX_HEADER_SIZE):
2025-01-13T19:14:29.6001358Z         """
2025-01-13T19:14:29.6001539Z         Load arrays or pickled objects from ``.npy``, ``.npz`` or pickled files.
2025-01-13T19:14:29.6001606Z     
2025-01-13T19:14:29.6001806Z         .. warning:: Loading files that contain object arrays uses the ``pickle``
2025-01-13T19:14:29.6001952Z                      module, which is not secure against erroneous or maliciously
2025-01-13T19:14:29.6002111Z                      constructed data. Consider passing ``allow_pickle=False`` to
2025-01-13T19:14:29.6002259Z                      load data that is known not to contain object arrays for the
2025-01-13T19:14:29.6002365Z                      safer handling of untrusted sources.
2025-01-13T19:14:29.6002437Z     
2025-01-13T19:14:29.6002512Z         Parameters
2025-01-13T19:14:29.6002590Z         ----------
2025-01-13T19:14:29.6002710Z         file : file-like object, string, or pathlib.Path
2025-01-13T19:14:29.6002845Z             The file to read. File-like objects must support the
2025-01-13T19:14:29.6002955Z             ``seek()`` and ``read()`` methods and must always
2025-01-13T19:14:29.6003098Z             be opened in binary mode.  Pickled files require that the
2025-01-13T19:14:29.6003249Z             file-like object support the ``readline()`` method as well.
2025-01-13T19:14:29.6003367Z         mmap_mode : {None, 'r+', 'r', 'w+', 'c'}, optional
2025-01-13T19:14:29.6003520Z             If not None, then memory-map the file, using the given mode (see
2025-01-13T19:14:29.6003780Z             `numpy.memmap` for a detailed description of the modes).  A
2025-01-13T19:14:29.6003949Z             memory-mapped array is kept on disk. However, it can be accessed
2025-01-13T19:14:29.6004111Z             and sliced like any ndarray.  Memory mapping is especially useful
2025-01-13T19:14:29.6004446Z             for accessing small fragments of large files without reading the
2025-01-13T19:14:29.6004537Z             entire file into memory.
2025-01-13T19:14:29.6004632Z         allow_pickle : bool, optional
2025-01-13T19:14:29.6004807Z             Allow loading pickled object arrays stored in npy files. Reasons for
2025-01-13T19:14:29.6004982Z             disallowing pickles include security, as loading pickled data can
2025-01-13T19:14:29.6005154Z             execute arbitrary code. If pickles are disallowed, loading object
2025-01-13T19:14:29.6005253Z             arrays will fail. Default: False
2025-01-13T19:14:29.6005321Z     
2025-01-13T19:14:29.6005425Z             .. versionchanged:: 1.16.3
2025-01-13T19:14:29.6005551Z                 Made default False in response to CVE-2019-6446.
2025-01-13T19:14:29.6005618Z     
2025-01-13T19:14:29.6005707Z         fix_imports : bool, optional
2025-01-13T19:14:29.6005898Z             Only useful when loading Python 2 generated pickled files on Python 3,
2025-01-13T19:14:29.6006096Z             which includes npy/npz files containing object arrays. If `fix_imports`
2025-01-13T19:14:29.6006264Z             is True, pickle will try to map the old Python 2 names to the new names
2025-01-13T19:14:29.6006350Z             used in Python 3.
2025-01-13T19:14:29.6006434Z         encoding : str, optional
2025-01-13T19:14:29.6006604Z             What encoding to use when reading Python 2 strings. Only useful when
2025-01-13T19:14:29.6006900Z             loading Python 2 generated pickled files in Python 3, which includes
2025-01-13T19:14:29.6007074Z             npy/npz files containing object arrays. Values other than 'latin1',
2025-01-13T19:14:29.6007231Z             'ASCII', and 'bytes' are not allowed, as they can corrupt numerical
2025-01-13T19:14:29.6007319Z             data. Default: 'ASCII'
2025-01-13T19:14:29.6007414Z         max_header_size : int, optional
2025-01-13T19:14:29.6007577Z             Maximum allowed size of the header.  Large headers may not be safe
2025-01-13T19:14:29.6007747Z             to load securely and thus require explicitly passing a larger value.
2025-01-13T19:14:29.6007864Z             See :py:func:`ast.literal_eval()` for details.
2025-01-13T19:14:29.6008029Z             This option is ignored when `allow_pickle` is passed.  In that case
2025-01-13T19:14:29.6008176Z             the file is by definition trusted and the limit is unnecessary.
2025-01-13T19:14:29.6008255Z     
2025-01-13T19:14:29.6008325Z         Returns
2025-01-13T19:14:29.6008401Z         -------
2025-01-13T19:14:29.6008495Z         result : array, tuple, dict, etc.
2025-01-13T19:14:29.6008653Z             Data stored in the file. For ``.npz`` files, the returned instance
2025-01-13T19:14:29.6008816Z             of NpzFile class must be closed to avoid leaking file descriptors.
2025-01-13T19:14:29.6008889Z     
2025-01-13T19:14:29.6008963Z         Raises
2025-01-13T19:14:29.6009032Z         ------
2025-01-13T19:14:29.6009107Z         OSError
2025-01-13T19:14:29.6009230Z             If the input file does not exist or cannot be read.
2025-01-13T19:14:29.6009314Z         UnpicklingError
2025-01-13T19:14:29.6009471Z             If ``allow_pickle=True``, but the file cannot be loaded as a pickle.
2025-01-13T19:14:29.6009549Z         ValueError
2025-01-13T19:14:29.6009710Z             The file contains an object array, but ``allow_pickle=False`` given.
2025-01-13T19:14:29.6009790Z         EOFError
2025-01-13T19:14:29.6009943Z             When calling ``np.load`` multiple times on the same file handle,
2025-01-13T19:14:29.6010041Z             if all data has already been read
2025-01-13T19:14:29.6010108Z     
2025-01-13T19:14:29.6010300Z         See Also
2025-01-13T19:14:29.6010374Z         --------
2025-01-13T19:14:29.6010480Z         save, savez, savez_compressed, loadtxt
2025-01-13T19:14:29.6010650Z         memmap : Create a memory-map to an array stored in a file on disk.
2025-01-13T19:14:29.6010825Z         lib.format.open_memmap : Create or load a memory-mapped ``.npy`` file.
2025-01-13T19:14:29.6010896Z     
2025-01-13T19:14:29.6010964Z         Notes
2025-01-13T19:14:29.6011037Z         -----
2025-01-13T19:14:29.6011193Z         - If the file contains pickle data, then whatever object is stored
2025-01-13T19:14:29.6011284Z           in the pickle is returned.
2025-01-13T19:14:29.6011420Z         - If the file is a ``.npy`` file, then a single array is returned.
2025-01-13T19:14:29.6011568Z         - If the file is a ``.npz`` file, then a dictionary-like object is
2025-01-13T19:14:29.6011737Z           returned, containing ``{filename: array}`` key-value pairs, one for
2025-01-13T19:14:29.6011827Z           each file in the archive.
2025-01-13T19:14:29.6011973Z         - If the file is a ``.npz`` file, the returned value supports the
2025-01-13T19:14:29.6012154Z           context manager protocol in a similar fashion to the open function::
2025-01-13T19:14:29.6012226Z     
2025-01-13T19:14:29.6012312Z             with load('foo.npz') as data:
2025-01-13T19:14:29.6012394Z                 a = data['a']
2025-01-13T19:14:29.6012460Z     
2025-01-13T19:14:29.6012630Z           The underlying file descriptor is closed when exiting the 'with'
2025-01-13T19:14:29.6012697Z           block.
2025-01-13T19:14:29.6012766Z     
2025-01-13T19:14:29.6012839Z         Examples
2025-01-13T19:14:29.6012914Z         --------
2025-01-13T19:14:29.6013008Z         Store data to disk, and load it again:
2025-01-13T19:14:29.6013175Z     
2025-01-13T19:14:29.6013296Z         >>> np.save('/tmp/123', np.array([[1, 2, 3], [4, 5, 6]]))
2025-01-13T19:14:29.6013379Z         >>> np.load('/tmp/123.npy')
2025-01-13T19:14:29.6013459Z         array([[1, 2, 3],
2025-01-13T19:14:29.6013534Z                [4, 5, 6]])
2025-01-13T19:14:29.6013605Z     
2025-01-13T19:14:29.6013725Z         Store compressed data to disk, and load it again:
2025-01-13T19:14:29.6013799Z     
2025-01-13T19:14:29.6013883Z         >>> a=np.array([[1, 2, 3], [4, 5, 6]])
2025-01-13T19:14:29.6013967Z         >>> b=np.array([1, 2])
2025-01-13T19:14:29.6014057Z         >>> np.savez('/tmp/123.npz', a=a, b=b)
2025-01-13T19:14:29.6014152Z         >>> data = np.load('/tmp/123.npz')
2025-01-13T19:14:29.6014381Z         >>> data['a']
2025-01-13T19:14:29.6014472Z         array([[1, 2, 3],
2025-01-13T19:14:29.6014543Z                [4, 5, 6]])
2025-01-13T19:14:29.6014619Z         >>> data['b']
2025-01-13T19:14:29.6014691Z         array([1, 2])
2025-01-13T19:14:29.6014776Z         >>> data.close()
2025-01-13T19:14:29.6014849Z     
2025-01-13T19:14:29.6014987Z         Mem-map the stored array, and then access the second row
2025-01-13T19:14:29.6015071Z         directly from disk:
2025-01-13T19:14:29.6015142Z     
2025-01-13T19:14:29.6015251Z         >>> X = np.load('/tmp/123.npy', mmap_mode='r')
2025-01-13T19:14:29.6015321Z         >>> X[1, :]
2025-01-13T19:14:29.6015404Z         memmap([4, 5, 6])
2025-01-13T19:14:29.6015470Z     
2025-01-13T19:14:29.6015550Z         """
2025-01-13T19:14:29.6015662Z         if encoding not in ('ASCII', 'latin1', 'bytes'):
2025-01-13T19:14:29.6015810Z             # The 'encoding' value for pickle also affects what encoding
2025-01-13T19:14:29.6015939Z             # the serialized binary data of NumPy arrays is loaded
2025-01-13T19:14:29.6016080Z             # in. Pickle does not pass on the encoding information to
2025-01-13T19:14:29.6016217Z             # NumPy. The unpickling code in numpy.core.multiarray is
2025-01-13T19:14:29.6016369Z             # written to assume that unicode data appearing where binary
2025-01-13T19:14:29.6016513Z             # should be is in 'latin1'. 'bytes' is also safe, as is 'ASCII'.
2025-01-13T19:14:29.6016582Z             #
2025-01-13T19:14:29.6016846Z             # Other encoding values can corrupt binary data, and we
2025-01-13T19:14:29.6016999Z             # purposefully disallow them. For the same reason, the errors=
2025-01-13T19:14:29.6017084Z 
2025-01-13T19:14:29.6017089Z 
2025-01-13T19:14:29.6018000Z Packets:   ████████████████████████████████████████████████████████████████████████████████4000/4000 [00:18<00:00, 217.42it/s]  [A/home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/tables/file.py:113: UnclosedFileWarning:
2025-01-13T19:14:29.6018009Z 
2025-01-13T19:14:29.6018223Z Closing remaining open file: /tmp/pytest-of-runner/pytest-0/hdf_buffer0/test.hdf
2025-01-13T19:14:29.6018228Z 
2025-01-13T19:14:29.6018359Z             # argument is not exposed, as values other than 'strict'
2025-01-13T19:14:29.6018505Z             # result can similarly silently corrupt numerical data.
2025-01-13T19:14:29.6018671Z             raise ValueError("encoding must be 'ASCII', 'latin1', or 'bytes'")
2025-01-13T19:14:29.6018745Z     
2025-01-13T19:14:29.6018911Z         pickle_kwargs = dict(encoding=encoding, fix_imports=fix_imports)
2025-01-13T19:14:29.6018984Z     
2025-01-13T19:14:29.6019085Z         with contextlib.ExitStack() as stack:
2025-01-13T19:14:29.6019177Z             if hasattr(file, 'read'):
2025-01-13T19:14:29.6019252Z                 fid = file
2025-01-13T19:14:29.6019335Z                 own_fid = False
2025-01-13T19:14:29.6019405Z             else:
2025-01-13T19:14:29.6019542Z >               fid = stack.enter_context(open(os_fspath(file), "rb"))
2025-01-13T19:14:29.6020050Z E               FileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_beta_sobolevs.npy'
2025-01-13T19:14:29.6020175Z 
2025-01-13T19:14:29.6020465Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/numpy/lib/npyio.py:427: FileNotFoundError
2025-01-13T19:14:29.6020731Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-downbranch] ___
2025-01-13T19:14:29.6020741Z 
2025-01-13T19:14:29.6021072Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f16e0566e40>
2025-01-13T19:14:29.6021273Z simulation = <tardis.simulation.base.Simulation object at 0x7f16adb87980>
2025-01-13T19:14:29.6021482Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-downbranch]>>
2025-01-13T19:14:29.6021492Z 
2025-01-13T19:14:29.6021630Z     def test_spectrum_integrated(self, simulation, request):
2025-01-13T19:14:29.6021742Z         regression_data = RegressionData(request)
2025-01-13T19:14:29.6021933Z >       luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-13T19:14:29.6021938Z 
2025-01-13T19:14:29.6022076Z tardis/tests/test_tardis_full_formal_integral.py:96: 
2025-01-13T19:14:29.6022190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6022319Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.6022487Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.6022659Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.6022832Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.6022981Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.6023078Z     res = self.make_source_function()
2025-01-13T19:14:29.6023185Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6023190Z 
2025-01-13T19:14:29.6023409Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16b3dbd130>
2025-01-13T19:14:29.6023414Z 
2025-01-13T19:14:29.6023500Z     def make_source_function(self):
2025-01-13T19:14:29.6023577Z         """
2025-01-13T19:14:29.6023821Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.6023894Z     
2025-01-13T19:14:29.6024153Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.6024571Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.6024643Z     
2025-01-13T19:14:29.6024717Z         Parameters
2025-01-13T19:14:29.6024796Z         ----------
2025-01-13T19:14:29.6024923Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.6024994Z     
2025-01-13T19:14:29.6025063Z         Returns
2025-01-13T19:14:29.6025149Z         -------
2025-01-13T19:14:29.6025384Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.6025457Z         """
2025-01-13T19:14:29.6025523Z     
2025-01-13T19:14:29.6025630Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.6025722Z         # slice for the active shells
2025-01-13T19:14:29.6025808Z         local_slice = slice(
2025-01-13T19:14:29.6025937Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.6026072Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.6026140Z         )
2025-01-13T19:14:29.6026212Z     
2025-01-13T19:14:29.6026300Z         transport = self.transport
2025-01-13T19:14:29.6026448Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.6026543Z         transition_probabilities = (
2025-01-13T19:14:29.6026724Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.6026796Z         )
2025-01-13T19:14:29.6027011Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.6027017Z 
2025-01-13T19:14:29.6027161Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.6027534Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-macroatom] ___
2025-01-13T19:14:29.6027539Z 
2025-01-13T19:14:29.6027873Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f16e0567650>
2025-01-13T19:14:29.6028074Z simulation = <tardis.simulation.base.Simulation object at 0x7f16b3d30da0>
2025-01-13T19:14:29.6028281Z request = <FixtureRequest for <Function test_spectrum_integrated[-1-macroatom]>>
2025-01-13T19:14:29.6028285Z 
2025-01-13T19:14:29.6028428Z     def test_spectrum_integrated(self, simulation, request):
2025-01-13T19:14:29.6028536Z         regression_data = RegressionData(request)
2025-01-13T19:14:29.6028731Z >       luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-13T19:14:29.6028736Z 
2025-01-13T19:14:29.6028865Z tardis/tests/test_tardis_full_formal_integral.py:96: 
2025-01-13T19:14:29.6028982Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6029108Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.6029281Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.6029438Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.6029620Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.6029769Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.6029859Z     res = self.make_source_function()
2025-01-13T19:14:29.6029967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6029972Z 
2025-01-13T19:14:29.6030186Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16cadf4c80>
2025-01-13T19:14:29.6030191Z 
2025-01-13T19:14:29.6030282Z     def make_source_function(self):
2025-01-13T19:14:29.6030350Z         """
2025-01-13T19:14:29.6030598Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.6030670Z     
2025-01-13T19:14:29.6030931Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.6031084Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.6031265Z     
2025-01-13T19:14:29.6031346Z         Parameters
2025-01-13T19:14:29.6031419Z         ----------
2025-01-13T19:14:29.6031527Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.6031595Z     
2025-01-13T19:14:29.6031671Z         Returns
2025-01-13T19:14:29.6031740Z         -------
2025-01-13T19:14:29.6031980Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.6032050Z         """
2025-01-13T19:14:29.6032122Z     
2025-01-13T19:14:29.6032226Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.6032322Z         # slice for the active shells
2025-01-13T19:14:29.6032404Z         local_slice = slice(
2025-01-13T19:14:29.6032545Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.6032669Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.6032743Z         )
2025-01-13T19:14:29.6032814Z     
2025-01-13T19:14:29.6032908Z         transport = self.transport
2025-01-13T19:14:29.6033053Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.6033143Z         transition_probabilities = (
2025-01-13T19:14:29.6033331Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.6033400Z         )
2025-01-13T19:14:29.6033620Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.6033625Z 
2025-01-13T19:14:29.6033762Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.6034005Z ___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-macroatom] ___
2025-01-13T19:14:29.6034009Z 
2025-01-13T19:14:29.6034524Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f16e0567860>
2025-01-13T19:14:29.6034880Z simulation = <tardis.simulation.base.Simulation object at 0x7f16cac57e90>
2025-01-13T19:14:29.6035088Z request = <FixtureRequest for <Function test_spectrum_integrated[30-macroatom]>>
2025-01-13T19:14:29.6035098Z 
2025-01-13T19:14:29.6035240Z     def test_spectrum_integrated(self, simulation, request):
2025-01-13T19:14:29.6035350Z         regression_data = RegressionData(request)
2025-01-13T19:14:29.6035546Z >       luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-13T19:14:29.6035551Z 
2025-01-13T19:14:29.6035682Z tardis/tests/test_tardis_full_formal_integral.py:96: 
2025-01-13T19:14:29.6035796Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6035917Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.6036094Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.6036259Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.6036440Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.6036590Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.6036684Z     res = self.make_source_function()
2025-01-13T19:14:29.6036795Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6036800Z 
2025-01-13T19:14:29.6037016Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16cf5c6390>
2025-01-13T19:14:29.6037021Z 
2025-01-13T19:14:29.6037113Z     def make_source_function(self):
2025-01-13T19:14:29.6037182Z         """
2025-01-13T19:14:29.6037430Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.6037497Z     
2025-01-13T19:14:29.6037761Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.6037925Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.6037993Z     
2025-01-13T19:14:29.6038071Z         Parameters
2025-01-13T19:14:29.6038144Z         ----------
2025-01-13T19:14:29.6038366Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.6038433Z     
2025-01-13T19:14:29.6038511Z         Returns
2025-01-13T19:14:29.6038580Z         -------
2025-01-13T19:14:29.6038816Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.6038884Z         """
2025-01-13T19:14:29.6038955Z     
2025-01-13T19:14:29.6039058Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.6039151Z         # slice for the active shells
2025-01-13T19:14:29.6039232Z         local_slice = slice(
2025-01-13T19:14:29.6039364Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.6039485Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.6039562Z         )
2025-01-13T19:14:29.6039634Z     
2025-01-13T19:14:29.6039721Z         transport = self.transport
2025-01-13T19:14:29.6039864Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.6039958Z         transition_probabilities = (
2025-01-13T19:14:29.6040142Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.6040208Z         )
2025-01-13T19:14:29.6040422Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.6040427Z 
2025-01-13T19:14:29.6040566Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.6040802Z __ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-downbranch] ___
2025-01-13T19:14:29.6040807Z 
2025-01-13T19:14:29.6041132Z self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f16e05677a0>
2025-01-13T19:14:29.6041337Z simulation = <tardis.simulation.base.Simulation object at 0x7f16d0ffc200>
2025-01-13T19:14:29.6041635Z request = <FixtureRequest for <Function test_spectrum_integrated[30-downbranch]>>
2025-01-13T19:14:29.6041640Z 
2025-01-13T19:14:29.6041777Z     def test_spectrum_integrated(self, simulation, request):
2025-01-13T19:14:29.6041891Z         regression_data = RegressionData(request)
2025-01-13T19:14:29.6042080Z >       luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
2025-01-13T19:14:29.6042085Z 
2025-01-13T19:14:29.6042223Z tardis/tests/test_tardis_full_formal_integral.py:96: 
2025-01-13T19:14:29.6042330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6042456Z tardis/spectrum/base.py:87: in spectrum_integrated
2025-01-13T19:14:29.6042624Z     self._spectrum_integrated = self.integrator.calculate_spectrum(
2025-01-13T19:14:29.6042785Z tardis/spectrum/formal_integral.py:405: in calculate_spectrum
2025-01-13T19:14:29.6042964Z     luminosity = u.Quantity(self.formal_integral(frequency, N), "erg") * (
2025-01-13T19:14:29.6043114Z tardis/spectrum/formal_integral.py:658: in formal_integral
2025-01-13T19:14:29.6043207Z     res = self.make_source_function()
2025-01-13T19:14:29.6043310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-13T19:14:29.6043319Z 
2025-01-13T19:14:29.6043538Z self = <tardis.spectrum.formal_integral.FormalIntegrator object at 0x7f16cc3aa990>
2025-01-13T19:14:29.6043543Z 
2025-01-13T19:14:29.6043628Z     def make_source_function(self):
2025-01-13T19:14:29.6043702Z         """
2025-01-13T19:14:29.6043942Z         Calculates the source function using the line absorption rate estimator `Edotlu_estimator`
2025-01-13T19:14:29.6044014Z     
2025-01-13T19:14:29.6044418Z         Formally it calculates the expression ( 1 - exp(-tau_ul) ) S_ul but this product is what we need later,
2025-01-13T19:14:29.6044568Z         so there is no need to factor out the source function explicitly.
2025-01-13T19:14:29.6044638Z     
2025-01-13T19:14:29.6044716Z         Parameters
2025-01-13T19:14:29.6044796Z         ----------
2025-01-13T19:14:29.6044897Z         model : tardis.model.SimulationState
2025-01-13T19:14:29.6044967Z     
2025-01-13T19:14:29.6045036Z         Returns
2025-01-13T19:14:29.6045228Z         -------
2025-01-13T19:14:29.6045457Z         Numpy array containing ( 1 - exp(-tau_ul) ) S_ul ordered by wavelength of the transition u -> l
2025-01-13T19:14:29.6045529Z         """
2025-01-13T19:14:29.6045594Z     
2025-01-13T19:14:29.6045700Z         simulation_state = self.simulation_state
2025-01-13T19:14:29.6045785Z         # slice for the active shells
2025-01-13T19:14:29.6045871Z         local_slice = slice(
2025-01-13T19:14:29.6045994Z             simulation_state.geometry.v_inner_boundary_index,
2025-01-13T19:14:29.6046118Z             simulation_state.geometry.v_outer_boundary_index,
2025-01-13T19:14:29.6046191Z         )
2025-01-13T19:14:29.6046257Z     
2025-01-13T19:14:29.6046347Z         transport = self.transport
2025-01-13T19:14:29.6046487Z         montecarlo_transport_state = transport.transport_state
2025-01-13T19:14:29.6046580Z         transition_probabilities = (
2025-01-13T19:14:29.6046754Z >           self.original_plasma.transition_probabilities.iloc[:, local_slice]
2025-01-13T19:14:29.6046834Z         )
2025-01-13T19:14:29.6047043Z E       AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.6047049Z 
2025-01-13T19:14:29.6047188Z tardis/spectrum/formal_integral.py:448: AttributeError
2025-01-13T19:14:29.6047301Z =============================== warnings summary ===============================
2025-01-13T19:14:29.6047421Z tardis/io/configuration/config_validator.py:6
2025-01-13T19:14:29.6047536Z tardis/io/configuration/config_validator.py:6
2025-01-13T19:14:29.6047847Z   /home/runner/work/tardis/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
2025-01-13T19:14:29.6047925Z   
2025-01-13T19:14:29.6049072Z   jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
2025-01-13T19:14:29.6049194Z 
2025-01-13T19:14:29.6049443Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22
2025-01-13T19:14:29.6049807Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
2025-01-13T19:14:29.6049880Z   
2025-01-13T19:14:29.6050025Z   Jupyter is migrating its paths to use standard platformdirs
2025-01-13T19:14:29.6050183Z   given by the platformdirs library.  To remove this warning and
2025-01-13T19:14:29.6050352Z   see the appropriate new directories, set the environment variable
2025-01-13T19:14:29.6050497Z   `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
2025-01-13T19:14:29.6050660Z   The use of platformdirs will be the default in `jupyter_core` v6
2025-01-13T19:14:29.6050665Z 
2025-01-13T19:14:29.6050815Z tardis/io/tests/test_HDFWriter.py::test_multi_index_write
2025-01-13T19:14:29.6051085Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:14:29.6051302Z   /home/runner/work/tardis/tardis/tardis/io/util.py:276: PerformanceWarning:
2025-01-13T19:14:29.6051376Z   
2025-01-13T19:14:29.6051442Z   
2025-01-13T19:14:29.6051657Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-13T19:14:29.6051924Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-13T19:14:29.6051929Z 
2025-01-13T19:14:29.6052122Z tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
2025-01-13T19:14:29.6052342Z tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
2025-01-13T19:14:29.6052580Z tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
2025-01-13T19:14:29.6052764Z tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
2025-01-13T19:14:29.6053078Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
2025-01-13T19:14:29.6053242Z   
2025-01-13T19:14:29.6053360Z   The current CMFGEN model parser is deprecated
2025-01-13T19:14:29.6053365Z 
2025-01-13T19:14:29.6053483Z tardis/io/tests/test_model_reader.py: 1 warning
2025-01-13T19:14:29.6053661Z tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
2025-01-13T19:14:29.6053971Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
2025-01-13T19:14:29.6054042Z   
2025-01-13T19:14:29.6054148Z   The current CMFGEN model parser is deprecated
2025-01-13T19:14:29.6054154Z 
2025-01-13T19:14:29.6054462Z tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
2025-01-13T19:14:29.6054844Z   /home/runner/work/tardis/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
2025-01-13T19:14:29.6054914Z   
2025-01-13T19:14:29.6055191Z   [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m
2025-01-13T19:14:29.6055201Z 
2025-01-13T19:14:29.6055308Z tardis/model/tests/test_base.py: 6 warnings
2025-01-13T19:14:29.6055425Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-13T19:14:29.6055605Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-13T19:14:29.6055889Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
2025-01-13T19:14:29.6055955Z   
2025-01-13T19:14:29.6056063Z   v_inner_boundary < 0, assuming default value
2025-01-13T19:14:29.6056068Z 
2025-01-13T19:14:29.6056168Z tardis/model/tests/test_base.py: 6 warnings
2025-01-13T19:14:29.6056287Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-13T19:14:29.6056460Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-13T19:14:29.6056864Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
2025-01-13T19:14:29.6056931Z   
2025-01-13T19:14:29.6057035Z   v_outer_boundary < 0, assuming default value
2025-01-13T19:14:29.6057044Z 
2025-01-13T19:14:29.6057517Z tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
2025-01-13T19:14:29.6057827Z   /home/runner/work/tardis/tardis/tardis/plasma/equilibrium/level_populations.py:65: FutureWarning:
2025-01-13T19:14:29.6057899Z   
2025-01-13T19:14:29.6058177Z   A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
2025-01-13T19:14:29.6058632Z   The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.
2025-01-13T19:14:29.6058707Z   
2025-01-13T19:14:29.6059265Z   For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.
2025-01-13T19:14:29.6059272Z 
2025-01-13T19:14:29.6059424Z tardis/plasma/tests/test_complete_plasmas.py: 20 warnings
2025-01-13T19:14:29.6059714Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:14:29.6059785Z   
2025-01-13T19:14:29.6059875Z   Property "atomic_mass" not found
2025-01-13T19:14:29.6059880Z 
2025-01-13T19:14:29.6060322Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
2025-01-13T19:14:29.6060709Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
2025-01-13T19:14:29.6060995Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:14:29.6061065Z   
2025-01-13T19:14:29.6061169Z   Property "j_blues_norm_factor" not found
2025-01-13T19:14:29.6061174Z 
2025-01-13T19:14:29.6061595Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
2025-01-13T19:14:29.6062087Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
2025-01-13T19:14:29.6062369Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:14:29.6062436Z   
2025-01-13T19:14:29.6062539Z   Property "j_blue_estimator" not found
2025-01-13T19:14:29.6062544Z 
2025-01-13T19:14:29.6062932Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
2025-01-13T19:14:29.6063286Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
2025-01-13T19:14:29.6063570Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:14:29.6063641Z   
2025-01-13T19:14:29.6063731Z   Property "volume" not found
2025-01-13T19:14:29.6063740Z 
2025-01-13T19:14:29.6064137Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
2025-01-13T19:14:29.6064618Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
2025-01-13T19:14:29.6064897Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-13T19:14:29.6064968Z   
2025-01-13T19:14:29.6065053Z   Property "r_inner" not found
2025-01-13T19:14:29.6065057Z 
2025-01-13T19:14:29.6065274Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
2025-01-13T19:14:29.6065489Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
2025-01-13T19:14:29.6065814Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
2025-01-13T19:14:29.6066058Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
2025-01-13T19:14:29.6066131Z   
2025-01-13T19:14:29.6066328Z   Requesting inner boundary below inner shell. Extrapolating the inner cell
2025-01-13T19:14:29.6066333Z 
2025-01-13T19:14:29.6066544Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-13T19:14:29.6066750Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:70: UserWarning:
2025-01-13T19:14:29.6066815Z   
2025-01-13T19:14:29.6067147Z   SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0
2025-01-13T19:14:29.6067153Z 
2025-01-13T19:14:29.6067361Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-13T19:14:29.6067565Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:111: UserWarning:
2025-01-13T19:14:29.6067641Z   
2025-01-13T19:14:29.6067994Z   SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.
2025-01-13T19:14:29.6067999Z 
2025-01-13T19:14:29.6068218Z tardis/transport/montecarlo/tests/test_vpacket.py::test_trace_vpacket_volley
2025-01-13T19:14:29.6068332Z   <string>:3: NumbaPendingDeprecationWarning:
2025-01-13T19:14:29.6068402Z   
2025-01-13T19:14:29.6069458Z   [1m[1mCode using Numba extension API maybe depending on 'old_style' error-capturing, which is deprecated and will be replaced by 'new_style' in a future release. See details at https://numba.readthedocs.io/en/latest/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors
2025-01-13T19:14:29.6069543Z   Exception origin:
2025-01-13T19:14:29.6069801Z     File "/home/runner/micromamba/envs/tardis/lib/python3.12/inspect.py", line 3180, in _bind
2025-01-13T19:14:29.6069894Z       raise TypeError(msg) from None
2025-01-13T19:14:29.6069994Z   [0m[0m
2025-01-13T19:14:29.6070000Z 
2025-01-13T19:14:29.6070339Z tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
2025-01-13T19:14:29.6070628Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
2025-01-13T19:14:29.6070815Z   
2025-01-13T19:14:29.6071684Z   More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
2025-01-13T19:14:29.6071690Z 
2025-01-13T19:14:29.6072054Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6072415Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6072777Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6073127Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6073487Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6073836Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6074200Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-13T19:14:29.6074361Z   
2025-01-13T19:14:29.6074563Z   Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
2025-01-13T19:14:29.6074747Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-13T19:14:29.6074988Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-13T19:14:29.6075105Z 
2025-01-13T19:14:29.6075471Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6075828Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6076194Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-13T19:14:29.6076261Z   
2025-01-13T19:14:29.6076448Z   Passing unrecognized arguments to super(FloatText).__init__(min=0).
2025-01-13T19:14:29.6076621Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-13T19:14:29.6076864Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-13T19:14:29.6076869Z 
2025-01-13T19:14:29.6077231Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-13T19:14:29.6077590Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-13T19:14:29.6077663Z   
2025-01-13T19:14:29.6077846Z   Passing unrecognized arguments to super(HTML).__init__(indent=True).
2025-01-13T19:14:29.6078020Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-13T19:14:29.6078251Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-13T19:14:29.6078256Z 
2025-01-13T19:14:29.6078697Z tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
2025-01-13T19:14:29.6079038Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/qgridnext/grid.py:820: DeprecationWarning:
2025-01-13T19:14:29.6079106Z   
2025-01-13T19:14:29.6079383Z   QgridWidget._precision_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.
2025-01-13T19:14:29.6079392Z 
2025-01-13T19:14:29.6079655Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:14:29.6079917Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:14:29.6080239Z   /home/runner/work/tardis/tardis/tardis/io/util.py:289: PerformanceWarning:
2025-01-13T19:14:29.6080312Z   
2025-01-13T19:14:29.6080378Z   
2025-01-13T19:14:29.6080587Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-13T19:14:29.6080844Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-13T19:14:29.6080855Z 
2025-01-13T19:14:29.6081109Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:14:29.6081320Z   /home/runner/work/tardis/tardis/tardis/io/util.py:292: PerformanceWarning:
2025-01-13T19:14:29.6081388Z   
2025-01-13T19:14:29.6081462Z   
2025-01-13T19:14:29.6081662Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-13T19:14:29.6081841Z   map directly to c-types [inferred_type->mixed,key->values] [items->None]
2025-01-13T19:14:29.6081851Z 
2025-01-13T19:14:29.6082101Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-13T19:14:29.6082352Z   /home/runner/work/tardis/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
2025-01-13T19:14:29.6082420Z   
2025-01-13T19:14:29.6082612Z   The number of interpolate_shells was not specified. The value was set to 80.
2025-01-13T19:14:29.6082617Z 
2025-01-13T19:14:29.6082808Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-01-13T19:14:29.6082813Z 
2025-01-13T19:14:29.6082974Z ---------- coverage: platform linux, python 3.12.4-final-0 -----------
2025-01-13T19:14:29.6083100Z Coverage HTML written to dir coverage_html_report
2025-01-13T19:14:29.6083201Z Coverage XML written to file coverage.xml
2025-01-13T19:14:29.6083287Z 
2025-01-13T19:14:29.6083418Z =========================== short test summary info ============================
2025-01-13T19:14:29.6084190Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_sobolev_line_opacity - FileNotFoundError: File /home/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_sobolev_line_opacity.h5 does not exist
2025-01-13T19:14:29.6085072Z FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_beta_sobolevs - FileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/tardis/tardis/tardis-regression-data/test_tau_sobolev/test_calculate_beta_sobolevs.npy'
2025-01-13T19:14:29.6085741Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-downbranch] - AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.6086388Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-macroatom] - AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.6087042Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-macroatom] - AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.6087695Z FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-downbranch] - AttributeError: 'FormalIntegrator' object has no attribute 'original_plasma'
2025-01-13T19:14:29.6088151Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.6088626Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_element_count_data[1] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.6089102Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_element_count_data[20] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.6089565Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_ion_count_data[12-1] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.6090188Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_ion_count_data[20-20] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.6090665Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_level_count_data[2-12-1] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.6091144Z ERROR tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_level_count_data[3-20-20] - TypeError: cannot pickle 'PacketCollection' object
2025-01-13T19:14:29.6091436Z = 6 failed, 1425 passed, 329 skipped, 2 deselected, 19 xfailed, 8 xpassed, 92 warnings, 7 errors in 637.36s (0:10:37) =
2025-01-13T19:14:31.7391802Z ##[error]Process completed with exit code 1.
