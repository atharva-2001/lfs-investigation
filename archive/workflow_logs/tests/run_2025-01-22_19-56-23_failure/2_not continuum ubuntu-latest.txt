2025-01-22T19:56:24.6183176Z Requested labels: ubuntu-latest
2025-01-22T19:56:24.6183406Z Job defined at: tardis-sn/tardis/.github/workflows/tests.yml@refs/pull/2896/merge
2025-01-22T19:56:24.6183495Z Waiting for a runner to pick up this job...
2025-01-22T19:56:24.8670882Z Job is waiting for a hosted runner to come online.
2025-01-22T19:56:27.9929752Z Job is about to start running on the hosted runner: GitHub Actions 6 (hosted)
2025-01-22T19:56:29.3935985Z Current runner version: '2.321.0'
2025-01-22T19:56:29.3976002Z ##[group]Operating System
2025-01-22T19:56:29.3977232Z Ubuntu
2025-01-22T19:56:29.3978227Z 24.04.1
2025-01-22T19:56:29.3979095Z LTS
2025-01-22T19:56:29.3979961Z ##[endgroup]
2025-01-22T19:56:29.3980975Z ##[group]Runner Image
2025-01-22T19:56:29.3981966Z Image: ubuntu-24.04
2025-01-22T19:56:29.3982824Z Version: 20250105.1.0
2025-01-22T19:56:29.3984940Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250105.1/images/ubuntu/Ubuntu2404-Readme.md
2025-01-22T19:56:29.3987415Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250105.1
2025-01-22T19:56:29.3989098Z ##[endgroup]
2025-01-22T19:56:29.3990128Z ##[group]Runner Image Provisioner
2025-01-22T19:56:29.3991199Z 2.0.417.1
2025-01-22T19:56:29.3992080Z ##[endgroup]
2025-01-22T19:56:29.3996472Z ##[group]GITHUB_TOKEN Permissions
2025-01-22T19:56:29.3999423Z Actions: read
2025-01-22T19:56:29.4000638Z Attestations: read
2025-01-22T19:56:29.4001635Z Checks: read
2025-01-22T19:56:29.4002579Z Contents: read
2025-01-22T19:56:29.4003718Z Deployments: read
2025-01-22T19:56:29.4004710Z Discussions: read
2025-01-22T19:56:29.4005738Z Issues: read
2025-01-22T19:56:29.4006603Z Metadata: read
2025-01-22T19:56:29.4007426Z Packages: read
2025-01-22T19:56:29.4008324Z Pages: read
2025-01-22T19:56:29.4009132Z PullRequests: read
2025-01-22T19:56:29.4010025Z RepositoryProjects: read
2025-01-22T19:56:29.4011117Z SecurityEvents: read
2025-01-22T19:56:29.4012097Z Statuses: read
2025-01-22T19:56:29.4012987Z ##[endgroup]
2025-01-22T19:56:29.4017728Z Secret source: None
2025-01-22T19:56:29.4018933Z Prepare workflow directory
2025-01-22T19:56:29.4638840Z Prepare all required actions
2025-01-22T19:56:29.4674670Z Getting action download info
2025-01-22T19:56:29.6237209Z Download action repository 'actions/checkout@v4' (SHA:11bd71901bbe5b1630ceea73d27597364c9af683)
2025-01-22T19:56:29.7088330Z Download action repository 'actions/upload-artifact@v4' (SHA:65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08)
2025-01-22T19:56:30.0692641Z Complete job name: not continuum ubuntu-latest 
2025-01-22T19:56:30.1354953Z ##[group]Run actions/checkout@v4
2025-01-22T19:56:30.1355762Z with:
2025-01-22T19:56:30.1356159Z   repository: tardis-sn/tardis
2025-01-22T19:56:30.1356778Z   token: ***
2025-01-22T19:56:30.1357152Z   ssh-strict: true
2025-01-22T19:56:30.1357543Z   ssh-user: git
2025-01-22T19:56:30.1357945Z   persist-credentials: true
2025-01-22T19:56:30.1358389Z   clean: true
2025-01-22T19:56:30.1358790Z   sparse-checkout-cone-mode: true
2025-01-22T19:56:30.1359269Z   fetch-depth: 1
2025-01-22T19:56:30.1359653Z   fetch-tags: false
2025-01-22T19:56:30.1360048Z   show-progress: true
2025-01-22T19:56:30.1360448Z   lfs: false
2025-01-22T19:56:30.1360806Z   submodules: false
2025-01-22T19:56:30.1361208Z   set-safe-directory: true
2025-01-22T19:56:30.1361816Z env:
2025-01-22T19:56:30.1362168Z   CACHE_NUMBER: 0
2025-01-22T19:56:30.1363285Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:30.1364665Z   CODECOV_TOKEN: 
2025-01-22T19:56:30.1365058Z ##[endgroup]
2025-01-22T19:56:30.3260462Z Syncing repository: tardis-sn/tardis
2025-01-22T19:56:30.3262259Z ##[group]Getting Git version info
2025-01-22T19:56:30.3262915Z Working directory is '/home/runner/work/tardis/tardis'
2025-01-22T19:56:30.3264110Z [command]/usr/bin/git version
2025-01-22T19:56:30.3340086Z git version 2.47.1
2025-01-22T19:56:30.3370115Z ##[endgroup]
2025-01-22T19:56:30.3386042Z Temporarily overriding HOME='/home/runner/work/_temp/7c09c00e-c0fc-4b7e-9f91-d956f5f6f491' before making global git config changes
2025-01-22T19:56:30.3388452Z Adding repository directory to the temporary git global config as a safe directory
2025-01-22T19:56:30.3392568Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/tardis/tardis
2025-01-22T19:56:30.3428834Z Deleting the contents of '/home/runner/work/tardis/tardis'
2025-01-22T19:56:30.3432922Z ##[group]Initializing the repository
2025-01-22T19:56:30.3437730Z [command]/usr/bin/git init /home/runner/work/tardis/tardis
2025-01-22T19:56:30.3514750Z hint: Using 'master' as the name for the initial branch. This default branch name
2025-01-22T19:56:30.3516113Z hint: is subject to change. To configure the initial branch name to use in all
2025-01-22T19:56:30.3516997Z hint: of your new repositories, which will suppress this warning, call:
2025-01-22T19:56:30.3517643Z hint:
2025-01-22T19:56:30.3518268Z hint: 	git config --global init.defaultBranch <name>
2025-01-22T19:56:30.3518854Z hint:
2025-01-22T19:56:30.3519395Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2025-01-22T19:56:30.3520259Z hint: 'development'. The just-created branch can be renamed via this command:
2025-01-22T19:56:30.3520941Z hint:
2025-01-22T19:56:30.3521409Z hint: 	git branch -m <name>
2025-01-22T19:56:30.3525042Z Initialized empty Git repository in /home/runner/work/tardis/tardis/.git/
2025-01-22T19:56:30.3536668Z [command]/usr/bin/git remote add origin https://github.com/tardis-sn/tardis
2025-01-22T19:56:30.3571609Z ##[endgroup]
2025-01-22T19:56:30.3572820Z ##[group]Disabling automatic garbage collection
2025-01-22T19:56:30.3576752Z [command]/usr/bin/git config --local gc.auto 0
2025-01-22T19:56:30.3605806Z ##[endgroup]
2025-01-22T19:56:30.3607048Z ##[group]Setting up auth
2025-01-22T19:56:30.3613292Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-01-22T19:56:30.3647952Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-01-22T19:56:30.3981758Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-01-22T19:56:30.4015560Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-01-22T19:56:30.4265606Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-01-22T19:56:30.4305074Z ##[endgroup]
2025-01-22T19:56:30.4307502Z ##[group]Fetching the repository
2025-01-22T19:56:30.4316863Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +e5d983518277e1f81d209a7b5ac6f97421774b71:refs/remotes/pull/2896/merge
2025-01-22T19:56:31.5371791Z From https://github.com/tardis-sn/tardis
2025-01-22T19:56:31.5372940Z  * [new ref]         e5d983518277e1f81d209a7b5ac6f97421774b71 -> pull/2896/merge
2025-01-22T19:56:31.5395841Z ##[endgroup]
2025-01-22T19:56:31.5397297Z ##[group]Determining the checkout info
2025-01-22T19:56:31.5398997Z ##[endgroup]
2025-01-22T19:56:31.5404184Z [command]/usr/bin/git sparse-checkout disable
2025-01-22T19:56:31.5443020Z [command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
2025-01-22T19:56:31.5469680Z ##[group]Checking out the ref
2025-01-22T19:56:31.5472857Z [command]/usr/bin/git checkout --progress --force refs/remotes/pull/2896/merge
2025-01-22T19:56:31.7546752Z Note: switching to 'refs/remotes/pull/2896/merge'.
2025-01-22T19:56:31.7547984Z 
2025-01-22T19:56:31.7548855Z You are in 'detached HEAD' state. You can look around, make experimental
2025-01-22T19:56:31.7550986Z changes and commit them, and you can discard any commits you make in this
2025-01-22T19:56:31.7553146Z state without impacting any branches by switching back to a branch.
2025-01-22T19:56:31.7554619Z 
2025-01-22T19:56:31.7555468Z If you want to create a new branch to retain commits you create, you may
2025-01-22T19:56:31.7557420Z do so (now or later) by using -c with the switch command. Example:
2025-01-22T19:56:31.7558534Z 
2025-01-22T19:56:31.7559045Z   git switch -c <new-branch-name>
2025-01-22T19:56:31.7559838Z 
2025-01-22T19:56:31.7560341Z Or undo this operation with:
2025-01-22T19:56:31.7561121Z 
2025-01-22T19:56:31.7561903Z   git switch -
2025-01-22T19:56:31.7562542Z 
2025-01-22T19:56:31.7563780Z Turn off this advice by setting config variable advice.detachedHead to false
2025-01-22T19:56:31.7565286Z 
2025-01-22T19:56:31.7566863Z HEAD is now at e5d9835 Merge 1f8d8524740167c2c88b80936654c70e37793c60 into ae0258463989e6da4742a80583fab03a19ae940c
2025-01-22T19:56:31.7573237Z ##[endgroup]
2025-01-22T19:56:31.7615720Z [command]/usr/bin/git log -1 --format=%H
2025-01-22T19:56:31.7638086Z e5d983518277e1f81d209a7b5ac6f97421774b71
2025-01-22T19:56:31.8004616Z Prepare all required actions
2025-01-22T19:56:31.8006069Z Getting action download info
2025-01-22T19:56:31.9095443Z Download action repository 'actions/cache@v4' (SHA:1bd1e32a3bdc45362d1e726936510720a7c30a57)
2025-01-22T19:56:32.0394445Z ##[group]Run ./.github/actions/setup_lfs
2025-01-22T19:56:32.0394804Z with:
2025-01-22T19:56:32.0395108Z   regression-data-repo: tardis-sn/tardis-regression-data
2025-01-22T19:56:32.0395462Z env:
2025-01-22T19:56:32.0395701Z   CACHE_NUMBER: 0
2025-01-22T19:56:32.0396379Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:32.0397084Z   CODECOV_TOKEN: 
2025-01-22T19:56:32.0397307Z ##[endgroup]
2025-01-22T19:56:32.0520562Z ##[group]Run actions/checkout@v4
2025-01-22T19:56:32.0520865Z with:
2025-01-22T19:56:32.0521125Z   repository: tardis-sn/tardis-regression-data
2025-01-22T19:56:32.0521461Z   path: tardis-regression-data
2025-01-22T19:56:32.0521920Z   token: ***
2025-01-22T19:56:32.0522153Z   ssh-strict: true
2025-01-22T19:56:32.0522396Z   ssh-user: git
2025-01-22T19:56:32.0522649Z   persist-credentials: true
2025-01-22T19:56:32.0522905Z   clean: true
2025-01-22T19:56:32.0523153Z   sparse-checkout-cone-mode: true
2025-01-22T19:56:32.0523440Z   fetch-depth: 1
2025-01-22T19:56:32.0523810Z   fetch-tags: false
2025-01-22T19:56:32.0524050Z   show-progress: true
2025-01-22T19:56:32.0524285Z   lfs: false
2025-01-22T19:56:32.0524503Z   submodules: false
2025-01-22T19:56:32.0524747Z   set-safe-directory: true
2025-01-22T19:56:32.0524997Z env:
2025-01-22T19:56:32.0525191Z   CACHE_NUMBER: 0
2025-01-22T19:56:32.0525855Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:32.0526564Z   CODECOV_TOKEN: 
2025-01-22T19:56:32.0526834Z ##[endgroup]
2025-01-22T19:56:32.1460300Z Syncing repository: tardis-sn/tardis-regression-data
2025-01-22T19:56:32.1466682Z ##[group]Getting Git version info
2025-01-22T19:56:32.1467464Z Working directory is '/home/runner/work/tardis/tardis/tardis-regression-data'
2025-01-22T19:56:32.1513855Z [command]/usr/bin/git version
2025-01-22T19:56:32.1549371Z git version 2.47.1
2025-01-22T19:56:32.1574290Z ##[endgroup]
2025-01-22T19:56:32.1586733Z Temporarily overriding HOME='/home/runner/work/_temp/60ebbfc2-4a60-4ad6-9885-6ff319f90f8e' before making global git config changes
2025-01-22T19:56:32.1587650Z Adding repository directory to the temporary git global config as a safe directory
2025-01-22T19:56:32.1591755Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/tardis/tardis/tardis-regression-data
2025-01-22T19:56:32.1621874Z ##[group]Initializing the repository
2025-01-22T19:56:32.1628087Z [command]/usr/bin/git init /home/runner/work/tardis/tardis/tardis-regression-data
2025-01-22T19:56:32.1662975Z hint: Using 'master' as the name for the initial branch. This default branch name
2025-01-22T19:56:32.1664261Z hint: is subject to change. To configure the initial branch name to use in all
2025-01-22T19:56:32.1665235Z hint: of your new repositories, which will suppress this warning, call:
2025-01-22T19:56:32.1665853Z hint:
2025-01-22T19:56:32.1666370Z hint: 	git config --global init.defaultBranch <name>
2025-01-22T19:56:32.1666973Z hint:
2025-01-22T19:56:32.1667577Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2025-01-22T19:56:32.1668540Z hint: 'development'. The just-created branch can be renamed via this command:
2025-01-22T19:56:32.1669605Z hint:
2025-01-22T19:56:32.1670034Z hint: 	git branch -m <name>
2025-01-22T19:56:32.1670981Z Initialized empty Git repository in /home/runner/work/tardis/tardis/tardis-regression-data/.git/
2025-01-22T19:56:32.1676725Z [command]/usr/bin/git remote add origin https://github.com/tardis-sn/tardis-regression-data
2025-01-22T19:56:32.1707255Z ##[endgroup]
2025-01-22T19:56:32.1708031Z ##[group]Disabling automatic garbage collection
2025-01-22T19:56:32.1712985Z [command]/usr/bin/git config --local gc.auto 0
2025-01-22T19:56:32.1740657Z ##[endgroup]
2025-01-22T19:56:32.1741417Z ##[group]Setting up auth
2025-01-22T19:56:32.1747471Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-01-22T19:56:32.1776037Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-01-22T19:56:32.1999229Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-01-22T19:56:32.2028368Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-01-22T19:56:32.2258525Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-01-22T19:56:32.2294798Z ##[endgroup]
2025-01-22T19:56:32.2295660Z ##[group]Determining the default branch
2025-01-22T19:56:32.2298953Z Retrieving the default branch name
2025-01-22T19:56:32.4887274Z Default branch 'main'
2025-01-22T19:56:32.4888586Z ##[endgroup]
2025-01-22T19:56:32.4889362Z ##[group]Fetching the repository
2025-01-22T19:56:32.4895500Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +refs/heads/main:refs/remotes/origin/main
2025-01-22T19:56:32.8150201Z From https://github.com/tardis-sn/tardis-regression-data
2025-01-22T19:56:32.8151259Z  * [new branch]      main       -> origin/main
2025-01-22T19:56:32.8174872Z ##[endgroup]
2025-01-22T19:56:32.8175577Z ##[group]Determining the checkout info
2025-01-22T19:56:32.8177064Z ##[endgroup]
2025-01-22T19:56:32.8182585Z [command]/usr/bin/git sparse-checkout disable
2025-01-22T19:56:32.8218389Z [command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
2025-01-22T19:56:32.8246226Z ##[group]Checking out the ref
2025-01-22T19:56:32.8250784Z [command]/usr/bin/git checkout --progress --force -B main refs/remotes/origin/main
2025-01-22T19:56:32.9431646Z Switched to a new branch 'main'
2025-01-22T19:56:32.9434527Z branch 'main' set up to track 'origin/main'.
2025-01-22T19:56:32.9711719Z ##[endgroup]
2025-01-22T19:56:32.9753178Z [command]/usr/bin/git log -1 --format=%H
2025-01-22T19:56:32.9777190Z fa7729bc9c30e14b69acd641af8b692b56fcd416
2025-01-22T19:56:32.9915289Z ##[group]Run git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
2025-01-22T19:56:32.9915827Z [36;1mgit lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id[0m
2025-01-22T19:56:32.9947522Z shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
2025-01-22T19:56:32.9947850Z env:
2025-01-22T19:56:32.9948017Z   CACHE_NUMBER: 0
2025-01-22T19:56:32.9948626Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:32.9949290Z   CODECOV_TOKEN: 
2025-01-22T19:56:32.9949474Z ##[endgroup]
2025-01-22T19:56:33.1415020Z ##[group]Run actions/cache/restore@v4
2025-01-22T19:56:33.1415324Z with:
2025-01-22T19:56:33.1415515Z   path: tardis-regression-data/.git/lfs
2025-01-22T19:56:33.1415921Z   key: Linux-lfs-21f9fa4b6817cc69b9fae3598144724da7828e276a73bd17f47a2a49d9af090a-v1
2025-01-22T19:56:33.1416326Z   enableCrossOsArchive: false
2025-01-22T19:56:33.1416551Z   fail-on-cache-miss: false
2025-01-22T19:56:33.1416999Z   lookup-only: false
2025-01-22T19:56:33.1417182Z env:
2025-01-22T19:56:33.1417355Z   CACHE_NUMBER: 0
2025-01-22T19:56:33.1417944Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:33.1418590Z   CODECOV_TOKEN: 
2025-01-22T19:56:33.1418775Z ##[endgroup]
2025-01-22T19:56:34.4048212Z Received 343932928 of 1708418946 (20.1%), 327.7 MBs/sec
2025-01-22T19:56:35.4057576Z Received 801112064 of 1708418946 (46.9%), 381.6 MBs/sec
2025-01-22T19:56:36.4101371Z Received 1258291200 of 1708418946 (73.7%), 399.2 MBs/sec
2025-01-22T19:56:37.4123081Z Received 1627389952 of 1708418946 (95.3%), 387.1 MBs/sec
2025-01-22T19:56:37.5924895Z Cache Size: ~1629 MB (1708418946 B)
2025-01-22T19:56:37.6020103Z [command]/usr/bin/tar -xf /home/runner/work/_temp/4e5c6e92-9c32-4618-8409-6b05219a5b20/cache.tzst -P -C /home/runner/work/tardis/tardis --use-compress-program unzstd
2025-01-22T19:56:38.4136102Z Received 1708418946 of 1708418946 (100.0%), 325.2 MBs/sec
2025-01-22T19:56:43.9372808Z Cache restored successfully
2025-01-22T19:56:44.5630493Z Cache restored from key: Linux-lfs-21f9fa4b6817cc69b9fae3598144724da7828e276a73bd17f47a2a49d9af090a-v1
2025-01-22T19:56:44.5803277Z ##[group]Run git lfs checkout
2025-01-22T19:56:44.5803823Z [36;1mgit lfs checkout[0m
2025-01-22T19:56:44.5830270Z shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
2025-01-22T19:56:44.5830596Z env:
2025-01-22T19:56:44.5830763Z   CACHE_NUMBER: 0
2025-01-22T19:56:44.5831390Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:44.5832045Z   CODECOV_TOKEN: 
2025-01-22T19:56:44.5832225Z ##[endgroup]
2025-01-22T19:56:57.8050865Z Checking out LFS objects: 100% (204/204), 3.5 GB | 253 MB/s, done.
2025-01-22T19:56:59.3238343Z Prepare all required actions
2025-01-22T19:56:59.3238689Z Getting action download info
2025-01-22T19:56:59.4182638Z Download action repository 'mamba-org/setup-micromamba@v1' (SHA:4b9113af4fba0e9e1124b252dd6497a419e7396d)
2025-01-22T19:56:59.6304687Z ##[group]Run ./.github/actions/setup_env
2025-01-22T19:56:59.6304948Z with:
2025-01-22T19:56:59.6305120Z   os-label: linux-64
2025-01-22T19:56:59.6305302Z env:
2025-01-22T19:56:59.6305451Z   CACHE_NUMBER: 0
2025-01-22T19:56:59.6306052Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:59.6306678Z   CODECOV_TOKEN: 
2025-01-22T19:56:59.6306856Z ##[endgroup]
2025-01-22T19:56:59.6327683Z ##[group]Run file_hash=$(cat conda-linux-64.lock | shasum -a 256 | cut -d' ' -f1)
2025-01-22T19:56:59.6328175Z [36;1mfile_hash=$(cat conda-linux-64.lock | shasum -a 256 | cut -d' ' -f1)[0m
2025-01-22T19:56:59.6328620Z [36;1mecho "file_hash=$file_hash" >> "${GITHUB_OUTPUT}"[0m
2025-01-22T19:56:59.6354875Z shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
2025-01-22T19:56:59.6355205Z env:
2025-01-22T19:56:59.6355374Z   CACHE_NUMBER: 0
2025-01-22T19:56:59.6355978Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:59.6356609Z   CODECOV_TOKEN: 
2025-01-22T19:56:59.6356789Z ##[endgroup]
2025-01-22T19:56:59.6667729Z ##[group]Run mamba-org/setup-micromamba@v1
2025-01-22T19:56:59.6667990Z with:
2025-01-22T19:56:59.6668178Z   environment-file: conda-linux-64.lock
2025-01-22T19:56:59.6668596Z   cache-environment-key: d7cd390425b0fd3cf82649dcc003efba9915fb4928f15d342148c3ccffcbe2ee
2025-01-22T19:56:59.6669151Z   cache-downloads-key: d7cd390425b0fd3cf82649dcc003efba9915fb4928f15d342148c3ccffcbe2ee
2025-01-22T19:56:59.6669543Z   environment-name: tardis
2025-01-22T19:56:59.6669758Z   cache-environment: true
2025-01-22T19:56:59.6669978Z   cache-downloads: true
2025-01-22T19:56:59.6670163Z env:
2025-01-22T19:56:59.6670319Z   CACHE_NUMBER: 0
2025-01-22T19:56:59.6671060Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:56:59.6671673Z   CODECOV_TOKEN: 
2025-01-22T19:56:59.6671849Z ##[endgroup]
2025-01-22T19:56:59.7998374Z Will download micromamba to /home/runner/micromamba-bin/micromamba
2025-01-22T19:56:59.8007899Z ##[group]Install micromamba
2025-01-22T19:57:00.0862558Z micromamba installed to /home/runner/micromamba-bin/micromamba
2025-01-22T19:57:00.0863425Z ##[endgroup]
2025-01-22T19:57:00.0864703Z Adding conda-forge to condarc channels ...
2025-01-22T19:57:00.0877542Z ##[group]Initialize micromamba for bash.
2025-01-22T19:57:00.0902282Z [command]/home/runner/micromamba-bin/micromamba shell init -s bash -r /home/runner/micromamba --log-level warning --rc-file /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-22T19:57:00.1023687Z Modifying RC file "/home/runner/.bashrc"
2025-01-22T19:57:00.1026109Z Generating config for root prefix [1m"/home/runner/micromamba"[0m
2025-01-22T19:57:00.1027016Z Setting mamba executable to: [1m"/home/runner/micromamba-bin/micromamba"[0m
2025-01-22T19:57:00.1027771Z Adding (or replacing) the following in your "/home/runner/.bashrc" file
2025-01-22T19:57:00.1028212Z 
2025-01-22T19:57:00.1028351Z # >>> mamba initialize >>>
2025-01-22T19:57:00.1028801Z # !! Contents within this block are managed by 'mamba init' !!
2025-01-22T19:57:00.1029399Z export MAMBA_EXE='/home/runner/micromamba-bin/micromamba';
2025-01-22T19:57:00.1029968Z export MAMBA_ROOT_PREFIX='/home/runner/micromamba';
2025-01-22T19:57:00.1030776Z __mamba_setup="$("$MAMBA_EXE" shell hook --shell bash --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
2025-01-22T19:57:00.1031490Z if [ $? -eq 0 ]; then
2025-01-22T19:57:00.1031810Z     eval "$__mamba_setup"
2025-01-22T19:57:00.1032125Z else
2025-01-22T19:57:00.1032834Z     alias micromamba="$MAMBA_EXE"  # Fallback on help from mamba activate
2025-01-22T19:57:00.1033307Z fi
2025-01-22T19:57:00.1033476Z unset __mamba_setup
2025-01-22T19:57:00.1033865Z # <<< mamba initialize <<<
2025-01-22T19:57:00.1034012Z 
2025-01-22T19:57:00.1046812Z Moving mamba initialize block to .bash_profile
2025-01-22T19:57:00.1065586Z ##[endgroup]
2025-01-22T19:57:00.1066912Z ##[group]Restoring downloads from `/home/runner/micromamba/pkgs` ...
2025-01-22T19:57:01.2264361Z Received 327440105 of 356800233 (91.8%), 309.5 MBs/sec
2025-01-22T19:57:01.2637404Z Cache Size: ~340 MB (356800233 B)
2025-01-22T19:57:01.2675611Z [command]/usr/bin/tar -xf /home/runner/work/_temp/8a903380-9a9d-4985-b01a-9bfd9b742511/cache.tzst -P -C /home/runner/work/tardis/tardis --use-compress-program unzstd
2025-01-22T19:57:01.7041529Z Cache restored successfully
2025-01-22T19:57:01.7756808Z Restored cache with key `d7cd390425b0fd3cf82649dcc003efba9915fb4928f15d342148c3ccffcbe2ee-linux-64`
2025-01-22T19:57:01.7758328Z ##[endgroup]
2025-01-22T19:57:01.7768638Z ##[group]Restoring environment `tardis` from `/home/runner/micromamba/envs/tardis` ...
2025-01-22T19:57:02.2266823Z Received 356800233 of 356800233 (100.0%), 169.4 MBs/sec
2025-01-22T19:57:02.8680091Z Received 306184192 of 444592193 (68.9%), 288.3 MBs/sec
2025-01-22T19:57:03.2095145Z Cache Size: ~424 MB (444592193 B)
2025-01-22T19:57:03.2180682Z [command]/usr/bin/tar -xf /home/runner/work/_temp/89ee2927-f75f-41bd-a6a0-7fe18b3b3e95/cache.tzst -P -C /home/runner/work/tardis/tardis --use-compress-program unzstd
2025-01-22T19:57:03.8692074Z Received 444592193 of 444592193 (100.0%), 210.5 MBs/sec
2025-01-22T19:57:08.4048944Z Cache restored successfully
2025-01-22T19:57:08.5065959Z Restored cache with key `d7cd390425b0fd3cf82649dcc003efba9915fb4928f15d342148c3ccffcbe2ee-linux-64-tardis-args-4f53cda-root-dcc80ee-bin-[object Promise]-file-d7cd390425b0fd3cf82649dcc003efba9915fb4928f15d342148c3ccffcbe2ee`
2025-01-22T19:57:08.5071565Z ##[endgroup]
2025-01-22T19:57:08.5075044Z Adding environment tardis to auto-activate bash ...
2025-01-22T19:57:08.5079312Z Generating micromamba run shell.
2025-01-22T19:57:08.5091108Z ##[endgroup]
2025-01-22T19:57:08.5097838Z Set environment variables.
2025-01-22T19:57:08.5102097Z ##[group]micromamba info
2025-01-22T19:57:08.5111326Z [command]/home/runner/micromamba-bin/micromamba info -r /home/runner/micromamba -n tardis
2025-01-22T19:57:08.5342568Z 
2025-01-22T19:57:08.5343026Z        libmamba version : 1.5.10
2025-01-22T19:57:08.5344467Z      micromamba version : 1.5.10
2025-01-22T19:57:08.5345378Z            curl version : libcurl/8.10.1 OpenSSL/3.3.2 zlib/1.3.1 zstd/1.5.6 libssh2/1.11.0 nghttp2/1.58.0
2025-01-22T19:57:08.5346484Z      libarchive version : libarchive 3.7.4 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.6
2025-01-22T19:57:08.5352248Z        envs directories : /home/runner/micromamba/envs
2025-01-22T19:57:08.5352804Z           package cache : /home/runner/micromamba/pkgs
2025-01-22T19:57:08.5353311Z                           /home/runner/.mamba/pkgs
2025-01-22T19:57:08.5353935Z             environment : tardis
2025-01-22T19:57:08.5354401Z            env location : /home/runner/micromamba/envs/tardis
2025-01-22T19:57:08.5354933Z       user config files : /home/runner/.mambarc
2025-01-22T19:57:08.5355561Z  populated config files : /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-22T19:57:08.5356171Z        virtual packages : __unix=0=0
2025-01-22T19:57:08.5356579Z                           __linux=6.8.0=0
2025-01-22T19:57:08.5356981Z                           __glibc=2.39=0
2025-01-22T19:57:08.5357398Z                           __archspec=1=x86_64_v3
2025-01-22T19:57:08.5357958Z                channels : https://conda.anaconda.org/conda-forge/linux-64
2025-01-22T19:57:08.5358580Z                           https://conda.anaconda.org/conda-forge/noarch
2025-01-22T19:57:08.5359113Z        base environment : /home/runner/micromamba
2025-01-22T19:57:08.5359575Z                platform : linux-64
2025-01-22T19:57:08.5365561Z ##[endgroup]
2025-01-22T19:57:08.5366541Z ##[group]micromamba list
2025-01-22T19:57:08.5372459Z [command]/home/runner/micromamba-bin/micromamba list -r /home/runner/micromamba -n tardis
2025-01-22T19:57:08.9278482Z List of packages in environment: "/home/runner/micromamba/envs/tardis"
2025-01-22T19:57:08.9279016Z 
2025-01-22T19:57:08.9279256Z   Name                           Version              Build                    Channel    
2025-01-22T19:57:08.9280270Z ────────────────────────────────────────────────────────────────────────────────────────────
2025-01-22T19:57:08.9280944Z   _libgcc_mutex                  0.1                  conda_forge              conda-forge
2025-01-22T19:57:08.9281562Z   _openmp_mutex                  4.5                  2_gnu                    conda-forge
2025-01-22T19:57:08.9282135Z   alabaster                      0.7.16               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9282692Z   anyio                          4.4.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9283269Z   argon2-cffi                    23.1.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9284131Z   argon2-cffi-bindings           21.2.0               py312h98912ed_4          conda-forge
2025-01-22T19:57:08.9284717Z   arrow                          1.3.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9285249Z   astropy                        6.1.1                py312h085067d_0          conda-forge
2025-01-22T19:57:08.9286015Z   astropy-iers-data              0.2024.6.17.0.31.35  pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9286934Z   astropy-sphinx-theme           1.1                  pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9287688Z   asttokens                      2.4.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9288703Z   async-lru                      2.0.4                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9289398Z   atk-1.0                        2.38.0               h04ea711_2               conda-forge
2025-01-22T19:57:08.9290096Z   attrs                          23.2.0               pyh71513ae_0             conda-forge
2025-01-22T19:57:08.9291035Z   babel                          2.14.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9291619Z   beautifulsoup4                 4.12.3               pyha770c72_0             conda-forge
2025-01-22T19:57:08.9292100Z   bleach                         6.1.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9292540Z   blosc                          1.21.5               hc2324a3_1               conda-forge
2025-01-22T19:57:08.9293036Z   brotli                         1.1.0                hd590300_1               conda-forge
2025-01-22T19:57:08.9293463Z   brotli-bin                     1.1.0                hd590300_1               conda-forge
2025-01-22T19:57:08.9294158Z   brotli-python                  1.1.0                py312h30efb56_1          conda-forge
2025-01-22T19:57:08.9294683Z   bzip2                          1.0.8                hd590300_5               conda-forge
2025-01-22T19:57:08.9308470Z   c-ares                         1.28.1               hd590300_0               conda-forge
2025-01-22T19:57:08.9309076Z   c-blosc2                       2.14.4               hb4ffafa_1               conda-forge
2025-01-22T19:57:08.9309697Z   ca-certificates                2024.6.2             hbcca054_0               conda-forge
2025-01-22T19:57:08.9310367Z   cached-property                1.5.2                hd8ed1ab_1               conda-forge
2025-01-22T19:57:08.9311013Z   cached_property                1.5.2                pyha770c72_1             conda-forge
2025-01-22T19:57:08.9311411Z   cairo                          1.18.0               h3faef2a_0               conda-forge
2025-01-22T19:57:08.9312014Z   certifi                        2024.6.2             pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9312862Z   cffi                           1.16.0               py312hf06ca03_0          conda-forge
2025-01-22T19:57:08.9313856Z   charset-normalizer             3.3.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9314561Z   click                          8.1.7                unix_pyh707e725_0        conda-forge
2025-01-22T19:57:08.9315164Z   codespell                      2.3.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9315787Z   colorama                       0.4.6                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9316347Z   comm                           0.2.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9316889Z   commonmark                     0.9.1                py_0                     conda-forge
2025-01-22T19:57:08.9317489Z   contourpy                      1.2.1                py312h8572e83_0          conda-forge
2025-01-22T19:57:08.9318112Z   coverage                       7.5.3                py312h9a8786e_0          conda-forge
2025-01-22T19:57:08.9318761Z   cycler                         0.12.1               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9319346Z   dataclasses                    0.8                  pyhc8e2a94_3             conda-forge
2025-01-22T19:57:08.9319727Z   debugpy                        1.8.1                py312h30efb56_0          conda-forge
2025-01-22T19:57:08.9320344Z   decorator                      5.1.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9320928Z   defusedxml                     0.7.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9321509Z   docutils                       0.20.1               py312h7900ff3_3          conda-forge
2025-01-22T19:57:08.9322093Z   dot2tex                        2.11.3               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9322692Z   entrypoints                    0.4                  pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9323353Z   exceptiongroup                 1.2.0                pyhd8ed1ab_2             conda-forge
2025-01-22T19:57:08.9324177Z   executing                      2.0.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9325097Z   expat                          2.6.2                h59595ed_0               conda-forge
2025-01-22T19:57:08.9325687Z   font-ttf-dejavu-sans-mono      2.37                 hab24e00_0               conda-forge
2025-01-22T19:57:08.9326134Z   font-ttf-inconsolata           3.000                h77eed37_0               conda-forge
2025-01-22T19:57:08.9326578Z   font-ttf-source-code-pro       2.038                h77eed37_0               conda-forge
2025-01-22T19:57:08.9327011Z   font-ttf-ubuntu                0.83                 h77eed37_2               conda-forge
2025-01-22T19:57:08.9327381Z   fontconfig                     2.14.2               h14ed4e7_0               conda-forge
2025-01-22T19:57:08.9327763Z   fonts-conda-ecosystem          1                    0                        conda-forge
2025-01-22T19:57:08.9328157Z   fonts-conda-forge              1                    0                        conda-forge
2025-01-22T19:57:08.9328519Z   fonttools                      4.53.0               py312h9a8786e_0          conda-forge
2025-01-22T19:57:08.9328864Z   fqdn                           1.5.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9329191Z   freetype                       2.12.1               h267a509_2               conda-forge
2025-01-22T19:57:08.9329528Z   fribidi                        1.0.10               h36c2ea0_0               conda-forge
2025-01-22T19:57:08.9329857Z   future                         1.0.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9330198Z   gdk-pixbuf                     2.42.12              hb9ae30d_0               conda-forge
2025-01-22T19:57:08.9330603Z   giflib                         5.2.2                hd590300_0               conda-forge
2025-01-22T19:57:08.9331100Z   git-lfs                        3.5.1                ha770c72_0               conda-forge
2025-01-22T19:57:08.9331424Z   gmp                            6.3.0                h59595ed_1               conda-forge
2025-01-22T19:57:08.9331745Z   gmpy2                          2.1.5                py312h1d5cde6_1          conda-forge
2025-01-22T19:57:08.9332073Z   graphite2                      1.3.13               h59595ed_1003            conda-forge
2025-01-22T19:57:08.9332416Z   graphviz                       11.0.0               hc68bbd7_0               conda-forge
2025-01-22T19:57:08.9332884Z   gtk2                           2.24.33              h280cfa0_4               conda-forge
2025-01-22T19:57:08.9333397Z   gts                            0.7.6                h977cf35_4               conda-forge
2025-01-22T19:57:08.9334123Z   h11                            0.14.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9334627Z   h2                             4.1.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9335180Z   h5py                           3.11.0               nompi_py312hb7ab980_102  conda-forge
2025-01-22T19:57:08.9335744Z   harfbuzz                       8.5.0                hfac3d4d_0               conda-forge
2025-01-22T19:57:08.9336314Z   hdf5                           1.14.3               nompi_hdf9ad27_105       conda-forge
2025-01-22T19:57:08.9336855Z   hpack                          4.0.0                pyh9f0ad1d_0             conda-forge
2025-01-22T19:57:08.9337422Z   httpcore                       1.0.5                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9338012Z   httpx                          0.27.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9338599Z   hyperframe                     6.0.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9339163Z   icu                            73.2                 h59595ed_0               conda-forge
2025-01-22T19:57:08.9339693Z   idna                           3.7                  pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9340261Z   imagesize                      1.4.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9341076Z   importlib-metadata             7.1.0                pyha770c72_0             conda-forge
2025-01-22T19:57:08.9341752Z   importlib_metadata             7.1.0                hd8ed1ab_0               conda-forge
2025-01-22T19:57:08.9342438Z   importlib_resources            6.4.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9343085Z   iniconfig                      2.0.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9343852Z   ipykernel                      6.29.4               pyh3099207_0             conda-forge
2025-01-22T19:57:08.9344443Z   ipython                        8.25.0               pyh707e725_0             conda-forge
2025-01-22T19:57:08.9345048Z   ipython_genutils               0.2.0                pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9345699Z   ipywidgets                     7.8.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9346327Z   isoduration                    20.11.0              pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9346926Z   jedi                           0.19.1               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9347483Z   jinja2                         3.1.4                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9348044Z   json5                          0.9.25               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9348636Z   jsonpointer                    3.0.0                py312h7900ff3_0          conda-forge
2025-01-22T19:57:08.9349265Z   jsonschema                     4.22.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9350000Z   jsonschema-specifications      2023.12.1            pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9351044Z   jsonschema-with-format-nongpl  4.22.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9351750Z   jupyter-lsp                    2.2.5                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9352351Z   jupyter_client                 8.6.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9352936Z   jupyter_core                   5.7.2                py312h7900ff3_0          conda-forge
2025-01-22T19:57:08.9353654Z   jupyter_events                 0.10.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9354272Z   jupyter_server                 2.14.1               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9354960Z   jupyter_server_terminals       0.5.3                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9355624Z   jupyterlab                     4.2.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9356272Z   jupyterlab_pygments            0.3.0                pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9356999Z   jupyterlab_server              2.27.2               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9357666Z   jupyterlab_widgets             1.1.7                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9358294Z   keyutils                       1.6.1                h166bdaf_0               conda-forge
2025-01-22T19:57:08.9358846Z   kiwisolver                     1.4.5                py312h8572e83_1          conda-forge
2025-01-22T19:57:08.9359387Z   krb5                           1.21.2               h659d440_0               conda-forge
2025-01-22T19:57:08.9359945Z   latexcodec                     2.0.1                pyh9f0ad1d_0             conda-forge
2025-01-22T19:57:08.9360512Z   lcms2                          2.16                 hb7c19ff_0               conda-forge
2025-01-22T19:57:08.9361075Z   ld_impl_linux-64               2.40                 hf3520f5_7               conda-forge
2025-01-22T19:57:08.9361641Z   lerc                           4.0.0                h27087fc_0               conda-forge
2025-01-22T19:57:08.9362178Z   libaec                         1.1.3                h59595ed_0               conda-forge
2025-01-22T19:57:08.9362904Z   libblas                        3.9.0                22_linux64_openblas      conda-forge
2025-01-22T19:57:08.9363649Z   libbrotlicommon                1.1.0                hd590300_1               conda-forge
2025-01-22T19:57:08.9364264Z   libbrotlidec                   1.1.0                hd590300_1               conda-forge
2025-01-22T19:57:08.9364854Z   libbrotlienc                   1.1.0                hd590300_1               conda-forge
2025-01-22T19:57:08.9365446Z   libcblas                       3.9.0                22_linux64_openblas      conda-forge
2025-01-22T19:57:08.9366032Z   libcurl                        8.8.0                hca28451_0               conda-forge
2025-01-22T19:57:08.9366613Z   libdeflate                     1.20                 hd590300_0               conda-forge
2025-01-22T19:57:08.9367228Z   libedit                        3.1.20191231         he28a2e2_2               conda-forge
2025-01-22T19:57:08.9367807Z   libev                          4.33                 hd590300_2               conda-forge
2025-01-22T19:57:08.9368375Z   libexpat                       2.6.2                h59595ed_0               conda-forge
2025-01-22T19:57:08.9368947Z   libffi                         3.4.2                h7f98852_5               conda-forge
2025-01-22T19:57:08.9369518Z   libgcc-ng                      13.2.0               h77fa898_10              conda-forge
2025-01-22T19:57:08.9370088Z   libgd                          2.3.3                h119a65a_9               conda-forge
2025-01-22T19:57:08.9370685Z   libgfortran-ng                 13.2.0               h69a702a_10              conda-forge
2025-01-22T19:57:08.9371331Z   libgfortran5                   13.2.0               h3d2ce59_10              conda-forge
2025-01-22T19:57:08.9371936Z   libglib                        2.80.2               h8a4344b_1               conda-forge
2025-01-22T19:57:08.9372663Z   libgomp                        13.2.0               h77fa898_10              conda-forge
2025-01-22T19:57:08.9373257Z   libiconv                       1.17                 hd590300_2               conda-forge
2025-01-22T19:57:08.9374001Z   libjpeg-turbo                  3.0.0                hd590300_1               conda-forge
2025-01-22T19:57:08.9374628Z   liblapack                      3.9.0                22_linux64_openblas      conda-forge
2025-01-22T19:57:08.9375238Z   libllvm14                      14.0.6               hcd5def8_4               conda-forge
2025-01-22T19:57:08.9375852Z   libnghttp2                     1.58.0               h47da74e_1               conda-forge
2025-01-22T19:57:08.9376440Z   libnsl                         2.0.1                hd590300_0               conda-forge
2025-01-22T19:57:08.9377050Z   libopenblas                    0.3.27               pthreads_h413a1c8_0      conda-forge
2025-01-22T19:57:08.9377671Z   libpng                         1.6.43               h2797004_0               conda-forge
2025-01-22T19:57:08.9378238Z   librsvg                        2.58.1               hadf69e7_0               conda-forge
2025-01-22T19:57:08.9378829Z   libsodium                      1.0.18               h36c2ea0_1               conda-forge
2025-01-22T19:57:08.9379429Z   libsqlite                      3.46.0               hde9e2c9_0               conda-forge
2025-01-22T19:57:08.9380021Z   libssh2                        1.11.0               h0841786_0               conda-forge
2025-01-22T19:57:08.9380619Z   libstdcxx-ng                   13.2.0               hc0a3c3a_10              conda-forge
2025-01-22T19:57:08.9381212Z   libtiff                        4.6.0                h1dd3fc0_3               conda-forge
2025-01-22T19:57:08.9381785Z   libuuid                        2.38.1               h0b41bf4_0               conda-forge
2025-01-22T19:57:08.9382359Z   libwebp                        1.4.0                h2c329e2_0               conda-forge
2025-01-22T19:57:08.9382958Z   libwebp-base                   1.4.0                hd590300_0               conda-forge
2025-01-22T19:57:08.9383810Z   libxcb                         1.15                 h0b41bf4_0               conda-forge
2025-01-22T19:57:08.9384379Z   libxcrypt                      4.4.36               hd590300_1               conda-forge
2025-01-22T19:57:08.9384956Z   libxml2                        2.12.7               hc051c1a_1               conda-forge
2025-01-22T19:57:08.9385517Z   libxslt                        1.1.39               h76b75d6_0               conda-forge
2025-01-22T19:57:08.9386078Z   libzlib                        1.3.1                h4ab18f5_1               conda-forge
2025-01-22T19:57:08.9386659Z   llvmlite                       0.42.0               py312hb06c811_1          conda-forge
2025-01-22T19:57:08.9387220Z   lxml                           5.2.2                py312hb90d8a5_0          conda-forge
2025-01-22T19:57:08.9387764Z   lz4-c                          1.9.4                hcb278e6_0               conda-forge
2025-01-22T19:57:08.9388285Z   lzo                            2.10                 hd590300_1001            conda-forge
2025-01-22T19:57:08.9388847Z   markupsafe                     2.1.5                py312h98912ed_0          conda-forge
2025-01-22T19:57:08.9389485Z   matplotlib-base                3.8.4                py312h20ab3a6_2          conda-forge
2025-01-22T19:57:08.9390156Z   matplotlib-inline              0.1.7                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9390791Z   mistune                        3.0.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9391341Z   mpc                            1.3.1                hfe3b2da_0               conda-forge
2025-01-22T19:57:08.9391865Z   mpfr                           4.2.1                h9458935_1               conda-forge
2025-01-22T19:57:08.9392416Z   mpmath                         1.3.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9393155Z   munkres                        1.1.4                pyh9f0ad1d_0             conda-forge
2025-01-22T19:57:08.9393908Z   mypy_extensions                1.0.0                pyha770c72_0             conda-forge
2025-01-22T19:57:08.9394535Z   nbclassic                      1.1.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9395137Z   nbclient                       0.10.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9395719Z   nbconvert                      7.16.4               hd8ed1ab_1               conda-forge
2025-01-22T19:57:08.9396331Z   nbconvert-core                 7.16.4               pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9396999Z   nbconvert-pandoc               7.16.4               hd8ed1ab_1               conda-forge
2025-01-22T19:57:08.9397647Z   nbformat                       5.10.4               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9398256Z   nbsphinx                       0.9.4                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9398836Z   ncurses                        6.5                  h59595ed_0               conda-forge
2025-01-22T19:57:08.9399442Z   nest-asyncio                   1.6.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9400051Z   networkx                       3.3                  pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9400607Z   nomkl                          1.0                  h5ca1d4c_0               conda-forge
2025-01-22T19:57:08.9401192Z   notebook                       7.2.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9401818Z   notebook-shim                  0.2.4                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9402427Z   numba                          0.59.1               py312hacefee8_0          conda-forge
2025-01-22T19:57:08.9402999Z   numexpr                        2.10.0               py312hf412c99_100        conda-forge
2025-01-22T19:57:08.9403680Z   numpy                          1.26.4               py312heda63a1_0          conda-forge
2025-01-22T19:57:08.9404277Z   numpydoc                       1.7.0                pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9405017Z   openjpeg                       2.5.2                h488ebb8_0               conda-forge
2025-01-22T19:57:08.9405599Z   openssl                        3.3.1                h4ab18f5_0               conda-forge
2025-01-22T19:57:08.9406191Z   overrides                      7.7.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9406793Z   packaging                      24.1                 pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9407349Z   pandas                         2.2.2                py312h1d6d2e6_1          conda-forge
2025-01-22T19:57:08.9407942Z   pandoc                         3.2                  ha770c72_0               conda-forge
2025-01-22T19:57:08.9408560Z   pandocfilters                  1.5.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9409172Z   pango                          1.54.0               h84a9a3c_0               conda-forge
2025-01-22T19:57:08.9409740Z   parso                          0.8.4                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9410324Z   pathspec                       0.12.1               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9410905Z   pbr                            6.0.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9411454Z   pcre2                          10.44                h0f59acf_0               conda-forge
2025-01-22T19:57:08.9412030Z   pexpect                        4.9.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9412639Z   pickleshare                    0.7.5                py_1003                  conda-forge
2025-01-22T19:57:08.9413242Z   pillow                         10.3.0               py312hdcec9eb_0          conda-forge
2025-01-22T19:57:08.9414100Z   pip                            24.0                 pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9414653Z   pixman                         0.43.2               h59595ed_0               conda-forge
2025-01-22T19:57:08.9415312Z   pkgutil-resolve-name           1.3.10               pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9415997Z   platformdirs                   4.2.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9416614Z   plotly                         5.22.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9417182Z   pluggy                         1.5.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9417813Z   prometheus_client              0.20.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9418495Z   prompt-toolkit                 3.0.47               pyha770c72_0             conda-forge
2025-01-22T19:57:08.9419117Z   psutil                         5.9.8                py312h98912ed_0          conda-forge
2025-01-22T19:57:08.9419728Z   pthread-stubs                  0.4                  h36c2ea0_1001            conda-forge
2025-01-22T19:57:08.9420365Z   ptyprocess                     0.7.0                pyhd3deb0d_0             conda-forge
2025-01-22T19:57:08.9420966Z   pure_eval                      0.2.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9421549Z   py-cpuinfo                     9.0.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9422124Z   pybtex                         0.24.0               pyhd8ed1ab_2             conda-forge
2025-01-22T19:57:08.9422730Z   pybtex-docutils                1.0.3                py312h7900ff3_1          conda-forge
2025-01-22T19:57:08.9423350Z   pycparser                      2.22                 pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9424080Z   pyerfa                         2.0.1.4              py312h085067d_1          conda-forge
2025-01-22T19:57:08.9424662Z   pygments                       2.18.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9425238Z   pygraphviz                     1.13                 py312h4a1d8a7_1          conda-forge
2025-01-22T19:57:08.9425981Z   pyparsing                      3.1.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9426555Z   pysocks                        1.7.1                pyha2e5f31_6             conda-forge
2025-01-22T19:57:08.9427124Z   pytables                       3.9.2                py312h96d95ec_2          conda-forge
2025-01-22T19:57:08.9427693Z   pytest                         8.2.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9428264Z   pytest-cov                     5.0.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9428905Z   pytest-doctestplus             1.2.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9429551Z   pytest-html                    4.1.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9430184Z   pytest-metadata                3.1.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9430804Z   python                         3.12.4               h194c7f8_0_cpython       conda-forge
2025-01-22T19:57:08.9431408Z   python-dateutil                2.9.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9432094Z   python-fastjsonschema          2.20.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9432824Z   python-json-logger             2.0.7                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9433635Z   python-tzdata                  2024.1               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9434254Z   python_abi                     3.12                 4_cp312                  conda-forge
2025-01-22T19:57:08.9434795Z   pytz                           2024.1               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9435483Z   pyyaml                         6.0.1                py312h98912ed_1          conda-forge
2025-01-22T19:57:08.9436030Z   pyzmq                          26.0.3               py312h8fd38d8_0          conda-forge
2025-01-22T19:57:08.9436583Z   qgrid                          1.3.1                pyhd8ed1ab_4             conda-forge
2025-01-22T19:57:08.9437199Z   radioactivedecay               0.5.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9437843Z   readline                       8.2                  h8228510_1               conda-forge
2025-01-22T19:57:08.9438455Z   recommonmark                   0.7.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9439095Z   referencing                    0.35.1               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9439713Z   requests                       2.32.3               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9440352Z   rfc3339-validator              0.1.4                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9441049Z   rfc3986-validator              0.1.1                pyh9f0ad1d_0             conda-forge
2025-01-22T19:57:08.9441687Z   rpds-py                        0.18.1               py312h4413252_0          conda-forge
2025-01-22T19:57:08.9442260Z   ruff                           0.4.9                py312h5715c7c_0          conda-forge
2025-01-22T19:57:08.9442812Z   scipy                          1.13.1               py312hc2bc53b_0          conda-forge
2025-01-22T19:57:08.9443407Z   send2trash                     1.8.3                pyh0d859eb_0             conda-forge
2025-01-22T19:57:08.9444169Z   setuptools                     70.0.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9444817Z   setuptools-scm                 8.1.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9445467Z   setuptools_scm                 8.1.0                hd8ed1ab_0               conda-forge
2025-01-22T19:57:08.9446061Z   six                            1.16.0               pyh6c4a22f_0             conda-forge
2025-01-22T19:57:08.9446632Z   snakeviz                       2.2.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9447371Z   snappy                         1.2.0                hdb0a2a9_1               conda-forge
2025-01-22T19:57:08.9447949Z   sniffio                        1.3.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9448584Z   snowballstemmer                2.2.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9449233Z   soupsieve                      2.5                  pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9449824Z   sphinx                         7.3.7                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9450450Z   sphinx-astropy                 1.9.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9451135Z   sphinx-automodapi              0.17.0               pyh717bed2_1             conda-forge
2025-01-22T19:57:08.9451823Z   sphinx-gallery                 0.16.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9452516Z   sphinx-jsonschema              1.19.1               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9453231Z   sphinx_bootstrap_theme         0.8.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9454073Z   sphinx_rtd_theme               2.0.0                pyha770c72_0             conda-forge
2025-01-22T19:57:08.9454724Z   sphinxcontrib-apidoc           0.3.0                py_1                     conda-forge
2025-01-22T19:57:08.9455450Z   sphinxcontrib-applehelp        1.0.8                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9456343Z   sphinxcontrib-bibtex           2.6.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9457106Z   sphinxcontrib-devhelp          1.0.6                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9457784Z   sphinxcontrib-htmlhelp         2.0.5                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9458231Z   sphinxcontrib-jquery           4.1                  pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9458655Z   sphinxcontrib-jsmath           1.0.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9459075Z   sphinxcontrib-qthelp           1.0.7                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9459541Z   sphinxcontrib-serializinghtml  1.1.10               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9459964Z   stack_data                     0.6.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9460303Z   sympy                          1.12.1               pypyh2585a3b_103         conda-forge
2025-01-22T19:57:08.9460649Z   tabulate                       0.9.0                pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9460995Z   tenacity                       8.4.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9461350Z   terminado                      0.18.1               pyh0d859eb_0             conda-forge
2025-01-22T19:57:08.9461704Z   tinycss2                       1.3.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9462033Z   tk                             8.6.13               noxft_h4845f30_101       conda-forge
2025-01-22T19:57:08.9462353Z   toml                           0.10.2               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9462677Z   tomli                          2.0.1                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9463006Z   tornado                        6.4.1                py312h9a8786e_0          conda-forge
2025-01-22T19:57:08.9463337Z   tqdm                           4.66.4               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9463895Z   traitlets                      5.14.3               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9464257Z   typed-ast                      1.5.5                py312h98912ed_1          conda-forge
2025-01-22T19:57:08.9464666Z   types-python-dateutil          2.9.0.20240316       pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9465229Z   typing-extensions              4.12.2               hd8ed1ab_0               conda-forge
2025-01-22T19:57:08.9465630Z   typing_extensions              4.12.2               pyha770c72_0             conda-forge
2025-01-22T19:57:08.9466004Z   typing_utils                   0.1.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9466357Z   tzdata                         2024a                h0c530f3_0               conda-forge
2025-01-22T19:57:08.9466713Z   uri-template                   1.3.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9467065Z   urllib3                        2.2.2                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9467408Z   wcwidth                        0.2.13               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9467763Z   webcolors                      24.6.0               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9468129Z   webencodings                   0.5.1                pyhd8ed1ab_2             conda-forge
2025-01-22T19:57:08.9468516Z   websocket-client               1.8.0                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9468880Z   wheel                          0.43.0               pyhd8ed1ab_1             conda-forge
2025-01-22T19:57:08.9469250Z   widgetsnbextension             3.6.6                pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9469642Z   xorg-kbproto                   1.0.7                h7f98852_1002            conda-forge
2025-01-22T19:57:08.9469999Z   xorg-libice                    1.1.1                hd590300_0               conda-forge
2025-01-22T19:57:08.9470348Z   xorg-libsm                     1.2.4                h7391055_0               conda-forge
2025-01-22T19:57:08.9470835Z   xorg-libx11                    1.8.9                h8ee46fc_0               conda-forge
2025-01-22T19:57:08.9471194Z   xorg-libxau                    1.0.11               hd590300_0               conda-forge
2025-01-22T19:57:08.9471557Z   xorg-libxdmcp                  1.1.3                h7f98852_0               conda-forge
2025-01-22T19:57:08.9471919Z   xorg-libxext                   1.3.4                h0b41bf4_2               conda-forge
2025-01-22T19:57:08.9472299Z   xorg-libxrender                0.9.11               hd590300_0               conda-forge
2025-01-22T19:57:08.9472686Z   xorg-renderproto               0.11.1               h7f98852_1002            conda-forge
2025-01-22T19:57:08.9473066Z   xorg-xextproto                 7.3.0                h0b41bf4_1003            conda-forge
2025-01-22T19:57:08.9473432Z   xorg-xproto                    7.0.31               h7f98852_1007            conda-forge
2025-01-22T19:57:08.9473943Z   xz                             5.2.6                h166bdaf_0               conda-forge
2025-01-22T19:57:08.9474253Z   yaml                           0.2.5                h7f98852_2               conda-forge
2025-01-22T19:57:08.9474585Z   zeromq                         4.3.5                h75354e8_4               conda-forge
2025-01-22T19:57:08.9474943Z   zipp                           3.19.2               pyhd8ed1ab_0             conda-forge
2025-01-22T19:57:08.9475267Z   zlib                           1.3.1                h4ab18f5_1               conda-forge
2025-01-22T19:57:08.9475585Z   zlib-ng                        2.0.7                h0b41bf4_0               conda-forge
2025-01-22T19:57:08.9475901Z   zstd                           1.5.6                ha6fb4c9_0               conda-forge
2025-01-22T19:57:08.9476409Z ##[endgroup]
2025-01-22T19:57:08.9510037Z ##[group]Run pip install -e . --user
2025-01-22T19:57:08.9510357Z [36;1mpip install -e . --user[0m
2025-01-22T19:57:08.9539147Z shell: /usr/bin/bash -l {0}
2025-01-22T19:57:08.9539394Z env:
2025-01-22T19:57:08.9539564Z   CACHE_NUMBER: 0
2025-01-22T19:57:08.9540177Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:57:08.9541011Z   CODECOV_TOKEN: 
2025-01-22T19:57:08.9541243Z   MAMBA_ROOT_PREFIX: /home/runner/micromamba
2025-01-22T19:57:08.9541546Z   MAMBA_EXE: /home/runner/micromamba-bin/micromamba
2025-01-22T19:57:08.9541901Z   CONDARC: /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-22T19:57:08.9542209Z ##[endgroup]
2025-01-22T19:57:09.6712557Z Obtaining file:///home/runner/work/tardis/tardis
2025-01-22T19:57:09.6740942Z   Installing build dependencies: started
2025-01-22T19:57:12.3759423Z   Installing build dependencies: finished with status 'done'
2025-01-22T19:57:12.3765986Z   Checking if build backend supports build_editable: started
2025-01-22T19:57:12.4961572Z   Checking if build backend supports build_editable: finished with status 'done'
2025-01-22T19:57:12.4970320Z   Getting requirements to build editable: started
2025-01-22T19:57:12.9484373Z   Getting requirements to build editable: finished with status 'done'
2025-01-22T19:57:12.9492356Z   Preparing editable metadata (pyproject.toml): started
2025-01-22T19:57:13.4136828Z   Preparing editable metadata (pyproject.toml): finished with status 'done'
2025-01-22T19:57:13.4727766Z Requirement already satisfied: astropy in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from tardis==0.0.0) (6.1.1)
2025-01-22T19:57:13.5118445Z Requirement already satisfied: numpy>=1.23 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from astropy->tardis==0.0.0) (1.26.4)
2025-01-22T19:57:13.5127462Z Requirement already satisfied: pyerfa>=2.0.1.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from astropy->tardis==0.0.0) (2.0.1.4)
2025-01-22T19:57:13.5137699Z Requirement already satisfied: astropy-iers-data>=0.2024.5.27.0.30.8 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from astropy->tardis==0.0.0) (0.2024.6.17.0.31.35)
2025-01-22T19:57:13.5145921Z Requirement already satisfied: PyYAML>=3.13 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from astropy->tardis==0.0.0) (6.0.1)
2025-01-22T19:57:13.5155524Z Requirement already satisfied: packaging>=19.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from astropy->tardis==0.0.0) (24.1)
2025-01-22T19:57:13.5244227Z Building wheels for collected packages: tardis
2025-01-22T19:57:13.5252704Z   Building editable for tardis (pyproject.toml): started
2025-01-22T19:57:14.2752112Z   Building editable for tardis (pyproject.toml): finished with status 'done'
2025-01-22T19:57:14.2758711Z   Created wheel for tardis: filename=tardis-0.0.0-0.editable-py3-none-any.whl size=8876 sha256=93cc0a9722df93e413d0617b9bcbe6a069286ba9fc75e1b9a3aefb7613d72b8e
2025-01-22T19:57:14.2759956Z   Stored in directory: /tmp/pip-ephem-wheel-cache-edhm874h/wheels/6a/c7/ae/89fa6dc2565455898176888ef0e2e475e4e90eb0124afcb995
2025-01-22T19:57:14.2786336Z Successfully built tardis
2025-01-22T19:57:15.0421453Z Installing collected packages: tardis
2025-01-22T19:57:15.0546238Z Successfully installed tardis-0.0.0
2025-01-22T19:57:15.2808999Z ##[group]Run pip install qgridnext
2025-01-22T19:57:15.2809315Z [36;1mpip install qgridnext[0m
2025-01-22T19:57:15.2835743Z shell: /usr/bin/bash -l {0}
2025-01-22T19:57:15.2835983Z env:
2025-01-22T19:57:15.2836155Z   CACHE_NUMBER: 0
2025-01-22T19:57:15.2836775Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:57:15.2837411Z   CODECOV_TOKEN: 
2025-01-22T19:57:15.2837631Z   MAMBA_ROOT_PREFIX: /home/runner/micromamba
2025-01-22T19:57:15.2837936Z   MAMBA_EXE: /home/runner/micromamba-bin/micromamba
2025-01-22T19:57:15.2838278Z   CONDARC: /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-22T19:57:15.2838579Z ##[endgroup]
2025-01-22T19:57:15.9122675Z Collecting qgridnext
2025-01-22T19:57:15.9400187Z   Downloading qgridnext-2.0.4-py3-none-any.whl.metadata (9.9 kB)
2025-01-22T19:57:15.9490962Z Requirement already satisfied: pandas>=0.20.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from qgridnext) (2.2.2)
2025-01-22T19:57:15.9500402Z Requirement already satisfied: ipywidgets>=7.0.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from qgridnext) (7.8.0)
2025-01-22T19:57:15.9510291Z Requirement already satisfied: numpy in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from qgridnext) (1.26.4)
2025-01-22T19:57:15.9520880Z Requirement already satisfied: traitlets in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from qgridnext) (5.14.3)
2025-01-22T19:57:15.9604060Z Requirement already satisfied: comm>=0.1.3 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipywidgets>=7.0.0->qgridnext) (0.2.2)
2025-01-22T19:57:15.9613192Z Requirement already satisfied: ipython-genutils~=0.2.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipywidgets>=7.0.0->qgridnext) (0.2.0)
2025-01-22T19:57:15.9626832Z Requirement already satisfied: widgetsnbextension~=3.6.5 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipywidgets>=7.0.0->qgridnext) (3.6.6)
2025-01-22T19:57:15.9644866Z Requirement already satisfied: ipython>=4.0.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipywidgets>=7.0.0->qgridnext) (8.25.0)
2025-01-22T19:57:15.9659724Z Requirement already satisfied: jupyterlab-widgets<3,>=1.0.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipywidgets>=7.0.0->qgridnext) (1.1.7)
2025-01-22T19:57:16.0096147Z Requirement already satisfied: python-dateutil>=2.8.2 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from pandas>=0.20.0->qgridnext) (2.9.0)
2025-01-22T19:57:16.0110001Z Requirement already satisfied: pytz>=2020.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from pandas>=0.20.0->qgridnext) (2024.1)
2025-01-22T19:57:16.0118396Z Requirement already satisfied: tzdata>=2022.7 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from pandas>=0.20.0->qgridnext) (2024.1)
2025-01-22T19:57:16.0427660Z Requirement already satisfied: decorator in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (5.1.1)
2025-01-22T19:57:16.0442155Z Requirement already satisfied: jedi>=0.16 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (0.19.1)
2025-01-22T19:57:16.0451281Z Requirement already satisfied: matplotlib-inline in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (0.1.7)
2025-01-22T19:57:16.0462615Z Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (3.0.47)
2025-01-22T19:57:16.0472218Z Requirement already satisfied: pygments>=2.4.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (2.18.0)
2025-01-22T19:57:16.0482774Z Requirement already satisfied: stack-data in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (0.6.2)
2025-01-22T19:57:16.0502489Z Requirement already satisfied: pexpect>4.3 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (4.9.0)
2025-01-22T19:57:16.0550321Z Requirement already satisfied: six>=1.5 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from python-dateutil>=2.8.2->pandas>=0.20.0->qgridnext) (1.16.0)
2025-01-22T19:57:16.0608046Z Requirement already satisfied: notebook>=4.4.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (7.2.1)
2025-01-22T19:57:16.0818906Z Requirement already satisfied: parso<0.9.0,>=0.8.3 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (0.8.4)
2025-01-22T19:57:16.0962927Z Requirement already satisfied: jupyter-server<3,>=2.4.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.14.1)
2025-01-22T19:57:16.0976664Z Requirement already satisfied: jupyterlab-server<3,>=2.27.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.27.2)
2025-01-22T19:57:16.0992176Z Requirement already satisfied: jupyterlab<4.3,>=4.2.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (4.2.2)
2025-01-22T19:57:16.1003136Z Requirement already satisfied: notebook-shim<0.3,>=0.2 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.2.4)
2025-01-22T19:57:16.1012534Z Requirement already satisfied: tornado>=6.2.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (6.4.1)
2025-01-22T19:57:16.1041073Z Requirement already satisfied: ptyprocess>=0.5 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (0.7.0)
2025-01-22T19:57:16.1069460Z Requirement already satisfied: wcwidth in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (0.2.13)
2025-01-22T19:57:16.1202372Z Requirement already satisfied: executing>=1.2.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from stack-data->ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (2.0.1)
2025-01-22T19:57:16.1211349Z Requirement already satisfied: asttokens>=2.1.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from stack-data->ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (2.4.1)
2025-01-22T19:57:16.1218704Z Requirement already satisfied: pure-eval in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from stack-data->ipython>=4.0.0->ipywidgets>=7.0.0->qgridnext) (0.2.2)
2025-01-22T19:57:16.1552732Z Requirement already satisfied: anyio>=3.1.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (4.4.0)
2025-01-22T19:57:16.1563003Z Requirement already satisfied: argon2-cffi>=21.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (23.1.0)
2025-01-22T19:57:16.1572062Z Requirement already satisfied: jinja2>=3.0.3 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (3.1.4)
2025-01-22T19:57:16.1583923Z Requirement already satisfied: jupyter-client>=7.4.4 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (8.6.2)
2025-01-22T19:57:16.1597679Z Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (5.7.2)
2025-01-22T19:57:16.1608671Z Requirement already satisfied: jupyter-events>=0.9.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.10.0)
2025-01-22T19:57:16.1619533Z Requirement already satisfied: jupyter-server-terminals>=0.4.4 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.5.3)
2025-01-22T19:57:16.1632570Z Requirement already satisfied: nbconvert>=6.4.4 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (7.16.4)
2025-01-22T19:57:16.1642516Z Requirement already satisfied: nbformat>=5.3.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (5.10.4)
2025-01-22T19:57:16.1651666Z Requirement already satisfied: overrides>=5.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (7.7.0)
2025-01-22T19:57:16.1661144Z Requirement already satisfied: packaging>=22.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (24.1)
2025-01-22T19:57:16.1669463Z Requirement already satisfied: prometheus-client>=0.9 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.20.0)
2025-01-22T19:57:16.1679685Z Requirement already satisfied: pyzmq>=24 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (26.0.3)
2025-01-22T19:57:16.1688817Z Requirement already satisfied: send2trash>=1.8.2 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.8.3)
2025-01-22T19:57:16.1700101Z Requirement already satisfied: terminado>=0.8.3 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.18.1)
2025-01-22T19:57:16.1717138Z Requirement already satisfied: websocket-client>=1.7 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.8.0)
2025-01-22T19:57:16.1994301Z Requirement already satisfied: async-lru>=1.0.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.0.4)
2025-01-22T19:57:16.2005662Z Requirement already satisfied: httpx>=0.25.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.27.0)
2025-01-22T19:57:16.2017013Z Requirement already satisfied: ipykernel>=6.5.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (6.29.4)
2025-01-22T19:57:16.2030515Z Requirement already satisfied: jupyter-lsp>=2.0.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.2.5)
2025-01-22T19:57:16.2055809Z Requirement already satisfied: setuptools>=40.1.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (70.0.0)
2025-01-22T19:57:16.2239190Z Requirement already satisfied: babel>=2.10 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.14.0)
2025-01-22T19:57:16.2264994Z Requirement already satisfied: json5>=0.9.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.9.25)
2025-01-22T19:57:16.2275324Z Requirement already satisfied: jsonschema>=4.18.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (4.22.0)
2025-01-22T19:57:16.2292792Z Requirement already satisfied: requests>=2.31 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.32.3)
2025-01-22T19:57:16.2639170Z Requirement already satisfied: idna>=2.8 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from anyio>=3.1.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (3.7)
2025-01-22T19:57:16.2648734Z Requirement already satisfied: sniffio>=1.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from anyio>=3.1.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.3.1)
2025-01-22T19:57:16.2739829Z Requirement already satisfied: argon2-cffi-bindings in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from argon2-cffi>=21.1->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (21.2.0)
2025-01-22T19:57:16.2910158Z Requirement already satisfied: certifi in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from httpx>=0.25.0->jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2024.6.2)
2025-01-22T19:57:16.2925141Z Requirement already satisfied: httpcore==1.* in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from httpx>=0.25.0->jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.0.5)
2025-01-22T19:57:16.3002127Z Requirement already satisfied: h11<0.15,>=0.13 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from httpcore==1.*->httpx>=0.25.0->jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.14.0)
2025-01-22T19:57:16.3183054Z Requirement already satisfied: debugpy>=1.6.5 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipykernel>=6.5.0->jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.8.1)
2025-01-22T19:57:16.3203427Z Requirement already satisfied: nest-asyncio in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipykernel>=6.5.0->jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.6.0)
2025-01-22T19:57:16.3217915Z Requirement already satisfied: psutil in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from ipykernel>=6.5.0->jupyterlab<4.3,>=4.2.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (5.9.8)
2025-01-22T19:57:16.3278459Z Requirement already satisfied: MarkupSafe>=2.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jinja2>=3.0.3->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.1.5)
2025-01-22T19:57:16.3468218Z Requirement already satisfied: attrs>=22.2.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (23.2.0)
2025-01-22T19:57:16.3477894Z Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2023.12.1)
2025-01-22T19:57:16.3486153Z Requirement already satisfied: referencing>=0.28.4 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.35.1)
2025-01-22T19:57:16.3494775Z Requirement already satisfied: rpds-py>=0.7.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.18.1)
2025-01-22T19:57:16.3754445Z Requirement already satisfied: platformdirs>=2.5 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-core!=5.0.*,>=4.12->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (4.2.2)
2025-01-22T19:57:16.3901474Z Requirement already satisfied: python-json-logger>=2.0.4 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.0.7)
2025-01-22T19:57:16.3909465Z Requirement already satisfied: pyyaml>=5.3 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (6.0.1)
2025-01-22T19:57:16.3919514Z Requirement already satisfied: rfc3339-validator in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.1.4)
2025-01-22T19:57:16.3928062Z Requirement already satisfied: rfc3986-validator>=0.1.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.1.1)
2025-01-22T19:57:16.4347294Z Requirement already satisfied: beautifulsoup4 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (4.12.3)
2025-01-22T19:57:16.4365574Z Requirement already satisfied: bleach!=5.0.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (6.1.0)
2025-01-22T19:57:16.4378883Z Requirement already satisfied: defusedxml in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.7.1)
2025-01-22T19:57:16.4393452Z Requirement already satisfied: jupyterlab-pygments in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.3.0)
2025-01-22T19:57:16.4405004Z Requirement already satisfied: mistune<4,>=2.0.3 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (3.0.2)
2025-01-22T19:57:16.4416670Z Requirement already satisfied: nbclient>=0.5.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.10.0)
2025-01-22T19:57:16.4432711Z Requirement already satisfied: pandocfilters>=1.4.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.5.0)
2025-01-22T19:57:16.4442107Z Requirement already satisfied: tinycss2 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.3.0)
2025-01-22T19:57:16.4559554Z Requirement already satisfied: fastjsonschema>=2.15 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from nbformat>=5.3.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.20.0)
2025-01-22T19:57:16.4858484Z Requirement already satisfied: charset-normalizer<4,>=2 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from requests>=2.31->jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (3.3.2)
2025-01-22T19:57:16.4871504Z Requirement already satisfied: urllib3<3,>=1.21.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from requests>=2.31->jupyterlab-server<3,>=2.27.1->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.2.2)
2025-01-22T19:57:16.5638311Z Requirement already satisfied: webencodings in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from bleach!=5.0.0->nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (0.5.1)
2025-01-22T19:57:16.6199325Z Requirement already satisfied: fqdn in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.5.1)
2025-01-22T19:57:16.6216662Z Requirement already satisfied: isoduration in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (20.11.0)
2025-01-22T19:57:16.6229516Z Requirement already satisfied: jsonpointer>1.13 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (3.0.0)
2025-01-22T19:57:16.6245720Z Requirement already satisfied: uri-template in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.3.0)
2025-01-22T19:57:16.6259507Z Requirement already satisfied: webcolors>=1.11 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (24.6.0)
2025-01-22T19:57:16.7266230Z Requirement already satisfied: cffi>=1.0.1 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from argon2-cffi-bindings->argon2-cffi>=21.1->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.16.0)
2025-01-22T19:57:16.7362034Z Requirement already satisfied: soupsieve>1.2 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from beautifulsoup4->nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.5)
2025-01-22T19:57:16.7881348Z Requirement already satisfied: pycparser in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi>=21.1->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.22)
2025-01-22T19:57:16.8375244Z Requirement already satisfied: arrow>=0.15.0 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (1.3.0)
2025-01-22T19:57:16.8669826Z Requirement already satisfied: types-python-dateutil>=2.8.10 in /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages (from arrow>=0.15.0->isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->notebook>=4.4.1->widgetsnbextension~=3.6.5->ipywidgets>=7.0.0->qgridnext) (2.9.0.20240316)
2025-01-22T19:57:16.8950220Z Downloading qgridnext-2.0.4-py3-none-any.whl (1.3 MB)
2025-01-22T19:57:16.9307143Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.3/1.3 MB 37.4 MB/s eta 0:00:00
2025-01-22T19:57:17.7108816Z Installing collected packages: qgridnext
2025-01-22T19:57:17.7997750Z Successfully installed qgridnext-2.0.4
2025-01-22T19:57:18.0055529Z ##[group]Run pytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"
2025-01-22T19:57:18.0057786Z [36;1mpytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"[0m
2025-01-22T19:57:18.0088621Z shell: /usr/bin/bash -l {0}
2025-01-22T19:57:18.0088891Z env:
2025-01-22T19:57:18.0089071Z   CACHE_NUMBER: 0
2025-01-22T19:57:18.0089685Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:57:18.0090348Z   CODECOV_TOKEN: 
2025-01-22T19:57:18.0090570Z   MAMBA_ROOT_PREFIX: /home/runner/micromamba
2025-01-22T19:57:18.0090878Z   MAMBA_EXE: /home/runner/micromamba-bin/micromamba
2025-01-22T19:57:18.0091247Z   CONDARC: /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-22T19:57:18.0091549Z ##[endgroup]
2025-01-22T19:57:26.5317595Z ============================= test session starts ==============================
2025-01-22T19:57:26.5318180Z platform linux -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
2025-01-22T19:57:26.5318622Z rootdir: /home/runner/work/tardis/tardis
2025-01-22T19:57:26.5318974Z configfile: pyproject.toml
2025-01-22T19:57:26.5319421Z plugins: anyio-4.4.0, doctestplus-1.2.1, cov-5.0.0, html-4.1.1, metadata-3.1.1
2025-01-22T19:57:26.5319965Z collected 1796 items / 2 deselected / 1794 selected
2025-01-22T19:57:26.5320224Z 
2025-01-22T19:57:31.8273085Z tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
2025-01-22T19:57:34.6294434Z tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
2025-01-22T19:57:36.1930046Z tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
2025-01-22T19:57:37.9366344Z tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
2025-01-22T19:57:37.9458692Z tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
2025-01-22T19:57:39.2257459Z tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
2025-01-22T19:57:39.5726414Z tardis/grid/tests/test_grid.py .                                         [  2%]
2025-01-22T19:57:39.5742224Z tardis/gui/tests/test_gui.py s                                           [  2%]
2025-01-22T19:57:43.2418901Z tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
2025-01-22T19:57:43.2548336Z tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
2025-01-22T19:57:43.2817319Z tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
2025-01-22T19:58:20.8615343Z tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
2025-01-22T19:58:20.8761735Z tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
2025-01-22T19:58:20.8874166Z tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
2025-01-22T19:58:20.9188269Z tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
2025-01-22T19:58:20.9394879Z tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
2025-01-22T19:58:21.2430566Z tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
2025-01-22T19:58:21.5575921Z tardis/io/tests/test_atomic.py .....                                     [  7%]
2025-01-22T19:58:21.5770471Z tardis/io/tests/test_decay.py ..                                         [  7%]
2025-01-22T19:58:21.7742168Z tardis/io/tests/test_model_reader.py ......                              [  7%]
2025-01-22T19:58:21.7810668Z tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
2025-01-22T19:59:19.2920674Z tardis/model/tests/test_base.py ........................................ [ 10%]
2025-01-22T19:59:20.2940967Z ............                                                             [ 10%]
2025-01-22T19:59:23.3685327Z tardis/model/tests/test_csvy_model.py .........                          [ 11%]
2025-01-22T19:59:23.4160409Z tardis/model/tests/test_density.py ..                                    [ 11%]
2025-01-22T19:59:24.7071976Z tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
2025-01-22T19:59:26.2999286Z tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
2025-01-22T19:59:27.8800641Z tardis/opacities/tests/test_tau_sobolev.py ..                            [ 12%]
2025-01-22T19:59:30.4620260Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py ..E      [ 12%]
2025-01-22T20:00:16.9716553Z tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
2025-01-22T20:00:28.4479926Z tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
2025-01-22T20:00:29.8819423Z tardis/plasma/tests/test_complete_plasmas.py .....................s..... [ 13%]
2025-01-22T20:00:32.8189998Z s....ssssss............s............ss.....s....ssssss............s..... [ 18%]
2025-01-22T20:00:34.5471310Z .......ss.....s....ssssss............s............ss.....s....ssssss.... [ 22%]
2025-01-22T20:00:37.4274849Z ........s............ss.....s........ss............s............ss.....s [ 26%]
2025-01-22T20:00:40.3330426Z ........ss............s............ss.....s....ssssss............s...... [ 30%]
2025-01-22T20:00:41.0962570Z ......ss.....s....ssssss............s............ss.....s.ss.ssssss..... [ 34%]
2025-01-22T20:00:44.0278844Z .......s............ss.....s....ssssss............s............ss.....s. [ 38%]
2025-01-22T20:00:46.9060199Z ...ssssss............s............ss.....s....ssssss............s....... [ 42%]
2025-01-22T20:01:14.1695409Z .....ss.....s....ssssss.....EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 46%]
2025-01-22T20:01:58.0990980Z EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 50%]
2025-01-22T20:02:09.2093810Z EEEEEEEEEEEEE.......s............ss.....s....ssssss............s........ [ 54%]
2025-01-22T20:02:12.4017809Z ....ss.....s....ssssss..........................s.....s....ssss......... [ 58%]
2025-01-22T20:02:12.7362520Z ...................s.....s....ssss.......                                [ 60%]
2025-01-22T20:02:12.8507317Z tardis/plasma/tests/test_hdf_plasma.py ................................. [ 62%]
2025-01-22T20:02:12.8628788Z ......                                                                   [ 62%]
2025-01-22T20:02:12.9988125Z tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
2025-01-22T20:04:30.4339332Z tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
2025-01-22T20:04:30.4367094Z tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
2025-01-22T20:04:53.8893417Z tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
2025-01-22T20:05:07.4034320Z tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
2025-01-22T20:05:08.1627899Z tardis/simulation/tests/test_convergence.py .....                        [ 64%]
2025-01-22T20:05:16.8526211Z tardis/simulation/tests/test_simulation.py .............                 [ 65%]
2025-01-22T20:05:16.8721649Z tardis/spectrum/tests/test_cuda_formal_integral.py sssssssssssssssssssss [ 66%]
2025-01-22T20:05:17.3390003Z ssss...ssssssssssssssssssssss                                            [ 67%]
2025-01-22T20:05:17.3464094Z tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
2025-01-22T20:05:19.5351481Z tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
2025-01-22T20:05:19.5547938Z ..........                                                               [ 69%]
2025-01-22T20:05:19.7284801Z tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
2025-01-22T20:05:19.7615764Z .........                                                                [ 72%]
2025-01-22T20:05:38.3883021Z tardis/spectrum/tests/test_spectrum_solver.py ....                       [ 72%]
2025-01-22T20:06:40.9272855Z tardis/tests/test_tardis_full.py ....                                    [ 72%]
2025-01-22T20:08:05.4550366Z tardis/tests/test_tardis_full_formal_integral.py ................        [ 73%]
2025-01-22T20:08:05.5310533Z tardis/tests/test_util.py .............................................  [ 75%]
2025-01-22T20:08:08.1874618Z tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
2025-01-22T20:08:15.9339764Z tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
2025-01-22T20:08:16.1544822Z tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
2025-01-22T20:08:16.1741587Z tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
2025-01-22T20:08:16.2166723Z sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
2025-01-22T20:08:25.2022029Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py x..       [ 81%]
2025-01-22T20:08:25.2090568Z tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
2025-01-22T20:08:31.4346310Z tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
2025-01-22T20:08:31.9314410Z tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
2025-01-22T20:08:32.9962876Z tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
2025-01-22T20:08:33.1329192Z XX.........                                                              [ 84%]
2025-01-22T20:08:33.1608646Z tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
2025-01-22T20:08:33.4723320Z tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
2025-01-22T20:08:33.9146516Z .....                                                                    [ 85%]
2025-01-22T20:09:08.8559757Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py ......         [ 85%]
2025-01-22T20:09:08.8851602Z tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
2025-01-22T20:09:08.8884278Z tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
2025-01-22T20:09:11.3096202Z tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
2025-01-22T20:09:11.3274051Z tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
2025-01-22T20:09:14.8297404Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py . [ 86%]
2025-01-22T20:09:14.8298576Z                                                                          [ 86%]
2025-01-22T20:09:15.5882616Z tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
2025-01-22T20:09:16.9524969Z tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
2025-01-22T20:09:19.2179857Z ......                                                                   [ 88%]
2025-01-22T20:09:23.9457467Z tardis/visualization/tools/tests/test_liv_plot.py ...................... [ 90%]
2025-01-22T20:09:27.1495352Z .............................                                            [ 91%]
2025-01-22T20:09:30.0348834Z tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
2025-01-22T20:09:37.1255476Z ....                                                                     [ 92%]
2025-01-22T20:09:43.2806499Z tardis/visualization/tools/tests/test_sdec_plot.py ..................... [ 94%]
2025-01-22T20:09:51.4078934Z ..............................                                           [ 95%]
2025-01-22T20:09:51.8502606Z tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
2025-01-22T20:09:51.9237307Z ....                                                                     [ 96%]
2025-01-22T20:09:52.9900090Z tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
2025-01-22T20:09:53.6239532Z ..................                                                       [ 98%]
2025-01-22T20:10:57.2462665Z tardis/visualization/widgets/tests/test_shell_info.py .................. [ 99%]
2025-01-22T20:11:05.2782561Z ......                                                                   [100%]
2025-01-22T20:11:05.2783056Z 
2025-01-22T20:11:05.2783270Z ==================================== ERRORS ====================================
2025-01-22T20:11:05.2784260Z _________ ERROR at setup of test_legacy_chianti_collisional_strengths __________
2025-01-22T20:11:05.2784874Z 
2025-01-22T20:11:05.2785720Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=271741 Levels=24806>
2025-01-22T20:11:05.2786524Z 
2025-01-22T20:11:05.2786708Z     @pytest.fixture
2025-01-22T20:11:05.2787393Z     def legacy_chianti_collision_rate_plasma_solver(atomic_dataset):
2025-01-22T20:11:05.2788155Z         atom_data = copy.deepcopy(atomic_dataset)
2025-01-22T20:11:05.2788860Z         atom_data.prepare_atom_data([1], "macroatom", [(1, 0)], [])
2025-01-22T20:11:05.2789450Z >       return atom_data.nlte_data.get_collision_matrix(
2025-01-22T20:11:05.2790078Z             (1, 0), np.array([10000, 20000])
2025-01-22T20:11:05.2790548Z         )
2025-01-22T20:11:05.2790750Z 
2025-01-22T20:11:05.2791122Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py:82: 
2025-01-22T20:11:05.2791932Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2792368Z 
2025-01-22T20:11:05.2792721Z self = <tardis.io.atom_data.nlte_data.NLTEData object at 0x7f99eb469760>
2025-01-22T20:11:05.2793454Z species = (1, 0), t_electrons = array([10000, 20000])
2025-01-22T20:11:05.2794147Z 
2025-01-22T20:11:05.2794389Z     def get_collision_matrix(self, species, t_electrons):
2025-01-22T20:11:05.2794886Z         """
2025-01-22T20:11:05.2795314Z         Creat collision matrix by interpolating the C_ul values for
2025-01-22T20:11:05.2795864Z         the desired temperatures.
2025-01-22T20:11:05.2796258Z         """
2025-01-22T20:11:05.2796645Z >       c_ul_matrix = self.C_ul_interpolator[species](t_electrons)
2025-01-22T20:11:05.2797326Z E       AttributeError: 'NLTEData' object has no attribute 'C_ul_interpolator'
2025-01-22T20:11:05.2797764Z 
2025-01-22T20:11:05.2797966Z tardis/io/atom_data/nlte_data.py:91: AttributeError
2025-01-22T20:11:05.2798796Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_rad] _
2025-01-22T20:11:05.2799493Z 
2025-01-22T20:11:05.2799784Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2800620Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2801294Z        't046000', 't048000'],
2025-01-22T20:11:05.2801684Z       dtype='object')
2025-01-22T20:11:05.2802022Z key = 'cups'
2025-01-22T20:11:05.2802208Z 
2025-01-22T20:11:05.2802351Z     def get_loc(self, key):
2025-01-22T20:11:05.2802729Z         """
2025-01-22T20:11:05.2803173Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2803916Z     
2025-01-22T20:11:05.2804206Z         Parameters
2025-01-22T20:11:05.2804530Z         ----------
2025-01-22T20:11:05.2804850Z         key : label
2025-01-22T20:11:05.2805156Z     
2025-01-22T20:11:05.2805424Z         Returns
2025-01-22T20:11:05.2805725Z         -------
2025-01-22T20:11:05.2806133Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2807073Z     
2025-01-22T20:11:05.2807355Z         Examples
2025-01-22T20:11:05.2807674Z         --------
2025-01-22T20:11:05.2808045Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2808534Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2808952Z         1
2025-01-22T20:11:05.2809248Z     
2025-01-22T20:11:05.2809593Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2810069Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2810788Z         slice(1, 3, None)
2025-01-22T20:11:05.2811157Z     
2025-01-22T20:11:05.2811506Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2812011Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2812547Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2812988Z         """
2025-01-22T20:11:05.2813325Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2814022Z         try:
2025-01-22T20:11:05.2814398Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2814747Z 
2025-01-22T20:11:05.2815194Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.2816035Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2816641Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2817160Z     ???
2025-01-22T20:11:05.2817577Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2818081Z     ???
2025-01-22T20:11:05.2818738Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.2819494Z     ???
2025-01-22T20:11:05.2819842Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2820198Z 
2025-01-22T20:11:05.2820320Z >   ???
2025-01-22T20:11:05.2820611Z E   KeyError: 'cups'
2025-01-22T20:11:05.2820828Z 
2025-01-22T20:11:05.2821062Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.2821458Z 
2025-01-22T20:11:05.2821771Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.2822230Z 
2025-01-22T20:11:05.2822634Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.2823978Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.2825905Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.2827262Z 
2025-01-22T20:11:05.2827434Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.2827866Z     def plasma(
2025-01-22T20:11:05.2828188Z         self,
2025-01-22T20:11:05.2828518Z         chianti_he_db_fpath,
2025-01-22T20:11:05.2828910Z         config,
2025-01-22T20:11:05.2829129Z     ):
2025-01-22T20:11:05.2829344Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.2829639Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.2829816Z 
2025-01-22T20:11:05.2829948Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.2830265Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2830568Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.2830841Z     plasma = assemble_plasma(
2025-01-22T20:11:05.2831167Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.2831518Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.2831806Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.2832073Z     return BasePlasma(
2025-01-22T20:11:05.2832279Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.2832519Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.2832764Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.2833193Z     self.update(**kwargs)
2025-01-22T20:11:05.2833413Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.2833933Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.2834250Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.2834542Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.2834973Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.2835602Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.2836057Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.2836452Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.2836752Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.2837125Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.2837545Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.2837978Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.2838505Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.2839026Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.2839459Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.2839832Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.2840268Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.2840730Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.2841176Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.2841594Z     return self.apply_standard()
2025-01-22T20:11:05.2842030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.2842519Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.2843026Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.2843774Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.2844268Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.2844661Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.2845098Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.2845538Z     return self._get_value(key)
2025-01-22T20:11:05.2845943Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.2846373Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.2846644Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2846846Z 
2025-01-22T20:11:05.2847009Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2847456Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2847826Z        't046000', 't048000'],
2025-01-22T20:11:05.2848039Z       dtype='object')
2025-01-22T20:11:05.2848230Z key = 'cups'
2025-01-22T20:11:05.2848336Z 
2025-01-22T20:11:05.2848413Z     def get_loc(self, key):
2025-01-22T20:11:05.2848622Z         """
2025-01-22T20:11:05.2848888Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2849193Z     
2025-01-22T20:11:05.2849354Z         Parameters
2025-01-22T20:11:05.2849539Z         ----------
2025-01-22T20:11:05.2849719Z         key : label
2025-01-22T20:11:05.2849895Z     
2025-01-22T20:11:05.2850048Z         Returns
2025-01-22T20:11:05.2850219Z         -------
2025-01-22T20:11:05.2850457Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2850879Z     
2025-01-22T20:11:05.2851034Z         Examples
2025-01-22T20:11:05.2851209Z         --------
2025-01-22T20:11:05.2851409Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2851668Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2851891Z         1
2025-01-22T20:11:05.2852046Z     
2025-01-22T20:11:05.2852233Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2852613Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2852855Z         slice(1, 3, None)
2025-01-22T20:11:05.2853046Z     
2025-01-22T20:11:05.2853238Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2853684Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2853958Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2854193Z         """
2025-01-22T20:11:05.2854383Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2854630Z         try:
2025-01-22T20:11:05.2854831Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2855093Z         except KeyError as err:
2025-01-22T20:11:05.2855332Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.2855606Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.2855903Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.2856167Z             ):
2025-01-22T20:11:05.2856361Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.2856623Z >           raise KeyError(key) from err
2025-01-22T20:11:05.2856875Z E           KeyError: 'cups'
2025-01-22T20:11:05.2857020Z 
2025-01-22T20:11:05.2857292Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.2857803Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:05.2858687Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:05.2859402Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:05.2859981Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:05.2860704Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:05.2861595Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-g_electron] _
2025-01-22T20:11:05.2861988Z 
2025-01-22T20:11:05.2862141Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2862593Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2862958Z        't046000', 't048000'],
2025-01-22T20:11:05.2863169Z       dtype='object')
2025-01-22T20:11:05.2863365Z key = 'cups'
2025-01-22T20:11:05.2863471Z 
2025-01-22T20:11:05.2863702Z     def get_loc(self, key):
2025-01-22T20:11:05.2863910Z         """
2025-01-22T20:11:05.2864170Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2864474Z     
2025-01-22T20:11:05.2864633Z         Parameters
2025-01-22T20:11:05.2864815Z         ----------
2025-01-22T20:11:05.2864994Z         key : label
2025-01-22T20:11:05.2865171Z     
2025-01-22T20:11:05.2865324Z         Returns
2025-01-22T20:11:05.2865500Z         -------
2025-01-22T20:11:05.2865733Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2866015Z     
2025-01-22T20:11:05.2866172Z         Examples
2025-01-22T20:11:05.2866348Z         --------
2025-01-22T20:11:05.2866546Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2866804Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2867027Z         1
2025-01-22T20:11:05.2867187Z     
2025-01-22T20:11:05.2867534Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2867800Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2868040Z         slice(1, 3, None)
2025-01-22T20:11:05.2868235Z     
2025-01-22T20:11:05.2868428Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2868711Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2868966Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2869200Z         """
2025-01-22T20:11:05.2869505Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2869758Z         try:
2025-01-22T20:11:05.2869952Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2870137Z 
2025-01-22T20:11:05.2870390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.2870835Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2871168Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2871458Z     ???
2025-01-22T20:11:05.2871676Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2871955Z     ???
2025-01-22T20:11:05.2872309Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.2872740Z     ???
2025-01-22T20:11:05.2872936Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2873126Z 
2025-01-22T20:11:05.2873200Z >   ???
2025-01-22T20:11:05.2873361Z E   KeyError: 'cups'
2025-01-22T20:11:05.2873478Z 
2025-01-22T20:11:05.2873844Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.2874064Z 
2025-01-22T20:11:05.2874235Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.2874484Z 
2025-01-22T20:11:05.2874707Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.2875324Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.2876351Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.2877055Z 
2025-01-22T20:11:05.2877145Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.2877378Z     def plasma(
2025-01-22T20:11:05.2877556Z         self,
2025-01-22T20:11:05.2877735Z         chianti_he_db_fpath,
2025-01-22T20:11:05.2877942Z         config,
2025-01-22T20:11:05.2878113Z     ):
2025-01-22T20:11:05.2878311Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.2878595Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.2878772Z 
2025-01-22T20:11:05.2878899Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.2879207Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2879506Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.2879768Z     plasma = assemble_plasma(
2025-01-22T20:11:05.2880076Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.2880438Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.2880726Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.2880994Z     return BasePlasma(
2025-01-22T20:11:05.2881206Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.2881444Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.2881692Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.2881931Z     self.update(**kwargs)
2025-01-22T20:11:05.2882147Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.2882426Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.2882736Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.2883025Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.2883769Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.2884259Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.2885023Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.2885526Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.2885841Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.2886473Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.2887241Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.2887934Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.2888449Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.2888999Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.2889440Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.2889808Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.2890238Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.2890697Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.2891138Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.2891555Z     return self.apply_standard()
2025-01-22T20:11:05.2891984Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.2892464Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.2892967Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.2893475Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.2894021Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.2894552Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.2895170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.2895611Z     return self._get_value(key)
2025-01-22T20:11:05.2896009Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.2896441Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.2896707Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2896900Z 
2025-01-22T20:11:05.2897060Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2897507Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2897875Z        't046000', 't048000'],
2025-01-22T20:11:05.2898086Z       dtype='object')
2025-01-22T20:11:05.2898279Z key = 'cups'
2025-01-22T20:11:05.2898384Z 
2025-01-22T20:11:05.2898463Z     def get_loc(self, key):
2025-01-22T20:11:05.2898664Z         """
2025-01-22T20:11:05.2898919Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2899224Z     
2025-01-22T20:11:05.2899380Z         Parameters
2025-01-22T20:11:05.2899563Z         ----------
2025-01-22T20:11:05.2899741Z         key : label
2025-01-22T20:11:05.2899920Z     
2025-01-22T20:11:05.2900077Z         Returns
2025-01-22T20:11:05.2900248Z         -------
2025-01-22T20:11:05.2900478Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2900757Z     
2025-01-22T20:11:05.2900911Z         Examples
2025-01-22T20:11:05.2901141Z         --------
2025-01-22T20:11:05.2901498Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2901870Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2902109Z         1
2025-01-22T20:11:05.2902267Z     
2025-01-22T20:11:05.2902610Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2902889Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2903126Z         slice(1, 3, None)
2025-01-22T20:11:05.2903317Z     
2025-01-22T20:11:05.2903620Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2903905Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2904159Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2904390Z         """
2025-01-22T20:11:05.2904693Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2904945Z         try:
2025-01-22T20:11:05.2905140Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2905400Z         except KeyError as err:
2025-01-22T20:11:05.2905641Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.2905917Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.2906224Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.2906500Z             ):
2025-01-22T20:11:05.2906690Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.2906946Z >           raise KeyError(key) from err
2025-01-22T20:11:05.2907187Z E           KeyError: 'cups'
2025-01-22T20:11:05.2907328Z 
2025-01-22T20:11:05.2907603Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.2908616Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-selected_atoms] _
2025-01-22T20:11:05.2909029Z 
2025-01-22T20:11:05.2909192Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2909653Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2910033Z        't046000', 't048000'],
2025-01-22T20:11:05.2910248Z       dtype='object')
2025-01-22T20:11:05.2910443Z key = 'cups'
2025-01-22T20:11:05.2910551Z 
2025-01-22T20:11:05.2910634Z     def get_loc(self, key):
2025-01-22T20:11:05.2910837Z         """
2025-01-22T20:11:05.2911094Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2911403Z     
2025-01-22T20:11:05.2911563Z         Parameters
2025-01-22T20:11:05.2911745Z         ----------
2025-01-22T20:11:05.2911919Z         key : label
2025-01-22T20:11:05.2912094Z     
2025-01-22T20:11:05.2912245Z         Returns
2025-01-22T20:11:05.2912453Z         -------
2025-01-22T20:11:05.2912683Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2912961Z     
2025-01-22T20:11:05.2913113Z         Examples
2025-01-22T20:11:05.2913289Z         --------
2025-01-22T20:11:05.2913485Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2913875Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2914098Z         1
2025-01-22T20:11:05.2914253Z     
2025-01-22T20:11:05.2914440Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2914942Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2915270Z         slice(1, 3, None)
2025-01-22T20:11:05.2915466Z     
2025-01-22T20:11:05.2915660Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2915949Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2916202Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2916435Z         """
2025-01-22T20:11:05.2916633Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2916882Z         try:
2025-01-22T20:11:05.2917075Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2917256Z 
2025-01-22T20:11:05.2917509Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.2917946Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2918279Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2918705Z     ???
2025-01-22T20:11:05.2918924Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2919198Z     ???
2025-01-22T20:11:05.2919552Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.2919969Z     ???
2025-01-22T20:11:05.2920163Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2920354Z 
2025-01-22T20:11:05.2920423Z >   ???
2025-01-22T20:11:05.2920690Z E   KeyError: 'cups'
2025-01-22T20:11:05.2920813Z 
2025-01-22T20:11:05.2920948Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.2921157Z 
2025-01-22T20:11:05.2921433Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.2921902Z 
2025-01-22T20:11:05.2922146Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.2922775Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.2923999Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.2924764Z 
2025-01-22T20:11:05.2924860Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.2925086Z     def plasma(
2025-01-22T20:11:05.2925260Z         self,
2025-01-22T20:11:05.2925442Z         chianti_he_db_fpath,
2025-01-22T20:11:05.2925648Z         config,
2025-01-22T20:11:05.2925813Z     ):
2025-01-22T20:11:05.2926008Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.2926289Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.2926460Z 
2025-01-22T20:11:05.2926585Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.2926892Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2927191Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.2927453Z     plasma = assemble_plasma(
2025-01-22T20:11:05.2927761Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.2928163Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.2928665Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.2928991Z     return BasePlasma(
2025-01-22T20:11:05.2929204Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.2929448Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.2929692Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.2929961Z     self.update(**kwargs)
2025-01-22T20:11:05.2930178Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.2930456Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.2930763Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.2931048Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.2931472Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.2931960Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.2932401Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.2932790Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.2933089Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.2933463Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.2934015Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.2934449Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.2935097Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.2936002Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.2936761Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.2937330Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.2937772Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.2938236Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.2938682Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.2939094Z     return self.apply_standard()
2025-01-22T20:11:05.2939630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.2940116Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.2940624Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.2941129Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.2941539Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.2942090Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.2942760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.2943196Z     return self._get_value(key)
2025-01-22T20:11:05.2943788Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.2944225Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.2944515Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2944717Z 
2025-01-22T20:11:05.2944873Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2945319Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2945687Z        't046000', 't048000'],
2025-01-22T20:11:05.2945899Z       dtype='object')
2025-01-22T20:11:05.2946088Z key = 'cups'
2025-01-22T20:11:05.2946199Z 
2025-01-22T20:11:05.2946276Z     def get_loc(self, key):
2025-01-22T20:11:05.2946478Z         """
2025-01-22T20:11:05.2946733Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2947037Z     
2025-01-22T20:11:05.2947194Z         Parameters
2025-01-22T20:11:05.2947376Z         ----------
2025-01-22T20:11:05.2947554Z         key : label
2025-01-22T20:11:05.2947736Z     
2025-01-22T20:11:05.2947892Z         Returns
2025-01-22T20:11:05.2948068Z         -------
2025-01-22T20:11:05.2948299Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2948686Z     
2025-01-22T20:11:05.2948956Z         Examples
2025-01-22T20:11:05.2949218Z         --------
2025-01-22T20:11:05.2949420Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2949680Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2949915Z         1
2025-01-22T20:11:05.2950074Z     
2025-01-22T20:11:05.2950266Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2950544Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2950786Z         slice(1, 3, None)
2025-01-22T20:11:05.2950980Z     
2025-01-22T20:11:05.2951177Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2951458Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2951716Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2951953Z         """
2025-01-22T20:11:05.2952149Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2952398Z         try:
2025-01-22T20:11:05.2952592Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2952854Z         except KeyError as err:
2025-01-22T20:11:05.2953091Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.2953366Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.2953796Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.2954063Z             ):
2025-01-22T20:11:05.2954406Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.2954658Z >           raise KeyError(key) from err
2025-01-22T20:11:05.2954900Z E           KeyError: 'cups'
2025-01-22T20:11:05.2955045Z 
2025-01-22T20:11:05.2955321Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.2956480Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-number_density] _
2025-01-22T20:11:05.2956899Z 
2025-01-22T20:11:05.2957063Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2957517Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2958139Z        't046000', 't048000'],
2025-01-22T20:11:05.2958468Z       dtype='object')
2025-01-22T20:11:05.2958723Z key = 'cups'
2025-01-22T20:11:05.2977128Z 
2025-01-22T20:11:05.2977316Z     def get_loc(self, key):
2025-01-22T20:11:05.2977701Z         """
2025-01-22T20:11:05.2978155Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2978694Z     
2025-01-22T20:11:05.2978977Z         Parameters
2025-01-22T20:11:05.2979304Z         ----------
2025-01-22T20:11:05.2979633Z         key : label
2025-01-22T20:11:05.2979952Z     
2025-01-22T20:11:05.2980234Z         Returns
2025-01-22T20:11:05.2980558Z         -------
2025-01-22T20:11:05.2981001Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2981517Z     
2025-01-22T20:11:05.2981799Z         Examples
2025-01-22T20:11:05.2982121Z         --------
2025-01-22T20:11:05.2982483Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2982957Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2983372Z         1
2025-01-22T20:11:05.2983872Z     
2025-01-22T20:11:05.2984235Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2984766Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2985223Z         slice(1, 3, None)
2025-01-22T20:11:05.2985591Z     
2025-01-22T20:11:05.2985965Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2986485Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2986969Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2987416Z         """
2025-01-22T20:11:05.2987802Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2988292Z         try:
2025-01-22T20:11:05.2988662Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2988998Z 
2025-01-22T20:11:05.2989467Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.2990287Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2990909Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2991426Z     ???
2025-01-22T20:11:05.2991859Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2992374Z     ???
2025-01-22T20:11:05.2993110Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.2994080Z     ???
2025-01-22T20:11:05.2994461Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2994839Z 
2025-01-22T20:11:05.2994965Z >   ???
2025-01-22T20:11:05.2995266Z E   KeyError: 'cups'
2025-01-22T20:11:05.2995500Z 
2025-01-22T20:11:05.2995747Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.2996123Z 
2025-01-22T20:11:05.2996442Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.2996895Z 
2025-01-22T20:11:05.2997308Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.2998466Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3000617Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3001905Z 
2025-01-22T20:11:05.3002076Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3002510Z     def plasma(
2025-01-22T20:11:05.3002821Z         self,
2025-01-22T20:11:05.3003137Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3003860Z         config,
2025-01-22T20:11:05.3004172Z     ):
2025-01-22T20:11:05.3004523Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3005040Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3005347Z 
2025-01-22T20:11:05.3005558Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3006093Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3006611Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3007074Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3007603Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3008197Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3008676Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3009132Z     return BasePlasma(
2025-01-22T20:11:05.3009478Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3009880Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3010308Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3010737Z     self.update(**kwargs)
2025-01-22T20:11:05.3011119Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3011592Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3012130Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3012677Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3013412Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3014415Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3015176Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3015841Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3016160Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3016757Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3017490Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3018229Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3019117Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3020002Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3020752Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3021384Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3021884Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3022687Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3023456Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3024345Z     return self.apply_standard()
2025-01-22T20:11:05.3025085Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3025911Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3026780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3027694Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3028407Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3029298Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3030020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3030764Z     return self._get_value(key)
2025-01-22T20:11:05.3031451Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3032063Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3032463Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3032670Z 
2025-01-22T20:11:05.3032956Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3033903Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3034541Z        't046000', 't048000'],
2025-01-22T20:11:05.3034907Z       dtype='object')
2025-01-22T20:11:05.3035229Z key = 'cups'
2025-01-22T20:11:05.3035401Z 
2025-01-22T20:11:05.3035549Z     def get_loc(self, key):
2025-01-22T20:11:05.3035893Z         """
2025-01-22T20:11:05.3036323Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3036854Z     
2025-01-22T20:11:05.3037124Z         Parameters
2025-01-22T20:11:05.3037437Z         ----------
2025-01-22T20:11:05.3037739Z         key : label
2025-01-22T20:11:05.3038033Z     
2025-01-22T20:11:05.3038290Z         Returns
2025-01-22T20:11:05.3038582Z         -------
2025-01-22T20:11:05.3038981Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3039461Z     
2025-01-22T20:11:05.3039726Z         Examples
2025-01-22T20:11:05.3040039Z         --------
2025-01-22T20:11:05.3040391Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3040838Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3041218Z         1
2025-01-22T20:11:05.3041484Z     
2025-01-22T20:11:05.3041798Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3042267Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3042672Z         slice(1, 3, None)
2025-01-22T20:11:05.3042995Z     
2025-01-22T20:11:05.3043318Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3043937Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3044380Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3044779Z         """
2025-01-22T20:11:05.3045107Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3045540Z         try:
2025-01-22T20:11:05.3045876Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3046330Z         except KeyError as err:
2025-01-22T20:11:05.3046734Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3047206Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3047712Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3048171Z             ):
2025-01-22T20:11:05.3048502Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3048940Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3049351Z E           KeyError: 'cups'
2025-01-22T20:11:05.3049584Z 
2025-01-22T20:11:05.3050062Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3051215Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_electrons] _
2025-01-22T20:11:05.3051906Z 
2025-01-22T20:11:05.3052181Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3052949Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3053702Z        't046000', 't048000'],
2025-01-22T20:11:05.3054069Z       dtype='object')
2025-01-22T20:11:05.3054388Z key = 'cups'
2025-01-22T20:11:05.3054557Z 
2025-01-22T20:11:05.3054695Z     def get_loc(self, key):
2025-01-22T20:11:05.3055238Z         """
2025-01-22T20:11:05.3055667Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3056192Z     
2025-01-22T20:11:05.3056460Z         Parameters
2025-01-22T20:11:05.3056757Z         ----------
2025-01-22T20:11:05.3057055Z         key : label
2025-01-22T20:11:05.3057357Z     
2025-01-22T20:11:05.3057525Z         Returns
2025-01-22T20:11:05.3057699Z         -------
2025-01-22T20:11:05.3058117Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3058629Z     
2025-01-22T20:11:05.3058892Z         Examples
2025-01-22T20:11:05.3059189Z         --------
2025-01-22T20:11:05.3059523Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3059968Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3060347Z         1
2025-01-22T20:11:05.3060610Z     
2025-01-22T20:11:05.3060923Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3061384Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3061794Z         slice(1, 3, None)
2025-01-22T20:11:05.3062115Z     
2025-01-22T20:11:05.3062440Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3062914Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3063298Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3063867Z         """
2025-01-22T20:11:05.3064203Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3064629Z         try:
2025-01-22T20:11:05.3064960Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3065276Z 
2025-01-22T20:11:05.3065700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3066458Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3067023Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3067502Z     ???
2025-01-22T20:11:05.3067869Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3068348Z     ???
2025-01-22T20:11:05.3068880Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3069555Z     ???
2025-01-22T20:11:05.3069892Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3070229Z 
2025-01-22T20:11:05.3070345Z >   ???
2025-01-22T20:11:05.3070617Z E   KeyError: 'cups'
2025-01-22T20:11:05.3070817Z 
2025-01-22T20:11:05.3071042Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3071404Z 
2025-01-22T20:11:05.3071685Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3072125Z 
2025-01-22T20:11:05.3072401Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3073033Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3074205Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3074937Z 
2025-01-22T20:11:05.3075032Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3075432Z     def plasma(
2025-01-22T20:11:05.3075727Z         self,
2025-01-22T20:11:05.3076028Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3076376Z         config,
2025-01-22T20:11:05.3076663Z     ):
2025-01-22T20:11:05.3076995Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3077482Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3077782Z 
2025-01-22T20:11:05.3077996Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3078526Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3079036Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3079676Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3080204Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3080797Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3081276Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3081812Z     return BasePlasma(
2025-01-22T20:11:05.3082156Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3082555Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3083133Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3083689Z     self.update(**kwargs)
2025-01-22T20:11:05.3084061Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3084533Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3085070Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3085566Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3086298Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3087139Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3087908Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3088573Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3089082Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3089722Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3090453Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3091187Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3092075Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3092967Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3093863Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3094494Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3095255Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3096042Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3096800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3097507Z     return self.apply_standard()
2025-01-22T20:11:05.3098242Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3099075Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3099961Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3100837Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3101546Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3102212Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3102936Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3103809Z     return self._get_value(key)
2025-01-22T20:11:05.3104507Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3105270Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3105733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3106084Z 
2025-01-22T20:11:05.3106347Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3107112Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3107739Z        't046000', 't048000'],
2025-01-22T20:11:05.3108095Z       dtype='object')
2025-01-22T20:11:05.3108411Z key = 'cups'
2025-01-22T20:11:05.3108588Z 
2025-01-22T20:11:05.3108718Z     def get_loc(self, key):
2025-01-22T20:11:05.3109239Z         """
2025-01-22T20:11:05.3109667Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3110188Z     
2025-01-22T20:11:05.3110455Z         Parameters
2025-01-22T20:11:05.3110758Z         ----------
2025-01-22T20:11:05.3111066Z         key : label
2025-01-22T20:11:05.3111368Z     
2025-01-22T20:11:05.3111622Z         Returns
2025-01-22T20:11:05.3111908Z         -------
2025-01-22T20:11:05.3112525Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3113012Z     
2025-01-22T20:11:05.3113273Z         Examples
2025-01-22T20:11:05.3113707Z         --------
2025-01-22T20:11:05.3114047Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3114489Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3114869Z         1
2025-01-22T20:11:05.3115131Z     
2025-01-22T20:11:05.3115442Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3115899Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3116311Z         slice(1, 3, None)
2025-01-22T20:11:05.3116632Z     
2025-01-22T20:11:05.3116966Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3117446Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3117883Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3118281Z         """
2025-01-22T20:11:05.3118604Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3119031Z         try:
2025-01-22T20:11:05.3119365Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3119808Z         except KeyError as err:
2025-01-22T20:11:05.3120207Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3120671Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3121171Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3121627Z             ):
2025-01-22T20:11:05.3121947Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3122385Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3122806Z E           KeyError: 'cups'
2025-01-22T20:11:05.3123043Z 
2025-01-22T20:11:05.3123659Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3124791Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-w] _
2025-01-22T20:11:05.3125441Z 
2025-01-22T20:11:05.3125716Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3126483Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3127112Z        't046000', 't048000'],
2025-01-22T20:11:05.3127464Z       dtype='object')
2025-01-22T20:11:05.3127778Z key = 'cups'
2025-01-22T20:11:05.3127944Z 
2025-01-22T20:11:05.3128080Z     def get_loc(self, key):
2025-01-22T20:11:05.3128416Z         """
2025-01-22T20:11:05.3128850Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3129309Z     
2025-01-22T20:11:05.3129474Z         Parameters
2025-01-22T20:11:05.3129672Z         ----------
2025-01-22T20:11:05.3129855Z         key : label
2025-01-22T20:11:05.3130028Z     
2025-01-22T20:11:05.3130183Z         Returns
2025-01-22T20:11:05.3130354Z         -------
2025-01-22T20:11:05.3130708Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3130989Z     
2025-01-22T20:11:05.3131154Z         Examples
2025-01-22T20:11:05.3131339Z         --------
2025-01-22T20:11:05.3131544Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3131819Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3132054Z         1
2025-01-22T20:11:05.3132216Z     
2025-01-22T20:11:05.3132412Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3132688Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3132929Z         slice(1, 3, None)
2025-01-22T20:11:05.3133277Z     
2025-01-22T20:11:05.3133477Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3133981Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3134247Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3134482Z         """
2025-01-22T20:11:05.3134676Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3134928Z         try:
2025-01-22T20:11:05.3135129Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3135430Z 
2025-01-22T20:11:05.3135695Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3136143Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3136479Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3136766Z     ???
2025-01-22T20:11:05.3136990Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3137267Z     ???
2025-01-22T20:11:05.3137632Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3138051Z     ???
2025-01-22T20:11:05.3138247Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3138446Z 
2025-01-22T20:11:05.3138509Z >   ???
2025-01-22T20:11:05.3138670Z E   KeyError: 'cups'
2025-01-22T20:11:05.3138794Z 
2025-01-22T20:11:05.3138922Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3139140Z 
2025-01-22T20:11:05.3139307Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3139557Z 
2025-01-22T20:11:05.3139778Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3140400Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3141420Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3142125Z 
2025-01-22T20:11:05.3142218Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3142448Z     def plasma(
2025-01-22T20:11:05.3142625Z         self,
2025-01-22T20:11:05.3142807Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3143016Z         config,
2025-01-22T20:11:05.3143212Z     ):
2025-01-22T20:11:05.3143419Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3143896Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3144101Z 
2025-01-22T20:11:05.3144228Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3144540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3144900Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3145339Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3145875Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3146434Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3146722Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3146989Z     return BasePlasma(
2025-01-22T20:11:05.3147197Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3147441Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3147689Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3147933Z     self.update(**kwargs)
2025-01-22T20:11:05.3148153Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3148433Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3148746Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3149060Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3149810Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3150559Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3151164Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3151558Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3151864Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3152237Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3152666Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3153194Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3153842Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3154360Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3154790Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3155163Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3155600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3156273Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3157043Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3157472Z     return self.apply_standard()
2025-01-22T20:11:05.3157899Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3158381Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3158896Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3159413Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3159832Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3160223Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3160653Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3161098Z     return self._get_value(key)
2025-01-22T20:11:05.3161506Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3162244Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3162704Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3163037Z 
2025-01-22T20:11:05.3163210Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3163765Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3164142Z        't046000', 't048000'],
2025-01-22T20:11:05.3164359Z       dtype='object')
2025-01-22T20:11:05.3164553Z key = 'cups'
2025-01-22T20:11:05.3164665Z 
2025-01-22T20:11:05.3164750Z     def get_loc(self, key):
2025-01-22T20:11:05.3164961Z         """
2025-01-22T20:11:05.3165225Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3165528Z     
2025-01-22T20:11:05.3165689Z         Parameters
2025-01-22T20:11:05.3165877Z         ----------
2025-01-22T20:11:05.3166059Z         key : label
2025-01-22T20:11:05.3166235Z     
2025-01-22T20:11:05.3166387Z         Returns
2025-01-22T20:11:05.3166561Z         -------
2025-01-22T20:11:05.3166794Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3167084Z     
2025-01-22T20:11:05.3167243Z         Examples
2025-01-22T20:11:05.3167422Z         --------
2025-01-22T20:11:05.3167627Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3168037Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3168438Z         1
2025-01-22T20:11:05.3168702Z     
2025-01-22T20:11:05.3169014Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3169378Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3169625Z         slice(1, 3, None)
2025-01-22T20:11:05.3169967Z     
2025-01-22T20:11:05.3170168Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3170449Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3170708Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3170939Z         """
2025-01-22T20:11:05.3171137Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3171387Z         try:
2025-01-22T20:11:05.3171688Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3171954Z         except KeyError as err:
2025-01-22T20:11:05.3172197Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3172477Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3172781Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3173050Z             ):
2025-01-22T20:11:05.3173246Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3173663Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3174082Z E           KeyError: 'cups'
2025-01-22T20:11:05.3174337Z 
2025-01-22T20:11:05.3174815Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3175683Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_rad] _
2025-01-22T20:11:05.3176077Z 
2025-01-22T20:11:05.3176246Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3176699Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3177068Z        't046000', 't048000'],
2025-01-22T20:11:05.3177275Z       dtype='object')
2025-01-22T20:11:05.3177463Z key = 'cups'
2025-01-22T20:11:05.3177569Z 
2025-01-22T20:11:05.3177647Z     def get_loc(self, key):
2025-01-22T20:11:05.3177853Z         """
2025-01-22T20:11:05.3178106Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3178418Z     
2025-01-22T20:11:05.3178580Z         Parameters
2025-01-22T20:11:05.3178768Z         ----------
2025-01-22T20:11:05.3178947Z         key : label
2025-01-22T20:11:05.3179125Z     
2025-01-22T20:11:05.3179279Z         Returns
2025-01-22T20:11:05.3179453Z         -------
2025-01-22T20:11:05.3179691Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3180155Z     
2025-01-22T20:11:05.3180420Z         Examples
2025-01-22T20:11:05.3180719Z         --------
2025-01-22T20:11:05.3181023Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3181296Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3181524Z         1
2025-01-22T20:11:05.3181682Z     
2025-01-22T20:11:05.3181874Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3182145Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3182388Z         slice(1, 3, None)
2025-01-22T20:11:05.3182582Z     
2025-01-22T20:11:05.3182785Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3183065Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3183325Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3183757Z         """
2025-01-22T20:11:05.3183972Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3184229Z         try:
2025-01-22T20:11:05.3184428Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3184615Z 
2025-01-22T20:11:05.3184874Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3185320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3185709Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3186220Z     ???
2025-01-22T20:11:05.3186592Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3187078Z     ???
2025-01-22T20:11:05.3187481Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3188054Z     ???
2025-01-22T20:11:05.3188254Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3188453Z 
2025-01-22T20:11:05.3188518Z >   ???
2025-01-22T20:11:05.3188687Z E   KeyError: 'cups'
2025-01-22T20:11:05.3188806Z 
2025-01-22T20:11:05.3188938Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3189144Z 
2025-01-22T20:11:05.3189441Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3189700Z 
2025-01-22T20:11:05.3189929Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3190557Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3191579Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3192796Z 
2025-01-22T20:11:05.3192945Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3193254Z     def plasma(
2025-01-22T20:11:05.3193435Z         self,
2025-01-22T20:11:05.3193725Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3193937Z         config,
2025-01-22T20:11:05.3194104Z     ):
2025-01-22T20:11:05.3194313Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3194602Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3194779Z 
2025-01-22T20:11:05.3194902Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3195219Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3195565Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3195829Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3196146Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3196499Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3196784Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3197047Z     return BasePlasma(
2025-01-22T20:11:05.3197253Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3197487Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3197736Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3197981Z     self.update(**kwargs)
2025-01-22T20:11:05.3198298Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3198773Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3199312Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3199667Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3200094Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3200581Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3201026Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3201424Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3201726Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3202098Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3202521Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3202948Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3203462Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3204508Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3205209Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3205580Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3206016Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3206628Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3207071Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3207485Z     return self.apply_standard()
2025-01-22T20:11:05.3207914Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3208500Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3209009Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3209520Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3209933Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3210324Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3211003Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3211711Z     return self._get_value(key)
2025-01-22T20:11:05.3212119Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3212589Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3212863Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3213057Z 
2025-01-22T20:11:05.3213225Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3213806Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3214177Z        't046000', 't048000'],
2025-01-22T20:11:05.3214389Z       dtype='object')
2025-01-22T20:11:05.3214585Z key = 'cups'
2025-01-22T20:11:05.3214686Z 
2025-01-22T20:11:05.3214776Z     def get_loc(self, key):
2025-01-22T20:11:05.3214982Z         """
2025-01-22T20:11:05.3215240Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3215551Z     
2025-01-22T20:11:05.3215712Z         Parameters
2025-01-22T20:11:05.3215897Z         ----------
2025-01-22T20:11:05.3216078Z         key : label
2025-01-22T20:11:05.3216254Z     
2025-01-22T20:11:05.3216408Z         Returns
2025-01-22T20:11:05.3216581Z         -------
2025-01-22T20:11:05.3216818Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3217309Z     
2025-01-22T20:11:05.3217577Z         Examples
2025-01-22T20:11:05.3217870Z         --------
2025-01-22T20:11:05.3218173Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3218441Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3218668Z         1
2025-01-22T20:11:05.3218826Z     
2025-01-22T20:11:05.3219017Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3219288Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3219369Z         slice(1, 3, None)
2025-01-22T20:11:05.3219439Z     
2025-01-22T20:11:05.3219557Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3219649Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3219743Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3219815Z         """
2025-01-22T20:11:05.3219915Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3219988Z         try:
2025-01-22T20:11:05.3220088Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3220178Z         except KeyError as err:
2025-01-22T20:11:05.3220274Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3220379Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3220501Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3220574Z             ):
2025-01-22T20:11:05.3220666Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3220757Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3220837Z E           KeyError: 'cups'
2025-01-22T20:11:05.3220978Z 
2025-01-22T20:11:05.3221263Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3221594Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_electron] _
2025-01-22T20:11:05.3221598Z 
2025-01-22T20:11:05.3221757Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3222070Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3222147Z        't046000', 't048000'],
2025-01-22T20:11:05.3222227Z       dtype='object')
2025-01-22T20:11:05.3222298Z key = 'cups'
2025-01-22T20:11:05.3222302Z 
2025-01-22T20:11:05.3222401Z     def get_loc(self, key):
2025-01-22T20:11:05.3222527Z         """
2025-01-22T20:11:05.3222828Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3222950Z     
2025-01-22T20:11:05.3223077Z         Parameters
2025-01-22T20:11:05.3223198Z         ----------
2025-01-22T20:11:05.3223314Z         key : label
2025-01-22T20:11:05.3223428Z     
2025-01-22T20:11:05.3223671Z         Returns
2025-01-22T20:11:05.3223795Z         -------
2025-01-22T20:11:05.3223973Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3224045Z     
2025-01-22T20:11:05.3224114Z         Examples
2025-01-22T20:11:05.3224187Z         --------
2025-01-22T20:11:05.3224295Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3224386Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3224453Z         1
2025-01-22T20:11:05.3224522Z     
2025-01-22T20:11:05.3224626Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3224720Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3224795Z         slice(1, 3, None)
2025-01-22T20:11:05.3224865Z     
2025-01-22T20:11:05.3224978Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3225079Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3225176Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3225244Z         """
2025-01-22T20:11:05.3225351Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3225419Z         try:
2025-01-22T20:11:05.3225524Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3225528Z 
2025-01-22T20:11:05.3225784Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3225902Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3226043Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3226116Z     ???
2025-01-22T20:11:05.3226247Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3226318Z     ???
2025-01-22T20:11:05.3226590Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3226667Z     ???
2025-01-22T20:11:05.3226778Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3226782Z 
2025-01-22T20:11:05.3226848Z >   ???
2025-01-22T20:11:05.3226930Z E   KeyError: 'cups'
2025-01-22T20:11:05.3226934Z 
2025-01-22T20:11:05.3227061Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3227065Z 
2025-01-22T20:11:05.3227241Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3227246Z 
2025-01-22T20:11:05.3227463Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3227781Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3228412Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3228547Z 
2025-01-22T20:11:05.3228642Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3228720Z     def plasma(
2025-01-22T20:11:05.3228787Z         self,
2025-01-22T20:11:05.3228899Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3229022Z         config,
2025-01-22T20:11:05.3229143Z     ):
2025-01-22T20:11:05.3229329Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3229636Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3229643Z 
2025-01-22T20:11:05.3229847Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3230040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3230161Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3230247Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3230420Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3230526Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3230639Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3230716Z     return BasePlasma(
2025-01-22T20:11:05.3230807Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3230893Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3230985Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3231065Z     self.update(**kwargs)
2025-01-22T20:11:05.3231159Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3231284Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3231400Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3231501Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3231753Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3231909Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3232116Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3232220Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3232347Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3232519Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3232689Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3232873Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3251422Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3251670Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3251877Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3252002Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3252288Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3252433Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3252707Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3252802Z     return self.apply_standard()
2025-01-22T20:11:05.3253124Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3253357Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3254024Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3254235Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3254619Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3254763Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3255207Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3255503Z     return self._get_value(key)
2025-01-22T20:11:05.3255773Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3255867Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3255983Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3255989Z 
2025-01-22T20:11:05.3256154Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3256471Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3256558Z        't046000', 't048000'],
2025-01-22T20:11:05.3256638Z       dtype='object')
2025-01-22T20:11:05.3256718Z key = 'cups'
2025-01-22T20:11:05.3256723Z 
2025-01-22T20:11:05.3256811Z     def get_loc(self, key):
2025-01-22T20:11:05.3256883Z         """
2025-01-22T20:11:05.3257054Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3257128Z     
2025-01-22T20:11:05.3257230Z         Parameters
2025-01-22T20:11:05.3257378Z         ----------
2025-01-22T20:11:05.3257508Z         key : label
2025-01-22T20:11:05.3257631Z     
2025-01-22T20:11:05.3257750Z         Returns
2025-01-22T20:11:05.3257875Z         -------
2025-01-22T20:11:05.3258108Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3258216Z     
2025-01-22T20:11:05.3258334Z         Examples
2025-01-22T20:11:05.3258459Z         --------
2025-01-22T20:11:05.3258637Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3258730Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3258805Z         1
2025-01-22T20:11:05.3258872Z     
2025-01-22T20:11:05.3258984Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3259073Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3259156Z         slice(1, 3, None)
2025-01-22T20:11:05.3259223Z     
2025-01-22T20:11:05.3259339Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3259436Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3259532Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3259603Z         """
2025-01-22T20:11:05.3259710Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3259779Z         try:
2025-01-22T20:11:05.3259884Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3259971Z         except KeyError as err:
2025-01-22T20:11:05.3260074Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3260180Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3260306Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3260380Z             ):
2025-01-22T20:11:05.3260472Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3260566Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3260646Z E           KeyError: 'cups'
2025-01-22T20:11:05.3260656Z 
2025-01-22T20:11:05.3260935Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3261280Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_boltzmann_factor] _
2025-01-22T20:11:05.3261293Z 
2025-01-22T20:11:05.3261445Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3261661Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3261735Z        't046000', 't048000'],
2025-01-22T20:11:05.3261813Z       dtype='object')
2025-01-22T20:11:05.3261885Z key = 'cups'
2025-01-22T20:11:05.3261889Z 
2025-01-22T20:11:05.3261975Z     def get_loc(self, key):
2025-01-22T20:11:05.3262042Z         """
2025-01-22T20:11:05.3262208Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3262274Z     
2025-01-22T20:11:05.3262452Z         Parameters
2025-01-22T20:11:05.3262525Z         ----------
2025-01-22T20:11:05.3262605Z         key : label
2025-01-22T20:11:05.3262670Z     
2025-01-22T20:11:05.3262745Z         Returns
2025-01-22T20:11:05.3262816Z         -------
2025-01-22T20:11:05.3262952Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3263024Z     
2025-01-22T20:11:05.3263094Z         Examples
2025-01-22T20:11:05.3263171Z         --------
2025-01-22T20:11:05.3263413Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3263711Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3263834Z         1
2025-01-22T20:11:05.3263956Z     
2025-01-22T20:11:05.3264132Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3264282Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3264408Z         slice(1, 3, None)
2025-01-22T20:11:05.3264523Z     
2025-01-22T20:11:05.3264705Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3264862Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3264963Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3265038Z         """
2025-01-22T20:11:05.3265143Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3265216Z         try:
2025-01-22T20:11:05.3265320Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3265325Z 
2025-01-22T20:11:05.3265588Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3265711Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3265849Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3265919Z     ???
2025-01-22T20:11:05.3266045Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3266115Z     ???
2025-01-22T20:11:05.3266393Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3266470Z     ???
2025-01-22T20:11:05.3266582Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3266586Z 
2025-01-22T20:11:05.3266660Z >   ???
2025-01-22T20:11:05.3266741Z E   KeyError: 'cups'
2025-01-22T20:11:05.3266745Z 
2025-01-22T20:11:05.3266885Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3266889Z 
2025-01-22T20:11:05.3267062Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3267071Z 
2025-01-22T20:11:05.3267297Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3267631Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3268263Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3268277Z 
2025-01-22T20:11:05.3268369Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3268445Z     def plasma(
2025-01-22T20:11:05.3268512Z         self,
2025-01-22T20:11:05.3268595Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3268661Z         config,
2025-01-22T20:11:05.3268734Z     ):
2025-01-22T20:11:05.3268852Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3268959Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3268963Z 
2025-01-22T20:11:05.3269088Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3269205Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3269310Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3269399Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3269659Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3269848Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3270232Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3270363Z     return BasePlasma(
2025-01-22T20:11:05.3270510Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3270653Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3270805Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3270930Z     self.update(**kwargs)
2025-01-22T20:11:05.3271022Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3271266Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3271389Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3271493Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3271749Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3271902Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3272116Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3272223Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3272354Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3272529Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3272702Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3272880Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3273143Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3273320Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3273637Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3273752Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3274013Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3274143Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3274396Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3274483Z     return self.apply_standard()
2025-01-22T20:11:05.3274770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3274892Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3275209Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3275331Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3275556Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3275677Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3276181Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3276331Z     return self._get_value(key)
2025-01-22T20:11:05.3276787Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3276937Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3277133Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3277138Z 
2025-01-22T20:11:05.3277306Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3277521Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3277599Z        't046000', 't048000'],
2025-01-22T20:11:05.3277675Z       dtype='object')
2025-01-22T20:11:05.3277750Z key = 'cups'
2025-01-22T20:11:05.3277754Z 
2025-01-22T20:11:05.3277831Z     def get_loc(self, key):
2025-01-22T20:11:05.3277902Z         """
2025-01-22T20:11:05.3278065Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3278272Z     
2025-01-22T20:11:05.3278350Z         Parameters
2025-01-22T20:11:05.3278425Z         ----------
2025-01-22T20:11:05.3278503Z         key : label
2025-01-22T20:11:05.3278570Z     
2025-01-22T20:11:05.3278644Z         Returns
2025-01-22T20:11:05.3278716Z         -------
2025-01-22T20:11:05.3278860Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3278926Z     
2025-01-22T20:11:05.3279002Z         Examples
2025-01-22T20:11:05.3279073Z         --------
2025-01-22T20:11:05.3279280Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3279369Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3279442Z         1
2025-01-22T20:11:05.3279509Z     
2025-01-22T20:11:05.3279619Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3279707Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3279787Z         slice(1, 3, None)
2025-01-22T20:11:05.3279853Z     
2025-01-22T20:11:05.3279970Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3280073Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3280163Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3280236Z         """
2025-01-22T20:11:05.3280338Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3280412Z         try:
2025-01-22T20:11:05.3280513Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3280599Z         except KeyError as err:
2025-01-22T20:11:05.3280699Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3280803Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3280922Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3280992Z             ):
2025-01-22T20:11:05.3281085Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3281176Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3281257Z E           KeyError: 'cups'
2025-01-22T20:11:05.3281267Z 
2025-01-22T20:11:05.3281561Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3282180Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-partition_function] _
2025-01-22T20:11:05.3282188Z 
2025-01-22T20:11:05.3282456Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3282827Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3282958Z        't046000', 't048000'],
2025-01-22T20:11:05.3283045Z       dtype='object')
2025-01-22T20:11:05.3283118Z key = 'cups'
2025-01-22T20:11:05.3283122Z 
2025-01-22T20:11:05.3283206Z     def get_loc(self, key):
2025-01-22T20:11:05.3283273Z         """
2025-01-22T20:11:05.3283442Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3283608Z     
2025-01-22T20:11:05.3283683Z         Parameters
2025-01-22T20:11:05.3283765Z         ----------
2025-01-22T20:11:05.3283836Z         key : label
2025-01-22T20:11:05.3283902Z     
2025-01-22T20:11:05.3283969Z         Returns
2025-01-22T20:11:05.3284038Z         -------
2025-01-22T20:11:05.3284170Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3284243Z     
2025-01-22T20:11:05.3284314Z         Examples
2025-01-22T20:11:05.3284389Z         --------
2025-01-22T20:11:05.3284487Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3284579Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3284655Z         1
2025-01-22T20:11:05.3284719Z     
2025-01-22T20:11:05.3284825Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3284911Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3284991Z         slice(1, 3, None)
2025-01-22T20:11:05.3285057Z     
2025-01-22T20:11:05.3285169Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3285263Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3285509Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3285580Z         """
2025-01-22T20:11:05.3285680Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3285752Z         try:
2025-01-22T20:11:05.3285851Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3285855Z 
2025-01-22T20:11:05.3286110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3286324Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3286467Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3286535Z     ???
2025-01-22T20:11:05.3286668Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3286734Z     ???
2025-01-22T20:11:05.3287010Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3287080Z     ???
2025-01-22T20:11:05.3287193Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3287197Z 
2025-01-22T20:11:05.3287266Z >   ???
2025-01-22T20:11:05.3287342Z E   KeyError: 'cups'
2025-01-22T20:11:05.3287347Z 
2025-01-22T20:11:05.3287474Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3287478Z 
2025-01-22T20:11:05.3287708Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3287715Z 
2025-01-22T20:11:05.3288130Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3288676Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3289384Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3289395Z 
2025-01-22T20:11:05.3289488Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3289560Z     def plasma(
2025-01-22T20:11:05.3289628Z         self,
2025-01-22T20:11:05.3289707Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3289781Z         config,
2025-01-22T20:11:05.3289847Z     ):
2025-01-22T20:11:05.3289963Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3290055Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3290063Z 
2025-01-22T20:11:05.3290187Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3290296Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3290399Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3290487Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3290655Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3290757Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3290870Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3290951Z     return BasePlasma(
2025-01-22T20:11:05.3291036Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3291126Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3291214Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3291296Z     self.update(**kwargs)
2025-01-22T20:11:05.3291384Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3291509Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3291623Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3291727Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3291977Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3292129Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3292339Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3292435Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3292660Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3292826Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3292997Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3293168Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3294001Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3294328Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3294650Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3294833Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3295105Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3295233Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3295482Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3295573Z     return self.apply_standard()
2025-01-22T20:11:05.3295853Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3295979Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3296293Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3296418Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3296637Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3296723Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3296989Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3297071Z     return self._get_value(key)
2025-01-22T20:11:05.3297333Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3297418Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3297535Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3297540Z 
2025-01-22T20:11:05.3297697Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3297916Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3297995Z        't046000', 't048000'],
2025-01-22T20:11:05.3298071Z       dtype='object')
2025-01-22T20:11:05.3298146Z key = 'cups'
2025-01-22T20:11:05.3298150Z 
2025-01-22T20:11:05.3298228Z     def get_loc(self, key):
2025-01-22T20:11:05.3298299Z         """
2025-01-22T20:11:05.3298458Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3298529Z     
2025-01-22T20:11:05.3298603Z         Parameters
2025-01-22T20:11:05.3298683Z         ----------
2025-01-22T20:11:05.3298754Z         key : label
2025-01-22T20:11:05.3298823Z     
2025-01-22T20:11:05.3298891Z         Returns
2025-01-22T20:11:05.3298963Z         -------
2025-01-22T20:11:05.3299095Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3299161Z     
2025-01-22T20:11:05.3299229Z         Examples
2025-01-22T20:11:05.3299301Z         --------
2025-01-22T20:11:05.3299403Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3299496Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3299568Z         1
2025-01-22T20:11:05.3299636Z     
2025-01-22T20:11:05.3299744Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3299873Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3300017Z         slice(1, 3, None)
2025-01-22T20:11:05.3300133Z     
2025-01-22T20:11:05.3300319Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3300632Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3300786Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3300899Z         """
2025-01-22T20:11:05.3301061Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3301131Z         try:
2025-01-22T20:11:05.3301239Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3301321Z         except KeyError as err:
2025-01-22T20:11:05.3301423Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3301604Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3301734Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3301807Z             ):
2025-01-22T20:11:05.3301898Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3301987Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3302067Z E           KeyError: 'cups'
2025-01-22T20:11:05.3302072Z 
2025-01-22T20:11:05.3302345Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3302682Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-excitation_energy] _
2025-01-22T20:11:05.3302686Z 
2025-01-22T20:11:05.3302845Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3303053Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3303132Z        't046000', 't048000'],
2025-01-22T20:11:05.3303208Z       dtype='object')
2025-01-22T20:11:05.3303279Z key = 'cups'
2025-01-22T20:11:05.3303283Z 
2025-01-22T20:11:05.3303363Z     def get_loc(self, key):
2025-01-22T20:11:05.3303430Z         """
2025-01-22T20:11:05.3303729Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3303800Z     
2025-01-22T20:11:05.3303876Z         Parameters
2025-01-22T20:11:05.3303947Z         ----------
2025-01-22T20:11:05.3304025Z         key : label
2025-01-22T20:11:05.3304090Z     
2025-01-22T20:11:05.3304161Z         Returns
2025-01-22T20:11:05.3304229Z         -------
2025-01-22T20:11:05.3304361Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3304427Z     
2025-01-22T20:11:05.3304500Z         Examples
2025-01-22T20:11:05.3304569Z         --------
2025-01-22T20:11:05.3304670Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3304762Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3304829Z         1
2025-01-22T20:11:05.3304899Z     
2025-01-22T20:11:05.3304998Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3305088Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3305163Z         slice(1, 3, None)
2025-01-22T20:11:05.3305228Z     
2025-01-22T20:11:05.3305335Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3305427Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3305522Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3305625Z         """
2025-01-22T20:11:05.3305809Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3305939Z         try:
2025-01-22T20:11:05.3306109Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3306116Z 
2025-01-22T20:11:05.3306538Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3306735Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3306966Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3307058Z     ???
2025-01-22T20:11:05.3307194Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3307265Z     ???
2025-01-22T20:11:05.3307536Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3307606Z     ???
2025-01-22T20:11:05.3307712Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3307846Z 
2025-01-22T20:11:05.3307919Z >   ???
2025-01-22T20:11:05.3307995Z E   KeyError: 'cups'
2025-01-22T20:11:05.3307999Z 
2025-01-22T20:11:05.3308130Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3308134Z 
2025-01-22T20:11:05.3308305Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3308309Z 
2025-01-22T20:11:05.3308649Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3308975Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3309601Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3309612Z 
2025-01-22T20:11:05.3309707Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3309778Z     def plasma(
2025-01-22T20:11:05.3309848Z         self,
2025-01-22T20:11:05.3309928Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3310001Z         config,
2025-01-22T20:11:05.3310071Z     ):
2025-01-22T20:11:05.3310188Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3310285Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3310290Z 
2025-01-22T20:11:05.3310419Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3310531Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3310637Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3310726Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3310891Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3310991Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3311099Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3311184Z     return BasePlasma(
2025-01-22T20:11:05.3311268Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3311355Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3311524Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3311665Z     self.update(**kwargs)
2025-01-22T20:11:05.3311824Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3312024Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3312218Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3312387Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3312792Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3312947Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3313160Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3313255Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3313391Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3313684Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3313859Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3314034Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3314296Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3314479Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3314661Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3314770Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3315029Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3315156Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3315398Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3315622Z     return self.apply_standard()
2025-01-22T20:11:05.3315905Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3316023Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3316331Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3316551Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3316773Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3316858Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3317127Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3317209Z     return self._get_value(key)
2025-01-22T20:11:05.3317625Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3317789Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3317984Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3317992Z 
2025-01-22T20:11:05.3318260Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3318628Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3318770Z        't046000', 't048000'],
2025-01-22T20:11:05.3318851Z       dtype='object')
2025-01-22T20:11:05.3318926Z key = 'cups'
2025-01-22T20:11:05.3318931Z 
2025-01-22T20:11:05.3319012Z     def get_loc(self, key):
2025-01-22T20:11:05.3319083Z         """
2025-01-22T20:11:05.3319248Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3319317Z     
2025-01-22T20:11:05.3319388Z         Parameters
2025-01-22T20:11:05.3319467Z         ----------
2025-01-22T20:11:05.3319538Z         key : label
2025-01-22T20:11:05.3319604Z     
2025-01-22T20:11:05.3319676Z         Returns
2025-01-22T20:11:05.3319743Z         -------
2025-01-22T20:11:05.3319879Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3319946Z     
2025-01-22T20:11:05.3320018Z         Examples
2025-01-22T20:11:05.3320088Z         --------
2025-01-22T20:11:05.3320190Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3320280Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3320349Z         1
2025-01-22T20:11:05.3320413Z     
2025-01-22T20:11:05.3320519Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3320606Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3320685Z         slice(1, 3, None)
2025-01-22T20:11:05.3320750Z     
2025-01-22T20:11:05.3320863Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3320953Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3321052Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3321119Z         """
2025-01-22T20:11:05.3321222Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3321293Z         try:
2025-01-22T20:11:05.3321391Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3321477Z         except KeyError as err:
2025-01-22T20:11:05.3321573Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3321681Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3321799Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3321869Z             ):
2025-01-22T20:11:05.3321961Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3322050Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3322131Z E           KeyError: 'cups'
2025-01-22T20:11:05.3322135Z 
2025-01-22T20:11:05.3322412Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3322816Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] _
2025-01-22T20:11:05.3322824Z 
2025-01-22T20:11:05.3322982Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3323194Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3323416Z        't046000', 't048000'],
2025-01-22T20:11:05.3323676Z       dtype='object')
2025-01-22T20:11:05.3323805Z key = 'cups'
2025-01-22T20:11:05.3323812Z 
2025-01-22T20:11:05.3323953Z     def get_loc(self, key):
2025-01-22T20:11:05.3324064Z         """
2025-01-22T20:11:05.3324339Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3324448Z     
2025-01-22T20:11:05.3324570Z         Parameters
2025-01-22T20:11:05.3324699Z         ----------
2025-01-22T20:11:05.3324783Z         key : label
2025-01-22T20:11:05.3324855Z     
2025-01-22T20:11:05.3324928Z         Returns
2025-01-22T20:11:05.3325001Z         -------
2025-01-22T20:11:05.3325132Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3325200Z     
2025-01-22T20:11:05.3325269Z         Examples
2025-01-22T20:11:05.3325344Z         --------
2025-01-22T20:11:05.3325442Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3325530Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3325603Z         1
2025-01-22T20:11:05.3325672Z     
2025-01-22T20:11:05.3325773Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3325862Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3325936Z         slice(1, 3, None)
2025-01-22T20:11:05.3326005Z     
2025-01-22T20:11:05.3326112Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3326204Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3326293Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3326368Z         """
2025-01-22T20:11:05.3326477Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3326545Z         try:
2025-01-22T20:11:05.3326647Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3326651Z 
2025-01-22T20:11:05.3326902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3327021Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3327159Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3327229Z     ???
2025-01-22T20:11:05.3327358Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3327427Z     ???
2025-01-22T20:11:05.3327697Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3327767Z     ???
2025-01-22T20:11:05.3327875Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3327893Z 
2025-01-22T20:11:05.3327960Z >   ???
2025-01-22T20:11:05.3328040Z E   KeyError: 'cups'
2025-01-22T20:11:05.3328044Z 
2025-01-22T20:11:05.3328172Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3328176Z 
2025-01-22T20:11:05.3328349Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3328354Z 
2025-01-22T20:11:05.3328578Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3329123Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3330076Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3330082Z 
2025-01-22T20:11:05.3330169Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3330384Z     def plasma(
2025-01-22T20:11:05.3330452Z         self,
2025-01-22T20:11:05.3330537Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3330605Z         config,
2025-01-22T20:11:05.3330678Z     ):
2025-01-22T20:11:05.3330793Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3330895Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3330899Z 
2025-01-22T20:11:05.3331022Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3331240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3331349Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3331438Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3331613Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3331712Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3331826Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3331910Z     return BasePlasma(
2025-01-22T20:11:05.3331999Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3332085Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3332177Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3332257Z     self.update(**kwargs)
2025-01-22T20:11:05.3332349Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3332471Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3332587Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3332694Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3332947Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3333104Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3333311Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3333413Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3333674Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3333859Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3334029Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3334209Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3334652Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3334964Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3335274Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3335444Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3335713Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3335841Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3336087Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3336179Z     return self.apply_standard()
2025-01-22T20:11:05.3336461Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3336581Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3336897Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3337019Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3337240Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3337327Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3337593Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3337682Z     return self._get_value(key)
2025-01-22T20:11:05.3337941Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3338162Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3338274Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3338279Z 
2025-01-22T20:11:05.3338563Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3338926Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3339222Z        't046000', 't048000'],
2025-01-22T20:11:05.3339359Z       dtype='object')
2025-01-22T20:11:05.3339472Z key = 'cups'
2025-01-22T20:11:05.3339477Z 
2025-01-22T20:11:05.3339561Z     def get_loc(self, key):
2025-01-22T20:11:05.3339627Z         """
2025-01-22T20:11:05.3339792Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3339860Z     
2025-01-22T20:11:05.3339935Z         Parameters
2025-01-22T20:11:05.3340006Z         ----------
2025-01-22T20:11:05.3340089Z         key : label
2025-01-22T20:11:05.3340154Z     
2025-01-22T20:11:05.3340225Z         Returns
2025-01-22T20:11:05.3340294Z         -------
2025-01-22T20:11:05.3340430Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3340496Z     
2025-01-22T20:11:05.3340571Z         Examples
2025-01-22T20:11:05.3340640Z         --------
2025-01-22T20:11:05.3340744Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3340828Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3340908Z         1
2025-01-22T20:11:05.3340974Z     
2025-01-22T20:11:05.3341082Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3341176Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3341315Z         slice(1, 3, None)
2025-01-22T20:11:05.3341441Z     
2025-01-22T20:11:05.3341631Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3341787Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3341935Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3342056Z         """
2025-01-22T20:11:05.3342221Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3342339Z         try:
2025-01-22T20:11:05.3342477Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3342563Z         except KeyError as err:
2025-01-22T20:11:05.3342658Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3342763Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3342887Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3342957Z             ):
2025-01-22T20:11:05.3343046Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3343135Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3343219Z E           KeyError: 'cups'
2025-01-22T20:11:05.3343223Z 
2025-01-22T20:11:05.3343587Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3344057Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] _
2025-01-22T20:11:05.3344063Z 
2025-01-22T20:11:05.3344225Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3344438Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3344515Z        't046000', 't048000'],
2025-01-22T20:11:05.3344598Z       dtype='object')
2025-01-22T20:11:05.3344671Z key = 'cups'
2025-01-22T20:11:05.3344679Z 
2025-01-22T20:11:05.3344758Z     def get_loc(self, key):
2025-01-22T20:11:05.3344830Z         """
2025-01-22T20:11:05.3344987Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3345058Z     
2025-01-22T20:11:05.3345133Z         Parameters
2025-01-22T20:11:05.3345208Z         ----------
2025-01-22T20:11:05.3345279Z         key : label
2025-01-22T20:11:05.3345352Z     
2025-01-22T20:11:05.3345556Z         Returns
2025-01-22T20:11:05.3345630Z         -------
2025-01-22T20:11:05.3345765Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3345835Z     
2025-01-22T20:11:05.3345905Z         Examples
2025-01-22T20:11:05.3345980Z         --------
2025-01-22T20:11:05.3346079Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3346169Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3346236Z         1
2025-01-22T20:11:05.3346415Z     
2025-01-22T20:11:05.3346518Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3346608Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3346682Z         slice(1, 3, None)
2025-01-22T20:11:05.3346748Z     
2025-01-22T20:11:05.3346856Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3346945Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3347045Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3347189Z         """
2025-01-22T20:11:05.3347377Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3347496Z         try:
2025-01-22T20:11:05.3347665Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3347671Z 
2025-01-22T20:11:05.3348090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3348285Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3348438Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3348508Z     ???
2025-01-22T20:11:05.3348644Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3348710Z     ???
2025-01-22T20:11:05.3348985Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3349050Z     ???
2025-01-22T20:11:05.3349162Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3349171Z 
2025-01-22T20:11:05.3349237Z >   ???
2025-01-22T20:11:05.3349317Z E   KeyError: 'cups'
2025-01-22T20:11:05.3349321Z 
2025-01-22T20:11:05.3349446Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3349450Z 
2025-01-22T20:11:05.3349624Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3349628Z 
2025-01-22T20:11:05.3349853Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3350178Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3350804Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3350808Z 
2025-01-22T20:11:05.3350895Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3350979Z     def plasma(
2025-01-22T20:11:05.3351045Z         self,
2025-01-22T20:11:05.3351130Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3351199Z         config,
2025-01-22T20:11:05.3351271Z     ):
2025-01-22T20:11:05.3351382Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3351481Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3351485Z 
2025-01-22T20:11:05.3351612Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3351726Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3351834Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3351916Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3352086Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3352184Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3352354Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3352494Z     return BasePlasma(
2025-01-22T20:11:05.3352770Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3352912Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3353064Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3353195Z     self.update(**kwargs)
2025-01-22T20:11:05.3353347Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3353648Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3353764Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3353995Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3354248Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3354401Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3354608Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3354711Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3354836Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3355014Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3355184Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3355369Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3355628Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3355800Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3355989Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3356093Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3356353Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3356477Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3356720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3356810Z     return self.apply_standard()
2025-01-22T20:11:05.3357090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3357211Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3357520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3357642Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3357863Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3357993Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3358477Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3358623Z     return self._get_value(key)
2025-01-22T20:11:05.3359067Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3359213Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3359325Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3359329Z 
2025-01-22T20:11:05.3359491Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3359708Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3359783Z        't046000', 't048000'],
2025-01-22T20:11:05.3359867Z       dtype='object')
2025-01-22T20:11:05.3359937Z key = 'cups'
2025-01-22T20:11:05.3359942Z 
2025-01-22T20:11:05.3360026Z     def get_loc(self, key):
2025-01-22T20:11:05.3360093Z         """
2025-01-22T20:11:05.3360257Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3360324Z     
2025-01-22T20:11:05.3360402Z         Parameters
2025-01-22T20:11:05.3360471Z         ----------
2025-01-22T20:11:05.3360546Z         key : label
2025-01-22T20:11:05.3360737Z     
2025-01-22T20:11:05.3360810Z         Returns
2025-01-22T20:11:05.3360878Z         -------
2025-01-22T20:11:05.3361012Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3361081Z     
2025-01-22T20:11:05.3361149Z         Examples
2025-01-22T20:11:05.3361221Z         --------
2025-01-22T20:11:05.3361317Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3361403Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3361470Z         1
2025-01-22T20:11:05.3361617Z     
2025-01-22T20:11:05.3361721Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3361811Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3361885Z         slice(1, 3, None)
2025-01-22T20:11:05.3361955Z     
2025-01-22T20:11:05.3362061Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3362156Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3362244Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3362321Z         """
2025-01-22T20:11:05.3362422Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3362494Z         try:
2025-01-22T20:11:05.3362593Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3362678Z         except KeyError as err:
2025-01-22T20:11:05.3362778Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3362876Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3363002Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3363070Z             ):
2025-01-22T20:11:05.3363162Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3363248Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3363362Z E           KeyError: 'cups'
2025-01-22T20:11:05.3363369Z 
2025-01-22T20:11:05.3363984Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3364595Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] _
2025-01-22T20:11:05.3364613Z 
2025-01-22T20:11:05.3364808Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3365031Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3365108Z        't046000', 't048000'],
2025-01-22T20:11:05.3365182Z       dtype='object')
2025-01-22T20:11:05.3365262Z key = 'cups'
2025-01-22T20:11:05.3365266Z 
2025-01-22T20:11:05.3365344Z     def get_loc(self, key):
2025-01-22T20:11:05.3365417Z         """
2025-01-22T20:11:05.3365577Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3365647Z     
2025-01-22T20:11:05.3365719Z         Parameters
2025-01-22T20:11:05.3365795Z         ----------
2025-01-22T20:11:05.3365865Z         key : label
2025-01-22T20:11:05.3365934Z     
2025-01-22T20:11:05.3366006Z         Returns
2025-01-22T20:11:05.3366077Z         -------
2025-01-22T20:11:05.3366210Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3366276Z     
2025-01-22T20:11:05.3366345Z         Examples
2025-01-22T20:11:05.3366414Z         --------
2025-01-22T20:11:05.3366521Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3366606Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3366679Z         1
2025-01-22T20:11:05.3366745Z     
2025-01-22T20:11:05.3366857Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3366944Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3367024Z         slice(1, 3, None)
2025-01-22T20:11:05.3367095Z     
2025-01-22T20:11:05.3367207Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3367297Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3367387Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3367455Z         """
2025-01-22T20:11:05.3367709Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3370576Z         try:
2025-01-22T20:11:05.3370694Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3370699Z 
2025-01-22T20:11:05.3370976Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3371093Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3371368Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3371443Z     ???
2025-01-22T20:11:05.3371585Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3371652Z     ???
2025-01-22T20:11:05.3371936Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3372000Z     ???
2025-01-22T20:11:05.3372114Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3372119Z 
2025-01-22T20:11:05.3372192Z >   ???
2025-01-22T20:11:05.3372268Z E   KeyError: 'cups'
2025-01-22T20:11:05.3372272Z 
2025-01-22T20:11:05.3372408Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3372412Z 
2025-01-22T20:11:05.3372580Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3372584Z 
2025-01-22T20:11:05.3372811Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3373143Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3374011Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3374018Z 
2025-01-22T20:11:05.3374115Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3374187Z     def plasma(
2025-01-22T20:11:05.3374275Z         self,
2025-01-22T20:11:05.3374357Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3374432Z         config,
2025-01-22T20:11:05.3374498Z     ):
2025-01-22T20:11:05.3374620Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3374717Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3374721Z 
2025-01-22T20:11:05.3374850Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3374967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3375130Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3375294Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3375599Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3375768Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3375952Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3376084Z     return BasePlasma(
2025-01-22T20:11:05.3376222Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3376385Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3376487Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3376572Z     self.update(**kwargs)
2025-01-22T20:11:05.3376664Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3376793Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3376902Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3377009Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3377264Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3377419Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3377628Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3377725Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3377858Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3378026Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3378338Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3378511Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3378776Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3378952Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3379242Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3379351Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3379615Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3379746Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3379988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3380088Z     return self.apply_standard()
2025-01-22T20:11:05.3380364Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3380492Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3380948Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3381157Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3381534Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3381682Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3382038Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3382128Z     return self._get_value(key)
2025-01-22T20:11:05.3382389Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3382474Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3382598Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3382602Z 
2025-01-22T20:11:05.3382757Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3382970Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3383047Z        't046000', 't048000'],
2025-01-22T20:11:05.3383130Z       dtype='object')
2025-01-22T20:11:05.3383203Z key = 'cups'
2025-01-22T20:11:05.3383207Z 
2025-01-22T20:11:05.3383292Z     def get_loc(self, key):
2025-01-22T20:11:05.3383358Z         """
2025-01-22T20:11:05.3383657Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3383729Z     
2025-01-22T20:11:05.3383802Z         Parameters
2025-01-22T20:11:05.3383877Z         ----------
2025-01-22T20:11:05.3383947Z         key : label
2025-01-22T20:11:05.3384016Z     
2025-01-22T20:11:05.3384088Z         Returns
2025-01-22T20:11:05.3384160Z         -------
2025-01-22T20:11:05.3384293Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3384363Z     
2025-01-22T20:11:05.3384433Z         Examples
2025-01-22T20:11:05.3384507Z         --------
2025-01-22T20:11:05.3384605Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3384694Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3384761Z         1
2025-01-22T20:11:05.3384840Z     
2025-01-22T20:11:05.3384947Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3385039Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3385110Z         slice(1, 3, None)
2025-01-22T20:11:05.3385177Z     
2025-01-22T20:11:05.3385286Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3385376Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3385469Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3385535Z         """
2025-01-22T20:11:05.3385795Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3385864Z         try:
2025-01-22T20:11:05.3385966Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3386049Z         except KeyError as err:
2025-01-22T20:11:05.3386150Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3386249Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3386476Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3386611Z             ):
2025-01-22T20:11:05.3386786Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3386935Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3387071Z E           KeyError: 'cups'
2025-01-22T20:11:05.3387077Z 
2025-01-22T20:11:05.3387541Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3387953Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-atomic_mass] _
2025-01-22T20:11:05.3387964Z 
2025-01-22T20:11:05.3388126Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3388332Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3388410Z        't046000', 't048000'],
2025-01-22T20:11:05.3388484Z       dtype='object')
2025-01-22T20:11:05.3388558Z key = 'cups'
2025-01-22T20:11:05.3388567Z 
2025-01-22T20:11:05.3388646Z     def get_loc(self, key):
2025-01-22T20:11:05.3388720Z         """
2025-01-22T20:11:05.3388882Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3388949Z     
2025-01-22T20:11:05.3389025Z         Parameters
2025-01-22T20:11:05.3389096Z         ----------
2025-01-22T20:11:05.3389171Z         key : label
2025-01-22T20:11:05.3389238Z     
2025-01-22T20:11:05.3389310Z         Returns
2025-01-22T20:11:05.3389383Z         -------
2025-01-22T20:11:05.3389516Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3389580Z     
2025-01-22T20:11:05.3389652Z         Examples
2025-01-22T20:11:05.3389718Z         --------
2025-01-22T20:11:05.3389818Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3389902Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3389975Z         1
2025-01-22T20:11:05.3390040Z     
2025-01-22T20:11:05.3390149Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3390235Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3390314Z         slice(1, 3, None)
2025-01-22T20:11:05.3390385Z     
2025-01-22T20:11:05.3390492Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3390585Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3390676Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3390747Z         """
2025-01-22T20:11:05.3390848Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3390920Z         try:
2025-01-22T20:11:05.3391018Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3391022Z 
2025-01-22T20:11:05.3391271Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3391379Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3391521Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3391592Z     ???
2025-01-22T20:11:05.3391728Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3391796Z     ???
2025-01-22T20:11:05.3392161Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3392289Z     ???
2025-01-22T20:11:05.3392470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3392476Z 
2025-01-22T20:11:05.3392590Z >   ???
2025-01-22T20:11:05.3392831Z E   KeyError: 'cups'
2025-01-22T20:11:05.3392838Z 
2025-01-22T20:11:05.3393055Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3393061Z 
2025-01-22T20:11:05.3393288Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3393293Z 
2025-01-22T20:11:05.3393756Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3394206Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3394840Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3394846Z 
2025-01-22T20:11:05.3394940Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3395012Z     def plasma(
2025-01-22T20:11:05.3395086Z         self,
2025-01-22T20:11:05.3395172Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3395240Z         config,
2025-01-22T20:11:05.3395306Z     ):
2025-01-22T20:11:05.3395417Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3395510Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3395514Z 
2025-01-22T20:11:05.3395638Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3395747Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3395855Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3395942Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3396108Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3396211Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3396322Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3396403Z     return BasePlasma(
2025-01-22T20:11:05.3396487Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3396583Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3396670Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3396754Z     self.update(**kwargs)
2025-01-22T20:11:05.3396844Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3396966Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3397079Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3397179Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3397434Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3397584Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3397795Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3397972Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3398269Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3398551Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3398852Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3399121Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3399389Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3399567Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3399751Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3399861Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3400111Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3400236Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3400473Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3400564Z     return self.apply_standard()
2025-01-22T20:11:05.3400990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3401117Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3401419Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3401539Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3401830Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3401915Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3402183Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3402265Z     return self._get_value(key)
2025-01-22T20:11:05.3402526Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3402611Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3402728Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3402732Z 
2025-01-22T20:11:05.3402888Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3403102Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3403213Z        't046000', 't048000'],
2025-01-22T20:11:05.3403348Z       dtype='object')
2025-01-22T20:11:05.3403485Z key = 'cups'
2025-01-22T20:11:05.3403607Z 
2025-01-22T20:11:05.3403744Z     def get_loc(self, key):
2025-01-22T20:11:05.3403862Z         """
2025-01-22T20:11:05.3404128Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3404243Z     
2025-01-22T20:11:05.3404362Z         Parameters
2025-01-22T20:11:05.3404493Z         ----------
2025-01-22T20:11:05.3404568Z         key : label
2025-01-22T20:11:05.3404639Z     
2025-01-22T20:11:05.3404708Z         Returns
2025-01-22T20:11:05.3404788Z         -------
2025-01-22T20:11:05.3404920Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3404991Z     
2025-01-22T20:11:05.3405061Z         Examples
2025-01-22T20:11:05.3405136Z         --------
2025-01-22T20:11:05.3405238Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3405332Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3405415Z         1
2025-01-22T20:11:05.3405481Z     
2025-01-22T20:11:05.3405592Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3405678Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3405757Z         slice(1, 3, None)
2025-01-22T20:11:05.3405823Z     
2025-01-22T20:11:05.3405932Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3406022Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3406119Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3406184Z         """
2025-01-22T20:11:05.3406286Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3406359Z         try:
2025-01-22T20:11:05.3406459Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3406539Z         except KeyError as err:
2025-01-22T20:11:05.3406638Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3406741Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3406859Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3406935Z             ):
2025-01-22T20:11:05.3407026Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3407116Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3407195Z E           KeyError: 'cups'
2025-01-22T20:11:05.3407199Z 
2025-01-22T20:11:05.3407469Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3407799Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ionization_data] _
2025-01-22T20:11:05.3407933Z 
2025-01-22T20:11:05.3408099Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3408316Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3408390Z        't046000', 't048000'],
2025-01-22T20:11:05.3408470Z       dtype='object')
2025-01-22T20:11:05.3408541Z key = 'cups'
2025-01-22T20:11:05.3408545Z 
2025-01-22T20:11:05.3408769Z     def get_loc(self, key):
2025-01-22T20:11:05.3408898Z         """
2025-01-22T20:11:05.3409192Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3409302Z     
2025-01-22T20:11:05.3409429Z         Parameters
2025-01-22T20:11:05.3409545Z         ----------
2025-01-22T20:11:05.3409666Z         key : label
2025-01-22T20:11:05.3409776Z     
2025-01-22T20:11:05.3409903Z         Returns
2025-01-22T20:11:05.3409978Z         -------
2025-01-22T20:11:05.3410129Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3410196Z     
2025-01-22T20:11:05.3410269Z         Examples
2025-01-22T20:11:05.3410342Z         --------
2025-01-22T20:11:05.3410439Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3410526Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3410592Z         1
2025-01-22T20:11:05.3410665Z     
2025-01-22T20:11:05.3410767Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3410866Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3410941Z         slice(1, 3, None)
2025-01-22T20:11:05.3411012Z     
2025-01-22T20:11:05.3411126Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3411225Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3411317Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3411392Z         """
2025-01-22T20:11:05.3411495Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3411577Z         try:
2025-01-22T20:11:05.3411676Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3411680Z 
2025-01-22T20:11:05.3411935Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3412054Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3412193Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3412267Z     ???
2025-01-22T20:11:05.3412401Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3412505Z     ???
2025-01-22T20:11:05.3412780Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3412852Z     ???
2025-01-22T20:11:05.3412965Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3412969Z 
2025-01-22T20:11:05.3413038Z >   ???
2025-01-22T20:11:05.3413115Z E   KeyError: 'cups'
2025-01-22T20:11:05.3413124Z 
2025-01-22T20:11:05.3413258Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3413262Z 
2025-01-22T20:11:05.3413437Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3413441Z 
2025-01-22T20:11:05.3413781Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3414105Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3414941Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3414949Z 
2025-01-22T20:11:05.3415102Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3415223Z     def plasma(
2025-01-22T20:11:05.3415341Z         self,
2025-01-22T20:11:05.3415477Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3415756Z         config,
2025-01-22T20:11:05.3415829Z     ):
2025-01-22T20:11:05.3415951Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3416051Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3416056Z 
2025-01-22T20:11:05.3416180Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3416295Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3416508Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3416598Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3416766Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3416869Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3416978Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3417061Z     return BasePlasma(
2025-01-22T20:11:05.3417150Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3417238Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3417337Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3417416Z     self.update(**kwargs)
2025-01-22T20:11:05.3417508Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3417635Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3417751Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3417856Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3418115Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3418269Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3418486Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3418584Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3418723Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3418898Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3419075Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3419257Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3419516Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3419696Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3419877Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3419991Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3420321Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3420553Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3420964Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3421115Z     return self.apply_standard()
2025-01-22T20:11:05.3421524Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3421654Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3421964Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3422082Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3422304Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3422395Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3422664Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3422747Z     return self._get_value(key)
2025-01-22T20:11:05.3423010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3423103Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3423212Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3423308Z 
2025-01-22T20:11:05.3423477Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3423843Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3423927Z        't046000', 't048000'],
2025-01-22T20:11:05.3424006Z       dtype='object')
2025-01-22T20:11:05.3424083Z key = 'cups'
2025-01-22T20:11:05.3424087Z 
2025-01-22T20:11:05.3424299Z     def get_loc(self, key):
2025-01-22T20:11:05.3424376Z         """
2025-01-22T20:11:05.3424537Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3424609Z     
2025-01-22T20:11:05.3424682Z         Parameters
2025-01-22T20:11:05.3424760Z         ----------
2025-01-22T20:11:05.3424837Z         key : label
2025-01-22T20:11:05.3424903Z     
2025-01-22T20:11:05.3424979Z         Returns
2025-01-22T20:11:05.3425049Z         -------
2025-01-22T20:11:05.3425192Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3425261Z     
2025-01-22T20:11:05.3425337Z         Examples
2025-01-22T20:11:05.3425407Z         --------
2025-01-22T20:11:05.3425514Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3425600Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3425674Z         1
2025-01-22T20:11:05.3425772Z     
2025-01-22T20:11:05.3426160Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3426364Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3426574Z         slice(1, 3, None)
2025-01-22T20:11:05.3426724Z     
2025-01-22T20:11:05.3427103Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3427273Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3427435Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3427571Z         """
2025-01-22T20:11:05.3427707Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3427903Z         try:
2025-01-22T20:11:05.3428050Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3428200Z         except KeyError as err:
2025-01-22T20:11:05.3428327Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3428492Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3428643Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3428842Z             ):
2025-01-22T20:11:05.3428970Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3429124Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3450776Z E           KeyError: 'cups'
2025-01-22T20:11:05.3450789Z 
2025-01-22T20:11:05.3451281Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3451855Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] _
2025-01-22T20:11:05.3451875Z 
2025-01-22T20:11:05.3452159Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3452523Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3452648Z        't046000', 't048000'],
2025-01-22T20:11:05.3452777Z       dtype='object')
2025-01-22T20:11:05.3452895Z key = 'cups'
2025-01-22T20:11:05.3452901Z 
2025-01-22T20:11:05.3453041Z     def get_loc(self, key):
2025-01-22T20:11:05.3453164Z         """
2025-01-22T20:11:05.3453340Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3453405Z     
2025-01-22T20:11:05.3453484Z         Parameters
2025-01-22T20:11:05.3453693Z         ----------
2025-01-22T20:11:05.3453763Z         key : label
2025-01-22T20:11:05.3453830Z     
2025-01-22T20:11:05.3453896Z         Returns
2025-01-22T20:11:05.3453970Z         -------
2025-01-22T20:11:05.3454112Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3454401Z     
2025-01-22T20:11:05.3454471Z         Examples
2025-01-22T20:11:05.3454544Z         --------
2025-01-22T20:11:05.3454646Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3454734Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3454801Z         1
2025-01-22T20:11:05.3454872Z     
2025-01-22T20:11:05.3454977Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3455069Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3455250Z         slice(1, 3, None)
2025-01-22T20:11:05.3455322Z     
2025-01-22T20:11:05.3455434Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3455536Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3455627Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3455693Z         """
2025-01-22T20:11:05.3455797Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3455863Z         try:
2025-01-22T20:11:05.3455971Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3455976Z 
2025-01-22T20:11:05.3456239Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3456359Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3456499Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3456569Z     ???
2025-01-22T20:11:05.3456701Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3456769Z     ???
2025-01-22T20:11:05.3457045Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3457113Z     ???
2025-01-22T20:11:05.3457224Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3457229Z 
2025-01-22T20:11:05.3457294Z >   ???
2025-01-22T20:11:05.3457372Z E   KeyError: 'cups'
2025-01-22T20:11:05.3457376Z 
2025-01-22T20:11:05.3457509Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3457517Z 
2025-01-22T20:11:05.3457688Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3457692Z 
2025-01-22T20:11:05.3457916Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3458248Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3458883Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3458888Z 
2025-01-22T20:11:05.3458977Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3459052Z     def plasma(
2025-01-22T20:11:05.3459119Z         self,
2025-01-22T20:11:05.3459202Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3459270Z         config,
2025-01-22T20:11:05.3459344Z     ):
2025-01-22T20:11:05.3459457Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3459555Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3459560Z 
2025-01-22T20:11:05.3459681Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3459792Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3459902Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3459987Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3460155Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3460252Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3460363Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3460439Z     return BasePlasma(
2025-01-22T20:11:05.3460525Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3460614Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3460705Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3460894Z     self.update(**kwargs)
2025-01-22T20:11:05.3460982Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3461109Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3461230Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3461333Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3461587Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3461814Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3462027Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3462126Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3462253Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3462423Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3462592Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3462770Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3463027Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3463199Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3463379Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3463489Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3463880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3464005Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3464246Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3464332Z     return self.apply_standard()
2025-01-22T20:11:05.3464611Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3464736Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3465042Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3465168Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3465386Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3465475Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3465743Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3465829Z     return self._get_value(key)
2025-01-22T20:11:05.3466082Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3466169Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3466278Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3466287Z 
2025-01-22T20:11:05.3466446Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3466653Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3466729Z        't046000', 't048000'],
2025-01-22T20:11:05.3466803Z       dtype='object')
2025-01-22T20:11:05.3466875Z key = 'cups'
2025-01-22T20:11:05.3466879Z 
2025-01-22T20:11:05.3466961Z     def get_loc(self, key):
2025-01-22T20:11:05.3467031Z         """
2025-01-22T20:11:05.3467189Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3467254Z     
2025-01-22T20:11:05.3467329Z         Parameters
2025-01-22T20:11:05.3467400Z         ----------
2025-01-22T20:11:05.3467474Z         key : label
2025-01-22T20:11:05.3467537Z     
2025-01-22T20:11:05.3467608Z         Returns
2025-01-22T20:11:05.3467676Z         -------
2025-01-22T20:11:05.3467812Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3467999Z     
2025-01-22T20:11:05.3468071Z         Examples
2025-01-22T20:11:05.3468139Z         --------
2025-01-22T20:11:05.3468240Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3468323Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3468390Z         1
2025-01-22T20:11:05.3468455Z     
2025-01-22T20:11:05.3468562Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3468752Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3468828Z         slice(1, 3, None)
2025-01-22T20:11:05.3468894Z     
2025-01-22T20:11:05.3469002Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3469094Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3469182Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3469251Z         """
2025-01-22T20:11:05.3469353Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3469423Z         try:
2025-01-22T20:11:05.3469528Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3469609Z         except KeyError as err:
2025-01-22T20:11:05.3469705Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3469809Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3469928Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3469998Z             ):
2025-01-22T20:11:05.3470091Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3470182Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3470265Z E           KeyError: 'cups'
2025-01-22T20:11:05.3470269Z 
2025-01-22T20:11:05.3470540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3470864Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] _
2025-01-22T20:11:05.3470869Z 
2025-01-22T20:11:05.3471021Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3471234Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3471306Z        't046000', 't048000'],
2025-01-22T20:11:05.3471384Z       dtype='object')
2025-01-22T20:11:05.3471454Z key = 'cups'
2025-01-22T20:11:05.3471462Z 
2025-01-22T20:11:05.3471543Z     def get_loc(self, key):
2025-01-22T20:11:05.3471613Z         """
2025-01-22T20:11:05.3471772Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3471840Z     
2025-01-22T20:11:05.3471911Z         Parameters
2025-01-22T20:11:05.3471984Z         ----------
2025-01-22T20:11:05.3472054Z         key : label
2025-01-22T20:11:05.3472123Z     
2025-01-22T20:11:05.3472191Z         Returns
2025-01-22T20:11:05.3472262Z         -------
2025-01-22T20:11:05.3472390Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3472460Z     
2025-01-22T20:11:05.3472529Z         Examples
2025-01-22T20:11:05.3472600Z         --------
2025-01-22T20:11:05.3472694Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3472781Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3472847Z         1
2025-01-22T20:11:05.3472914Z     
2025-01-22T20:11:05.3473015Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3473099Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3473179Z         slice(1, 3, None)
2025-01-22T20:11:05.3473243Z     
2025-01-22T20:11:05.3473354Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3473441Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3473649Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3473717Z         """
2025-01-22T20:11:05.3473823Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3473888Z         try:
2025-01-22T20:11:05.3473992Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3474115Z 
2025-01-22T20:11:05.3474366Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3474479Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3474617Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3474686Z     ???
2025-01-22T20:11:05.3474819Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3474884Z     ???
2025-01-22T20:11:05.3475255Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3475323Z     ???
2025-01-22T20:11:05.3475434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3475438Z 
2025-01-22T20:11:05.3475501Z >   ???
2025-01-22T20:11:05.3475588Z E   KeyError: 'cups'
2025-01-22T20:11:05.3475592Z 
2025-01-22T20:11:05.3475720Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3475729Z 
2025-01-22T20:11:05.3475900Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3475905Z 
2025-01-22T20:11:05.3476127Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3476443Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3477389Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3477398Z 
2025-01-22T20:11:05.3477544Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3477670Z     def plasma(
2025-01-22T20:11:05.3477783Z         self,
2025-01-22T20:11:05.3477918Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3478030Z         config,
2025-01-22T20:11:05.3478142Z     ):
2025-01-22T20:11:05.3478333Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3478497Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3478504Z 
2025-01-22T20:11:05.3478738Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3478923Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3479100Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3479235Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3479531Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3479659Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3479773Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3479849Z     return BasePlasma(
2025-01-22T20:11:05.3479936Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3480022Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3480115Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3480196Z     self.update(**kwargs)
2025-01-22T20:11:05.3480284Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3480406Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3480514Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3480617Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3480866Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3481025Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3481242Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3481341Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3481471Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3481642Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3481814Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3482086Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3482353Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3482524Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3482709Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3482813Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3483146Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3483273Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3483671Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3483761Z     return self.apply_standard()
2025-01-22T20:11:05.3484044Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3484170Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3484475Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3484597Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3484811Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3484900Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3485167Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3485258Z     return self._get_value(key)
2025-01-22T20:11:05.3485513Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3485601Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3485711Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3485715Z 
2025-01-22T20:11:05.3485881Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3486093Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3486165Z        't046000', 't048000'],
2025-01-22T20:11:05.3486241Z       dtype='object')
2025-01-22T20:11:05.3486309Z key = 'cups'
2025-01-22T20:11:05.3486313Z 
2025-01-22T20:11:05.3486393Z     def get_loc(self, key):
2025-01-22T20:11:05.3486459Z         """
2025-01-22T20:11:05.3486623Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3486689Z     
2025-01-22T20:11:05.3486762Z         Parameters
2025-01-22T20:11:05.3486832Z         ----------
2025-01-22T20:11:05.3486905Z         key : label
2025-01-22T20:11:05.3486969Z     
2025-01-22T20:11:05.3487038Z         Returns
2025-01-22T20:11:05.3487105Z         -------
2025-01-22T20:11:05.3487236Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3487312Z     
2025-01-22T20:11:05.3487379Z         Examples
2025-01-22T20:11:05.3487450Z         --------
2025-01-22T20:11:05.3487546Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3487633Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3487698Z         1
2025-01-22T20:11:05.3487765Z     
2025-01-22T20:11:05.3487869Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3488028Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3488162Z         slice(1, 3, None)
2025-01-22T20:11:05.3488274Z     
2025-01-22T20:11:05.3488452Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3488605Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3488751Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3488866Z         """
2025-01-22T20:11:05.3489009Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3489086Z         try:
2025-01-22T20:11:05.3489186Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3489427Z         except KeyError as err:
2025-01-22T20:11:05.3489526Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3489628Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3489748Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3489814Z             ):
2025-01-22T20:11:05.3489904Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3490088Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3490170Z E           KeyError: 'cups'
2025-01-22T20:11:05.3490175Z 
2025-01-22T20:11:05.3490439Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3490749Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] _
2025-01-22T20:11:05.3490753Z 
2025-01-22T20:11:05.3490912Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3491130Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3491205Z        't046000', 't048000'],
2025-01-22T20:11:05.3491278Z       dtype='object')
2025-01-22T20:11:05.3491349Z key = 'cups'
2025-01-22T20:11:05.3491354Z 
2025-01-22T20:11:05.3491432Z     def get_loc(self, key):
2025-01-22T20:11:05.3491500Z         """
2025-01-22T20:11:05.3491664Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3491731Z     
2025-01-22T20:11:05.3491800Z         Parameters
2025-01-22T20:11:05.3491873Z         ----------
2025-01-22T20:11:05.3491947Z         key : label
2025-01-22T20:11:05.3492015Z     
2025-01-22T20:11:05.3492081Z         Returns
2025-01-22T20:11:05.3492153Z         -------
2025-01-22T20:11:05.3492282Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3492350Z     
2025-01-22T20:11:05.3492424Z         Examples
2025-01-22T20:11:05.3492497Z         --------
2025-01-22T20:11:05.3492598Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3492682Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3492761Z         1
2025-01-22T20:11:05.3492825Z     
2025-01-22T20:11:05.3492932Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3493018Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3493097Z         slice(1, 3, None)
2025-01-22T20:11:05.3493161Z     
2025-01-22T20:11:05.3493274Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3493365Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3493456Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3493659Z         """
2025-01-22T20:11:05.3493766Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3493833Z         try:
2025-01-22T20:11:05.3493935Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3493939Z 
2025-01-22T20:11:05.3494193Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3494302Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3494444Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3494511Z     ???
2025-01-22T20:11:05.3494644Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3494709Z     ???
2025-01-22T20:11:05.3494991Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3495056Z     ???
2025-01-22T20:11:05.3495167Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3495172Z 
2025-01-22T20:11:05.3495236Z >   ???
2025-01-22T20:11:05.3495317Z E   KeyError: 'cups'
2025-01-22T20:11:05.3495321Z 
2025-01-22T20:11:05.3495453Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3495457Z 
2025-01-22T20:11:05.3495747Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3495751Z 
2025-01-22T20:11:05.3495976Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3496296Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3497019Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3497024Z 
2025-01-22T20:11:05.3497119Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3497192Z     def plasma(
2025-01-22T20:11:05.3497264Z         self,
2025-01-22T20:11:05.3497343Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3497415Z         config,
2025-01-22T20:11:05.3497481Z     ):
2025-01-22T20:11:05.3497595Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3497694Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3497698Z 
2025-01-22T20:11:05.3497823Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3497928Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3498037Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3498120Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3498295Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3498390Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3498501Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3498581Z     return BasePlasma(
2025-01-22T20:11:05.3498663Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3498754Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3498841Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3498925Z     self.update(**kwargs)
2025-01-22T20:11:05.3499017Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3499143Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3499253Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3499360Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3499605Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3499761Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3499971Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3500070Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3500201Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3500368Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3500543Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3500716Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3500980Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3501148Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3501327Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3501429Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3501691Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3501813Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3502053Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3502141Z     return self.apply_standard()
2025-01-22T20:11:05.3502418Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3502539Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3502934Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3503057Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3503270Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3503357Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3503823Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3503910Z     return self._get_value(key)
2025-01-22T20:11:05.3504171Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3504263Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3504375Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3504380Z 
2025-01-22T20:11:05.3504563Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3504938Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3505063Z        't046000', 't048000'],
2025-01-22T20:11:05.3505196Z       dtype='object')
2025-01-22T20:11:05.3505317Z key = 'cups'
2025-01-22T20:11:05.3505323Z 
2025-01-22T20:11:05.3505450Z     def get_loc(self, key):
2025-01-22T20:11:05.3505554Z         """
2025-01-22T20:11:05.3505792Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3505860Z     
2025-01-22T20:11:05.3505936Z         Parameters
2025-01-22T20:11:05.3506010Z         ----------
2025-01-22T20:11:05.3506078Z         key : label
2025-01-22T20:11:05.3506145Z     
2025-01-22T20:11:05.3506213Z         Returns
2025-01-22T20:11:05.3506287Z         -------
2025-01-22T20:11:05.3506418Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3506485Z     
2025-01-22T20:11:05.3506558Z         Examples
2025-01-22T20:11:05.3506630Z         --------
2025-01-22T20:11:05.3506726Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3506812Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3506875Z         1
2025-01-22T20:11:05.3506944Z     
2025-01-22T20:11:05.3507047Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3507137Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3507209Z         slice(1, 3, None)
2025-01-22T20:11:05.3507281Z     
2025-01-22T20:11:05.3507386Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3507483Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3507575Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3507642Z         """
2025-01-22T20:11:05.3507746Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3507813Z         try:
2025-01-22T20:11:05.3507914Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3507999Z         except KeyError as err:
2025-01-22T20:11:05.3508100Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3508197Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3508319Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3508386Z             ):
2025-01-22T20:11:05.3508481Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3508565Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3508654Z E           KeyError: 'cups'
2025-01-22T20:11:05.3508658Z 
2025-01-22T20:11:05.3508927Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3509252Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-metastability] _
2025-01-22T20:11:05.3509257Z 
2025-01-22T20:11:05.3509415Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3509771Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3509849Z        't046000', 't048000'],
2025-01-22T20:11:05.3509923Z       dtype='object')
2025-01-22T20:11:05.3509998Z key = 'cups'
2025-01-22T20:11:05.3510002Z 
2025-01-22T20:11:05.3510079Z     def get_loc(self, key):
2025-01-22T20:11:05.3510150Z         """
2025-01-22T20:11:05.3510305Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3510474Z     
2025-01-22T20:11:05.3510552Z         Parameters
2025-01-22T20:11:05.3510621Z         ----------
2025-01-22T20:11:05.3510692Z         key : label
2025-01-22T20:11:05.3510757Z     
2025-01-22T20:11:05.3510828Z         Returns
2025-01-22T20:11:05.3510896Z         -------
2025-01-22T20:11:05.3511027Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3511091Z     
2025-01-22T20:11:05.3511162Z         Examples
2025-01-22T20:11:05.3511229Z         --------
2025-01-22T20:11:05.3511334Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3511417Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3511487Z         1
2025-01-22T20:11:05.3511555Z     
2025-01-22T20:11:05.3511659Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3511744Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3511823Z         slice(1, 3, None)
2025-01-22T20:11:05.3511888Z     
2025-01-22T20:11:05.3512004Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3512097Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3512186Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3512257Z         """
2025-01-22T20:11:05.3512358Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3512432Z         try:
2025-01-22T20:11:05.3512572Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3512576Z 
2025-01-22T20:11:05.3512823Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3512936Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3513075Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3513143Z     ???
2025-01-22T20:11:05.3513274Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3513338Z     ???
2025-01-22T20:11:05.3513791Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3513864Z     ???
2025-01-22T20:11:05.3513971Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3513976Z 
2025-01-22T20:11:05.3514045Z >   ???
2025-01-22T20:11:05.3514121Z E   KeyError: 'cups'
2025-01-22T20:11:05.3514125Z 
2025-01-22T20:11:05.3514255Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3514259Z 
2025-01-22T20:11:05.3514422Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3514431Z 
2025-01-22T20:11:05.3514656Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3514973Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3515601Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3515606Z 
2025-01-22T20:11:05.3515696Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3515766Z     def plasma(
2025-01-22T20:11:05.3515836Z         self,
2025-01-22T20:11:05.3515913Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3515983Z         config,
2025-01-22T20:11:05.3516046Z     ):
2025-01-22T20:11:05.3516156Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3516375Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3516380Z 
2025-01-22T20:11:05.3516505Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3516609Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3516717Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3516806Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3516972Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3517232Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3517345Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3517424Z     return BasePlasma(
2025-01-22T20:11:05.3517506Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3517593Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3517682Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3517764Z     self.update(**kwargs)
2025-01-22T20:11:05.3517851Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3517980Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3518087Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3518194Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3518444Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3518595Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3518811Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3518905Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3519035Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3519201Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3519379Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3519552Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3519815Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3519986Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3520171Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3520287Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3520551Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3520679Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3520916Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3521003Z     return self.apply_standard()
2025-01-22T20:11:05.3521279Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3521402Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3521710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3521828Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3522043Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3522132Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3522398Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3522483Z     return self._get_value(key)
2025-01-22T20:11:05.3522744Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3522830Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3522941Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3522945Z 
2025-01-22T20:11:05.3523100Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3523403Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3523476Z        't046000', 't048000'],
2025-01-22T20:11:05.3523904Z       dtype='object')
2025-01-22T20:11:05.3524022Z key = 'cups'
2025-01-22T20:11:05.3524030Z 
2025-01-22T20:11:05.3524148Z     def get_loc(self, key):
2025-01-22T20:11:05.3524262Z         """
2025-01-22T20:11:05.3524649Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3524725Z     
2025-01-22T20:11:05.3524801Z         Parameters
2025-01-22T20:11:05.3524876Z         ----------
2025-01-22T20:11:05.3524948Z         key : label
2025-01-22T20:11:05.3525016Z     
2025-01-22T20:11:05.3525082Z         Returns
2025-01-22T20:11:05.3525154Z         -------
2025-01-22T20:11:05.3525293Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3525362Z     
2025-01-22T20:11:05.3525431Z         Examples
2025-01-22T20:11:05.3525509Z         --------
2025-01-22T20:11:05.3525608Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3525697Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3525765Z         1
2025-01-22T20:11:05.3525835Z     
2025-01-22T20:11:05.3525940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3526027Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3526105Z         slice(1, 3, None)
2025-01-22T20:11:05.3526170Z     
2025-01-22T20:11:05.3526286Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3526376Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3526468Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3526533Z         """
2025-01-22T20:11:05.3526636Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3526703Z         try:
2025-01-22T20:11:05.3526806Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3526886Z         except KeyError as err:
2025-01-22T20:11:05.3526990Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3527089Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3527210Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3527277Z             ):
2025-01-22T20:11:05.3527366Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3527455Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3527534Z E           KeyError: 'cups'
2025-01-22T20:11:05.3527543Z 
2025-01-22T20:11:05.3527820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3528127Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-delta] _
2025-01-22T20:11:05.3528131Z 
2025-01-22T20:11:05.3528287Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3528492Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3528578Z        't046000', 't048000'],
2025-01-22T20:11:05.3528651Z       dtype='object')
2025-01-22T20:11:05.3528726Z key = 'cups'
2025-01-22T20:11:05.3528730Z 
2025-01-22T20:11:05.3528812Z     def get_loc(self, key):
2025-01-22T20:11:05.3528878Z         """
2025-01-22T20:11:05.3529039Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3529105Z     
2025-01-22T20:11:05.3529183Z         Parameters
2025-01-22T20:11:05.3529253Z         ----------
2025-01-22T20:11:05.3529326Z         key : label
2025-01-22T20:11:05.3529391Z     
2025-01-22T20:11:05.3529463Z         Returns
2025-01-22T20:11:05.3529530Z         -------
2025-01-22T20:11:05.3529666Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3529732Z     
2025-01-22T20:11:05.3529805Z         Examples
2025-01-22T20:11:05.3529875Z         --------
2025-01-22T20:11:05.3529975Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3530177Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3530248Z         1
2025-01-22T20:11:05.3530317Z     
2025-01-22T20:11:05.3530427Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3530516Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3530591Z         slice(1, 3, None)
2025-01-22T20:11:05.3530658Z     
2025-01-22T20:11:05.3530764Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3530929Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3531021Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3531092Z         """
2025-01-22T20:11:05.3531193Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3531266Z         try:
2025-01-22T20:11:05.3531364Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3531369Z 
2025-01-22T20:11:05.3531623Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3531737Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3531878Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3531948Z     ???
2025-01-22T20:11:05.3532076Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3532145Z     ???
2025-01-22T20:11:05.3532411Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3532480Z     ???
2025-01-22T20:11:05.3532585Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3532589Z 
2025-01-22T20:11:05.3532656Z >   ???
2025-01-22T20:11:05.3532732Z E   KeyError: 'cups'
2025-01-22T20:11:05.3532736Z 
2025-01-22T20:11:05.3532867Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3532871Z 
2025-01-22T20:11:05.3533036Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3533048Z 
2025-01-22T20:11:05.3533273Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3533774Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3534414Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3534419Z 
2025-01-22T20:11:05.3534515Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3534586Z     def plasma(
2025-01-22T20:11:05.3534657Z         self,
2025-01-22T20:11:05.3534739Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3534807Z         config,
2025-01-22T20:11:05.3534874Z     ):
2025-01-22T20:11:05.3534989Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3535088Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3535097Z 
2025-01-22T20:11:05.3535220Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3535332Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3535437Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3535524Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3535694Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3535800Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3535909Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3535991Z     return BasePlasma(
2025-01-22T20:11:05.3536075Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3536165Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3536254Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3536337Z     self.update(**kwargs)
2025-01-22T20:11:05.3536429Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3536548Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3536787Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3536889Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3537144Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3537295Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3537510Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3537726Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3537862Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3538033Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3538207Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3538387Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3538644Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3538830Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3539010Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3539117Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3539376Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3539506Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3539746Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3539836Z     return self.apply_standard()
2025-01-22T20:11:05.3540110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3540233Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3540542Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3540664Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3540883Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3540969Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3541237Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3541323Z     return self._get_value(key)
2025-01-22T20:11:05.3541584Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3541670Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3541784Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3541789Z 
2025-01-22T20:11:05.3541951Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3542162Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3542246Z        't046000', 't048000'],
2025-01-22T20:11:05.3542320Z       dtype='object')
2025-01-22T20:11:05.3542395Z key = 'cups'
2025-01-22T20:11:05.3542399Z 
2025-01-22T20:11:05.3542478Z     def get_loc(self, key):
2025-01-22T20:11:05.3542550Z         """
2025-01-22T20:11:05.3542708Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3542780Z     
2025-01-22T20:11:05.3542856Z         Parameters
2025-01-22T20:11:05.3542932Z         ----------
2025-01-22T20:11:05.3543002Z         key : label
2025-01-22T20:11:05.3543072Z     
2025-01-22T20:11:05.3543139Z         Returns
2025-01-22T20:11:05.3543215Z         -------
2025-01-22T20:11:05.3543351Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3543420Z     
2025-01-22T20:11:05.3543623Z         Examples
2025-01-22T20:11:05.3543730Z         --------
2025-01-22T20:11:05.3543960Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3544045Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3544115Z         1
2025-01-22T20:11:05.3544180Z     
2025-01-22T20:11:05.3544290Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3544379Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3544456Z         slice(1, 3, None)
2025-01-22T20:11:05.3544519Z     
2025-01-22T20:11:05.3544629Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3544818Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3544914Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3544981Z         """
2025-01-22T20:11:05.3545086Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3545153Z         try:
2025-01-22T20:11:05.3545253Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3545341Z         except KeyError as err:
2025-01-22T20:11:05.3545439Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3545547Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3545666Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3545737Z             ):
2025-01-22T20:11:05.3545830Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3545919Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3545999Z E           KeyError: 'cups'
2025-01-22T20:11:05.3546003Z 
2025-01-22T20:11:05.3546280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3546645Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_electron_densities] _
2025-01-22T20:11:05.3546654Z 
2025-01-22T20:11:05.3546808Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3547019Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3547100Z        't046000', 't048000'],
2025-01-22T20:11:05.3547176Z       dtype='object')
2025-01-22T20:11:05.3547246Z key = 'cups'
2025-01-22T20:11:05.3547250Z 
2025-01-22T20:11:05.3547333Z     def get_loc(self, key):
2025-01-22T20:11:05.3547399Z         """
2025-01-22T20:11:05.3547560Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3547626Z     
2025-01-22T20:11:05.3547701Z         Parameters
2025-01-22T20:11:05.3547773Z         ----------
2025-01-22T20:11:05.3547850Z         key : label
2025-01-22T20:11:05.3547915Z     
2025-01-22T20:11:05.3547988Z         Returns
2025-01-22T20:11:05.3548057Z         -------
2025-01-22T20:11:05.3548193Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3548263Z     
2025-01-22T20:11:05.3548331Z         Examples
2025-01-22T20:11:05.3548408Z         --------
2025-01-22T20:11:05.3548506Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3548600Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3548667Z         1
2025-01-22T20:11:05.3548736Z     
2025-01-22T20:11:05.3548836Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3548924Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3548996Z         slice(1, 3, None)
2025-01-22T20:11:05.3549065Z     
2025-01-22T20:11:05.3549170Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3549265Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3549354Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3549425Z         """
2025-01-22T20:11:05.3549524Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3549598Z         try:
2025-01-22T20:11:05.3549701Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3549705Z 
2025-01-22T20:11:05.3549966Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3550189Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3550324Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3550395Z     ???
2025-01-22T20:11:05.3550525Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3550596Z     ???
2025-01-22T20:11:05.3550867Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3550937Z     ???
2025-01-22T20:11:05.3551114Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3551119Z 
2025-01-22T20:11:05.3551190Z >   ???
2025-01-22T20:11:05.3551266Z E   KeyError: 'cups'
2025-01-22T20:11:05.3551276Z 
2025-01-22T20:11:05.3551401Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3551405Z 
2025-01-22T20:11:05.3551574Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3551578Z 
2025-01-22T20:11:05.3551803Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3552126Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3552752Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3552761Z 
2025-01-22T20:11:05.3552847Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3552923Z     def plasma(
2025-01-22T20:11:05.3552991Z         self,
2025-01-22T20:11:05.3553074Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3553143Z         config,
2025-01-22T20:11:05.3553217Z     ):
2025-01-22T20:11:05.3553328Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3553426Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3553435Z 
2025-01-22T20:11:05.3553747Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3553863Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3553967Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3554056Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3554220Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3554332Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3554450Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3554526Z     return BasePlasma(
2025-01-22T20:11:05.3554612Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3554697Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3554791Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3554869Z     self.update(**kwargs)
2025-01-22T20:11:05.3554959Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3555077Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3555196Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3555298Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3555549Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3555698Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3555908Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3556010Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3556137Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3556308Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3556480Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3556652Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3556907Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3557208Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3557387Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3557495Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3557748Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3557879Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3558230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3558318Z     return self.apply_standard()
2025-01-22T20:11:05.3558599Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3558716Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3559023Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3559165Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3559387Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3559473Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3559744Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3559829Z     return self._get_value(key)
2025-01-22T20:11:05.3560096Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3560189Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3560296Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3560300Z 
2025-01-22T20:11:05.3560459Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3560667Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3560750Z        't046000', 't048000'],
2025-01-22T20:11:05.3560824Z       dtype='object')
2025-01-22T20:11:05.3560901Z key = 'cups'
2025-01-22T20:11:05.3560906Z 
2025-01-22T20:11:05.3560984Z     def get_loc(self, key):
2025-01-22T20:11:05.3561059Z         """
2025-01-22T20:11:05.3561214Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3561284Z     
2025-01-22T20:11:05.3561364Z         Parameters
2025-01-22T20:11:05.3561435Z         ----------
2025-01-22T20:11:05.3561509Z         key : label
2025-01-22T20:11:05.3561574Z     
2025-01-22T20:11:05.3561649Z         Returns
2025-01-22T20:11:05.3561717Z         -------
2025-01-22T20:11:05.3561850Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3561917Z     
2025-01-22T20:11:05.3561991Z         Examples
2025-01-22T20:11:05.3562060Z         --------
2025-01-22T20:11:05.3562157Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3562246Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3562315Z         1
2025-01-22T20:11:05.3562381Z     
2025-01-22T20:11:05.3562485Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3562571Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3562652Z         slice(1, 3, None)
2025-01-22T20:11:05.3562718Z     
2025-01-22T20:11:05.3562832Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3562930Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3563018Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3563089Z         """
2025-01-22T20:11:05.3563191Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3563264Z         try:
2025-01-22T20:11:05.3563362Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3563446Z         except KeyError as err:
2025-01-22T20:11:05.3563714Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3563969Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3564094Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3564165Z             ):
2025-01-22T20:11:05.3564258Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3564348Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3564428Z E           KeyError: 'cups'
2025-01-22T20:11:05.3564432Z 
2025-01-22T20:11:05.3564811Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3565121Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-phi] _
2025-01-22T20:11:05.3565125Z 
2025-01-22T20:11:05.3565283Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3565494Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3565573Z        't046000', 't048000'],
2025-01-22T20:11:05.3565651Z       dtype='object')
2025-01-22T20:11:05.3565720Z key = 'cups'
2025-01-22T20:11:05.3565724Z 
2025-01-22T20:11:05.3565806Z     def get_loc(self, key):
2025-01-22T20:11:05.3565873Z         """
2025-01-22T20:11:05.3566038Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3566107Z     
2025-01-22T20:11:05.3566178Z         Parameters
2025-01-22T20:11:05.3566251Z         ----------
2025-01-22T20:11:05.3566326Z         key : label
2025-01-22T20:11:05.3566394Z     
2025-01-22T20:11:05.3566462Z         Returns
2025-01-22T20:11:05.3566534Z         -------
2025-01-22T20:11:05.3566663Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3566735Z     
2025-01-22T20:11:05.3566803Z         Examples
2025-01-22T20:11:05.3566877Z         --------
2025-01-22T20:11:05.3566975Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3567064Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3567134Z         1
2025-01-22T20:11:05.3567202Z     
2025-01-22T20:11:05.3567301Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3567390Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3567465Z         slice(1, 3, None)
2025-01-22T20:11:05.3567534Z     
2025-01-22T20:11:05.3567641Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3567734Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3567832Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3567899Z         """
2025-01-22T20:11:05.3568004Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3568073Z         try:
2025-01-22T20:11:05.3568174Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3568179Z 
2025-01-22T20:11:05.3568422Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3568536Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3568677Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3568748Z     ???
2025-01-22T20:11:05.3568878Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3568949Z     ???
2025-01-22T20:11:05.3569219Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3569289Z     ???
2025-01-22T20:11:05.3569404Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3569408Z 
2025-01-22T20:11:05.3569472Z >   ???
2025-01-22T20:11:05.3569554Z E   KeyError: 'cups'
2025-01-22T20:11:05.3569559Z 
2025-01-22T20:11:05.3569688Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3569692Z 
2025-01-22T20:11:05.3569862Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3569866Z 
2025-01-22T20:11:05.3570088Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3570502Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3571126Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3571130Z 
2025-01-22T20:11:05.3571314Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3571392Z     def plasma(
2025-01-22T20:11:05.3571459Z         self,
2025-01-22T20:11:05.3571544Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3571614Z         config,
2025-01-22T20:11:05.3571684Z     ):
2025-01-22T20:11:05.3571792Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3571891Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3571895Z 
2025-01-22T20:11:05.3572015Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3572131Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3572240Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3572322Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3572487Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3572585Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3572702Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3572779Z     return BasePlasma(
2025-01-22T20:11:05.3572867Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3572951Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3573043Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3573121Z     self.update(**kwargs)
2025-01-22T20:11:05.3573213Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3573331Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3573443Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3573710Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3574018Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3574174Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3574380Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3574480Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3574613Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3574785Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3574954Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3575131Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3575384Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3575564Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3575745Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3575848Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3576106Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3576228Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3576479Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3576565Z     return self.apply_standard()
2025-01-22T20:11:05.3576846Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3576966Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3577275Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3577520Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3577740Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3577830Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3578093Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3578180Z     return self._get_value(key)
2025-01-22T20:11:05.3578532Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3578623Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3578729Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3578733Z 
2025-01-22T20:11:05.3578893Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3579101Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3579187Z        't046000', 't048000'],
2025-01-22T20:11:05.3579269Z       dtype='object')
2025-01-22T20:11:05.3579346Z key = 'cups'
2025-01-22T20:11:05.3579350Z 
2025-01-22T20:11:05.3579434Z     def get_loc(self, key):
2025-01-22T20:11:05.3579506Z         """
2025-01-22T20:11:05.3579672Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3579742Z     
2025-01-22T20:11:05.3579822Z         Parameters
2025-01-22T20:11:05.3579893Z         ----------
2025-01-22T20:11:05.3579976Z         key : label
2025-01-22T20:11:05.3580045Z     
2025-01-22T20:11:05.3580123Z         Returns
2025-01-22T20:11:05.3580194Z         -------
2025-01-22T20:11:05.3580332Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3580399Z     
2025-01-22T20:11:05.3580478Z         Examples
2025-01-22T20:11:05.3580550Z         --------
2025-01-22T20:11:05.3580653Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3580737Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3580814Z         1
2025-01-22T20:11:05.3580889Z     
2025-01-22T20:11:05.3580991Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3581084Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3581158Z         slice(1, 3, None)
2025-01-22T20:11:05.3581230Z     
2025-01-22T20:11:05.3581336Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3581433Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3581526Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3581601Z         """
2025-01-22T20:11:05.3581701Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3581773Z         try:
2025-01-22T20:11:05.3581872Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3581960Z         except KeyError as err:
2025-01-22T20:11:05.3582056Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3582159Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3582282Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3582357Z             ):
2025-01-22T20:11:05.3582455Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3582542Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3582628Z E           KeyError: 'cups'
2025-01-22T20:11:05.3582632Z 
2025-01-22T20:11:05.3582902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3583241Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ion_number_density] _
2025-01-22T20:11:05.3583247Z 
2025-01-22T20:11:05.3583401Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3583719Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3583796Z        't046000', 't048000'],
2025-01-22T20:11:05.3583997Z       dtype='object')
2025-01-22T20:11:05.3584076Z key = 'cups'
2025-01-22T20:11:05.3584080Z 
2025-01-22T20:11:05.3584159Z     def get_loc(self, key):
2025-01-22T20:11:05.3584231Z         """
2025-01-22T20:11:05.3584393Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3584466Z     
2025-01-22T20:11:05.3584538Z         Parameters
2025-01-22T20:11:05.3584615Z         ----------
2025-01-22T20:11:05.3584688Z         key : label
2025-01-22T20:11:05.3584877Z     
2025-01-22T20:11:05.3584949Z         Returns
2025-01-22T20:11:05.3585025Z         -------
2025-01-22T20:11:05.3585195Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3585267Z     
2025-01-22T20:11:05.3585338Z         Examples
2025-01-22T20:11:05.3585414Z         --------
2025-01-22T20:11:05.3585516Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3585608Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3585688Z         1
2025-01-22T20:11:05.3585756Z     
2025-01-22T20:11:05.3585865Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3585954Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3586036Z         slice(1, 3, None)
2025-01-22T20:11:05.3586105Z     
2025-01-22T20:11:05.3586221Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3586315Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3586415Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3586484Z         """
2025-01-22T20:11:05.3586595Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3586665Z         try:
2025-01-22T20:11:05.3586770Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3586774Z 
2025-01-22T20:11:05.3587028Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3587260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3587585Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3587700Z     ???
2025-01-22T20:11:05.3587902Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3588019Z     ???
2025-01-22T20:11:05.3588357Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3588443Z     ???
2025-01-22T20:11:05.3588692Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3588696Z 
2025-01-22T20:11:05.3588797Z >   ???
2025-01-22T20:11:05.3588959Z E   KeyError: 'cups'
2025-01-22T20:11:05.3588964Z 
2025-01-22T20:11:05.3589124Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3589128Z 
2025-01-22T20:11:05.3589345Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3589350Z 
2025-01-22T20:11:05.3589696Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3590056Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3590757Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3590762Z 
2025-01-22T20:11:05.3590885Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3591016Z     def plasma(
2025-01-22T20:11:05.3591211Z         self,
2025-01-22T20:11:05.3591328Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3591479Z         config,
2025-01-22T20:11:05.3591578Z     ):
2025-01-22T20:11:05.3591741Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3591910Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3591914Z 
2025-01-22T20:11:05.3592136Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3592368Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3592539Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3592653Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3592925Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3593090Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3593268Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3593630Z     return BasePlasma(
2025-01-22T20:11:05.3593761Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3593982Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3594119Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3594266Z     self.update(**kwargs)
2025-01-22T20:11:05.3594387Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3594578Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3594722Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3594962Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3595245Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3595467Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3595768Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3595883Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3596152Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3596356Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3596594Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3596800Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3597126Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3597374Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3597645Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3597781Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3598124Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3598298Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3598623Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3598792Z     return self.apply_standard()
2025-01-22T20:11:05.3599101Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3599310Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3599650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3599870Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3600172Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3600292Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3600639Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3600752Z     return self._get_value(key)
2025-01-22T20:11:05.3601124Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3601259Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3601436Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3601441Z 
2025-01-22T20:11:05.3601646Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3601928Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3602228Z        't046000', 't048000'],
2025-01-22T20:11:05.3602353Z       dtype='object')
2025-01-22T20:11:05.3602525Z key = 'cups'
2025-01-22T20:11:05.3602529Z 
2025-01-22T20:11:05.3602642Z     def get_loc(self, key):
2025-01-22T20:11:05.3602774Z         """
2025-01-22T20:11:05.3602952Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3603143Z     
2025-01-22T20:11:05.3603266Z         Parameters
2025-01-22T20:11:05.3603408Z         ----------
2025-01-22T20:11:05.3603751Z         key : label
2025-01-22T20:11:05.3603882Z     
2025-01-22T20:11:05.3604040Z         Returns
2025-01-22T20:11:05.3604216Z         -------
2025-01-22T20:11:05.3604385Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3604517Z     
2025-01-22T20:11:05.3604638Z         Examples
2025-01-22T20:11:05.3604804Z         --------
2025-01-22T20:11:05.3604986Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3605104Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3605254Z         1
2025-01-22T20:11:05.3605350Z     
2025-01-22T20:11:05.3605600Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3605736Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3605881Z         slice(1, 3, None)
2025-01-22T20:11:05.3605977Z     
2025-01-22T20:11:05.3606155Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3606282Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3606504Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3606603Z         """
2025-01-22T20:11:05.3606773Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3606925Z         try:
2025-01-22T20:11:05.3607041Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3607253Z         except KeyError as err:
2025-01-22T20:11:05.3607382Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3607548Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3607708Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3607844Z             ):
2025-01-22T20:11:05.3608010Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3608181Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3608296Z E           KeyError: 'cups'
2025-01-22T20:11:05.3608301Z 
2025-01-22T20:11:05.3608694Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3609083Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-electron_densities] _
2025-01-22T20:11:05.3609088Z 
2025-01-22T20:11:05.3609326Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3609620Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3609726Z        't046000', 't048000'],
2025-01-22T20:11:05.3609889Z       dtype='object')
2025-01-22T20:11:05.3609991Z key = 'cups'
2025-01-22T20:11:05.3609996Z 
2025-01-22T20:11:05.3610175Z     def get_loc(self, key):
2025-01-22T20:11:05.3610291Z         """
2025-01-22T20:11:05.3610518Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3610680Z     
2025-01-22T20:11:05.3610784Z         Parameters
2025-01-22T20:11:05.3610959Z         ----------
2025-01-22T20:11:05.3611077Z         key : label
2025-01-22T20:11:05.3611210Z     
2025-01-22T20:11:05.3611337Z         Returns
2025-01-22T20:11:05.3611473Z         -------
2025-01-22T20:11:05.3611622Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3611814Z     
2025-01-22T20:11:05.3611916Z         Examples
2025-01-22T20:11:05.3612068Z         --------
2025-01-22T20:11:05.3612199Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3612336Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3612508Z         1
2025-01-22T20:11:05.3612804Z     
2025-01-22T20:11:05.3612945Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3613100Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3613226Z         slice(1, 3, None)
2025-01-22T20:11:05.3613370Z     
2025-01-22T20:11:05.3613687Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3613815Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3613973Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3614186Z         """
2025-01-22T20:11:05.3614416Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3614533Z         try:
2025-01-22T20:11:05.3614703Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3614707Z 
2025-01-22T20:11:05.3614987Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3615163Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3615418Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3615541Z     ???
2025-01-22T20:11:05.3615736Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3615834Z     ???
2025-01-22T20:11:05.3616174Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3616278Z     ???
2025-01-22T20:11:05.3616508Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3616512Z 
2025-01-22T20:11:05.3616617Z >   ???
2025-01-22T20:11:05.3616761Z E   KeyError: 'cups'
2025-01-22T20:11:05.3616766Z 
2025-01-22T20:11:05.3616924Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3616980Z 
2025-01-22T20:11:05.3617167Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3617171Z 
2025-01-22T20:11:05.3617517Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3617873Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3618566Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3618571Z 
2025-01-22T20:11:05.3618692Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3618837Z     def plasma(
2025-01-22T20:11:05.3619028Z         self,
2025-01-22T20:11:05.3619140Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3619274Z         config,
2025-01-22T20:11:05.3619389Z     ):
2025-01-22T20:11:05.3619551Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3619718Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3619723Z 
2025-01-22T20:11:05.3619933Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3620071Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3620264Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3620379Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3620643Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3620823Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3620965Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3621126Z     return BasePlasma(
2025-01-22T20:11:05.3621247Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3621437Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3621572Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3621719Z     self.update(**kwargs)
2025-01-22T20:11:05.3621854Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3622046Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3622174Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3622398Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3622817Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3623039Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3623313Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3623426Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3623823Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3624163Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3624410Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3624617Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3624926Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3625176Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3625463Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3625632Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3625918Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3626093Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3626428Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3626607Z     return self.apply_standard()
2025-01-22T20:11:05.3626914Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3627101Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3627436Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3627715Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3628179Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3628307Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3628642Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3628759Z     return self._get_value(key)
2025-01-22T20:11:05.3629145Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3629283Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3629462Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3629467Z 
2025-01-22T20:11:05.3629658Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3629960Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3630136Z        't046000', 't048000'],
2025-01-22T20:11:05.3630263Z       dtype='object')
2025-01-22T20:11:05.3630402Z key = 'cups'
2025-01-22T20:11:05.3630406Z 
2025-01-22T20:11:05.3630516Z     def get_loc(self, key):
2025-01-22T20:11:05.3630670Z         """
2025-01-22T20:11:05.3630848Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3631044Z     
2025-01-22T20:11:05.3631149Z         Parameters
2025-01-22T20:11:05.3631290Z         ----------
2025-01-22T20:11:05.3631420Z         key : label
2025-01-22T20:11:05.3631547Z     
2025-01-22T20:11:05.3631699Z         Returns
2025-01-22T20:11:05.3631859Z         -------
2025-01-22T20:11:05.3632059Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3632175Z     
2025-01-22T20:11:05.3632297Z         Examples
2025-01-22T20:11:05.3632441Z         --------
2025-01-22T20:11:05.3632620Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3632740Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3632900Z         1
2025-01-22T20:11:05.3633131Z     
2025-01-22T20:11:05.3633338Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3633475Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3633757Z         slice(1, 3, None)
2025-01-22T20:11:05.3633862Z     
2025-01-22T20:11:05.3634041Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3634149Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3634375Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3634641Z         """
2025-01-22T20:11:05.3634783Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3634918Z         try:
2025-01-22T20:11:05.3635034Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3635262Z         except KeyError as err:
2025-01-22T20:11:05.3635391Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3635559Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3635782Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3635962Z             ):
2025-01-22T20:11:05.3636143Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3636338Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3636454Z E           KeyError: 'cups'
2025-01-22T20:11:05.3636495Z 
2025-01-22T20:11:05.3636824Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3637210Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_number_density] _
2025-01-22T20:11:05.3637214Z 
2025-01-22T20:11:05.3646129Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3646397Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3646481Z        't046000', 't048000'],
2025-01-22T20:11:05.3646561Z       dtype='object')
2025-01-22T20:11:05.3646648Z key = 'cups'
2025-01-22T20:11:05.3646654Z 
2025-01-22T20:11:05.3646739Z     def get_loc(self, key):
2025-01-22T20:11:05.3646813Z         """
2025-01-22T20:11:05.3646996Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3647064Z     
2025-01-22T20:11:05.3647143Z         Parameters
2025-01-22T20:11:05.3647217Z         ----------
2025-01-22T20:11:05.3647294Z         key : label
2025-01-22T20:11:05.3647361Z     
2025-01-22T20:11:05.3647433Z         Returns
2025-01-22T20:11:05.3647507Z         -------
2025-01-22T20:11:05.3647656Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3647722Z     
2025-01-22T20:11:05.3647798Z         Examples
2025-01-22T20:11:05.3647868Z         --------
2025-01-22T20:11:05.3647977Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3648064Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3648140Z         1
2025-01-22T20:11:05.3648205Z     
2025-01-22T20:11:05.3648323Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3648412Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3648494Z         slice(1, 3, None)
2025-01-22T20:11:05.3648559Z     
2025-01-22T20:11:05.3648678Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3648776Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3648867Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3648939Z         """
2025-01-22T20:11:05.3649050Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3649126Z         try:
2025-01-22T20:11:05.3649231Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3649235Z 
2025-01-22T20:11:05.3649507Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3649623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3649773Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3650039Z     ???
2025-01-22T20:11:05.3650178Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3650246Z     ???
2025-01-22T20:11:05.3650529Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3650600Z     ???
2025-01-22T20:11:05.3650709Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3650713Z 
2025-01-22T20:11:05.3650894Z >   ???
2025-01-22T20:11:05.3650977Z E   KeyError: 'cups'
2025-01-22T20:11:05.3650981Z 
2025-01-22T20:11:05.3651120Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3651125Z 
2025-01-22T20:11:05.3651294Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3651298Z 
2025-01-22T20:11:05.3651527Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3651856Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3652497Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3652501Z 
2025-01-22T20:11:05.3652598Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3652671Z     def plasma(
2025-01-22T20:11:05.3652747Z         self,
2025-01-22T20:11:05.3652829Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3652903Z         config,
2025-01-22T20:11:05.3652970Z     ):
2025-01-22T20:11:05.3653090Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3653187Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3653192Z 
2025-01-22T20:11:05.3653320Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3653436Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3653673Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3653766Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3653938Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3654043Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3654150Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3654232Z     return BasePlasma(
2025-01-22T20:11:05.3654320Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3654413Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3654502Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3654587Z     self.update(**kwargs)
2025-01-22T20:11:05.3654678Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3654805Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3654916Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3655022Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3655280Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3655434Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3655649Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3655745Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3655876Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3656048Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3656224Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3656396Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3656661Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3656835Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3657018Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3657249Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3657512Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3657643Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3657882Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3658069Z     return self.apply_standard()
2025-01-22T20:11:05.3658349Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3658475Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3658779Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3658904Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3659124Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3659215Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3659489Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3659572Z     return self._get_value(key)
2025-01-22T20:11:05.3659834Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3659924Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3660041Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3660046Z 
2025-01-22T20:11:05.3660202Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3660418Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3660497Z        't046000', 't048000'],
2025-01-22T20:11:05.3660573Z       dtype='object')
2025-01-22T20:11:05.3660654Z key = 'cups'
2025-01-22T20:11:05.3660658Z 
2025-01-22T20:11:05.3660738Z     def get_loc(self, key):
2025-01-22T20:11:05.3660810Z         """
2025-01-22T20:11:05.3660968Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3661043Z     
2025-01-22T20:11:05.3661116Z         Parameters
2025-01-22T20:11:05.3661197Z         ----------
2025-01-22T20:11:05.3661269Z         key : label
2025-01-22T20:11:05.3661341Z     
2025-01-22T20:11:05.3661416Z         Returns
2025-01-22T20:11:05.3661491Z         -------
2025-01-22T20:11:05.3661624Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3661695Z     
2025-01-22T20:11:05.3661764Z         Examples
2025-01-22T20:11:05.3661841Z         --------
2025-01-22T20:11:05.3661938Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3662030Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3662102Z         1
2025-01-22T20:11:05.3662170Z     
2025-01-22T20:11:05.3662283Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3662371Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3662452Z         slice(1, 3, None)
2025-01-22T20:11:05.3662518Z     
2025-01-22T20:11:05.3662631Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3662722Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3662815Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3662884Z         """
2025-01-22T20:11:05.3662993Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3663061Z         try:
2025-01-22T20:11:05.3663169Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3663250Z         except KeyError as err:
2025-01-22T20:11:05.3663356Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3663457Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3663687Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3663878Z             ):
2025-01-22T20:11:05.3663970Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3664062Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3664146Z E           KeyError: 'cups'
2025-01-22T20:11:05.3664150Z 
2025-01-22T20:11:05.3664431Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3664898Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] _
2025-01-22T20:11:05.3664903Z 
2025-01-22T20:11:05.3665066Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3665284Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3665365Z        't046000', 't048000'],
2025-01-22T20:11:05.3665444Z       dtype='object')
2025-01-22T20:11:05.3665516Z key = 'cups'
2025-01-22T20:11:05.3665524Z 
2025-01-22T20:11:05.3665610Z     def get_loc(self, key):
2025-01-22T20:11:05.3665678Z         """
2025-01-22T20:11:05.3665839Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3665905Z     
2025-01-22T20:11:05.3665986Z         Parameters
2025-01-22T20:11:05.3666055Z         ----------
2025-01-22T20:11:05.3666130Z         key : label
2025-01-22T20:11:05.3666195Z     
2025-01-22T20:11:05.3666269Z         Returns
2025-01-22T20:11:05.3666340Z         -------
2025-01-22T20:11:05.3666474Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3666539Z     
2025-01-22T20:11:05.3666617Z         Examples
2025-01-22T20:11:05.3666687Z         --------
2025-01-22T20:11:05.3666786Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3666878Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3666946Z         1
2025-01-22T20:11:05.3667017Z     
2025-01-22T20:11:05.3667118Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3667212Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3667289Z         slice(1, 3, None)
2025-01-22T20:11:05.3667359Z     
2025-01-22T20:11:05.3667466Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3667561Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3667650Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3667722Z         """
2025-01-22T20:11:05.3667825Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3667899Z         try:
2025-01-22T20:11:05.3667997Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3668002Z 
2025-01-22T20:11:05.3668262Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3668378Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3668515Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3668591Z     ???
2025-01-22T20:11:05.3668720Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3668797Z     ???
2025-01-22T20:11:05.3669067Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3669138Z     ???
2025-01-22T20:11:05.3669244Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3669249Z 
2025-01-22T20:11:05.3669319Z >   ???
2025-01-22T20:11:05.3669398Z E   KeyError: 'cups'
2025-01-22T20:11:05.3669402Z 
2025-01-22T20:11:05.3669532Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3669536Z 
2025-01-22T20:11:05.3669711Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3669715Z 
2025-01-22T20:11:05.3669935Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3670258Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3670970Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3670975Z 
2025-01-22T20:11:05.3671070Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3671139Z     def plasma(
2025-01-22T20:11:05.3671208Z         self,
2025-01-22T20:11:05.3671374Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3671448Z         config,
2025-01-22T20:11:05.3671516Z     ):
2025-01-22T20:11:05.3671626Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3671719Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3671723Z 
2025-01-22T20:11:05.3671844Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3671954Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3672062Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3672152Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3672315Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3672417Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3672523Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3672602Z     return BasePlasma(
2025-01-22T20:11:05.3672686Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3672780Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3672873Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3672951Z     self.update(**kwargs)
2025-01-22T20:11:05.3673043Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3673163Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3673277Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3673379Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3673727Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3673884Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3674096Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3674192Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3674323Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3674492Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3674667Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3674844Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3675101Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3675277Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3675457Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3675567Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3675821Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3675949Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3676188Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3676279Z     return self.apply_standard()
2025-01-22T20:11:05.3676563Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3676679Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3676991Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3677109Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3677327Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3677553Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3677822Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3677906Z     return self._get_value(key)
2025-01-22T20:11:05.3678167Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3678252Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3678464Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3678469Z 
2025-01-22T20:11:05.3678636Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3678845Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3678923Z        't046000', 't048000'],
2025-01-22T20:11:05.3678999Z       dtype='object')
2025-01-22T20:11:05.3679079Z key = 'cups'
2025-01-22T20:11:05.3679083Z 
2025-01-22T20:11:05.3679161Z     def get_loc(self, key):
2025-01-22T20:11:05.3679233Z         """
2025-01-22T20:11:05.3679392Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3679463Z     
2025-01-22T20:11:05.3679535Z         Parameters
2025-01-22T20:11:05.3679611Z         ----------
2025-01-22T20:11:05.3679681Z         key : label
2025-01-22T20:11:05.3679751Z     
2025-01-22T20:11:05.3679818Z         Returns
2025-01-22T20:11:05.3679897Z         -------
2025-01-22T20:11:05.3680033Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3680099Z     
2025-01-22T20:11:05.3680173Z         Examples
2025-01-22T20:11:05.3680242Z         --------
2025-01-22T20:11:05.3680347Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3680432Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3680504Z         1
2025-01-22T20:11:05.3680571Z     
2025-01-22T20:11:05.3680679Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3680771Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3680852Z         slice(1, 3, None)
2025-01-22T20:11:05.3680919Z     
2025-01-22T20:11:05.3681032Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3681123Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3681217Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3681285Z         """
2025-01-22T20:11:05.3681393Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3681466Z         try:
2025-01-22T20:11:05.3681564Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3681652Z         except KeyError as err:
2025-01-22T20:11:05.3681749Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3681852Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3681970Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3682047Z             ):
2025-01-22T20:11:05.3682137Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3682227Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3682307Z E           KeyError: 'cups'
2025-01-22T20:11:05.3682312Z 
2025-01-22T20:11:05.3682583Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3682928Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] _
2025-01-22T20:11:05.3682938Z 
2025-01-22T20:11:05.3683091Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3683306Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3683380Z        't046000', 't048000'],
2025-01-22T20:11:05.3683459Z       dtype='object')
2025-01-22T20:11:05.3683858Z key = 'cups'
2025-01-22T20:11:05.3683863Z 
2025-01-22T20:11:05.3684070Z     def get_loc(self, key):
2025-01-22T20:11:05.3684138Z         """
2025-01-22T20:11:05.3684302Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3684367Z     
2025-01-22T20:11:05.3684445Z         Parameters
2025-01-22T20:11:05.3684515Z         ----------
2025-01-22T20:11:05.3684592Z         key : label
2025-01-22T20:11:05.3684658Z     
2025-01-22T20:11:05.3684733Z         Returns
2025-01-22T20:11:05.3684808Z         -------
2025-01-22T20:11:05.3685044Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3685117Z     
2025-01-22T20:11:05.3685187Z         Examples
2025-01-22T20:11:05.3685261Z         --------
2025-01-22T20:11:05.3685358Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3685449Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3685516Z         1
2025-01-22T20:11:05.3685587Z     
2025-01-22T20:11:05.3685687Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3685782Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3685859Z         slice(1, 3, None)
2025-01-22T20:11:05.3685932Z     
2025-01-22T20:11:05.3686038Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3686132Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3686221Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3686304Z         """
2025-01-22T20:11:05.3686406Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3686485Z         try:
2025-01-22T20:11:05.3686584Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3686588Z 
2025-01-22T20:11:05.3686854Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3686969Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3687109Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3687184Z     ???
2025-01-22T20:11:05.3687318Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3687395Z     ???
2025-01-22T20:11:05.3687669Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3687746Z     ???
2025-01-22T20:11:05.3687855Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3687859Z 
2025-01-22T20:11:05.3687930Z >   ???
2025-01-22T20:11:05.3688008Z E   KeyError: 'cups'
2025-01-22T20:11:05.3688016Z 
2025-01-22T20:11:05.3688148Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3688152Z 
2025-01-22T20:11:05.3688325Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3688329Z 
2025-01-22T20:11:05.3688552Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3688876Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3689500Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3689505Z 
2025-01-22T20:11:05.3689600Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3689673Z     def plasma(
2025-01-22T20:11:05.3689747Z         self,
2025-01-22T20:11:05.3689830Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3689905Z         config,
2025-01-22T20:11:05.3689977Z     ):
2025-01-22T20:11:05.3690088Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3690185Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3690190Z 
2025-01-22T20:11:05.3690310Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3690420Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3690523Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3690702Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3690869Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3690974Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3691082Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3691165Z     return BasePlasma(
2025-01-22T20:11:05.3691249Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3691411Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3691510Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3691590Z     self.update(**kwargs)
2025-01-22T20:11:05.3691684Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3691807Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3691921Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3692024Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3692273Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3692428Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3692645Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3692739Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3692872Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3693040Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3693218Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3693394Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3693781Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3693959Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3694136Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3694246Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3694499Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3694625Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3694866Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3694959Z     return self.apply_standard()
2025-01-22T20:11:05.3695242Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3695359Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3695676Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3695793Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3696011Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3696102Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3696376Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3696465Z     return self._get_value(key)
2025-01-22T20:11:05.3696733Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3696821Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3696944Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3696949Z 
2025-01-22T20:11:05.3697113Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3697325Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3697404Z        't046000', 't048000'],
2025-01-22T20:11:05.3697480Z       dtype='object')
2025-01-22T20:11:05.3697556Z key = 'cups'
2025-01-22T20:11:05.3697676Z 
2025-01-22T20:11:05.3697759Z     def get_loc(self, key):
2025-01-22T20:11:05.3697835Z         """
2025-01-22T20:11:05.3697998Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3698069Z     
2025-01-22T20:11:05.3698142Z         Parameters
2025-01-22T20:11:05.3698223Z         ----------
2025-01-22T20:11:05.3698295Z         key : label
2025-01-22T20:11:05.3698371Z     
2025-01-22T20:11:05.3698445Z         Returns
2025-01-22T20:11:05.3698518Z         -------
2025-01-22T20:11:05.3698779Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3698851Z     
2025-01-22T20:11:05.3698928Z         Examples
2025-01-22T20:11:05.3699001Z         --------
2025-01-22T20:11:05.3699110Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3699197Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3699271Z         1
2025-01-22T20:11:05.3699338Z     
2025-01-22T20:11:05.3699453Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3699546Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3699630Z         slice(1, 3, None)
2025-01-22T20:11:05.3699697Z     
2025-01-22T20:11:05.3699814Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3699905Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3700005Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3700073Z         """
2025-01-22T20:11:05.3700186Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3700257Z         try:
2025-01-22T20:11:05.3700357Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3700446Z         except KeyError as err:
2025-01-22T20:11:05.3700542Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3700647Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3700766Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3700838Z             ):
2025-01-22T20:11:05.3700933Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3701022Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3701101Z E           KeyError: 'cups'
2025-01-22T20:11:05.3701105Z 
2025-01-22T20:11:05.3701385Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3701705Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] _
2025-01-22T20:11:05.3701719Z 
2025-01-22T20:11:05.3701874Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3702093Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3702166Z        't046000', 't048000'],
2025-01-22T20:11:05.3702244Z       dtype='object')
2025-01-22T20:11:05.3702316Z key = 'cups'
2025-01-22T20:11:05.3702320Z 
2025-01-22T20:11:05.3702404Z     def get_loc(self, key):
2025-01-22T20:11:05.3702476Z         """
2025-01-22T20:11:05.3702643Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3702710Z     
2025-01-22T20:11:05.3702789Z         Parameters
2025-01-22T20:11:05.3702859Z         ----------
2025-01-22T20:11:05.3702938Z         key : label
2025-01-22T20:11:05.3703005Z     
2025-01-22T20:11:05.3703080Z         Returns
2025-01-22T20:11:05.3703156Z         -------
2025-01-22T20:11:05.3703291Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3703365Z     
2025-01-22T20:11:05.3703436Z         Examples
2025-01-22T20:11:05.3703636Z         --------
2025-01-22T20:11:05.3703735Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3703825Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3703893Z         1
2025-01-22T20:11:05.3703964Z     
2025-01-22T20:11:05.3704065Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3704156Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3704351Z         slice(1, 3, None)
2025-01-22T20:11:05.3704422Z     
2025-01-22T20:11:05.3704530Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3704623Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3704712Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3704786Z         """
2025-01-22T20:11:05.3704892Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3704961Z         try:
2025-01-22T20:11:05.3705167Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3705172Z 
2025-01-22T20:11:05.3705424Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3705541Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3705681Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3705759Z     ???
2025-01-22T20:11:05.3705892Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3705967Z     ???
2025-01-22T20:11:05.3706237Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3706312Z     ???
2025-01-22T20:11:05.3706419Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3706429Z 
2025-01-22T20:11:05.3706495Z >   ???
2025-01-22T20:11:05.3706575Z E   KeyError: 'cups'
2025-01-22T20:11:05.3706579Z 
2025-01-22T20:11:05.3706711Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3706715Z 
2025-01-22T20:11:05.3706886Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3706890Z 
2025-01-22T20:11:05.3707111Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3707436Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3708061Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3708071Z 
2025-01-22T20:11:05.3708160Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3708241Z     def plasma(
2025-01-22T20:11:05.3708311Z         self,
2025-01-22T20:11:05.3708398Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3708471Z         config,
2025-01-22T20:11:05.3708549Z     ):
2025-01-22T20:11:05.3708660Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3708762Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3708766Z 
2025-01-22T20:11:05.3708888Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3708999Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3709103Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3709203Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3709374Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3709474Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3709590Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3709669Z     return BasePlasma(
2025-01-22T20:11:05.3709760Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3709851Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3709949Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3710028Z     self.update(**kwargs)
2025-01-22T20:11:05.3710123Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3710244Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3710359Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3710460Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3710715Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3710956Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3711172Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3711272Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3711399Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3711585Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3711824Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3712003Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3712258Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3712437Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3712651Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3712758Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3713018Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3713150Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3713399Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3713485Z     return self.apply_standard()
2025-01-22T20:11:05.3713870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3713990Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3714299Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3714414Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3714635Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3714719Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3714990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3715079Z     return self._get_value(key)
2025-01-22T20:11:05.3715341Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3715434Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3715548Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3715552Z 
2025-01-22T20:11:05.3715714Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3715925Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3716005Z        't046000', 't048000'],
2025-01-22T20:11:05.3716080Z       dtype='object')
2025-01-22T20:11:05.3716158Z key = 'cups'
2025-01-22T20:11:05.3716162Z 
2025-01-22T20:11:05.3716242Z     def get_loc(self, key):
2025-01-22T20:11:05.3716318Z         """
2025-01-22T20:11:05.3716482Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3716549Z     
2025-01-22T20:11:05.3716630Z         Parameters
2025-01-22T20:11:05.3716701Z         ----------
2025-01-22T20:11:05.3716781Z         key : label
2025-01-22T20:11:05.3716848Z     
2025-01-22T20:11:05.3716925Z         Returns
2025-01-22T20:11:05.3716994Z         -------
2025-01-22T20:11:05.3717136Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3717203Z     
2025-01-22T20:11:05.3717281Z         Examples
2025-01-22T20:11:05.3717351Z         --------
2025-01-22T20:11:05.3717452Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3717538Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3717612Z         1
2025-01-22T20:11:05.3717679Z     
2025-01-22T20:11:05.3717788Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3717876Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3718076Z         slice(1, 3, None)
2025-01-22T20:11:05.3718149Z     
2025-01-22T20:11:05.3718258Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3718353Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3718447Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3718521Z         """
2025-01-22T20:11:05.3718623Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3718798Z         try:
2025-01-22T20:11:05.3718900Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3718989Z         except KeyError as err:
2025-01-22T20:11:05.3719085Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3719193Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3719314Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3719388Z             ):
2025-01-22T20:11:05.3719479Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3719577Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3719666Z E           KeyError: 'cups'
2025-01-22T20:11:05.3719670Z 
2025-01-22T20:11:05.3719941Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3720271Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] _
2025-01-22T20:11:05.3720275Z 
2025-01-22T20:11:05.3720433Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3720644Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3720718Z        't046000', 't048000'],
2025-01-22T20:11:05.3720800Z       dtype='object')
2025-01-22T20:11:05.3720870Z key = 'cups'
2025-01-22T20:11:05.3720874Z 
2025-01-22T20:11:05.3720961Z     def get_loc(self, key):
2025-01-22T20:11:05.3721034Z         """
2025-01-22T20:11:05.3721197Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3721268Z     
2025-01-22T20:11:05.3721341Z         Parameters
2025-01-22T20:11:05.3721417Z         ----------
2025-01-22T20:11:05.3721490Z         key : label
2025-01-22T20:11:05.3721561Z     
2025-01-22T20:11:05.3721629Z         Returns
2025-01-22T20:11:05.3721704Z         -------
2025-01-22T20:11:05.3721832Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3721906Z     
2025-01-22T20:11:05.3721975Z         Examples
2025-01-22T20:11:05.3722049Z         --------
2025-01-22T20:11:05.3722146Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3722233Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3722300Z         1
2025-01-22T20:11:05.3722371Z     
2025-01-22T20:11:05.3722471Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3722562Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3722645Z         slice(1, 3, None)
2025-01-22T20:11:05.3722712Z     
2025-01-22T20:11:05.3722827Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3722917Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3723011Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3723078Z         """
2025-01-22T20:11:05.3723183Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3723250Z         try:
2025-01-22T20:11:05.3723359Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3723363Z 
2025-01-22T20:11:05.3723834Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3723953Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3724091Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3724167Z     ???
2025-01-22T20:11:05.3724296Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3724509Z     ???
2025-01-22T20:11:05.3724787Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3724854Z     ???
2025-01-22T20:11:05.3724963Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3724967Z 
2025-01-22T20:11:05.3725033Z >   ???
2025-01-22T20:11:05.3725114Z E   KeyError: 'cups'
2025-01-22T20:11:05.3725118Z 
2025-01-22T20:11:05.3725345Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3725350Z 
2025-01-22T20:11:05.3725526Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3725530Z 
2025-01-22T20:11:05.3725751Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3726078Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3726702Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3726711Z 
2025-01-22T20:11:05.3726799Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3726876Z     def plasma(
2025-01-22T20:11:05.3726944Z         self,
2025-01-22T20:11:05.3727031Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3727100Z         config,
2025-01-22T20:11:05.3727174Z     ):
2025-01-22T20:11:05.3727288Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3727388Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3727392Z 
2025-01-22T20:11:05.3727516Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3727623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3727732Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3727816Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3727988Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3728087Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3728200Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3728279Z     return BasePlasma(
2025-01-22T20:11:05.3728368Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3728457Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3728553Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3728636Z     self.update(**kwargs)
2025-01-22T20:11:05.3728729Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3728853Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3728967Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3729074Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3729320Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3729474Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3729685Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3729785Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3729912Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3730085Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3730253Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3730433Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3730687Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3730862Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3731044Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3731145Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3731487Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3731609Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3731854Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3731939Z     return self.apply_standard()
2025-01-22T20:11:05.3732221Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3732410Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3732720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3732841Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3733054Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3733144Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3733408Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3733614Z     return self._get_value(key)
2025-01-22T20:11:05.3733876Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3733965Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3734071Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3734075Z 
2025-01-22T20:11:05.3734239Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3734452Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3734526Z        't046000', 't048000'],
2025-01-22T20:11:05.3734604Z       dtype='object')
2025-01-22T20:11:05.3734676Z key = 'cups'
2025-01-22T20:11:05.3734680Z 
2025-01-22T20:11:05.3734764Z     def get_loc(self, key):
2025-01-22T20:11:05.3734836Z         """
2025-01-22T20:11:05.3734997Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3735064Z     
2025-01-22T20:11:05.3735142Z         Parameters
2025-01-22T20:11:05.3735213Z         ----------
2025-01-22T20:11:05.3735291Z         key : label
2025-01-22T20:11:05.3735357Z     
2025-01-22T20:11:05.3735430Z         Returns
2025-01-22T20:11:05.3735500Z         -------
2025-01-22T20:11:05.3735636Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3735710Z     
2025-01-22T20:11:05.3735784Z         Examples
2025-01-22T20:11:05.3735853Z         --------
2025-01-22T20:11:05.3735955Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3736046Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3736113Z         1
2025-01-22T20:11:05.3736185Z     
2025-01-22T20:11:05.3736286Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3736428Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3736569Z         slice(1, 3, None)
2025-01-22T20:11:05.3736694Z     
2025-01-22T20:11:05.3736816Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3736913Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3737003Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3737075Z         """
2025-01-22T20:11:05.3737176Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3737249Z         try:
2025-01-22T20:11:05.3737351Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3737437Z         except KeyError as err:
2025-01-22T20:11:05.3737531Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3737635Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3737760Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3737828Z             ):
2025-01-22T20:11:05.3737922Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3738138Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3738222Z E           KeyError: 'cups'
2025-01-22T20:11:05.3738227Z 
2025-01-22T20:11:05.3738491Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3738859Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-transition_probabilities] _
2025-01-22T20:11:05.3738863Z 
2025-01-22T20:11:05.3739115Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3739328Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3739406Z        't046000', 't048000'],
2025-01-22T20:11:05.3739481Z       dtype='object')
2025-01-22T20:11:05.3739557Z key = 'cups'
2025-01-22T20:11:05.3739561Z 
2025-01-22T20:11:05.3739639Z     def get_loc(self, key):
2025-01-22T20:11:05.3739710Z         """
2025-01-22T20:11:05.3739869Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3739939Z     
2025-01-22T20:11:05.3740014Z         Parameters
2025-01-22T20:11:05.3740088Z         ----------
2025-01-22T20:11:05.3740158Z         key : label
2025-01-22T20:11:05.3740231Z     
2025-01-22T20:11:05.3740298Z         Returns
2025-01-22T20:11:05.3740373Z         -------
2025-01-22T20:11:05.3740499Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3740569Z     
2025-01-22T20:11:05.3740642Z         Examples
2025-01-22T20:11:05.3740716Z         --------
2025-01-22T20:11:05.3740816Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3740900Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3740972Z         1
2025-01-22T20:11:05.3741038Z     
2025-01-22T20:11:05.3741140Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3741226Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3741306Z         slice(1, 3, None)
2025-01-22T20:11:05.3741376Z     
2025-01-22T20:11:05.3741486Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3741578Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3741671Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3741738Z         """
2025-01-22T20:11:05.3741844Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3741911Z         try:
2025-01-22T20:11:05.3742014Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3742022Z 
2025-01-22T20:11:05.3742268Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3742376Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3742515Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3742582Z     ???
2025-01-22T20:11:05.3742715Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3742781Z     ???
2025-01-22T20:11:05.3743055Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3743120Z     ???
2025-01-22T20:11:05.3743231Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3743234Z 
2025-01-22T20:11:05.3743300Z >   ???
2025-01-22T20:11:05.3743381Z E   KeyError: 'cups'
2025-01-22T20:11:05.3743385Z 
2025-01-22T20:11:05.3743617Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3743631Z 
2025-01-22T20:11:05.3743798Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3743803Z 
2025-01-22T20:11:05.3744029Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3744345Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3744970Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3745111Z 
2025-01-22T20:11:05.3745200Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3745277Z     def plasma(
2025-01-22T20:11:05.3745349Z         self,
2025-01-22T20:11:05.3745428Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3745501Z         config,
2025-01-22T20:11:05.3745566Z     ):
2025-01-22T20:11:05.3745780Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3745877Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3745881Z 
2025-01-22T20:11:05.3746004Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3746111Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3746218Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3746300Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3746472Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3746569Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3746680Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3746757Z     return BasePlasma(
2025-01-22T20:11:05.3746845Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3746935Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3747025Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3747110Z     self.update(**kwargs)
2025-01-22T20:11:05.3747198Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3747323Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3747434Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3747539Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3747783Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3747940Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3748150Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3748248Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3748375Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3748546Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3748719Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3748893Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3749155Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3749326Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3749510Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3749611Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3749868Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3749993Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3750239Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3750325Z     return self.apply_standard()
2025-01-22T20:11:05.3750605Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3750729Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3751033Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3751154Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3751366Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3751456Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3751722Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3751914Z     return self._get_value(key)
2025-01-22T20:11:05.3752169Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3752259Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3752371Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3752375Z 
2025-01-22T20:11:05.3752598Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3752813Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3752886Z        't046000', 't048000'],
2025-01-22T20:11:05.3752964Z       dtype='object')
2025-01-22T20:11:05.3753034Z key = 'cups'
2025-01-22T20:11:05.3753038Z 
2025-01-22T20:11:05.3753121Z     def get_loc(self, key):
2025-01-22T20:11:05.3753188Z         """
2025-01-22T20:11:05.3753352Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3753418Z     
2025-01-22T20:11:05.3753609Z         Parameters
2025-01-22T20:11:05.3753684Z         ----------
2025-01-22T20:11:05.3753760Z         key : label
2025-01-22T20:11:05.3753830Z     
2025-01-22T20:11:05.3753898Z         Returns
2025-01-22T20:11:05.3753972Z         -------
2025-01-22T20:11:05.3754104Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3754178Z     
2025-01-22T20:11:05.3754247Z         Examples
2025-01-22T20:11:05.3754321Z         --------
2025-01-22T20:11:05.3754418Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3754508Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3754574Z         1
2025-01-22T20:11:05.3754646Z     
2025-01-22T20:11:05.3754749Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3754840Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3754915Z         slice(1, 3, None)
2025-01-22T20:11:05.3754989Z     
2025-01-22T20:11:05.3755095Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3755188Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3755277Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3755349Z         """
2025-01-22T20:11:05.3755455Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3755523Z         try:
2025-01-22T20:11:05.3755630Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3755712Z         except KeyError as err:
2025-01-22T20:11:05.3755813Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3755911Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3756034Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3756102Z             ):
2025-01-22T20:11:05.3756198Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3756284Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3756371Z E           KeyError: 'cups'
2025-01-22T20:11:05.3756375Z 
2025-01-22T20:11:05.3756640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3756951Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] _
2025-01-22T20:11:05.3756955Z 
2025-01-22T20:11:05.3757114Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3757324Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3757401Z        't046000', 't048000'],
2025-01-22T20:11:05.3757476Z       dtype='object')
2025-01-22T20:11:05.3757550Z key = 'cups'
2025-01-22T20:11:05.3757554Z 
2025-01-22T20:11:05.3757631Z     def get_loc(self, key):
2025-01-22T20:11:05.3757703Z         """
2025-01-22T20:11:05.3757861Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3758051Z     
2025-01-22T20:11:05.3758127Z         Parameters
2025-01-22T20:11:05.3758203Z         ----------
2025-01-22T20:11:05.3758278Z         key : label
2025-01-22T20:11:05.3758347Z     
2025-01-22T20:11:05.3758418Z         Returns
2025-01-22T20:11:05.3758487Z         -------
2025-01-22T20:11:05.3758619Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3758685Z     
2025-01-22T20:11:05.3758761Z         Examples
2025-01-22T20:11:05.3758931Z         --------
2025-01-22T20:11:05.3759033Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3759116Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3759189Z         1
2025-01-22T20:11:05.3759255Z     
2025-01-22T20:11:05.3759357Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3759443Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3759521Z         slice(1, 3, None)
2025-01-22T20:11:05.3759588Z     
2025-01-22T20:11:05.3759703Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3759791Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3759887Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3759959Z         """
2025-01-22T20:11:05.3760058Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3760131Z         try:
2025-01-22T20:11:05.3760230Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3760234Z 
2025-01-22T20:11:05.3760486Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3760595Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3760735Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3760801Z     ???
2025-01-22T20:11:05.3760937Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3761004Z     ???
2025-01-22T20:11:05.3761278Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3761350Z     ???
2025-01-22T20:11:05.3761460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3761464Z 
2025-01-22T20:11:05.3761534Z >   ???
2025-01-22T20:11:05.3761610Z E   KeyError: 'cups'
2025-01-22T20:11:05.3761614Z 
2025-01-22T20:11:05.3761744Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3761748Z 
2025-01-22T20:11:05.3761917Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3761922Z 
2025-01-22T20:11:05.3762144Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3762458Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3763083Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3763090Z 
2025-01-22T20:11:05.3763183Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3763255Z     def plasma(
2025-01-22T20:11:05.3763327Z         self,
2025-01-22T20:11:05.3763408Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3763480Z         config,
2025-01-22T20:11:05.3763665Z     ):
2025-01-22T20:11:05.3763787Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3763879Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3763883Z 
2025-01-22T20:11:05.3764009Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3764113Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3764225Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3764311Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3764475Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3764703Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3764811Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3764893Z     return BasePlasma(
2025-01-22T20:11:05.3764977Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3765075Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3765163Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3765245Z     self.update(**kwargs)
2025-01-22T20:11:05.3765428Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3765554Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3765663Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3765769Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3766013Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3766167Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3766381Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3766476Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3766606Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3766772Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3766944Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3767119Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3767377Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3767548Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3767732Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3767837Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3768095Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3768223Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3768463Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3768553Z     return self.apply_standard()
2025-01-22T20:11:05.3768829Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3768955Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3769262Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3769383Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3769598Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3769693Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3769963Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3770049Z     return self._get_value(key)
2025-01-22T20:11:05.3770309Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3770394Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3770505Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3770509Z 
2025-01-22T20:11:05.3770668Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3770881Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3770954Z        't046000', 't048000'],
2025-01-22T20:11:05.3771034Z       dtype='object')
2025-01-22T20:11:05.3771107Z key = 'cups'
2025-01-22T20:11:05.3771111Z 
2025-01-22T20:11:05.3771195Z     def get_loc(self, key):
2025-01-22T20:11:05.3771267Z         """
2025-01-22T20:11:05.3771423Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3771578Z     
2025-01-22T20:11:05.3771653Z         Parameters
2025-01-22T20:11:05.3771728Z         ----------
2025-01-22T20:11:05.3771802Z         key : label
2025-01-22T20:11:05.3771873Z     
2025-01-22T20:11:05.3771941Z         Returns
2025-01-22T20:11:05.3772015Z         -------
2025-01-22T20:11:05.3772143Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3772214Z     
2025-01-22T20:11:05.3772283Z         Examples
2025-01-22T20:11:05.3772450Z         --------
2025-01-22T20:11:05.3772548Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3772641Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3772707Z         1
2025-01-22T20:11:05.3772779Z     
2025-01-22T20:11:05.3772881Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3772972Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3773051Z         slice(1, 3, None)
2025-01-22T20:11:05.3773118Z     
2025-01-22T20:11:05.3773233Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3773321Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3773414Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3773481Z         """
2025-01-22T20:11:05.3773705Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3773776Z         try:
2025-01-22T20:11:05.3773882Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3773968Z         except KeyError as err:
2025-01-22T20:11:05.3774071Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3774171Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3774295Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3774365Z             ):
2025-01-22T20:11:05.3774463Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3774552Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3774632Z E           KeyError: 'cups'
2025-01-22T20:11:05.3774640Z 
2025-01-22T20:11:05.3774942Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3775282Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues_norm_factor] _
2025-01-22T20:11:05.3775287Z 
2025-01-22T20:11:05.3775452Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3775663Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3775743Z        't046000', 't048000'],
2025-01-22T20:11:05.3775819Z       dtype='object')
2025-01-22T20:11:05.3775896Z key = 'cups'
2025-01-22T20:11:05.3775900Z 
2025-01-22T20:11:05.3775986Z     def get_loc(self, key):
2025-01-22T20:11:05.3776053Z         """
2025-01-22T20:11:05.3776214Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3776284Z     
2025-01-22T20:11:05.3776361Z         Parameters
2025-01-22T20:11:05.3776430Z         ----------
2025-01-22T20:11:05.3776505Z         key : label
2025-01-22T20:11:05.3776572Z     
2025-01-22T20:11:05.3776643Z         Returns
2025-01-22T20:11:05.3776716Z         -------
2025-01-22T20:11:05.3776849Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3776915Z     
2025-01-22T20:11:05.3776989Z         Examples
2025-01-22T20:11:05.3777060Z         --------
2025-01-22T20:11:05.3777164Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3777248Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3777320Z         1
2025-01-22T20:11:05.3777387Z     
2025-01-22T20:11:05.3777493Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3777583Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3777657Z         slice(1, 3, None)
2025-01-22T20:11:05.3777727Z     
2025-01-22T20:11:05.3777833Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3778049Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3778137Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3778210Z         """
2025-01-22T20:11:05.3778309Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3778382Z         try:
2025-01-22T20:11:05.3778478Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3778483Z 
2025-01-22T20:11:05.3778830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3778941Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3779083Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3779150Z     ???
2025-01-22T20:11:05.3779289Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3779362Z     ???
2025-01-22T20:11:05.3779630Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3779708Z     ???
2025-01-22T20:11:05.3779813Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3779816Z 
2025-01-22T20:11:05.3779887Z >   ???
2025-01-22T20:11:05.3779963Z E   KeyError: 'cups'
2025-01-22T20:11:05.3779967Z 
2025-01-22T20:11:05.3780096Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3780100Z 
2025-01-22T20:11:05.3780268Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3780273Z 
2025-01-22T20:11:05.3780502Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3780820Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3781438Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3781447Z 
2025-01-22T20:11:05.3781541Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3781613Z     def plasma(
2025-01-22T20:11:05.3781686Z         self,
2025-01-22T20:11:05.3781766Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3781844Z         config,
2025-01-22T20:11:05.3781910Z     ):
2025-01-22T20:11:05.3782024Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3782121Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3782130Z 
2025-01-22T20:11:05.3782250Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3782362Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3782465Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3782553Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3782717Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3782825Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3782932Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3783014Z     return BasePlasma(
2025-01-22T20:11:05.3783100Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3783191Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3783279Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3783365Z     self.update(**kwargs)
2025-01-22T20:11:05.3783452Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3783698Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3783815Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3783920Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3784169Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3784319Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3784532Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3784744Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3784876Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3785043Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3785215Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3785387Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3785744Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3785922Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3786100Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3786209Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3786459Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3786588Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3786829Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3786922Z     return self.apply_standard()
2025-01-22T20:11:05.3787200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3787323Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3787636Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3787753Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3787972Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3788060Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3788326Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3788412Z     return self._get_value(key)
2025-01-22T20:11:05.3788675Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3788763Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3788877Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3788881Z 
2025-01-22T20:11:05.3789037Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3789252Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3789332Z        't046000', 't048000'],
2025-01-22T20:11:05.3789407Z       dtype='object')
2025-01-22T20:11:05.3789483Z key = 'cups'
2025-01-22T20:11:05.3789487Z 
2025-01-22T20:11:05.3789566Z     def get_loc(self, key):
2025-01-22T20:11:05.3789638Z         """
2025-01-22T20:11:05.3789793Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3789867Z     
2025-01-22T20:11:05.3789942Z         Parameters
2025-01-22T20:11:05.3790018Z         ----------
2025-01-22T20:11:05.3790088Z         key : label
2025-01-22T20:11:05.3790161Z     
2025-01-22T20:11:05.3790230Z         Returns
2025-01-22T20:11:05.3790305Z         -------
2025-01-22T20:11:05.3790432Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3790504Z     
2025-01-22T20:11:05.3790575Z         Examples
2025-01-22T20:11:05.3790654Z         --------
2025-01-22T20:11:05.3790756Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3790840Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3790913Z         1
2025-01-22T20:11:05.3790979Z     
2025-01-22T20:11:05.3791091Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3791178Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3791257Z         slice(1, 3, None)
2025-01-22T20:11:05.3791324Z     
2025-01-22T20:11:05.3791437Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3791613Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3791706Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3791773Z         """
2025-01-22T20:11:05.3791881Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3791950Z         try:
2025-01-22T20:11:05.3792054Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3792134Z         except KeyError as err:
2025-01-22T20:11:05.3792305Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3792411Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3792528Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3792601Z             ):
2025-01-22T20:11:05.3792691Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3792780Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3792859Z E           KeyError: 'cups'
2025-01-22T20:11:05.3792867Z 
2025-01-22T20:11:05.3793135Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3793462Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blue_estimator] _
2025-01-22T20:11:05.3793466Z 
2025-01-22T20:11:05.3793721Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3793937Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3794009Z        't046000', 't048000'],
2025-01-22T20:11:05.3794088Z       dtype='object')
2025-01-22T20:11:05.3794160Z key = 'cups'
2025-01-22T20:11:05.3794163Z 
2025-01-22T20:11:05.3794247Z     def get_loc(self, key):
2025-01-22T20:11:05.3794313Z         """
2025-01-22T20:11:05.3794473Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3794539Z     
2025-01-22T20:11:05.3794618Z         Parameters
2025-01-22T20:11:05.3794689Z         ----------
2025-01-22T20:11:05.3794764Z         key : label
2025-01-22T20:11:05.3794830Z     
2025-01-22T20:11:05.3794903Z         Returns
2025-01-22T20:11:05.3794971Z         -------
2025-01-22T20:11:05.3795103Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3795168Z     
2025-01-22T20:11:05.3795242Z         Examples
2025-01-22T20:11:05.3795317Z         --------
2025-01-22T20:11:05.3795412Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3795500Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3795566Z         1
2025-01-22T20:11:05.3795638Z     
2025-01-22T20:11:05.3795738Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3795828Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3795902Z         slice(1, 3, None)
2025-01-22T20:11:05.3795971Z     
2025-01-22T20:11:05.3796077Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3796175Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3796264Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3796336Z         """
2025-01-22T20:11:05.3796436Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3796509Z         try:
2025-01-22T20:11:05.3796606Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3796616Z 
2025-01-22T20:11:05.3796861Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3796975Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3797110Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3797183Z     ???
2025-01-22T20:11:05.3797313Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3797386Z     ???
2025-01-22T20:11:05.3797652Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3797842Z     ???
2025-01-22T20:11:05.3797947Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3797951Z 
2025-01-22T20:11:05.3798021Z >   ???
2025-01-22T20:11:05.3798096Z E   KeyError: 'cups'
2025-01-22T20:11:05.3798100Z 
2025-01-22T20:11:05.3798232Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3798235Z 
2025-01-22T20:11:05.3798404Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3798523Z 
2025-01-22T20:11:05.3798746Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3799065Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3799680Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3799688Z 
2025-01-22T20:11:05.3799783Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3799860Z     def plasma(
2025-01-22T20:11:05.3799928Z         self,
2025-01-22T20:11:05.3800013Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3800081Z         config,
2025-01-22T20:11:05.3800153Z     ):
2025-01-22T20:11:05.3800262Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3800363Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3800367Z 
2025-01-22T20:11:05.3800486Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3800597Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3800700Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3800788Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3800949Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3801053Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3801165Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3801248Z     return BasePlasma(
2025-01-22T20:11:05.3801337Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3801423Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3801514Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3801592Z     self.update(**kwargs)
2025-01-22T20:11:05.3801684Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3801806Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3801921Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3802020Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3802269Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3802419Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3802630Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3802728Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3802859Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3803030Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3803198Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3803373Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3803746Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3803922Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3804099Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3804205Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3804457Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3804582Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3804945Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3805038Z     return self.apply_standard()
2025-01-22T20:11:05.3805319Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3805438Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3805862Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3805978Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3806198Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3806284Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3806554Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3806637Z     return self._get_value(key)
2025-01-22T20:11:05.3806905Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3806996Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3807106Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3807110Z 
2025-01-22T20:11:05.3807271Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3807487Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3807566Z        't046000', 't048000'],
2025-01-22T20:11:05.3807641Z       dtype='object')
2025-01-22T20:11:05.3807717Z key = 'cups'
2025-01-22T20:11:05.3807721Z 
2025-01-22T20:11:05.3807799Z     def get_loc(self, key):
2025-01-22T20:11:05.3807871Z         """
2025-01-22T20:11:05.3808030Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3808102Z     
2025-01-22T20:11:05.3808176Z         Parameters
2025-01-22T20:11:05.3808252Z         ----------
2025-01-22T20:11:05.3808326Z         key : label
2025-01-22T20:11:05.3808393Z     
2025-01-22T20:11:05.3808467Z         Returns
2025-01-22T20:11:05.3808540Z         -------
2025-01-22T20:11:05.3808674Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3808740Z     
2025-01-22T20:11:05.3808815Z         Examples
2025-01-22T20:11:05.3808885Z         --------
2025-01-22T20:11:05.3808991Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3809077Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3809149Z         1
2025-01-22T20:11:05.3809216Z     
2025-01-22T20:11:05.3809323Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3809411Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3809491Z         slice(1, 3, None)
2025-01-22T20:11:05.3809556Z     
2025-01-22T20:11:05.3809671Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3809763Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3809859Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3809932Z         """
2025-01-22T20:11:05.3810032Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3810105Z         try:
2025-01-22T20:11:05.3810203Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3810290Z         except KeyError as err:
2025-01-22T20:11:05.3810389Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3810492Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3810612Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3810685Z             ):
2025-01-22T20:11:05.3810776Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3810868Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3810946Z E           KeyError: 'cups'
2025-01-22T20:11:05.3810950Z 
2025-01-22T20:11:05.3811309Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3811621Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-volume] _
2025-01-22T20:11:05.3811626Z 
2025-01-22T20:11:05.3811781Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3812062Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3812138Z        't046000', 't048000'],
2025-01-22T20:11:05.3812215Z       dtype='object')
2025-01-22T20:11:05.3812290Z key = 'cups'
2025-01-22T20:11:05.3812294Z 
2025-01-22T20:11:05.3812378Z     def get_loc(self, key):
2025-01-22T20:11:05.3812446Z         """
2025-01-22T20:11:05.3812637Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3812704Z     
2025-01-22T20:11:05.3813010Z         Parameters
2025-01-22T20:11:05.3813199Z         ----------
2025-01-22T20:11:05.3813335Z         key : label
2025-01-22T20:11:05.3813432Z     
2025-01-22T20:11:05.3813693Z         Returns
2025-01-22T20:11:05.3813855Z         -------
2025-01-22T20:11:05.3814094Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3814191Z     
2025-01-22T20:11:05.3814326Z         Examples
2025-01-22T20:11:05.3814427Z         --------
2025-01-22T20:11:05.3814622Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3826716Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3826956Z         1
2025-01-22T20:11:05.3827152Z     
2025-01-22T20:11:05.3827424Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3827657Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3827817Z         slice(1, 3, None)
2025-01-22T20:11:05.3827978Z     
2025-01-22T20:11:05.3828179Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3828325Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3828480Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3828592Z         """
2025-01-22T20:11:05.3828761Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3828874Z         try:
2025-01-22T20:11:05.3829038Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3829046Z 
2025-01-22T20:11:05.3829462Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3829655Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3829887Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3830003Z     ???
2025-01-22T20:11:05.3830223Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3830332Z     ???
2025-01-22T20:11:05.3830770Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3830875Z     ???
2025-01-22T20:11:05.3831065Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3831072Z 
2025-01-22T20:11:05.3831179Z >   ???
2025-01-22T20:11:05.3831320Z E   KeyError: 'cups'
2025-01-22T20:11:05.3831326Z 
2025-01-22T20:11:05.3831543Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3831549Z 
2025-01-22T20:11:05.3831825Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3831830Z 
2025-01-22T20:11:05.3832211Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3832710Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3833993Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3834216Z 
2025-01-22T20:11:05.3834392Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3834559Z     def plasma(
2025-01-22T20:11:05.3834674Z         self,
2025-01-22T20:11:05.3834807Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3834914Z         config,
2025-01-22T20:11:05.3835030Z     ):
2025-01-22T20:11:05.3835241Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3835400Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3835406Z 
2025-01-22T20:11:05.3835767Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3835953Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3836122Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3836256Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3836530Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3836683Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3836869Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3836989Z     return BasePlasma(
2025-01-22T20:11:05.3837128Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3837263Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3837408Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3837532Z     self.update(**kwargs)
2025-01-22T20:11:05.3837678Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3837878Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3838054Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3838216Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3838608Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3838865Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3839196Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3839354Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3839564Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3839844Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3840120Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3840415Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3840837Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3841127Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3841447Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3841611Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3842033Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3842228Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3842651Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3842799Z     return self.apply_standard()
2025-01-22T20:11:05.3843272Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3843474Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3844146Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3844347Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3844718Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3844867Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3845313Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3845452Z     return self._get_value(key)
2025-01-22T20:11:05.3845863Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3846189Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3846370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3846377Z 
2025-01-22T20:11:05.3846636Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3847134Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3847257Z        't046000', 't048000'],
2025-01-22T20:11:05.3847379Z       dtype='object')
2025-01-22T20:11:05.3847492Z key = 'cups'
2025-01-22T20:11:05.3847497Z 
2025-01-22T20:11:05.3847626Z     def get_loc(self, key):
2025-01-22T20:11:05.3847735Z         """
2025-01-22T20:11:05.3848004Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3848114Z     
2025-01-22T20:11:05.3868931Z         Parameters
2025-01-22T20:11:05.3869060Z         ----------
2025-01-22T20:11:05.3869141Z         key : label
2025-01-22T20:11:05.3869208Z     
2025-01-22T20:11:05.3869278Z         Returns
2025-01-22T20:11:05.3869347Z         -------
2025-01-22T20:11:05.3869507Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3869571Z     
2025-01-22T20:11:05.3869644Z         Examples
2025-01-22T20:11:05.3869713Z         --------
2025-01-22T20:11:05.3869821Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3869914Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3869980Z         1
2025-01-22T20:11:05.3870046Z     
2025-01-22T20:11:05.3870158Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3870251Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3870326Z         slice(1, 3, None)
2025-01-22T20:11:05.3870393Z     
2025-01-22T20:11:05.3870510Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3870607Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3870700Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3870768Z         """
2025-01-22T20:11:05.3870875Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3870944Z         try:
2025-01-22T20:11:05.3871044Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3871130Z         except KeyError as err:
2025-01-22T20:11:05.3871230Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3871337Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3871469Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3871535Z             ):
2025-01-22T20:11:05.3871629Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3871715Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3871797Z E           KeyError: 'cups'
2025-01-22T20:11:05.3871803Z 
2025-01-22T20:11:05.3872093Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3872413Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-r_inner] _
2025-01-22T20:11:05.3872418Z 
2025-01-22T20:11:05.3872579Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3872791Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3872871Z        't046000', 't048000'],
2025-01-22T20:11:05.3872945Z       dtype='object')
2025-01-22T20:11:05.3873017Z key = 'cups'
2025-01-22T20:11:05.3873021Z 
2025-01-22T20:11:05.3873098Z     def get_loc(self, key):
2025-01-22T20:11:05.3873165Z         """
2025-01-22T20:11:05.3873325Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3873392Z     
2025-01-22T20:11:05.3873463Z         Parameters
2025-01-22T20:11:05.3873731Z         ----------
2025-01-22T20:11:05.3873985Z         key : label
2025-01-22T20:11:05.3874053Z     
2025-01-22T20:11:05.3874121Z         Returns
2025-01-22T20:11:05.3874191Z         -------
2025-01-22T20:11:05.3874326Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3874393Z     
2025-01-22T20:11:05.3874461Z         Examples
2025-01-22T20:11:05.3874532Z         --------
2025-01-22T20:11:05.3874632Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3874716Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3874889Z         1
2025-01-22T20:11:05.3874955Z     
2025-01-22T20:11:05.3875058Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3875143Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3875219Z         slice(1, 3, None)
2025-01-22T20:11:05.3875282Z     
2025-01-22T20:11:05.3875392Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3875481Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3875570Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3875640Z         """
2025-01-22T20:11:05.3875742Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3875808Z         try:
2025-01-22T20:11:05.3875906Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3875911Z 
2025-01-22T20:11:05.3876163Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3876277Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3876416Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3876482Z     ???
2025-01-22T20:11:05.3876608Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3876672Z     ???
2025-01-22T20:11:05.3876944Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3877009Z     ???
2025-01-22T20:11:05.3877118Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3877125Z 
2025-01-22T20:11:05.3877189Z >   ???
2025-01-22T20:11:05.3877266Z E   KeyError: 'cups'
2025-01-22T20:11:05.3877270Z 
2025-01-22T20:11:05.3877401Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3877407Z 
2025-01-22T20:11:05.3877574Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3877578Z 
2025-01-22T20:11:05.3877806Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3878127Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3878754Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3878759Z 
2025-01-22T20:11:05.3878850Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3878923Z     def plasma(
2025-01-22T20:11:05.3878992Z         self,
2025-01-22T20:11:05.3879072Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3879141Z         config,
2025-01-22T20:11:05.3879210Z     ):
2025-01-22T20:11:05.3879332Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3879430Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3879434Z 
2025-01-22T20:11:05.3879571Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3879680Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3879794Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3879883Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3880052Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3880163Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3880275Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3880468Z     return BasePlasma(
2025-01-22T20:11:05.3880555Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3880648Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3880737Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3880821Z     self.update(**kwargs)
2025-01-22T20:11:05.3880911Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3881038Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3881223Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3881333Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3881588Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3881742Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3881959Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3882056Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3882195Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3882363Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3882539Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3882714Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3882972Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3883150Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3883337Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3883445Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3883895Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3884034Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3884280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3884376Z     return self.apply_standard()
2025-01-22T20:11:05.3884657Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3884784Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3885093Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3885222Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3885437Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3885532Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3885802Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3885886Z     return self._get_value(key)
2025-01-22T20:11:05.3886155Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3886245Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3886361Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3886366Z 
2025-01-22T20:11:05.3886522Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3886739Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3886818Z        't046000', 't048000'],
2025-01-22T20:11:05.3886899Z       dtype='object')
2025-01-22T20:11:05.3886976Z key = 'cups'
2025-01-22T20:11:05.3886980Z 
2025-01-22T20:11:05.3887061Z     def get_loc(self, key):
2025-01-22T20:11:05.3887134Z         """
2025-01-22T20:11:05.3887292Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3887364Z     
2025-01-22T20:11:05.3887436Z         Parameters
2025-01-22T20:11:05.3887514Z         ----------
2025-01-22T20:11:05.3887712Z         key : label
2025-01-22T20:11:05.3887786Z     
2025-01-22T20:11:05.3887856Z         Returns
2025-01-22T20:11:05.3887932Z         -------
2025-01-22T20:11:05.3888065Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3888137Z     
2025-01-22T20:11:05.3888208Z         Examples
2025-01-22T20:11:05.3888285Z         --------
2025-01-22T20:11:05.3888383Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3888575Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3888647Z         1
2025-01-22T20:11:05.3888718Z     
2025-01-22T20:11:05.3888828Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3888918Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3888998Z         slice(1, 3, None)
2025-01-22T20:11:05.3889065Z     
2025-01-22T20:11:05.3889178Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3889267Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3889365Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3889432Z         """
2025-01-22T20:11:05.3889538Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3889607Z         try:
2025-01-22T20:11:05.3889712Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3889794Z         except KeyError as err:
2025-01-22T20:11:05.3889896Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3889999Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3890123Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3890192Z             ):
2025-01-22T20:11:05.3890287Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3890378Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3890458Z E           KeyError: 'cups'
2025-01-22T20:11:05.3890463Z 
2025-01-22T20:11:05.3890736Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3891071Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population] _
2025-01-22T20:11:05.3891076Z 
2025-01-22T20:11:05.3891234Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3891442Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3891522Z        't046000', 't048000'],
2025-01-22T20:11:05.3891599Z       dtype='object')
2025-01-22T20:11:05.3891675Z key = 'cups'
2025-01-22T20:11:05.3891679Z 
2025-01-22T20:11:05.3891762Z     def get_loc(self, key):
2025-01-22T20:11:05.3891830Z         """
2025-01-22T20:11:05.3891992Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3892058Z     
2025-01-22T20:11:05.3892136Z         Parameters
2025-01-22T20:11:05.3892207Z         ----------
2025-01-22T20:11:05.3892282Z         key : label
2025-01-22T20:11:05.3892352Z     
2025-01-22T20:11:05.3892426Z         Returns
2025-01-22T20:11:05.3892495Z         -------
2025-01-22T20:11:05.3892633Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3892698Z     
2025-01-22T20:11:05.3892773Z         Examples
2025-01-22T20:11:05.3892843Z         --------
2025-01-22T20:11:05.3892945Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3893028Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3893101Z         1
2025-01-22T20:11:05.3893170Z     
2025-01-22T20:11:05.3893274Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3893364Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3893441Z         slice(1, 3, None)
2025-01-22T20:11:05.3893788Z     
2025-01-22T20:11:05.3893907Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3894001Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3894091Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3894287Z         """
2025-01-22T20:11:05.3894387Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3894460Z         try:
2025-01-22T20:11:05.3894557Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3894562Z 
2025-01-22T20:11:05.3894816Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3894927Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3895177Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3895255Z     ???
2025-01-22T20:11:05.3895387Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3895457Z     ???
2025-01-22T20:11:05.3895730Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3895802Z     ???
2025-01-22T20:11:05.3895907Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3895915Z 
2025-01-22T20:11:05.3895985Z >   ???
2025-01-22T20:11:05.3896062Z E   KeyError: 'cups'
2025-01-22T20:11:05.3896066Z 
2025-01-22T20:11:05.3896199Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3896204Z 
2025-01-22T20:11:05.3896374Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3896383Z 
2025-01-22T20:11:05.3896607Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3896932Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3897556Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3897560Z 
2025-01-22T20:11:05.3897654Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3897731Z     def plasma(
2025-01-22T20:11:05.3897807Z         self,
2025-01-22T20:11:05.3897886Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3897960Z         config,
2025-01-22T20:11:05.3898025Z     ):
2025-01-22T20:11:05.3898144Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3898243Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3898247Z 
2025-01-22T20:11:05.3898368Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3898480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3898585Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3898673Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3898838Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3898941Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3899051Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3899132Z     return BasePlasma(
2025-01-22T20:11:05.3899220Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3899314Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3899403Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3899487Z     self.update(**kwargs)
2025-01-22T20:11:05.3899581Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3899703Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3899817Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3899922Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3900171Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3900322Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3900533Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3900628Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3900760Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3901020Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3901195Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3901376Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3901629Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3901877Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3902062Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3902168Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3902424Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3902551Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3902790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3902886Z     return self.apply_standard()
2025-01-22T20:11:05.3903161Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3903285Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3903801Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3903930Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3904151Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3904237Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3904506Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3904589Z     return self._get_value(key)
2025-01-22T20:11:05.3904851Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3904942Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3905054Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3905058Z 
2025-01-22T20:11:05.3905218Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3905426Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3905508Z        't046000', 't048000'],
2025-01-22T20:11:05.3905584Z       dtype='object')
2025-01-22T20:11:05.3905661Z key = 'cups'
2025-01-22T20:11:05.3905665Z 
2025-01-22T20:11:05.3905744Z     def get_loc(self, key):
2025-01-22T20:11:05.3905817Z         """
2025-01-22T20:11:05.3905975Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3906046Z     
2025-01-22T20:11:05.3906121Z         Parameters
2025-01-22T20:11:05.3906196Z         ----------
2025-01-22T20:11:05.3906267Z         key : label
2025-01-22T20:11:05.3906344Z     
2025-01-22T20:11:05.3906412Z         Returns
2025-01-22T20:11:05.3906487Z         -------
2025-01-22T20:11:05.3906618Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3906691Z     
2025-01-22T20:11:05.3906766Z         Examples
2025-01-22T20:11:05.3906836Z         --------
2025-01-22T20:11:05.3906939Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3907025Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3907100Z         1
2025-01-22T20:11:05.3907165Z     
2025-01-22T20:11:05.3907276Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3907363Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3907442Z         slice(1, 3, None)
2025-01-22T20:11:05.3907508Z     
2025-01-22T20:11:05.3907620Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3907712Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3907808Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3908018Z         """
2025-01-22T20:11:05.3908126Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3908194Z         try:
2025-01-22T20:11:05.3908301Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3908387Z         except KeyError as err:
2025-01-22T20:11:05.3908483Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3908588Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3908807Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3908891Z             ):
2025-01-22T20:11:05.3908986Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3909076Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3909155Z E           KeyError: 'cups'
2025-01-22T20:11:05.3909159Z 
2025-01-22T20:11:05.3909436Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3909793Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population_updated] _
2025-01-22T20:11:05.3909802Z 
2025-01-22T20:11:05.3909963Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3910172Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3910250Z        't046000', 't048000'],
2025-01-22T20:11:05.3910336Z       dtype='object')
2025-01-22T20:11:05.3910406Z key = 'cups'
2025-01-22T20:11:05.3910410Z 
2025-01-22T20:11:05.3910497Z     def get_loc(self, key):
2025-01-22T20:11:05.3910563Z         """
2025-01-22T20:11:05.3910725Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3910790Z     
2025-01-22T20:11:05.3910867Z         Parameters
2025-01-22T20:11:05.3910937Z         ----------
2025-01-22T20:11:05.3911011Z         key : label
2025-01-22T20:11:05.3911077Z     
2025-01-22T20:11:05.3911152Z         Returns
2025-01-22T20:11:05.3911222Z         -------
2025-01-22T20:11:05.3911357Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3911423Z     
2025-01-22T20:11:05.3911498Z         Examples
2025-01-22T20:11:05.3911568Z         --------
2025-01-22T20:11:05.3911668Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3911754Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3911827Z         1
2025-01-22T20:11:05.3911898Z     
2025-01-22T20:11:05.3912002Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3912096Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3912170Z         slice(1, 3, None)
2025-01-22T20:11:05.3912241Z     
2025-01-22T20:11:05.3912350Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3912442Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3912531Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3912607Z         """
2025-01-22T20:11:05.3912710Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3912783Z         try:
2025-01-22T20:11:05.3912880Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3912885Z 
2025-01-22T20:11:05.3913133Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3913243Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3913384Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3913456Z     ???
2025-01-22T20:11:05.3913768Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3913843Z     ???
2025-01-22T20:11:05.3914116Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3914190Z     ???
2025-01-22T20:11:05.3914296Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3914437Z 
2025-01-22T20:11:05.3914510Z >   ???
2025-01-22T20:11:05.3914587Z E   KeyError: 'cups'
2025-01-22T20:11:05.3914591Z 
2025-01-22T20:11:05.3914723Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3914727Z 
2025-01-22T20:11:05.3914892Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3914901Z 
2025-01-22T20:11:05.3915118Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3915563Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3916184Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3916189Z 
2025-01-22T20:11:05.3916284Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3916361Z     def plasma(
2025-01-22T20:11:05.3916435Z         self,
2025-01-22T20:11:05.3916516Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3916590Z         config,
2025-01-22T20:11:05.3916658Z     ):
2025-01-22T20:11:05.3916773Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3916872Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3916876Z 
2025-01-22T20:11:05.3916996Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3917109Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3917212Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3917301Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3917497Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3917600Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3917709Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3917790Z     return BasePlasma(
2025-01-22T20:11:05.3917879Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3917971Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3918059Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3918143Z     self.update(**kwargs)
2025-01-22T20:11:05.3918235Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3918357Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3918474Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3918579Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3918829Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3918981Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3919193Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3919289Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3919423Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3919592Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3919767Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3919946Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3920203Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3920382Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3920567Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3920679Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3920933Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3921062Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3921302Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3921483Z     return self.apply_standard()
2025-01-22T20:11:05.3921765Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3921888Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3922200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3922317Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3922606Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3922693Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3922961Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3923044Z     return self._get_value(key)
2025-01-22T20:11:05.3923305Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3923396Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3923610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3923615Z 
2025-01-22T20:11:05.3923779Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3923987Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3924066Z        't046000', 't048000'],
2025-01-22T20:11:05.3924144Z       dtype='object')
2025-01-22T20:11:05.3924220Z key = 'cups'
2025-01-22T20:11:05.3924224Z 
2025-01-22T20:11:05.3924303Z     def get_loc(self, key):
2025-01-22T20:11:05.3924375Z         """
2025-01-22T20:11:05.3924533Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3924604Z     
2025-01-22T20:11:05.3924677Z         Parameters
2025-01-22T20:11:05.3924753Z         ----------
2025-01-22T20:11:05.3924824Z         key : label
2025-01-22T20:11:05.3924897Z     
2025-01-22T20:11:05.3924965Z         Returns
2025-01-22T20:11:05.3925039Z         -------
2025-01-22T20:11:05.3925175Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3925247Z     
2025-01-22T20:11:05.3925324Z         Examples
2025-01-22T20:11:05.3925393Z         --------
2025-01-22T20:11:05.3925496Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3925582Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3925653Z         1
2025-01-22T20:11:05.3925721Z     
2025-01-22T20:11:05.3925829Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3925916Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3925998Z         slice(1, 3, None)
2025-01-22T20:11:05.3926064Z     
2025-01-22T20:11:05.3926183Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3926273Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3926366Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3926436Z         """
2025-01-22T20:11:05.3926544Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3926611Z         try:
2025-01-22T20:11:05.3926713Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3926803Z         except KeyError as err:
2025-01-22T20:11:05.3926900Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3927002Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3927122Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3927197Z             ):
2025-01-22T20:11:05.3927288Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3927378Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3927458Z E           KeyError: 'cups'
2025-01-22T20:11:05.3927463Z 
2025-01-22T20:11:05.3927732Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3927991Z _ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:05.3928129Z 
2025-01-22T20:11:05.3928290Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3928505Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3928578Z        't046000', 't048000'],
2025-01-22T20:11:05.3928657Z       dtype='object')
2025-01-22T20:11:05.3928727Z key = 'cups'
2025-01-22T20:11:05.3928847Z 
2025-01-22T20:11:05.3928931Z     def get_loc(self, key):
2025-01-22T20:11:05.3928998Z         """
2025-01-22T20:11:05.3929158Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3929223Z     
2025-01-22T20:11:05.3929300Z         Parameters
2025-01-22T20:11:05.3929371Z         ----------
2025-01-22T20:11:05.3929447Z         key : label
2025-01-22T20:11:05.3929512Z     
2025-01-22T20:11:05.3929585Z         Returns
2025-01-22T20:11:05.3929654Z         -------
2025-01-22T20:11:05.3929794Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3929867Z     
2025-01-22T20:11:05.3929937Z         Examples
2025-01-22T20:11:05.3930011Z         --------
2025-01-22T20:11:05.3930106Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3930194Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3930262Z         1
2025-01-22T20:11:05.3930332Z     
2025-01-22T20:11:05.3930431Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3930523Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3930597Z         slice(1, 3, None)
2025-01-22T20:11:05.3930667Z     
2025-01-22T20:11:05.3930772Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3930866Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3930955Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3931027Z         """
2025-01-22T20:11:05.3931128Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3931204Z         try:
2025-01-22T20:11:05.3931301Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3931314Z 
2025-01-22T20:11:05.3931557Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3931669Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3931803Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3931877Z     ???
2025-01-22T20:11:05.3932006Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3932077Z     ???
2025-01-22T20:11:05.3932345Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3932419Z     ???
2025-01-22T20:11:05.3932523Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3932527Z 
2025-01-22T20:11:05.3932598Z >   ???
2025-01-22T20:11:05.3932676Z E   KeyError: 'cups'
2025-01-22T20:11:05.3932685Z 
2025-01-22T20:11:05.3932810Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3932814Z 
2025-01-22T20:11:05.3932986Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3932990Z 
2025-01-22T20:11:05.3933208Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3933636Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3934258Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3934268Z 
2025-01-22T20:11:05.3934355Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3934432Z     def plasma(
2025-01-22T20:11:05.3934499Z         self,
2025-01-22T20:11:05.3934700Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3934768Z         config,
2025-01-22T20:11:05.3934838Z     ):
2025-01-22T20:11:05.3934950Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3935047Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3935051Z 
2025-01-22T20:11:05.3935172Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3935280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3935482Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3935571Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3935739Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3935842Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3935956Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3936033Z     return BasePlasma(
2025-01-22T20:11:05.3936122Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3936213Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3936307Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3936385Z     self.update(**kwargs)
2025-01-22T20:11:05.3936478Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3936598Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3936714Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3936817Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3937070Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3937219Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3937430Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3937529Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3937655Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3937825Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3937995Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3938172Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3938427Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3938603Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3938784Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3938893Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3939142Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3939268Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3939518Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3939604Z     return self.apply_standard()
2025-01-22T20:11:05.3939889Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3940007Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3940313Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3940428Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3940649Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3940734Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3941003Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3941085Z     return self._get_value(key)
2025-01-22T20:11:05.3941355Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3941445Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3941640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3941644Z 
2025-01-22T20:11:05.3941804Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3942011Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3942089Z        't046000', 't048000'],
2025-01-22T20:11:05.3942164Z       dtype='object')
2025-01-22T20:11:05.3942311Z key = 'cups'
2025-01-22T20:11:05.3942315Z 
2025-01-22T20:11:05.3942395Z     def get_loc(self, key):
2025-01-22T20:11:05.3942468Z         """
2025-01-22T20:11:05.3942625Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3942696Z     
2025-01-22T20:11:05.3942772Z         Parameters
2025-01-22T20:11:05.3942842Z         ----------
2025-01-22T20:11:05.3942915Z         key : label
2025-01-22T20:11:05.3942980Z     
2025-01-22T20:11:05.3943055Z         Returns
2025-01-22T20:11:05.3943128Z         -------
2025-01-22T20:11:05.3943262Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3943328Z     
2025-01-22T20:11:05.3943402Z         Examples
2025-01-22T20:11:05.3943471Z         --------
2025-01-22T20:11:05.3943690Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3943776Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3943846Z         1
2025-01-22T20:11:05.3943911Z     
2025-01-22T20:11:05.3944022Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3944110Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3944190Z         slice(1, 3, None)
2025-01-22T20:11:05.3944256Z     
2025-01-22T20:11:05.3944365Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3944460Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3944547Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3944619Z         """
2025-01-22T20:11:05.3944719Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3944794Z         try:
2025-01-22T20:11:05.3944892Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3944978Z         except KeyError as err:
2025-01-22T20:11:05.3945075Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3945177Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3945293Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3945371Z             ):
2025-01-22T20:11:05.3945461Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3945553Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3945631Z E           KeyError: 'cups'
2025-01-22T20:11:05.3945635Z 
2025-01-22T20:11:05.3945904Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3946237Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-time_explosion] _
2025-01-22T20:11:05.3946244Z 
2025-01-22T20:11:05.3946398Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3946607Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3946680Z        't046000', 't048000'],
2025-01-22T20:11:05.3946758Z       dtype='object')
2025-01-22T20:11:05.3946831Z key = 'cups'
2025-01-22T20:11:05.3946835Z 
2025-01-22T20:11:05.3946921Z     def get_loc(self, key):
2025-01-22T20:11:05.3946991Z         """
2025-01-22T20:11:05.3947153Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3947223Z     
2025-01-22T20:11:05.3947296Z         Parameters
2025-01-22T20:11:05.3947372Z         ----------
2025-01-22T20:11:05.3947442Z         key : label
2025-01-22T20:11:05.3947513Z     
2025-01-22T20:11:05.3947582Z         Returns
2025-01-22T20:11:05.3947656Z         -------
2025-01-22T20:11:05.3947903Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3947973Z     
2025-01-22T20:11:05.3948042Z         Examples
2025-01-22T20:11:05.3948116Z         --------
2025-01-22T20:11:05.3948209Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3948300Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3948367Z         1
2025-01-22T20:11:05.3948436Z     
2025-01-22T20:11:05.3948535Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3948726Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3948802Z         slice(1, 3, None)
2025-01-22T20:11:05.3948872Z     
2025-01-22T20:11:05.3948977Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3949071Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3949163Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3949229Z         """
2025-01-22T20:11:05.3949332Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3949404Z         try:
2025-01-22T20:11:05.3949504Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3949508Z 
2025-01-22T20:11:05.3949749Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3949865Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3950000Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3950072Z     ???
2025-01-22T20:11:05.3950202Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3950272Z     ???
2025-01-22T20:11:05.3950540Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3950612Z     ???
2025-01-22T20:11:05.3950722Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3950726Z 
2025-01-22T20:11:05.3950790Z >   ???
2025-01-22T20:11:05.3950871Z E   KeyError: 'cups'
2025-01-22T20:11:05.3950878Z 
2025-01-22T20:11:05.3951002Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3951007Z 
2025-01-22T20:11:05.3951180Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3951184Z 
2025-01-22T20:11:05.3951402Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3951723Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3952349Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3952354Z 
2025-01-22T20:11:05.3952442Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3952518Z     def plasma(
2025-01-22T20:11:05.3952586Z         self,
2025-01-22T20:11:05.3952670Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3952742Z         config,
2025-01-22T20:11:05.3952813Z     ):
2025-01-22T20:11:05.3952923Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3953019Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3953024Z 
2025-01-22T20:11:05.3953142Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3953252Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3953361Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3953446Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3953734Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3953833Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3953946Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3954022Z     return BasePlasma(
2025-01-22T20:11:05.3954111Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3954196Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3954408Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3954486Z     self.update(**kwargs)
2025-01-22T20:11:05.3954579Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3954700Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3954813Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3954914Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3955282Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3955437Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3955646Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3955745Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3955873Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3956042Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3956214Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3956390Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3956643Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3956819Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3957001Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3957105Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3957359Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3957479Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3957720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3957806Z     return self.apply_standard()
2025-01-22T20:11:05.3958088Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3958207Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3958514Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3958628Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3958844Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3958939Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3959199Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3959284Z     return self._get_value(key)
2025-01-22T20:11:05.3959540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3959630Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3959735Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3959742Z 
2025-01-22T20:11:05.3959901Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3960107Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3960185Z        't046000', 't048000'],
2025-01-22T20:11:05.3960264Z       dtype='object')
2025-01-22T20:11:05.3960335Z key = 'cups'
2025-01-22T20:11:05.3960339Z 
2025-01-22T20:11:05.3960426Z     def get_loc(self, key):
2025-01-22T20:11:05.3960497Z         """
2025-01-22T20:11:05.3960665Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3960733Z     
2025-01-22T20:11:05.3960815Z         Parameters
2025-01-22T20:11:05.3960885Z         ----------
2025-01-22T20:11:05.3960960Z         key : label
2025-01-22T20:11:05.3961027Z     
2025-01-22T20:11:05.3961101Z         Returns
2025-01-22T20:11:05.3961169Z         -------
2025-01-22T20:11:05.3961393Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3961460Z     
2025-01-22T20:11:05.3961536Z         Examples
2025-01-22T20:11:05.3961604Z         --------
2025-01-22T20:11:05.3961708Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3961794Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3961869Z         1
2025-01-22T20:11:05.3961939Z     
2025-01-22T20:11:05.3962045Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3962207Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3962285Z         slice(1, 3, None)
2025-01-22T20:11:05.3962357Z     
2025-01-22T20:11:05.3962465Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3962560Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3962649Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3962720Z         """
2025-01-22T20:11:05.3962820Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3962897Z         try:
2025-01-22T20:11:05.3962997Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3963085Z         except KeyError as err:
2025-01-22T20:11:05.3963180Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3963283Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3963403Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3963475Z             ):
2025-01-22T20:11:05.3963674Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3963761Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3963845Z E           KeyError: 'cups'
2025-01-22T20:11:05.3963849Z 
2025-01-22T20:11:05.3964121Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3964470Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-link_t_rad_t_electron] _
2025-01-22T20:11:05.3964479Z 
2025-01-22T20:11:05.3964635Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3964849Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3964930Z        't046000', 't048000'],
2025-01-22T20:11:05.3965004Z       dtype='object')
2025-01-22T20:11:05.3965079Z key = 'cups'
2025-01-22T20:11:05.3965082Z 
2025-01-22T20:11:05.3965162Z     def get_loc(self, key):
2025-01-22T20:11:05.3965237Z         """
2025-01-22T20:11:05.3965400Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3965473Z     
2025-01-22T20:11:05.3965548Z         Parameters
2025-01-22T20:11:05.3965624Z         ----------
2025-01-22T20:11:05.3965696Z         key : label
2025-01-22T20:11:05.3965770Z     
2025-01-22T20:11:05.3965839Z         Returns
2025-01-22T20:11:05.3965915Z         -------
2025-01-22T20:11:05.3966050Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3966124Z     
2025-01-22T20:11:05.3966202Z         Examples
2025-01-22T20:11:05.3966277Z         --------
2025-01-22T20:11:05.3966375Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3966467Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3966540Z         1
2025-01-22T20:11:05.3966606Z     
2025-01-22T20:11:05.3966716Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3966807Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3966888Z         slice(1, 3, None)
2025-01-22T20:11:05.3966955Z     
2025-01-22T20:11:05.3967072Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3967164Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3967259Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3967327Z         """
2025-01-22T20:11:05.3967435Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3967504Z         try:
2025-01-22T20:11:05.3967727Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3967731Z 
2025-01-22T20:11:05.3967981Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3968100Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3968242Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3968310Z     ???
2025-01-22T20:11:05.3968546Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3968615Z     ???
2025-01-22T20:11:05.3968892Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3968959Z     ???
2025-01-22T20:11:05.3969071Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3969075Z 
2025-01-22T20:11:05.3969141Z >   ???
2025-01-22T20:11:05.3969223Z E   KeyError: 'cups'
2025-01-22T20:11:05.3969227Z 
2025-01-22T20:11:05.3969359Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3969363Z 
2025-01-22T20:11:05.3969535Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3969540Z 
2025-01-22T20:11:05.3969765Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3970085Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3970712Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3970716Z 
2025-01-22T20:11:05.3970805Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3970884Z     def plasma(
2025-01-22T20:11:05.3970952Z         self,
2025-01-22T20:11:05.3971042Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3971114Z         config,
2025-01-22T20:11:05.3971186Z     ):
2025-01-22T20:11:05.3971305Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3971400Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3971404Z 
2025-01-22T20:11:05.3971528Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3971634Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3971742Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3971828Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3972002Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3972100Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3972214Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3972292Z     return BasePlasma(
2025-01-22T20:11:05.3972381Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3972467Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3972567Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3972651Z     self.update(**kwargs)
2025-01-22T20:11:05.3972742Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3972870Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3972981Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3973088Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3973334Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3973584Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3973796Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3973898Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3974025Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3974198Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3974369Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3974666Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3974927Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3975097Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3975281Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3975481Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3975740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3975863Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3976112Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3976200Z     return self.apply_standard()
2025-01-22T20:11:05.3976484Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3976610Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3976917Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3977039Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3977254Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3977347Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3977613Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3977702Z     return self._get_value(key)
2025-01-22T20:11:05.3977957Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3978051Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3978158Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3978171Z 
2025-01-22T20:11:05.3978328Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3978540Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3978614Z        't046000', 't048000'],
2025-01-22T20:11:05.3978693Z       dtype='object')
2025-01-22T20:11:05.3978765Z key = 'cups'
2025-01-22T20:11:05.3978769Z 
2025-01-22T20:11:05.3978856Z     def get_loc(self, key):
2025-01-22T20:11:05.3978924Z         """
2025-01-22T20:11:05.3979088Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3979154Z     
2025-01-22T20:11:05.3979232Z         Parameters
2025-01-22T20:11:05.3979304Z         ----------
2025-01-22T20:11:05.3979380Z         key : label
2025-01-22T20:11:05.3979446Z     
2025-01-22T20:11:05.3979519Z         Returns
2025-01-22T20:11:05.3979589Z         -------
2025-01-22T20:11:05.3979727Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3979800Z     
2025-01-22T20:11:05.3979868Z         Examples
2025-01-22T20:11:05.3979943Z         --------
2025-01-22T20:11:05.3980040Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3980131Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3980198Z         1
2025-01-22T20:11:05.3980270Z     
2025-01-22T20:11:05.3980375Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3980471Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3980547Z         slice(1, 3, None)
2025-01-22T20:11:05.3980619Z     
2025-01-22T20:11:05.3980725Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3980821Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3980911Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3980986Z         """
2025-01-22T20:11:05.3981087Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3981161Z         try:
2025-01-22T20:11:05.3981392Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3981473Z         except KeyError as err:
2025-01-22T20:11:05.3981575Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3981674Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3981797Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3981866Z             ):
2025-01-22T20:11:05.3982034Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3982122Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3982208Z E           KeyError: 'cups'
2025-01-22T20:11:05.3982212Z 
2025-01-22T20:11:05.3982475Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3982765Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:05.3982769Z 
2025-01-22T20:11:05.3982925Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3983135Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3983213Z        't046000', 't048000'],
2025-01-22T20:11:05.3983287Z       dtype='object')
2025-01-22T20:11:05.3983362Z key = 'cups'
2025-01-22T20:11:05.3983366Z 
2025-01-22T20:11:05.3983445Z     def get_loc(self, key):
2025-01-22T20:11:05.3983638Z         """
2025-01-22T20:11:05.3983805Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3983878Z     
2025-01-22T20:11:05.3983954Z         Parameters
2025-01-22T20:11:05.3984030Z         ----------
2025-01-22T20:11:05.3984104Z         key : label
2025-01-22T20:11:05.3984174Z     
2025-01-22T20:11:05.3984243Z         Returns
2025-01-22T20:11:05.3984317Z         -------
2025-01-22T20:11:05.3984454Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3984523Z     
2025-01-22T20:11:05.3984598Z         Examples
2025-01-22T20:11:05.3984669Z         --------
2025-01-22T20:11:05.3984770Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3984854Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3984926Z         1
2025-01-22T20:11:05.3984993Z     
2025-01-22T20:11:05.3985098Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3985183Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3985266Z         slice(1, 3, None)
2025-01-22T20:11:05.3985332Z     
2025-01-22T20:11:05.3985444Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3985534Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3985633Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3985701Z         """
2025-01-22T20:11:05.3985809Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3985878Z         try:
2025-01-22T20:11:05.3985980Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3985987Z 
2025-01-22T20:11:05.3986237Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3986349Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3986488Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3986556Z     ???
2025-01-22T20:11:05.3986689Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3986760Z     ???
2025-01-22T20:11:05.3987036Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3987102Z     ???
2025-01-22T20:11:05.3987212Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3987216Z 
2025-01-22T20:11:05.3987282Z >   ???
2025-01-22T20:11:05.3987366Z E   KeyError: 'cups'
2025-01-22T20:11:05.3987370Z 
2025-01-22T20:11:05.3987500Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3987622Z 
2025-01-22T20:11:05.3987792Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3987796Z 
2025-01-22T20:11:05.3988021Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3988333Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3989058Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3989063Z 
2025-01-22T20:11:05.3989157Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3989230Z     def plasma(
2025-01-22T20:11:05.3989303Z         self,
2025-01-22T20:11:05.3989384Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3989457Z         config,
2025-01-22T20:11:05.3989523Z     ):
2025-01-22T20:11:05.3989642Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3989736Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3989740Z 
2025-01-22T20:11:05.3989866Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3989970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3990079Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3990162Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3990336Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3990443Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3990553Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3990638Z     return BasePlasma(
2025-01-22T20:11:05.3990724Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3990815Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3990903Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3990989Z     self.update(**kwargs)
2025-01-22T20:11:05.3991077Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3991201Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3991311Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3991418Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3991661Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3991818Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3992024Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3992130Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3992264Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3992434Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3992612Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3992792Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3993054Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3993230Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3993416Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3993637Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3993906Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3994035Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3994275Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3994374Z     return self.apply_standard()
2025-01-22T20:11:05.3994650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3994895Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3995198Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3995323Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3995540Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3995633Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3995993Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3996089Z     return self._get_value(key)
2025-01-22T20:11:05.3996348Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3996433Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3996543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3996547Z 
2025-01-22T20:11:05.3996704Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3996922Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3996995Z        't046000', 't048000'],
2025-01-22T20:11:05.3997077Z       dtype='object')
2025-01-22T20:11:05.3997151Z key = 'cups'
2025-01-22T20:11:05.3997155Z 
2025-01-22T20:11:05.3997238Z     def get_loc(self, key):
2025-01-22T20:11:05.3997308Z         """
2025-01-22T20:11:05.3997474Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3997546Z     
2025-01-22T20:11:05.3997619Z         Parameters
2025-01-22T20:11:05.3997696Z         ----------
2025-01-22T20:11:05.3997769Z         key : label
2025-01-22T20:11:05.3997841Z     
2025-01-22T20:11:05.3997909Z         Returns
2025-01-22T20:11:05.3997986Z         -------
2025-01-22T20:11:05.3998116Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3998193Z     
2025-01-22T20:11:05.3998263Z         Examples
2025-01-22T20:11:05.3998338Z         --------
2025-01-22T20:11:05.3998435Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3998525Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3998595Z         1
2025-01-22T20:11:05.3998667Z     
2025-01-22T20:11:05.3998771Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3998865Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3998943Z         slice(1, 3, None)
2025-01-22T20:11:05.3999016Z     
2025-01-22T20:11:05.3999130Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3999221Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3999317Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3999389Z         """
2025-01-22T20:11:05.3999495Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3999566Z         try:
2025-01-22T20:11:05.3999672Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3999758Z         except KeyError as err:
2025-01-22T20:11:05.3999863Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3999965Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4000088Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4000155Z             ):
2025-01-22T20:11:05.4000251Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4000341Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4000427Z E           KeyError: 'cups'
2025-01-22T20:11:05.4000431Z 
2025-01-22T20:11:05.4000699Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4000956Z _ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:05.4000961Z 
2025-01-22T20:11:05.4001118Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4001413Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4001492Z        't046000', 't048000'],
2025-01-22T20:11:05.4001568Z       dtype='object')
2025-01-22T20:11:05.4001649Z key = 'cups'
2025-01-22T20:11:05.4001653Z 
2025-01-22T20:11:05.4001734Z     def get_loc(self, key):
2025-01-22T20:11:05.4001805Z         """
2025-01-22T20:11:05.4002039Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4002108Z     
2025-01-22T20:11:05.4002187Z         Parameters
2025-01-22T20:11:05.4002259Z         ----------
2025-01-22T20:11:05.4002338Z         key : label
2025-01-22T20:11:05.4002404Z     
2025-01-22T20:11:05.4002478Z         Returns
2025-01-22T20:11:05.4002553Z         -------
2025-01-22T20:11:05.4002692Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4002760Z     
2025-01-22T20:11:05.4002837Z         Examples
2025-01-22T20:11:05.4002912Z         --------
2025-01-22T20:11:05.4003014Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4003099Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4003175Z         1
2025-01-22T20:11:05.4003244Z     
2025-01-22T20:11:05.4003352Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4003439Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4003621Z         slice(1, 3, None)
2025-01-22T20:11:05.4003688Z     
2025-01-22T20:11:05.4003805Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4003904Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4003994Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4004069Z         """
2025-01-22T20:11:05.4004168Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4004244Z         try:
2025-01-22T20:11:05.4004342Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4004346Z 
2025-01-22T20:11:05.4004600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4004707Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4004848Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4004916Z     ???
2025-01-22T20:11:05.4005053Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4005123Z     ???
2025-01-22T20:11:05.4005397Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4005468Z     ???
2025-01-22T20:11:05.4005571Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4005574Z 
2025-01-22T20:11:05.4005645Z >   ???
2025-01-22T20:11:05.4005721Z E   KeyError: 'cups'
2025-01-22T20:11:05.4005724Z 
2025-01-22T20:11:05.4005854Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4005858Z 
2025-01-22T20:11:05.4006027Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4006031Z 
2025-01-22T20:11:05.4006263Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4006583Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4007207Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4007212Z 
2025-01-22T20:11:05.4007306Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4007379Z     def plasma(
2025-01-22T20:11:05.4007452Z         self,
2025-01-22T20:11:05.4007533Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4007607Z         config,
2025-01-22T20:11:05.4007673Z     ):
2025-01-22T20:11:05.4007790Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4008019Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4008024Z 
2025-01-22T20:11:05.4008152Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4008264Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4008367Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4008456Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4008719Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4008828Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4008938Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4009024Z     return BasePlasma(
2025-01-22T20:11:05.4009108Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4009201Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4009291Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4009376Z     self.update(**kwargs)
2025-01-22T20:11:05.4009463Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4009593Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4009702Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4009809Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4010072Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.4010220Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4010437Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4010533Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4010667Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4010833Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4011009Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4011179Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4011444Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4011617Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4011804Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4011911Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4012166Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4012292Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4012531Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4012622Z     return self.apply_standard()
2025-01-22T20:11:05.4012898Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4013021Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4013329Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4013452Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4013765Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4013853Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4014127Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4014210Z     return self._get_value(key)
2025-01-22T20:11:05.4014473Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4014560Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4014673Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4014678Z 
2025-01-22T20:11:05.4014835Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4015166Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4015249Z        't046000', 't048000'],
2025-01-22T20:11:05.4015326Z       dtype='object')
2025-01-22T20:11:05.4015403Z key = 'cups'
2025-01-22T20:11:05.4015407Z 
2025-01-22T20:11:05.4015487Z     def get_loc(self, key):
2025-01-22T20:11:05.4015565Z         """
2025-01-22T20:11:05.4015819Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4015893Z     
2025-01-22T20:11:05.4015967Z         Parameters
2025-01-22T20:11:05.4016045Z         ----------
2025-01-22T20:11:05.4016118Z         key : label
2025-01-22T20:11:05.4016194Z     
2025-01-22T20:11:05.4016262Z         Returns
2025-01-22T20:11:05.4016339Z         -------
2025-01-22T20:11:05.4016470Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4016544Z     
2025-01-22T20:11:05.4016615Z         Examples
2025-01-22T20:11:05.4016695Z         --------
2025-01-22T20:11:05.4016792Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4016882Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4016954Z         1
2025-01-22T20:11:05.4017020Z     
2025-01-22T20:11:05.4017131Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4017218Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4017297Z         slice(1, 3, None)
2025-01-22T20:11:05.4017391Z     
2025-01-22T20:11:05.4017506Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4017596Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4017692Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4017759Z         """
2025-01-22T20:11:05.4017865Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4017935Z         try:
2025-01-22T20:11:05.4018040Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4018122Z         except KeyError as err:
2025-01-22T20:11:05.4018230Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4018333Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4018457Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4018532Z             ):
2025-01-22T20:11:05.4018625Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4018731Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4018818Z E           KeyError: 'cups'
2025-01-22T20:11:05.4018822Z 
2025-01-22T20:11:05.4019091Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4019391Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_rad] _
2025-01-22T20:11:05.4019395Z 
2025-01-22T20:11:05.4019557Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4019763Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4019846Z        't046000', 't048000'],
2025-01-22T20:11:05.4019927Z       dtype='object')
2025-01-22T20:11:05.4019998Z key = 'cups'
2025-01-22T20:11:05.4020002Z 
2025-01-22T20:11:05.4020086Z     def get_loc(self, key):
2025-01-22T20:11:05.4020155Z         """
2025-01-22T20:11:05.4020316Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4020383Z     
2025-01-22T20:11:05.4020467Z         Parameters
2025-01-22T20:11:05.4020538Z         ----------
2025-01-22T20:11:05.4020617Z         key : label
2025-01-22T20:11:05.4020684Z     
2025-01-22T20:11:05.4020758Z         Returns
2025-01-22T20:11:05.4020832Z         -------
2025-01-22T20:11:05.4020967Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4021034Z     
2025-01-22T20:11:05.4021111Z         Examples
2025-01-22T20:11:05.4021182Z         --------
2025-01-22T20:11:05.4021371Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4021457Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4021535Z         1
2025-01-22T20:11:05.4021607Z     
2025-01-22T20:11:05.4021708Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4021801Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4021877Z         slice(1, 3, None)
2025-01-22T20:11:05.4021949Z     
2025-01-22T20:11:05.4022127Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4022223Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4022310Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4022386Z         """
2025-01-22T20:11:05.4022487Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4022564Z         try:
2025-01-22T20:11:05.4022662Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4022666Z 
2025-01-22T20:11:05.4022915Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4023033Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4023168Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4023241Z     ???
2025-01-22T20:11:05.4023371Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4023444Z     ???
2025-01-22T20:11:05.4074126Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4074248Z     ???
2025-01-22T20:11:05.4074383Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4074390Z 
2025-01-22T20:11:05.4074463Z >   ???
2025-01-22T20:11:05.4074547Z E   KeyError: 'cups'
2025-01-22T20:11:05.4074553Z 
2025-01-22T20:11:05.4074708Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4074713Z 
2025-01-22T20:11:05.4074888Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4074902Z 
2025-01-22T20:11:05.4075128Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4075465Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4076097Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4076102Z 
2025-01-22T20:11:05.4076194Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4076267Z     def plasma(
2025-01-22T20:11:05.4076340Z         self,
2025-01-22T20:11:05.4076420Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4076491Z         config,
2025-01-22T20:11:05.4076556Z     ):
2025-01-22T20:11:05.4076675Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4076775Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4076783Z 
2025-01-22T20:11:05.4076908Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4077027Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4077134Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4077222Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4077391Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4077498Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4077608Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4077688Z     return BasePlasma(
2025-01-22T20:11:05.4077770Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4077857Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4077942Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4078026Z     self.update(**kwargs)
2025-01-22T20:11:05.4078118Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4078439Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4078555Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4078657Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4078901Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4079057Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4079382Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4079482Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4079612Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4079780Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4079952Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4080123Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4080386Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4080565Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4080745Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4080851Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4081110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4081244Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4081485Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4081576Z     return self.apply_standard()
2025-01-22T20:11:05.4081852Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4081977Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4082285Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4082407Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4082629Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4082715Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4082982Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4083066Z     return self._get_value(key)
2025-01-22T20:11:05.4083325Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4083410Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4083633Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4083638Z 
2025-01-22T20:11:05.4083796Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4084014Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4084092Z        't046000', 't048000'],
2025-01-22T20:11:05.4084165Z       dtype='object')
2025-01-22T20:11:05.4084240Z key = 'cups'
2025-01-22T20:11:05.4084245Z 
2025-01-22T20:11:05.4084325Z     def get_loc(self, key):
2025-01-22T20:11:05.4084394Z         """
2025-01-22T20:11:05.4084551Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4084621Z     
2025-01-22T20:11:05.4084693Z         Parameters
2025-01-22T20:11:05.4084770Z         ----------
2025-01-22T20:11:05.4084838Z         key : label
2025-01-22T20:11:05.4084905Z     
2025-01-22T20:11:05.4084972Z         Returns
2025-01-22T20:11:05.4085045Z         -------
2025-01-22T20:11:05.4085176Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4085245Z     
2025-01-22T20:11:05.4085317Z         Examples
2025-01-22T20:11:05.4085386Z         --------
2025-01-22T20:11:05.4085670Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4085756Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4085826Z         1
2025-01-22T20:11:05.4085892Z     
2025-01-22T20:11:05.4086001Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4086087Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4086166Z         slice(1, 3, None)
2025-01-22T20:11:05.4086229Z     
2025-01-22T20:11:05.4086465Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4086560Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4086654Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4086720Z         """
2025-01-22T20:11:05.4086822Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4086888Z         try:
2025-01-22T20:11:05.4086990Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4087073Z         except KeyError as err:
2025-01-22T20:11:05.4087174Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4087277Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4087401Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4087469Z             ):
2025-01-22T20:11:05.4087561Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4087649Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4087729Z E           KeyError: 'cups'
2025-01-22T20:11:05.4087734Z 
2025-01-22T20:11:05.4088011Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4088164Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:05.4088584Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:05.4089029Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:05.4089180Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:05.4089676Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:05.4089979Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-g_electron] _
2025-01-22T20:11:05.4089984Z 
2025-01-22T20:11:05.4090144Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4090354Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4090429Z        't046000', 't048000'],
2025-01-22T20:11:05.4090502Z       dtype='object')
2025-01-22T20:11:05.4090577Z key = 'cups'
2025-01-22T20:11:05.4090581Z 
2025-01-22T20:11:05.4090665Z     def get_loc(self, key):
2025-01-22T20:11:05.4090732Z         """
2025-01-22T20:11:05.4090902Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4090967Z     
2025-01-22T20:11:05.4091041Z         Parameters
2025-01-22T20:11:05.4091112Z         ----------
2025-01-22T20:11:05.4091185Z         key : label
2025-01-22T20:11:05.4091248Z     
2025-01-22T20:11:05.4091315Z         Returns
2025-01-22T20:11:05.4091383Z         -------
2025-01-22T20:11:05.4091519Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4091586Z     
2025-01-22T20:11:05.4091658Z         Examples
2025-01-22T20:11:05.4091727Z         --------
2025-01-22T20:11:05.4091831Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4091919Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4091990Z         1
2025-01-22T20:11:05.4092052Z     
2025-01-22T20:11:05.4092162Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4092251Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4092328Z         slice(1, 3, None)
2025-01-22T20:11:05.4092482Z     
2025-01-22T20:11:05.4092592Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4092686Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4092776Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4092847Z         """
2025-01-22T20:11:05.4092948Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4093016Z         try:
2025-01-22T20:11:05.4093187Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4093192Z 
2025-01-22T20:11:05.4093448Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4093834Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4093980Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4094051Z     ???
2025-01-22T20:11:05.4094179Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4094252Z     ???
2025-01-22T20:11:05.4094522Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4094592Z     ???
2025-01-22T20:11:05.4094701Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4094705Z 
2025-01-22T20:11:05.4094772Z >   ???
2025-01-22T20:11:05.4094849Z E   KeyError: 'cups'
2025-01-22T20:11:05.4094853Z 
2025-01-22T20:11:05.4094987Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4094991Z 
2025-01-22T20:11:05.4095158Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4095167Z 
2025-01-22T20:11:05.4095383Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4095705Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4096325Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4096334Z 
2025-01-22T20:11:05.4096437Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4096510Z     def plasma(
2025-01-22T20:11:05.4096582Z         self,
2025-01-22T20:11:05.4096661Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4096734Z         config,
2025-01-22T20:11:05.4096799Z     ):
2025-01-22T20:11:05.4096916Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4097016Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4097020Z 
2025-01-22T20:11:05.4097142Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4097250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4097353Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4097436Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4097607Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4097708Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4097816Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4097895Z     return BasePlasma(
2025-01-22T20:11:05.4097979Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4098072Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4098160Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4098245Z     self.update(**kwargs)
2025-01-22T20:11:05.4098339Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4098458Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4098571Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4098672Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4098909Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4099060Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4099420Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4099517Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4099644Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4099808Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4099980Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4100256Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4100521Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4100696Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4100876Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4100982Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4101241Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4101368Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4101604Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4101693Z     return self.apply_standard()
2025-01-22T20:11:05.4101969Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4102093Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4102397Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4102514Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4102729Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4102815Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4103090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4103172Z     return self._get_value(key)
2025-01-22T20:11:05.4103430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4103610Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4103725Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4103729Z 
2025-01-22T20:11:05.4103887Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4104098Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4104176Z        't046000', 't048000'],
2025-01-22T20:11:05.4104249Z       dtype='object')
2025-01-22T20:11:05.4104322Z key = 'cups'
2025-01-22T20:11:05.4104326Z 
2025-01-22T20:11:05.4104403Z     def get_loc(self, key):
2025-01-22T20:11:05.4104475Z         """
2025-01-22T20:11:05.4104632Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4104700Z     
2025-01-22T20:11:05.4104771Z         Parameters
2025-01-22T20:11:05.4104846Z         ----------
2025-01-22T20:11:05.4104916Z         key : label
2025-01-22T20:11:05.4104986Z     
2025-01-22T20:11:05.4105052Z         Returns
2025-01-22T20:11:05.4105124Z         -------
2025-01-22T20:11:05.4105255Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4105329Z     
2025-01-22T20:11:05.4105403Z         Examples
2025-01-22T20:11:05.4105472Z         --------
2025-01-22T20:11:05.4105572Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4105654Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4105724Z         1
2025-01-22T20:11:05.4105788Z     
2025-01-22T20:11:05.4105895Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4105981Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4106174Z         slice(1, 3, None)
2025-01-22T20:11:05.4106237Z     
2025-01-22T20:11:05.4106345Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4106433Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4106525Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4106591Z         """
2025-01-22T20:11:05.4106695Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4106760Z         try:
2025-01-22T20:11:05.4106960Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4107046Z         except KeyError as err:
2025-01-22T20:11:05.4107142Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4107243Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4107358Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4107429Z             ):
2025-01-22T20:11:05.4107516Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4107608Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4107692Z E           KeyError: 'cups'
2025-01-22T20:11:05.4107697Z 
2025-01-22T20:11:05.4107978Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4108290Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-selected_atoms] _
2025-01-22T20:11:05.4108294Z 
2025-01-22T20:11:05.4108462Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4108679Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4108755Z        't046000', 't048000'],
2025-01-22T20:11:05.4108839Z       dtype='object')
2025-01-22T20:11:05.4108910Z key = 'cups'
2025-01-22T20:11:05.4108915Z 
2025-01-22T20:11:05.4109000Z     def get_loc(self, key):
2025-01-22T20:11:05.4109067Z         """
2025-01-22T20:11:05.4109230Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4109301Z     
2025-01-22T20:11:05.4109379Z         Parameters
2025-01-22T20:11:05.4109451Z         ----------
2025-01-22T20:11:05.4109532Z         key : label
2025-01-22T20:11:05.4109600Z     
2025-01-22T20:11:05.4109674Z         Returns
2025-01-22T20:11:05.4109745Z         -------
2025-01-22T20:11:05.4109884Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4109956Z     
2025-01-22T20:11:05.4110028Z         Examples
2025-01-22T20:11:05.4110104Z         --------
2025-01-22T20:11:05.4110201Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4110290Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4110356Z         1
2025-01-22T20:11:05.4110427Z     
2025-01-22T20:11:05.4110528Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4110620Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4110694Z         slice(1, 3, None)
2025-01-22T20:11:05.4110767Z     
2025-01-22T20:11:05.4110871Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4110968Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4111058Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4111130Z         """
2025-01-22T20:11:05.4111229Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4111303Z         try:
2025-01-22T20:11:05.4111401Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4111411Z 
2025-01-22T20:11:05.4111663Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4111776Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4111913Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4111986Z     ???
2025-01-22T20:11:05.4112118Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4112190Z     ???
2025-01-22T20:11:05.4112458Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4112635Z     ???
2025-01-22T20:11:05.4112740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4112745Z 
2025-01-22T20:11:05.4112815Z >   ???
2025-01-22T20:11:05.4112893Z E   KeyError: 'cups'
2025-01-22T20:11:05.4112903Z 
2025-01-22T20:11:05.4113032Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4113035Z 
2025-01-22T20:11:05.4113282Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4113287Z 
2025-01-22T20:11:05.4113626Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4113958Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4114576Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4114585Z 
2025-01-22T20:11:05.4114681Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4114759Z     def plasma(
2025-01-22T20:11:05.4114828Z         self,
2025-01-22T20:11:05.4114914Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4114985Z         config,
2025-01-22T20:11:05.4115058Z     ):
2025-01-22T20:11:05.4115174Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4115275Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4115280Z 
2025-01-22T20:11:05.4115400Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4115511Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4115614Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4115703Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4115868Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4115976Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4116086Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4116169Z     return BasePlasma(
2025-01-22T20:11:05.4116259Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4116346Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4116439Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4116518Z     self.update(**kwargs)
2025-01-22T20:11:05.4116614Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4116736Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4116851Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4116952Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4117191Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4117347Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4117599Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4117694Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4117825Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4117994Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4118163Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4118344Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4118601Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4118778Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4118957Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4119064Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4119314Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4119561Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4119803Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4119888Z     return self.apply_standard()
2025-01-22T20:11:05.4120165Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4120395Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4120704Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4120820Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4121035Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4121120Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4121384Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4121470Z     return self._get_value(key)
2025-01-22T20:11:05.4121729Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4121820Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4121924Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4121929Z 
2025-01-22T20:11:05.4122089Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4122298Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4122375Z        't046000', 't048000'],
2025-01-22T20:11:05.4122452Z       dtype='object')
2025-01-22T20:11:05.4122525Z key = 'cups'
2025-01-22T20:11:05.4122529Z 
2025-01-22T20:11:05.4122605Z     def get_loc(self, key):
2025-01-22T20:11:05.4122677Z         """
2025-01-22T20:11:05.4122833Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4122908Z     
2025-01-22T20:11:05.4122983Z         Parameters
2025-01-22T20:11:05.4123053Z         ----------
2025-01-22T20:11:05.4123131Z         key : label
2025-01-22T20:11:05.4123196Z     
2025-01-22T20:11:05.4123268Z         Returns
2025-01-22T20:11:05.4123336Z         -------
2025-01-22T20:11:05.4123470Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4123634Z     
2025-01-22T20:11:05.4123711Z         Examples
2025-01-22T20:11:05.4123780Z         --------
2025-01-22T20:11:05.4123883Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4123967Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4124037Z         1
2025-01-22T20:11:05.4124101Z     
2025-01-22T20:11:05.4124207Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4124292Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4124369Z         slice(1, 3, None)
2025-01-22T20:11:05.4124436Z     
2025-01-22T20:11:05.4124548Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4124637Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4124729Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4124799Z         """
2025-01-22T20:11:05.4124899Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4124970Z         try:
2025-01-22T20:11:05.4125067Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4125153Z         except KeyError as err:
2025-01-22T20:11:05.4125249Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4125350Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4125469Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4125539Z             ):
2025-01-22T20:11:05.4125629Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4125719Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4125915Z E           KeyError: 'cups'
2025-01-22T20:11:05.4125919Z 
2025-01-22T20:11:05.4126186Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4126495Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-number_density] _
2025-01-22T20:11:05.4126500Z 
2025-01-22T20:11:05.4126647Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4126950Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4127024Z        't046000', 't048000'],
2025-01-22T20:11:05.4127101Z       dtype='object')
2025-01-22T20:11:05.4127171Z key = 'cups'
2025-01-22T20:11:05.4127175Z 
2025-01-22T20:11:05.4127255Z     def get_loc(self, key):
2025-01-22T20:11:05.4127320Z         """
2025-01-22T20:11:05.4127477Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4127546Z     
2025-01-22T20:11:05.4127622Z         Parameters
2025-01-22T20:11:05.4127698Z         ----------
2025-01-22T20:11:05.4127767Z         key : label
2025-01-22T20:11:05.4127835Z     
2025-01-22T20:11:05.4127903Z         Returns
2025-01-22T20:11:05.4127975Z         -------
2025-01-22T20:11:05.4128102Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4128170Z     
2025-01-22T20:11:05.4128238Z         Examples
2025-01-22T20:11:05.4128312Z         --------
2025-01-22T20:11:05.4128413Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4128499Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4128565Z         1
2025-01-22T20:11:05.4128633Z     
2025-01-22T20:11:05.4128731Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4128820Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4128893Z         slice(1, 3, None)
2025-01-22T20:11:05.4128963Z     
2025-01-22T20:11:05.4129067Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4129163Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4129253Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4129319Z         """
2025-01-22T20:11:05.4129421Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4129488Z         try:
2025-01-22T20:11:05.4129587Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4129592Z 
2025-01-22T20:11:05.4129835Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4129944Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4130077Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4130151Z     ???
2025-01-22T20:11:05.4130278Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4130350Z     ???
2025-01-22T20:11:05.4130614Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4130687Z     ???
2025-01-22T20:11:05.4130793Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4130798Z 
2025-01-22T20:11:05.4130862Z >   ???
2025-01-22T20:11:05.4130941Z E   KeyError: 'cups'
2025-01-22T20:11:05.4130945Z 
2025-01-22T20:11:05.4131073Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4131077Z 
2025-01-22T20:11:05.4131249Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4131253Z 
2025-01-22T20:11:05.4131471Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4131790Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4132409Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4132497Z 
2025-01-22T20:11:05.4132587Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4132664Z     def plasma(
2025-01-22T20:11:05.4132732Z         self,
2025-01-22T20:11:05.4132815Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4132883Z         config,
2025-01-22T20:11:05.4132953Z     ):
2025-01-22T20:11:05.4133064Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4133233Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4133238Z 
2025-01-22T20:11:05.4133359Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4133473Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4133673Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4133757Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4133932Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4134034Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4134146Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4134222Z     return BasePlasma(
2025-01-22T20:11:05.4134309Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4134394Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4134487Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4134565Z     self.update(**kwargs)
2025-01-22T20:11:05.4134657Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4134780Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4134894Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4134994Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4135232Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4135386Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4135595Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4135696Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4135821Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4135993Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4136164Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4136340Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4136599Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4136771Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4136948Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4137054Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4137307Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4137435Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4137676Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4137761Z     return self.apply_standard()
2025-01-22T20:11:05.4138041Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4138159Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4138471Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4138589Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4138807Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4138897Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4139157Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4139383Z     return self._get_value(key)
2025-01-22T20:11:05.4139638Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4139728Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4139835Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4139839Z 
2025-01-22T20:11:05.4139997Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4140301Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4140382Z        't046000', 't048000'],
2025-01-22T20:11:05.4140456Z       dtype='object')
2025-01-22T20:11:05.4140532Z key = 'cups'
2025-01-22T20:11:05.4140536Z 
2025-01-22T20:11:05.4140618Z     def get_loc(self, key):
2025-01-22T20:11:05.4140686Z         """
2025-01-22T20:11:05.4140849Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4140919Z     
2025-01-22T20:11:05.4140995Z         Parameters
2025-01-22T20:11:05.4141065Z         ----------
2025-01-22T20:11:05.4141144Z         key : label
2025-01-22T20:11:05.4141211Z     
2025-01-22T20:11:05.4141283Z         Returns
2025-01-22T20:11:05.4141352Z         -------
2025-01-22T20:11:05.4141491Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4141556Z     
2025-01-22T20:11:05.4141630Z         Examples
2025-01-22T20:11:05.4141702Z         --------
2025-01-22T20:11:05.4141804Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4141888Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4141959Z         1
2025-01-22T20:11:05.4142024Z     
2025-01-22T20:11:05.4142134Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4142227Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4142303Z         slice(1, 3, None)
2025-01-22T20:11:05.4142374Z     
2025-01-22T20:11:05.4142484Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4142579Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4142667Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4142737Z         """
2025-01-22T20:11:05.4142837Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4142909Z         try:
2025-01-22T20:11:05.4143007Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4143093Z         except KeyError as err:
2025-01-22T20:11:05.4143192Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4143295Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4143412Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4143484Z             ):
2025-01-22T20:11:05.4143701Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4143790Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4143875Z E           KeyError: 'cups'
2025-01-22T20:11:05.4143883Z 
2025-01-22T20:11:05.4144161Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4144473Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_electrons] _
2025-01-22T20:11:05.4144478Z 
2025-01-22T20:11:05.4144630Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4144845Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4144918Z        't046000', 't048000'],
2025-01-22T20:11:05.4144996Z       dtype='object')
2025-01-22T20:11:05.4145070Z key = 'cups'
2025-01-22T20:11:05.4145074Z 
2025-01-22T20:11:05.4145151Z     def get_loc(self, key):
2025-01-22T20:11:05.4145221Z         """
2025-01-22T20:11:05.4145375Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4145442Z     
2025-01-22T20:11:05.4145631Z         Parameters
2025-01-22T20:11:05.4145704Z         ----------
2025-01-22T20:11:05.4145774Z         key : label
2025-01-22T20:11:05.4145841Z     
2025-01-22T20:11:05.4145908Z         Returns
2025-01-22T20:11:05.4145982Z         -------
2025-01-22T20:11:05.4146111Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4146179Z     
2025-01-22T20:11:05.4146248Z         Examples
2025-01-22T20:11:05.4146321Z         --------
2025-01-22T20:11:05.4146513Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4146601Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4146668Z         1
2025-01-22T20:11:05.4146740Z     
2025-01-22T20:11:05.4146844Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4146929Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4147006Z         slice(1, 3, None)
2025-01-22T20:11:05.4147071Z     
2025-01-22T20:11:05.4147178Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4147271Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4147363Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4147428Z         """
2025-01-22T20:11:05.4147530Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4147598Z         try:
2025-01-22T20:11:05.4147699Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4147703Z 
2025-01-22T20:11:05.4147950Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4148063Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4148201Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4148267Z     ???
2025-01-22T20:11:05.4148399Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4148464Z     ???
2025-01-22T20:11:05.4148735Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4148803Z     ???
2025-01-22T20:11:05.4148913Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4148917Z 
2025-01-22T20:11:05.4148982Z >   ???
2025-01-22T20:11:05.4149062Z E   KeyError: 'cups'
2025-01-22T20:11:05.4149066Z 
2025-01-22T20:11:05.4149193Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4149197Z 
2025-01-22T20:11:05.4149365Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4149372Z 
2025-01-22T20:11:05.4149597Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4149912Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4150538Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4150546Z 
2025-01-22T20:11:05.4150632Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4150709Z     def plasma(
2025-01-22T20:11:05.4150776Z         self,
2025-01-22T20:11:05.4150860Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4150927Z         config,
2025-01-22T20:11:05.4150998Z     ):
2025-01-22T20:11:05.4151106Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4151208Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4151212Z 
2025-01-22T20:11:05.4151342Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4151448Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4151559Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4151642Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4151810Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4151908Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4152107Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4152185Z     return BasePlasma(
2025-01-22T20:11:05.4152273Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4152360Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4152453Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4152536Z     self.update(**kwargs)
2025-01-22T20:11:05.4152623Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4152816Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4152928Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4153033Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4153270Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4153425Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4153752Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4153859Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4153986Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4154157Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4154326Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4154504Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4154771Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4154943Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4155125Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4155225Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4155482Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4155606Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4155849Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4155935Z     return self.apply_standard()
2025-01-22T20:11:05.4156215Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4156332Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4156650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4156771Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4156985Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4157072Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4157333Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4157421Z     return self._get_value(key)
2025-01-22T20:11:05.4157678Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4157768Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4157876Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4157880Z 
2025-01-22T20:11:05.4158039Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4158254Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4158330Z        't046000', 't048000'],
2025-01-22T20:11:05.4158408Z       dtype='object')
2025-01-22T20:11:05.4158481Z key = 'cups'
2025-01-22T20:11:05.4158485Z 
2025-01-22T20:11:05.4158568Z     def get_loc(self, key):
2025-01-22T20:11:05.4158636Z         """
2025-01-22T20:11:05.4158798Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4158865Z     
2025-01-22T20:11:05.4159062Z         Parameters
2025-01-22T20:11:05.4159133Z         ----------
2025-01-22T20:11:05.4159207Z         key : label
2025-01-22T20:11:05.4159276Z     
2025-01-22T20:11:05.4159348Z         Returns
2025-01-22T20:11:05.4159418Z         -------
2025-01-22T20:11:05.4159553Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4159626Z     
2025-01-22T20:11:05.4159698Z         Examples
2025-01-22T20:11:05.4159775Z         --------
2025-01-22T20:11:05.4160009Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4160102Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4160169Z         1
2025-01-22T20:11:05.4160240Z     
2025-01-22T20:11:05.4160345Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4160437Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4160512Z         slice(1, 3, None)
2025-01-22T20:11:05.4160581Z     
2025-01-22T20:11:05.4160687Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4160787Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4160876Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4160948Z         """
2025-01-22T20:11:05.4161047Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4161122Z         try:
2025-01-22T20:11:05.4161220Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4161307Z         except KeyError as err:
2025-01-22T20:11:05.4161411Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4161513Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4161635Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4161703Z             ):
2025-01-22T20:11:05.4161799Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4161885Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4161969Z E           KeyError: 'cups'
2025-01-22T20:11:05.4161973Z 
2025-01-22T20:11:05.4162237Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4162526Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-w] _
2025-01-22T20:11:05.4162530Z 
2025-01-22T20:11:05.4162689Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4162897Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4162974Z        't046000', 't048000'],
2025-01-22T20:11:05.4163049Z       dtype='object')
2025-01-22T20:11:05.4163124Z key = 'cups'
2025-01-22T20:11:05.4163128Z 
2025-01-22T20:11:05.4163206Z     def get_loc(self, key):
2025-01-22T20:11:05.4163278Z         """
2025-01-22T20:11:05.4163431Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4163597Z     
2025-01-22T20:11:05.4163673Z         Parameters
2025-01-22T20:11:05.4163748Z         ----------
2025-01-22T20:11:05.4163821Z         key : label
2025-01-22T20:11:05.4163892Z     
2025-01-22T20:11:05.4163959Z         Returns
2025-01-22T20:11:05.4164033Z         -------
2025-01-22T20:11:05.4164161Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4164229Z     
2025-01-22T20:11:05.4164305Z         Examples
2025-01-22T20:11:05.4164374Z         --------
2025-01-22T20:11:05.4164475Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4164564Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4164636Z         1
2025-01-22T20:11:05.4164702Z     
2025-01-22T20:11:05.4164805Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4164891Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4164969Z         slice(1, 3, None)
2025-01-22T20:11:05.4165035Z     
2025-01-22T20:11:05.4165142Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4165230Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4165441Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4165509Z         """
2025-01-22T20:11:05.4165615Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4165683Z         try:
2025-01-22T20:11:05.4165784Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4165789Z 
2025-01-22T20:11:05.4166035Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4166318Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4166470Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4166537Z     ???
2025-01-22T20:11:05.4166670Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4166737Z     ???
2025-01-22T20:11:05.4167009Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4167075Z     ???
2025-01-22T20:11:05.4167182Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4167191Z 
2025-01-22T20:11:05.4167255Z >   ???
2025-01-22T20:11:05.4167336Z E   KeyError: 'cups'
2025-01-22T20:11:05.4167340Z 
2025-01-22T20:11:05.4167474Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4167479Z 
2025-01-22T20:11:05.4167645Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4167649Z 
2025-01-22T20:11:05.4167875Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4168191Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4168816Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4168825Z 
2025-01-22T20:11:05.4168918Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4168989Z     def plasma(
2025-01-22T20:11:05.4169061Z         self,
2025-01-22T20:11:05.4169141Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4169213Z         config,
2025-01-22T20:11:05.4169280Z     ):
2025-01-22T20:11:05.4169395Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4169488Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4169493Z 
2025-01-22T20:11:05.4169619Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4169726Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4169834Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4169915Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4170084Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4170183Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4170295Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4170380Z     return BasePlasma(
2025-01-22T20:11:05.4170463Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4170554Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4170641Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4170725Z     self.update(**kwargs)
2025-01-22T20:11:05.4170813Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4170940Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4171052Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4171158Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4171392Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4171545Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4171752Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4171852Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4172068Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4172235Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4172406Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4172578Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4172836Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4173074Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4173259Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4173360Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4173717Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4173841Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4174088Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4174178Z     return self.apply_standard()
2025-01-22T20:11:05.4174456Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4174577Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4174880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4175003Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4175216Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4175306Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4175565Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4175651Z     return self._get_value(key)
2025-01-22T20:11:05.4175912Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4176003Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4176113Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4176117Z 
2025-01-22T20:11:05.4176270Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4176482Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4176554Z        't046000', 't048000'],
2025-01-22T20:11:05.4176633Z       dtype='object')
2025-01-22T20:11:05.4176704Z key = 'cups'
2025-01-22T20:11:05.4176708Z 
2025-01-22T20:11:05.4176791Z     def get_loc(self, key):
2025-01-22T20:11:05.4176858Z         """
2025-01-22T20:11:05.4177018Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4177082Z     
2025-01-22T20:11:05.4177159Z         Parameters
2025-01-22T20:11:05.4177237Z         ----------
2025-01-22T20:11:05.4177312Z         key : label
2025-01-22T20:11:05.4177381Z     
2025-01-22T20:11:05.4177449Z         Returns
2025-01-22T20:11:05.4177522Z         -------
2025-01-22T20:11:05.4177661Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4177731Z     
2025-01-22T20:11:05.4177800Z         Examples
2025-01-22T20:11:05.4177874Z         --------
2025-01-22T20:11:05.4177972Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4178064Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4178131Z         1
2025-01-22T20:11:05.4178203Z     
2025-01-22T20:11:05.4178305Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4178401Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4178476Z         slice(1, 3, None)
2025-01-22T20:11:05.4178547Z     
2025-01-22T20:11:05.4178657Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4178753Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4178965Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4179032Z         """
2025-01-22T20:11:05.4179137Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4179206Z         try:
2025-01-22T20:11:05.4179308Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4179390Z         except KeyError as err:
2025-01-22T20:11:05.4179491Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4179687Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4179813Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4179881Z             ):
2025-01-22T20:11:05.4179978Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4180064Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4180151Z E           KeyError: 'cups'
2025-01-22T20:11:05.4180155Z 
2025-01-22T20:11:05.4180435Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4180736Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_rad] _
2025-01-22T20:11:05.4180740Z 
2025-01-22T20:11:05.4180901Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4181109Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4181191Z        't046000', 't048000'],
2025-01-22T20:11:05.4181265Z       dtype='object')
2025-01-22T20:11:05.4181340Z key = 'cups'
2025-01-22T20:11:05.4181344Z 
2025-01-22T20:11:05.4181423Z     def get_loc(self, key):
2025-01-22T20:11:05.4181495Z         """
2025-01-22T20:11:05.4181652Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4181724Z     
2025-01-22T20:11:05.4181805Z         Parameters
2025-01-22T20:11:05.4181875Z         ----------
2025-01-22T20:11:05.4181950Z         key : label
2025-01-22T20:11:05.4182019Z     
2025-01-22T20:11:05.4182092Z         Returns
2025-01-22T20:11:05.4182162Z         -------
2025-01-22T20:11:05.4182295Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4182361Z     
2025-01-22T20:11:05.4182437Z         Examples
2025-01-22T20:11:05.4182507Z         --------
2025-01-22T20:11:05.4182607Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4182693Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4182768Z         1
2025-01-22T20:11:05.4182834Z     
2025-01-22T20:11:05.4182937Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4183022Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4183101Z         slice(1, 3, None)
2025-01-22T20:11:05.4183166Z     
2025-01-22T20:11:05.4183275Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4183370Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4183459Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4183632Z         """
2025-01-22T20:11:05.4183734Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4183807Z         try:
2025-01-22T20:11:05.4183903Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4183908Z 
2025-01-22T20:11:05.4184162Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4184276Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4184416Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4184482Z     ???
2025-01-22T20:11:05.4184614Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4184679Z     ???
2025-01-22T20:11:05.4184952Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4185023Z     ???
2025-01-22T20:11:05.4185129Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4185248Z 
2025-01-22T20:11:05.4185320Z >   ???
2025-01-22T20:11:05.4185397Z E   KeyError: 'cups'
2025-01-22T20:11:05.4185401Z 
2025-01-22T20:11:05.4185531Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4185536Z 
2025-01-22T20:11:05.4185703Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4185707Z 
2025-01-22T20:11:05.4186045Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4186364Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4186993Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4186998Z 
2025-01-22T20:11:05.4187089Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4187165Z     def plasma(
2025-01-22T20:11:05.4187240Z         self,
2025-01-22T20:11:05.4187321Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4187393Z         config,
2025-01-22T20:11:05.4187460Z     ):
2025-01-22T20:11:05.4187576Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4187670Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4187674Z 
2025-01-22T20:11:05.4187799Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4187906Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4188014Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4188100Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4188262Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4188364Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4188471Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4188556Z     return BasePlasma(
2025-01-22T20:11:05.4188640Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4188730Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4188819Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4188902Z     self.update(**kwargs)
2025-01-22T20:11:05.4188990Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4189114Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4189223Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4189331Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4189568Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4189718Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4189932Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4190027Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4190159Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4190327Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4190502Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4190675Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4190936Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4191110Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4191295Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4191401Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4191655Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4191782Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4192021Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4192197Z     return self.apply_standard()
2025-01-22T20:11:05.4192473Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4192596Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4192902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4193093Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4193309Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4193397Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4193782Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4193865Z     return self._get_value(key)
2025-01-22T20:11:05.4194127Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4194218Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4194337Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4194342Z 
2025-01-22T20:11:05.4194494Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4194705Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4194781Z        't046000', 't048000'],
2025-01-22T20:11:05.4194864Z       dtype='object')
2025-01-22T20:11:05.4194938Z key = 'cups'
2025-01-22T20:11:05.4194942Z 
2025-01-22T20:11:05.4195019Z     def get_loc(self, key):
2025-01-22T20:11:05.4195090Z         """
2025-01-22T20:11:05.4195246Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4195316Z     
2025-01-22T20:11:05.4195389Z         Parameters
2025-01-22T20:11:05.4195464Z         ----------
2025-01-22T20:11:05.4195534Z         key : label
2025-01-22T20:11:05.4195607Z     
2025-01-22T20:11:05.4195675Z         Returns
2025-01-22T20:11:05.4195747Z         -------
2025-01-22T20:11:05.4195874Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4195946Z     
2025-01-22T20:11:05.4196016Z         Examples
2025-01-22T20:11:05.4196092Z         --------
2025-01-22T20:11:05.4196189Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4196279Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4196349Z         1
2025-01-22T20:11:05.4196420Z     
2025-01-22T20:11:05.4196526Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4196613Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4196691Z         slice(1, 3, None)
2025-01-22T20:11:05.4196757Z     
2025-01-22T20:11:05.4196867Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4196956Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4197050Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4197121Z         """
2025-01-22T20:11:05.4197229Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4197297Z         try:
2025-01-22T20:11:05.4197401Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4197483Z         except KeyError as err:
2025-01-22T20:11:05.4197584Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4197680Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4197806Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4197881Z             ):
2025-01-22T20:11:05.4197973Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4198065Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4198144Z E           KeyError: 'cups'
2025-01-22T20:11:05.4198149Z 
2025-01-22T20:11:05.4198416Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4198848Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_electron] _
2025-01-22T20:11:05.4198852Z 
2025-01-22T20:11:05.4199011Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4199217Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4199295Z        't046000', 't048000'],
2025-01-22T20:11:05.4199524Z       dtype='object')
2025-01-22T20:11:05.4199603Z key = 'cups'
2025-01-22T20:11:05.4199607Z 
2025-01-22T20:11:05.4199690Z     def get_loc(self, key):
2025-01-22T20:11:05.4199756Z         """
2025-01-22T20:11:05.4199916Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4199982Z     
2025-01-22T20:11:05.4200059Z         Parameters
2025-01-22T20:11:05.4200131Z         ----------
2025-01-22T20:11:05.4200206Z         key : label
2025-01-22T20:11:05.4200271Z     
2025-01-22T20:11:05.4200350Z         Returns
2025-01-22T20:11:05.4200420Z         -------
2025-01-22T20:11:05.4200552Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4200616Z     
2025-01-22T20:11:05.4200688Z         Examples
2025-01-22T20:11:05.4200755Z         --------
2025-01-22T20:11:05.4200853Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4200935Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4201007Z         1
2025-01-22T20:11:05.4201077Z     
2025-01-22T20:11:05.4201177Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4201267Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4201341Z         slice(1, 3, None)
2025-01-22T20:11:05.4201412Z     
2025-01-22T20:11:05.4201519Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4201611Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4201699Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4201774Z         """
2025-01-22T20:11:05.4201877Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4201950Z         try:
2025-01-22T20:11:05.4202047Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4202051Z 
2025-01-22T20:11:05.4202298Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4202405Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4202547Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4202619Z     ???
2025-01-22T20:11:05.4202749Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4202820Z     ???
2025-01-22T20:11:05.4203088Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4203157Z     ???
2025-01-22T20:11:05.4203260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4203265Z 
2025-01-22T20:11:05.4203339Z >   ???
2025-01-22T20:11:05.4203416Z E   KeyError: 'cups'
2025-01-22T20:11:05.4203420Z 
2025-01-22T20:11:05.4203650Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4203655Z 
2025-01-22T20:11:05.4203822Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4203830Z 
2025-01-22T20:11:05.4204051Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4204373Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4204992Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4204997Z 
2025-01-22T20:11:05.4205090Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4205161Z     def plasma(
2025-01-22T20:11:05.4205351Z         self,
2025-01-22T20:11:05.4205432Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4205504Z         config,
2025-01-22T20:11:05.4205570Z     ):
2025-01-22T20:11:05.4205722Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4205818Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4205822Z 
2025-01-22T20:11:05.4205941Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4206145Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4206249Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4206337Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4206500Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4206603Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4206711Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4206793Z     return BasePlasma(
2025-01-22T20:11:05.4206882Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4206971Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4207058Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4207141Z     self.update(**kwargs)
2025-01-22T20:11:05.4207232Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4207350Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4207462Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4207565Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4207802Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4207952Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4208163Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4208257Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4208388Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4208556Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4208727Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4208905Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4209160Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4209334Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4209525Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4209629Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4209879Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4210005Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4210241Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4210337Z     return self.apply_standard()
2025-01-22T20:11:05.4210611Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4210733Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4211040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4211156Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4211376Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4211462Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4211729Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4211812Z     return self._get_value(key)
2025-01-22T20:11:05.4212074Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4212265Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4212375Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4212379Z 
2025-01-22T20:11:05.4212536Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4212744Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4212820Z        't046000', 't048000'],
2025-01-22T20:11:05.4212964Z       dtype='object')
2025-01-22T20:11:05.4213043Z key = 'cups'
2025-01-22T20:11:05.4213047Z 
2025-01-22T20:11:05.4213126Z     def get_loc(self, key):
2025-01-22T20:11:05.4213198Z         """
2025-01-22T20:11:05.4213352Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4213423Z     
2025-01-22T20:11:05.4213595Z         Parameters
2025-01-22T20:11:05.4213671Z         ----------
2025-01-22T20:11:05.4213742Z         key : label
2025-01-22T20:11:05.4213811Z     
2025-01-22T20:11:05.4213883Z         Returns
2025-01-22T20:11:05.4213958Z         -------
2025-01-22T20:11:05.4214087Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4214159Z     
2025-01-22T20:11:05.4214233Z         Examples
2025-01-22T20:11:05.4214302Z         --------
2025-01-22T20:11:05.4214403Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4214487Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4214558Z         1
2025-01-22T20:11:05.4214627Z     
2025-01-22T20:11:05.4214733Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4214822Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4214901Z         slice(1, 3, None)
2025-01-22T20:11:05.4214967Z     
2025-01-22T20:11:05.4215077Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4215166Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4215260Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4215330Z         """
2025-01-22T20:11:05.4215437Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4215506Z         try:
2025-01-22T20:11:05.4215608Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4215698Z         except KeyError as err:
2025-01-22T20:11:05.4215794Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4215897Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4216015Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4216090Z             ):
2025-01-22T20:11:05.4216180Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4216269Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4216348Z E           KeyError: 'cups'
2025-01-22T20:11:05.4216352Z 
2025-01-22T20:11:05.4216619Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4216953Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_boltzmann_factor] _
2025-01-22T20:11:05.4216965Z 
2025-01-22T20:11:05.4217116Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4217325Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4217424Z        't046000', 't048000'],
2025-01-22T20:11:05.4217503Z       dtype='object')
2025-01-22T20:11:05.4217578Z key = 'cups'
2025-01-22T20:11:05.4217581Z 
2025-01-22T20:11:05.4217664Z     def get_loc(self, key):
2025-01-22T20:11:05.4217731Z         """
2025-01-22T20:11:05.4217891Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4217955Z     
2025-01-22T20:11:05.4218033Z         Parameters
2025-01-22T20:11:05.4218102Z         ----------
2025-01-22T20:11:05.4218178Z         key : label
2025-01-22T20:11:05.4218244Z     
2025-01-22T20:11:05.4218317Z         Returns
2025-01-22T20:11:05.4218509Z         -------
2025-01-22T20:11:05.4218644Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4218715Z     
2025-01-22T20:11:05.4218784Z         Examples
2025-01-22T20:11:05.4218861Z         --------
2025-01-22T20:11:05.4218960Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4219048Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4219117Z         1
2025-01-22T20:11:05.4219187Z     
2025-01-22T20:11:05.4219385Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4219479Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4219555Z         slice(1, 3, None)
2025-01-22T20:11:05.4219624Z     
2025-01-22T20:11:05.4219729Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4219825Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4219913Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4219986Z         """
2025-01-22T20:11:05.4220084Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4220161Z         try:
2025-01-22T20:11:05.4220265Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4220269Z 
2025-01-22T20:11:05.4220510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4220621Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4220756Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4220831Z     ???
2025-01-22T20:11:05.4220959Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4221031Z     ???
2025-01-22T20:11:05.4221298Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4221368Z     ???
2025-01-22T20:11:05.4221471Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4221476Z 
2025-01-22T20:11:05.4221548Z >   ???
2025-01-22T20:11:05.4221628Z E   KeyError: 'cups'
2025-01-22T20:11:05.4221637Z 
2025-01-22T20:11:05.4221763Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4221767Z 
2025-01-22T20:11:05.4221940Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4221944Z 
2025-01-22T20:11:05.4222163Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4222484Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4223107Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4223116Z 
2025-01-22T20:11:05.4223204Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4223281Z     def plasma(
2025-01-22T20:11:05.4223350Z         self,
2025-01-22T20:11:05.4223436Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4223626Z         config,
2025-01-22T20:11:05.4223699Z     ):
2025-01-22T20:11:05.4223810Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4223908Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4223912Z 
2025-01-22T20:11:05.4224033Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4224146Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4224251Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4224337Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4224504Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4224607Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4224721Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4224799Z     return BasePlasma(
2025-01-22T20:11:05.4224890Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4225095Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4225188Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4225265Z     self.update(**kwargs)
2025-01-22T20:11:05.4225357Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4225476Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4225590Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4225692Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4226043Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4226198Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4226414Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4226513Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4226639Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4226813Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4226985Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4227160Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4227416Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4227590Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4227771Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4227875Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4228126Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4228253Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4228500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4228587Z     return self.apply_standard()
2025-01-22T20:11:05.4228869Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4228985Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4229292Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4229408Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4229628Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4229712Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4229979Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4230061Z     return self._get_value(key)
2025-01-22T20:11:05.4230321Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4230412Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4230523Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4230527Z 
2025-01-22T20:11:05.4230687Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4230894Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4230971Z        't046000', 't048000'],
2025-01-22T20:11:05.4231045Z       dtype='object')
2025-01-22T20:11:05.4231124Z key = 'cups'
2025-01-22T20:11:05.4231129Z 
2025-01-22T20:11:05.4231207Z     def get_loc(self, key):
2025-01-22T20:11:05.4231281Z         """
2025-01-22T20:11:05.4231436Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4231508Z     
2025-01-22T20:11:05.4231585Z         Parameters
2025-01-22T20:11:05.4231656Z         ----------
2025-01-22T20:11:05.4231735Z         key : label
2025-01-22T20:11:05.4231800Z     
2025-01-22T20:11:05.4231873Z         Returns
2025-01-22T20:11:05.4232029Z         -------
2025-01-22T20:11:05.4232164Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4232230Z     
2025-01-22T20:11:05.4232305Z         Examples
2025-01-22T20:11:05.4232373Z         --------
2025-01-22T20:11:05.4232473Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4232561Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4232632Z         1
2025-01-22T20:11:05.4232698Z     
2025-01-22T20:11:05.4232875Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4232965Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4233046Z         slice(1, 3, None)
2025-01-22T20:11:05.4233113Z     
2025-01-22T20:11:05.4233224Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4233319Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4233410Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4233480Z         """
2025-01-22T20:11:05.4233700Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4233774Z         try:
2025-01-22T20:11:05.4233872Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4233957Z         except KeyError as err:
2025-01-22T20:11:05.4234056Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4234166Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4234284Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4234360Z             ):
2025-01-22T20:11:05.4234450Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4234541Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4234619Z E           KeyError: 'cups'
2025-01-22T20:11:05.4234623Z 
2025-01-22T20:11:05.4234892Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4235218Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-partition_function] _
2025-01-22T20:11:05.4235225Z 
2025-01-22T20:11:05.4235378Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4235590Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4235664Z        't046000', 't048000'],
2025-01-22T20:11:05.4235743Z       dtype='object')
2025-01-22T20:11:05.4235813Z key = 'cups'
2025-01-22T20:11:05.4235817Z 
2025-01-22T20:11:05.4235902Z     def get_loc(self, key):
2025-01-22T20:11:05.4235969Z         """
2025-01-22T20:11:05.4236129Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4236202Z     
2025-01-22T20:11:05.4236274Z         Parameters
2025-01-22T20:11:05.4236348Z         ----------
2025-01-22T20:11:05.4236419Z         key : label
2025-01-22T20:11:05.4236490Z     
2025-01-22T20:11:05.4236559Z         Returns
2025-01-22T20:11:05.4236634Z         -------
2025-01-22T20:11:05.4236766Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4236838Z     
2025-01-22T20:11:05.4236908Z         Examples
2025-01-22T20:11:05.4236981Z         --------
2025-01-22T20:11:05.4237075Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4237164Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4237231Z         1
2025-01-22T20:11:05.4237301Z     
2025-01-22T20:11:05.4237399Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4237495Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4237570Z         slice(1, 3, None)
2025-01-22T20:11:05.4237642Z     
2025-01-22T20:11:05.4237746Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4237841Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4237935Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4238002Z         """
2025-01-22T20:11:05.4238106Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4238311Z         try:
2025-01-22T20:11:05.4238412Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4238417Z 
2025-01-22T20:11:05.4238659Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4238770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4238906Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4238977Z     ???
2025-01-22T20:11:05.4239204Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4239278Z     ???
2025-01-22T20:11:05.4239546Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4239618Z     ???
2025-01-22T20:11:05.4239726Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4239731Z 
2025-01-22T20:11:05.4239796Z >   ???
2025-01-22T20:11:05.4239877Z E   KeyError: 'cups'
2025-01-22T20:11:05.4239885Z 
2025-01-22T20:11:05.4240011Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4240015Z 
2025-01-22T20:11:05.4240188Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4240192Z 
2025-01-22T20:11:05.4240410Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4240733Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4241357Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4241362Z 
2025-01-22T20:11:05.4241449Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4241527Z     def plasma(
2025-01-22T20:11:05.4241594Z         self,
2025-01-22T20:11:05.4241679Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4241751Z         config,
2025-01-22T20:11:05.4247466Z     ):
2025-01-22T20:11:05.4247744Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4247937Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4247945Z 
2025-01-22T20:11:05.4248163Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4248344Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4248529Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4248667Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4248941Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4249094Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4249272Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4249395Z     return BasePlasma(
2025-01-22T20:11:05.4249528Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4249667Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4249820Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4249945Z     self.update(**kwargs)
2025-01-22T20:11:05.4250088Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4250283Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4250467Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4250631Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4251006Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4251269Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4251615Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4251774Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4251976Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4252241Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4252729Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4253006Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4253472Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4253979Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4254277Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4254611Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4255035Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4255231Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4255623Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4255760Z     return self.apply_standard()
2025-01-22T20:11:05.4256197Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4256394Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4256891Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4257073Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4257423Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4257567Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4258004Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4258137Z     return self._get_value(key)
2025-01-22T20:11:05.4258534Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4258677Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4258857Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4258871Z 
2025-01-22T20:11:05.4259124Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4259457Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4259585Z        't046000', 't048000'],
2025-01-22T20:11:05.4259703Z       dtype='object')
2025-01-22T20:11:05.4259820Z key = 'cups'
2025-01-22T20:11:05.4259830Z 
2025-01-22T20:11:05.4259967Z     def get_loc(self, key):
2025-01-22T20:11:05.4260078Z         """
2025-01-22T20:11:05.4260350Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4260451Z     
2025-01-22T20:11:05.4260573Z         Parameters
2025-01-22T20:11:05.4260688Z         ----------
2025-01-22T20:11:05.4260811Z         key : label
2025-01-22T20:11:05.4260920Z     
2025-01-22T20:11:05.4261031Z         Returns
2025-01-22T20:11:05.4261141Z         -------
2025-01-22T20:11:05.4261367Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4261473Z     
2025-01-22T20:11:05.4261596Z         Examples
2025-01-22T20:11:05.4261709Z         --------
2025-01-22T20:11:05.4261878Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4262013Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4262126Z         1
2025-01-22T20:11:05.4262231Z     
2025-01-22T20:11:05.4262409Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4262550Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4262672Z         slice(1, 3, None)
2025-01-22T20:11:05.4262783Z     
2025-01-22T20:11:05.4262955Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4263102Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4263247Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4263364Z         """
2025-01-22T20:11:05.4263669Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4263954Z         try:
2025-01-22T20:11:05.4264111Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4264253Z         except KeyError as err:
2025-01-22T20:11:05.4264403Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4264566Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4264754Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4264870Z             ):
2025-01-22T20:11:05.4265169Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4265321Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4265454Z E           KeyError: 'cups'
2025-01-22T20:11:05.4265461Z 
2025-01-22T20:11:05.4265910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4266428Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-excitation_energy] _
2025-01-22T20:11:05.4266442Z 
2025-01-22T20:11:05.4287421Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4287707Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4287786Z        't046000', 't048000'],
2025-01-22T20:11:05.4287866Z       dtype='object')
2025-01-22T20:11:05.4287940Z key = 'cups'
2025-01-22T20:11:05.4287946Z 
2025-01-22T20:11:05.4288027Z     def get_loc(self, key):
2025-01-22T20:11:05.4288106Z         """
2025-01-22T20:11:05.4288281Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4288347Z     
2025-01-22T20:11:05.4288419Z         Parameters
2025-01-22T20:11:05.4288494Z         ----------
2025-01-22T20:11:05.4288563Z         key : label
2025-01-22T20:11:05.4288627Z     
2025-01-22T20:11:05.4288693Z         Returns
2025-01-22T20:11:05.4288763Z         -------
2025-01-22T20:11:05.4288906Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4288978Z     
2025-01-22T20:11:05.4289046Z         Examples
2025-01-22T20:11:05.4289116Z         --------
2025-01-22T20:11:05.4289218Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4289307Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4289372Z         1
2025-01-22T20:11:05.4289437Z     
2025-01-22T20:11:05.4289546Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4289636Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4289712Z         slice(1, 3, None)
2025-01-22T20:11:05.4289775Z     
2025-01-22T20:11:05.4289887Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4289978Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4290069Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4290135Z         """
2025-01-22T20:11:05.4290237Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4290304Z         try:
2025-01-22T20:11:05.4290409Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4290414Z 
2025-01-22T20:11:05.4290677Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4290793Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4290938Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4291004Z     ???
2025-01-22T20:11:05.4291147Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4291212Z     ???
2025-01-22T20:11:05.4291488Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4291552Z     ???
2025-01-22T20:11:05.4291662Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4291666Z 
2025-01-22T20:11:05.4291728Z >   ???
2025-01-22T20:11:05.4291806Z E   KeyError: 'cups'
2025-01-22T20:11:05.4291811Z 
2025-01-22T20:11:05.4292118Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4292123Z 
2025-01-22T20:11:05.4292293Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4292298Z 
2025-01-22T20:11:05.4292522Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4292844Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4293762Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4293771Z 
2025-01-22T20:11:05.4293874Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4293950Z     def plasma(
2025-01-22T20:11:05.4294017Z         self,
2025-01-22T20:11:05.4294100Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4294171Z         config,
2025-01-22T20:11:05.4294238Z     ):
2025-01-22T20:11:05.4294355Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4294456Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4294461Z 
2025-01-22T20:11:05.4294590Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4294698Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4294805Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4294892Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4295062Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4295161Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4295271Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4295346Z     return BasePlasma(
2025-01-22T20:11:05.4295435Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4295522Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4295614Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4295693Z     self.update(**kwargs)
2025-01-22T20:11:05.4295781Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4295905Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4296011Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4296116Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4296351Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4296511Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4296718Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4296815Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4296944Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4297116Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4297287Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4297467Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4297731Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4297904Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4298086Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4298195Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4298468Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4298597Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4298850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4298935Z     return self.apply_standard()
2025-01-22T20:11:05.4299227Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4299468Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4299800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4299924Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4300147Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4300319Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4300601Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4300683Z     return self._get_value(key)
2025-01-22T20:11:05.4300946Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4301036Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4301147Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4301154Z 
2025-01-22T20:11:05.4301316Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4301527Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4301605Z        't046000', 't048000'],
2025-01-22T20:11:05.4301681Z       dtype='object')
2025-01-22T20:11:05.4301758Z key = 'cups'
2025-01-22T20:11:05.4301761Z 
2025-01-22T20:11:05.4301844Z     def get_loc(self, key):
2025-01-22T20:11:05.4301915Z         """
2025-01-22T20:11:05.4302075Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4302145Z     
2025-01-22T20:11:05.4302226Z         Parameters
2025-01-22T20:11:05.4302300Z         ----------
2025-01-22T20:11:05.4302374Z         key : label
2025-01-22T20:11:05.4302439Z     
2025-01-22T20:11:05.4302512Z         Returns
2025-01-22T20:11:05.4302583Z         -------
2025-01-22T20:11:05.4302719Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4302789Z     
2025-01-22T20:11:05.4302862Z         Examples
2025-01-22T20:11:05.4302932Z         --------
2025-01-22T20:11:05.4303036Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4303122Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4303195Z         1
2025-01-22T20:11:05.4303259Z     
2025-01-22T20:11:05.4303369Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4303460Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4303709Z         slice(1, 3, None)
2025-01-22T20:11:05.4303778Z     
2025-01-22T20:11:05.4303893Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4303990Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4304081Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4304153Z         """
2025-01-22T20:11:05.4304255Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4304328Z         try:
2025-01-22T20:11:05.4304431Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4304518Z         except KeyError as err:
2025-01-22T20:11:05.4304614Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4304719Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4304836Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4304909Z             ):
2025-01-22T20:11:05.4305006Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4305100Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4305180Z E           KeyError: 'cups'
2025-01-22T20:11:05.4305184Z 
2025-01-22T20:11:05.4305459Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4305764Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] _
2025-01-22T20:11:05.4305768Z 
2025-01-22T20:11:05.4305927Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4306260Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4306334Z        't046000', 't048000'],
2025-01-22T20:11:05.4306412Z       dtype='object')
2025-01-22T20:11:05.4306484Z key = 'cups'
2025-01-22T20:11:05.4306488Z 
2025-01-22T20:11:05.4306572Z     def get_loc(self, key):
2025-01-22T20:11:05.4306639Z         """
2025-01-22T20:11:05.4306904Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4306973Z     
2025-01-22T20:11:05.4307050Z         Parameters
2025-01-22T20:11:05.4307126Z         ----------
2025-01-22T20:11:05.4307197Z         key : label
2025-01-22T20:11:05.4307268Z     
2025-01-22T20:11:05.4307335Z         Returns
2025-01-22T20:11:05.4307409Z         -------
2025-01-22T20:11:05.4307539Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4307614Z     
2025-01-22T20:11:05.4307684Z         Examples
2025-01-22T20:11:05.4307758Z         --------
2025-01-22T20:11:05.4307853Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4307943Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4308009Z         1
2025-01-22T20:11:05.4308079Z     
2025-01-22T20:11:05.4308179Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4308271Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4308349Z         slice(1, 3, None)
2025-01-22T20:11:05.4308421Z     
2025-01-22T20:11:05.4308528Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4308624Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4308718Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4308787Z         """
2025-01-22T20:11:05.4308897Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4308965Z         try:
2025-01-22T20:11:05.4309067Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4309075Z 
2025-01-22T20:11:05.4309320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4309434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4309574Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4309647Z     ???
2025-01-22T20:11:05.4309778Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4309852Z     ???
2025-01-22T20:11:05.4310129Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4310201Z     ???
2025-01-22T20:11:05.4310317Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4310321Z 
2025-01-22T20:11:05.4310387Z >   ???
2025-01-22T20:11:05.4310469Z E   KeyError: 'cups'
2025-01-22T20:11:05.4310473Z 
2025-01-22T20:11:05.4310603Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4310610Z 
2025-01-22T20:11:05.4310786Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4310791Z 
2025-01-22T20:11:05.4311013Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4311338Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4311966Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4311971Z 
2025-01-22T20:11:05.4312060Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4312138Z     def plasma(
2025-01-22T20:11:05.4312206Z         self,
2025-01-22T20:11:05.4312295Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4312363Z         config,
2025-01-22T20:11:05.4312434Z     ):
2025-01-22T20:11:05.4312634Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4312735Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4312739Z 
2025-01-22T20:11:05.4312861Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4312975Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4313086Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4313168Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4313409Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4313669Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4313793Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4313873Z     return BasePlasma(
2025-01-22T20:11:05.4313963Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4314051Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4314144Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4314230Z     self.update(**kwargs)
2025-01-22T20:11:05.4314324Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4314446Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4314564Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4314668Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4314909Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4315072Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4315282Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4315382Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4315510Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4315684Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4315854Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4316036Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4316293Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4316469Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4316648Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4316760Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4317022Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4317146Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4317391Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4317479Z     return self.apply_standard()
2025-01-22T20:11:05.4317760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4317882Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4318189Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4318308Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4318526Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4318617Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4318883Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4318972Z     return self._get_value(key)
2025-01-22T20:11:05.4319228Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4319319Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4319428Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4319432Z 
2025-01-22T20:11:05.4319722Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4319934Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4320013Z        't046000', 't048000'],
2025-01-22T20:11:05.4320089Z       dtype='object')
2025-01-22T20:11:05.4320166Z key = 'cups'
2025-01-22T20:11:05.4320169Z 
2025-01-22T20:11:05.4320255Z     def get_loc(self, key):
2025-01-22T20:11:05.4320321Z         """
2025-01-22T20:11:05.4320608Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4320677Z     
2025-01-22T20:11:05.4320756Z         Parameters
2025-01-22T20:11:05.4320828Z         ----------
2025-01-22T20:11:05.4320906Z         key : label
2025-01-22T20:11:05.4320971Z     
2025-01-22T20:11:05.4321044Z         Returns
2025-01-22T20:11:05.4321113Z         -------
2025-01-22T20:11:05.4321252Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4321323Z     
2025-01-22T20:11:05.4321399Z         Examples
2025-01-22T20:11:05.4321468Z         --------
2025-01-22T20:11:05.4321571Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4321656Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4321728Z         1
2025-01-22T20:11:05.4321793Z     
2025-01-22T20:11:05.4321902Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4321995Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4322106Z         slice(1, 3, None)
2025-01-22T20:11:05.4322176Z     
2025-01-22T20:11:05.4322285Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4322379Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4322468Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4322539Z         """
2025-01-22T20:11:05.4322639Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4322711Z         try:
2025-01-22T20:11:05.4322810Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4322915Z         except KeyError as err:
2025-01-22T20:11:05.4323017Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4323123Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4323242Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4323313Z             ):
2025-01-22T20:11:05.4323410Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4323644Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4323759Z E           KeyError: 'cups'
2025-01-22T20:11:05.4323764Z 
2025-01-22T20:11:05.4324036Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4324377Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] _
2025-01-22T20:11:05.4324382Z 
2025-01-22T20:11:05.4324536Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4324753Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4324827Z        't046000', 't048000'],
2025-01-22T20:11:05.4324906Z       dtype='object')
2025-01-22T20:11:05.4324982Z key = 'cups'
2025-01-22T20:11:05.4324986Z 
2025-01-22T20:11:05.4325065Z     def get_loc(self, key):
2025-01-22T20:11:05.4325136Z         """
2025-01-22T20:11:05.4325302Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4325372Z     
2025-01-22T20:11:05.4325443Z         Parameters
2025-01-22T20:11:05.4325518Z         ----------
2025-01-22T20:11:05.4325589Z         key : label
2025-01-22T20:11:05.4325661Z     
2025-01-22T20:11:05.4325731Z         Returns
2025-01-22T20:11:05.4325804Z         -------
2025-01-22T20:11:05.4325934Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4326006Z     
2025-01-22T20:11:05.4326075Z         Examples
2025-01-22T20:11:05.4326298Z         --------
2025-01-22T20:11:05.4326394Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4326485Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4326552Z         1
2025-01-22T20:11:05.4326625Z     
2025-01-22T20:11:05.4326734Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4326821Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4326901Z         slice(1, 3, None)
2025-01-22T20:11:05.4326967Z     
2025-01-22T20:11:05.4327179Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4327271Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4327366Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4327434Z         """
2025-01-22T20:11:05.4327538Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4327606Z         try:
2025-01-22T20:11:05.4327710Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4327718Z 
2025-01-22T20:11:05.4327967Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4328082Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4328224Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4328291Z     ???
2025-01-22T20:11:05.4328423Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4328490Z     ???
2025-01-22T20:11:05.4328780Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4328848Z     ???
2025-01-22T20:11:05.4328963Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4328967Z 
2025-01-22T20:11:05.4329033Z >   ???
2025-01-22T20:11:05.4329115Z E   KeyError: 'cups'
2025-01-22T20:11:05.4329119Z 
2025-01-22T20:11:05.4329248Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4329252Z 
2025-01-22T20:11:05.4329432Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4329436Z 
2025-01-22T20:11:05.4329662Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4329983Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4330611Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4330616Z 
2025-01-22T20:11:05.4330705Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4330785Z     def plasma(
2025-01-22T20:11:05.4330853Z         self,
2025-01-22T20:11:05.4330939Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4331008Z         config,
2025-01-22T20:11:05.4331079Z     ):
2025-01-22T20:11:05.4331198Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4331298Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4331303Z 
2025-01-22T20:11:05.4331433Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4331543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4331662Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4331756Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4331936Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4332036Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4332152Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4332230Z     return BasePlasma(
2025-01-22T20:11:05.4332320Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4332407Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4332501Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4332587Z     self.update(**kwargs)
2025-01-22T20:11:05.4332764Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4332890Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4333001Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4333107Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4333342Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4333666Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4334046Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4334154Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4334284Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4334458Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4334629Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4334807Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4335076Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4335248Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4335431Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4335534Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4335798Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4335924Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4336169Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4336256Z     return self.apply_standard()
2025-01-22T20:11:05.4336536Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4336661Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4336968Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4337090Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4337307Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4337397Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4337658Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4337745Z     return self._get_value(key)
2025-01-22T20:11:05.4338001Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4338092Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4338200Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4338204Z 
2025-01-22T20:11:05.4338364Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4338582Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4338657Z        't046000', 't048000'],
2025-01-22T20:11:05.4338739Z       dtype='object')
2025-01-22T20:11:05.4338812Z key = 'cups'
2025-01-22T20:11:05.4338816Z 
2025-01-22T20:11:05.4338900Z     def get_loc(self, key):
2025-01-22T20:11:05.4338970Z         """
2025-01-22T20:11:05.4339137Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4339202Z     
2025-01-22T20:11:05.4339280Z         Parameters
2025-01-22T20:11:05.4339351Z         ----------
2025-01-22T20:11:05.4339427Z         key : label
2025-01-22T20:11:05.4339492Z     
2025-01-22T20:11:05.4339570Z         Returns
2025-01-22T20:11:05.4339640Z         -------
2025-01-22T20:11:05.4339777Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4339848Z     
2025-01-22T20:11:05.4340033Z         Examples
2025-01-22T20:11:05.4340109Z         --------
2025-01-22T20:11:05.4340207Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4340295Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4340362Z         1
2025-01-22T20:11:05.4340434Z     
2025-01-22T20:11:05.4340539Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4340631Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4340706Z         slice(1, 3, None)
2025-01-22T20:11:05.4340848Z     
2025-01-22T20:11:05.4340956Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4341051Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4341141Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4341213Z         """
2025-01-22T20:11:05.4341314Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4341386Z         try:
2025-01-22T20:11:05.4341486Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4341578Z         except KeyError as err:
2025-01-22T20:11:05.4341680Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4341781Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4341904Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4341972Z             ):
2025-01-22T20:11:05.4342068Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4342154Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4342243Z E           KeyError: 'cups'
2025-01-22T20:11:05.4342247Z 
2025-01-22T20:11:05.4342512Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4342855Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] _
2025-01-22T20:11:05.4342860Z 
2025-01-22T20:11:05.4343018Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4343229Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4343308Z        't046000', 't048000'],
2025-01-22T20:11:05.4343383Z       dtype='object')
2025-01-22T20:11:05.4343457Z key = 'cups'
2025-01-22T20:11:05.4343461Z 
2025-01-22T20:11:05.4343665Z     def get_loc(self, key):
2025-01-22T20:11:05.4343738Z         """
2025-01-22T20:11:05.4343902Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4343974Z     
2025-01-22T20:11:05.4344045Z         Parameters
2025-01-22T20:11:05.4344121Z         ----------
2025-01-22T20:11:05.4344192Z         key : label
2025-01-22T20:11:05.4344263Z     
2025-01-22T20:11:05.4344331Z         Returns
2025-01-22T20:11:05.4344405Z         -------
2025-01-22T20:11:05.4344535Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4344606Z     
2025-01-22T20:11:05.4344681Z         Examples
2025-01-22T20:11:05.4344753Z         --------
2025-01-22T20:11:05.4344856Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4344940Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4345012Z         1
2025-01-22T20:11:05.4345077Z     
2025-01-22T20:11:05.4345181Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4345267Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4345345Z         slice(1, 3, None)
2025-01-22T20:11:05.4345411Z     
2025-01-22T20:11:05.4345529Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4345620Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4345714Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4345780Z         """
2025-01-22T20:11:05.4345884Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4345953Z         try:
2025-01-22T20:11:05.4346054Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4346058Z 
2025-01-22T20:11:05.4346305Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4346554Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4346695Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4346761Z     ???
2025-01-22T20:11:05.4346894Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4346961Z     ???
2025-01-22T20:11:05.4347336Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4347405Z     ???
2025-01-22T20:11:05.4347518Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4347522Z 
2025-01-22T20:11:05.4347587Z >   ???
2025-01-22T20:11:05.4347668Z E   KeyError: 'cups'
2025-01-22T20:11:05.4347672Z 
2025-01-22T20:11:05.4347806Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4347810Z 
2025-01-22T20:11:05.4347978Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4347987Z 
2025-01-22T20:11:05.4348211Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4348529Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4349159Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4349163Z 
2025-01-22T20:11:05.4349256Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4349329Z     def plasma(
2025-01-22T20:11:05.4349402Z         self,
2025-01-22T20:11:05.4349482Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4349555Z         config,
2025-01-22T20:11:05.4349621Z     ):
2025-01-22T20:11:05.4349739Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4349838Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4349842Z 
2025-01-22T20:11:05.4349967Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4350075Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4350185Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4350269Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4350443Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4350542Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4350658Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4350740Z     return BasePlasma(
2025-01-22T20:11:05.4350826Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4350916Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4351002Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4351087Z     self.update(**kwargs)
2025-01-22T20:11:05.4351177Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4351306Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4351416Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4351521Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4351750Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4351907Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4352119Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4352218Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4352349Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4352516Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4352690Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4352864Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4353212Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4353383Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4353684Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4353788Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4354159Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4354290Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4354538Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4354630Z     return self.apply_standard()
2025-01-22T20:11:05.4354904Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4355031Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4355339Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4355462Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4355676Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4355766Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4356032Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4356121Z     return self._get_value(key)
2025-01-22T20:11:05.4356382Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4356468Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4356581Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4356586Z 
2025-01-22T20:11:05.4356740Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4356958Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4357032Z        't046000', 't048000'],
2025-01-22T20:11:05.4357113Z       dtype='object')
2025-01-22T20:11:05.4357184Z key = 'cups'
2025-01-22T20:11:05.4357189Z 
2025-01-22T20:11:05.4357273Z     def get_loc(self, key):
2025-01-22T20:11:05.4357341Z         """
2025-01-22T20:11:05.4357508Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4357579Z     
2025-01-22T20:11:05.4357650Z         Parameters
2025-01-22T20:11:05.4357726Z         ----------
2025-01-22T20:11:05.4357798Z         key : label
2025-01-22T20:11:05.4357869Z     
2025-01-22T20:11:05.4357937Z         Returns
2025-01-22T20:11:05.4358011Z         -------
2025-01-22T20:11:05.4358141Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4358212Z     
2025-01-22T20:11:05.4358281Z         Examples
2025-01-22T20:11:05.4358358Z         --------
2025-01-22T20:11:05.4358456Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4358545Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4358613Z         1
2025-01-22T20:11:05.4358684Z     
2025-01-22T20:11:05.4358787Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4358879Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4358954Z         slice(1, 3, None)
2025-01-22T20:11:05.4359026Z     
2025-01-22T20:11:05.4359138Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4359234Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4359327Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4359395Z         """
2025-01-22T20:11:05.4359501Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4359569Z         try:
2025-01-22T20:11:05.4359674Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4359755Z         except KeyError as err:
2025-01-22T20:11:05.4359974Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4360074Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4360200Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4360268Z             ):
2025-01-22T20:11:05.4360364Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4360450Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4360535Z E           KeyError: 'cups'
2025-01-22T20:11:05.4360612Z 
2025-01-22T20:11:05.4360886Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4361196Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-atomic_mass] _
2025-01-22T20:11:05.4361200Z 
2025-01-22T20:11:05.4361356Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4361561Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4361644Z        't046000', 't048000'],
2025-01-22T20:11:05.4361718Z       dtype='object')
2025-01-22T20:11:05.4361794Z key = 'cups'
2025-01-22T20:11:05.4361798Z 
2025-01-22T20:11:05.4361878Z     def get_loc(self, key):
2025-01-22T20:11:05.4361949Z         """
2025-01-22T20:11:05.4362105Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4362176Z     
2025-01-22T20:11:05.4362256Z         Parameters
2025-01-22T20:11:05.4362330Z         ----------
2025-01-22T20:11:05.4362406Z         key : label
2025-01-22T20:11:05.4362470Z     
2025-01-22T20:11:05.4362546Z         Returns
2025-01-22T20:11:05.4362615Z         -------
2025-01-22T20:11:05.4362755Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4362820Z     
2025-01-22T20:11:05.4362894Z         Examples
2025-01-22T20:11:05.4362963Z         --------
2025-01-22T20:11:05.4363066Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4363153Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4363224Z         1
2025-01-22T20:11:05.4363290Z     
2025-01-22T20:11:05.4363394Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4363478Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4363677Z         slice(1, 3, None)
2025-01-22T20:11:05.4363747Z     
2025-01-22T20:11:05.4363860Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4363958Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4364050Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4364120Z         """
2025-01-22T20:11:05.4364220Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4364292Z         try:
2025-01-22T20:11:05.4364390Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4364394Z 
2025-01-22T20:11:05.4364650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4364764Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4364904Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4364971Z     ???
2025-01-22T20:11:05.4365104Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4365171Z     ???
2025-01-22T20:11:05.4365442Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4365520Z     ???
2025-01-22T20:11:05.4365625Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4365629Z 
2025-01-22T20:11:05.4365702Z >   ???
2025-01-22T20:11:05.4365780Z E   KeyError: 'cups'
2025-01-22T20:11:05.4365784Z 
2025-01-22T20:11:05.4365916Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4365920Z 
2025-01-22T20:11:05.4366087Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4366208Z 
2025-01-22T20:11:05.4366440Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4366758Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4367492Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4367497Z 
2025-01-22T20:11:05.4367597Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4367670Z     def plasma(
2025-01-22T20:11:05.4367743Z         self,
2025-01-22T20:11:05.4367823Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4367896Z         config,
2025-01-22T20:11:05.4367963Z     ):
2025-01-22T20:11:05.4368080Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4368174Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4368182Z 
2025-01-22T20:11:05.4368314Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4368426Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4368533Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4368622Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4368790Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4368897Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4369008Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4369091Z     return BasePlasma(
2025-01-22T20:11:05.4369177Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4369273Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4369363Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4369447Z     self.update(**kwargs)
2025-01-22T20:11:05.4369537Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4369663Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4369777Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4369885Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4370128Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4370281Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4370495Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4370593Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4370728Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4370894Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4371073Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4371246Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4371515Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4371690Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4371877Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4371987Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4372245Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4372378Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4372619Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4372710Z     return self.apply_standard()
2025-01-22T20:11:05.4372988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4373113Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4373417Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4373766Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4374019Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4374108Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4374379Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4374561Z     return self._get_value(key)
2025-01-22T20:11:05.4374830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4374916Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4375028Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4375033Z 
2025-01-22T20:11:05.4375186Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4375404Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4375482Z        't046000', 't048000'],
2025-01-22T20:11:05.4375562Z       dtype='object')
2025-01-22T20:11:05.4375639Z key = 'cups'
2025-01-22T20:11:05.4375644Z 
2025-01-22T20:11:05.4375722Z     def get_loc(self, key):
2025-01-22T20:11:05.4375794Z         """
2025-01-22T20:11:05.4375953Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4376024Z     
2025-01-22T20:11:05.4376100Z         Parameters
2025-01-22T20:11:05.4376178Z         ----------
2025-01-22T20:11:05.4376250Z         key : label
2025-01-22T20:11:05.4376320Z     
2025-01-22T20:11:05.4376389Z         Returns
2025-01-22T20:11:05.4376464Z         -------
2025-01-22T20:11:05.4376595Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4376666Z     
2025-01-22T20:11:05.4376739Z         Examples
2025-01-22T20:11:05.4376815Z         --------
2025-01-22T20:11:05.4376916Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4377007Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4377074Z         1
2025-01-22T20:11:05.4377146Z     
2025-01-22T20:11:05.4377254Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4377342Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4377421Z         slice(1, 3, None)
2025-01-22T20:11:05.4377486Z     
2025-01-22T20:11:05.4377602Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4377694Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4377789Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4377857Z         """
2025-01-22T20:11:05.4377961Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4378029Z         try:
2025-01-22T20:11:05.4378134Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4378216Z         except KeyError as err:
2025-01-22T20:11:05.4378318Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4378424Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4378549Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4378622Z             ):
2025-01-22T20:11:05.4378713Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4378804Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4378885Z E           KeyError: 'cups'
2025-01-22T20:11:05.4378889Z 
2025-01-22T20:11:05.4379168Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4379487Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ionization_data] _
2025-01-22T20:11:05.4379492Z 
2025-01-22T20:11:05.4379651Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4379854Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4380044Z        't046000', 't048000'],
2025-01-22T20:11:05.4380124Z       dtype='object')
2025-01-22T20:11:05.4380195Z key = 'cups'
2025-01-22T20:11:05.4380199Z 
2025-01-22T20:11:05.4380283Z     def get_loc(self, key):
2025-01-22T20:11:05.4380351Z         """
2025-01-22T20:11:05.4380514Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4380580Z     
2025-01-22T20:11:05.4380658Z         Parameters
2025-01-22T20:11:05.4380803Z         ----------
2025-01-22T20:11:05.4380881Z         key : label
2025-01-22T20:11:05.4380947Z     
2025-01-22T20:11:05.4381020Z         Returns
2025-01-22T20:11:05.4381089Z         -------
2025-01-22T20:11:05.4381223Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4381289Z     
2025-01-22T20:11:05.4381365Z         Examples
2025-01-22T20:11:05.4381434Z         --------
2025-01-22T20:11:05.4381537Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4381629Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4381706Z         1
2025-01-22T20:11:05.4381778Z     
2025-01-22T20:11:05.4381877Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4381969Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4382044Z         slice(1, 3, None)
2025-01-22T20:11:05.4382114Z     
2025-01-22T20:11:05.4382220Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4382321Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4382409Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4382483Z         """
2025-01-22T20:11:05.4382583Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4382655Z         try:
2025-01-22T20:11:05.4382753Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4382757Z 
2025-01-22T20:11:05.4383007Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4383119Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4383260Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4383333Z     ???
2025-01-22T20:11:05.4383466Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4383654Z     ???
2025-01-22T20:11:05.4383928Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4384001Z     ???
2025-01-22T20:11:05.4384110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4384114Z 
2025-01-22T20:11:05.4384187Z >   ???
2025-01-22T20:11:05.4384265Z E   KeyError: 'cups'
2025-01-22T20:11:05.4384269Z 
2025-01-22T20:11:05.4384401Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4384405Z 
2025-01-22T20:11:05.4384573Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4384582Z 
2025-01-22T20:11:05.4384808Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4385130Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4385750Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4385757Z 
2025-01-22T20:11:05.4385852Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4385925Z     def plasma(
2025-01-22T20:11:05.4386000Z         self,
2025-01-22T20:11:05.4386081Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4386158Z         config,
2025-01-22T20:11:05.4386224Z     ):
2025-01-22T20:11:05.4386342Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4386441Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4386564Z 
2025-01-22T20:11:05.4386689Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4386802Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4386906Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4386994Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4387159Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4387265Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4387472Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4387559Z     return BasePlasma(
2025-01-22T20:11:05.4387644Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4387735Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4387824Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4387908Z     self.update(**kwargs)
2025-01-22T20:11:05.4388000Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4388122Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4388241Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4388344Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4388580Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4388729Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4388945Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4389042Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4389176Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4389345Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4389523Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4389707Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4389963Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4390143Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4390321Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4390427Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4390678Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4390807Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4391047Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4391137Z     return self.apply_standard()
2025-01-22T20:11:05.4391412Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4391534Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4391843Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4391964Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4392181Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4392267Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4392533Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4392615Z     return self._get_value(key)
2025-01-22T20:11:05.4392878Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4392966Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4393077Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4393082Z 
2025-01-22T20:11:05.4393240Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4393449Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4393777Z        't046000', 't048000'],
2025-01-22T20:11:05.4393853Z       dtype='object')
2025-01-22T20:11:05.4393930Z key = 'cups'
2025-01-22T20:11:05.4393934Z 
2025-01-22T20:11:05.4394012Z     def get_loc(self, key):
2025-01-22T20:11:05.4394084Z         """
2025-01-22T20:11:05.4394242Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4394315Z     
2025-01-22T20:11:05.4394386Z         Parameters
2025-01-22T20:11:05.4394584Z         ----------
2025-01-22T20:11:05.4394658Z         key : label
2025-01-22T20:11:05.4394730Z     
2025-01-22T20:11:05.4394798Z         Returns
2025-01-22T20:11:05.4394873Z         -------
2025-01-22T20:11:05.4395009Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4395076Z     
2025-01-22T20:11:05.4395151Z         Examples
2025-01-22T20:11:05.4395221Z         --------
2025-01-22T20:11:05.4395323Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4395410Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4395482Z         1
2025-01-22T20:11:05.4395547Z     
2025-01-22T20:11:05.4395655Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4395742Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4395822Z         slice(1, 3, None)
2025-01-22T20:11:05.4395888Z     
2025-01-22T20:11:05.4395999Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4396093Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4396187Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4396254Z         """
2025-01-22T20:11:05.4396358Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4396430Z         try:
2025-01-22T20:11:05.4396535Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4396623Z         except KeyError as err:
2025-01-22T20:11:05.4396720Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4396831Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4396949Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4397028Z             ):
2025-01-22T20:11:05.4397118Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4397208Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4397289Z E           KeyError: 'cups'
2025-01-22T20:11:05.4397292Z 
2025-01-22T20:11:05.4397567Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4397851Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] _
2025-01-22T20:11:05.4397861Z 
2025-01-22T20:11:05.4398016Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4398224Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4398302Z        't046000', 't048000'],
2025-01-22T20:11:05.4398382Z       dtype='object')
2025-01-22T20:11:05.4398452Z key = 'cups'
2025-01-22T20:11:05.4398456Z 
2025-01-22T20:11:05.4398539Z     def get_loc(self, key):
2025-01-22T20:11:05.4398606Z         """
2025-01-22T20:11:05.4398766Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4398832Z     
2025-01-22T20:11:05.4398913Z         Parameters
2025-01-22T20:11:05.4398984Z         ----------
2025-01-22T20:11:05.4399063Z         key : label
2025-01-22T20:11:05.4399129Z     
2025-01-22T20:11:05.4399202Z         Returns
2025-01-22T20:11:05.4399270Z         -------
2025-01-22T20:11:05.4399403Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4399474Z     
2025-01-22T20:11:05.4399545Z         Examples
2025-01-22T20:11:05.4399619Z         --------
2025-01-22T20:11:05.4399715Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4399805Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4399980Z         1
2025-01-22T20:11:05.4400051Z     
2025-01-22T20:11:05.4400150Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4400240Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4400315Z         slice(1, 3, None)
2025-01-22T20:11:05.4400388Z     
2025-01-22T20:11:05.4400494Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4400589Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4400750Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4400825Z         """
2025-01-22T20:11:05.4400924Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4400998Z         try:
2025-01-22T20:11:05.4401100Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4401105Z 
2025-01-22T20:11:05.4401349Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4401463Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4401605Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4401679Z     ???
2025-01-22T20:11:05.4401808Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4401879Z     ???
2025-01-22T20:11:05.4402149Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4402221Z     ???
2025-01-22T20:11:05.4402329Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4402333Z 
2025-01-22T20:11:05.4402406Z >   ???
2025-01-22T20:11:05.4402486Z E   KeyError: 'cups'
2025-01-22T20:11:05.4402490Z 
2025-01-22T20:11:05.4402616Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4402621Z 
2025-01-22T20:11:05.4402790Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4402794Z 
2025-01-22T20:11:05.4403017Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4403341Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4404086Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4404096Z 
2025-01-22T20:11:05.4404189Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4404271Z     def plasma(
2025-01-22T20:11:05.4404339Z         self,
2025-01-22T20:11:05.4404426Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4404493Z         config,
2025-01-22T20:11:05.4404564Z     ):
2025-01-22T20:11:05.4404676Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4404773Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4404777Z 
2025-01-22T20:11:05.4404896Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4405010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4405113Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4405202Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4405366Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4405471Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4405588Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4405670Z     return BasePlasma(
2025-01-22T20:11:05.4405759Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4405846Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4405939Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4406018Z     self.update(**kwargs)
2025-01-22T20:11:05.4406114Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4406233Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4406345Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4406565Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4406807Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4406971Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4407183Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4407284Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4407511Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4407682Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4407852Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4408028Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4408286Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4408461Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4408641Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4408747Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4408998Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4409128Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4409375Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4409463Z     return self.apply_standard()
2025-01-22T20:11:05.4409742Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4409858Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4410167Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4410289Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4410507Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4410593Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4410856Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4410942Z     return self._get_value(key)
2025-01-22T20:11:05.4411204Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4411295Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4411401Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4411405Z 
2025-01-22T20:11:05.4411563Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4411772Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4411856Z        't046000', 't048000'],
2025-01-22T20:11:05.4411930Z       dtype='object')
2025-01-22T20:11:05.4412006Z key = 'cups'
2025-01-22T20:11:05.4412010Z 
2025-01-22T20:11:05.4412090Z     def get_loc(self, key):
2025-01-22T20:11:05.4412162Z         """
2025-01-22T20:11:05.4412316Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4412387Z     
2025-01-22T20:11:05.4412464Z         Parameters
2025-01-22T20:11:05.4412536Z         ----------
2025-01-22T20:11:05.4412615Z         key : label
2025-01-22T20:11:05.4412681Z     
2025-01-22T20:11:05.4412755Z         Returns
2025-01-22T20:11:05.4412825Z         -------
2025-01-22T20:11:05.4412957Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4413024Z     
2025-01-22T20:11:05.4413100Z         Examples
2025-01-22T20:11:05.4413170Z         --------
2025-01-22T20:11:05.4413272Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4413358Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4413610Z         1
2025-01-22T20:11:05.4413683Z     
2025-01-22T20:11:05.4413798Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4413891Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4413974Z         slice(1, 3, None)
2025-01-22T20:11:05.4414044Z     
2025-01-22T20:11:05.4414163Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4414261Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4414458Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4414534Z         """
2025-01-22T20:11:05.4414636Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4414714Z         try:
2025-01-22T20:11:05.4414814Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4414904Z         except KeyError as err:
2025-01-22T20:11:05.4415001Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4415107Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4415230Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4415306Z             ):
2025-01-22T20:11:05.4415398Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4415496Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4415577Z E           KeyError: 'cups'
2025-01-22T20:11:05.4415589Z 
2025-01-22T20:11:05.4415855Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4416168Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] _
2025-01-22T20:11:05.4416173Z 
2025-01-22T20:11:05.4416325Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4416536Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4416609Z        't046000', 't048000'],
2025-01-22T20:11:05.4416692Z       dtype='object')
2025-01-22T20:11:05.4416762Z key = 'cups'
2025-01-22T20:11:05.4416766Z 
2025-01-22T20:11:05.4416852Z     def get_loc(self, key):
2025-01-22T20:11:05.4416920Z         """
2025-01-22T20:11:05.4417081Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4417158Z     
2025-01-22T20:11:05.4417229Z         Parameters
2025-01-22T20:11:05.4417305Z         ----------
2025-01-22T20:11:05.4417377Z         key : label
2025-01-22T20:11:05.4417449Z     
2025-01-22T20:11:05.4417520Z         Returns
2025-01-22T20:11:05.4417596Z         -------
2025-01-22T20:11:05.4417723Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4417794Z     
2025-01-22T20:11:05.4417863Z         Examples
2025-01-22T20:11:05.4417939Z         --------
2025-01-22T20:11:05.4418038Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4418129Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4418196Z         1
2025-01-22T20:11:05.4418271Z     
2025-01-22T20:11:05.4418370Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4418462Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4418537Z         slice(1, 3, None)
2025-01-22T20:11:05.4418608Z     
2025-01-22T20:11:05.4418717Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4418813Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4418909Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4418981Z         """
2025-01-22T20:11:05.4419085Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4419154Z         try:
2025-01-22T20:11:05.4419256Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4419260Z 
2025-01-22T20:11:05.4419502Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4419617Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4419871Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4419945Z     ???
2025-01-22T20:11:05.4420074Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4420147Z     ???
2025-01-22T20:11:05.4420418Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4420486Z     ???
2025-01-22T20:11:05.4420596Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4420689Z 
2025-01-22T20:11:05.4420757Z >   ???
2025-01-22T20:11:05.4420839Z E   KeyError: 'cups'
2025-01-22T20:11:05.4420843Z 
2025-01-22T20:11:05.4420971Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4420975Z 
2025-01-22T20:11:05.4421150Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4421154Z 
2025-01-22T20:11:05.4421374Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4421701Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4422355Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4422360Z 
2025-01-22T20:11:05.4422449Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4422531Z     def plasma(
2025-01-22T20:11:05.4422599Z         self,
2025-01-22T20:11:05.4422684Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4422754Z         config,
2025-01-22T20:11:05.4422826Z     ):
2025-01-22T20:11:05.4422936Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4423039Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4423043Z 
2025-01-22T20:11:05.4423164Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4423279Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4423398Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4423483Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4423750Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4423850Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4423965Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4424045Z     return BasePlasma(
2025-01-22T20:11:05.4424144Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4424233Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4424331Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4424411Z     self.update(**kwargs)
2025-01-22T20:11:05.4424506Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4424625Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4424743Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4424857Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4425093Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4425252Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4425462Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4425566Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4425693Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4425868Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4426041Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4426220Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4426473Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4426651Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4426984Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4427086Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4427343Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4427464Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4427707Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4427893Z     return self.apply_standard()
2025-01-22T20:11:05.4428177Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4428295Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4428605Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4428723Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4428950Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4429042Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4429306Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4429394Z     return self._get_value(key)
2025-01-22T20:11:05.4429650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4429748Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4429855Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4429860Z 
2025-01-22T20:11:05.4430020Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4430226Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4430304Z        't046000', 't048000'],
2025-01-22T20:11:05.4430390Z       dtype='object')
2025-01-22T20:11:05.4430462Z key = 'cups'
2025-01-22T20:11:05.4430466Z 
2025-01-22T20:11:05.4430550Z     def get_loc(self, key):
2025-01-22T20:11:05.4430619Z         """
2025-01-22T20:11:05.4430780Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4430846Z     
2025-01-22T20:11:05.4430924Z         Parameters
2025-01-22T20:11:05.4430995Z         ----------
2025-01-22T20:11:05.4431072Z         key : label
2025-01-22T20:11:05.4431141Z     
2025-01-22T20:11:05.4431216Z         Returns
2025-01-22T20:11:05.4431287Z         -------
2025-01-22T20:11:05.4431422Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4431488Z     
2025-01-22T20:11:05.4431565Z         Examples
2025-01-22T20:11:05.4431635Z         --------
2025-01-22T20:11:05.4431739Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4431823Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4431897Z         1
2025-01-22T20:11:05.4431972Z     
2025-01-22T20:11:05.4432074Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4432169Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4432245Z         slice(1, 3, None)
2025-01-22T20:11:05.4432316Z     
2025-01-22T20:11:05.4432425Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4432523Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4432613Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4432694Z         """
2025-01-22T20:11:05.4432793Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4432866Z         try:
2025-01-22T20:11:05.4432964Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4433053Z         except KeyError as err:
2025-01-22T20:11:05.4433150Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4433253Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4433372Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4433650Z             ):
2025-01-22T20:11:05.4433751Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4433839Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4433927Z E           KeyError: 'cups'
2025-01-22T20:11:05.4433931Z 
2025-01-22T20:11:05.4434196Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4434603Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] _
2025-01-22T20:11:05.4434608Z 
2025-01-22T20:11:05.4434766Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4434979Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4435054Z        't046000', 't048000'],
2025-01-22T20:11:05.4435137Z       dtype='object')
2025-01-22T20:11:05.4435221Z key = 'cups'
2025-01-22T20:11:05.4435226Z 
2025-01-22T20:11:05.4435309Z     def get_loc(self, key):
2025-01-22T20:11:05.4435388Z         """
2025-01-22T20:11:05.4435547Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4435621Z     
2025-01-22T20:11:05.4435698Z         Parameters
2025-01-22T20:11:05.4435776Z         ----------
2025-01-22T20:11:05.4435850Z         key : label
2025-01-22T20:11:05.4435923Z     
2025-01-22T20:11:05.4435993Z         Returns
2025-01-22T20:11:05.4436073Z         -------
2025-01-22T20:11:05.4436204Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4436279Z     
2025-01-22T20:11:05.4436349Z         Examples
2025-01-22T20:11:05.4436426Z         --------
2025-01-22T20:11:05.4436525Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4436616Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4436692Z         1
2025-01-22T20:11:05.4436758Z     
2025-01-22T20:11:05.4436864Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4436953Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4437033Z         slice(1, 3, None)
2025-01-22T20:11:05.4437099Z     
2025-01-22T20:11:05.4437211Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4437299Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4437394Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4437461Z         """
2025-01-22T20:11:05.4437570Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4437640Z         try:
2025-01-22T20:11:05.4437742Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4437747Z 
2025-01-22T20:11:05.4437987Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4438103Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4438243Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4438316Z     ???
2025-01-22T20:11:05.4438451Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4438519Z     ???
2025-01-22T20:11:05.4438792Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4438859Z     ???
2025-01-22T20:11:05.4438969Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4438973Z 
2025-01-22T20:11:05.4439038Z >   ???
2025-01-22T20:11:05.4439123Z E   KeyError: 'cups'
2025-01-22T20:11:05.4439127Z 
2025-01-22T20:11:05.4439252Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4439256Z 
2025-01-22T20:11:05.4439429Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4439434Z 
2025-01-22T20:11:05.4439663Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4439979Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4440720Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4440726Z 
2025-01-22T20:11:05.4440815Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4440893Z     def plasma(
2025-01-22T20:11:05.4441031Z         self,
2025-01-22T20:11:05.4441121Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4441190Z         config,
2025-01-22T20:11:05.4441263Z     ):
2025-01-22T20:11:05.4441380Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4441479Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4441483Z 
2025-01-22T20:11:05.4441610Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4441717Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4441832Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4441918Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4442089Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4442189Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4442306Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4442385Z     return BasePlasma(
2025-01-22T20:11:05.4442477Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4442567Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4442663Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4442748Z     self.update(**kwargs)
2025-01-22T20:11:05.4442837Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4442967Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4443079Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4443187Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4443423Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4448634Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4448873Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4448975Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4449113Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4449299Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4449486Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4449664Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4449931Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4450105Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4450295Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4450405Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4450675Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4450810Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4451060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4451158Z     return self.apply_standard()
2025-01-22T20:11:05.4451449Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4451579Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4451910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4452041Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4452267Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4452549Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4452834Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4452923Z     return self._get_value(key)
2025-01-22T20:11:05.4453188Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4453281Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4453662Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4453669Z 
2025-01-22T20:11:05.4453843Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4454061Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4454140Z        't046000', 't048000'],
2025-01-22T20:11:05.4454224Z       dtype='object')
2025-01-22T20:11:05.4454305Z key = 'cups'
2025-01-22T20:11:05.4454309Z 
2025-01-22T20:11:05.4454399Z     def get_loc(self, key):
2025-01-22T20:11:05.4454476Z         """
2025-01-22T20:11:05.4454640Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4454713Z     
2025-01-22T20:11:05.4454788Z         Parameters
2025-01-22T20:11:05.4454868Z         ----------
2025-01-22T20:11:05.4454941Z         key : label
2025-01-22T20:11:05.4455013Z     
2025-01-22T20:11:05.4455082Z         Returns
2025-01-22T20:11:05.4455163Z         -------
2025-01-22T20:11:05.4455299Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4455375Z     
2025-01-22T20:11:05.4455448Z         Examples
2025-01-22T20:11:05.4455525Z         --------
2025-01-22T20:11:05.4455625Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4455718Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4455789Z         1
2025-01-22T20:11:05.4455861Z     
2025-01-22T20:11:05.4455972Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4456067Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4456150Z         slice(1, 3, None)
2025-01-22T20:11:05.4456216Z     
2025-01-22T20:11:05.4456332Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4456423Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4456521Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4456589Z         """
2025-01-22T20:11:05.4456704Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4456774Z         try:
2025-01-22T20:11:05.4456881Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4456964Z         except KeyError as err:
2025-01-22T20:11:05.4457068Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4457169Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4457296Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4457367Z             ):
2025-01-22T20:11:05.4457466Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4457555Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4457643Z E           KeyError: 'cups'
2025-01-22T20:11:05.4457647Z 
2025-01-22T20:11:05.4457931Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4458249Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-metastability] _
2025-01-22T20:11:05.4458254Z 
2025-01-22T20:11:05.4458419Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4458632Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4458713Z        't046000', 't048000'],
2025-01-22T20:11:05.4458789Z       dtype='object')
2025-01-22T20:11:05.4458867Z key = 'cups'
2025-01-22T20:11:05.4458871Z 
2025-01-22T20:11:05.4459079Z     def get_loc(self, key):
2025-01-22T20:11:05.4459147Z         """
2025-01-22T20:11:05.4459315Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4459382Z     
2025-01-22T20:11:05.4459462Z         Parameters
2025-01-22T20:11:05.4459536Z         ----------
2025-01-22T20:11:05.4459614Z         key : label
2025-01-22T20:11:05.4459681Z     
2025-01-22T20:11:05.4459756Z         Returns
2025-01-22T20:11:05.4459826Z         -------
2025-01-22T20:11:05.4460101Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4460170Z     
2025-01-22T20:11:05.4460247Z         Examples
2025-01-22T20:11:05.4460318Z         --------
2025-01-22T20:11:05.4460426Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4460514Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4460589Z         1
2025-01-22T20:11:05.4460656Z     
2025-01-22T20:11:05.4460767Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4460858Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4460941Z         slice(1, 3, None)
2025-01-22T20:11:05.4461015Z     
2025-01-22T20:11:05.4461125Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4461222Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4461314Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4461388Z         """
2025-01-22T20:11:05.4461490Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4461570Z         try:
2025-01-22T20:11:05.4461668Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4461673Z 
2025-01-22T20:11:05.4461930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4462046Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4462196Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4462265Z     ???
2025-01-22T20:11:05.4462405Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4462480Z     ???
2025-01-22T20:11:05.4462752Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4462826Z     ???
2025-01-22T20:11:05.4462934Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4462938Z 
2025-01-22T20:11:05.4463014Z >   ???
2025-01-22T20:11:05.4463093Z E   KeyError: 'cups'
2025-01-22T20:11:05.4463100Z 
2025-01-22T20:11:05.4463236Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4463240Z 
2025-01-22T20:11:05.4463411Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4463415Z 
2025-01-22T20:11:05.4463786Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4464108Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4464742Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4464746Z 
2025-01-22T20:11:05.4464835Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4464913Z     def plasma(
2025-01-22T20:11:05.4464982Z         self,
2025-01-22T20:11:05.4465075Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4465151Z         config,
2025-01-22T20:11:05.4465219Z     ):
2025-01-22T20:11:05.4465336Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4465432Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4465436Z 
2025-01-22T20:11:05.4465562Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4465671Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4465783Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4465991Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4466163Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4466263Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4466378Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4466456Z     return BasePlasma(
2025-01-22T20:11:05.4466546Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4466736Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4466828Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4466914Z     self.update(**kwargs)
2025-01-22T20:11:05.4467002Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4467127Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4467236Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4467346Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4467580Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4467743Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4467952Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4468051Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4468177Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4468350Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4468530Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4468702Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4468968Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4469139Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4469324Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4469430Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4469690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4469814Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4470059Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4470146Z     return self.apply_standard()
2025-01-22T20:11:05.4470432Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4470559Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4470865Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4470986Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4471200Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4471294Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4471557Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4471645Z     return self._get_value(key)
2025-01-22T20:11:05.4471902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4471993Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4472105Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4472115Z 
2025-01-22T20:11:05.4472269Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4472483Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4472560Z        't046000', 't048000'],
2025-01-22T20:11:05.4472642Z       dtype='object')
2025-01-22T20:11:05.4472716Z key = 'cups'
2025-01-22T20:11:05.4472805Z 
2025-01-22T20:11:05.4472891Z     def get_loc(self, key):
2025-01-22T20:11:05.4472958Z         """
2025-01-22T20:11:05.4473121Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4473190Z     
2025-01-22T20:11:05.4473268Z         Parameters
2025-01-22T20:11:05.4473339Z         ----------
2025-01-22T20:11:05.4473416Z         key : label
2025-01-22T20:11:05.4473482Z     
2025-01-22T20:11:05.4473680Z         Returns
2025-01-22T20:11:05.4473758Z         -------
2025-01-22T20:11:05.4474020Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4474100Z     
2025-01-22T20:11:05.4474171Z         Examples
2025-01-22T20:11:05.4474246Z         --------
2025-01-22T20:11:05.4474346Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4474438Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4474505Z         1
2025-01-22T20:11:05.4474576Z     
2025-01-22T20:11:05.4474680Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4474780Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4474856Z         slice(1, 3, None)
2025-01-22T20:11:05.4474928Z     
2025-01-22T20:11:05.4475036Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4475131Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4475224Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4475296Z         """
2025-01-22T20:11:05.4475402Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4475473Z         try:
2025-01-22T20:11:05.4475577Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4475659Z         except KeyError as err:
2025-01-22T20:11:05.4475760Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4475860Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4475987Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4476056Z             ):
2025-01-22T20:11:05.4476156Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4476243Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4476328Z E           KeyError: 'cups'
2025-01-22T20:11:05.4476333Z 
2025-01-22T20:11:05.4476601Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4476906Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-delta] _
2025-01-22T20:11:05.4476913Z 
2025-01-22T20:11:05.4477073Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4477278Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4477357Z        't046000', 't048000'],
2025-01-22T20:11:05.4477433Z       dtype='object')
2025-01-22T20:11:05.4477509Z key = 'cups'
2025-01-22T20:11:05.4477513Z 
2025-01-22T20:11:05.4477592Z     def get_loc(self, key):
2025-01-22T20:11:05.4477667Z         """
2025-01-22T20:11:05.4477824Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4477894Z     
2025-01-22T20:11:05.4477967Z         Parameters
2025-01-22T20:11:05.4478044Z         ----------
2025-01-22T20:11:05.4478116Z         key : label
2025-01-22T20:11:05.4478187Z     
2025-01-22T20:11:05.4478260Z         Returns
2025-01-22T20:11:05.4478329Z         -------
2025-01-22T20:11:05.4478468Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4478535Z     
2025-01-22T20:11:05.4478609Z         Examples
2025-01-22T20:11:05.4478678Z         --------
2025-01-22T20:11:05.4478779Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4478863Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4478936Z         1
2025-01-22T20:11:05.4479003Z     
2025-01-22T20:11:05.4479109Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4479195Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4479396Z         slice(1, 3, None)
2025-01-22T20:11:05.4479462Z     
2025-01-22T20:11:05.4479575Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4479666Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4479761Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4479827Z         """
2025-01-22T20:11:05.4479932Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4480014Z         try:
2025-01-22T20:11:05.4480196Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4480202Z 
2025-01-22T20:11:05.4480454Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4480562Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4480703Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4480771Z     ???
2025-01-22T20:11:05.4480903Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4480973Z     ???
2025-01-22T20:11:05.4481247Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4481313Z     ???
2025-01-22T20:11:05.4481426Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4481429Z 
2025-01-22T20:11:05.4481501Z >   ???
2025-01-22T20:11:05.4481579Z E   KeyError: 'cups'
2025-01-22T20:11:05.4481583Z 
2025-01-22T20:11:05.4481717Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4481721Z 
2025-01-22T20:11:05.4481887Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4481892Z 
2025-01-22T20:11:05.4482115Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4482437Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4483071Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4483079Z 
2025-01-22T20:11:05.4483174Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4483247Z     def plasma(
2025-01-22T20:11:05.4483320Z         self,
2025-01-22T20:11:05.4483400Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4483474Z         config,
2025-01-22T20:11:05.4483665Z     ):
2025-01-22T20:11:05.4483785Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4483880Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4483884Z 
2025-01-22T20:11:05.4484015Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4484122Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4484233Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4484320Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4484492Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4484598Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4484708Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4484790Z     return BasePlasma(
2025-01-22T20:11:05.4484875Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4484967Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4485060Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4485145Z     self.update(**kwargs)
2025-01-22T20:11:05.4485232Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4485358Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4485469Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4485575Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4485809Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4486090Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4486307Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4486404Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4486539Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4486707Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4486985Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4487161Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4487425Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4487596Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4487783Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4487885Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4488155Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4488286Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4488524Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4488617Z     return self.apply_standard()
2025-01-22T20:11:05.4488896Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4489020Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4489322Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4489444Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4489660Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4489752Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4490019Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4490105Z     return self._get_value(key)
2025-01-22T20:11:05.4490365Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4490451Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4490563Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4490570Z 
2025-01-22T20:11:05.4490725Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4490939Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4491014Z        't046000', 't048000'],
2025-01-22T20:11:05.4491094Z       dtype='object')
2025-01-22T20:11:05.4491166Z key = 'cups'
2025-01-22T20:11:05.4491170Z 
2025-01-22T20:11:05.4491255Z     def get_loc(self, key):
2025-01-22T20:11:05.4491331Z         """
2025-01-22T20:11:05.4491491Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4491561Z     
2025-01-22T20:11:05.4491637Z         Parameters
2025-01-22T20:11:05.4491714Z         ----------
2025-01-22T20:11:05.4491786Z         key : label
2025-01-22T20:11:05.4491859Z     
2025-01-22T20:11:05.4491928Z         Returns
2025-01-22T20:11:05.4492012Z         -------
2025-01-22T20:11:05.4492156Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4492222Z     
2025-01-22T20:11:05.4492296Z         Examples
2025-01-22T20:11:05.4492365Z         --------
2025-01-22T20:11:05.4492470Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4492555Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4492627Z         1
2025-01-22T20:11:05.4492692Z     
2025-01-22T20:11:05.4492801Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4492889Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4493060Z         slice(1, 3, None)
2025-01-22T20:11:05.4493125Z     
2025-01-22T20:11:05.4493240Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4493334Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4493424Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4493590Z         """
2025-01-22T20:11:05.4493695Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4493767Z         try:
2025-01-22T20:11:05.4493972Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4494061Z         except KeyError as err:
2025-01-22T20:11:05.4494158Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4494265Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4494384Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4494456Z             ):
2025-01-22T20:11:05.4494548Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4494645Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4494726Z E           KeyError: 'cups'
2025-01-22T20:11:05.4494735Z 
2025-01-22T20:11:05.4495002Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4495361Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_electron_densities] _
2025-01-22T20:11:05.4495365Z 
2025-01-22T20:11:05.4495523Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4495737Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4495811Z        't046000', 't048000'],
2025-01-22T20:11:05.4495891Z       dtype='object')
2025-01-22T20:11:05.4495961Z key = 'cups'
2025-01-22T20:11:05.4495965Z 
2025-01-22T20:11:05.4496049Z     def get_loc(self, key):
2025-01-22T20:11:05.4496118Z         """
2025-01-22T20:11:05.4496284Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4496355Z     
2025-01-22T20:11:05.4496427Z         Parameters
2025-01-22T20:11:05.4496502Z         ----------
2025-01-22T20:11:05.4496573Z         key : label
2025-01-22T20:11:05.4496643Z     
2025-01-22T20:11:05.4496712Z         Returns
2025-01-22T20:11:05.4496786Z         -------
2025-01-22T20:11:05.4496919Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4496993Z     
2025-01-22T20:11:05.4497062Z         Examples
2025-01-22T20:11:05.4497136Z         --------
2025-01-22T20:11:05.4497233Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4497323Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4497390Z         1
2025-01-22T20:11:05.4497460Z     
2025-01-22T20:11:05.4497560Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4497654Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4497729Z         slice(1, 3, None)
2025-01-22T20:11:05.4497803Z     
2025-01-22T20:11:05.4497916Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4498007Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4498101Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4498168Z         """
2025-01-22T20:11:05.4498274Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4498343Z         try:
2025-01-22T20:11:05.4498453Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4498458Z 
2025-01-22T20:11:05.4498702Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4498816Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4498954Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4499027Z     ???
2025-01-22T20:11:05.4499160Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4499353Z     ???
2025-01-22T20:11:05.4499629Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4499697Z     ???
2025-01-22T20:11:05.4499807Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4499812Z 
2025-01-22T20:11:05.4499878Z >   ???
2025-01-22T20:11:05.4499960Z E   KeyError: 'cups'
2025-01-22T20:11:05.4499964Z 
2025-01-22T20:11:05.4500182Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4500187Z 
2025-01-22T20:11:05.4500364Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4500368Z 
2025-01-22T20:11:05.4500588Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4500908Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4501530Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4501539Z 
2025-01-22T20:11:05.4501628Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4501706Z     def plasma(
2025-01-22T20:11:05.4501773Z         self,
2025-01-22T20:11:05.4501858Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4501927Z         config,
2025-01-22T20:11:05.4501997Z     ):
2025-01-22T20:11:05.4502111Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4502210Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4502214Z 
2025-01-22T20:11:05.4502335Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4502446Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4502561Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4502643Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4502815Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4502915Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4503027Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4503106Z     return BasePlasma(
2025-01-22T20:11:05.4503195Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4503280Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4503374Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4503457Z     self.update(**kwargs)
2025-01-22T20:11:05.4503644Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4503769Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4503886Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4503993Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4504227Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4504385Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4504594Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4504695Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4504823Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4504998Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4505168Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4505347Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4505604Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4505779Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4505964Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4506065Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4506442Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4506568Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4506811Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4506897Z     return self.apply_standard()
2025-01-22T20:11:05.4507180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4507396Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4507712Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4507830Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4508048Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4508138Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4508405Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4508493Z     return self._get_value(key)
2025-01-22T20:11:05.4508749Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4508839Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4508945Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4508949Z 
2025-01-22T20:11:05.4509111Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4509320Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4509397Z        't046000', 't048000'],
2025-01-22T20:11:05.4509476Z       dtype='object')
2025-01-22T20:11:05.4509549Z key = 'cups'
2025-01-22T20:11:05.4509553Z 
2025-01-22T20:11:05.4509636Z     def get_loc(self, key):
2025-01-22T20:11:05.4509708Z         """
2025-01-22T20:11:05.4509870Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4509936Z     
2025-01-22T20:11:05.4510012Z         Parameters
2025-01-22T20:11:05.4510084Z         ----------
2025-01-22T20:11:05.4510160Z         key : label
2025-01-22T20:11:05.4510226Z     
2025-01-22T20:11:05.4510301Z         Returns
2025-01-22T20:11:05.4510371Z         -------
2025-01-22T20:11:05.4510507Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4510576Z     
2025-01-22T20:11:05.4510652Z         Examples
2025-01-22T20:11:05.4510722Z         --------
2025-01-22T20:11:05.4510826Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4510909Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4510982Z         1
2025-01-22T20:11:05.4511052Z     
2025-01-22T20:11:05.4511155Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4511249Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4511332Z         slice(1, 3, None)
2025-01-22T20:11:05.4511404Z     
2025-01-22T20:11:05.4511511Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4511606Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4511696Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4511769Z         """
2025-01-22T20:11:05.4511872Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4511945Z         try:
2025-01-22T20:11:05.4512047Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4512137Z         except KeyError as err:
2025-01-22T20:11:05.4512235Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4512336Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4512461Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4512529Z             ):
2025-01-22T20:11:05.4512624Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4512709Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4512885Z E           KeyError: 'cups'
2025-01-22T20:11:05.4512890Z 
2025-01-22T20:11:05.4513158Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4513451Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-phi] _
2025-01-22T20:11:05.4513455Z 
2025-01-22T20:11:05.4513840Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4514057Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4514135Z        't046000', 't048000'],
2025-01-22T20:11:05.4514214Z       dtype='object')
2025-01-22T20:11:05.4514289Z key = 'cups'
2025-01-22T20:11:05.4514293Z 
2025-01-22T20:11:05.4514372Z     def get_loc(self, key):
2025-01-22T20:11:05.4514445Z         """
2025-01-22T20:11:05.4514600Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4514675Z     
2025-01-22T20:11:05.4514751Z         Parameters
2025-01-22T20:11:05.4514826Z         ----------
2025-01-22T20:11:05.4514897Z         key : label
2025-01-22T20:11:05.4514970Z     
2025-01-22T20:11:05.4515038Z         Returns
2025-01-22T20:11:05.4515112Z         -------
2025-01-22T20:11:05.4515240Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4515310Z     
2025-01-22T20:11:05.4515382Z         Examples
2025-01-22T20:11:05.4515460Z         --------
2025-01-22T20:11:05.4515559Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4515648Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4515720Z         1
2025-01-22T20:11:05.4515787Z     
2025-01-22T20:11:05.4515891Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4515976Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4516059Z         slice(1, 3, None)
2025-01-22T20:11:05.4516125Z     
2025-01-22T20:11:05.4516240Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4516329Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4516422Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4516490Z         """
2025-01-22T20:11:05.4516595Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4516664Z         try:
2025-01-22T20:11:05.4516765Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4516770Z 
2025-01-22T20:11:05.4517016Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4517130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4517272Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4517339Z     ???
2025-01-22T20:11:05.4517473Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4517539Z     ???
2025-01-22T20:11:05.4517813Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4517883Z     ???
2025-01-22T20:11:05.4517992Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4517997Z 
2025-01-22T20:11:05.4518062Z >   ???
2025-01-22T20:11:05.4518147Z E   KeyError: 'cups'
2025-01-22T20:11:05.4518151Z 
2025-01-22T20:11:05.4518278Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4518282Z 
2025-01-22T20:11:05.4518456Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4518461Z 
2025-01-22T20:11:05.4518688Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4519002Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4519620Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4519740Z 
2025-01-22T20:11:05.4519831Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4519908Z     def plasma(
2025-01-22T20:11:05.4519977Z         self,
2025-01-22T20:11:05.4520064Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4520132Z         config,
2025-01-22T20:11:05.4520203Z     ):
2025-01-22T20:11:05.4520391Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4520485Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4520490Z 
2025-01-22T20:11:05.4520614Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4520719Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4520829Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4520913Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4521083Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4521188Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4521303Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4521381Z     return BasePlasma(
2025-01-22T20:11:05.4521470Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4521557Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4521650Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4521736Z     self.update(**kwargs)
2025-01-22T20:11:05.4521827Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4521951Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4522061Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4522204Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4522438Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4522594Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4522807Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4522907Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4523033Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4523205Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4523371Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4523666Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4523934Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4524105Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4524291Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4524393Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4524654Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4524779Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4525025Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4525111Z     return self.apply_standard()
2025-01-22T20:11:05.4525398Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4525525Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4525828Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4525949Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4526165Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4526254Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4526517Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4526743Z     return self._get_value(key)
2025-01-22T20:11:05.4527000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4527091Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4527200Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4527209Z 
2025-01-22T20:11:05.4527487Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4527707Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4527780Z        't046000', 't048000'],
2025-01-22T20:11:05.4527859Z       dtype='object')
2025-01-22T20:11:05.4527931Z key = 'cups'
2025-01-22T20:11:05.4527936Z 
2025-01-22T20:11:05.4528020Z     def get_loc(self, key):
2025-01-22T20:11:05.4528089Z         """
2025-01-22T20:11:05.4528252Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4528322Z     
2025-01-22T20:11:05.4528400Z         Parameters
2025-01-22T20:11:05.4528471Z         ----------
2025-01-22T20:11:05.4528548Z         key : label
2025-01-22T20:11:05.4528613Z     
2025-01-22T20:11:05.4528687Z         Returns
2025-01-22T20:11:05.4528757Z         -------
2025-01-22T20:11:05.4528890Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4528963Z     
2025-01-22T20:11:05.4529036Z         Examples
2025-01-22T20:11:05.4529111Z         --------
2025-01-22T20:11:05.4529209Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4529299Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4529367Z         1
2025-01-22T20:11:05.4529439Z     
2025-01-22T20:11:05.4529541Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4529635Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4529712Z         slice(1, 3, None)
2025-01-22T20:11:05.4529786Z     
2025-01-22T20:11:05.4529893Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4529988Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4530076Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4530149Z         """
2025-01-22T20:11:05.4530252Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4530325Z         try:
2025-01-22T20:11:05.4530428Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4530512Z         except KeyError as err:
2025-01-22T20:11:05.4530613Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4530712Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4530836Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4530904Z             ):
2025-01-22T20:11:05.4531001Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4531089Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4531181Z E           KeyError: 'cups'
2025-01-22T20:11:05.4531197Z 
2025-01-22T20:11:05.4531471Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4531802Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ion_number_density] _
2025-01-22T20:11:05.4531807Z 
2025-01-22T20:11:05.4531967Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4532177Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4532257Z        't046000', 't048000'],
2025-01-22T20:11:05.4532332Z       dtype='object')
2025-01-22T20:11:05.4532407Z key = 'cups'
2025-01-22T20:11:05.4532411Z 
2025-01-22T20:11:05.4532489Z     def get_loc(self, key):
2025-01-22T20:11:05.4532562Z         """
2025-01-22T20:11:05.4532718Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4532874Z     
2025-01-22T20:11:05.4532946Z         Parameters
2025-01-22T20:11:05.4533021Z         ----------
2025-01-22T20:11:05.4533091Z         key : label
2025-01-22T20:11:05.4533165Z     
2025-01-22T20:11:05.4533233Z         Returns
2025-01-22T20:11:05.4533311Z         -------
2025-01-22T20:11:05.4533448Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4533610Z     
2025-01-22T20:11:05.4533688Z         Examples
2025-01-22T20:11:05.4533758Z         --------
2025-01-22T20:11:05.4533966Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4534053Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4534124Z         1
2025-01-22T20:11:05.4534190Z     
2025-01-22T20:11:05.4534295Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4534381Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4534460Z         slice(1, 3, None)
2025-01-22T20:11:05.4534525Z     
2025-01-22T20:11:05.4534635Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4534728Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4534823Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4534889Z         """
2025-01-22T20:11:05.4534992Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4535066Z         try:
2025-01-22T20:11:05.4535163Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4535167Z 
2025-01-22T20:11:05.4535418Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4535527Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4535666Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4535733Z     ???
2025-01-22T20:11:05.4535868Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4535935Z     ???
2025-01-22T20:11:05.4536205Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4536275Z     ???
2025-01-22T20:11:05.4536385Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4536389Z 
2025-01-22T20:11:05.4536459Z >   ???
2025-01-22T20:11:05.4536535Z E   KeyError: 'cups'
2025-01-22T20:11:05.4536539Z 
2025-01-22T20:11:05.4536671Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4536675Z 
2025-01-22T20:11:05.4536844Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4536848Z 
2025-01-22T20:11:05.4537074Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4537390Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4538010Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4538017Z 
2025-01-22T20:11:05.4538109Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4538181Z     def plasma(
2025-01-22T20:11:05.4538255Z         self,
2025-01-22T20:11:05.4538335Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4538408Z         config,
2025-01-22T20:11:05.4538474Z     ):
2025-01-22T20:11:05.4538588Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4538683Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4538687Z 
2025-01-22T20:11:05.4538814Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4538920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4539032Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4539116Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4539287Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4539509Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4539617Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4539699Z     return BasePlasma(
2025-01-22T20:11:05.4539783Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4539873Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4539961Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4540044Z     self.update(**kwargs)
2025-01-22T20:11:05.4540132Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4540329Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4540440Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4540545Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4540783Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4540939Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4541151Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4541250Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4541381Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4541550Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4541724Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4541896Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4542163Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4542333Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4542515Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4542617Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4542872Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4543003Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4543242Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4543332Z     return self.apply_standard()
2025-01-22T20:11:05.4543723Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4543850Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4544157Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4544278Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4544492Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4544585Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4544848Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4544939Z     return self._get_value(key)
2025-01-22T20:11:05.4545198Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4545283Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4545395Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4545399Z 
2025-01-22T20:11:05.4545551Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4545768Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4545843Z        't046000', 't048000'],
2025-01-22T20:11:05.4545924Z       dtype='object')
2025-01-22T20:11:05.4545996Z key = 'cups'
2025-01-22T20:11:05.4546000Z 
2025-01-22T20:11:05.4546084Z     def get_loc(self, key):
2025-01-22T20:11:05.4546152Z         """
2025-01-22T20:11:05.4546314Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4546506Z     
2025-01-22T20:11:05.4546580Z         Parameters
2025-01-22T20:11:05.4546656Z         ----------
2025-01-22T20:11:05.4546726Z         key : label
2025-01-22T20:11:05.4546797Z     
2025-01-22T20:11:05.4546865Z         Returns
2025-01-22T20:11:05.4546943Z         -------
2025-01-22T20:11:05.4547072Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4547143Z     
2025-01-22T20:11:05.4547214Z         Examples
2025-01-22T20:11:05.4547387Z         --------
2025-01-22T20:11:05.4547487Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4547576Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4547644Z         1
2025-01-22T20:11:05.4547715Z     
2025-01-22T20:11:05.4547817Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4547911Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4547986Z         slice(1, 3, None)
2025-01-22T20:11:05.4548057Z     
2025-01-22T20:11:05.4548169Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4548264Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4548358Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4548426Z         """
2025-01-22T20:11:05.4548530Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4548600Z         try:
2025-01-22T20:11:05.4548706Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4548786Z         except KeyError as err:
2025-01-22T20:11:05.4548890Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4548986Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4549111Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4549178Z             ):
2025-01-22T20:11:05.4549276Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4549361Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4549447Z E           KeyError: 'cups'
2025-01-22T20:11:05.4549455Z 
2025-01-22T20:11:05.4549723Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4550048Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-electron_densities] _
2025-01-22T20:11:05.4550052Z 
2025-01-22T20:11:05.4550210Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4550418Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4550498Z        't046000', 't048000'],
2025-01-22T20:11:05.4550572Z       dtype='object')
2025-01-22T20:11:05.4550647Z key = 'cups'
2025-01-22T20:11:05.4550651Z 
2025-01-22T20:11:05.4550730Z     def get_loc(self, key):
2025-01-22T20:11:05.4550802Z         """
2025-01-22T20:11:05.4550966Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4551032Z     
2025-01-22T20:11:05.4551112Z         Parameters
2025-01-22T20:11:05.4551183Z         ----------
2025-01-22T20:11:05.4551259Z         key : label
2025-01-22T20:11:05.4551325Z     
2025-01-22T20:11:05.4551398Z         Returns
2025-01-22T20:11:05.4551467Z         -------
2025-01-22T20:11:05.4551601Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4551667Z     
2025-01-22T20:11:05.4551742Z         Examples
2025-01-22T20:11:05.4551811Z         --------
2025-01-22T20:11:05.4551913Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4551997Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4552068Z         1
2025-01-22T20:11:05.4552133Z     
2025-01-22T20:11:05.4552237Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4552322Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4552401Z         slice(1, 3, None)
2025-01-22T20:11:05.4552466Z     
2025-01-22T20:11:05.4552581Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4552784Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4552873Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4552943Z         """
2025-01-22T20:11:05.4553041Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4553114Z         try:
2025-01-22T20:11:05.4553211Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4553215Z 
2025-01-22T20:11:05.4553668Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4553785Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4553928Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4553996Z     ???
2025-01-22T20:11:05.4554131Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4554197Z     ???
2025-01-22T20:11:05.4554468Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4554542Z     ???
2025-01-22T20:11:05.4554646Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4554650Z 
2025-01-22T20:11:05.4554719Z >   ???
2025-01-22T20:11:05.4554795Z E   KeyError: 'cups'
2025-01-22T20:11:05.4554800Z 
2025-01-22T20:11:05.4554928Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4554932Z 
2025-01-22T20:11:05.4555095Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4555102Z 
2025-01-22T20:11:05.4555328Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4555648Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4556264Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4556271Z 
2025-01-22T20:11:05.4556363Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4556436Z     def plasma(
2025-01-22T20:11:05.4556509Z         self,
2025-01-22T20:11:05.4556589Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4556662Z         config,
2025-01-22T20:11:05.4556728Z     ):
2025-01-22T20:11:05.4556842Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4556938Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4556943Z 
2025-01-22T20:11:05.4557068Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4557178Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4557282Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4557371Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4557537Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4557640Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4557752Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4557834Z     return BasePlasma(
2025-01-22T20:11:05.4557918Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4558010Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4558098Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4558182Z     self.update(**kwargs)
2025-01-22T20:11:05.4558268Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4558397Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4558506Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4558613Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4558854Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4559006Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4559219Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4559428Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4559562Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4559727Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4559901Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4560076Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4560422Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4560600Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4560779Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4560885Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4561135Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4561262Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4561501Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4561592Z     return self.apply_standard()
2025-01-22T20:11:05.4561867Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4561990Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4562294Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4562419Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4562637Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4562722Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4562990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4563072Z     return self._get_value(key)
2025-01-22T20:11:05.4563337Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4563424Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4563651Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4563656Z 
2025-01-22T20:11:05.4563813Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4564028Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4564108Z        't046000', 't048000'],
2025-01-22T20:11:05.4564184Z       dtype='object')
2025-01-22T20:11:05.4564261Z key = 'cups'
2025-01-22T20:11:05.4564264Z 
2025-01-22T20:11:05.4564343Z     def get_loc(self, key):
2025-01-22T20:11:05.4564416Z         """
2025-01-22T20:11:05.4564575Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4564645Z     
2025-01-22T20:11:05.4564722Z         Parameters
2025-01-22T20:11:05.4564796Z         ----------
2025-01-22T20:11:05.4564867Z         key : label
2025-01-22T20:11:05.4564937Z     
2025-01-22T20:11:05.4565005Z         Returns
2025-01-22T20:11:05.4565082Z         -------
2025-01-22T20:11:05.4565213Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4565284Z     
2025-01-22T20:11:05.4565353Z         Examples
2025-01-22T20:11:05.4565429Z         --------
2025-01-22T20:11:05.4565530Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4565620Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4565692Z         1
2025-01-22T20:11:05.4565757Z     
2025-01-22T20:11:05.4565865Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4565952Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4566032Z         slice(1, 3, None)
2025-01-22T20:11:05.4566101Z     
2025-01-22T20:11:05.4566212Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4566432Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4566526Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4566594Z         """
2025-01-22T20:11:05.4566698Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4566766Z         try:
2025-01-22T20:11:05.4566872Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4566952Z         except KeyError as err:
2025-01-22T20:11:05.4567155Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4567264Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4567387Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4567460Z             ):
2025-01-22T20:11:05.4567550Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4567643Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4567723Z E           KeyError: 'cups'
2025-01-22T20:11:05.4567727Z 
2025-01-22T20:11:05.4568000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4568331Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_number_density] _
2025-01-22T20:11:05.4568335Z 
2025-01-22T20:11:05.4568493Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4568704Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4568784Z        't046000', 't048000'],
2025-01-22T20:11:05.4568865Z       dtype='object')
2025-01-22T20:11:05.4568936Z key = 'cups'
2025-01-22T20:11:05.4568941Z 
2025-01-22T20:11:05.4569024Z     def get_loc(self, key):
2025-01-22T20:11:05.4569091Z         """
2025-01-22T20:11:05.4569250Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4569316Z     
2025-01-22T20:11:05.4569393Z         Parameters
2025-01-22T20:11:05.4569467Z         ----------
2025-01-22T20:11:05.4569543Z         key : label
2025-01-22T20:11:05.4569609Z     
2025-01-22T20:11:05.4569684Z         Returns
2025-01-22T20:11:05.4569756Z         -------
2025-01-22T20:11:05.4569890Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4569956Z     
2025-01-22T20:11:05.4570031Z         Examples
2025-01-22T20:11:05.4570101Z         --------
2025-01-22T20:11:05.4570202Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4570295Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4570362Z         1
2025-01-22T20:11:05.4570432Z     
2025-01-22T20:11:05.4570532Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4570622Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4570695Z         slice(1, 3, None)
2025-01-22T20:11:05.4570765Z     
2025-01-22T20:11:05.4570871Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4570965Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4571057Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4571130Z         """
2025-01-22T20:11:05.4571231Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4571303Z         try:
2025-01-22T20:11:05.4571399Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4571404Z 
2025-01-22T20:11:05.4571650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4571767Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4571904Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4571976Z     ???
2025-01-22T20:11:05.4572107Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4572179Z     ???
2025-01-22T20:11:05.4572447Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4572519Z     ???
2025-01-22T20:11:05.4572711Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4572717Z 
2025-01-22T20:11:05.4572788Z >   ???
2025-01-22T20:11:05.4572866Z E   KeyError: 'cups'
2025-01-22T20:11:05.4572870Z 
2025-01-22T20:11:05.4573001Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4573005Z 
2025-01-22T20:11:05.4573178Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4573181Z 
2025-01-22T20:11:05.4573486Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4573908Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4574526Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4574534Z 
2025-01-22T20:11:05.4574628Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4574700Z     def plasma(
2025-01-22T20:11:05.4574775Z         self,
2025-01-22T20:11:05.4574856Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4574931Z         config,
2025-01-22T20:11:05.4575003Z     ):
2025-01-22T20:11:05.4575113Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4575211Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4575215Z 
2025-01-22T20:11:05.4575340Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4575451Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4575554Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4575643Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4575808Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4575915Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4576027Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4576110Z     return BasePlasma(
2025-01-22T20:11:05.4576194Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4576283Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4576375Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4576454Z     self.update(**kwargs)
2025-01-22T20:11:05.4576546Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4576666Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4576783Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4576886Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4577125Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4577277Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4577489Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4577582Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4577717Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4577883Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4578055Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4578234Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4578494Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4578670Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4578849Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4578958Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4579211Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4579340Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4579701Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4579791Z     return self.apply_standard()
2025-01-22T20:11:05.4580073Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4580190Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4580596Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4580715Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4580935Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4581020Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4581287Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4581369Z     return self._get_value(key)
2025-01-22T20:11:05.4581630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4581721Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4581834Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4581838Z 
2025-01-22T20:11:05.4582000Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4582213Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4582292Z        't046000', 't048000'],
2025-01-22T20:11:05.4582366Z       dtype='object')
2025-01-22T20:11:05.4582441Z key = 'cups'
2025-01-22T20:11:05.4582445Z 
2025-01-22T20:11:05.4582523Z     def get_loc(self, key):
2025-01-22T20:11:05.4582596Z         """
2025-01-22T20:11:05.4582754Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4582826Z     
2025-01-22T20:11:05.4582900Z         Parameters
2025-01-22T20:11:05.4582978Z         ----------
2025-01-22T20:11:05.4583050Z         key : label
2025-01-22T20:11:05.4583122Z     
2025-01-22T20:11:05.4583196Z         Returns
2025-01-22T20:11:05.4583267Z         -------
2025-01-22T20:11:05.4583402Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4583467Z     
2025-01-22T20:11:05.4583633Z         Examples
2025-01-22T20:11:05.4583705Z         --------
2025-01-22T20:11:05.4583807Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4583894Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4583965Z         1
2025-01-22T20:11:05.4584031Z     
2025-01-22T20:11:05.4584137Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4584225Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4584304Z         slice(1, 3, None)
2025-01-22T20:11:05.4584371Z     
2025-01-22T20:11:05.4584481Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4584573Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4584671Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4584739Z         """
2025-01-22T20:11:05.4584845Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4584917Z         try:
2025-01-22T20:11:05.4585014Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4585104Z         except KeyError as err:
2025-01-22T20:11:05.4585201Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4585308Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4585425Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4585505Z             ):
2025-01-22T20:11:05.4585596Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4585686Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4585766Z E           KeyError: 'cups'
2025-01-22T20:11:05.4585771Z 
2025-01-22T20:11:05.4586039Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4586524Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] _
2025-01-22T20:11:05.4586535Z 
2025-01-22T20:11:05.4586690Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4586902Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4587094Z        't046000', 't048000'],
2025-01-22T20:11:05.4587175Z       dtype='object')
2025-01-22T20:11:05.4587244Z key = 'cups'
2025-01-22T20:11:05.4587249Z 
2025-01-22T20:11:05.4587333Z     def get_loc(self, key):
2025-01-22T20:11:05.4587400Z         """
2025-01-22T20:11:05.4587560Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4587625Z     
2025-01-22T20:11:05.4587704Z         Parameters
2025-01-22T20:11:05.4587774Z         ----------
2025-01-22T20:11:05.4587853Z         key : label
2025-01-22T20:11:05.4587919Z     
2025-01-22T20:11:05.4587992Z         Returns
2025-01-22T20:11:05.4588065Z         -------
2025-01-22T20:11:05.4588192Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4588262Z     
2025-01-22T20:11:05.4588331Z         Examples
2025-01-22T20:11:05.4588405Z         --------
2025-01-22T20:11:05.4588501Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4588592Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4588658Z         1
2025-01-22T20:11:05.4588728Z     
2025-01-22T20:11:05.4588827Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4588917Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4588990Z         slice(1, 3, None)
2025-01-22T20:11:05.4589061Z     
2025-01-22T20:11:05.4589167Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4589261Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4589352Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4589425Z         """
2025-01-22T20:11:05.4589530Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4589598Z         try:
2025-01-22T20:11:05.4589699Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4589704Z 
2025-01-22T20:11:05.4589947Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4590063Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4590198Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4590270Z     ???
2025-01-22T20:11:05.4590399Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4590472Z     ???
2025-01-22T20:11:05.4590739Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4590813Z     ???
2025-01-22T20:11:05.4590917Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4590930Z 
2025-01-22T20:11:05.4590995Z >   ???
2025-01-22T20:11:05.4591077Z E   KeyError: 'cups'
2025-01-22T20:11:05.4591082Z 
2025-01-22T20:11:05.4591210Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4591214Z 
2025-01-22T20:11:05.4591386Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4591390Z 
2025-01-22T20:11:05.4591611Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4591931Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4592547Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4592556Z 
2025-01-22T20:11:05.4592755Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4592833Z     def plasma(
2025-01-22T20:11:05.4592901Z         self,
2025-01-22T20:11:05.4592986Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4593058Z         config,
2025-01-22T20:11:05.4593129Z     ):
2025-01-22T20:11:05.4593239Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4593338Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4593342Z 
2025-01-22T20:11:05.4593670Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4593789Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4593896Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4593989Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4594158Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4594259Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4594372Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4594452Z     return BasePlasma(
2025-01-22T20:11:05.4594541Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4594626Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4594722Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4594801Z     self.update(**kwargs)
2025-01-22T20:11:05.4594893Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4595014Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4595130Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4595232Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4595472Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4595624Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4595837Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4595935Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4596067Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4596238Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4596409Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4596589Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4596845Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4597026Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4597203Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4597310Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4597562Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4597691Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4597938Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4598028Z     return self.apply_standard()
2025-01-22T20:11:05.4598310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4598427Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4598735Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4598853Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4599073Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4599158Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4599426Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4599514Z     return self._get_value(key)
2025-01-22T20:11:05.4599771Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4599977Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4600084Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4600088Z 
2025-01-22T20:11:05.4600247Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4600453Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4600635Z        't046000', 't048000'],
2025-01-22T20:11:05.4600713Z       dtype='object')
2025-01-22T20:11:05.4600789Z key = 'cups'
2025-01-22T20:11:05.4600793Z 
2025-01-22T20:11:05.4600871Z     def get_loc(self, key):
2025-01-22T20:11:05.4600944Z         """
2025-01-22T20:11:05.4601104Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4601169Z     
2025-01-22T20:11:05.4601247Z         Parameters
2025-01-22T20:11:05.4601319Z         ----------
2025-01-22T20:11:05.4601398Z         key : label
2025-01-22T20:11:05.4601463Z     
2025-01-22T20:11:05.4601538Z         Returns
2025-01-22T20:11:05.4601608Z         -------
2025-01-22T20:11:05.4601742Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4601808Z     
2025-01-22T20:11:05.4601883Z         Examples
2025-01-22T20:11:05.4601952Z         --------
2025-01-22T20:11:05.4602056Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4602144Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4602217Z         1
2025-01-22T20:11:05.4602283Z     
2025-01-22T20:11:05.4602388Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4602477Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4602557Z         slice(1, 3, None)
2025-01-22T20:11:05.4602628Z     
2025-01-22T20:11:05.4602734Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4602830Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4602923Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4602995Z         """
2025-01-22T20:11:05.4603096Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4603171Z         try:
2025-01-22T20:11:05.4603270Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4603356Z         except KeyError as err:
2025-01-22T20:11:05.4603451Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4603676Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4603798Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4603872Z             ):
2025-01-22T20:11:05.4603962Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4604051Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4604136Z E           KeyError: 'cups'
2025-01-22T20:11:05.4604140Z 
2025-01-22T20:11:05.4604400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4604742Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] _
2025-01-22T20:11:05.4604747Z 
2025-01-22T20:11:05.4604906Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4605115Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4605191Z        't046000', 't048000'],
2025-01-22T20:11:05.4605274Z       dtype='object')
2025-01-22T20:11:05.4605344Z key = 'cups'
2025-01-22T20:11:05.4605348Z 
2025-01-22T20:11:05.4605433Z     def get_loc(self, key):
2025-01-22T20:11:05.4605506Z         """
2025-01-22T20:11:05.4605664Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4605734Z     
2025-01-22T20:11:05.4605807Z         Parameters
2025-01-22T20:11:05.4605882Z         ----------
2025-01-22T20:11:05.4605953Z         key : label
2025-01-22T20:11:05.4606141Z     
2025-01-22T20:11:05.4606210Z         Returns
2025-01-22T20:11:05.4606285Z         -------
2025-01-22T20:11:05.4606413Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4606484Z     
2025-01-22T20:11:05.4606553Z         Examples
2025-01-22T20:11:05.4606628Z         --------
2025-01-22T20:11:05.4606722Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4606811Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4606977Z         1
2025-01-22T20:11:05.4607052Z     
2025-01-22T20:11:05.4607151Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4607240Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4607319Z         slice(1, 3, None)
2025-01-22T20:11:05.4607392Z     
2025-01-22T20:11:05.4607503Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4607592Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4607685Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4607756Z         """
2025-01-22T20:11:05.4607859Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4607927Z         try:
2025-01-22T20:11:05.4608028Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4608034Z 
2025-01-22T20:11:05.4608276Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4608388Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4608526Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4608598Z     ???
2025-01-22T20:11:05.4608728Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4608800Z     ???
2025-01-22T20:11:05.4609071Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4609137Z     ???
2025-01-22T20:11:05.4609246Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4609254Z 
2025-01-22T20:11:05.4609319Z >   ???
2025-01-22T20:11:05.4609400Z E   KeyError: 'cups'
2025-01-22T20:11:05.4609404Z 
2025-01-22T20:11:05.4609529Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4609533Z 
2025-01-22T20:11:05.4609706Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4609710Z 
2025-01-22T20:11:05.4609932Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4610257Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4610880Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4610885Z 
2025-01-22T20:11:05.4610972Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4611053Z     def plasma(
2025-01-22T20:11:05.4611122Z         self,
2025-01-22T20:11:05.4611206Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4611275Z         config,
2025-01-22T20:11:05.4611345Z     ):
2025-01-22T20:11:05.4611455Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4611555Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4611559Z 
2025-01-22T20:11:05.4611684Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4611791Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4611901Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4611985Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4612153Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4612251Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4612364Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4612528Z     return BasePlasma(
2025-01-22T20:11:05.4612620Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4612705Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4612800Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4612879Z     self.update(**kwargs)
2025-01-22T20:11:05.4612974Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4613093Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4613210Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4613387Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4613719Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4613875Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4614083Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4614182Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4614309Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4614484Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4614651Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4614828Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4615082Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4615261Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4615446Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4615547Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4615805Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4615927Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4616172Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4616263Z     return self.apply_standard()
2025-01-22T20:11:05.4616543Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4616659Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4616967Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4617092Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4617313Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4621123Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4621458Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4621556Z     return self._get_value(key)
2025-01-22T20:11:05.4621833Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4621936Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4622055Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4622060Z 
2025-01-22T20:11:05.4622274Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4622487Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4622574Z        't046000', 't048000'],
2025-01-22T20:11:05.4622652Z       dtype='object')
2025-01-22T20:11:05.4622732Z key = 'cups'
2025-01-22T20:11:05.4622737Z 
2025-01-22T20:11:05.4622825Z     def get_loc(self, key):
2025-01-22T20:11:05.4622894Z         """
2025-01-22T20:11:05.4623065Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4623131Z     
2025-01-22T20:11:05.4623211Z         Parameters
2025-01-22T20:11:05.4623285Z         ----------
2025-01-22T20:11:05.4623362Z         key : label
2025-01-22T20:11:05.4623725Z     
2025-01-22T20:11:05.4623803Z         Returns
2025-01-22T20:11:05.4623874Z         -------
2025-01-22T20:11:05.4624018Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4624085Z     
2025-01-22T20:11:05.4624161Z         Examples
2025-01-22T20:11:05.4624232Z         --------
2025-01-22T20:11:05.4624341Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4624432Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4624614Z         1
2025-01-22T20:11:05.4624687Z     
2025-01-22T20:11:05.4624802Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4624897Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4624973Z         slice(1, 3, None)
2025-01-22T20:11:05.4625046Z     
2025-01-22T20:11:05.4625157Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4625256Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4625348Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4625428Z         """
2025-01-22T20:11:05.4625531Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4625605Z         try:
2025-01-22T20:11:05.4625706Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4625795Z         except KeyError as err:
2025-01-22T20:11:05.4625894Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4626003Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4626131Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4626206Z             ):
2025-01-22T20:11:05.4626306Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4626394Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4626482Z E           KeyError: 'cups'
2025-01-22T20:11:05.4626487Z 
2025-01-22T20:11:05.4626772Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4627096Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] _
2025-01-22T20:11:05.4627101Z 
2025-01-22T20:11:05.4627263Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4627482Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4627558Z        't046000', 't048000'],
2025-01-22T20:11:05.4627641Z       dtype='object')
2025-01-22T20:11:05.4627717Z key = 'cups'
2025-01-22T20:11:05.4627728Z 
2025-01-22T20:11:05.4627809Z     def get_loc(self, key):
2025-01-22T20:11:05.4627885Z         """
2025-01-22T20:11:05.4628046Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4628119Z     
2025-01-22T20:11:05.4628194Z         Parameters
2025-01-22T20:11:05.4628273Z         ----------
2025-01-22T20:11:05.4628346Z         key : label
2025-01-22T20:11:05.4628418Z     
2025-01-22T20:11:05.4628493Z         Returns
2025-01-22T20:11:05.4628568Z         -------
2025-01-22T20:11:05.4628698Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4628771Z     
2025-01-22T20:11:05.4628842Z         Examples
2025-01-22T20:11:05.4628919Z         --------
2025-01-22T20:11:05.4629017Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4629107Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4629176Z         1
2025-01-22T20:11:05.4629248Z     
2025-01-22T20:11:05.4629358Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4629446Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4629529Z         slice(1, 3, None)
2025-01-22T20:11:05.4629595Z     
2025-01-22T20:11:05.4629710Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4629802Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4629898Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4629965Z         """
2025-01-22T20:11:05.4630209Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4630277Z         try:
2025-01-22T20:11:05.4630382Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4630386Z 
2025-01-22T20:11:05.4630635Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4630755Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4630972Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4631045Z     ???
2025-01-22T20:11:05.4631186Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4631254Z     ???
2025-01-22T20:11:05.4631531Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4631598Z     ???
2025-01-22T20:11:05.4631712Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4631717Z 
2025-01-22T20:11:05.4631790Z >   ???
2025-01-22T20:11:05.4631874Z E   KeyError: 'cups'
2025-01-22T20:11:05.4631878Z 
2025-01-22T20:11:05.4632008Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4632012Z 
2025-01-22T20:11:05.4632188Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4632192Z 
2025-01-22T20:11:05.4632421Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4632742Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4633375Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4633380Z 
2025-01-22T20:11:05.4633470Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4633684Z     def plasma(
2025-01-22T20:11:05.4633759Z         self,
2025-01-22T20:11:05.4633848Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4633917Z         config,
2025-01-22T20:11:05.4633990Z     ):
2025-01-22T20:11:05.4634109Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4634212Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4634216Z 
2025-01-22T20:11:05.4634346Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4634457Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4634573Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4634658Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4634837Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4634938Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4635058Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4635137Z     return BasePlasma(
2025-01-22T20:11:05.4635238Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4635342Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4635439Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4635519Z     self.update(**kwargs)
2025-01-22T20:11:05.4635611Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4635734Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4635849Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4635956Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4636196Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4636350Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4636566Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4636660Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4636794Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4637092Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4637269Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4637448Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4637705Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4637883Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4638161Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4638273Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4638535Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4638666Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4638909Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4639006Z     return self.apply_standard()
2025-01-22T20:11:05.4639287Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4639409Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4639717Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4639836Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4640062Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4640149Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4640419Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4640502Z     return self._get_value(key)
2025-01-22T20:11:05.4640764Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4640856Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4640973Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4640977Z 
2025-01-22T20:11:05.4641142Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4641353Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4641432Z        't046000', 't048000'],
2025-01-22T20:11:05.4641510Z       dtype='object')
2025-01-22T20:11:05.4641588Z key = 'cups'
2025-01-22T20:11:05.4641592Z 
2025-01-22T20:11:05.4641672Z     def get_loc(self, key):
2025-01-22T20:11:05.4641744Z         """
2025-01-22T20:11:05.4641905Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4641977Z     
2025-01-22T20:11:05.4642052Z         Parameters
2025-01-22T20:11:05.4642129Z         ----------
2025-01-22T20:11:05.4642205Z         key : label
2025-01-22T20:11:05.4642272Z     
2025-01-22T20:11:05.4642348Z         Returns
2025-01-22T20:11:05.4642419Z         -------
2025-01-22T20:11:05.4642557Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4642623Z     
2025-01-22T20:11:05.4642699Z         Examples
2025-01-22T20:11:05.4642771Z         --------
2025-01-22T20:11:05.4642873Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4642960Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4643032Z         1
2025-01-22T20:11:05.4643102Z     
2025-01-22T20:11:05.4643212Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4643302Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4643382Z         slice(1, 3, None)
2025-01-22T20:11:05.4643448Z     
2025-01-22T20:11:05.4643680Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4643774Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4643870Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4644109Z         """
2025-01-22T20:11:05.4644230Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4644304Z         try:
2025-01-22T20:11:05.4644402Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4644489Z         except KeyError as err:
2025-01-22T20:11:05.4644586Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4644691Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4644914Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4644989Z             ):
2025-01-22T20:11:05.4645082Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4645174Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4645253Z E           KeyError: 'cups'
2025-01-22T20:11:05.4645257Z 
2025-01-22T20:11:05.4645528Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4645841Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] _
2025-01-22T20:11:05.4645849Z 
2025-01-22T20:11:05.4646005Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4646219Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4646293Z        't046000', 't048000'],
2025-01-22T20:11:05.4646372Z       dtype='object')
2025-01-22T20:11:05.4646443Z key = 'cups'
2025-01-22T20:11:05.4646449Z 
2025-01-22T20:11:05.4646534Z     def get_loc(self, key):
2025-01-22T20:11:05.4646600Z         """
2025-01-22T20:11:05.4646760Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4646826Z     
2025-01-22T20:11:05.4646904Z         Parameters
2025-01-22T20:11:05.4646980Z         ----------
2025-01-22T20:11:05.4647051Z         key : label
2025-01-22T20:11:05.4647123Z     
2025-01-22T20:11:05.4647192Z         Returns
2025-01-22T20:11:05.4647271Z         -------
2025-01-22T20:11:05.4647401Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4647475Z     
2025-01-22T20:11:05.4647545Z         Examples
2025-01-22T20:11:05.4647620Z         --------
2025-01-22T20:11:05.4647718Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4647808Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4647875Z         1
2025-01-22T20:11:05.4647945Z     
2025-01-22T20:11:05.4648048Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4648141Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4648216Z         slice(1, 3, None)
2025-01-22T20:11:05.4648286Z     
2025-01-22T20:11:05.4648393Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4648492Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4648589Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4648657Z         """
2025-01-22T20:11:05.4648763Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4648834Z         try:
2025-01-22T20:11:05.4648936Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4648941Z 
2025-01-22T20:11:05.4649192Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4649306Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4649444Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4649521Z     ???
2025-01-22T20:11:05.4649651Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4649723Z     ???
2025-01-22T20:11:05.4649990Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4650063Z     ???
2025-01-22T20:11:05.4650175Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4650179Z 
2025-01-22T20:11:05.4650244Z >   ???
2025-01-22T20:11:05.4650417Z E   KeyError: 'cups'
2025-01-22T20:11:05.4650422Z 
2025-01-22T20:11:05.4650551Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4650554Z 
2025-01-22T20:11:05.4650727Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4650731Z 
2025-01-22T20:11:05.4650952Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4651348Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4651980Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4651984Z 
2025-01-22T20:11:05.4652074Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4652151Z     def plasma(
2025-01-22T20:11:05.4652220Z         self,
2025-01-22T20:11:05.4652312Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4652380Z         config,
2025-01-22T20:11:05.4652451Z     ):
2025-01-22T20:11:05.4652563Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4652664Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4652668Z 
2025-01-22T20:11:05.4652790Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4652903Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4653015Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4653100Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4653274Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4653375Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4653489Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4653667Z     return BasePlasma(
2025-01-22T20:11:05.4653757Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4653849Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4653943Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4654022Z     self.update(**kwargs)
2025-01-22T20:11:05.4654115Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4654238Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4654353Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4654455Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4654700Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4654859Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4655067Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4655166Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4655296Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4655471Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4655643Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4655821Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4656076Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4656251Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4656434Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4656543Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4656802Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4656927Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4657171Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4657259Z     return self.apply_standard()
2025-01-22T20:11:05.4657689Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4657809Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4658121Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4658239Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4658557Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4658644Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4658915Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4659002Z     return self._get_value(key)
2025-01-22T20:11:05.4659259Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4659349Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4659459Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4659464Z 
2025-01-22T20:11:05.4659625Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4659835Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4659915Z        't046000', 't048000'],
2025-01-22T20:11:05.4659990Z       dtype='object')
2025-01-22T20:11:05.4660070Z key = 'cups'
2025-01-22T20:11:05.4660074Z 
2025-01-22T20:11:05.4660157Z     def get_loc(self, key):
2025-01-22T20:11:05.4660225Z         """
2025-01-22T20:11:05.4660391Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4660457Z     
2025-01-22T20:11:05.4660535Z         Parameters
2025-01-22T20:11:05.4660606Z         ----------
2025-01-22T20:11:05.4660686Z         key : label
2025-01-22T20:11:05.4660752Z     
2025-01-22T20:11:05.4660826Z         Returns
2025-01-22T20:11:05.4660899Z         -------
2025-01-22T20:11:05.4661035Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4661101Z     
2025-01-22T20:11:05.4661179Z         Examples
2025-01-22T20:11:05.4661250Z         --------
2025-01-22T20:11:05.4661352Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4661436Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4661509Z         1
2025-01-22T20:11:05.4661574Z     
2025-01-22T20:11:05.4661686Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4661781Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4661857Z         slice(1, 3, None)
2025-01-22T20:11:05.4661927Z     
2025-01-22T20:11:05.4662034Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4662129Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4662219Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4662292Z         """
2025-01-22T20:11:05.4662393Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4662471Z         try:
2025-01-22T20:11:05.4662569Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4662656Z         except KeyError as err:
2025-01-22T20:11:05.4662766Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4662864Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4662987Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4663057Z             ):
2025-01-22T20:11:05.4663154Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4663241Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4663327Z E           KeyError: 'cups'
2025-01-22T20:11:05.4663332Z 
2025-01-22T20:11:05.4663699Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4664043Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-transition_probabilities] _
2025-01-22T20:11:05.4664383Z 
2025-01-22T20:11:05.4664549Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4664760Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4664839Z        't046000', 't048000'],
2025-01-22T20:11:05.4664913Z       dtype='object')
2025-01-22T20:11:05.4664992Z key = 'cups'
2025-01-22T20:11:05.4664996Z 
2025-01-22T20:11:05.4665178Z     def get_loc(self, key):
2025-01-22T20:11:05.4665249Z         """
2025-01-22T20:11:05.4665413Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4665478Z     
2025-01-22T20:11:05.4665553Z         Parameters
2025-01-22T20:11:05.4665624Z         ----------
2025-01-22T20:11:05.4665699Z         key : label
2025-01-22T20:11:05.4665765Z     
2025-01-22T20:11:05.4665840Z         Returns
2025-01-22T20:11:05.4665909Z         -------
2025-01-22T20:11:05.4666048Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4666113Z     
2025-01-22T20:11:05.4666187Z         Examples
2025-01-22T20:11:05.4666257Z         --------
2025-01-22T20:11:05.4666360Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4666445Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4666516Z         1
2025-01-22T20:11:05.4666583Z     
2025-01-22T20:11:05.4666686Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4666774Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4666855Z         slice(1, 3, None)
2025-01-22T20:11:05.4666927Z     
2025-01-22T20:11:05.4667033Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4667130Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4667218Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4667291Z         """
2025-01-22T20:11:05.4667389Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4667465Z         try:
2025-01-22T20:11:05.4667562Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4667566Z 
2025-01-22T20:11:05.4667816Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4667925Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4668066Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4668134Z     ???
2025-01-22T20:11:05.4668272Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4668343Z     ???
2025-01-22T20:11:05.4668611Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4668682Z     ???
2025-01-22T20:11:05.4668787Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4668791Z 
2025-01-22T20:11:05.4668861Z >   ???
2025-01-22T20:11:05.4668939Z E   KeyError: 'cups'
2025-01-22T20:11:05.4668946Z 
2025-01-22T20:11:05.4669078Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4669082Z 
2025-01-22T20:11:05.4669248Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4669253Z 
2025-01-22T20:11:05.4669485Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4669809Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4670432Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4670436Z 
2025-01-22T20:11:05.4670530Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4670603Z     def plasma(
2025-01-22T20:11:05.4670676Z         self,
2025-01-22T20:11:05.4670755Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4670918Z         config,
2025-01-22T20:11:05.4670984Z     ):
2025-01-22T20:11:05.4671101Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4671193Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4671203Z 
2025-01-22T20:11:05.4671323Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4671434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4671614Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4671703Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4671868Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4671971Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4672081Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4672162Z     return BasePlasma(
2025-01-22T20:11:05.4672245Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4672337Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4672430Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4672514Z     self.update(**kwargs)
2025-01-22T20:11:05.4672601Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4672727Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4672840Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4672944Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4673186Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4673336Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4673678Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4673778Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4673914Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4674083Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4674260Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4674432Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4674692Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4674865Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4675046Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4675160Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4675415Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4675541Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4675780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4675869Z     return self.apply_standard()
2025-01-22T20:11:05.4676145Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4676270Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4676577Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4676698Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4676916Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4677003Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4677270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4677353Z     return self._get_value(key)
2025-01-22T20:11:05.4677615Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4677701Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4677812Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4677935Z 
2025-01-22T20:11:05.4678093Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4678305Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4678383Z        't046000', 't048000'],
2025-01-22T20:11:05.4678459Z       dtype='object')
2025-01-22T20:11:05.4678536Z key = 'cups'
2025-01-22T20:11:05.4678540Z 
2025-01-22T20:11:05.4678735Z     def get_loc(self, key):
2025-01-22T20:11:05.4678810Z         """
2025-01-22T20:11:05.4678967Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4679038Z     
2025-01-22T20:11:05.4679110Z         Parameters
2025-01-22T20:11:05.4679185Z         ----------
2025-01-22T20:11:05.4679257Z         key : label
2025-01-22T20:11:05.4679327Z     
2025-01-22T20:11:05.4679398Z         Returns
2025-01-22T20:11:05.4679472Z         -------
2025-01-22T20:11:05.4679606Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4679677Z     
2025-01-22T20:11:05.4679747Z         Examples
2025-01-22T20:11:05.4679825Z         --------
2025-01-22T20:11:05.4679926Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4680010Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4680081Z         1
2025-01-22T20:11:05.4680146Z     
2025-01-22T20:11:05.4680252Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4680342Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4680422Z         slice(1, 3, None)
2025-01-22T20:11:05.4680489Z     
2025-01-22T20:11:05.4680598Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4680689Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4680788Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4680856Z         """
2025-01-22T20:11:05.4680962Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4681036Z         try:
2025-01-22T20:11:05.4681139Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4681220Z         except KeyError as err:
2025-01-22T20:11:05.4681321Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4681426Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4681544Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4681616Z             ):
2025-01-22T20:11:05.4681710Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4681801Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4681881Z E           KeyError: 'cups'
2025-01-22T20:11:05.4681885Z 
2025-01-22T20:11:05.4682155Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4682458Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] _
2025-01-22T20:11:05.4682466Z 
2025-01-22T20:11:05.4682624Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4682834Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4682908Z        't046000', 't048000'],
2025-01-22T20:11:05.4682986Z       dtype='object')
2025-01-22T20:11:05.4683057Z key = 'cups'
2025-01-22T20:11:05.4683061Z 
2025-01-22T20:11:05.4683145Z     def get_loc(self, key):
2025-01-22T20:11:05.4683216Z         """
2025-01-22T20:11:05.4683379Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4683445Z     
2025-01-22T20:11:05.4683636Z         Parameters
2025-01-22T20:11:05.4683709Z         ----------
2025-01-22T20:11:05.4683788Z         key : label
2025-01-22T20:11:05.4683855Z     
2025-01-22T20:11:05.4683927Z         Returns
2025-01-22T20:11:05.4683997Z         -------
2025-01-22T20:11:05.4684133Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4684318Z     
2025-01-22T20:11:05.4684393Z         Examples
2025-01-22T20:11:05.4684464Z         --------
2025-01-22T20:11:05.4684563Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4684652Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4684719Z         1
2025-01-22T20:11:05.4684790Z     
2025-01-22T20:11:05.4684889Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4684981Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4685156Z         slice(1, 3, None)
2025-01-22T20:11:05.4685229Z     
2025-01-22T20:11:05.4685334Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4685428Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4685516Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4685589Z         """
2025-01-22T20:11:05.4685686Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4685760Z         try:
2025-01-22T20:11:05.4685861Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4685865Z 
2025-01-22T20:11:05.4686108Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4686220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4686354Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4686427Z     ???
2025-01-22T20:11:05.4686559Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4686631Z     ???
2025-01-22T20:11:05.4686897Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4686967Z     ???
2025-01-22T20:11:05.4687071Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4687076Z 
2025-01-22T20:11:05.4687146Z >   ???
2025-01-22T20:11:05.4687222Z E   KeyError: 'cups'
2025-01-22T20:11:05.4687226Z 
2025-01-22T20:11:05.4687361Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4687368Z 
2025-01-22T20:11:05.4687539Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4687544Z 
2025-01-22T20:11:05.4687765Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4688111Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4688739Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4688743Z 
2025-01-22T20:11:05.4688837Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4688908Z     def plasma(
2025-01-22T20:11:05.4688981Z         self,
2025-01-22T20:11:05.4689066Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4689136Z         config,
2025-01-22T20:11:05.4689211Z     ):
2025-01-22T20:11:05.4689321Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4689421Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4689424Z 
2025-01-22T20:11:05.4689543Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4689653Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4689758Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4689850Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4690013Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4690120Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4690229Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4690312Z     return BasePlasma(
2025-01-22T20:11:05.4690397Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4690489Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4690580Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4690747Z     self.update(**kwargs)
2025-01-22T20:11:05.4690840Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4690960Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4691077Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4691178Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4691416Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4691635Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4691852Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4691946Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4692078Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4692252Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4692420Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4692605Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4692859Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4693034Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4693212Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4693317Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4693668Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4693798Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4694040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4694134Z     return self.apply_standard()
2025-01-22T20:11:05.4694438Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4694565Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4694883Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4695003Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4695222Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4695307Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4695579Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4695661Z     return self._get_value(key)
2025-01-22T20:11:05.4695923Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4696008Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4696118Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4696126Z 
2025-01-22T20:11:05.4696285Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4696496Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4696576Z        't046000', 't048000'],
2025-01-22T20:11:05.4696651Z       dtype='object')
2025-01-22T20:11:05.4696727Z key = 'cups'
2025-01-22T20:11:05.4696731Z 
2025-01-22T20:11:05.4696810Z     def get_loc(self, key):
2025-01-22T20:11:05.4696889Z         """
2025-01-22T20:11:05.4697046Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4697117Z     
2025-01-22T20:11:05.4697189Z         Parameters
2025-01-22T20:11:05.4697266Z         ----------
2025-01-22T20:11:05.4697336Z         key : label
2025-01-22T20:11:05.4697411Z     
2025-01-22T20:11:05.4697483Z         Returns
2025-01-22T20:11:05.4697552Z         -------
2025-01-22T20:11:05.4697687Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4697872Z     
2025-01-22T20:11:05.4697948Z         Examples
2025-01-22T20:11:05.4698019Z         --------
2025-01-22T20:11:05.4698118Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4698201Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4698272Z         1
2025-01-22T20:11:05.4698338Z     
2025-01-22T20:11:05.4698445Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4698630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4698713Z         slice(1, 3, None)
2025-01-22T20:11:05.4698779Z     
2025-01-22T20:11:05.4698889Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4698979Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4699077Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4699145Z         """
2025-01-22T20:11:05.4699250Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4699323Z         try:
2025-01-22T20:11:05.4699424Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4699511Z         except KeyError as err:
2025-01-22T20:11:05.4699606Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4699708Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4699825Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4699897Z             ):
2025-01-22T20:11:05.4699987Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4700080Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4700158Z E           KeyError: 'cups'
2025-01-22T20:11:05.4700163Z 
2025-01-22T20:11:05.4700433Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4700762Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues_norm_factor] _
2025-01-22T20:11:05.4700767Z 
2025-01-22T20:11:05.4700920Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4701133Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4701206Z        't046000', 't048000'],
2025-01-22T20:11:05.4701285Z       dtype='object')
2025-01-22T20:11:05.4701356Z key = 'cups'
2025-01-22T20:11:05.4701361Z 
2025-01-22T20:11:05.4701444Z     def get_loc(self, key):
2025-01-22T20:11:05.4701513Z         """
2025-01-22T20:11:05.4701677Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4701747Z     
2025-01-22T20:11:05.4701825Z         Parameters
2025-01-22T20:11:05.4701896Z         ----------
2025-01-22T20:11:05.4701972Z         key : label
2025-01-22T20:11:05.4702045Z     
2025-01-22T20:11:05.4702114Z         Returns
2025-01-22T20:11:05.4702190Z         -------
2025-01-22T20:11:05.4702317Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4702392Z     
2025-01-22T20:11:05.4702463Z         Examples
2025-01-22T20:11:05.4702537Z         --------
2025-01-22T20:11:05.4702631Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4702721Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4702788Z         1
2025-01-22T20:11:05.4702858Z     
2025-01-22T20:11:05.4702958Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4703050Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4703126Z         slice(1, 3, None)
2025-01-22T20:11:05.4703201Z     
2025-01-22T20:11:05.4703304Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4703400Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4703489Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4703685Z         """
2025-01-22T20:11:05.4703792Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4703863Z         try:
2025-01-22T20:11:05.4703968Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4704090Z 
2025-01-22T20:11:05.4704335Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4704448Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4704582Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4704655Z     ???
2025-01-22T20:11:05.4704784Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4704855Z     ???
2025-01-22T20:11:05.4705239Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4705314Z     ???
2025-01-22T20:11:05.4705421Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4705431Z 
2025-01-22T20:11:05.4705497Z >   ???
2025-01-22T20:11:05.4705578Z E   KeyError: 'cups'
2025-01-22T20:11:05.4705582Z 
2025-01-22T20:11:05.4705710Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4705721Z 
2025-01-22T20:11:05.4705893Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4705898Z 
2025-01-22T20:11:05.4706121Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4706440Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4707061Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4707071Z 
2025-01-22T20:11:05.4707158Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4707235Z     def plasma(
2025-01-22T20:11:05.4707304Z         self,
2025-01-22T20:11:05.4707386Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4707455Z         config,
2025-01-22T20:11:05.4707525Z     ):
2025-01-22T20:11:05.4707639Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4707738Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4707742Z 
2025-01-22T20:11:05.4707861Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4707971Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4708075Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4708163Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4708333Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4708430Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4708543Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4708620Z     return BasePlasma(
2025-01-22T20:11:05.4708709Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4708793Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4708886Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4708969Z     self.update(**kwargs)
2025-01-22T20:11:05.4709060Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4709179Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4709292Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4709394Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4709629Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4709788Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4710000Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4710101Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4710227Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4710400Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4710568Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4710833Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4711089Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4711263Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4711442Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4711548Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4711874Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4711997Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4712240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4712326Z     return self.apply_standard()
2025-01-22T20:11:05.4712611Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4712731Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4713040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4713155Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4713373Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4713457Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4713843Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4713932Z     return self._get_value(key)
2025-01-22T20:11:05.4714188Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4714281Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4714388Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4714392Z 
2025-01-22T20:11:05.4714556Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4714762Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4714841Z        't046000', 't048000'],
2025-01-22T20:11:05.4714915Z       dtype='object')
2025-01-22T20:11:05.4714995Z key = 'cups'
2025-01-22T20:11:05.4714999Z 
2025-01-22T20:11:05.4715081Z     def get_loc(self, key):
2025-01-22T20:11:05.4715153Z         """
2025-01-22T20:11:05.4715318Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4715384Z     
2025-01-22T20:11:05.4715461Z         Parameters
2025-01-22T20:11:05.4715533Z         ----------
2025-01-22T20:11:05.4715609Z         key : label
2025-01-22T20:11:05.4715675Z     
2025-01-22T20:11:05.4715748Z         Returns
2025-01-22T20:11:05.4715818Z         -------
2025-01-22T20:11:05.4715952Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4716021Z     
2025-01-22T20:11:05.4716095Z         Examples
2025-01-22T20:11:05.4716165Z         --------
2025-01-22T20:11:05.4716265Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4716350Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4716423Z         1
2025-01-22T20:11:05.4716489Z     
2025-01-22T20:11:05.4716594Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4716681Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4716764Z         slice(1, 3, None)
2025-01-22T20:11:05.4716835Z     
2025-01-22T20:11:05.4716941Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4717036Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4717125Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4717196Z         """
2025-01-22T20:11:05.4717296Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4717369Z         try:
2025-01-22T20:11:05.4717466Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4717675Z         except KeyError as err:
2025-01-22T20:11:05.4717772Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4717873Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4717988Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4718061Z             ):
2025-01-22T20:11:05.4718153Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4718343Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4718429Z E           KeyError: 'cups'
2025-01-22T20:11:05.4718434Z 
2025-01-22T20:11:05.4718698Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4719022Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blue_estimator] _
2025-01-22T20:11:05.4719026Z 
2025-01-22T20:11:05.4719178Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4719391Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4719464Z        't046000', 't048000'],
2025-01-22T20:11:05.4719544Z       dtype='object')
2025-01-22T20:11:05.4719615Z key = 'cups'
2025-01-22T20:11:05.4719620Z 
2025-01-22T20:11:05.4719706Z     def get_loc(self, key):
2025-01-22T20:11:05.4719779Z         """
2025-01-22T20:11:05.4719938Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4720008Z     
2025-01-22T20:11:05.4720081Z         Parameters
2025-01-22T20:11:05.4720162Z         ----------
2025-01-22T20:11:05.4720232Z         key : label
2025-01-22T20:11:05.4720303Z     
2025-01-22T20:11:05.4720372Z         Returns
2025-01-22T20:11:05.4720446Z         -------
2025-01-22T20:11:05.4720575Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4720646Z     
2025-01-22T20:11:05.4720716Z         Examples
2025-01-22T20:11:05.4720793Z         --------
2025-01-22T20:11:05.4720892Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4720983Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4721052Z         1
2025-01-22T20:11:05.4721122Z     
2025-01-22T20:11:05.4721219Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4721309Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4721390Z         slice(1, 3, None)
2025-01-22T20:11:05.4721456Z     
2025-01-22T20:11:05.4721569Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4721660Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4721753Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4721821Z         """
2025-01-22T20:11:05.4721927Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4721995Z         try:
2025-01-22T20:11:05.4722096Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4722100Z 
2025-01-22T20:11:05.4722379Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4722492Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4722626Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4722699Z     ???
2025-01-22T20:11:05.4722833Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4722899Z     ???
2025-01-22T20:11:05.4723181Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4723247Z     ???
2025-01-22T20:11:05.4723359Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4723364Z 
2025-01-22T20:11:05.4723430Z >   ???
2025-01-22T20:11:05.4723634Z E   KeyError: 'cups'
2025-01-22T20:11:05.4723638Z 
2025-01-22T20:11:05.4723765Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4723769Z 
2025-01-22T20:11:05.4724062Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4724066Z 
2025-01-22T20:11:05.4724293Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4724611Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4725359Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4725363Z 
2025-01-22T20:11:05.4725452Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4725530Z     def plasma(
2025-01-22T20:11:05.4725599Z         self,
2025-01-22T20:11:05.4725684Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4725753Z         config,
2025-01-22T20:11:05.4725825Z     ):
2025-01-22T20:11:05.4725934Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4726036Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4726040Z 
2025-01-22T20:11:05.4726164Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4726270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4726378Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4726461Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4726633Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4726732Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4726845Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4726923Z     return BasePlasma(
2025-01-22T20:11:05.4727012Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4727097Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4727190Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4727269Z     self.update(**kwargs)
2025-01-22T20:11:05.4727364Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4727488Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4727598Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4727705Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4727937Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4728093Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4728304Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4728406Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4728534Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4728706Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4728874Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4729052Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4729310Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4729486Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4729670Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4729770Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4730028Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4730154Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4730397Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4730483Z     return self.apply_standard()
2025-01-22T20:11:05.4730764Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4730881Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4731296Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4731417Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4731633Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4731723Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4732055Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4732145Z     return self._get_value(key)
2025-01-22T20:11:05.4732404Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4732494Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4732599Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4732603Z 
2025-01-22T20:11:05.4732761Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4732977Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4733050Z        't046000', 't048000'],
2025-01-22T20:11:05.4733129Z       dtype='object')
2025-01-22T20:11:05.4733203Z key = 'cups'
2025-01-22T20:11:05.4733207Z 
2025-01-22T20:11:05.4733290Z     def get_loc(self, key):
2025-01-22T20:11:05.4733357Z         """
2025-01-22T20:11:05.4733618Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4733685Z     
2025-01-22T20:11:05.4733763Z         Parameters
2025-01-22T20:11:05.4733837Z         ----------
2025-01-22T20:11:05.4733914Z         key : label
2025-01-22T20:11:05.4733980Z     
2025-01-22T20:11:05.4734057Z         Returns
2025-01-22T20:11:05.4734127Z         -------
2025-01-22T20:11:05.4734262Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4734328Z     
2025-01-22T20:11:05.4734406Z         Examples
2025-01-22T20:11:05.4734476Z         --------
2025-01-22T20:11:05.4734576Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4734665Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4734732Z         1
2025-01-22T20:11:05.4734802Z     
2025-01-22T20:11:05.4734903Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4734994Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4735070Z         slice(1, 3, None)
2025-01-22T20:11:05.4735144Z     
2025-01-22T20:11:05.4735249Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4735346Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4735435Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4735508Z         """
2025-01-22T20:11:05.4735608Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4735680Z         try:
2025-01-22T20:11:05.4735776Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4735865Z         except KeyError as err:
2025-01-22T20:11:05.4735960Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4736063Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4736184Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4736253Z             ):
2025-01-22T20:11:05.4736348Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4736434Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4736521Z E           KeyError: 'cups'
2025-01-22T20:11:05.4736525Z 
2025-01-22T20:11:05.4736788Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4737087Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-volume] _
2025-01-22T20:11:05.4737091Z 
2025-01-22T20:11:05.4737246Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4737459Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4737669Z        't046000', 't048000'],
2025-01-22T20:11:05.4737743Z       dtype='object')
2025-01-22T20:11:05.4737818Z key = 'cups'
2025-01-22T20:11:05.4737822Z 
2025-01-22T20:11:05.4737900Z     def get_loc(self, key):
2025-01-22T20:11:05.4737972Z         """
2025-01-22T20:11:05.4738129Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4738297Z     
2025-01-22T20:11:05.4738372Z         Parameters
2025-01-22T20:11:05.4738451Z         ----------
2025-01-22T20:11:05.4738522Z         key : label
2025-01-22T20:11:05.4738592Z     
2025-01-22T20:11:05.4738659Z         Returns
2025-01-22T20:11:05.4738733Z         -------
2025-01-22T20:11:05.4738863Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4738934Z     
2025-01-22T20:11:05.4739004Z         Examples
2025-01-22T20:11:05.4739083Z         --------
2025-01-22T20:11:05.4739192Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4739277Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4739350Z         1
2025-01-22T20:11:05.4739416Z     
2025-01-22T20:11:05.4739520Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4739605Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4739686Z         slice(1, 3, None)
2025-01-22T20:11:05.4739753Z     
2025-01-22T20:11:05.4739868Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4739957Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4740053Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4740121Z         """
2025-01-22T20:11:05.4740228Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4740297Z         try:
2025-01-22T20:11:05.4740397Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4740402Z 
2025-01-22T20:11:05.4740645Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4740758Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4740899Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4740966Z     ???
2025-01-22T20:11:05.4741101Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4741168Z     ???
2025-01-22T20:11:05.4741444Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4741513Z     ???
2025-01-22T20:11:05.4741623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4741627Z 
2025-01-22T20:11:05.4741693Z >   ???
2025-01-22T20:11:05.4741775Z E   KeyError: 'cups'
2025-01-22T20:11:05.4741780Z 
2025-01-22T20:11:05.4741905Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4741914Z 
2025-01-22T20:11:05.4742078Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4742086Z 
2025-01-22T20:11:05.4742313Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4742627Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4743252Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4743256Z 
2025-01-22T20:11:05.4743343Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4743421Z     def plasma(
2025-01-22T20:11:05.4743591Z         self,
2025-01-22T20:11:05.4743675Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4743753Z         config,
2025-01-22T20:11:05.4743820Z     ):
2025-01-22T20:11:05.4743935Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4744149Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4744153Z 
2025-01-22T20:11:05.4744279Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4744385Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4744492Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4744574Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4744742Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4744938Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4745053Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4745130Z     return BasePlasma(
2025-01-22T20:11:05.4745219Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4745310Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4745397Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4745480Z     self.update(**kwargs)
2025-01-22T20:11:05.4745566Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4745694Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4745808Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4745920Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4746152Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4746306Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4746517Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4746616Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4746743Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4746914Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4747091Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4747263Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4747529Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4747699Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4747883Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4747985Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4748239Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4748364Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4748604Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4748695Z     return self.apply_standard()
2025-01-22T20:11:05.4748971Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4749095Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4749398Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4749522Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4749736Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4749825Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4750089Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4750179Z     return self._get_value(key)
2025-01-22T20:11:05.4750434Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4750525Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4750635Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4750640Z 
2025-01-22T20:11:05.4750793Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4751097Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4751171Z        't046000', 't048000'],
2025-01-22T20:11:05.4751250Z       dtype='object')
2025-01-22T20:11:05.4751320Z key = 'cups'
2025-01-22T20:11:05.4751324Z 
2025-01-22T20:11:05.4751407Z     def get_loc(self, key):
2025-01-22T20:11:05.4751474Z         """
2025-01-22T20:11:05.4751639Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4751776Z     
2025-01-22T20:11:05.4751855Z         Parameters
2025-01-22T20:11:05.4751926Z         ----------
2025-01-22T20:11:05.4752007Z         key : label
2025-01-22T20:11:05.4752078Z     
2025-01-22T20:11:05.4752146Z         Returns
2025-01-22T20:11:05.4752220Z         -------
2025-01-22T20:11:05.4752349Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4752421Z     
2025-01-22T20:11:05.4752491Z         Examples
2025-01-22T20:11:05.4752568Z         --------
2025-01-22T20:11:05.4752667Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4752755Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4752821Z         1
2025-01-22T20:11:05.4752892Z     
2025-01-22T20:11:05.4752993Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4753086Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4753161Z         slice(1, 3, None)
2025-01-22T20:11:05.4753233Z     
2025-01-22T20:11:05.4753339Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4753436Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4753644Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4753723Z         """
2025-01-22T20:11:05.4753830Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4753898Z         try:
2025-01-22T20:11:05.4754002Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4754086Z         except KeyError as err:
2025-01-22T20:11:05.4754191Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4754289Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4754412Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4754480Z             ):
2025-01-22T20:11:05.4754575Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4754661Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4754746Z E           KeyError: 'cups'
2025-01-22T20:11:05.4754750Z 
2025-01-22T20:11:05.4755018Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4755321Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-r_inner] _
2025-01-22T20:11:05.4755325Z 
2025-01-22T20:11:05.4755483Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4755689Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4755772Z        't046000', 't048000'],
2025-01-22T20:11:05.4755848Z       dtype='object')
2025-01-22T20:11:05.4755923Z key = 'cups'
2025-01-22T20:11:05.4755927Z 
2025-01-22T20:11:05.4756005Z     def get_loc(self, key):
2025-01-22T20:11:05.4756078Z         """
2025-01-22T20:11:05.4756235Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4756305Z     
2025-01-22T20:11:05.4756376Z         Parameters
2025-01-22T20:11:05.4756455Z         ----------
2025-01-22T20:11:05.4756531Z         key : label
2025-01-22T20:11:05.4756597Z     
2025-01-22T20:11:05.4756669Z         Returns
2025-01-22T20:11:05.4756741Z         -------
2025-01-22T20:11:05.4756874Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4756939Z     
2025-01-22T20:11:05.4757014Z         Examples
2025-01-22T20:11:05.4757085Z         --------
2025-01-22T20:11:05.4757185Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4757410Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4757483Z         1
2025-01-22T20:11:05.4757549Z     
2025-01-22T20:11:05.4757654Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4757739Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4757818Z         slice(1, 3, None)
2025-01-22T20:11:05.4757884Z     
2025-01-22T20:11:05.4757993Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4758182Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4758278Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4758350Z         """
2025-01-22T20:11:05.4758449Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4758522Z         try:
2025-01-22T20:11:05.4758619Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4758623Z 
2025-01-22T20:11:05.4758870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4758981Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4759122Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4759188Z     ???
2025-01-22T20:11:05.4759322Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4759389Z     ???
2025-01-22T20:11:05.4759662Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4759729Z     ???
2025-01-22T20:11:05.4759841Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4759845Z 
2025-01-22T20:11:05.4759916Z >   ???
2025-01-22T20:11:05.4759992Z E   KeyError: 'cups'
2025-01-22T20:11:05.4759996Z 
2025-01-22T20:11:05.4760127Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4760131Z 
2025-01-22T20:11:05.4760296Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4760300Z 
2025-01-22T20:11:05.4760525Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4760840Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4761467Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4761472Z 
2025-01-22T20:11:05.4761568Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4761639Z     def plasma(
2025-01-22T20:11:05.4761713Z         self,
2025-01-22T20:11:05.4761792Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4761865Z         config,
2025-01-22T20:11:05.4761931Z     ):
2025-01-22T20:11:05.4762048Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4762142Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4762150Z 
2025-01-22T20:11:05.4762276Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4762383Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4762492Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4762582Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4762746Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4762850Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4762962Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4763045Z     return BasePlasma(
2025-01-22T20:11:05.4763128Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4763220Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4763311Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4763393Z     self.update(**kwargs)
2025-01-22T20:11:05.4763481Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4763726Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4763957Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4764065Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4764297Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4764453Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4764669Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4764863Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4765000Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4765170Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4765344Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4765516Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4765776Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4765953Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4766138Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4766241Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4766498Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4766632Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4766869Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4766964Z     return self.apply_standard()
2025-01-22T20:11:05.4767239Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4767362Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4767665Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4767791Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4768006Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4768096Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4768363Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4768448Z     return self._get_value(key)
2025-01-22T20:11:05.4768715Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4768803Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4768914Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4768919Z 
2025-01-22T20:11:05.4769078Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4769294Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4769371Z        't046000', 't048000'],
2025-01-22T20:11:05.4769451Z       dtype='object')
2025-01-22T20:11:05.4769523Z key = 'cups'
2025-01-22T20:11:05.4769527Z 
2025-01-22T20:11:05.4769613Z     def get_loc(self, key):
2025-01-22T20:11:05.4769686Z         """
2025-01-22T20:11:05.4769843Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4769914Z     
2025-01-22T20:11:05.4769989Z         Parameters
2025-01-22T20:11:05.4770066Z         ----------
2025-01-22T20:11:05.4770137Z         key : label
2025-01-22T20:11:05.4770209Z     
2025-01-22T20:11:05.4770281Z         Returns
2025-01-22T20:11:05.4770355Z         -------
2025-01-22T20:11:05.4770487Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4770557Z     
2025-01-22T20:11:05.4770626Z         Examples
2025-01-22T20:11:05.4770701Z         --------
2025-01-22T20:11:05.4770799Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4770973Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4771041Z         1
2025-01-22T20:11:05.4771111Z     
2025-01-22T20:11:05.4771213Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4771307Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4771389Z         slice(1, 3, None)
2025-01-22T20:11:05.4771455Z     
2025-01-22T20:11:05.4771567Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4771731Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4771828Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4771896Z         """
2025-01-22T20:11:05.4772001Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4772069Z         try:
2025-01-22T20:11:05.4772171Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4772253Z         except KeyError as err:
2025-01-22T20:11:05.4772355Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4772459Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4772583Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4772649Z             ):
2025-01-22T20:11:05.4772746Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4772838Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4772917Z E           KeyError: 'cups'
2025-01-22T20:11:05.4772921Z 
2025-01-22T20:11:05.4773195Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4773614Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population] _
2025-01-22T20:11:05.4773619Z 
2025-01-22T20:11:05.4773782Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4773989Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4774070Z        't046000', 't048000'],
2025-01-22T20:11:05.4774144Z       dtype='object')
2025-01-22T20:11:05.4774220Z key = 'cups'
2025-01-22T20:11:05.4774224Z 
2025-01-22T20:11:05.4774309Z     def get_loc(self, key):
2025-01-22T20:11:05.4774378Z         """
2025-01-22T20:11:05.4774540Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4774605Z     
2025-01-22T20:11:05.4774681Z         Parameters
2025-01-22T20:11:05.4774751Z         ----------
2025-01-22T20:11:05.4774829Z         key : label
2025-01-22T20:11:05.4774895Z     
2025-01-22T20:11:05.4774968Z         Returns
2025-01-22T20:11:05.4775036Z         -------
2025-01-22T20:11:05.4775170Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4775235Z     
2025-01-22T20:11:05.4775309Z         Examples
2025-01-22T20:11:05.4775378Z         --------
2025-01-22T20:11:05.4775478Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4775564Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4775640Z         1
2025-01-22T20:11:05.4775706Z     
2025-01-22T20:11:05.4775811Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4775904Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4775978Z         slice(1, 3, None)
2025-01-22T20:11:05.4776050Z     
2025-01-22T20:11:05.4776153Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4776248Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4776340Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4776412Z         """
2025-01-22T20:11:05.4776511Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4776585Z         try:
2025-01-22T20:11:05.4776683Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4776687Z 
2025-01-22T20:11:05.4776934Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4777042Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4777304Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4777371Z     ???
2025-01-22T20:11:05.4777505Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4777576Z     ???
2025-01-22T20:11:05.4777852Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4777923Z     ???
2025-01-22T20:11:05.4778149Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4778154Z 
2025-01-22T20:11:05.4778226Z >   ???
2025-01-22T20:11:05.4778301Z E   KeyError: 'cups'
2025-01-22T20:11:05.4778305Z 
2025-01-22T20:11:05.4778437Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4778441Z 
2025-01-22T20:11:05.4778607Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4778611Z 
2025-01-22T20:11:05.4778835Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4779160Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4779777Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4779781Z 
2025-01-22T20:11:05.4779877Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4779949Z     def plasma(
2025-01-22T20:11:05.4780022Z         self,
2025-01-22T20:11:05.4780102Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4780175Z         config,
2025-01-22T20:11:05.4780242Z     ):
2025-01-22T20:11:05.4780357Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4780450Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4780459Z 
2025-01-22T20:11:05.4780581Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4780690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4780794Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4780882Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4781048Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4781152Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4781263Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4781345Z     return BasePlasma(
2025-01-22T20:11:05.4781430Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4781522Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4781610Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4781694Z     self.update(**kwargs)
2025-01-22T20:11:05.4781781Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4781906Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4782020Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4782125Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4782360Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4782514Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4782728Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4782823Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4782957Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4783122Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4783298Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4783470Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4783859Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4784160Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4784339Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4784445Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4784698Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4784826Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4785163Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4785255Z     return self.apply_standard()
2025-01-22T20:11:05.4785529Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4785653Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4785963Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4786082Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4786306Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4786391Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4786657Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4786739Z     return self._get_value(key)
2025-01-22T20:11:05.4787003Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4787089Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4787199Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4787203Z 
2025-01-22T20:11:05.4787356Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4787568Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4787649Z        't046000', 't048000'],
2025-01-22T20:11:05.4787724Z       dtype='object')
2025-01-22T20:11:05.4787800Z key = 'cups'
2025-01-22T20:11:05.4787804Z 
2025-01-22T20:11:05.4787882Z     def get_loc(self, key):
2025-01-22T20:11:05.4787953Z         """
2025-01-22T20:11:05.4788110Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4788182Z     
2025-01-22T20:11:05.4788255Z         Parameters
2025-01-22T20:11:05.4788333Z         ----------
2025-01-22T20:11:05.4788405Z         key : label
2025-01-22T20:11:05.4788476Z     
2025-01-22T20:11:05.4788543Z         Returns
2025-01-22T20:11:05.4792305Z         -------
2025-01-22T20:11:05.4792484Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4792560Z     
2025-01-22T20:11:05.4792634Z         Examples
2025-01-22T20:11:05.4792714Z         --------
2025-01-22T20:11:05.4792818Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4792920Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4792989Z         1
2025-01-22T20:11:05.4793063Z     
2025-01-22T20:11:05.4793181Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4793272Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4793356Z         slice(1, 3, None)
2025-01-22T20:11:05.4793422Z     
2025-01-22T20:11:05.4793688Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4793789Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4793891Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4793961Z         """
2025-01-22T20:11:05.4794072Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4794140Z         try:
2025-01-22T20:11:05.4794247Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4794335Z         except KeyError as err:
2025-01-22T20:11:05.4794438Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4794540Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4794832Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4794908Z             ):
2025-01-22T20:11:05.4795003Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4795096Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4795178Z E           KeyError: 'cups'
2025-01-22T20:11:05.4795183Z 
2025-01-22T20:11:05.4795605Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4795957Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population_updated] _
2025-01-22T20:11:05.4795962Z 
2025-01-22T20:11:05.4796130Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4796346Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4796432Z        't046000', 't048000'],
2025-01-22T20:11:05.4796519Z       dtype='object')
2025-01-22T20:11:05.4796592Z key = 'cups'
2025-01-22T20:11:05.4796596Z 
2025-01-22T20:11:05.4796683Z     def get_loc(self, key):
2025-01-22T20:11:05.4796751Z         """
2025-01-22T20:11:05.4796922Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4796989Z     
2025-01-22T20:11:05.4797069Z         Parameters
2025-01-22T20:11:05.4797141Z         ----------
2025-01-22T20:11:05.4797223Z         key : label
2025-01-22T20:11:05.4797291Z     
2025-01-22T20:11:05.4797366Z         Returns
2025-01-22T20:11:05.4797437Z         -------
2025-01-22T20:11:05.4797575Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4797644Z     
2025-01-22T20:11:05.4797721Z         Examples
2025-01-22T20:11:05.4797793Z         --------
2025-01-22T20:11:05.4797901Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4797987Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4798064Z         1
2025-01-22T20:11:05.4798136Z     
2025-01-22T20:11:05.4798238Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4798334Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4798411Z         slice(1, 3, None)
2025-01-22T20:11:05.4798485Z     
2025-01-22T20:11:05.4798596Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4798693Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4798788Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4798862Z         """
2025-01-22T20:11:05.4798963Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4799043Z         try:
2025-01-22T20:11:05.4799142Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4799147Z 
2025-01-22T20:11:05.4799401Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4799515Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4799662Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4799738Z     ???
2025-01-22T20:11:05.4799872Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4799946Z     ???
2025-01-22T20:11:05.4800218Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4800292Z     ???
2025-01-22T20:11:05.4800403Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4800407Z 
2025-01-22T20:11:05.4800479Z >   ???
2025-01-22T20:11:05.4800558Z E   KeyError: 'cups'
2025-01-22T20:11:05.4800563Z 
2025-01-22T20:11:05.4800701Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4800705Z 
2025-01-22T20:11:05.4800879Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4800889Z 
2025-01-22T20:11:05.4801113Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4801528Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4802150Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4802154Z 
2025-01-22T20:11:05.4802318Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4802394Z     def plasma(
2025-01-22T20:11:05.4802471Z         self,
2025-01-22T20:11:05.4802557Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4802632Z         config,
2025-01-22T20:11:05.4802699Z     ):
2025-01-22T20:11:05.4802818Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4802920Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4802925Z 
2025-01-22T20:11:05.4803048Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4803168Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4803274Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4803364Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4803660Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4803769Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4803884Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4803975Z     return BasePlasma(
2025-01-22T20:11:05.4804064Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4804160Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4804251Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4804340Z     self.update(**kwargs)
2025-01-22T20:11:05.4804437Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4804560Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4804679Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4804788Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4805032Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4805186Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4805404Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4805501Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4805638Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4805806Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4805985Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4806170Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4806438Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4806616Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4806803Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4806911Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4807169Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4807293Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4807543Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4807635Z     return self.apply_standard()
2025-01-22T20:11:05.4807920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4808046Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4808349Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4808475Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4808814Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4808907Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4809173Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4809262Z     return self._get_value(key)
2025-01-22T20:11:05.4809646Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4809735Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4809849Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4809854Z 
2025-01-22T20:11:05.4810010Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4810225Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4810304Z        't046000', 't048000'],
2025-01-22T20:11:05.4810388Z       dtype='object')
2025-01-22T20:11:05.4810460Z key = 'cups'
2025-01-22T20:11:05.4810464Z 
2025-01-22T20:11:05.4810550Z     def get_loc(self, key):
2025-01-22T20:11:05.4810618Z         """
2025-01-22T20:11:05.4810783Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4810849Z     
2025-01-22T20:11:05.4810927Z         Parameters
2025-01-22T20:11:05.4811007Z         ----------
2025-01-22T20:11:05.4811083Z         key : label
2025-01-22T20:11:05.4811153Z     
2025-01-22T20:11:05.4811222Z         Returns
2025-01-22T20:11:05.4811296Z         -------
2025-01-22T20:11:05.4811427Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4811498Z     
2025-01-22T20:11:05.4811568Z         Examples
2025-01-22T20:11:05.4811644Z         --------
2025-01-22T20:11:05.4811743Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4811835Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4811906Z         1
2025-01-22T20:11:05.4811977Z     
2025-01-22T20:11:05.4812081Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4812174Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4812249Z         slice(1, 3, None)
2025-01-22T20:11:05.4812320Z     
2025-01-22T20:11:05.4812428Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4812525Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4812623Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4812690Z         """
2025-01-22T20:11:05.4812796Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4812863Z         try:
2025-01-22T20:11:05.4812971Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4813053Z         except KeyError as err:
2025-01-22T20:11:05.4813154Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4813254Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4813382Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4813455Z             ):
2025-01-22T20:11:05.4813653Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4813740Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4813825Z E           KeyError: 'cups'
2025-01-22T20:11:05.4813829Z 
2025-01-22T20:11:05.4814105Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4814349Z _ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:05.4814354Z 
2025-01-22T20:11:05.4814513Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4814719Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4814799Z        't046000', 't048000'],
2025-01-22T20:11:05.4814873Z       dtype='object')
2025-01-22T20:11:05.4815066Z key = 'cups'
2025-01-22T20:11:05.4815070Z 
2025-01-22T20:11:05.4815149Z     def get_loc(self, key):
2025-01-22T20:11:05.4815220Z         """
2025-01-22T20:11:05.4815376Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4815447Z     
2025-01-22T20:11:05.4815523Z         Parameters
2025-01-22T20:11:05.4815595Z         ----------
2025-01-22T20:11:05.4815673Z         key : label
2025-01-22T20:11:05.4815739Z     
2025-01-22T20:11:05.4815914Z         Returns
2025-01-22T20:11:05.4815986Z         -------
2025-01-22T20:11:05.4816120Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4816186Z     
2025-01-22T20:11:05.4816260Z         Examples
2025-01-22T20:11:05.4816330Z         --------
2025-01-22T20:11:05.4816431Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4816516Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4816587Z         1
2025-01-22T20:11:05.4816654Z     
2025-01-22T20:11:05.4816765Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4816850Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4816929Z         slice(1, 3, None)
2025-01-22T20:11:05.4816995Z     
2025-01-22T20:11:05.4817107Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4817195Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4817290Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4817362Z         """
2025-01-22T20:11:05.4817466Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4817539Z         try:
2025-01-22T20:11:05.4817635Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4817639Z 
2025-01-22T20:11:05.4817894Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4818003Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4818143Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4818213Z     ???
2025-01-22T20:11:05.4818348Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4818415Z     ???
2025-01-22T20:11:05.4818689Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4818759Z     ???
2025-01-22T20:11:05.4818864Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4818868Z 
2025-01-22T20:11:05.4818942Z >   ???
2025-01-22T20:11:05.4819019Z E   KeyError: 'cups'
2025-01-22T20:11:05.4819023Z 
2025-01-22T20:11:05.4819155Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4819159Z 
2025-01-22T20:11:05.4819327Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4819331Z 
2025-01-22T20:11:05.4819559Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4819878Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4820505Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4820509Z 
2025-01-22T20:11:05.4820601Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4820674Z     def plasma(
2025-01-22T20:11:05.4820750Z         self,
2025-01-22T20:11:05.4820830Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4820904Z         config,
2025-01-22T20:11:05.4820971Z     ):
2025-01-22T20:11:05.4821086Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4821180Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4821184Z 
2025-01-22T20:11:05.4821309Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4821414Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4821610Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4821698Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4821863Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4821966Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4822076Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4822191Z     return BasePlasma(
2025-01-22T20:11:05.4822352Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4822444Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4822533Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4822620Z     self.update(**kwargs)
2025-01-22T20:11:05.4822708Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4822833Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4822941Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4823051Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4823293Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4823446Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4823749Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4823845Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4823979Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4824149Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4824324Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4824496Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4824755Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4824925Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4825113Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4825219Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4825471Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4825599Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4825838Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4825932Z     return self.apply_standard()
2025-01-22T20:11:05.4826207Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4826330Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4826635Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4826755Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4826972Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4827062Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4827329Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4827411Z     return self._get_value(key)
2025-01-22T20:11:05.4827672Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4827763Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4827879Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4827883Z 
2025-01-22T20:11:05.4828038Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4828255Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4828328Z        't046000', 't048000'],
2025-01-22T20:11:05.4828408Z       dtype='object')
2025-01-22T20:11:05.4828603Z key = 'cups'
2025-01-22T20:11:05.4828608Z 
2025-01-22T20:11:05.4828687Z     def get_loc(self, key):
2025-01-22T20:11:05.4828761Z         """
2025-01-22T20:11:05.4828918Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4828988Z     
2025-01-22T20:11:05.4829061Z         Parameters
2025-01-22T20:11:05.4829136Z         ----------
2025-01-22T20:11:05.4829207Z         key : label
2025-01-22T20:11:05.4829278Z     
2025-01-22T20:11:05.4829447Z         Returns
2025-01-22T20:11:05.4829524Z         -------
2025-01-22T20:11:05.4829653Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4829724Z     
2025-01-22T20:11:05.4829793Z         Examples
2025-01-22T20:11:05.4829868Z         --------
2025-01-22T20:11:05.4829965Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4830056Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4830124Z         1
2025-01-22T20:11:05.4830199Z     
2025-01-22T20:11:05.4830306Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4830394Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4830475Z         slice(1, 3, None)
2025-01-22T20:11:05.4830541Z     
2025-01-22T20:11:05.4830651Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4830742Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4830839Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4830906Z         """
2025-01-22T20:11:05.4831016Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4831084Z         try:
2025-01-22T20:11:05.4831190Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4831271Z         except KeyError as err:
2025-01-22T20:11:05.4831373Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4831471Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4831594Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4831666Z             ):
2025-01-22T20:11:05.4831762Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4831853Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4831933Z E           KeyError: 'cups'
2025-01-22T20:11:05.4831937Z 
2025-01-22T20:11:05.4832205Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4832521Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-time_explosion] _
2025-01-22T20:11:05.4832527Z 
2025-01-22T20:11:05.4832685Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4832890Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4832970Z        't046000', 't048000'],
2025-01-22T20:11:05.4833044Z       dtype='object')
2025-01-22T20:11:05.4833124Z key = 'cups'
2025-01-22T20:11:05.4833131Z 
2025-01-22T20:11:05.4833216Z     def get_loc(self, key):
2025-01-22T20:11:05.4833283Z         """
2025-01-22T20:11:05.4833444Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4833621Z     
2025-01-22T20:11:05.4833702Z         Parameters
2025-01-22T20:11:05.4833773Z         ----------
2025-01-22T20:11:05.4833850Z         key : label
2025-01-22T20:11:05.4833921Z     
2025-01-22T20:11:05.4833989Z         Returns
2025-01-22T20:11:05.4834067Z         -------
2025-01-22T20:11:05.4834197Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4834269Z     
2025-01-22T20:11:05.4834338Z         Examples
2025-01-22T20:11:05.4834413Z         --------
2025-01-22T20:11:05.4834506Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4834595Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4834661Z         1
2025-01-22T20:11:05.4834733Z     
2025-01-22T20:11:05.4834831Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4835060Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4835139Z         slice(1, 3, None)
2025-01-22T20:11:05.4835205Z     
2025-01-22T20:11:05.4835314Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4835403Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4835495Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4835563Z         """
2025-01-22T20:11:05.4835764Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4835834Z         try:
2025-01-22T20:11:05.4835937Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4835942Z 
2025-01-22T20:11:05.4836186Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4836298Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4836433Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4836510Z     ???
2025-01-22T20:11:05.4836645Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4836711Z     ???
2025-01-22T20:11:05.4836986Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4837052Z     ???
2025-01-22T20:11:05.4837161Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4837165Z 
2025-01-22T20:11:05.4837231Z >   ???
2025-01-22T20:11:05.4837314Z E   KeyError: 'cups'
2025-01-22T20:11:05.4837319Z 
2025-01-22T20:11:05.4837445Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4837449Z 
2025-01-22T20:11:05.4837620Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4837624Z 
2025-01-22T20:11:05.4837854Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4838171Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4838798Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4838802Z 
2025-01-22T20:11:05.4838891Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4838969Z     def plasma(
2025-01-22T20:11:05.4839037Z         self,
2025-01-22T20:11:05.4839125Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4839194Z         config,
2025-01-22T20:11:05.4839265Z     ):
2025-01-22T20:11:05.4839377Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4839478Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4839482Z 
2025-01-22T20:11:05.4839608Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4839713Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4839828Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4839911Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4840079Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4840182Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4840298Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4840378Z     return BasePlasma(
2025-01-22T20:11:05.4840471Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4840561Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4840655Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4840736Z     self.update(**kwargs)
2025-01-22T20:11:05.4840827Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4840954Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4841068Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4841175Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4841414Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4841661Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4841873Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4841976Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4842104Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4842351Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4842526Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4842704Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4842965Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4843138Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4843325Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4843430Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4843810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4843936Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4844182Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4844269Z     return self.apply_standard()
2025-01-22T20:11:05.4844554Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4844673Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4844982Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4845105Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4845323Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4845417Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4845680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4845766Z     return self._get_value(key)
2025-01-22T20:11:05.4846021Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4846114Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4846225Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4846229Z 
2025-01-22T20:11:05.4846390Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4846605Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4846680Z        't046000', 't048000'],
2025-01-22T20:11:05.4846762Z       dtype='object')
2025-01-22T20:11:05.4846834Z key = 'cups'
2025-01-22T20:11:05.4846841Z 
2025-01-22T20:11:05.4846926Z     def get_loc(self, key):
2025-01-22T20:11:05.4846994Z         """
2025-01-22T20:11:05.4847157Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4847226Z     
2025-01-22T20:11:05.4847303Z         Parameters
2025-01-22T20:11:05.4847375Z         ----------
2025-01-22T20:11:05.4847451Z         key : label
2025-01-22T20:11:05.4847517Z     
2025-01-22T20:11:05.4847590Z         Returns
2025-01-22T20:11:05.4847663Z         -------
2025-01-22T20:11:05.4847801Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4847866Z     
2025-01-22T20:11:05.4847941Z         Examples
2025-01-22T20:11:05.4848018Z         --------
2025-01-22T20:11:05.4848118Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4848208Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4848277Z         1
2025-01-22T20:11:05.4848347Z     
2025-01-22T20:11:05.4848453Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4848674Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4848751Z         slice(1, 3, None)
2025-01-22T20:11:05.4848822Z     
2025-01-22T20:11:05.4848930Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4849027Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4849117Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4849189Z         """
2025-01-22T20:11:05.4849390Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4849469Z         try:
2025-01-22T20:11:05.4849568Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4849655Z         except KeyError as err:
2025-01-22T20:11:05.4849758Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4849860Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4849985Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4850053Z             ):
2025-01-22T20:11:05.4850152Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4850238Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4850323Z E           KeyError: 'cups'
2025-01-22T20:11:05.4850327Z 
2025-01-22T20:11:05.4850597Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4850934Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-link_t_rad_t_electron] _
2025-01-22T20:11:05.4850939Z 
2025-01-22T20:11:05.4851094Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4851314Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4851394Z        't046000', 't048000'],
2025-01-22T20:11:05.4851469Z       dtype='object')
2025-01-22T20:11:05.4851545Z key = 'cups'
2025-01-22T20:11:05.4851549Z 
2025-01-22T20:11:05.4851631Z     def get_loc(self, key):
2025-01-22T20:11:05.4851702Z         """
2025-01-22T20:11:05.4851861Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4851935Z     
2025-01-22T20:11:05.4852007Z         Parameters
2025-01-22T20:11:05.4852083Z         ----------
2025-01-22T20:11:05.4852154Z         key : label
2025-01-22T20:11:05.4852226Z     
2025-01-22T20:11:05.4852293Z         Returns
2025-01-22T20:11:05.4852371Z         -------
2025-01-22T20:11:05.4852505Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4852575Z     
2025-01-22T20:11:05.4852647Z         Examples
2025-01-22T20:11:05.4852722Z         --------
2025-01-22T20:11:05.4852827Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4852910Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4852985Z         1
2025-01-22T20:11:05.4853051Z     
2025-01-22T20:11:05.4853157Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4853246Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4853326Z         slice(1, 3, None)
2025-01-22T20:11:05.4853395Z     
2025-01-22T20:11:05.4853603Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4853695Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4853788Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4853855Z         """
2025-01-22T20:11:05.4853961Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4854033Z         try:
2025-01-22T20:11:05.4854140Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4854144Z 
2025-01-22T20:11:05.4854395Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4854505Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4854647Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4854716Z     ???
2025-01-22T20:11:05.4854969Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4855035Z     ???
2025-01-22T20:11:05.4855316Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4855383Z     ???
2025-01-22T20:11:05.4855493Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4855498Z 
2025-01-22T20:11:05.4855563Z >   ???
2025-01-22T20:11:05.4855646Z E   KeyError: 'cups'
2025-01-22T20:11:05.4855747Z 
2025-01-22T20:11:05.4855883Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4855888Z 
2025-01-22T20:11:05.4856056Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4856060Z 
2025-01-22T20:11:05.4856286Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4856602Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4857236Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4857240Z 
2025-01-22T20:11:05.4857327Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4857406Z     def plasma(
2025-01-22T20:11:05.4857479Z         self,
2025-01-22T20:11:05.4857559Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4857635Z         config,
2025-01-22T20:11:05.4857702Z     ):
2025-01-22T20:11:05.4857820Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4857913Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4857917Z 
2025-01-22T20:11:05.4858047Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4858152Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4858262Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4858349Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4858522Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4858624Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4858740Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4858823Z     return BasePlasma(
2025-01-22T20:11:05.4858908Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4858999Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4859091Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4859177Z     self.update(**kwargs)
2025-01-22T20:11:05.4859265Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4859390Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4859500Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4859611Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4859845Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4860007Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4860217Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4860320Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4860446Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4860618Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4860796Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4860969Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4861231Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4861403Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4861590Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4861821Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4862082Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4862206Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4862448Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4862538Z     return self.apply_standard()
2025-01-22T20:11:05.4862884Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4863011Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4863315Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4863440Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4863775Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4863874Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4864137Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4864225Z     return self._get_value(key)
2025-01-22T20:11:05.4864480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4864571Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4864687Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4864691Z 
2025-01-22T20:11:05.4864847Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4865064Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4865137Z        't046000', 't048000'],
2025-01-22T20:11:05.4865216Z       dtype='object')
2025-01-22T20:11:05.4865289Z key = 'cups'
2025-01-22T20:11:05.4865293Z 
2025-01-22T20:11:05.4865379Z     def get_loc(self, key):
2025-01-22T20:11:05.4865447Z         """
2025-01-22T20:11:05.4865606Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4865673Z     
2025-01-22T20:11:05.4865751Z         Parameters
2025-01-22T20:11:05.4865822Z         ----------
2025-01-22T20:11:05.4865897Z         key : label
2025-01-22T20:11:05.4865970Z     
2025-01-22T20:11:05.4866038Z         Returns
2025-01-22T20:11:05.4866113Z         -------
2025-01-22T20:11:05.4866245Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4866316Z     
2025-01-22T20:11:05.4866386Z         Examples
2025-01-22T20:11:05.4866463Z         --------
2025-01-22T20:11:05.4866562Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4866651Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4866718Z         1
2025-01-22T20:11:05.4866787Z     
2025-01-22T20:11:05.4866889Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4866983Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4867059Z         slice(1, 3, None)
2025-01-22T20:11:05.4867129Z     
2025-01-22T20:11:05.4867236Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4867330Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4867424Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4867491Z         """
2025-01-22T20:11:05.4867596Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4867667Z         try:
2025-01-22T20:11:05.4867769Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4867850Z         except KeyError as err:
2025-01-22T20:11:05.4867954Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4868052Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4868173Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4868244Z             ):
2025-01-22T20:11:05.4868340Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4868624Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4868709Z E           KeyError: 'cups'
2025-01-22T20:11:05.4868713Z 
2025-01-22T20:11:05.4868980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4869258Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:05.4869262Z 
2025-01-22T20:11:05.4869517Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4869728Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4869806Z        't046000', 't048000'],
2025-01-22T20:11:05.4869886Z       dtype='object')
2025-01-22T20:11:05.4869962Z key = 'cups'
2025-01-22T20:11:05.4869966Z 
2025-01-22T20:11:05.4870044Z     def get_loc(self, key):
2025-01-22T20:11:05.4870121Z         """
2025-01-22T20:11:05.4870277Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4870347Z     
2025-01-22T20:11:05.4870418Z         Parameters
2025-01-22T20:11:05.4870493Z         ----------
2025-01-22T20:11:05.4870569Z         key : label
2025-01-22T20:11:05.4870635Z     
2025-01-22T20:11:05.4870708Z         Returns
2025-01-22T20:11:05.4870777Z         -------
2025-01-22T20:11:05.4870911Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4870980Z     
2025-01-22T20:11:05.4871053Z         Examples
2025-01-22T20:11:05.4871122Z         --------
2025-01-22T20:11:05.4871222Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4871307Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4871379Z         1
2025-01-22T20:11:05.4871447Z     
2025-01-22T20:11:05.4871552Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4871637Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4871721Z         slice(1, 3, None)
2025-01-22T20:11:05.4871786Z     
2025-01-22T20:11:05.4871896Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4871985Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4872080Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4872152Z         """
2025-01-22T20:11:05.4872250Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4872323Z         try:
2025-01-22T20:11:05.4872423Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4872427Z 
2025-01-22T20:11:05.4872676Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4872783Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4872923Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4872990Z     ???
2025-01-22T20:11:05.4873126Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4873195Z     ???
2025-01-22T20:11:05.4873468Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4873650Z     ???
2025-01-22T20:11:05.4873762Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4873767Z 
2025-01-22T20:11:05.4873837Z >   ???
2025-01-22T20:11:05.4873913Z E   KeyError: 'cups'
2025-01-22T20:11:05.4873917Z 
2025-01-22T20:11:05.4874052Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4874055Z 
2025-01-22T20:11:05.4874222Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4874226Z 
2025-01-22T20:11:05.4874454Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4874767Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4875394Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4875514Z 
2025-01-22T20:11:05.4875609Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4875681Z     def plasma(
2025-01-22T20:11:05.4875755Z         self,
2025-01-22T20:11:05.4875835Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4875908Z         config,
2025-01-22T20:11:05.4876071Z     ):
2025-01-22T20:11:05.4876190Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4876284Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4876288Z 
2025-01-22T20:11:05.4876416Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4876521Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4876630Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4876717Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4876889Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4876993Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4877102Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4877187Z     return BasePlasma(
2025-01-22T20:11:05.4877271Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4877361Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4877447Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4877534Z     self.update(**kwargs)
2025-01-22T20:11:05.4877622Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4877746Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4877855Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4877961Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4878194Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4878350Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4878567Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4878662Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4878794Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4878960Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4879133Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4879308Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4879571Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4879741Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4879926Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4880031Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4880289Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4880417Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4880655Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4880746Z     return self.apply_standard()
2025-01-22T20:11:05.4881024Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4881146Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4881451Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4881572Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4881785Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4881875Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4882285Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4882367Z     return self._get_value(key)
2025-01-22T20:11:05.4882627Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4882714Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4882826Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4882832Z 
2025-01-22T20:11:05.4883074Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4883290Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4883364Z        't046000', 't048000'],
2025-01-22T20:11:05.4883446Z       dtype='object')
2025-01-22T20:11:05.4883630Z key = 'cups'
2025-01-22T20:11:05.4883640Z 
2025-01-22T20:11:05.4883721Z     def get_loc(self, key):
2025-01-22T20:11:05.4883799Z         """
2025-01-22T20:11:05.4883955Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4884025Z     
2025-01-22T20:11:05.4884098Z         Parameters
2025-01-22T20:11:05.4884173Z         ----------
2025-01-22T20:11:05.4884244Z         key : label
2025-01-22T20:11:05.4884314Z     
2025-01-22T20:11:05.4884381Z         Returns
2025-01-22T20:11:05.4884456Z         -------
2025-01-22T20:11:05.4884589Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4884659Z     
2025-01-22T20:11:05.4884728Z         Examples
2025-01-22T20:11:05.4884803Z         --------
2025-01-22T20:11:05.4884900Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4884989Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4885055Z         1
2025-01-22T20:11:05.4885130Z     
2025-01-22T20:11:05.4885231Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4885326Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4885409Z         slice(1, 3, None)
2025-01-22T20:11:05.4885475Z     
2025-01-22T20:11:05.4885585Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4885673Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4885767Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4885834Z         """
2025-01-22T20:11:05.4885941Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4886008Z         try:
2025-01-22T20:11:05.4886113Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4886196Z         except KeyError as err:
2025-01-22T20:11:05.4886297Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4886395Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4886515Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4886583Z             ):
2025-01-22T20:11:05.4886679Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4886775Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4886854Z E           KeyError: 'cups'
2025-01-22T20:11:05.4886858Z 
2025-01-22T20:11:05.4887129Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4887374Z _ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:05.4887378Z 
2025-01-22T20:11:05.4887538Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4887745Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4887823Z        't046000', 't048000'],
2025-01-22T20:11:05.4887896Z       dtype='object')
2025-01-22T20:11:05.4887973Z key = 'cups'
2025-01-22T20:11:05.4887977Z 
2025-01-22T20:11:05.4888062Z     def get_loc(self, key):
2025-01-22T20:11:05.4888130Z         """
2025-01-22T20:11:05.4888291Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4888483Z     
2025-01-22T20:11:05.4888559Z         Parameters
2025-01-22T20:11:05.4888631Z         ----------
2025-01-22T20:11:05.4888706Z         key : label
2025-01-22T20:11:05.4888773Z     
2025-01-22T20:11:05.4888847Z         Returns
2025-01-22T20:11:05.4888917Z         -------
2025-01-22T20:11:05.4889050Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4889116Z     
2025-01-22T20:11:05.4889189Z         Examples
2025-01-22T20:11:05.4889363Z         --------
2025-01-22T20:11:05.4889466Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4889549Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4889621Z         1
2025-01-22T20:11:05.4889686Z     
2025-01-22T20:11:05.4889791Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4889880Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4889955Z         slice(1, 3, None)
2025-01-22T20:11:05.4890024Z     
2025-01-22T20:11:05.4890134Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4890227Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4890315Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4890386Z         """
2025-01-22T20:11:05.4890487Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4890559Z         try:
2025-01-22T20:11:05.4890656Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4890660Z 
2025-01-22T20:11:05.4890913Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4891021Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4891161Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4891227Z     ???
2025-01-22T20:11:05.4891362Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4891432Z     ???
2025-01-22T20:11:05.4891702Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4891777Z     ???
2025-01-22T20:11:05.4891881Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4891885Z 
2025-01-22T20:11:05.4891956Z >   ???
2025-01-22T20:11:05.4892033Z E   KeyError: 'cups'
2025-01-22T20:11:05.4892037Z 
2025-01-22T20:11:05.4892168Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4892172Z 
2025-01-22T20:11:05.4892342Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4892346Z 
2025-01-22T20:11:05.4892575Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4892895Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4893607Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4893617Z 
2025-01-22T20:11:05.4893712Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4893783Z     def plasma(
2025-01-22T20:11:05.4893857Z         self,
2025-01-22T20:11:05.4893938Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4894013Z         config,
2025-01-22T20:11:05.4894079Z     ):
2025-01-22T20:11:05.4894197Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4894291Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4894300Z 
2025-01-22T20:11:05.4894420Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4894531Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4894636Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4894724Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4894889Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4895111Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4895220Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4895302Z     return BasePlasma(
2025-01-22T20:11:05.4895388Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4895479Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4895566Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4895650Z     self.update(**kwargs)
2025-01-22T20:11:05.4895834Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4895961Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4896074Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4896176Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4896413Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4896564Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4896781Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4896876Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4897006Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4897170Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4897344Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4897516Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4897777Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4897964Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4898143Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4898248Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4898499Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4898628Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4898867Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4898960Z     return self.apply_standard()
2025-01-22T20:11:05.4899233Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4899357Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4899664Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4899782Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4900002Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4900086Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4900362Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4900450Z     return self._get_value(key)
2025-01-22T20:11:05.4900716Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4900804Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4900923Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4900927Z 
2025-01-22T20:11:05.4901087Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4901308Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4901389Z        't046000', 't048000'],
2025-01-22T20:11:05.4901465Z       dtype='object')
2025-01-22T20:11:05.4901542Z key = 'cups'
2025-01-22T20:11:05.4901546Z 
2025-01-22T20:11:05.4901625Z     def get_loc(self, key):
2025-01-22T20:11:05.4901698Z         """
2025-01-22T20:11:05.4901860Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4902016Z     
2025-01-22T20:11:05.4902090Z         Parameters
2025-01-22T20:11:05.4902165Z         ----------
2025-01-22T20:11:05.4902238Z         key : label
2025-01-22T20:11:05.4902308Z     
2025-01-22T20:11:05.4902379Z         Returns
2025-01-22T20:11:05.4902454Z         -------
2025-01-22T20:11:05.4902588Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4902660Z     
2025-01-22T20:11:05.4902802Z         Examples
2025-01-22T20:11:05.4902879Z         --------
2025-01-22T20:11:05.4902983Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4903068Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4903141Z         1
2025-01-22T20:11:05.4903206Z     
2025-01-22T20:11:05.4903318Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4903408Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4903490Z         slice(1, 3, None)
2025-01-22T20:11:05.4903678Z     
2025-01-22T20:11:05.4903798Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4903892Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4903986Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4904055Z         """
2025-01-22T20:11:05.4904163Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4904232Z         try:
2025-01-22T20:11:05.4904336Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4904421Z         except KeyError as err:
2025-01-22T20:11:05.4904524Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4904629Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4904749Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4904822Z             ):
2025-01-22T20:11:05.4904915Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4905008Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4905092Z E           KeyError: 'cups'
2025-01-22T20:11:05.4905097Z 
2025-01-22T20:11:05.4905375Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4905607Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_rad] _
2025-01-22T20:11:05.4905611Z 
2025-01-22T20:11:05.4905772Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4905991Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4906065Z        't046000', 't048000'],
2025-01-22T20:11:05.4906145Z       dtype='object')
2025-01-22T20:11:05.4906216Z key = 'cups'
2025-01-22T20:11:05.4906219Z 
2025-01-22T20:11:05.4906302Z     def get_loc(self, key):
2025-01-22T20:11:05.4906370Z         """
2025-01-22T20:11:05.4906537Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4906604Z     
2025-01-22T20:11:05.4906686Z         Parameters
2025-01-22T20:11:05.4906757Z         ----------
2025-01-22T20:11:05.4906833Z         key : label
2025-01-22T20:11:05.4906900Z     
2025-01-22T20:11:05.4906974Z         Returns
2025-01-22T20:11:05.4907044Z         -------
2025-01-22T20:11:05.4907179Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4907245Z     
2025-01-22T20:11:05.4907320Z         Examples
2025-01-22T20:11:05.4907394Z         --------
2025-01-22T20:11:05.4907499Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4907589Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4907656Z         1
2025-01-22T20:11:05.4907728Z     
2025-01-22T20:11:05.4907828Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4907919Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4907995Z         slice(1, 3, None)
2025-01-22T20:11:05.4908068Z     
2025-01-22T20:11:05.4908177Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4908394Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4908485Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4908557Z         """
2025-01-22T20:11:05.4908658Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4908731Z         try:
2025-01-22T20:11:05.4908830Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4908835Z 
2025-01-22T20:11:05.4909203Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4909321Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4909458Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4909531Z     ???
2025-01-22T20:11:05.4909662Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4909734Z     ???
2025-01-22T20:11:05.4910008Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4910085Z     ???
2025-01-22T20:11:05.4910192Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4910196Z 
2025-01-22T20:11:05.4910267Z >   ???
2025-01-22T20:11:05.4910345Z E   KeyError: 'cups'
2025-01-22T20:11:05.4910349Z 
2025-01-22T20:11:05.4910482Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4910486Z 
2025-01-22T20:11:05.4910658Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4910665Z 
2025-01-22T20:11:05.4910886Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4911209Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4911828Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4911836Z 
2025-01-22T20:11:05.4911929Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4912003Z     def plasma(
2025-01-22T20:11:05.4912078Z         self,
2025-01-22T20:11:05.4912165Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4912235Z         config,
2025-01-22T20:11:05.4912310Z     ):
2025-01-22T20:11:05.4912422Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4912524Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4912528Z 
2025-01-22T20:11:05.4912649Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4912761Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4912867Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4912954Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4913118Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4913225Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4913339Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4913423Z     return BasePlasma(
2025-01-22T20:11:05.4913632Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4913723Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4913818Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4913898Z     self.update(**kwargs)
2025-01-22T20:11:05.4913991Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4914115Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4914230Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4914333Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4914539Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4914691Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4914907Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4915122Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4915255Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4915426Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4915597Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4915773Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4916129Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4916308Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4916489Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4916597Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4916854Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4916986Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4917230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4917322Z     return self.apply_standard()
2025-01-22T20:11:05.4917604Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4917722Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4918036Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4918151Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4918376Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4918464Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4918734Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4918817Z     return self._get_value(key)
2025-01-22T20:11:05.4919081Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4919167Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4919278Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4919282Z 
2025-01-22T20:11:05.4919443Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4919653Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4919735Z        't046000', 't048000'],
2025-01-22T20:11:05.4919810Z       dtype='object')
2025-01-22T20:11:05.4919888Z key = 'cups'
2025-01-22T20:11:05.4919893Z 
2025-01-22T20:11:05.4919972Z     def get_loc(self, key):
2025-01-22T20:11:05.4920045Z         """
2025-01-22T20:11:05.4920203Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4920275Z     
2025-01-22T20:11:05.4920351Z         Parameters
2025-01-22T20:11:05.4920427Z         ----------
2025-01-22T20:11:05.4920507Z         key : label
2025-01-22T20:11:05.4920573Z     
2025-01-22T20:11:05.4920647Z         Returns
2025-01-22T20:11:05.4920722Z         -------
2025-01-22T20:11:05.4920861Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4920928Z     
2025-01-22T20:11:05.4921004Z         Examples
2025-01-22T20:11:05.4921074Z         --------
2025-01-22T20:11:05.4921180Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4921271Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4921344Z         1
2025-01-22T20:11:05.4921411Z     
2025-01-22T20:11:05.4921518Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4921605Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4921685Z         slice(1, 3, None)
2025-01-22T20:11:05.4921750Z     
2025-01-22T20:11:05.4921861Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4922041Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4922135Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4922240Z         """
2025-01-22T20:11:05.4922342Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4922416Z         try:
2025-01-22T20:11:05.4922515Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4922602Z         except KeyError as err:
2025-01-22T20:11:05.4922771Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4922878Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4922999Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4923071Z             ):
2025-01-22T20:11:05.4923161Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4923254Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4923335Z E           KeyError: 'cups'
2025-01-22T20:11:05.4923339Z 
2025-01-22T20:11:05.4923722Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4923886Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:05.4924318Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:05.4924770Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:05.4924923Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:05.4925424Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:05.4925662Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-g_electron] _
2025-01-22T20:11:05.4925666Z 
2025-01-22T20:11:05.4925827Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4926046Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4926120Z        't046000', 't048000'],
2025-01-22T20:11:05.4926200Z       dtype='object')
2025-01-22T20:11:05.4926272Z key = 'cups'
2025-01-22T20:11:05.4926276Z 
2025-01-22T20:11:05.4926359Z     def get_loc(self, key):
2025-01-22T20:11:05.4926429Z         """
2025-01-22T20:11:05.4926594Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4926664Z     
2025-01-22T20:11:05.4926740Z         Parameters
2025-01-22T20:11:05.4926811Z         ----------
2025-01-22T20:11:05.4926888Z         key : label
2025-01-22T20:11:05.4926955Z     
2025-01-22T20:11:05.4927029Z         Returns
2025-01-22T20:11:05.4927098Z         -------
2025-01-22T20:11:05.4927233Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4927300Z     
2025-01-22T20:11:05.4927375Z         Examples
2025-01-22T20:11:05.4927448Z         --------
2025-01-22T20:11:05.4927549Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4927639Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4927707Z         1
2025-01-22T20:11:05.4927778Z     
2025-01-22T20:11:05.4927878Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4927973Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4928048Z         slice(1, 3, None)
2025-01-22T20:11:05.4928119Z     
2025-01-22T20:11:05.4928229Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4928324Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4928413Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4928486Z         """
2025-01-22T20:11:05.4928587Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4928661Z         try:
2025-01-22T20:11:05.4928761Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4928906Z 
2025-01-22T20:11:05.4929164Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4929277Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4929416Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4929489Z     ???
2025-01-22T20:11:05.4929620Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4929693Z     ???
2025-01-22T20:11:05.4930064Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4930138Z     ???
2025-01-22T20:11:05.4930245Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4930250Z 
2025-01-22T20:11:05.4930321Z >   ???
2025-01-22T20:11:05.4930398Z E   KeyError: 'cups'
2025-01-22T20:11:05.4930402Z 
2025-01-22T20:11:05.4930535Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4930539Z 
2025-01-22T20:11:05.4930714Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4930718Z 
2025-01-22T20:11:05.4930938Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4931262Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4931882Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4931887Z 
2025-01-22T20:11:05.4931980Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4932053Z     def plasma(
2025-01-22T20:11:05.4932127Z         self,
2025-01-22T20:11:05.4932212Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4932282Z         config,
2025-01-22T20:11:05.4932356Z     ):
2025-01-22T20:11:05.4932470Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4932574Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4932579Z 
2025-01-22T20:11:05.4932702Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4932812Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4932918Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4933006Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4933172Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4933275Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4933384Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4933468Z     return BasePlasma(
2025-01-22T20:11:05.4933655Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4933742Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4933835Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4933915Z     self.update(**kwargs)
2025-01-22T20:11:05.4934010Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4934130Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4934244Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4934345Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4934548Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4934696Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4934913Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4935009Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4935140Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4935311Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4935480Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4935657Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4936056Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4936231Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4936412Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4936520Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4936873Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4937004Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4937241Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4937333Z     return self.apply_standard()
2025-01-22T20:11:05.4937614Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4937732Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4938046Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4938163Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4938382Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4938468Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4938737Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4938822Z     return self._get_value(key)
2025-01-22T20:11:05.4939085Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4939170Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4939282Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4939286Z 
2025-01-22T20:11:05.4939447Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4939659Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4939738Z        't046000', 't048000'],
2025-01-22T20:11:05.4939813Z       dtype='object')
2025-01-22T20:11:05.4939889Z key = 'cups'
2025-01-22T20:11:05.4939894Z 
2025-01-22T20:11:05.4939974Z     def get_loc(self, key):
2025-01-22T20:11:05.4940046Z         """
2025-01-22T20:11:05.4940208Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4940282Z     
2025-01-22T20:11:05.4940354Z         Parameters
2025-01-22T20:11:05.4940430Z         ----------
2025-01-22T20:11:05.4940503Z         key : label
2025-01-22T20:11:05.4940575Z     
2025-01-22T20:11:05.4940650Z         Returns
2025-01-22T20:11:05.4940722Z         -------
2025-01-22T20:11:05.4940862Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4940928Z     
2025-01-22T20:11:05.4941007Z         Examples
2025-01-22T20:11:05.4941093Z         --------
2025-01-22T20:11:05.4941198Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4941286Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4941358Z         1
2025-01-22T20:11:05.4941424Z     
2025-01-22T20:11:05.4941534Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4941622Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4941703Z         slice(1, 3, None)
2025-01-22T20:11:05.4941774Z     
2025-01-22T20:11:05.4941889Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4941980Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4942076Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4942145Z         """
2025-01-22T20:11:05.4942252Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4942327Z         try:
2025-01-22T20:11:05.4942426Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4942603Z         except KeyError as err:
2025-01-22T20:11:05.4942700Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4942805Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4942925Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4942998Z             ):
2025-01-22T20:11:05.4943090Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4943182Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4943336Z E           KeyError: 'cups'
2025-01-22T20:11:05.4943341Z 
2025-01-22T20:11:05.4943746Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4944000Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-selected_atoms] _
2025-01-22T20:11:05.4944004Z 
2025-01-22T20:11:05.4944164Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4944380Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4944460Z        't046000', 't048000'],
2025-01-22T20:11:05.4944540Z       dtype='object')
2025-01-22T20:11:05.4944616Z key = 'cups'
2025-01-22T20:11:05.4944620Z 
2025-01-22T20:11:05.4944704Z     def get_loc(self, key):
2025-01-22T20:11:05.4944772Z         """
2025-01-22T20:11:05.4944936Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4945002Z     
2025-01-22T20:11:05.4945084Z         Parameters
2025-01-22T20:11:05.4945154Z         ----------
2025-01-22T20:11:05.4945231Z         key : label
2025-01-22T20:11:05.4945298Z     
2025-01-22T20:11:05.4945372Z         Returns
2025-01-22T20:11:05.4945448Z         -------
2025-01-22T20:11:05.4945578Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4945652Z     
2025-01-22T20:11:05.4945725Z         Examples
2025-01-22T20:11:05.4945799Z         --------
2025-01-22T20:11:05.4945899Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4945988Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4946055Z         1
2025-01-22T20:11:05.4946125Z     
2025-01-22T20:11:05.4946226Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4946317Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4946392Z         slice(1, 3, None)
2025-01-22T20:11:05.4946464Z     
2025-01-22T20:11:05.4946573Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4946672Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4946761Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4946833Z         """
2025-01-22T20:11:05.4946939Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4947008Z         try:
2025-01-22T20:11:05.4947112Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4947117Z 
2025-01-22T20:11:05.4947363Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4947484Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4947619Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4947693Z     ???
2025-01-22T20:11:05.4947824Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4947896Z     ???
2025-01-22T20:11:05.4948172Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4948244Z     ???
2025-01-22T20:11:05.4948352Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4948362Z 
2025-01-22T20:11:05.4948429Z >   ???
2025-01-22T20:11:05.4948511Z E   KeyError: 'cups'
2025-01-22T20:11:05.4948516Z 
2025-01-22T20:11:05.4948641Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4948645Z 
2025-01-22T20:11:05.4948817Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4948939Z 
2025-01-22T20:11:05.4949166Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4949492Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4950215Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4950225Z 
2025-01-22T20:11:05.4950313Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4950392Z     def plasma(
2025-01-22T20:11:05.4950461Z         self,
2025-01-22T20:11:05.4950548Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4950617Z         config,
2025-01-22T20:11:05.4950692Z     ):
2025-01-22T20:11:05.4950805Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4950904Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4950911Z 
2025-01-22T20:11:05.4951032Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4951144Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4951250Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4951338Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4951511Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4951615Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4951730Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4951808Z     return BasePlasma(
2025-01-22T20:11:05.4951901Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4951987Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4952082Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4952160Z     self.update(**kwargs)
2025-01-22T20:11:05.4952253Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4952378Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4952492Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4952595Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4952798Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4952952Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4953167Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4953270Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4953397Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4953687Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4953861Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4954038Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4954295Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4954474Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4954655Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4954763Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4955017Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4955147Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4955392Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4955479Z     return self.apply_standard()
2025-01-22T20:11:05.4955760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4955877Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4956188Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4956426Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4956667Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4956767Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4957037Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4957221Z     return self._get_value(key)
2025-01-22T20:11:05.4957482Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4957573Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4957680Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4957684Z 
2025-01-22T20:11:05.4957846Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4958056Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4958139Z        't046000', 't048000'],
2025-01-22T20:11:05.4958215Z       dtype='object')
2025-01-22T20:11:05.4958292Z key = 'cups'
2025-01-22T20:11:05.4958296Z 
2025-01-22T20:11:05.4958377Z     def get_loc(self, key):
2025-01-22T20:11:05.4958450Z         """
2025-01-22T20:11:05.4958616Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4958682Z     
2025-01-22T20:11:05.4958764Z         Parameters
2025-01-22T20:11:05.4958835Z         ----------
2025-01-22T20:11:05.4958911Z         key : label
2025-01-22T20:11:05.4958977Z     
2025-01-22T20:11:05.4959051Z         Returns
2025-01-22T20:11:05.4959122Z         -------
2025-01-22T20:11:05.4959256Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4959322Z     
2025-01-22T20:11:05.4959397Z         Examples
2025-01-22T20:11:05.4959468Z         --------
2025-01-22T20:11:05.4959574Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4959661Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4959735Z         1
2025-01-22T20:11:05.4959801Z     
2025-01-22T20:11:05.4959910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4959997Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4960080Z         slice(1, 3, None)
2025-01-22T20:11:05.4960151Z     
2025-01-22T20:11:05.4960261Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4960357Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4960456Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4964501Z         """
2025-01-22T20:11:05.4964644Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4964724Z         try:
2025-01-22T20:11:05.4964835Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4964926Z         except KeyError as err:
2025-01-22T20:11:05.4965027Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4965146Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4965278Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4965355Z             ):
2025-01-22T20:11:05.4965453Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4965549Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4965632Z E           KeyError: 'cups'
2025-01-22T20:11:05.4965637Z 
2025-01-22T20:11:05.4965941Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4966200Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-number_density] _
2025-01-22T20:11:05.4966205Z 
2025-01-22T20:11:05.4966367Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4966586Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4966844Z        't046000', 't048000'],
2025-01-22T20:11:05.4966928Z       dtype='object')
2025-01-22T20:11:05.4967004Z key = 'cups'
2025-01-22T20:11:05.4967008Z 
2025-01-22T20:11:05.4967095Z     def get_loc(self, key):
2025-01-22T20:11:05.4967165Z         """
2025-01-22T20:11:05.4967336Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4967404Z     
2025-01-22T20:11:05.4967485Z         Parameters
2025-01-22T20:11:05.4967566Z         ----------
2025-01-22T20:11:05.4967740Z         key : label
2025-01-22T20:11:05.4967816Z     
2025-01-22T20:11:05.4967887Z         Returns
2025-01-22T20:11:05.4967966Z         -------
2025-01-22T20:11:05.4968107Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4968179Z     
2025-01-22T20:11:05.4968250Z         Examples
2025-01-22T20:11:05.4968326Z         --------
2025-01-22T20:11:05.4968426Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4968518Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4968589Z         1
2025-01-22T20:11:05.4968666Z     
2025-01-22T20:11:05.4968774Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4968870Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4968947Z         slice(1, 3, None)
2025-01-22T20:11:05.4969022Z     
2025-01-22T20:11:05.4969133Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4969231Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4969333Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4969401Z         """
2025-01-22T20:11:05.4969510Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4969579Z         try:
2025-01-22T20:11:05.4969685Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4969690Z 
2025-01-22T20:11:05.4969949Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4970072Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4970216Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4970292Z     ???
2025-01-22T20:11:05.4970423Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4970498Z     ???
2025-01-22T20:11:05.4970772Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4970846Z     ???
2025-01-22T20:11:05.4970963Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4970968Z 
2025-01-22T20:11:05.4971035Z >   ???
2025-01-22T20:11:05.4971121Z E   KeyError: 'cups'
2025-01-22T20:11:05.4971125Z 
2025-01-22T20:11:05.4971255Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4971259Z 
2025-01-22T20:11:05.4971434Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4971438Z 
2025-01-22T20:11:05.4971662Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4971996Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4972625Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4972629Z 
2025-01-22T20:11:05.4972722Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4972804Z     def plasma(
2025-01-22T20:11:05.4972874Z         self,
2025-01-22T20:11:05.4972964Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4973034Z         config,
2025-01-22T20:11:05.4973106Z     ):
2025-01-22T20:11:05.4973220Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4973323Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4973327Z 
2025-01-22T20:11:05.4973651Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4973774Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4973887Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4973974Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4974155Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4974261Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4974489Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4974574Z     return BasePlasma(
2025-01-22T20:11:05.4974668Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4974756Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4974852Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4974935Z     self.update(**kwargs)
2025-01-22T20:11:05.4975031Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4975155Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4975273Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4975382Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4975591Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4975753Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4975964Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4976068Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4976200Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4976378Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4976554Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4976733Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4976995Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4977179Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4977360Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4977472Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4977735Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4977860Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4978114Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4978203Z     return self.apply_standard()
2025-01-22T20:11:05.4978489Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4978610Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4978922Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4979046Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4979268Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4979356Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4979627Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4979718Z     return self._get_value(key)
2025-01-22T20:11:05.4979979Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4980076Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4980184Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4980189Z 
2025-01-22T20:11:05.4980351Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4980557Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4980756Z        't046000', 't048000'],
2025-01-22T20:11:05.4980833Z       dtype='object')
2025-01-22T20:11:05.4980910Z key = 'cups'
2025-01-22T20:11:05.4980914Z 
2025-01-22T20:11:05.4980995Z     def get_loc(self, key):
2025-01-22T20:11:05.4981068Z         """
2025-01-22T20:11:05.4981229Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4981301Z     
2025-01-22T20:11:05.4981374Z         Parameters
2025-01-22T20:11:05.4981451Z         ----------
2025-01-22T20:11:05.4981593Z         key : label
2025-01-22T20:11:05.4981666Z     
2025-01-22T20:11:05.4981734Z         Returns
2025-01-22T20:11:05.4981809Z         -------
2025-01-22T20:11:05.4981940Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4982012Z     
2025-01-22T20:11:05.4982081Z         Examples
2025-01-22T20:11:05.4982158Z         --------
2025-01-22T20:11:05.4982261Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4982346Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4982422Z         1
2025-01-22T20:11:05.4982488Z     
2025-01-22T20:11:05.4982596Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4982685Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4982764Z         slice(1, 3, None)
2025-01-22T20:11:05.4982830Z     
2025-01-22T20:11:05.4982942Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4983033Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4983133Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4983201Z         """
2025-01-22T20:11:05.4983309Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4983379Z         try:
2025-01-22T20:11:05.4983485Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4983665Z         except KeyError as err:
2025-01-22T20:11:05.4983768Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4983874Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4983999Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4984071Z             ):
2025-01-22T20:11:05.4984165Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4984255Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4984336Z E           KeyError: 'cups'
2025-01-22T20:11:05.4984340Z 
2025-01-22T20:11:05.4984618Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4984867Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-t_electrons] _
2025-01-22T20:11:05.4984871Z 
2025-01-22T20:11:05.4985031Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4985242Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4985318Z        't046000', 't048000'],
2025-01-22T20:11:05.4985401Z       dtype='object')
2025-01-22T20:11:05.4985471Z key = 'cups'
2025-01-22T20:11:05.4985476Z 
2025-01-22T20:11:05.4985560Z     def get_loc(self, key):
2025-01-22T20:11:05.4985628Z         """
2025-01-22T20:11:05.4985794Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4985859Z     
2025-01-22T20:11:05.4985937Z         Parameters
2025-01-22T20:11:05.4986008Z         ----------
2025-01-22T20:11:05.4986083Z         key : label
2025-01-22T20:11:05.4986149Z     
2025-01-22T20:11:05.4986225Z         Returns
2025-01-22T20:11:05.4986295Z         -------
2025-01-22T20:11:05.4986428Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4986495Z     
2025-01-22T20:11:05.4986571Z         Examples
2025-01-22T20:11:05.4986641Z         --------
2025-01-22T20:11:05.4986743Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4986832Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4986899Z         1
2025-01-22T20:11:05.4987089Z     
2025-01-22T20:11:05.4987190Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4987281Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4987356Z         slice(1, 3, None)
2025-01-22T20:11:05.4987426Z     
2025-01-22T20:11:05.4987533Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4987627Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4987717Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4987908Z         """
2025-01-22T20:11:05.4988011Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4988083Z         try:
2025-01-22T20:11:05.4988181Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4988185Z 
2025-01-22T20:11:05.4988433Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4988548Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4988687Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4988759Z     ???
2025-01-22T20:11:05.4988887Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4988959Z     ???
2025-01-22T20:11:05.4989229Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4989300Z     ???
2025-01-22T20:11:05.4989406Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4989413Z 
2025-01-22T20:11:05.4989483Z >   ???
2025-01-22T20:11:05.4989560Z E   KeyError: 'cups'
2025-01-22T20:11:05.4989564Z 
2025-01-22T20:11:05.4989696Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4989701Z 
2025-01-22T20:11:05.4989874Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4989878Z 
2025-01-22T20:11:05.4990100Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4990425Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4991047Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4991052Z 
2025-01-22T20:11:05.4991146Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4991221Z     def plasma(
2025-01-22T20:11:05.4991295Z         self,
2025-01-22T20:11:05.4991380Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4991449Z         config,
2025-01-22T20:11:05.4991521Z     ):
2025-01-22T20:11:05.4991629Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4991728Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4991732Z 
2025-01-22T20:11:05.4991855Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4991966Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4992075Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4992166Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4992331Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4992435Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4992544Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4992627Z     return BasePlasma(
2025-01-22T20:11:05.4992716Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4992807Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4992901Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4992981Z     self.update(**kwargs)
2025-01-22T20:11:05.4993075Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4993195Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4993310Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4993412Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4993905Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4994062Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4994282Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4994379Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4994511Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4994818Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4995001Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4995179Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4995438Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4995619Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4995803Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4995909Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4996160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4996289Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4996531Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4996628Z     return self.apply_standard()
2025-01-22T20:11:05.4996909Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4997026Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4997337Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4997453Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4997675Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4997760Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4998034Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4998116Z     return self._get_value(key)
2025-01-22T20:11:05.4998377Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4998467Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4998579Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4998583Z 
2025-01-22T20:11:05.4998746Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4998972Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4999063Z        't046000', 't048000'],
2025-01-22T20:11:05.4999148Z       dtype='object')
2025-01-22T20:11:05.4999225Z key = 'cups'
2025-01-22T20:11:05.4999230Z 
2025-01-22T20:11:05.4999308Z     def get_loc(self, key):
2025-01-22T20:11:05.4999380Z         """
2025-01-22T20:11:05.4999537Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4999610Z     
2025-01-22T20:11:05.4999682Z         Parameters
2025-01-22T20:11:05.4999759Z         ----------
2025-01-22T20:11:05.4999829Z         key : label
2025-01-22T20:11:05.4999900Z     
2025-01-22T20:11:05.4999977Z         Returns
2025-01-22T20:11:05.5000047Z         -------
2025-01-22T20:11:05.5000185Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5000252Z     
2025-01-22T20:11:05.5000326Z         Examples
2025-01-22T20:11:05.5000396Z         --------
2025-01-22T20:11:05.5000501Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5000585Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5000658Z         1
2025-01-22T20:11:05.5000839Z     
2025-01-22T20:11:05.5000949Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5001037Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5001116Z         slice(1, 3, None)
2025-01-22T20:11:05.5001183Z     
2025-01-22T20:11:05.5001294Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5001386Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5001480Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5001619Z         """
2025-01-22T20:11:05.5001727Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5001800Z         try:
2025-01-22T20:11:05.5001897Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5001983Z         except KeyError as err:
2025-01-22T20:11:05.5002081Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5002186Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5002304Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5002381Z             ):
2025-01-22T20:11:05.5002476Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5002566Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5002645Z E           KeyError: 'cups'
2025-01-22T20:11:05.5002650Z 
2025-01-22T20:11:05.5002922Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5003132Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-w] _
2025-01-22T20:11:05.5003142Z 
2025-01-22T20:11:05.5003296Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5003627Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5003705Z        't046000', 't048000'],
2025-01-22T20:11:05.5003786Z       dtype='object')
2025-01-22T20:11:05.5003857Z key = 'cups'
2025-01-22T20:11:05.5003862Z 
2025-01-22T20:11:05.5003950Z     def get_loc(self, key):
2025-01-22T20:11:05.5004018Z         """
2025-01-22T20:11:05.5004182Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5004248Z     
2025-01-22T20:11:05.5004324Z         Parameters
2025-01-22T20:11:05.5004395Z         ----------
2025-01-22T20:11:05.5004470Z         key : label
2025-01-22T20:11:05.5004535Z     
2025-01-22T20:11:05.5004608Z         Returns
2025-01-22T20:11:05.5004682Z         -------
2025-01-22T20:11:05.5004815Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5004886Z     
2025-01-22T20:11:05.5004957Z         Examples
2025-01-22T20:11:05.5005030Z         --------
2025-01-22T20:11:05.5005127Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5005217Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5005283Z         1
2025-01-22T20:11:05.5005354Z     
2025-01-22T20:11:05.5005456Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5005551Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5005625Z         slice(1, 3, None)
2025-01-22T20:11:05.5005694Z     
2025-01-22T20:11:05.5005809Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5005898Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5005992Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5006058Z         """
2025-01-22T20:11:05.5006161Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5006232Z         try:
2025-01-22T20:11:05.5006334Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5006338Z 
2025-01-22T20:11:05.5006586Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5006696Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5006836Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5006905Z     ???
2025-01-22T20:11:05.5007160Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5007228Z     ???
2025-01-22T20:11:05.5007500Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5007566Z     ???
2025-01-22T20:11:05.5007678Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5007681Z 
2025-01-22T20:11:05.5007747Z >   ???
2025-01-22T20:11:05.5007830Z E   KeyError: 'cups'
2025-01-22T20:11:05.5007932Z 
2025-01-22T20:11:05.5008068Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5008072Z 
2025-01-22T20:11:05.5008240Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5008244Z 
2025-01-22T20:11:05.5008470Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5008785Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5009412Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5009417Z 
2025-01-22T20:11:05.5009508Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5009581Z     def plasma(
2025-01-22T20:11:05.5009657Z         self,
2025-01-22T20:11:05.5009740Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5009816Z         config,
2025-01-22T20:11:05.5009883Z     ):
2025-01-22T20:11:05.5009996Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5010088Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5010092Z 
2025-01-22T20:11:05.5010218Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5010323Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5010437Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5010521Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5010688Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5010793Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5010902Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5010987Z     return BasePlasma(
2025-01-22T20:11:05.5011071Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5011165Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5011253Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5011340Z     self.update(**kwargs)
2025-01-22T20:11:05.5011427Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5011551Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5011660Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5011766Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5011961Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5012119Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5012328Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5012430Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5012559Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5012725Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5012905Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5013079Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5013342Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5013607Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5013795Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5014021Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5014280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5014402Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5014645Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5014738Z     return self.apply_standard()
2025-01-22T20:11:05.5015131Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5015256Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5015560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5015680Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5015895Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5015989Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5016249Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5016337Z     return self._get_value(key)
2025-01-22T20:11:05.5016598Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5016684Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5016802Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5016807Z 
2025-01-22T20:11:05.5016962Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5017173Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5017246Z        't046000', 't048000'],
2025-01-22T20:11:05.5017326Z       dtype='object')
2025-01-22T20:11:05.5017398Z key = 'cups'
2025-01-22T20:11:05.5017406Z 
2025-01-22T20:11:05.5017491Z     def get_loc(self, key):
2025-01-22T20:11:05.5017558Z         """
2025-01-22T20:11:05.5017720Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5017791Z     
2025-01-22T20:11:05.5017864Z         Parameters
2025-01-22T20:11:05.5017940Z         ----------
2025-01-22T20:11:05.5018014Z         key : label
2025-01-22T20:11:05.5018085Z     
2025-01-22T20:11:05.5018153Z         Returns
2025-01-22T20:11:05.5018227Z         -------
2025-01-22T20:11:05.5018358Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5018431Z     
2025-01-22T20:11:05.5018500Z         Examples
2025-01-22T20:11:05.5018575Z         --------
2025-01-22T20:11:05.5018671Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5018760Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5018826Z         1
2025-01-22T20:11:05.5018897Z     
2025-01-22T20:11:05.5018998Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5019094Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5019171Z         slice(1, 3, None)
2025-01-22T20:11:05.5019242Z     
2025-01-22T20:11:05.5019347Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5019443Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5019536Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5019603Z         """
2025-01-22T20:11:05.5019708Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5019779Z         try:
2025-01-22T20:11:05.5019882Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5019964Z         except KeyError as err:
2025-01-22T20:11:05.5020068Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5020166Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5020288Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5020356Z             ):
2025-01-22T20:11:05.5020541Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5020628Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5020713Z E           KeyError: 'cups'
2025-01-22T20:11:05.5020717Z 
2025-01-22T20:11:05.5020986Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5021206Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-t_rad] _
2025-01-22T20:11:05.5021211Z 
2025-01-22T20:11:05.5021438Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5021646Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5021724Z        't046000', 't048000'],
2025-01-22T20:11:05.5021798Z       dtype='object')
2025-01-22T20:11:05.5021873Z key = 'cups'
2025-01-22T20:11:05.5021877Z 
2025-01-22T20:11:05.5021957Z     def get_loc(self, key):
2025-01-22T20:11:05.5022029Z         """
2025-01-22T20:11:05.5022222Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5022294Z     
2025-01-22T20:11:05.5022371Z         Parameters
2025-01-22T20:11:05.5022441Z         ----------
2025-01-22T20:11:05.5022516Z         key : label
2025-01-22T20:11:05.5022581Z     
2025-01-22T20:11:05.5022653Z         Returns
2025-01-22T20:11:05.5022722Z         -------
2025-01-22T20:11:05.5022854Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5022923Z     
2025-01-22T20:11:05.5022997Z         Examples
2025-01-22T20:11:05.5023066Z         --------
2025-01-22T20:11:05.5023167Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5023250Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5023320Z         1
2025-01-22T20:11:05.5023386Z     
2025-01-22T20:11:05.5023607Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5023698Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5023777Z         slice(1, 3, None)
2025-01-22T20:11:05.5023847Z     
2025-01-22T20:11:05.5023958Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5024053Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5024143Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5024215Z         """
2025-01-22T20:11:05.5024314Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5024387Z         try:
2025-01-22T20:11:05.5024487Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5024492Z 
2025-01-22T20:11:05.5024740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5024848Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5024987Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5025059Z     ???
2025-01-22T20:11:05.5025193Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5025262Z     ???
2025-01-22T20:11:05.5025532Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5025603Z     ???
2025-01-22T20:11:05.5025705Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5025709Z 
2025-01-22T20:11:05.5025779Z >   ???
2025-01-22T20:11:05.5025854Z E   KeyError: 'cups'
2025-01-22T20:11:05.5025858Z 
2025-01-22T20:11:05.5025991Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5025995Z 
2025-01-22T20:11:05.5026160Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5026164Z 
2025-01-22T20:11:05.5026389Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5026701Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5027322Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5027445Z 
2025-01-22T20:11:05.5027541Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5027615Z     def plasma(
2025-01-22T20:11:05.5027687Z         self,
2025-01-22T20:11:05.5027773Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5027845Z         config,
2025-01-22T20:11:05.5027911Z     ):
2025-01-22T20:11:05.5028139Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5028236Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5028240Z 
2025-01-22T20:11:05.5028364Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5028474Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5028579Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5028714Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5029003Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5029159Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5029325Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5029454Z     return BasePlasma(
2025-01-22T20:11:05.5029593Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5029735Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5029888Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5030069Z     self.update(**kwargs)
2025-01-22T20:11:05.5030221Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5030412Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5030630Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5030828Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5031144Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5031373Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5031716Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5031868Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5032086Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5032341Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5032622Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5032912Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5033339Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5033830Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5034145Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5034328Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5034757Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5034974Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5035372Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5035514Z     return self.apply_standard()
2025-01-22T20:11:05.5035947Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5036171Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5036753Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5036972Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5037372Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5037521Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5037998Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5038390Z     return self._get_value(key)
2025-01-22T20:11:05.5038879Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5039040Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5039247Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5039256Z 
2025-01-22T20:11:05.5039709Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5040104Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5040240Z        't046000', 't048000'],
2025-01-22T20:11:05.5040379Z       dtype='object')
2025-01-22T20:11:05.5040511Z key = 'cups'
2025-01-22T20:11:05.5040519Z 
2025-01-22T20:11:05.5040660Z     def get_loc(self, key):
2025-01-22T20:11:05.5040787Z         """
2025-01-22T20:11:05.5041072Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5041192Z     
2025-01-22T20:11:05.5041321Z         Parameters
2025-01-22T20:11:05.5041452Z         ----------
2025-01-22T20:11:05.5041576Z         key : label
2025-01-22T20:11:05.5041694Z     
2025-01-22T20:11:05.5041814Z         Returns
2025-01-22T20:11:05.5041943Z         -------
2025-01-22T20:11:05.5042183Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5042309Z     
2025-01-22T20:11:05.5042435Z         Examples
2025-01-22T20:11:05.5042562Z         --------
2025-01-22T20:11:05.5042732Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5042892Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5043012Z         1
2025-01-22T20:11:05.5043134Z     
2025-01-22T20:11:05.5043321Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5043473Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5043823Z         slice(1, 3, None)
2025-01-22T20:11:05.5043942Z     
2025-01-22T20:11:05.5044148Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5044310Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5044477Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5044596Z         """
2025-01-22T20:11:05.5044779Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5044898Z         try:
2025-01-22T20:11:05.5045088Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5045239Z         except KeyError as err:
2025-01-22T20:11:05.5045421Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5045587Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5045810Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5045944Z             ):
2025-01-22T20:11:05.5046116Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5046281Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5046439Z E           KeyError: 'cups'
2025-01-22T20:11:05.5046446Z 
2025-01-22T20:11:05.5046966Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5047418Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_electron] _
2025-01-22T20:11:05.5047427Z 
2025-01-22T20:11:05.5047722Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5048113Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5048244Z        't046000', 't048000'],
2025-01-22T20:11:05.5048372Z       dtype='object')
2025-01-22T20:11:05.5048497Z key = 'cups'
2025-01-22T20:11:05.5048505Z 
2025-01-22T20:11:05.5048644Z     def get_loc(self, key):
2025-01-22T20:11:05.5048762Z         """
2025-01-22T20:11:05.5049058Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5049441Z     
2025-01-22T20:11:05.5049588Z         Parameters
2025-01-22T20:11:05.5049725Z         ----------
2025-01-22T20:11:05.5049866Z         key : label
2025-01-22T20:11:05.5049982Z     
2025-01-22T20:11:05.5050117Z         Returns
2025-01-22T20:11:05.5050249Z         -------
2025-01-22T20:11:05.5050509Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5050628Z     
2025-01-22T20:11:05.5050760Z         Examples
2025-01-22T20:11:05.5051094Z         --------
2025-01-22T20:11:05.5051286Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5051436Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5051560Z         1
2025-01-22T20:11:05.5051674Z     
2025-01-22T20:11:05.5051869Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5052038Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5052178Z         slice(1, 3, None)
2025-01-22T20:11:05.5052305Z     
2025-01-22T20:11:05.5052506Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5052678Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5052835Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5052959Z         """
2025-01-22T20:11:05.5053139Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5053267Z         try:
2025-01-22T20:11:05.5053446Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5053454Z 
2025-01-22T20:11:05.5054142Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5054347Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5054609Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5054739Z     ???
2025-01-22T20:11:05.5054975Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5055099Z     ???
2025-01-22T20:11:05.5055601Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5055736Z     ???
2025-01-22T20:11:05.5055932Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5055940Z 
2025-01-22T20:11:05.5056071Z >   ???
2025-01-22T20:11:05.5056218Z E   KeyError: 'cups'
2025-01-22T20:11:05.5056227Z 
2025-01-22T20:11:05.5056480Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5056489Z 
2025-01-22T20:11:05.5056806Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5056822Z 
2025-01-22T20:11:05.5057226Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5057823Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5058958Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5058986Z 
2025-01-22T20:11:05.5059165Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5059294Z     def plasma(
2025-01-22T20:11:05.5059424Z         self,
2025-01-22T20:11:05.5059510Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5059584Z         config,
2025-01-22T20:11:05.5059651Z     ):
2025-01-22T20:11:05.5059782Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5059893Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5059898Z 
2025-01-22T20:11:05.5060032Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5060156Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5060268Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5060358Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5060531Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5060824Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5060944Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5061030Z     return BasePlasma(
2025-01-22T20:11:05.5061118Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5061216Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5061313Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5061402Z     self.update(**kwargs)
2025-01-22T20:11:05.5061598Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5061728Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5061853Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5061958Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5062170Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5062324Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5062539Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5062643Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5062775Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5062944Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5063120Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5063296Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5063773Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5063969Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5064156Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5064265Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5064527Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5064662Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5064905Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5064998Z     return self.apply_standard()
2025-01-22T20:11:05.5065276Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5065403Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5065720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5065841Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5066062Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5066147Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5066417Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5066502Z     return self._get_value(key)
2025-01-22T20:11:05.5066765Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5066852Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5066969Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5066974Z 
2025-01-22T20:11:05.5067136Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5067350Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5067430Z        't046000', 't048000'],
2025-01-22T20:11:05.5067504Z       dtype='object')
2025-01-22T20:11:05.5067581Z key = 'cups'
2025-01-22T20:11:05.5067585Z 
2025-01-22T20:11:05.5067664Z     def get_loc(self, key):
2025-01-22T20:11:05.5067737Z         """
2025-01-22T20:11:05.5067894Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5068098Z     
2025-01-22T20:11:05.5068171Z         Parameters
2025-01-22T20:11:05.5068249Z         ----------
2025-01-22T20:11:05.5068323Z         key : label
2025-01-22T20:11:05.5068401Z     
2025-01-22T20:11:05.5068471Z         Returns
2025-01-22T20:11:05.5068547Z         -------
2025-01-22T20:11:05.5068682Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5068753Z     
2025-01-22T20:11:05.5068827Z         Examples
2025-01-22T20:11:05.5068998Z         --------
2025-01-22T20:11:05.5069106Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5069193Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5069264Z         1
2025-01-22T20:11:05.5069331Z     
2025-01-22T20:11:05.5069442Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5069530Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5069610Z         slice(1, 3, None)
2025-01-22T20:11:05.5069675Z     
2025-01-22T20:11:05.5069792Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5069885Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5069980Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5070046Z         """
2025-01-22T20:11:05.5070152Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5070220Z         try:
2025-01-22T20:11:05.5070322Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5070410Z         except KeyError as err:
2025-01-22T20:11:05.5070510Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5070615Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5070736Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5070808Z             ):
2025-01-22T20:11:05.5070901Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5070991Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5071072Z E           KeyError: 'cups'
2025-01-22T20:11:05.5071080Z 
2025-01-22T20:11:05.5071356Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5071629Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-level_boltzmann_factor] _
2025-01-22T20:11:05.5071633Z 
2025-01-22T20:11:05.5071792Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5072007Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5072081Z        't046000', 't048000'],
2025-01-22T20:11:05.5072162Z       dtype='object')
2025-01-22T20:11:05.5072234Z key = 'cups'
2025-01-22T20:11:05.5072238Z 
2025-01-22T20:11:05.5072322Z     def get_loc(self, key):
2025-01-22T20:11:05.5072390Z         """
2025-01-22T20:11:05.5072550Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5072615Z     
2025-01-22T20:11:05.5072693Z         Parameters
2025-01-22T20:11:05.5072768Z         ----------
2025-01-22T20:11:05.5072844Z         key : label
2025-01-22T20:11:05.5072909Z     
2025-01-22T20:11:05.5072984Z         Returns
2025-01-22T20:11:05.5073053Z         -------
2025-01-22T20:11:05.5073186Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5073257Z     
2025-01-22T20:11:05.5073329Z         Examples
2025-01-22T20:11:05.5073403Z         --------
2025-01-22T20:11:05.5073692Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5073787Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5073856Z         1
2025-01-22T20:11:05.5073926Z     
2025-01-22T20:11:05.5074229Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5074343Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5074418Z         slice(1, 3, None)
2025-01-22T20:11:05.5074488Z     
2025-01-22T20:11:05.5074595Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5074834Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5074924Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5074995Z         """
2025-01-22T20:11:05.5075097Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5075170Z         try:
2025-01-22T20:11:05.5075268Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5075280Z 
2025-01-22T20:11:05.5075662Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5075786Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5075924Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5075996Z     ???
2025-01-22T20:11:05.5076125Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5076195Z     ???
2025-01-22T20:11:05.5076465Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5076541Z     ???
2025-01-22T20:11:05.5076645Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5076649Z 
2025-01-22T20:11:05.5076720Z >   ???
2025-01-22T20:11:05.5076798Z E   KeyError: 'cups'
2025-01-22T20:11:05.5076807Z 
2025-01-22T20:11:05.5076935Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5076939Z 
2025-01-22T20:11:05.5077119Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5077123Z 
2025-01-22T20:11:05.5077349Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5077678Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5078304Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5078317Z 
2025-01-22T20:11:05.5078410Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5078489Z     def plasma(
2025-01-22T20:11:05.5078557Z         self,
2025-01-22T20:11:05.5078642Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5078710Z         config,
2025-01-22T20:11:05.5078787Z     ):
2025-01-22T20:11:05.5078900Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5078999Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5079007Z 
2025-01-22T20:11:05.5079130Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5079240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5079347Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5079437Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5079602Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5079706Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5079824Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5079903Z     return BasePlasma(
2025-01-22T20:11:05.5079996Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5080084Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5080177Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5080257Z     self.update(**kwargs)
2025-01-22T20:11:05.5080351Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5080475Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5080590Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5080693Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5080897Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5081047Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5081262Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5081468Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5081601Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5081774Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5081944Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5082121Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5082449Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5082627Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5082808Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5082916Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5083170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5083299Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5083731Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5083844Z     return self.apply_standard()
2025-01-22T20:11:05.5084135Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5084258Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5084573Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5084691Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5084911Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5084997Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5085268Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5085350Z     return self._get_value(key)
2025-01-22T20:11:05.5085617Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5085706Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5085815Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5085819Z 
2025-01-22T20:11:05.5085978Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5086187Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5086265Z        't046000', 't048000'],
2025-01-22T20:11:05.5086340Z       dtype='object')
2025-01-22T20:11:05.5086416Z key = 'cups'
2025-01-22T20:11:05.5086421Z 
2025-01-22T20:11:05.5086499Z     def get_loc(self, key):
2025-01-22T20:11:05.5086571Z         """
2025-01-22T20:11:05.5086727Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5086798Z     
2025-01-22T20:11:05.5086880Z         Parameters
2025-01-22T20:11:05.5086953Z         ----------
2025-01-22T20:11:05.5087030Z         key : label
2025-01-22T20:11:05.5087095Z     
2025-01-22T20:11:05.5087169Z         Returns
2025-01-22T20:11:05.5087238Z         -------
2025-01-22T20:11:05.5087375Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5087441Z     
2025-01-22T20:11:05.5087517Z         Examples
2025-01-22T20:11:05.5087587Z         --------
2025-01-22T20:11:05.5087695Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5087781Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5087853Z         1
2025-01-22T20:11:05.5087919Z     
2025-01-22T20:11:05.5088027Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5088115Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5088202Z         slice(1, 3, None)
2025-01-22T20:11:05.5088269Z     
2025-01-22T20:11:05.5088379Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5088600Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5088690Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5088766Z         """
2025-01-22T20:11:05.5088867Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5088938Z         try:
2025-01-22T20:11:05.5089036Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5089122Z         except KeyError as err:
2025-01-22T20:11:05.5089218Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5089422Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5089543Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5089615Z             ):
2025-01-22T20:11:05.5089705Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5089796Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5089876Z E           KeyError: 'cups'
2025-01-22T20:11:05.5089880Z 
2025-01-22T20:11:05.5090152Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5090419Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-partition_function] _
2025-01-22T20:11:05.5090424Z 
2025-01-22T20:11:05.5090577Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5090787Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5090864Z        't046000', 't048000'],
2025-01-22T20:11:05.5090943Z       dtype='object')
2025-01-22T20:11:05.5091014Z key = 'cups'
2025-01-22T20:11:05.5091018Z 
2025-01-22T20:11:05.5091101Z     def get_loc(self, key):
2025-01-22T20:11:05.5091168Z         """
2025-01-22T20:11:05.5091331Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5091396Z     
2025-01-22T20:11:05.5091472Z         Parameters
2025-01-22T20:11:05.5091548Z         ----------
2025-01-22T20:11:05.5091622Z         key : label
2025-01-22T20:11:05.5091694Z     
2025-01-22T20:11:05.5091762Z         Returns
2025-01-22T20:11:05.5091837Z         -------
2025-01-22T20:11:05.5091968Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5092039Z     
2025-01-22T20:11:05.5092108Z         Examples
2025-01-22T20:11:05.5092181Z         --------
2025-01-22T20:11:05.5092275Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5092366Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5092435Z         1
2025-01-22T20:11:05.5092505Z     
2025-01-22T20:11:05.5092604Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5092697Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5092772Z         slice(1, 3, None)
2025-01-22T20:11:05.5092843Z     
2025-01-22T20:11:05.5092948Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5093041Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5093133Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5093204Z         """
2025-01-22T20:11:05.5093307Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5093375Z         try:
2025-01-22T20:11:05.5093476Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5093480Z 
2025-01-22T20:11:05.5093894Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5094013Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5094150Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5094223Z     ???
2025-01-22T20:11:05.5094350Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5094422Z     ???
2025-01-22T20:11:05.5094687Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5094757Z     ???
2025-01-22T20:11:05.5094866Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5094990Z 
2025-01-22T20:11:05.5095059Z >   ???
2025-01-22T20:11:05.5095140Z E   KeyError: 'cups'
2025-01-22T20:11:05.5095145Z 
2025-01-22T20:11:05.5095271Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5095275Z 
2025-01-22T20:11:05.5095445Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5095449Z 
2025-01-22T20:11:05.5095770Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5096094Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5096724Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5096729Z 
2025-01-22T20:11:05.5096822Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5096898Z     def plasma(
2025-01-22T20:11:05.5096966Z         self,
2025-01-22T20:11:05.5097052Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5097120Z         config,
2025-01-22T20:11:05.5097190Z     ):
2025-01-22T20:11:05.5097300Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5097398Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5097402Z 
2025-01-22T20:11:05.5097525Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5097633Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5097739Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5097825Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5097991Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5098088Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5098200Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5098283Z     return BasePlasma(
2025-01-22T20:11:05.5098374Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5098459Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5098559Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5098638Z     self.update(**kwargs)
2025-01-22T20:11:05.5098733Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5098852Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5098969Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5099070Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5099273Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5099429Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5099636Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5099736Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5099863Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5100035Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5100203Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5100378Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5100635Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5100817Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5100998Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5101106Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5101364Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5101487Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5101732Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5101904Z     return self.apply_standard()
2025-01-22T20:11:05.5102185Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5102304Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5102611Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5102820Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5103040Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5103131Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5103394Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5103482Z     return self._get_value(key)
2025-01-22T20:11:05.5103921Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5104018Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5104128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5104135Z 
2025-01-22T20:11:05.5104301Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5104510Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5104594Z        't046000', 't048000'],
2025-01-22T20:11:05.5104671Z       dtype='object')
2025-01-22T20:11:05.5104749Z key = 'cups'
2025-01-22T20:11:05.5104753Z 
2025-01-22T20:11:05.5104839Z     def get_loc(self, key):
2025-01-22T20:11:05.5104907Z         """
2025-01-22T20:11:05.5105068Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5105143Z     
2025-01-22T20:11:05.5105221Z         Parameters
2025-01-22T20:11:05.5105291Z         ----------
2025-01-22T20:11:05.5105372Z         key : label
2025-01-22T20:11:05.5105438Z     
2025-01-22T20:11:05.5105511Z         Returns
2025-01-22T20:11:05.5105579Z         -------
2025-01-22T20:11:05.5105714Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5105779Z     
2025-01-22T20:11:05.5105854Z         Examples
2025-01-22T20:11:05.5105925Z         --------
2025-01-22T20:11:05.5106029Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5106117Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5106188Z         1
2025-01-22T20:11:05.5106253Z     
2025-01-22T20:11:05.5106364Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5106456Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5106532Z         slice(1, 3, None)
2025-01-22T20:11:05.5106602Z     
2025-01-22T20:11:05.5106708Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5106802Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5106895Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5106968Z         """
2025-01-22T20:11:05.5107068Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5107141Z         try:
2025-01-22T20:11:05.5107239Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5107324Z         except KeyError as err:
2025-01-22T20:11:05.5107420Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5107523Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5107643Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5107716Z             ):
2025-01-22T20:11:05.5107813Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5107899Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5107986Z E           KeyError: 'cups'
2025-01-22T20:11:05.5107991Z 
2025-01-22T20:11:05.5108264Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5108647Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-excitation_energy] _
2025-01-22T20:11:05.5108652Z 
2025-01-22T20:11:05.5108804Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5109017Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5109091Z        't046000', 't048000'],
2025-01-22T20:11:05.5109172Z       dtype='object')
2025-01-22T20:11:05.5109341Z key = 'cups'
2025-01-22T20:11:05.5109350Z 
2025-01-22T20:11:05.5109430Z     def get_loc(self, key):
2025-01-22T20:11:05.5109502Z         """
2025-01-22T20:11:05.5109660Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5109730Z     
2025-01-22T20:11:05.5109803Z         Parameters
2025-01-22T20:11:05.5109878Z         ----------
2025-01-22T20:11:05.5109950Z         key : label
2025-01-22T20:11:05.5110023Z     
2025-01-22T20:11:05.5110094Z         Returns
2025-01-22T20:11:05.5110169Z         -------
2025-01-22T20:11:05.5110297Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5110368Z     
2025-01-22T20:11:05.5110438Z         Examples
2025-01-22T20:11:05.5110512Z         --------
2025-01-22T20:11:05.5110607Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5110697Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5110765Z         1
2025-01-22T20:11:05.5110836Z     
2025-01-22T20:11:05.5110943Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5111029Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5111110Z         slice(1, 3, None)
2025-01-22T20:11:05.5111176Z     
2025-01-22T20:11:05.5111287Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5111375Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5111470Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5111536Z         """
2025-01-22T20:11:05.5111645Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5111713Z         try:
2025-01-22T20:11:05.5111816Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5111820Z 
2025-01-22T20:11:05.5112066Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5112182Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5112324Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5112397Z     ???
2025-01-22T20:11:05.5112534Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5112601Z     ???
2025-01-22T20:11:05.5112877Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5112943Z     ???
2025-01-22T20:11:05.5113056Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5113060Z 
2025-01-22T20:11:05.5113130Z >   ???
2025-01-22T20:11:05.5113211Z E   KeyError: 'cups'
2025-01-22T20:11:05.5113216Z 
2025-01-22T20:11:05.5113343Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5113347Z 
2025-01-22T20:11:05.5113713Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5113720Z 
2025-01-22T20:11:05.5113953Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5114277Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5114903Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5114908Z 
2025-01-22T20:11:05.5114996Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5115074Z     def plasma(
2025-01-22T20:11:05.5115271Z         self,
2025-01-22T20:11:05.5115360Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5115428Z         config,
2025-01-22T20:11:05.5115499Z     ):
2025-01-22T20:11:05.5115612Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5115713Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5115718Z 
2025-01-22T20:11:05.5115846Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5116051Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5116164Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5116248Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5116421Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5116520Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5116634Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5116713Z     return BasePlasma(
2025-01-22T20:11:05.5116803Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5116894Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5116990Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5117071Z     self.update(**kwargs)
2025-01-22T20:11:05.5117164Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5117290Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5117400Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5117509Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5117709Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5117868Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5118078Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5118178Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5118303Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5118475Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5118648Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5118824Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5119085Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5119257Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5119448Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5119550Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5119810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5119935Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5120183Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5120275Z     return self.apply_standard()
2025-01-22T20:11:05.5120558Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5120677Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5120988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5121110Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5121329Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5121420Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5121684Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5121770Z     return self._get_value(key)
2025-01-22T20:11:05.5122028Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5122120Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5122347Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5122352Z 
2025-01-22T20:11:05.5122517Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5122730Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5122805Z        't046000', 't048000'],
2025-01-22T20:11:05.5122956Z       dtype='object')
2025-01-22T20:11:05.5123029Z key = 'cups'
2025-01-22T20:11:05.5123033Z 
2025-01-22T20:11:05.5123118Z     def get_loc(self, key):
2025-01-22T20:11:05.5123187Z         """
2025-01-22T20:11:05.5123350Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5123416Z     
2025-01-22T20:11:05.5123668Z         Parameters
2025-01-22T20:11:05.5123801Z         ----------
2025-01-22T20:11:05.5123936Z         key : label
2025-01-22T20:11:05.5124058Z     
2025-01-22T20:11:05.5124209Z         Returns
2025-01-22T20:11:05.5124295Z         -------
2025-01-22T20:11:05.5124433Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5124498Z     
2025-01-22T20:11:05.5124574Z         Examples
2025-01-22T20:11:05.5124649Z         --------
2025-01-22T20:11:05.5124750Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5124842Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5124910Z         1
2025-01-22T20:11:05.5124980Z     
2025-01-22T20:11:05.5125088Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5125183Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5125258Z         slice(1, 3, None)
2025-01-22T20:11:05.5125328Z     
2025-01-22T20:11:05.5125436Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5125533Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5125625Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5125697Z         """
2025-01-22T20:11:05.5125800Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5125874Z         try:
2025-01-22T20:11:05.5125973Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5126059Z         except KeyError as err:
2025-01-22T20:11:05.5126161Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5126259Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5126386Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5126455Z             ):
2025-01-22T20:11:05.5126551Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5126639Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5126723Z E           KeyError: 'cups'
2025-01-22T20:11:05.5126728Z 
2025-01-22T20:11:05.5126995Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5127222Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines] _
2025-01-22T20:11:05.5127231Z 
2025-01-22T20:11:05.5127385Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5127597Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5127677Z        't046000', 't048000'],
2025-01-22T20:11:05.5127750Z       dtype='object')
2025-01-22T20:11:05.5127825Z key = 'cups'
2025-01-22T20:11:05.5127829Z 
2025-01-22T20:11:05.5127911Z     def get_loc(self, key):
2025-01-22T20:11:05.5127982Z         """
2025-01-22T20:11:05.5128141Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5128211Z     
2025-01-22T20:11:05.5128283Z         Parameters
2025-01-22T20:11:05.5128357Z         ----------
2025-01-22T20:11:05.5128428Z         key : label
2025-01-22T20:11:05.5128498Z     
2025-01-22T20:11:05.5128567Z         Returns
2025-01-22T20:11:05.5128643Z         -------
2025-01-22T20:11:05.5128913Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5128986Z     
2025-01-22T20:11:05.5129055Z         Examples
2025-01-22T20:11:05.5129131Z         --------
2025-01-22T20:11:05.5129230Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5129314Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5129384Z         1
2025-01-22T20:11:05.5129451Z     
2025-01-22T20:11:05.5129553Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5129760Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5129842Z         slice(1, 3, None)
2025-01-22T20:11:05.5129908Z     
2025-01-22T20:11:05.5130018Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5130108Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5130202Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5130269Z         """
2025-01-22T20:11:05.5130373Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5130445Z         try:
2025-01-22T20:11:05.5130547Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5130552Z 
2025-01-22T20:11:05.5130800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5130907Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5131046Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5131114Z     ???
2025-01-22T20:11:05.5131250Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5131317Z     ???
2025-01-22T20:11:05.5131591Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5131659Z     ???
2025-01-22T20:11:05.5131767Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5131771Z 
2025-01-22T20:11:05.5131836Z >   ???
2025-01-22T20:11:05.5131919Z E   KeyError: 'cups'
2025-01-22T20:11:05.5131926Z 
2025-01-22T20:11:05.5132059Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5132063Z 
2025-01-22T20:11:05.5132230Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5132234Z 
2025-01-22T20:11:05.5132463Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5132784Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5133415Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5133420Z 
2025-01-22T20:11:05.5133658Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5133740Z     def plasma(
2025-01-22T20:11:05.5133814Z         self,
2025-01-22T20:11:05.5133897Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5133974Z         config,
2025-01-22T20:11:05.5134040Z     ):
2025-01-22T20:11:05.5134157Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5134251Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5134255Z 
2025-01-22T20:11:05.5134381Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5134485Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5134596Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5134678Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5134846Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5134946Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5135059Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5135141Z     return BasePlasma(
2025-01-22T20:11:05.5135224Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5135317Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5135528Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5135612Z     self.update(**kwargs)
2025-01-22T20:11:05.5135700Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5135825Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5135936Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5136043Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5136344Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5136502Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5136713Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5136814Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5136940Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5137113Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5137288Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5137463Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5137725Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5137896Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5138079Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5138184Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5138450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5138574Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5138821Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5138912Z     return self.apply_standard()
2025-01-22T20:11:05.5139186Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5139311Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5139616Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5139735Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5139948Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5140045Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5140309Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5140396Z     return self._get_value(key)
2025-01-22T20:11:05.5140650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5140744Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5140855Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5140862Z 
2025-01-22T20:11:05.5141018Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5141232Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5141307Z        't046000', 't048000'],
2025-01-22T20:11:05.5141387Z       dtype='object')
2025-01-22T20:11:05.5141458Z key = 'cups'
2025-01-22T20:11:05.5141462Z 
2025-01-22T20:11:05.5141551Z     def get_loc(self, key):
2025-01-22T20:11:05.5141619Z         """
2025-01-22T20:11:05.5141782Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5141849Z     
2025-01-22T20:11:05.5141929Z         Parameters
2025-01-22T20:11:05.5142006Z         ----------
2025-01-22T20:11:05.5142077Z         key : label
2025-01-22T20:11:05.5142150Z     
2025-01-22T20:11:05.5142219Z         Returns
2025-01-22T20:11:05.5142295Z         -------
2025-01-22T20:11:05.5142544Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5142615Z     
2025-01-22T20:11:05.5142683Z         Examples
2025-01-22T20:11:05.5142758Z         --------
2025-01-22T20:11:05.5142856Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5142945Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5143013Z         1
2025-01-22T20:11:05.5143083Z     
2025-01-22T20:11:05.5143184Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5143351Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5143429Z         slice(1, 3, None)
2025-01-22T20:11:05.5143620Z     
2025-01-22T20:11:05.5143729Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5143825Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5143920Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5143987Z         """
2025-01-22T20:11:05.5144092Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5144165Z         try:
2025-01-22T20:11:05.5144267Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5144349Z         except KeyError as err:
2025-01-22T20:11:05.5144451Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5144548Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5144672Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5144740Z             ):
2025-01-22T20:11:05.5144837Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5144922Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5145007Z E           KeyError: 'cups'
2025-01-22T20:11:05.5145011Z 
2025-01-22T20:11:05.5145275Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5145553Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] _
2025-01-22T20:11:05.5145558Z 
2025-01-22T20:11:05.5145718Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5145928Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5146008Z        't046000', 't048000'],
2025-01-22T20:11:05.5146082Z       dtype='object')
2025-01-22T20:11:05.5146158Z key = 'cups'
2025-01-22T20:11:05.5146163Z 
2025-01-22T20:11:05.5146240Z     def get_loc(self, key):
2025-01-22T20:11:05.5150298Z         """
2025-01-22T20:11:05.5150510Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5150587Z     
2025-01-22T20:11:05.5150666Z         Parameters
2025-01-22T20:11:05.5150747Z         ----------
2025-01-22T20:11:05.5150820Z         key : label
2025-01-22T20:11:05.5150892Z     
2025-01-22T20:11:05.5150962Z         Returns
2025-01-22T20:11:05.5151043Z         -------
2025-01-22T20:11:05.5151197Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5151268Z     
2025-01-22T20:11:05.5151346Z         Examples
2025-01-22T20:11:05.5151418Z         --------
2025-01-22T20:11:05.5151528Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5151615Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5151689Z         1
2025-01-22T20:11:05.5151756Z     
2025-01-22T20:11:05.5151868Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5151957Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5152047Z         slice(1, 3, None)
2025-01-22T20:11:05.5152114Z     
2025-01-22T20:11:05.5152239Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5152335Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5152433Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5152502Z         """
2025-01-22T20:11:05.5152611Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5152680Z         try:
2025-01-22T20:11:05.5152787Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5152944Z 
2025-01-22T20:11:05.5153217Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5153337Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5153488Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5153873Z     ???
2025-01-22T20:11:05.5154022Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5154231Z     ???
2025-01-22T20:11:05.5154519Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5154588Z     ???
2025-01-22T20:11:05.5154703Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5154707Z 
2025-01-22T20:11:05.5154774Z >   ???
2025-01-22T20:11:05.5154857Z E   KeyError: 'cups'
2025-01-22T20:11:05.5154861Z 
2025-01-22T20:11:05.5154999Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5155023Z 
2025-01-22T20:11:05.5155198Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5155202Z 
2025-01-22T20:11:05.5155432Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5155761Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5156406Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5156411Z 
2025-01-22T20:11:05.5156509Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5156584Z     def plasma(
2025-01-22T20:11:05.5156660Z         self,
2025-01-22T20:11:05.5156742Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5156817Z         config,
2025-01-22T20:11:05.5156888Z     ):
2025-01-22T20:11:05.5157012Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5157111Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5157115Z 
2025-01-22T20:11:05.5157249Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5157360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5157476Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5157564Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5157743Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5157852Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5157964Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5158052Z     return BasePlasma(
2025-01-22T20:11:05.5158139Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5158233Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5158321Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5158413Z     self.update(**kwargs)
2025-01-22T20:11:05.5158504Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5158632Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5158742Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5158852Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5159054Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5159216Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5159425Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5159529Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5159663Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5159832Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5160012Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5160309Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5160577Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5160750Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5160937Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5161041Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5161376Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5161509Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5161761Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5161860Z     return self.apply_standard()
2025-01-22T20:11:05.5162138Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5162273Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5162580Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5162705Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5162925Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5163023Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5163291Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5163381Z     return self._get_value(key)
2025-01-22T20:11:05.5163784Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5163875Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5163995Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5164000Z 
2025-01-22T20:11:05.5164164Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5164382Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5164460Z        't046000', 't048000'],
2025-01-22T20:11:05.5164542Z       dtype='object')
2025-01-22T20:11:05.5164621Z key = 'cups'
2025-01-22T20:11:05.5164625Z 
2025-01-22T20:11:05.5164711Z     def get_loc(self, key):
2025-01-22T20:11:05.5164781Z         """
2025-01-22T20:11:05.5164952Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5165025Z     
2025-01-22T20:11:05.5165099Z         Parameters
2025-01-22T20:11:05.5165181Z         ----------
2025-01-22T20:11:05.5165253Z         key : label
2025-01-22T20:11:05.5165325Z     
2025-01-22T20:11:05.5165394Z         Returns
2025-01-22T20:11:05.5165471Z         -------
2025-01-22T20:11:05.5165605Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5165680Z     
2025-01-22T20:11:05.5165751Z         Examples
2025-01-22T20:11:05.5165827Z         --------
2025-01-22T20:11:05.5165930Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5166022Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5166089Z         1
2025-01-22T20:11:05.5166157Z     
2025-01-22T20:11:05.5166266Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5166360Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5166438Z         slice(1, 3, None)
2025-01-22T20:11:05.5166509Z     
2025-01-22T20:11:05.5166619Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5166715Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5166805Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5166876Z         """
2025-01-22T20:11:05.5166979Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5167051Z         try:
2025-01-22T20:11:05.5167151Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5167361Z         except KeyError as err:
2025-01-22T20:11:05.5167458Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5167565Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5167686Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5167758Z             ):
2025-01-22T20:11:05.5167855Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5168039Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5168127Z E           KeyError: 'cups'
2025-01-22T20:11:05.5168131Z 
2025-01-22T20:11:05.5168409Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5168684Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] _
2025-01-22T20:11:05.5168689Z 
2025-01-22T20:11:05.5168844Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5169061Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5169135Z        't046000', 't048000'],
2025-01-22T20:11:05.5169216Z       dtype='object')
2025-01-22T20:11:05.5169292Z key = 'cups'
2025-01-22T20:11:05.5169297Z 
2025-01-22T20:11:05.5169376Z     def get_loc(self, key):
2025-01-22T20:11:05.5169449Z         """
2025-01-22T20:11:05.5169610Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5169681Z     
2025-01-22T20:11:05.5169752Z         Parameters
2025-01-22T20:11:05.5169830Z         ----------
2025-01-22T20:11:05.5169903Z         key : label
2025-01-22T20:11:05.5169973Z     
2025-01-22T20:11:05.5170040Z         Returns
2025-01-22T20:11:05.5170114Z         -------
2025-01-22T20:11:05.5170248Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5170319Z     
2025-01-22T20:11:05.5170388Z         Examples
2025-01-22T20:11:05.5170465Z         --------
2025-01-22T20:11:05.5170563Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5170653Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5170721Z         1
2025-01-22T20:11:05.5170792Z     
2025-01-22T20:11:05.5170897Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5170984Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5171065Z         slice(1, 3, None)
2025-01-22T20:11:05.5171133Z     
2025-01-22T20:11:05.5171247Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5171337Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5171433Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5171500Z         """
2025-01-22T20:11:05.5171605Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5171674Z         try:
2025-01-22T20:11:05.5171775Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5171780Z 
2025-01-22T20:11:05.5172029Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5172149Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5172294Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5172361Z     ???
2025-01-22T20:11:05.5172495Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5172562Z     ???
2025-01-22T20:11:05.5172838Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5172906Z     ???
2025-01-22T20:11:05.5173017Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5173021Z 
2025-01-22T20:11:05.5173087Z >   ???
2025-01-22T20:11:05.5173169Z E   KeyError: 'cups'
2025-01-22T20:11:05.5173173Z 
2025-01-22T20:11:05.5173300Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5173305Z 
2025-01-22T20:11:05.5173662Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5173667Z 
2025-01-22T20:11:05.5173900Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5174222Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5174958Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5174964Z 
2025-01-22T20:11:05.5175057Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5175134Z     def plasma(
2025-01-22T20:11:05.5175206Z         self,
2025-01-22T20:11:05.5175292Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5175363Z         config,
2025-01-22T20:11:05.5175436Z     ):
2025-01-22T20:11:05.5175547Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5175652Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5175656Z 
2025-01-22T20:11:05.5175782Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5175888Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5175999Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5176083Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5176258Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5176362Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5176485Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5176564Z     return BasePlasma(
2025-01-22T20:11:05.5176654Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5176744Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5176839Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5176921Z     self.update(**kwargs)
2025-01-22T20:11:05.5177019Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5177153Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5177273Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5177383Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5177587Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5177747Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5177966Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5178067Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5178194Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5178365Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5178536Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5178714Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5178983Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5179156Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5179342Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5179445Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5179713Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5179836Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5180084Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5180171Z     return self.apply_standard()
2025-01-22T20:11:05.5180455Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5180573Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5181019Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5181145Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5181362Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5181453Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5181790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5181880Z     return self._get_value(key)
2025-01-22T20:11:05.5182138Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5182233Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5182344Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5182349Z 
2025-01-22T20:11:05.5182517Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5182734Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5182808Z        't046000', 't048000'],
2025-01-22T20:11:05.5182888Z       dtype='object')
2025-01-22T20:11:05.5182961Z key = 'cups'
2025-01-22T20:11:05.5182965Z 
2025-01-22T20:11:05.5183049Z     def get_loc(self, key):
2025-01-22T20:11:05.5183118Z         """
2025-01-22T20:11:05.5183283Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5183351Z     
2025-01-22T20:11:05.5183430Z         Parameters
2025-01-22T20:11:05.5183598Z         ----------
2025-01-22T20:11:05.5183677Z         key : label
2025-01-22T20:11:05.5183745Z     
2025-01-22T20:11:05.5183820Z         Returns
2025-01-22T20:11:05.5183891Z         -------
2025-01-22T20:11:05.5184028Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5184103Z     
2025-01-22T20:11:05.5184174Z         Examples
2025-01-22T20:11:05.5184254Z         --------
2025-01-22T20:11:05.5184354Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5184443Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5184513Z         1
2025-01-22T20:11:05.5184584Z     
2025-01-22T20:11:05.5184691Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5184784Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5184859Z         slice(1, 3, None)
2025-01-22T20:11:05.5184932Z     
2025-01-22T20:11:05.5185042Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5185137Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5185229Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5185302Z         """
2025-01-22T20:11:05.5185404Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5185478Z         try:
2025-01-22T20:11:05.5185577Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5185671Z         except KeyError as err:
2025-01-22T20:11:05.5185777Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5185877Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5186001Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5186069Z             ):
2025-01-22T20:11:05.5186165Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5186251Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5186341Z E           KeyError: 'cups'
2025-01-22T20:11:05.5186349Z 
2025-01-22T20:11:05.5186616Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5186861Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-atomic_mass] _
2025-01-22T20:11:05.5186865Z 
2025-01-22T20:11:05.5187021Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5187234Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5187433Z        't046000', 't048000'],
2025-01-22T20:11:05.5187508Z       dtype='object')
2025-01-22T20:11:05.5187585Z key = 'cups'
2025-01-22T20:11:05.5187589Z 
2025-01-22T20:11:05.5187669Z     def get_loc(self, key):
2025-01-22T20:11:05.5187743Z         """
2025-01-22T20:11:05.5187902Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5187973Z     
2025-01-22T20:11:05.5188143Z         Parameters
2025-01-22T20:11:05.5188222Z         ----------
2025-01-22T20:11:05.5188294Z         key : label
2025-01-22T20:11:05.5188365Z     
2025-01-22T20:11:05.5188440Z         Returns
2025-01-22T20:11:05.5188514Z         -------
2025-01-22T20:11:05.5188644Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5188715Z     
2025-01-22T20:11:05.5188791Z         Examples
2025-01-22T20:11:05.5188861Z         --------
2025-01-22T20:11:05.5188962Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5189050Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5189122Z         1
2025-01-22T20:11:05.5189188Z     
2025-01-22T20:11:05.5189296Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5189383Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5189466Z         slice(1, 3, None)
2025-01-22T20:11:05.5189532Z     
2025-01-22T20:11:05.5189643Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5189736Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5189830Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5189896Z         """
2025-01-22T20:11:05.5190000Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5190071Z         try:
2025-01-22T20:11:05.5190174Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5190179Z 
2025-01-22T20:11:05.5190423Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5190536Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5190677Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5190744Z     ???
2025-01-22T20:11:05.5190880Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5190947Z     ???
2025-01-22T20:11:05.5191225Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5191294Z     ???
2025-01-22T20:11:05.5191406Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5191410Z 
2025-01-22T20:11:05.5191475Z >   ???
2025-01-22T20:11:05.5191557Z E   KeyError: 'cups'
2025-01-22T20:11:05.5191561Z 
2025-01-22T20:11:05.5191695Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5191699Z 
2025-01-22T20:11:05.5191865Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5191873Z 
2025-01-22T20:11:05.5192102Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5192426Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5193052Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5193058Z 
2025-01-22T20:11:05.5193150Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5193224Z     def plasma(
2025-01-22T20:11:05.5193297Z         self,
2025-01-22T20:11:05.5193383Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5193452Z         config,
2025-01-22T20:11:05.5193642Z     ):
2025-01-22T20:11:05.5193756Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5193855Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5193977Z 
2025-01-22T20:11:05.5194102Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5194214Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5194316Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5194407Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5194572Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5194780Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5194892Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5194975Z     return BasePlasma(
2025-01-22T20:11:05.5195059Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5195152Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5195244Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5195323Z     self.update(**kwargs)
2025-01-22T20:11:05.5195418Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5195538Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5195655Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5195757Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5195961Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5196113Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5196325Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5196423Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5196554Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5196720Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5196893Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5197068Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5197325Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5197506Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5197684Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5197791Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5198044Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5198173Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5198411Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5198502Z     return self.apply_standard()
2025-01-22T20:11:05.5198785Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5198900Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5199208Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5199327Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5199547Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5199632Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5199898Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5199980Z     return self._get_value(key)
2025-01-22T20:11:05.5200243Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5200328Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5200440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5200444Z 
2025-01-22T20:11:05.5200604Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5200813Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5200976Z        't046000', 't048000'],
2025-01-22T20:11:05.5201052Z       dtype='object')
2025-01-22T20:11:05.5201128Z key = 'cups'
2025-01-22T20:11:05.5201132Z 
2025-01-22T20:11:05.5201211Z     def get_loc(self, key):
2025-01-22T20:11:05.5201285Z         """
2025-01-22T20:11:05.5201442Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5201513Z     
2025-01-22T20:11:05.5201675Z         Parameters
2025-01-22T20:11:05.5201753Z         ----------
2025-01-22T20:11:05.5201823Z         key : label
2025-01-22T20:11:05.5201894Z     
2025-01-22T20:11:05.5201967Z         Returns
2025-01-22T20:11:05.5202037Z         -------
2025-01-22T20:11:05.5202172Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5202237Z     
2025-01-22T20:11:05.5202310Z         Examples
2025-01-22T20:11:05.5202379Z         --------
2025-01-22T20:11:05.5202480Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5202568Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5202639Z         1
2025-01-22T20:11:05.5202704Z     
2025-01-22T20:11:05.5202814Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5202903Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5202984Z         slice(1, 3, None)
2025-01-22T20:11:05.5203049Z     
2025-01-22T20:11:05.5203161Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5203254Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5203351Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5203417Z         """
2025-01-22T20:11:05.5203640Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5203716Z         try:
2025-01-22T20:11:05.5203815Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5203901Z         except KeyError as err:
2025-01-22T20:11:05.5203997Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5204104Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5204221Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5204293Z             ):
2025-01-22T20:11:05.5204383Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5204474Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5204554Z E           KeyError: 'cups'
2025-01-22T20:11:05.5204558Z 
2025-01-22T20:11:05.5204830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5205085Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-ionization_data] _
2025-01-22T20:11:05.5205090Z 
2025-01-22T20:11:05.5205241Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5205452Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5205531Z        't046000', 't048000'],
2025-01-22T20:11:05.5205611Z       dtype='object')
2025-01-22T20:11:05.5205682Z key = 'cups'
2025-01-22T20:11:05.5205686Z 
2025-01-22T20:11:05.5205770Z     def get_loc(self, key):
2025-01-22T20:11:05.5205837Z         """
2025-01-22T20:11:05.5205999Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5206066Z     
2025-01-22T20:11:05.5206143Z         Parameters
2025-01-22T20:11:05.5206212Z         ----------
2025-01-22T20:11:05.5206291Z         key : label
2025-01-22T20:11:05.5206357Z     
2025-01-22T20:11:05.5206430Z         Returns
2025-01-22T20:11:05.5206504Z         -------
2025-01-22T20:11:05.5206634Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5206705Z     
2025-01-22T20:11:05.5206774Z         Examples
2025-01-22T20:11:05.5206849Z         --------
2025-01-22T20:11:05.5206946Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5207033Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5207219Z         1
2025-01-22T20:11:05.5207289Z     
2025-01-22T20:11:05.5207388Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5207482Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5207557Z         slice(1, 3, None)
2025-01-22T20:11:05.5207626Z     
2025-01-22T20:11:05.5207733Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5207828Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5208014Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5208089Z         """
2025-01-22T20:11:05.5208194Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5208266Z         try:
2025-01-22T20:11:05.5208369Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5208375Z 
2025-01-22T20:11:05.5208623Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5208736Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5208874Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5208946Z     ???
2025-01-22T20:11:05.5209075Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5209146Z     ???
2025-01-22T20:11:05.5209414Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5209484Z     ???
2025-01-22T20:11:05.5209590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5209599Z 
2025-01-22T20:11:05.5209664Z >   ???
2025-01-22T20:11:05.5209746Z E   KeyError: 'cups'
2025-01-22T20:11:05.5209751Z 
2025-01-22T20:11:05.5209878Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5209882Z 
2025-01-22T20:11:05.5210052Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5210056Z 
2025-01-22T20:11:05.5210277Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5210600Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5211221Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5211230Z 
2025-01-22T20:11:05.5211322Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5211399Z     def plasma(
2025-01-22T20:11:05.5211470Z         self,
2025-01-22T20:11:05.5211553Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5211622Z         config,
2025-01-22T20:11:05.5211693Z     ):
2025-01-22T20:11:05.5211801Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5211897Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5211901Z 
2025-01-22T20:11:05.5212021Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5212136Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5212239Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5212326Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5212496Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5212597Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5212711Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5212791Z     return BasePlasma(
2025-01-22T20:11:05.5212880Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5212966Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5213059Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5213138Z     self.update(**kwargs)
2025-01-22T20:11:05.5213231Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5213350Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5213465Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5213802Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5214008Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5214160Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5214372Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5214472Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5214697Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5214873Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5215041Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5215215Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5215472Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5215650Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5215833Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5215939Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5216190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5216317Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5216565Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5216651Z     return self.apply_standard()
2025-01-22T20:11:05.5216932Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5217052Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5217360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5217479Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5217701Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5217785Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5218053Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5218138Z     return self._get_value(key)
2025-01-22T20:11:05.5218396Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5218489Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5218597Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5218601Z 
2025-01-22T20:11:05.5218760Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5218972Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5219054Z        't046000', 't048000'],
2025-01-22T20:11:05.5219130Z       dtype='object')
2025-01-22T20:11:05.5219206Z key = 'cups'
2025-01-22T20:11:05.5219211Z 
2025-01-22T20:11:05.5219290Z     def get_loc(self, key):
2025-01-22T20:11:05.5219362Z         """
2025-01-22T20:11:05.5219523Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5219589Z     
2025-01-22T20:11:05.5219666Z         Parameters
2025-01-22T20:11:05.5219738Z         ----------
2025-01-22T20:11:05.5219817Z         key : label
2025-01-22T20:11:05.5219884Z     
2025-01-22T20:11:05.5219957Z         Returns
2025-01-22T20:11:05.5220026Z         -------
2025-01-22T20:11:05.5220159Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5220227Z     
2025-01-22T20:11:05.5220301Z         Examples
2025-01-22T20:11:05.5220370Z         --------
2025-01-22T20:11:05.5220474Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5220559Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5220734Z         1
2025-01-22T20:11:05.5220800Z     
2025-01-22T20:11:05.5220909Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5220997Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5221076Z         slice(1, 3, None)
2025-01-22T20:11:05.5221147Z     
2025-01-22T20:11:05.5221256Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5221354Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5221519Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5221592Z         """
2025-01-22T20:11:05.5221694Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5221767Z         try:
2025-01-22T20:11:05.5221863Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5221950Z         except KeyError as err:
2025-01-22T20:11:05.5222045Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5222148Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5222301Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5222374Z             ):
2025-01-22T20:11:05.5222465Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5222555Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5222644Z E           KeyError: 'cups'
2025-01-22T20:11:05.5222648Z 
2025-01-22T20:11:05.5222911Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5223130Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-nu] _
2025-01-22T20:11:05.5223135Z 
2025-01-22T20:11:05.5223289Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5223614Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5223692Z        't046000', 't048000'],
2025-01-22T20:11:05.5223771Z       dtype='object')
2025-01-22T20:11:05.5223845Z key = 'cups'
2025-01-22T20:11:05.5223849Z 
2025-01-22T20:11:05.5223933Z     def get_loc(self, key):
2025-01-22T20:11:05.5224000Z         """
2025-01-22T20:11:05.5224163Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5224234Z     
2025-01-22T20:11:05.5224305Z         Parameters
2025-01-22T20:11:05.5224382Z         ----------
2025-01-22T20:11:05.5224453Z         key : label
2025-01-22T20:11:05.5224523Z     
2025-01-22T20:11:05.5224591Z         Returns
2025-01-22T20:11:05.5224668Z         -------
2025-01-22T20:11:05.5224798Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5224868Z     
2025-01-22T20:11:05.5224937Z         Examples
2025-01-22T20:11:05.5225015Z         --------
2025-01-22T20:11:05.5225110Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5225197Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5225264Z         1
2025-01-22T20:11:05.5225334Z     
2025-01-22T20:11:05.5225436Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5225529Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5225603Z         slice(1, 3, None)
2025-01-22T20:11:05.5225673Z     
2025-01-22T20:11:05.5225783Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5225872Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5225965Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5226033Z         """
2025-01-22T20:11:05.5226139Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5226207Z         try:
2025-01-22T20:11:05.5226307Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5226312Z 
2025-01-22T20:11:05.5226553Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5226666Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5226801Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5226991Z     ???
2025-01-22T20:11:05.5227121Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5227195Z     ???
2025-01-22T20:11:05.5227467Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5227533Z     ???
2025-01-22T20:11:05.5227643Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5227648Z 
2025-01-22T20:11:05.5227830Z >   ???
2025-01-22T20:11:05.5227914Z E   KeyError: 'cups'
2025-01-22T20:11:05.5227918Z 
2025-01-22T20:11:05.5228044Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5228048Z 
2025-01-22T20:11:05.5228218Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5228221Z 
2025-01-22T20:11:05.5228444Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5228766Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5229396Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5229400Z 
2025-01-22T20:11:05.5229489Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5229566Z     def plasma(
2025-01-22T20:11:05.5229637Z         self,
2025-01-22T20:11:05.5229723Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5229791Z         config,
2025-01-22T20:11:05.5229863Z     ):
2025-01-22T20:11:05.5229973Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5230070Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5230074Z 
2025-01-22T20:11:05.5230201Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5230307Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5230421Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5230504Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5230678Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5230776Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5230889Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5230967Z     return BasePlasma(
2025-01-22T20:11:05.5231060Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5231146Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5231238Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5231318Z     self.update(**kwargs)
2025-01-22T20:11:05.5231410Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5231530Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5231645Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5231750Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5231950Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5232104Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5232314Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5232414Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5232540Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5232716Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5232884Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5233060Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5233317Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5233491Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5233799Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5234022Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5234281Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5234403Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5234649Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5234834Z     return self.apply_standard()
2025-01-22T20:11:05.5235119Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5235237Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5235549Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5235670Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5235885Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5235980Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5236242Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5236329Z     return self._get_value(key)
2025-01-22T20:11:05.5236584Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5236677Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5236786Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5236791Z 
2025-01-22T20:11:05.5236949Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5237154Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5237233Z        't046000', 't048000'],
2025-01-22T20:11:05.5237313Z       dtype='object')
2025-01-22T20:11:05.5237389Z key = 'cups'
2025-01-22T20:11:05.5237393Z 
2025-01-22T20:11:05.5237477Z     def get_loc(self, key):
2025-01-22T20:11:05.5237546Z         """
2025-01-22T20:11:05.5237708Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5237773Z     
2025-01-22T20:11:05.5237850Z         Parameters
2025-01-22T20:11:05.5237920Z         ----------
2025-01-22T20:11:05.5237995Z         key : label
2025-01-22T20:11:05.5238061Z     
2025-01-22T20:11:05.5238137Z         Returns
2025-01-22T20:11:05.5238206Z         -------
2025-01-22T20:11:05.5238341Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5238408Z     
2025-01-22T20:11:05.5238483Z         Examples
2025-01-22T20:11:05.5238552Z         --------
2025-01-22T20:11:05.5238653Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5238742Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5238810Z         1
2025-01-22T20:11:05.5238880Z     
2025-01-22T20:11:05.5238985Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5239076Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5239152Z         slice(1, 3, None)
2025-01-22T20:11:05.5239222Z     
2025-01-22T20:11:05.5239328Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5239423Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5239512Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5239585Z         """
2025-01-22T20:11:05.5239692Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5239767Z         try:
2025-01-22T20:11:05.5239864Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5239952Z         except KeyError as err:
2025-01-22T20:11:05.5240051Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5240155Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5240278Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5240435Z             ):
2025-01-22T20:11:05.5240533Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5240618Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5240702Z E           KeyError: 'cups'
2025-01-22T20:11:05.5240706Z 
2025-01-22T20:11:05.5240971Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5241288Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] _
2025-01-22T20:11:05.5241294Z 
2025-01-22T20:11:05.5241449Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5241662Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5241743Z        't046000', 't048000'],
2025-01-22T20:11:05.5241818Z       dtype='object')
2025-01-22T20:11:05.5241894Z key = 'cups'
2025-01-22T20:11:05.5241898Z 
2025-01-22T20:11:05.5241981Z     def get_loc(self, key):
2025-01-22T20:11:05.5242054Z         """
2025-01-22T20:11:05.5242209Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5242279Z     
2025-01-22T20:11:05.5242350Z         Parameters
2025-01-22T20:11:05.5242425Z         ----------
2025-01-22T20:11:05.5242496Z         key : label
2025-01-22T20:11:05.5242567Z     
2025-01-22T20:11:05.5242636Z         Returns
2025-01-22T20:11:05.5242710Z         -------
2025-01-22T20:11:05.5242841Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5242914Z     
2025-01-22T20:11:05.5242984Z         Examples
2025-01-22T20:11:05.5243058Z         --------
2025-01-22T20:11:05.5243153Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5243242Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5243315Z         1
2025-01-22T20:11:05.5243382Z     
2025-01-22T20:11:05.5243485Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5243711Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5243791Z         slice(1, 3, None)
2025-01-22T20:11:05.5243857Z     
2025-01-22T20:11:05.5243969Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5244057Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5244150Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5244216Z         """
2025-01-22T20:11:05.5244322Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5244394Z         try:
2025-01-22T20:11:05.5244498Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5244503Z 
2025-01-22T20:11:05.5244753Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5244874Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5245014Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5245081Z     ???
2025-01-22T20:11:05.5245220Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5245286Z     ???
2025-01-22T20:11:05.5245558Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5245624Z     ???
2025-01-22T20:11:05.5245733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5245737Z 
2025-01-22T20:11:05.5245802Z >   ???
2025-01-22T20:11:05.5245886Z E   KeyError: 'cups'
2025-01-22T20:11:05.5245890Z 
2025-01-22T20:11:05.5246024Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5246028Z 
2025-01-22T20:11:05.5246200Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5246204Z 
2025-01-22T20:11:05.5246429Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5246744Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5247490Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5247495Z 
2025-01-22T20:11:05.5247582Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5247657Z     def plasma(
2025-01-22T20:11:05.5247724Z         self,
2025-01-22T20:11:05.5247809Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5247980Z         config,
2025-01-22T20:11:05.5248049Z     ):
2025-01-22T20:11:05.5248163Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5248257Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5248261Z 
2025-01-22T20:11:05.5248386Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5248493Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5248602Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5248689Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5248860Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5248958Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5249071Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5249148Z     return BasePlasma(
2025-01-22T20:11:05.5249236Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5249322Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5249418Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5249503Z     self.update(**kwargs)
2025-01-22T20:11:05.5249591Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5249716Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5249825Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5249931Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5250129Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5250287Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5250498Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5250597Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5250723Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5250893Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5251070Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5251242Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5251507Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5251678Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5251862Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5251964Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5252223Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5252346Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5252586Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5252673Z     return self.apply_standard()
2025-01-22T20:11:05.5252955Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5253078Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5253382Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5253603Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5253821Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5254046Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5254309Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5254398Z     return self._get_value(key)
2025-01-22T20:11:05.5254653Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5254746Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5254950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5254961Z 
2025-01-22T20:11:05.5255118Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5255331Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5255404Z        't046000', 't048000'],
2025-01-22T20:11:05.5255486Z       dtype='object')
2025-01-22T20:11:05.5255556Z key = 'cups'
2025-01-22T20:11:05.5255560Z 
2025-01-22T20:11:05.5255647Z     def get_loc(self, key):
2025-01-22T20:11:05.5255715Z         """
2025-01-22T20:11:05.5255875Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5255941Z     
2025-01-22T20:11:05.5256018Z         Parameters
2025-01-22T20:11:05.5256088Z         ----------
2025-01-22T20:11:05.5256163Z         key : label
2025-01-22T20:11:05.5256230Z     
2025-01-22T20:11:05.5256304Z         Returns
2025-01-22T20:11:05.5256379Z         -------
2025-01-22T20:11:05.5256510Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5256581Z     
2025-01-22T20:11:05.5256650Z         Examples
2025-01-22T20:11:05.5256724Z         --------
2025-01-22T20:11:05.5256820Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5256910Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5256977Z         1
2025-01-22T20:11:05.5257049Z     
2025-01-22T20:11:05.5257151Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5257249Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5257323Z         slice(1, 3, None)
2025-01-22T20:11:05.5257394Z     
2025-01-22T20:11:05.5257498Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5257594Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5257682Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5257754Z         """
2025-01-22T20:11:05.5257853Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5257930Z         try:
2025-01-22T20:11:05.5258032Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5258114Z         except KeyError as err:
2025-01-22T20:11:05.5258215Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5258313Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5258435Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5258504Z             ):
2025-01-22T20:11:05.5258600Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5258689Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5258774Z E           KeyError: 'cups'
2025-01-22T20:11:05.5258779Z 
2025-01-22T20:11:05.5259041Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5259264Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-f_lu] _
2025-01-22T20:11:05.5259268Z 
2025-01-22T20:11:05.5259426Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5259631Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5259709Z        't046000', 't048000'],
2025-01-22T20:11:05.5259784Z       dtype='object')
2025-01-22T20:11:05.5259860Z key = 'cups'
2025-01-22T20:11:05.5259865Z 
2025-01-22T20:11:05.5259943Z     def get_loc(self, key):
2025-01-22T20:11:05.5260017Z         """
2025-01-22T20:11:05.5260262Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5260332Z     
2025-01-22T20:11:05.5260403Z         Parameters
2025-01-22T20:11:05.5260478Z         ----------
2025-01-22T20:11:05.5260551Z         key : label
2025-01-22T20:11:05.5260621Z     
2025-01-22T20:11:05.5260689Z         Returns
2025-01-22T20:11:05.5260764Z         -------
2025-01-22T20:11:05.5260897Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5260963Z     
2025-01-22T20:11:05.5261110Z         Examples
2025-01-22T20:11:05.5261182Z         --------
2025-01-22T20:11:05.5261283Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5261368Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5261442Z         1
2025-01-22T20:11:05.5261507Z     
2025-01-22T20:11:05.5261631Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5261719Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5261797Z         slice(1, 3, None)
2025-01-22T20:11:05.5261866Z     
2025-01-22T20:11:05.5261977Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5262065Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5262157Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5262223Z         """
2025-01-22T20:11:05.5262327Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5262396Z         try:
2025-01-22T20:11:05.5262498Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5262506Z 
2025-01-22T20:11:05.5262754Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5262863Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5263005Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5263072Z     ???
2025-01-22T20:11:05.5263208Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5263273Z     ???
2025-01-22T20:11:05.5263639Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5263709Z     ???
2025-01-22T20:11:05.5263821Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5263825Z 
2025-01-22T20:11:05.5263891Z >   ???
2025-01-22T20:11:05.5263973Z E   KeyError: 'cups'
2025-01-22T20:11:05.5263977Z 
2025-01-22T20:11:05.5264108Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5264115Z 
2025-01-22T20:11:05.5264280Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5264285Z 
2025-01-22T20:11:05.5264512Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5264825Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5265447Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5265455Z 
2025-01-22T20:11:05.5265548Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5265621Z     def plasma(
2025-01-22T20:11:05.5265694Z         self,
2025-01-22T20:11:05.5265775Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5265847Z         config,
2025-01-22T20:11:05.5265914Z     ):
2025-01-22T20:11:05.5266031Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5266124Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5266127Z 
2025-01-22T20:11:05.5266252Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5266355Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5266462Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5266544Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5266831Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5266934Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5267043Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5267125Z     return BasePlasma(
2025-01-22T20:11:05.5267208Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5267298Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5267386Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5267568Z     self.update(**kwargs)
2025-01-22T20:11:05.5267657Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5267782Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5267891Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5267997Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5268195Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5268350Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5268566Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5268666Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5268798Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5268961Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5269134Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5269307Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5269568Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5269740Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5269923Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5270024Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5270279Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5270404Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5270645Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5270736Z     return self.apply_standard()
2025-01-22T20:11:05.5271014Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5271141Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5271446Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5271566Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5271781Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5271871Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5272133Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5272224Z     return self._get_value(key)
2025-01-22T20:11:05.5272487Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5272573Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5272686Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5272690Z 
2025-01-22T20:11:05.5272846Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5273058Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5273131Z        't046000', 't048000'],
2025-01-22T20:11:05.5273212Z       dtype='object')
2025-01-22T20:11:05.5273283Z key = 'cups'
2025-01-22T20:11:05.5273287Z 
2025-01-22T20:11:05.5273371Z     def get_loc(self, key):
2025-01-22T20:11:05.5273442Z         """
2025-01-22T20:11:05.5273825Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5273897Z     
2025-01-22T20:11:05.5273969Z         Parameters
2025-01-22T20:11:05.5274044Z         ----------
2025-01-22T20:11:05.5274116Z         key : label
2025-01-22T20:11:05.5274186Z     
2025-01-22T20:11:05.5274254Z         Returns
2025-01-22T20:11:05.5274329Z         -------
2025-01-22T20:11:05.5274459Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5274530Z     
2025-01-22T20:11:05.5274720Z         Examples
2025-01-22T20:11:05.5274799Z         --------
2025-01-22T20:11:05.5274896Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5274983Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5275051Z         1
2025-01-22T20:11:05.5275121Z     
2025-01-22T20:11:05.5275223Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5275317Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5275396Z         slice(1, 3, None)
2025-01-22T20:11:05.5275470Z     
2025-01-22T20:11:05.5275575Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5275728Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5275895Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5275999Z         """
2025-01-22T20:11:05.5276148Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5276261Z         try:
2025-01-22T20:11:05.5276437Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5276557Z         except KeyError as err:
2025-01-22T20:11:05.5276746Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5276905Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5277107Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5277215Z             ):
2025-01-22T20:11:05.5277315Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5277407Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5277498Z E           KeyError: 'cups'
2025-01-22T20:11:05.5277503Z 
2025-01-22T20:11:05.5277776Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5278024Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-metastability] _
2025-01-22T20:11:05.5278030Z 
2025-01-22T20:11:05.5278188Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5278396Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5278479Z        't046000', 't048000'],
2025-01-22T20:11:05.5278554Z       dtype='object')
2025-01-22T20:11:05.5278631Z key = 'cups'
2025-01-22T20:11:05.5278635Z 
2025-01-22T20:11:05.5278714Z     def get_loc(self, key):
2025-01-22T20:11:05.5278786Z         """
2025-01-22T20:11:05.5278941Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5279016Z     
2025-01-22T20:11:05.5279096Z         Parameters
2025-01-22T20:11:05.5279167Z         ----------
2025-01-22T20:11:05.5279243Z         key : label
2025-01-22T20:11:05.5279308Z     
2025-01-22T20:11:05.5279381Z         Returns
2025-01-22T20:11:05.5279452Z         -------
2025-01-22T20:11:05.5279585Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5279652Z     
2025-01-22T20:11:05.5279726Z         Examples
2025-01-22T20:11:05.5279795Z         --------
2025-01-22T20:11:05.5279901Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5279986Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5280058Z         1
2025-01-22T20:11:05.5280124Z     
2025-01-22T20:11:05.5280228Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5280314Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5280396Z         slice(1, 3, None)
2025-01-22T20:11:05.5280461Z     
2025-01-22T20:11:05.5280572Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5280816Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5280905Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5280977Z         """
2025-01-22T20:11:05.5281077Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5281150Z         try:
2025-01-22T20:11:05.5281247Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5281251Z 
2025-01-22T20:11:05.5281570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5281681Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5281823Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5281891Z     ???
2025-01-22T20:11:05.5282024Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5282094Z     ???
2025-01-22T20:11:05.5282364Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5282443Z     ???
2025-01-22T20:11:05.5282546Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5282550Z 
2025-01-22T20:11:05.5282620Z >   ???
2025-01-22T20:11:05.5282698Z E   KeyError: 'cups'
2025-01-22T20:11:05.5282702Z 
2025-01-22T20:11:05.5282833Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5282837Z 
2025-01-22T20:11:05.5283005Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5283009Z 
2025-01-22T20:11:05.5283235Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5283701Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5284332Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5284341Z 
2025-01-22T20:11:05.5284433Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5284510Z     def plasma(
2025-01-22T20:11:05.5284583Z         self,
2025-01-22T20:11:05.5284666Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5284739Z         config,
2025-01-22T20:11:05.5284805Z     ):
2025-01-22T20:11:05.5284923Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5285021Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5285025Z 
2025-01-22T20:11:05.5285151Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5285260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5285364Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5285452Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5285618Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5285724Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5285838Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5285921Z     return BasePlasma(
2025-01-22T20:11:05.5286006Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5286101Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5286189Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5286273Z     self.update(**kwargs)
2025-01-22T20:11:05.5286361Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5286492Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5286602Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5286711Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5286915Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5287065Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5287279Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5287499Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5287628Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5287794Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5287967Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5288137Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5288502Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5288675Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5288860Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5288966Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5289217Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5289348Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5289586Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5289677Z     return self.apply_standard()
2025-01-22T20:11:05.5289949Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5290072Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5290379Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5290500Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5290725Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5290811Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5291078Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5291166Z     return self._get_value(key)
2025-01-22T20:11:05.5291425Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5291511Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5291625Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5291629Z 
2025-01-22T20:11:05.5291784Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5292000Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5292074Z        't046000', 't048000'],
2025-01-22T20:11:05.5292156Z       dtype='object')
2025-01-22T20:11:05.5292232Z key = 'cups'
2025-01-22T20:11:05.5292236Z 
2025-01-22T20:11:05.5292315Z     def get_loc(self, key):
2025-01-22T20:11:05.5292386Z         """
2025-01-22T20:11:05.5292542Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5292616Z     
2025-01-22T20:11:05.5292687Z         Parameters
2025-01-22T20:11:05.5292764Z         ----------
2025-01-22T20:11:05.5292836Z         key : label
2025-01-22T20:11:05.5292905Z     
2025-01-22T20:11:05.5292973Z         Returns
2025-01-22T20:11:05.5293047Z         -------
2025-01-22T20:11:05.5293177Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5293249Z     
2025-01-22T20:11:05.5293319Z         Examples
2025-01-22T20:11:05.5293394Z         --------
2025-01-22T20:11:05.5293591Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5293685Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5293758Z         1
2025-01-22T20:11:05.5293824Z     
2025-01-22T20:11:05.5293933Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5294021Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5294101Z         slice(1, 3, None)
2025-01-22T20:11:05.5294169Z     
2025-01-22T20:11:05.5294280Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5294491Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5294589Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5294655Z         """
2025-01-22T20:11:05.5294760Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5294830Z         try:
2025-01-22T20:11:05.5294932Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5295013Z         except KeyError as err:
2025-01-22T20:11:05.5295214Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5295316Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5295439Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5295512Z             ):
2025-01-22T20:11:05.5295603Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5295694Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5295777Z E           KeyError: 'cups'
2025-01-22T20:11:05.5295782Z 
2025-01-22T20:11:05.5296058Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5296278Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-delta] _
2025-01-22T20:11:05.5296282Z 
2025-01-22T20:11:05.5296440Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5296650Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5296729Z        't046000', 't048000'],
2025-01-22T20:11:05.5296805Z       dtype='object')
2025-01-22T20:11:05.5296882Z key = 'cups'
2025-01-22T20:11:05.5296886Z 
2025-01-22T20:11:05.5296971Z     def get_loc(self, key):
2025-01-22T20:11:05.5297037Z         """
2025-01-22T20:11:05.5297197Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5297264Z     
2025-01-22T20:11:05.5297344Z         Parameters
2025-01-22T20:11:05.5297417Z         ----------
2025-01-22T20:11:05.5297493Z         key : label
2025-01-22T20:11:05.5297558Z     
2025-01-22T20:11:05.5297630Z         Returns
2025-01-22T20:11:05.5297701Z         -------
2025-01-22T20:11:05.5297835Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5297900Z     
2025-01-22T20:11:05.5297977Z         Examples
2025-01-22T20:11:05.5298047Z         --------
2025-01-22T20:11:05.5298146Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5298233Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5298305Z         1
2025-01-22T20:11:05.5298374Z     
2025-01-22T20:11:05.5298473Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5298565Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5298640Z         slice(1, 3, None)
2025-01-22T20:11:05.5298710Z     
2025-01-22T20:11:05.5298815Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5298909Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5299001Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5299073Z         """
2025-01-22T20:11:05.5299171Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5299244Z         try:
2025-01-22T20:11:05.5299341Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5299345Z 
2025-01-22T20:11:05.5299591Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5299700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5299840Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5299914Z     ???
2025-01-22T20:11:05.5300044Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5300115Z     ???
2025-01-22T20:11:05.5300383Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5300453Z     ???
2025-01-22T20:11:05.5300648Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5300652Z 
2025-01-22T20:11:05.5300721Z >   ???
2025-01-22T20:11:05.5300798Z E   KeyError: 'cups'
2025-01-22T20:11:05.5300803Z 
2025-01-22T20:11:05.5300931Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5300935Z 
2025-01-22T20:11:05.5301102Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5301111Z 
2025-01-22T20:11:05.5301421Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5301743Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5302361Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5302369Z 
2025-01-22T20:11:05.5302460Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5302534Z     def plasma(
2025-01-22T20:11:05.5302607Z         self,
2025-01-22T20:11:05.5302688Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5302761Z         config,
2025-01-22T20:11:05.5302828Z     ):
2025-01-22T20:11:05.5302942Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5303043Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5303047Z 
2025-01-22T20:11:05.5303171Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5303281Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5303384Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5303472Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5303752Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5303857Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5303968Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5304054Z     return BasePlasma(
2025-01-22T20:11:05.5304138Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5304246Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5304341Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5304426Z     self.update(**kwargs)
2025-01-22T20:11:05.5304516Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5304634Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5304751Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5304854Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5305057Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5305206Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5305417Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5305513Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5305648Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5305813Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5305987Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5306159Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5306415Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5306595Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5306775Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5306881Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5307130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5307259Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5307617Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5307709Z     return self.apply_standard()
2025-01-22T20:11:05.5307984Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5308106Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5308513Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5308632Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5308855Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5308940Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5309207Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5309289Z     return self._get_value(key)
2025-01-22T20:11:05.5309551Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5309640Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5309753Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5309757Z 
2025-01-22T20:11:05.5309915Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5310127Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5310206Z        't046000', 't048000'],
2025-01-22T20:11:05.5310281Z       dtype='object')
2025-01-22T20:11:05.5310357Z key = 'cups'
2025-01-22T20:11:05.5310361Z 
2025-01-22T20:11:05.5310440Z     def get_loc(self, key):
2025-01-22T20:11:05.5310512Z         """
2025-01-22T20:11:05.5310668Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5310740Z     
2025-01-22T20:11:05.5310812Z         Parameters
2025-01-22T20:11:05.5310891Z         ----------
2025-01-22T20:11:05.5310962Z         key : label
2025-01-22T20:11:05.5311033Z     
2025-01-22T20:11:05.5311101Z         Returns
2025-01-22T20:11:05.5311174Z         -------
2025-01-22T20:11:05.5311306Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5311392Z     
2025-01-22T20:11:05.5311483Z         Examples
2025-01-22T20:11:05.5311558Z         --------
2025-01-22T20:11:05.5311663Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5311750Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5311823Z         1
2025-01-22T20:11:05.5311889Z     
2025-01-22T20:11:05.5311994Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5312081Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5312159Z         slice(1, 3, None)
2025-01-22T20:11:05.5312225Z     
2025-01-22T20:11:05.5312334Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5312429Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5312525Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5312592Z         """
2025-01-22T20:11:05.5312699Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5312767Z         try:
2025-01-22T20:11:05.5312869Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5312956Z         except KeyError as err:
2025-01-22T20:11:05.5313054Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5313162Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5313280Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5313356Z             ):
2025-01-22T20:11:05.5313448Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5313651Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5313736Z E           KeyError: 'cups'
2025-01-22T20:11:05.5313740Z 
2025-01-22T20:11:05.5314009Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5314411Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_electron_densities] _
2025-01-22T20:11:05.5314415Z 
2025-01-22T20:11:05.5314574Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5314785Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5314859Z        't046000', 't048000'],
2025-01-22T20:11:05.5315043Z       dtype='object')
2025-01-22T20:11:05.5315117Z key = 'cups'
2025-01-22T20:11:05.5315122Z 
2025-01-22T20:11:05.5315206Z     def get_loc(self, key):
2025-01-22T20:11:05.5315273Z         """
2025-01-22T20:11:05.5315433Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5315499Z     
2025-01-22T20:11:05.5315576Z         Parameters
2025-01-22T20:11:05.5315646Z         ----------
2025-01-22T20:11:05.5315722Z         key : label
2025-01-22T20:11:05.5315792Z     
2025-01-22T20:11:05.5315866Z         Returns
2025-01-22T20:11:05.5315935Z         -------
2025-01-22T20:11:05.5316069Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5316141Z     
2025-01-22T20:11:05.5316210Z         Examples
2025-01-22T20:11:05.5316286Z         --------
2025-01-22T20:11:05.5316381Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5316469Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5316541Z         1
2025-01-22T20:11:05.5316611Z     
2025-01-22T20:11:05.5316710Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5316800Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5316877Z         slice(1, 3, None)
2025-01-22T20:11:05.5320823Z     
2025-01-22T20:11:05.5320978Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5321087Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5321184Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5321266Z         """
2025-01-22T20:11:05.5321374Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5321451Z         try:
2025-01-22T20:11:05.5321553Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5321557Z 
2025-01-22T20:11:05.5321833Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5321961Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5322111Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5322187Z     ???
2025-01-22T20:11:05.5322370Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5322444Z     ???
2025-01-22T20:11:05.5322719Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5322795Z     ???
2025-01-22T20:11:05.5322906Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5322915Z 
2025-01-22T20:11:05.5322989Z >   ???
2025-01-22T20:11:05.5323068Z E   KeyError: 'cups'
2025-01-22T20:11:05.5323072Z 
2025-01-22T20:11:05.5323212Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5323216Z 
2025-01-22T20:11:05.5323394Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5323398Z 
2025-01-22T20:11:05.5323757Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5324095Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5324722Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5324726Z 
2025-01-22T20:11:05.5324826Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5325080Z     def plasma(
2025-01-22T20:11:05.5325157Z         self,
2025-01-22T20:11:05.5325239Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5325317Z         config,
2025-01-22T20:11:05.5325391Z     ):
2025-01-22T20:11:05.5325510Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5325616Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5325620Z 
2025-01-22T20:11:05.5325746Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5325970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5326080Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5326173Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5326346Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5326454Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5326570Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5326659Z     return BasePlasma(
2025-01-22T20:11:05.5326746Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5326841Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5326937Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5327018Z     self.update(**kwargs)
2025-01-22T20:11:05.5327114Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5327237Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5327354Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5327462Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5327672Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5327827Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5328043Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5328139Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5328275Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5328447Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5328624Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5328811Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5329071Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5329254Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5329436Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5329550Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5329810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5329943Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5330185Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5330282Z     return self.apply_standard()
2025-01-22T20:11:05.5330567Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5330687Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5331022Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5331148Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5331374Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5331462Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5331736Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5331822Z     return self._get_value(key)
2025-01-22T20:11:05.5332086Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5332265Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5332382Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5332387Z 
2025-01-22T20:11:05.5332550Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5332762Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5332934Z        't046000', 't048000'],
2025-01-22T20:11:05.5333013Z       dtype='object')
2025-01-22T20:11:05.5333091Z key = 'cups'
2025-01-22T20:11:05.5333095Z 
2025-01-22T20:11:05.5333176Z     def get_loc(self, key):
2025-01-22T20:11:05.5333250Z         """
2025-01-22T20:11:05.5333410Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5333487Z     
2025-01-22T20:11:05.5333668Z         Parameters
2025-01-22T20:11:05.5333750Z         ----------
2025-01-22T20:11:05.5333822Z         key : label
2025-01-22T20:11:05.5333899Z     
2025-01-22T20:11:05.5333968Z         Returns
2025-01-22T20:11:05.5334050Z         -------
2025-01-22T20:11:05.5334190Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5334257Z     
2025-01-22T20:11:05.5334336Z         Examples
2025-01-22T20:11:05.5334407Z         --------
2025-01-22T20:11:05.5334513Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5334599Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5334677Z         1
2025-01-22T20:11:05.5334743Z     
2025-01-22T20:11:05.5334856Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5334947Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5335029Z         slice(1, 3, None)
2025-01-22T20:11:05.5335096Z     
2025-01-22T20:11:05.5335210Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5335301Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5335402Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5335474Z         """
2025-01-22T20:11:05.5335585Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5335663Z         try:
2025-01-22T20:11:05.5335763Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5335852Z         except KeyError as err:
2025-01-22T20:11:05.5335950Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5336057Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5336181Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5336255Z             ):
2025-01-22T20:11:05.5336353Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5336446Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5336527Z E           KeyError: 'cups'
2025-01-22T20:11:05.5336531Z 
2025-01-22T20:11:05.5336808Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5337029Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-phi] _
2025-01-22T20:11:05.5337037Z 
2025-01-22T20:11:05.5337197Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5337403Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5337484Z        't046000', 't048000'],
2025-01-22T20:11:05.5337559Z       dtype='object')
2025-01-22T20:11:05.5337636Z key = 'cups'
2025-01-22T20:11:05.5337644Z 
2025-01-22T20:11:05.5337724Z     def get_loc(self, key):
2025-01-22T20:11:05.5337797Z         """
2025-01-22T20:11:05.5337964Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5338035Z     
2025-01-22T20:11:05.5338111Z         Parameters
2025-01-22T20:11:05.5338184Z         ----------
2025-01-22T20:11:05.5338260Z         key : label
2025-01-22T20:11:05.5338326Z     
2025-01-22T20:11:05.5338399Z         Returns
2025-01-22T20:11:05.5338589Z         -------
2025-01-22T20:11:05.5338726Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5338792Z     
2025-01-22T20:11:05.5338868Z         Examples
2025-01-22T20:11:05.5338940Z         --------
2025-01-22T20:11:05.5339043Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5339128Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5339200Z         1
2025-01-22T20:11:05.5339265Z     
2025-01-22T20:11:05.5339472Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5339561Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5339641Z         slice(1, 3, None)
2025-01-22T20:11:05.5339707Z     
2025-01-22T20:11:05.5339819Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5339917Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5340006Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5340078Z         """
2025-01-22T20:11:05.5340178Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5340255Z         try:
2025-01-22T20:11:05.5340353Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5340357Z 
2025-01-22T20:11:05.5340614Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5340726Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5340870Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5340941Z     ???
2025-01-22T20:11:05.5341076Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5341142Z     ???
2025-01-22T20:11:05.5341417Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5341489Z     ???
2025-01-22T20:11:05.5341596Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5341600Z 
2025-01-22T20:11:05.5341669Z >   ???
2025-01-22T20:11:05.5341749Z E   KeyError: 'cups'
2025-01-22T20:11:05.5341753Z 
2025-01-22T20:11:05.5341886Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5341889Z 
2025-01-22T20:11:05.5342063Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5342067Z 
2025-01-22T20:11:05.5342295Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5342618Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5343247Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5343252Z 
2025-01-22T20:11:05.5343346Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5343421Z     def plasma(
2025-01-22T20:11:05.5343585Z         self,
2025-01-22T20:11:05.5343673Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5343746Z         config,
2025-01-22T20:11:05.5343815Z     ):
2025-01-22T20:11:05.5343931Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5344026Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5344031Z 
2025-01-22T20:11:05.5344158Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5344268Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5344376Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5344464Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5344630Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5344736Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5344847Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5344928Z     return BasePlasma(
2025-01-22T20:11:05.5345014Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5345226Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5345315Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5345401Z     self.update(**kwargs)
2025-01-22T20:11:05.5345490Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5345616Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5345726Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5345835Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5346163Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5346320Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5346536Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5346633Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5346765Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5346934Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5347116Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5347287Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5347552Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5347724Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5347911Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5348018Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5348272Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5348401Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5348641Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5348734Z     return self.apply_standard()
2025-01-22T20:11:05.5349011Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5349135Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5349438Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5349561Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5349784Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5349869Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5350139Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5350223Z     return self._get_value(key)
2025-01-22T20:11:05.5350485Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5350571Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5350687Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5350692Z 
2025-01-22T20:11:05.5350847Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5351058Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5351132Z        't046000', 't048000'],
2025-01-22T20:11:05.5351212Z       dtype='object')
2025-01-22T20:11:05.5351289Z key = 'cups'
2025-01-22T20:11:05.5351296Z 
2025-01-22T20:11:05.5351376Z     def get_loc(self, key):
2025-01-22T20:11:05.5351449Z         """
2025-01-22T20:11:05.5351607Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5351681Z     
2025-01-22T20:11:05.5351755Z         Parameters
2025-01-22T20:11:05.5351831Z         ----------
2025-01-22T20:11:05.5351902Z         key : label
2025-01-22T20:11:05.5351973Z     
2025-01-22T20:11:05.5352042Z         Returns
2025-01-22T20:11:05.5352203Z         -------
2025-01-22T20:11:05.5352335Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5352406Z     
2025-01-22T20:11:05.5352477Z         Examples
2025-01-22T20:11:05.5352553Z         --------
2025-01-22T20:11:05.5352651Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5352741Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5352808Z         1
2025-01-22T20:11:05.5352879Z     
2025-01-22T20:11:05.5353061Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5353151Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5353233Z         slice(1, 3, None)
2025-01-22T20:11:05.5353298Z     
2025-01-22T20:11:05.5353411Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5353627Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5353726Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5353794Z         """
2025-01-22T20:11:05.5353901Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5353973Z         try:
2025-01-22T20:11:05.5354077Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5354159Z         except KeyError as err:
2025-01-22T20:11:05.5354261Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5354359Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5354483Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5354560Z             ):
2025-01-22T20:11:05.5354653Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5354747Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5354827Z E           KeyError: 'cups'
2025-01-22T20:11:05.5354832Z 
2025-01-22T20:11:05.5355100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5355355Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-ion_number_density] _
2025-01-22T20:11:05.5355363Z 
2025-01-22T20:11:05.5355519Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5355726Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5355806Z        't046000', 't048000'],
2025-01-22T20:11:05.5355881Z       dtype='object')
2025-01-22T20:11:05.5355957Z key = 'cups'
2025-01-22T20:11:05.5355961Z 
2025-01-22T20:11:05.5356046Z     def get_loc(self, key):
2025-01-22T20:11:05.5356117Z         """
2025-01-22T20:11:05.5356282Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5356348Z     
2025-01-22T20:11:05.5356424Z         Parameters
2025-01-22T20:11:05.5356497Z         ----------
2025-01-22T20:11:05.5356574Z         key : label
2025-01-22T20:11:05.5356639Z     
2025-01-22T20:11:05.5356712Z         Returns
2025-01-22T20:11:05.5356782Z         -------
2025-01-22T20:11:05.5356914Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5356983Z     
2025-01-22T20:11:05.5357057Z         Examples
2025-01-22T20:11:05.5357126Z         --------
2025-01-22T20:11:05.5357227Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5357310Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5357385Z         1
2025-01-22T20:11:05.5357455Z     
2025-01-22T20:11:05.5357553Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5357646Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5357722Z         slice(1, 3, None)
2025-01-22T20:11:05.5357795Z     
2025-01-22T20:11:05.5357901Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5357995Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5358084Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5358156Z         """
2025-01-22T20:11:05.5358254Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5358328Z         try:
2025-01-22T20:11:05.5358567Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5358573Z 
2025-01-22T20:11:05.5358822Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5358938Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5359078Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5359150Z     ???
2025-01-22T20:11:05.5359377Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5359450Z     ???
2025-01-22T20:11:05.5359717Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5359789Z     ???
2025-01-22T20:11:05.5359896Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5359900Z 
2025-01-22T20:11:05.5359970Z >   ???
2025-01-22T20:11:05.5360047Z E   KeyError: 'cups'
2025-01-22T20:11:05.5360050Z 
2025-01-22T20:11:05.5360183Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5360186Z 
2025-01-22T20:11:05.5360351Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5360360Z 
2025-01-22T20:11:05.5360580Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5360898Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5361517Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5361522Z 
2025-01-22T20:11:05.5361616Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5361689Z     def plasma(
2025-01-22T20:11:05.5361763Z         self,
2025-01-22T20:11:05.5361844Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5361922Z         config,
2025-01-22T20:11:05.5361988Z     ):
2025-01-22T20:11:05.5362107Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5362208Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5362213Z 
2025-01-22T20:11:05.5362334Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5362447Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5362553Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5362647Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5362814Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5362917Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5363028Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5363111Z     return BasePlasma(
2025-01-22T20:11:05.5363195Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5363290Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5363388Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5363467Z     self.update(**kwargs)
2025-01-22T20:11:05.5363678Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5363806Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5363915Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5364026Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5364226Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5364387Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5364593Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5364693Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5364819Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5364991Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5365160Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5365454Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5365716Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5365887Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5366070Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5366268Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5366530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5366652Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5366898Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5366985Z     return self.apply_standard()
2025-01-22T20:11:05.5367264Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5367388Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5367695Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5367816Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5368031Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5368124Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5368385Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5368472Z     return self._get_value(key)
2025-01-22T20:11:05.5368727Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5368826Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5368932Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5368940Z 
2025-01-22T20:11:05.5369100Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5369313Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5369388Z        't046000', 't048000'],
2025-01-22T20:11:05.5369468Z       dtype='object')
2025-01-22T20:11:05.5369539Z key = 'cups'
2025-01-22T20:11:05.5369544Z 
2025-01-22T20:11:05.5369631Z     def get_loc(self, key):
2025-01-22T20:11:05.5369699Z         """
2025-01-22T20:11:05.5369861Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5369926Z     
2025-01-22T20:11:05.5370004Z         Parameters
2025-01-22T20:11:05.5370074Z         ----------
2025-01-22T20:11:05.5370151Z         key : label
2025-01-22T20:11:05.5370216Z     
2025-01-22T20:11:05.5370291Z         Returns
2025-01-22T20:11:05.5370361Z         -------
2025-01-22T20:11:05.5370494Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5370564Z     
2025-01-22T20:11:05.5370639Z         Examples
2025-01-22T20:11:05.5370713Z         --------
2025-01-22T20:11:05.5370811Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5370902Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5370969Z         1
2025-01-22T20:11:05.5371039Z     
2025-01-22T20:11:05.5371145Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5371240Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5371315Z         slice(1, 3, None)
2025-01-22T20:11:05.5371385Z     
2025-01-22T20:11:05.5371491Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5371585Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5371676Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5371747Z         """
2025-01-22T20:11:05.5371848Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5371923Z         try:
2025-01-22T20:11:05.5372109Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5372196Z         except KeyError as err:
2025-01-22T20:11:05.5372298Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5372397Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5372519Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5372588Z             ):
2025-01-22T20:11:05.5372684Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5372843Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5372929Z E           KeyError: 'cups'
2025-01-22T20:11:05.5372933Z 
2025-01-22T20:11:05.5373197Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5373458Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-electron_densities] _
2025-01-22T20:11:05.5373463Z 
2025-01-22T20:11:05.5373741Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5373957Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5374036Z        't046000', 't048000'],
2025-01-22T20:11:05.5374109Z       dtype='object')
2025-01-22T20:11:05.5374185Z key = 'cups'
2025-01-22T20:11:05.5374189Z 
2025-01-22T20:11:05.5374269Z     def get_loc(self, key):
2025-01-22T20:11:05.5374340Z         """
2025-01-22T20:11:05.5374498Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5374569Z     
2025-01-22T20:11:05.5374640Z         Parameters
2025-01-22T20:11:05.5374718Z         ----------
2025-01-22T20:11:05.5374789Z         key : label
2025-01-22T20:11:05.5374859Z     
2025-01-22T20:11:05.5374930Z         Returns
2025-01-22T20:11:05.5375004Z         -------
2025-01-22T20:11:05.5375131Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5375201Z     
2025-01-22T20:11:05.5375273Z         Examples
2025-01-22T20:11:05.5375347Z         --------
2025-01-22T20:11:05.5375450Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5375533Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5375609Z         1
2025-01-22T20:11:05.5375673Z     
2025-01-22T20:11:05.5375777Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5375864Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5375943Z         slice(1, 3, None)
2025-01-22T20:11:05.5376012Z     
2025-01-22T20:11:05.5376120Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5376208Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5376304Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5376371Z         """
2025-01-22T20:11:05.5376479Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5376546Z         try:
2025-01-22T20:11:05.5376649Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5376657Z 
2025-01-22T20:11:05.5376907Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5377014Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5377152Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5377220Z     ???
2025-01-22T20:11:05.5377355Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5377424Z     ???
2025-01-22T20:11:05.5377702Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5377768Z     ???
2025-01-22T20:11:05.5377878Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5377882Z 
2025-01-22T20:11:05.5377948Z >   ???
2025-01-22T20:11:05.5378031Z E   KeyError: 'cups'
2025-01-22T20:11:05.5378035Z 
2025-01-22T20:11:05.5378164Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5378284Z 
2025-01-22T20:11:05.5378452Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5378456Z 
2025-01-22T20:11:05.5378679Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5379002Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5379717Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5379722Z 
2025-01-22T20:11:05.5379810Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5379887Z     def plasma(
2025-01-22T20:11:05.5379960Z         self,
2025-01-22T20:11:05.5380040Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5380114Z         config,
2025-01-22T20:11:05.5380182Z     ):
2025-01-22T20:11:05.5380306Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5380403Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5380406Z 
2025-01-22T20:11:05.5380537Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5380652Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5380762Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5380847Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5381026Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5381125Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5381241Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5381321Z     return BasePlasma(
2025-01-22T20:11:05.5381411Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5381503Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5381593Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5381676Z     self.update(**kwargs)
2025-01-22T20:11:05.5381768Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5381892Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5382001Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5382108Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5382307Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5382466Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5382678Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5382779Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5382910Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5383082Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5383258Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5383430Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5383818Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5383992Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5384176Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5384278Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5384540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5384665Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5384911Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5385002Z     return self.apply_standard()
2025-01-22T20:11:05.5385278Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5385404Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5385850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5385973Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5386188Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5386277Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5386635Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5386726Z     return self._get_value(key)
2025-01-22T20:11:05.5386984Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5387076Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5387188Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5387192Z 
2025-01-22T20:11:05.5387349Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5387566Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5387645Z        't046000', 't048000'],
2025-01-22T20:11:05.5387725Z       dtype='object')
2025-01-22T20:11:05.5387800Z key = 'cups'
2025-01-22T20:11:05.5387804Z 
2025-01-22T20:11:05.5387889Z     def get_loc(self, key):
2025-01-22T20:11:05.5387958Z         """
2025-01-22T20:11:05.5388124Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5388190Z     
2025-01-22T20:11:05.5388267Z         Parameters
2025-01-22T20:11:05.5388339Z         ----------
2025-01-22T20:11:05.5388417Z         key : label
2025-01-22T20:11:05.5388486Z     
2025-01-22T20:11:05.5388554Z         Returns
2025-01-22T20:11:05.5388628Z         -------
2025-01-22T20:11:05.5388760Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5388837Z     
2025-01-22T20:11:05.5388910Z         Examples
2025-01-22T20:11:05.5388984Z         --------
2025-01-22T20:11:05.5389083Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5389173Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5389241Z         1
2025-01-22T20:11:05.5389312Z     
2025-01-22T20:11:05.5389415Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5389508Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5389584Z         slice(1, 3, None)
2025-01-22T20:11:05.5389658Z     
2025-01-22T20:11:05.5389765Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5389861Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5389949Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5390022Z         """
2025-01-22T20:11:05.5390129Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5390197Z         try:
2025-01-22T20:11:05.5390300Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5390384Z         except KeyError as err:
2025-01-22T20:11:05.5390485Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5390586Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5390710Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5390780Z             ):
2025-01-22T20:11:05.5390876Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5390963Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5391053Z E           KeyError: 'cups'
2025-01-22T20:11:05.5391057Z 
2025-01-22T20:11:05.5391323Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5391587Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-level_number_density] _
2025-01-22T20:11:05.5391591Z 
2025-01-22T20:11:05.5391748Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5392044Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5392123Z        't046000', 't048000'],
2025-01-22T20:11:05.5392197Z       dtype='object')
2025-01-22T20:11:05.5392275Z key = 'cups'
2025-01-22T20:11:05.5392279Z 
2025-01-22T20:11:05.5392357Z     def get_loc(self, key):
2025-01-22T20:11:05.5392429Z         """
2025-01-22T20:11:05.5392585Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5392725Z     
2025-01-22T20:11:05.5392800Z         Parameters
2025-01-22T20:11:05.5392874Z         ----------
2025-01-22T20:11:05.5392950Z         key : label
2025-01-22T20:11:05.5393017Z     
2025-01-22T20:11:05.5393089Z         Returns
2025-01-22T20:11:05.5393158Z         -------
2025-01-22T20:11:05.5393293Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5393360Z     
2025-01-22T20:11:05.5393434Z         Examples
2025-01-22T20:11:05.5393614Z         --------
2025-01-22T20:11:05.5393720Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5393806Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5393877Z         1
2025-01-22T20:11:05.5393943Z     
2025-01-22T20:11:05.5394047Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5394133Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5394212Z         slice(1, 3, None)
2025-01-22T20:11:05.5394278Z     
2025-01-22T20:11:05.5394392Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5394479Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5394573Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5394645Z         """
2025-01-22T20:11:05.5394746Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5394818Z         try:
2025-01-22T20:11:05.5394917Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5394921Z 
2025-01-22T20:11:05.5395168Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5395281Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5395421Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5395489Z     ???
2025-01-22T20:11:05.5395623Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5395690Z     ???
2025-01-22T20:11:05.5395965Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5396030Z     ???
2025-01-22T20:11:05.5396141Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5396145Z 
2025-01-22T20:11:05.5396215Z >   ???
2025-01-22T20:11:05.5396291Z E   KeyError: 'cups'
2025-01-22T20:11:05.5396295Z 
2025-01-22T20:11:05.5396426Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5396430Z 
2025-01-22T20:11:05.5396598Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5396605Z 
2025-01-22T20:11:05.5396830Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5397150Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5397777Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5397781Z 
2025-01-22T20:11:05.5397878Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5397950Z     def plasma(
2025-01-22T20:11:05.5398022Z         self,
2025-01-22T20:11:05.5398103Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5398177Z         config,
2025-01-22T20:11:05.5398243Z     ):
2025-01-22T20:11:05.5398359Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5398573Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5398578Z 
2025-01-22T20:11:05.5398704Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5398815Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5398923Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5399012Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5399179Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5399381Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5399494Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5399577Z     return BasePlasma(
2025-01-22T20:11:05.5399660Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5399750Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5399838Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5399922Z     self.update(**kwargs)
2025-01-22T20:11:05.5400012Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5400142Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5400250Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5400356Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5400554Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5400709Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5400928Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5401024Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5401160Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5401325Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5401501Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5401670Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5401937Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5402107Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5402292Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5402394Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5402661Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5402791Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5403030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5403122Z     return self.apply_standard()
2025-01-22T20:11:05.5403397Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5403633Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5403944Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5404068Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5404283Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5404374Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5404641Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5404727Z     return self._get_value(key)
2025-01-22T20:11:05.5404989Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5405075Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5405189Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5405194Z 
2025-01-22T20:11:05.5405349Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5405685Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5405758Z        't046000', 't048000'],
2025-01-22T20:11:05.5405839Z       dtype='object')
2025-01-22T20:11:05.5405910Z key = 'cups'
2025-01-22T20:11:05.5405914Z 
2025-01-22T20:11:05.5405998Z     def get_loc(self, key):
2025-01-22T20:11:05.5406070Z         """
2025-01-22T20:11:05.5406232Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5406422Z     
2025-01-22T20:11:05.5406497Z         Parameters
2025-01-22T20:11:05.5406572Z         ----------
2025-01-22T20:11:05.5406644Z         key : label
2025-01-22T20:11:05.5406714Z     
2025-01-22T20:11:05.5406787Z         Returns
2025-01-22T20:11:05.5406861Z         -------
2025-01-22T20:11:05.5406991Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5407061Z     
2025-01-22T20:11:05.5407131Z         Examples
2025-01-22T20:11:05.5407206Z         --------
2025-01-22T20:11:05.5407306Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5407397Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5407464Z         1
2025-01-22T20:11:05.5407534Z     
2025-01-22T20:11:05.5407634Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5407726Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5407805Z         slice(1, 3, None)
2025-01-22T20:11:05.5407873Z     
2025-01-22T20:11:05.5407986Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5408077Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5408172Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5408240Z         """
2025-01-22T20:11:05.5408346Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5408415Z         try:
2025-01-22T20:11:05.5408516Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5408599Z         except KeyError as err:
2025-01-22T20:11:05.5408703Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5408801Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5408922Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5408990Z             ):
2025-01-22T20:11:05.5409087Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5409178Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5409257Z E           KeyError: 'cups'
2025-01-22T20:11:05.5409262Z 
2025-01-22T20:11:05.5409533Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5409814Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] _
2025-01-22T20:11:05.5409818Z 
2025-01-22T20:11:05.5409977Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5410185Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5410269Z        't046000', 't048000'],
2025-01-22T20:11:05.5410344Z       dtype='object')
2025-01-22T20:11:05.5410420Z key = 'cups'
2025-01-22T20:11:05.5410425Z 
2025-01-22T20:11:05.5410510Z     def get_loc(self, key):
2025-01-22T20:11:05.5410577Z         """
2025-01-22T20:11:05.5410738Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5410804Z     
2025-01-22T20:11:05.5410881Z         Parameters
2025-01-22T20:11:05.5410956Z         ----------
2025-01-22T20:11:05.5411032Z         key : label
2025-01-22T20:11:05.5411097Z     
2025-01-22T20:11:05.5411170Z         Returns
2025-01-22T20:11:05.5411242Z         -------
2025-01-22T20:11:05.5411379Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5411445Z     
2025-01-22T20:11:05.5411518Z         Examples
2025-01-22T20:11:05.5411588Z         --------
2025-01-22T20:11:05.5411689Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5411879Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5411951Z         1
2025-01-22T20:11:05.5412018Z     
2025-01-22T20:11:05.5412122Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5412207Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5412287Z         slice(1, 3, None)
2025-01-22T20:11:05.5412358Z     
2025-01-22T20:11:05.5412463Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5412630Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5412752Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5412874Z         """
2025-01-22T20:11:05.5413045Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5413159Z         try:
2025-01-22T20:11:05.5413308Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5413315Z 
2025-01-22T20:11:05.5413741Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5413860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5414005Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5414074Z     ???
2025-01-22T20:11:05.5414211Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5414281Z     ???
2025-01-22T20:11:05.5414550Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5414620Z     ???
2025-01-22T20:11:05.5414728Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5414732Z 
2025-01-22T20:11:05.5414802Z >   ???
2025-01-22T20:11:05.5414880Z E   KeyError: 'cups'
2025-01-22T20:11:05.5414884Z 
2025-01-22T20:11:05.5415016Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5415020Z 
2025-01-22T20:11:05.5415186Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5415191Z 
2025-01-22T20:11:05.5415419Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5415745Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5416368Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5416373Z 
2025-01-22T20:11:05.5416481Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5416560Z     def plasma(
2025-01-22T20:11:05.5416636Z         self,
2025-01-22T20:11:05.5416717Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5416792Z         config,
2025-01-22T20:11:05.5416858Z     ):
2025-01-22T20:11:05.5416974Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5417067Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5417080Z 
2025-01-22T20:11:05.5417199Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5417310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5417763Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5417851Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5418016Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5418120Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5418232Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5418316Z     return BasePlasma(
2025-01-22T20:11:05.5418400Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5418494Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5418582Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5418665Z     self.update(**kwargs)
2025-01-22T20:11:05.5418756Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5418883Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5419137Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5419237Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5419442Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5419593Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5419807Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5420000Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5420135Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5420301Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5420475Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5420643Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5420905Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5421085Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5421264Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5421370Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5421626Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5421753Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5421994Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5422086Z     return self.apply_standard()
2025-01-22T20:11:05.5422392Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5422516Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5422824Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5422943Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5423162Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5423247Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5423606Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5423690Z     return self._get_value(key)
2025-01-22T20:11:05.5423958Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5424043Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5424154Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5424158Z 
2025-01-22T20:11:05.5424318Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5424529Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5424612Z        't046000', 't048000'],
2025-01-22T20:11:05.5424686Z       dtype='object')
2025-01-22T20:11:05.5424761Z key = 'cups'
2025-01-22T20:11:05.5424764Z 
2025-01-22T20:11:05.5424843Z     def get_loc(self, key):
2025-01-22T20:11:05.5424915Z         """
2025-01-22T20:11:05.5425069Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5425139Z     
2025-01-22T20:11:05.5425212Z         Parameters
2025-01-22T20:11:05.5425291Z         ----------
2025-01-22T20:11:05.5425362Z         key : label
2025-01-22T20:11:05.5425434Z     
2025-01-22T20:11:05.5425503Z         Returns
2025-01-22T20:11:05.5425577Z         -------
2025-01-22T20:11:05.5425705Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5425777Z     
2025-01-22T20:11:05.5425850Z         Examples
2025-01-22T20:11:05.5425921Z         --------
2025-01-22T20:11:05.5426023Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5426225Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5426296Z         1
2025-01-22T20:11:05.5426362Z     
2025-01-22T20:11:05.5426471Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5426559Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5426637Z         slice(1, 3, None)
2025-01-22T20:11:05.5426702Z     
2025-01-22T20:11:05.5426815Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5427002Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5427099Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5427166Z         """
2025-01-22T20:11:05.5427271Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5427342Z         try:
2025-01-22T20:11:05.5427444Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5427531Z         except KeyError as err:
2025-01-22T20:11:05.5427626Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5427734Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5427851Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5427924Z             ):
2025-01-22T20:11:05.5428015Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5428105Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5428185Z E           KeyError: 'cups'
2025-01-22T20:11:05.5428189Z 
2025-01-22T20:11:05.5428460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5428726Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] _
2025-01-22T20:11:05.5428730Z 
2025-01-22T20:11:05.5428891Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5429100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5429174Z        't046000', 't048000'],
2025-01-22T20:11:05.5429257Z       dtype='object')
2025-01-22T20:11:05.5429327Z key = 'cups'
2025-01-22T20:11:05.5429331Z 
2025-01-22T20:11:05.5429415Z     def get_loc(self, key):
2025-01-22T20:11:05.5429481Z         """
2025-01-22T20:11:05.5429641Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5429706Z     
2025-01-22T20:11:05.5429782Z         Parameters
2025-01-22T20:11:05.5429852Z         ----------
2025-01-22T20:11:05.5429931Z         key : label
2025-01-22T20:11:05.5429996Z     
2025-01-22T20:11:05.5430071Z         Returns
2025-01-22T20:11:05.5430141Z         -------
2025-01-22T20:11:05.5430275Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5430340Z     
2025-01-22T20:11:05.5430414Z         Examples
2025-01-22T20:11:05.5430488Z         --------
2025-01-22T20:11:05.5430582Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5430674Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5430744Z         1
2025-01-22T20:11:05.5430814Z     
2025-01-22T20:11:05.5430914Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5431004Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5431077Z         slice(1, 3, None)
2025-01-22T20:11:05.5431148Z     
2025-01-22T20:11:05.5431252Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5431350Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5431442Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5431515Z         """
2025-01-22T20:11:05.5431615Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5431689Z         try:
2025-01-22T20:11:05.5431787Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5431796Z 
2025-01-22T20:11:05.5432037Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5432149Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5432370Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5432442Z     ???
2025-01-22T20:11:05.5432571Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5432642Z     ???
2025-01-22T20:11:05.5432911Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5432985Z     ???
2025-01-22T20:11:05.5433187Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5433192Z 
2025-01-22T20:11:05.5433264Z >   ???
2025-01-22T20:11:05.5433341Z E   KeyError: 'cups'
2025-01-22T20:11:05.5433350Z 
2025-01-22T20:11:05.5433476Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5433480Z 
2025-01-22T20:11:05.5433773Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5433778Z 
2025-01-22T20:11:05.5434000Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5434326Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5434940Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5434944Z 
2025-01-22T20:11:05.5435040Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5435123Z     def plasma(
2025-01-22T20:11:05.5435192Z         self,
2025-01-22T20:11:05.5435280Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5435349Z         config,
2025-01-22T20:11:05.5435421Z     ):
2025-01-22T20:11:05.5435532Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5435631Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5435635Z 
2025-01-22T20:11:05.5435754Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5435868Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5435972Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5436062Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5436224Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5436330Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5436438Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5436524Z     return BasePlasma(
2025-01-22T20:11:05.5436614Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5436701Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5436795Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5436873Z     self.update(**kwargs)
2025-01-22T20:11:05.5436964Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5437083Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5437197Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5437301Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5437502Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5437650Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5437862Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5437957Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5438092Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5438262Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5438430Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5438605Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5438861Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5439044Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5439341Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5439449Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5439696Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5439823Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5440159Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5440252Z     return self.apply_standard()
2025-01-22T20:11:05.5440530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5440646Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5440959Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5441073Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5441296Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5441382Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5441648Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5441729Z     return self._get_value(key)
2025-01-22T20:11:05.5441993Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5442084Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5442188Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5442193Z 
2025-01-22T20:11:05.5442350Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5442554Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5442634Z        't046000', 't048000'],
2025-01-22T20:11:05.5442711Z       dtype='object')
2025-01-22T20:11:05.5442787Z key = 'cups'
2025-01-22T20:11:05.5442792Z 
2025-01-22T20:11:05.5442872Z     def get_loc(self, key):
2025-01-22T20:11:05.5442945Z         """
2025-01-22T20:11:05.5443100Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5443171Z     
2025-01-22T20:11:05.5443244Z         Parameters
2025-01-22T20:11:05.5443320Z         ----------
2025-01-22T20:11:05.5443399Z         key : label
2025-01-22T20:11:05.5443464Z     
2025-01-22T20:11:05.5443653Z         Returns
2025-01-22T20:11:05.5443725Z         -------
2025-01-22T20:11:05.5443860Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5443926Z     
2025-01-22T20:11:05.5444000Z         Examples
2025-01-22T20:11:05.5444073Z         --------
2025-01-22T20:11:05.5444174Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5444259Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5444334Z         1
2025-01-22T20:11:05.5444399Z     
2025-01-22T20:11:05.5444507Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5444594Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5444674Z         slice(1, 3, None)
2025-01-22T20:11:05.5444741Z     
2025-01-22T20:11:05.5444854Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5444944Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5445042Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5445114Z         """
2025-01-22T20:11:05.5445217Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5445290Z         try:
2025-01-22T20:11:05.5445388Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5445475Z         except KeyError as err:
2025-01-22T20:11:05.5445570Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5445675Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5445913Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5445985Z             ):
2025-01-22T20:11:05.5446077Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5446171Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5446250Z E           KeyError: 'cups'
2025-01-22T20:11:05.5446254Z 
2025-01-22T20:11:05.5446521Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5446872Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] _
2025-01-22T20:11:05.5446877Z 
2025-01-22T20:11:05.5447034Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5447244Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5447317Z        't046000', 't048000'],
2025-01-22T20:11:05.5447397Z       dtype='object')
2025-01-22T20:11:05.5447473Z key = 'cups'
2025-01-22T20:11:05.5447477Z 
2025-01-22T20:11:05.5447562Z     def get_loc(self, key):
2025-01-22T20:11:05.5447629Z         """
2025-01-22T20:11:05.5447789Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5447854Z     
2025-01-22T20:11:05.5447931Z         Parameters
2025-01-22T20:11:05.5448006Z         ----------
2025-01-22T20:11:05.5448078Z         key : label
2025-01-22T20:11:05.5448147Z     
2025-01-22T20:11:05.5448215Z         Returns
2025-01-22T20:11:05.5448294Z         -------
2025-01-22T20:11:05.5448427Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5448498Z     
2025-01-22T20:11:05.5448566Z         Examples
2025-01-22T20:11:05.5448639Z         --------
2025-01-22T20:11:05.5448733Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5448822Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5448889Z         1
2025-01-22T20:11:05.5448963Z     
2025-01-22T20:11:05.5449066Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5449157Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5449231Z         slice(1, 3, None)
2025-01-22T20:11:05.5449302Z     
2025-01-22T20:11:05.5449409Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5449506Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5449599Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5449667Z         """
2025-01-22T20:11:05.5449775Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5449843Z         try:
2025-01-22T20:11:05.5449945Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5449949Z 
2025-01-22T20:11:05.5450190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5450301Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5450436Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5450511Z     ???
2025-01-22T20:11:05.5450641Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5450712Z     ???
2025-01-22T20:11:05.5450977Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5451049Z     ???
2025-01-22T20:11:05.5451159Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5451163Z 
2025-01-22T20:11:05.5451228Z >   ???
2025-01-22T20:11:05.5451313Z E   KeyError: 'cups'
2025-01-22T20:11:05.5451317Z 
2025-01-22T20:11:05.5451441Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5451445Z 
2025-01-22T20:11:05.5451613Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5451617Z 
2025-01-22T20:11:05.5451836Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5452158Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5452871Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5452876Z 
2025-01-22T20:11:05.5452963Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5453041Z     def plasma(
2025-01-22T20:11:05.5453180Z         self,
2025-01-22T20:11:05.5453268Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5453337Z         config,
2025-01-22T20:11:05.5453408Z     ):
2025-01-22T20:11:05.5453612Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5453714Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5453719Z 
2025-01-22T20:11:05.5453839Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5453950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5454063Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5454145Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5454315Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5454415Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5454528Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5454606Z     return BasePlasma(
2025-01-22T20:11:05.5454694Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5454783Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5454877Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5454955Z     self.update(**kwargs)
2025-01-22T20:11:05.5455047Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5455166Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5455284Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5455385Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5455591Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5455745Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5455952Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5456052Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5456177Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5456349Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5456517Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5456690Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5456945Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5457120Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5457298Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5457409Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5457664Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5457785Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5458027Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5458113Z     return self.apply_standard()
2025-01-22T20:11:05.5458394Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5458512Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5458822Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5458938Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5459156Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5459386Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5459656Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5459743Z     return self._get_value(key)
2025-01-22T20:11:05.5460000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5460091Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5460295Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5460300Z 
2025-01-22T20:11:05.5460460Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5460668Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5460747Z        't046000', 't048000'],
2025-01-22T20:11:05.5460821Z       dtype='object')
2025-01-22T20:11:05.5460916Z key = 'cups'
2025-01-22T20:11:05.5460920Z 
2025-01-22T20:11:05.5461005Z     def get_loc(self, key):
2025-01-22T20:11:05.5461072Z         """
2025-01-22T20:11:05.5461233Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5461300Z     
2025-01-22T20:11:05.5461376Z         Parameters
2025-01-22T20:11:05.5461446Z         ----------
2025-01-22T20:11:05.5461522Z         key : label
2025-01-22T20:11:05.5461592Z     
2025-01-22T20:11:05.5461665Z         Returns
2025-01-22T20:11:05.5461737Z         -------
2025-01-22T20:11:05.5461874Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5461941Z     
2025-01-22T20:11:05.5462015Z         Examples
2025-01-22T20:11:05.5462085Z         --------
2025-01-22T20:11:05.5462188Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5462273Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5462347Z         1
2025-01-22T20:11:05.5462421Z     
2025-01-22T20:11:05.5462534Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5462627Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5462702Z         slice(1, 3, None)
2025-01-22T20:11:05.5462772Z     
2025-01-22T20:11:05.5462878Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5462972Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5463061Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5463133Z         """
2025-01-22T20:11:05.5463236Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5463309Z         try:
2025-01-22T20:11:05.5463406Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5463606Z         except KeyError as err:
2025-01-22T20:11:05.5463705Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5463809Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5463926Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5464004Z             ):
2025-01-22T20:11:05.5464097Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5464188Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5464271Z E           KeyError: 'cups'
2025-01-22T20:11:05.5464276Z 
2025-01-22T20:11:05.5464537Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5464785Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] _
2025-01-22T20:11:05.5464789Z 
2025-01-22T20:11:05.5464943Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5465151Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5465224Z        't046000', 't048000'],
2025-01-22T20:11:05.5465302Z       dtype='object')
2025-01-22T20:11:05.5465373Z key = 'cups'
2025-01-22T20:11:05.5465382Z 
2025-01-22T20:11:05.5465462Z     def get_loc(self, key):
2025-01-22T20:11:05.5465655Z         """
2025-01-22T20:11:05.5465813Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5465886Z     
2025-01-22T20:11:05.5465958Z         Parameters
2025-01-22T20:11:05.5466033Z         ----------
2025-01-22T20:11:05.5466107Z         key : label
2025-01-22T20:11:05.5466177Z     
2025-01-22T20:11:05.5466246Z         Returns
2025-01-22T20:11:05.5466320Z         -------
2025-01-22T20:11:05.5466545Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5466622Z     
2025-01-22T20:11:05.5466692Z         Examples
2025-01-22T20:11:05.5466767Z         --------
2025-01-22T20:11:05.5466862Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5466954Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5467021Z         1
2025-01-22T20:11:05.5467094Z     
2025-01-22T20:11:05.5467196Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5467288Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5467372Z         slice(1, 3, None)
2025-01-22T20:11:05.5467438Z     
2025-01-22T20:11:05.5467550Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5467639Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5467731Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5467797Z         """
2025-01-22T20:11:05.5467900Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5467969Z         try:
2025-01-22T20:11:05.5468073Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5468078Z 
2025-01-22T20:11:05.5468316Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5468427Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5468562Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5468633Z     ???
2025-01-22T20:11:05.5468769Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5468839Z     ???
2025-01-22T20:11:05.5469115Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5469181Z     ???
2025-01-22T20:11:05.5469291Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5469295Z 
2025-01-22T20:11:05.5469360Z >   ???
2025-01-22T20:11:05.5469447Z E   KeyError: 'cups'
2025-01-22T20:11:05.5469452Z 
2025-01-22T20:11:05.5469587Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5469591Z 
2025-01-22T20:11:05.5469761Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5469765Z 
2025-01-22T20:11:05.5469989Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5470306Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5470927Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5470932Z 
2025-01-22T20:11:05.5471020Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5471098Z     def plasma(
2025-01-22T20:11:05.5471169Z         self,
2025-01-22T20:11:05.5471253Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5471324Z         config,
2025-01-22T20:11:05.5471396Z     ):
2025-01-22T20:11:05.5471506Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5471606Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5471610Z 
2025-01-22T20:11:05.5471736Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5471841Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5471950Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5472119Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5472291Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5472391Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5472503Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5472581Z     return BasePlasma(
2025-01-22T20:11:05.5472669Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5472754Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5472919Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5472999Z     self.update(**kwargs)
2025-01-22T20:11:05.5473091Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5473219Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5473327Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5473432Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5473746Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5473911Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5474120Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5474218Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5474345Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5474514Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5474684Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5474858Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5475118Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5475288Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5475471Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5475572Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5475827Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5475951Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5476191Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5476278Z     return self.apply_standard()
2025-01-22T20:11:05.5476559Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5476676Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5476984Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5477104Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5477317Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5477406Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5477669Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5477757Z     return self._get_value(key)
2025-01-22T20:11:05.5478012Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5478102Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5478212Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5478216Z 
2025-01-22T20:11:05.5478375Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5478588Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5478662Z        't046000', 't048000'],
2025-01-22T20:11:05.5478743Z       dtype='object')
2025-01-22T20:11:05.5478814Z key = 'cups'
2025-01-22T20:11:05.5478818Z 
2025-01-22T20:11:05.5479052Z     def get_loc(self, key):
2025-01-22T20:11:05.5479120Z         """
2025-01-22T20:11:05.5479282Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5479347Z     
2025-01-22T20:11:05.5479424Z         Parameters
2025-01-22T20:11:05.5479493Z         ----------
2025-01-22T20:11:05.5479569Z         key : label
2025-01-22T20:11:05.5479635Z     
2025-01-22T20:11:05.5479707Z         Returns
2025-01-22T20:11:05.5479776Z         -------
2025-01-22T20:11:05.5480026Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5480094Z     
2025-01-22T20:11:05.5480170Z         Examples
2025-01-22T20:11:05.5480245Z         --------
2025-01-22T20:11:05.5480340Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5480428Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5480494Z         1
2025-01-22T20:11:05.5480564Z     
2025-01-22T20:11:05.5480666Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5480762Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5480836Z         slice(1, 3, None)
2025-01-22T20:11:05.5480907Z     
2025-01-22T20:11:05.5481014Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5481107Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5481195Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5481267Z         """
2025-01-22T20:11:05.5481367Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5481443Z         try:
2025-01-22T20:11:05.5481541Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5481626Z         except KeyError as err:
2025-01-22T20:11:05.5481726Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5481827Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5481950Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5482019Z             ):
2025-01-22T20:11:05.5482115Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5482204Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5482288Z E           KeyError: 'cups'
2025-01-22T20:11:05.5482292Z 
2025-01-22T20:11:05.5482554Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5482836Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-transition_probabilities] _
2025-01-22T20:11:05.5482840Z 
2025-01-22T20:11:05.5482995Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5483203Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5483282Z        't046000', 't048000'],
2025-01-22T20:11:05.5483356Z       dtype='object')
2025-01-22T20:11:05.5483432Z key = 'cups'
2025-01-22T20:11:05.5483436Z 
2025-01-22T20:11:05.5483627Z     def get_loc(self, key):
2025-01-22T20:11:05.5483702Z         """
2025-01-22T20:11:05.5483862Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5483932Z     
2025-01-22T20:11:05.5484004Z         Parameters
2025-01-22T20:11:05.5484080Z         ----------
2025-01-22T20:11:05.5484151Z         key : label
2025-01-22T20:11:05.5484222Z     
2025-01-22T20:11:05.5484289Z         Returns
2025-01-22T20:11:05.5484362Z         -------
2025-01-22T20:11:05.5484488Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5484559Z     
2025-01-22T20:11:05.5484632Z         Examples
2025-01-22T20:11:05.5484706Z         --------
2025-01-22T20:11:05.5484806Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5484890Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5484962Z         1
2025-01-22T20:11:05.5485028Z     
2025-01-22T20:11:05.5485131Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5485217Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5485297Z         slice(1, 3, None)
2025-01-22T20:11:05.5485501Z     
2025-01-22T20:11:05.5485615Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5485703Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5485797Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5485864Z         """
2025-01-22T20:11:05.5485968Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5486037Z         try:
2025-01-22T20:11:05.5486239Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5486244Z 
2025-01-22T20:11:05.5486507Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5486613Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5486754Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5486821Z     ???
2025-01-22T20:11:05.5486957Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5487027Z     ???
2025-01-22T20:11:05.5487302Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5487377Z     ???
2025-01-22T20:11:05.5491559Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5491570Z 
2025-01-22T20:11:05.5491654Z >   ???
2025-01-22T20:11:05.5491749Z E   KeyError: 'cups'
2025-01-22T20:11:05.5491754Z 
2025-01-22T20:11:05.5491909Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5491920Z 
2025-01-22T20:11:05.5492108Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5492113Z 
2025-01-22T20:11:05.5492348Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5492679Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5493321Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5493329Z 
2025-01-22T20:11:05.5493424Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5493659Z     def plasma(
2025-01-22T20:11:05.5493735Z         self,
2025-01-22T20:11:05.5493827Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5493897Z         config,
2025-01-22T20:11:05.5493971Z     ):
2025-01-22T20:11:05.5494100Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5494207Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5494211Z 
2025-01-22T20:11:05.5494348Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5494467Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5494582Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5494668Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5494848Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5494952Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5495070Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5495150Z     return BasePlasma(
2025-01-22T20:11:05.5495247Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5495342Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5495441Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5495534Z     self.update(**kwargs)
2025-01-22T20:11:05.5495627Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5495761Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5495878Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5495989Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5496194Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5496356Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5496727Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5496836Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5496967Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5497145Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5497319Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5497597Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5497871Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5498047Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5498238Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5498344Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5498613Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5498746Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5498996Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5499087Z     return self.apply_standard()
2025-01-22T20:11:05.5499375Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5499499Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5499812Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5499939Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5500158Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5500252Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5500518Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5500612Z     return self._get_value(key)
2025-01-22T20:11:05.5500869Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5500964Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5501079Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5501083Z 
2025-01-22T20:11:05.5501255Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5501473Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5501550Z        't046000', 't048000'],
2025-01-22T20:11:05.5501634Z       dtype='object')
2025-01-22T20:11:05.5501707Z key = 'cups'
2025-01-22T20:11:05.5501711Z 
2025-01-22T20:11:05.5501802Z     def get_loc(self, key):
2025-01-22T20:11:05.5501873Z         """
2025-01-22T20:11:05.5502042Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5502110Z     
2025-01-22T20:11:05.5502193Z         Parameters
2025-01-22T20:11:05.5502269Z         ----------
2025-01-22T20:11:05.5502355Z         key : label
2025-01-22T20:11:05.5502422Z     
2025-01-22T20:11:05.5502501Z         Returns
2025-01-22T20:11:05.5502575Z         -------
2025-01-22T20:11:05.5502719Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5502797Z     
2025-01-22T20:11:05.5502870Z         Examples
2025-01-22T20:11:05.5502947Z         --------
2025-01-22T20:11:05.5503049Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5503141Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5503209Z         1
2025-01-22T20:11:05.5503283Z     
2025-01-22T20:11:05.5503389Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5503485Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5503659Z         slice(1, 3, None)
2025-01-22T20:11:05.5503851Z     
2025-01-22T20:11:05.5503963Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5504062Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5504155Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5504229Z         """
2025-01-22T20:11:05.5504333Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5504410Z         try:
2025-01-22T20:11:05.5504612Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5504705Z         except KeyError as err:
2025-01-22T20:11:05.5504809Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5504911Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5505039Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5505111Z             ):
2025-01-22T20:11:05.5505211Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5505299Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5505391Z E           KeyError: 'cups'
2025-01-22T20:11:05.5505396Z 
2025-01-22T20:11:05.5505666Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5505907Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues] _
2025-01-22T20:11:05.5505911Z 
2025-01-22T20:11:05.5506077Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5506289Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5506371Z        't046000', 't048000'],
2025-01-22T20:11:05.5506447Z       dtype='object')
2025-01-22T20:11:05.5506524Z key = 'cups'
2025-01-22T20:11:05.5506528Z 
2025-01-22T20:11:05.5506610Z     def get_loc(self, key):
2025-01-22T20:11:05.5506686Z         """
2025-01-22T20:11:05.5506844Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5506921Z     
2025-01-22T20:11:05.5506997Z         Parameters
2025-01-22T20:11:05.5507078Z         ----------
2025-01-22T20:11:05.5507153Z         key : label
2025-01-22T20:11:05.5507226Z     
2025-01-22T20:11:05.5507293Z         Returns
2025-01-22T20:11:05.5507371Z         -------
2025-01-22T20:11:05.5507501Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5507574Z     
2025-01-22T20:11:05.5507644Z         Examples
2025-01-22T20:11:05.5507720Z         --------
2025-01-22T20:11:05.5507819Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5507911Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5507979Z         1
2025-01-22T20:11:05.5508050Z     
2025-01-22T20:11:05.5508149Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5508241Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5508315Z         slice(1, 3, None)
2025-01-22T20:11:05.5508388Z     
2025-01-22T20:11:05.5508494Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5508592Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5508681Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5508754Z         """
2025-01-22T20:11:05.5508858Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5508926Z         try:
2025-01-22T20:11:05.5509028Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5509032Z 
2025-01-22T20:11:05.5509289Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5509403Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5509540Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5509613Z     ???
2025-01-22T20:11:05.5509742Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5509814Z     ???
2025-01-22T20:11:05.5510083Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5510241Z     ???
2025-01-22T20:11:05.5510352Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5510356Z 
2025-01-22T20:11:05.5510423Z >   ???
2025-01-22T20:11:05.5510505Z E   KeyError: 'cups'
2025-01-22T20:11:05.5510509Z 
2025-01-22T20:11:05.5510637Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5510641Z 
2025-01-22T20:11:05.5510912Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5510916Z 
2025-01-22T20:11:05.5511143Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5511465Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5512101Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5512110Z 
2025-01-22T20:11:05.5512200Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5512277Z     def plasma(
2025-01-22T20:11:05.5512347Z         self,
2025-01-22T20:11:05.5512432Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5512501Z         config,
2025-01-22T20:11:05.5512572Z     ):
2025-01-22T20:11:05.5512684Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5512785Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5512789Z 
2025-01-22T20:11:05.5512911Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5513019Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5513123Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5513212Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5513383Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5513486Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5513729Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5513808Z     return BasePlasma(
2025-01-22T20:11:05.5513898Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5513985Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5514077Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5514157Z     self.update(**kwargs)
2025-01-22T20:11:05.5514248Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5514375Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5514491Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5514592Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5514796Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5514951Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5515160Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5515265Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5515391Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5515561Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5515731Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5515906Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5516168Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5516343Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5516524Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5516637Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5516901Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5517146Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5517399Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5517486Z     return self.apply_standard()
2025-01-22T20:11:05.5517771Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5517888Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5518295Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5518414Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5518634Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5518719Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5518988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5519080Z     return self._get_value(key)
2025-01-22T20:11:05.5519337Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5519432Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5519536Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5519540Z 
2025-01-22T20:11:05.5519699Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5519910Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5519989Z        't046000', 't048000'],
2025-01-22T20:11:05.5520065Z       dtype='object')
2025-01-22T20:11:05.5520144Z key = 'cups'
2025-01-22T20:11:05.5520148Z 
2025-01-22T20:11:05.5520233Z     def get_loc(self, key):
2025-01-22T20:11:05.5520303Z         """
2025-01-22T20:11:05.5520465Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5520534Z     
2025-01-22T20:11:05.5520612Z         Parameters
2025-01-22T20:11:05.5520684Z         ----------
2025-01-22T20:11:05.5520764Z         key : label
2025-01-22T20:11:05.5520830Z     
2025-01-22T20:11:05.5520903Z         Returns
2025-01-22T20:11:05.5520973Z         -------
2025-01-22T20:11:05.5521106Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5521174Z     
2025-01-22T20:11:05.5521249Z         Examples
2025-01-22T20:11:05.5521324Z         --------
2025-01-22T20:11:05.5521428Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5521512Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5521585Z         1
2025-01-22T20:11:05.5521651Z     
2025-01-22T20:11:05.5521760Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5521852Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5521927Z         slice(1, 3, None)
2025-01-22T20:11:05.5521998Z     
2025-01-22T20:11:05.5522107Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5522208Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5522331Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5522404Z         """
2025-01-22T20:11:05.5522504Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5522577Z         try:
2025-01-22T20:11:05.5522675Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5522764Z         except KeyError as err:
2025-01-22T20:11:05.5522865Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5522969Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5523084Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5523159Z             ):
2025-01-22T20:11:05.5523251Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5523343Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5523428Z E           KeyError: 'cups'
2025-01-22T20:11:05.5523637Z 
2025-01-22T20:11:05.5523910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5524173Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues_norm_factor] _
2025-01-22T20:11:05.5524178Z 
2025-01-22T20:11:05.5524332Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5524647Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5524724Z        't046000', 't048000'],
2025-01-22T20:11:05.5524804Z       dtype='object')
2025-01-22T20:11:05.5524876Z key = 'cups'
2025-01-22T20:11:05.5524885Z 
2025-01-22T20:11:05.5524965Z     def get_loc(self, key):
2025-01-22T20:11:05.5525038Z         """
2025-01-22T20:11:05.5525196Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5525271Z     
2025-01-22T20:11:05.5525342Z         Parameters
2025-01-22T20:11:05.5525427Z         ----------
2025-01-22T20:11:05.5525497Z         key : label
2025-01-22T20:11:05.5525567Z     
2025-01-22T20:11:05.5525635Z         Returns
2025-01-22T20:11:05.5525708Z         -------
2025-01-22T20:11:05.5525837Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5525908Z     
2025-01-22T20:11:05.5525977Z         Examples
2025-01-22T20:11:05.5526053Z         --------
2025-01-22T20:11:05.5526148Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5526242Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5526310Z         1
2025-01-22T20:11:05.5526380Z     
2025-01-22T20:11:05.5526479Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5526573Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5526655Z         slice(1, 3, None)
2025-01-22T20:11:05.5526721Z     
2025-01-22T20:11:05.5526832Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5526921Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5527018Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5527086Z         """
2025-01-22T20:11:05.5527189Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5527258Z         try:
2025-01-22T20:11:05.5527362Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5527366Z 
2025-01-22T20:11:05.5527613Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5527729Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5527865Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5527937Z     ???
2025-01-22T20:11:05.5528072Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5528139Z     ???
2025-01-22T20:11:05.5528410Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5528477Z     ???
2025-01-22T20:11:05.5528594Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5528598Z 
2025-01-22T20:11:05.5528664Z >   ???
2025-01-22T20:11:05.5528747Z E   KeyError: 'cups'
2025-01-22T20:11:05.5528751Z 
2025-01-22T20:11:05.5528879Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5528884Z 
2025-01-22T20:11:05.5529055Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5529059Z 
2025-01-22T20:11:05.5529288Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5529603Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5530228Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5530347Z 
2025-01-22T20:11:05.5530436Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5530514Z     def plasma(
2025-01-22T20:11:05.5530583Z         self,
2025-01-22T20:11:05.5530668Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5530736Z         config,
2025-01-22T20:11:05.5530807Z     ):
2025-01-22T20:11:05.5530918Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5531017Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5531021Z 
2025-01-22T20:11:05.5531214Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5531322Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5531431Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5531513Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5531681Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5531778Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5531896Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5531974Z     return BasePlasma(
2025-01-22T20:11:05.5532064Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5532150Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5532245Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5532324Z     self.update(**kwargs)
2025-01-22T20:11:05.5532419Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5532544Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5532656Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5532764Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5532961Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5533118Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5533324Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5533424Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5533673Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5533846Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5534015Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5534188Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5534454Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5534631Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5534809Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5534914Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5535166Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5535295Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5535540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5535631Z     return self.apply_standard()
2025-01-22T20:11:05.5535906Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5536027Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5536334Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5536455Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5536672Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5536757Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5537023Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5537108Z     return self._get_value(key)
2025-01-22T20:11:05.5537371Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5537579Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5537692Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5537696Z 
2025-01-22T20:11:05.5537850Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5538174Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5538257Z        't046000', 't048000'],
2025-01-22T20:11:05.5538331Z       dtype='object')
2025-01-22T20:11:05.5538408Z key = 'cups'
2025-01-22T20:11:05.5538413Z 
2025-01-22T20:11:05.5538491Z     def get_loc(self, key):
2025-01-22T20:11:05.5538562Z         """
2025-01-22T20:11:05.5538718Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5538788Z     
2025-01-22T20:11:05.5538860Z         Parameters
2025-01-22T20:11:05.5538939Z         ----------
2025-01-22T20:11:05.5539010Z         key : label
2025-01-22T20:11:05.5539092Z     
2025-01-22T20:11:05.5539161Z         Returns
2025-01-22T20:11:05.5539235Z         -------
2025-01-22T20:11:05.5539363Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5539434Z     
2025-01-22T20:11:05.5539507Z         Examples
2025-01-22T20:11:05.5539581Z         --------
2025-01-22T20:11:05.5539681Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5539774Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5539848Z         1
2025-01-22T20:11:05.5539917Z     
2025-01-22T20:11:05.5540025Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5540113Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5540193Z         slice(1, 3, None)
2025-01-22T20:11:05.5540259Z     
2025-01-22T20:11:05.5540368Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5540459Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5540557Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5540625Z         """
2025-01-22T20:11:05.5540731Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5540800Z         try:
2025-01-22T20:11:05.5540903Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5540986Z         except KeyError as err:
2025-01-22T20:11:05.5541088Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5541190Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5541312Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5541385Z             ):
2025-01-22T20:11:05.5541474Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5541567Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5541646Z E           KeyError: 'cups'
2025-01-22T20:11:05.5541650Z 
2025-01-22T20:11:05.5541917Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5542172Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blue_estimator] _
2025-01-22T20:11:05.5542176Z 
2025-01-22T20:11:05.5542334Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5542540Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5542623Z        't046000', 't048000'],
2025-01-22T20:11:05.5542703Z       dtype='object')
2025-01-22T20:11:05.5542773Z key = 'cups'
2025-01-22T20:11:05.5542777Z 
2025-01-22T20:11:05.5542859Z     def get_loc(self, key):
2025-01-22T20:11:05.5542927Z         """
2025-01-22T20:11:05.5543086Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5543151Z     
2025-01-22T20:11:05.5543226Z         Parameters
2025-01-22T20:11:05.5543297Z         ----------
2025-01-22T20:11:05.5543372Z         key : label
2025-01-22T20:11:05.5543836Z     
2025-01-22T20:11:05.5543911Z         Returns
2025-01-22T20:11:05.5543982Z         -------
2025-01-22T20:11:05.5544125Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5544190Z     
2025-01-22T20:11:05.5544264Z         Examples
2025-01-22T20:11:05.5544334Z         --------
2025-01-22T20:11:05.5544440Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5544530Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5544729Z         1
2025-01-22T20:11:05.5544802Z     
2025-01-22T20:11:05.5544904Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5544997Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5545072Z         slice(1, 3, None)
2025-01-22T20:11:05.5545144Z     
2025-01-22T20:11:05.5545258Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5545357Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5545446Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5545524Z         """
2025-01-22T20:11:05.5545625Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5545699Z         try:
2025-01-22T20:11:05.5545798Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5545802Z 
2025-01-22T20:11:05.5546057Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5546179Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5546320Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5546392Z     ???
2025-01-22T20:11:05.5546521Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5546592Z     ???
2025-01-22T20:11:05.5546865Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5546936Z     ???
2025-01-22T20:11:05.5547043Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5547050Z 
2025-01-22T20:11:05.5547121Z >   ???
2025-01-22T20:11:05.5547199Z E   KeyError: 'cups'
2025-01-22T20:11:05.5547204Z 
2025-01-22T20:11:05.5547335Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5547339Z 
2025-01-22T20:11:05.5547513Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5547517Z 
2025-01-22T20:11:05.5547739Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5548065Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5548691Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5548696Z 
2025-01-22T20:11:05.5548791Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5548867Z     def plasma(
2025-01-22T20:11:05.5548942Z         self,
2025-01-22T20:11:05.5549023Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5549097Z         config,
2025-01-22T20:11:05.5549169Z     ):
2025-01-22T20:11:05.5549285Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5549389Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5549393Z 
2025-01-22T20:11:05.5549515Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5549633Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5549737Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5549826Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5549992Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5550098Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5550206Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5550405Z     return BasePlasma(
2025-01-22T20:11:05.5550489Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5550582Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5550675Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5550754Z     self.update(**kwargs)
2025-01-22T20:11:05.5550847Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5550967Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5551081Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5551254Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5551461Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5551611Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5551824Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5551920Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5552051Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5552223Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5552397Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5552571Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5552833Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5553014Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5553202Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5553314Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5553704Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5553839Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5554081Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5554178Z     return self.apply_standard()
2025-01-22T20:11:05.5554458Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5554590Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5554914Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5555039Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5555264Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5555352Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5555622Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5555705Z     return self._get_value(key)
2025-01-22T20:11:05.5555968Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5556059Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5556173Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5556177Z 
2025-01-22T20:11:05.5556337Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5556544Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5556627Z        't046000', 't048000'],
2025-01-22T20:11:05.5556703Z       dtype='object')
2025-01-22T20:11:05.5556782Z key = 'cups'
2025-01-22T20:11:05.5556786Z 
2025-01-22T20:11:05.5556865Z     def get_loc(self, key):
2025-01-22T20:11:05.5556941Z         """
2025-01-22T20:11:05.5557100Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5557175Z     
2025-01-22T20:11:05.5557248Z         Parameters
2025-01-22T20:11:05.5557325Z         ----------
2025-01-22T20:11:05.5557397Z         key : label
2025-01-22T20:11:05.5557587Z     
2025-01-22T20:11:05.5557656Z         Returns
2025-01-22T20:11:05.5557731Z         -------
2025-01-22T20:11:05.5557870Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5557935Z     
2025-01-22T20:11:05.5558010Z         Examples
2025-01-22T20:11:05.5558079Z         --------
2025-01-22T20:11:05.5558186Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5558271Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5558442Z         1
2025-01-22T20:11:05.5558510Z     
2025-01-22T20:11:05.5558619Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5558707Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5558787Z         slice(1, 3, None)
2025-01-22T20:11:05.5558853Z     
2025-01-22T20:11:05.5558963Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5559053Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5559147Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5559218Z         """
2025-01-22T20:11:05.5559324Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5559396Z         try:
2025-01-22T20:11:05.5559496Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5559583Z         except KeyError as err:
2025-01-22T20:11:05.5559681Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5559787Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5559908Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5559980Z             ):
2025-01-22T20:11:05.5560072Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5560164Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5560244Z E           KeyError: 'cups'
2025-01-22T20:11:05.5560248Z 
2025-01-22T20:11:05.5560517Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5560745Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-volume] _
2025-01-22T20:11:05.5560754Z 
2025-01-22T20:11:05.5560907Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5561118Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5561192Z        't046000', 't048000'],
2025-01-22T20:11:05.5561274Z       dtype='object')
2025-01-22T20:11:05.5561348Z key = 'cups'
2025-01-22T20:11:05.5561352Z 
2025-01-22T20:11:05.5561436Z     def get_loc(self, key):
2025-01-22T20:11:05.5561503Z         """
2025-01-22T20:11:05.5561661Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5561729Z     
2025-01-22T20:11:05.5561806Z         Parameters
2025-01-22T20:11:05.5561876Z         ----------
2025-01-22T20:11:05.5561951Z         key : label
2025-01-22T20:11:05.5562017Z     
2025-01-22T20:11:05.5562091Z         Returns
2025-01-22T20:11:05.5562164Z         -------
2025-01-22T20:11:05.5562296Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5562367Z     
2025-01-22T20:11:05.5562437Z         Examples
2025-01-22T20:11:05.5562512Z         --------
2025-01-22T20:11:05.5562608Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5562695Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5562764Z         1
2025-01-22T20:11:05.5562837Z     
2025-01-22T20:11:05.5562940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5563033Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5563107Z         slice(1, 3, None)
2025-01-22T20:11:05.5563178Z     
2025-01-22T20:11:05.5563284Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5563377Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5563464Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5563652Z         """
2025-01-22T20:11:05.5563755Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5563968Z         try:
2025-01-22T20:11:05.5564071Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5564075Z 
2025-01-22T20:11:05.5564320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5564436Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5564570Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5564741Z     ???
2025-01-22T20:11:05.5564872Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5564943Z     ???
2025-01-22T20:11:05.5565220Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5565293Z     ???
2025-01-22T20:11:05.5565400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5565404Z 
2025-01-22T20:11:05.5565473Z >   ???
2025-01-22T20:11:05.5565556Z E   KeyError: 'cups'
2025-01-22T20:11:05.5565561Z 
2025-01-22T20:11:05.5565687Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5565691Z 
2025-01-22T20:11:05.5565865Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5565869Z 
2025-01-22T20:11:05.5566090Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5566418Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5567038Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5567048Z 
2025-01-22T20:11:05.5567136Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5567215Z     def plasma(
2025-01-22T20:11:05.5567286Z         self,
2025-01-22T20:11:05.5567371Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5567442Z         config,
2025-01-22T20:11:05.5567513Z     ):
2025-01-22T20:11:05.5567624Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5567723Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5567728Z 
2025-01-22T20:11:05.5567849Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5567962Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5568066Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5568155Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5568320Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5568423Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5568538Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5568616Z     return BasePlasma(
2025-01-22T20:11:05.5568704Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5568795Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5568887Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5568966Z     self.update(**kwargs)
2025-01-22T20:11:05.5569058Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5569177Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5569297Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5569401Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5569608Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5569758Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5569971Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5570071Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5570196Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5570365Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5570624Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5570801Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5571058Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5571234Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5571481Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5571591Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5571842Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5571971Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5572214Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5572301Z     return self.apply_standard()
2025-01-22T20:11:05.5572597Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5572716Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5573022Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5573139Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5573362Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5573448Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5573809Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5573893Z     return self._get_value(key)
2025-01-22T20:11:05.5574159Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5574250Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5574360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5574364Z 
2025-01-22T20:11:05.5574523Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5574729Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5574807Z        't046000', 't048000'],
2025-01-22T20:11:05.5574882Z       dtype='object')
2025-01-22T20:11:05.5574960Z key = 'cups'
2025-01-22T20:11:05.5574964Z 
2025-01-22T20:11:05.5575043Z     def get_loc(self, key):
2025-01-22T20:11:05.5575116Z         """
2025-01-22T20:11:05.5575273Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5575343Z     
2025-01-22T20:11:05.5575419Z         Parameters
2025-01-22T20:11:05.5575489Z         ----------
2025-01-22T20:11:05.5575564Z         key : label
2025-01-22T20:11:05.5575629Z     
2025-01-22T20:11:05.5575706Z         Returns
2025-01-22T20:11:05.5575778Z         -------
2025-01-22T20:11:05.5575910Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5575976Z     
2025-01-22T20:11:05.5576051Z         Examples
2025-01-22T20:11:05.5576120Z         --------
2025-01-22T20:11:05.5576225Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5576308Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5576380Z         1
2025-01-22T20:11:05.5576445Z     
2025-01-22T20:11:05.5576560Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5576650Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5576730Z         slice(1, 3, None)
2025-01-22T20:11:05.5576797Z     
2025-01-22T20:11:05.5576907Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5577000Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5577089Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5577162Z         """
2025-01-22T20:11:05.5577382Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5577456Z         try:
2025-01-22T20:11:05.5577554Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5577642Z         except KeyError as err:
2025-01-22T20:11:05.5577741Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5577848Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5577963Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5578133Z             ):
2025-01-22T20:11:05.5578226Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5578318Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5578398Z E           KeyError: 'cups'
2025-01-22T20:11:05.5578407Z 
2025-01-22T20:11:05.5578671Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5578903Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-r_inner] _
2025-01-22T20:11:05.5578912Z 
2025-01-22T20:11:05.5579064Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5579280Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5579354Z        't046000', 't048000'],
2025-01-22T20:11:05.5579432Z       dtype='object')
2025-01-22T20:11:05.5579502Z key = 'cups'
2025-01-22T20:11:05.5579506Z 
2025-01-22T20:11:05.5579589Z     def get_loc(self, key):
2025-01-22T20:11:05.5579659Z         """
2025-01-22T20:11:05.5579817Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5579888Z     
2025-01-22T20:11:05.5579960Z         Parameters
2025-01-22T20:11:05.5580035Z         ----------
2025-01-22T20:11:05.5580107Z         key : label
2025-01-22T20:11:05.5580177Z     
2025-01-22T20:11:05.5580247Z         Returns
2025-01-22T20:11:05.5580320Z         -------
2025-01-22T20:11:05.5580447Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5580521Z     
2025-01-22T20:11:05.5580591Z         Examples
2025-01-22T20:11:05.5580666Z         --------
2025-01-22T20:11:05.5580762Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5580851Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5580919Z         1
2025-01-22T20:11:05.5580989Z     
2025-01-22T20:11:05.5581087Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5581182Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5581259Z         slice(1, 3, None)
2025-01-22T20:11:05.5581330Z     
2025-01-22T20:11:05.5581436Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5581530Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5581625Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5581693Z         """
2025-01-22T20:11:05.5581796Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5581864Z         try:
2025-01-22T20:11:05.5581969Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5581973Z 
2025-01-22T20:11:05.5582214Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5582327Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5582460Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5582534Z     ???
2025-01-22T20:11:05.5582666Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5582739Z     ???
2025-01-22T20:11:05.5583008Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5583080Z     ???
2025-01-22T20:11:05.5583188Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5583192Z 
2025-01-22T20:11:05.5583258Z >   ???
2025-01-22T20:11:05.5583339Z E   KeyError: 'cups'
2025-01-22T20:11:05.5583343Z 
2025-01-22T20:11:05.5583649Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5583653Z 
2025-01-22T20:11:05.5583825Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5583830Z 
2025-01-22T20:11:05.5584051Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5584369Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5585096Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5585102Z 
2025-01-22T20:11:05.5585193Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5585271Z     def plasma(
2025-01-22T20:11:05.5585339Z         self,
2025-01-22T20:11:05.5585424Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5585498Z         config,
2025-01-22T20:11:05.5585569Z     ):
2025-01-22T20:11:05.5585679Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5585778Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5585782Z 
2025-01-22T20:11:05.5585900Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5586013Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5586121Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5586209Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5586378Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5586477Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5586590Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5586667Z     return BasePlasma(
2025-01-22T20:11:05.5586755Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5586842Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5586940Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5587018Z     self.update(**kwargs)
2025-01-22T20:11:05.5587111Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5587231Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5587345Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5587447Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5587649Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5587808Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5588017Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5588114Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5588239Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5588408Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5588577Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5588754Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5589009Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5589183Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5589367Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5589474Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5589729Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5589852Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5590095Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5590183Z     return self.apply_standard()
2025-01-22T20:11:05.5590461Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5590711Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5591021Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5591137Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5591356Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5591517Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5591780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5591867Z     return self._get_value(key)
2025-01-22T20:11:05.5592121Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5592210Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5592317Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5592325Z 
2025-01-22T20:11:05.5592482Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5592689Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5592769Z        't046000', 't048000'],
2025-01-22T20:11:05.5592853Z       dtype='object')
2025-01-22T20:11:05.5592925Z key = 'cups'
2025-01-22T20:11:05.5592929Z 
2025-01-22T20:11:05.5593015Z     def get_loc(self, key):
2025-01-22T20:11:05.5593083Z         """
2025-01-22T20:11:05.5593244Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5593310Z     
2025-01-22T20:11:05.5593387Z         Parameters
2025-01-22T20:11:05.5593463Z         ----------
2025-01-22T20:11:05.5593650Z         key : label
2025-01-22T20:11:05.5593718Z     
2025-01-22T20:11:05.5593793Z         Returns
2025-01-22T20:11:05.5593863Z         -------
2025-01-22T20:11:05.5594000Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5594070Z     
2025-01-22T20:11:05.5594143Z         Examples
2025-01-22T20:11:05.5594213Z         --------
2025-01-22T20:11:05.5594316Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5594400Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5594472Z         1
2025-01-22T20:11:05.5594542Z     
2025-01-22T20:11:05.5594646Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5594741Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5594816Z         slice(1, 3, None)
2025-01-22T20:11:05.5594887Z     
2025-01-22T20:11:05.5594993Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5595087Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5595182Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5595254Z         """
2025-01-22T20:11:05.5595354Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5595427Z         try:
2025-01-22T20:11:05.5595528Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5595615Z         except KeyError as err:
2025-01-22T20:11:05.5595712Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5595814Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5595933Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5596006Z             ):
2025-01-22T20:11:05.5596103Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5596197Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5596281Z E           KeyError: 'cups'
2025-01-22T20:11:05.5596285Z 
2025-01-22T20:11:05.5596549Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5596811Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-helium_population] _
2025-01-22T20:11:05.5596817Z 
2025-01-22T20:11:05.5596970Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5597302Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5597376Z        't046000', 't048000'],
2025-01-22T20:11:05.5597456Z       dtype='object')
2025-01-22T20:11:05.5597531Z key = 'cups'
2025-01-22T20:11:05.5597535Z 
2025-01-22T20:11:05.5597613Z     def get_loc(self, key):
2025-01-22T20:11:05.5597684Z         """
2025-01-22T20:11:05.5597935Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5598008Z     
2025-01-22T20:11:05.5598079Z         Parameters
2025-01-22T20:11:05.5598154Z         ----------
2025-01-22T20:11:05.5598226Z         key : label
2025-01-22T20:11:05.5598296Z     
2025-01-22T20:11:05.5598367Z         Returns
2025-01-22T20:11:05.5598442Z         -------
2025-01-22T20:11:05.5598571Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5598643Z     
2025-01-22T20:11:05.5598717Z         Examples
2025-01-22T20:11:05.5598790Z         --------
2025-01-22T20:11:05.5598886Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5598973Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5599040Z         1
2025-01-22T20:11:05.5599110Z     
2025-01-22T20:11:05.5599214Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5599310Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5599388Z         slice(1, 3, None)
2025-01-22T20:11:05.5599458Z     
2025-01-22T20:11:05.5599568Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5599657Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5599753Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5599820Z         """
2025-01-22T20:11:05.5599923Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5599991Z         try:
2025-01-22T20:11:05.5600092Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5600100Z 
2025-01-22T20:11:05.5600341Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5600454Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5600593Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5600661Z     ???
2025-01-22T20:11:05.5600795Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5600862Z     ???
2025-01-22T20:11:05.5601139Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5601207Z     ???
2025-01-22T20:11:05.5601318Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5601322Z 
2025-01-22T20:11:05.5601388Z >   ???
2025-01-22T20:11:05.5601470Z E   KeyError: 'cups'
2025-01-22T20:11:05.5601474Z 
2025-01-22T20:11:05.5601599Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5601606Z 
2025-01-22T20:11:05.5601779Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5601783Z 
2025-01-22T20:11:05.5602009Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5602323Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5602950Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5602954Z 
2025-01-22T20:11:05.5603042Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5603122Z     def plasma(
2025-01-22T20:11:05.5603190Z         self,
2025-01-22T20:11:05.5603278Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5603347Z         config,
2025-01-22T20:11:05.5603417Z     ):
2025-01-22T20:11:05.5603854Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5603998Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5604005Z 
2025-01-22T20:11:05.5604196Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5604364Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5604543Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5604690Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5605015Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5605124Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5605239Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5605319Z     return BasePlasma(
2025-01-22T20:11:05.5605409Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5605497Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5605592Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5605676Z     self.update(**kwargs)
2025-01-22T20:11:05.5605767Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5605896Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5606004Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5606111Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5606310Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5606465Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5606674Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5606777Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5606905Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5607075Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5607244Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5607422Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5607689Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5607862Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5608046Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5608149Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5608419Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5608545Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5608788Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5608875Z     return self.apply_standard()
2025-01-22T20:11:05.5609158Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5609281Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5609587Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5609711Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5609925Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5610015Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5610282Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5610370Z     return self._get_value(key)
2025-01-22T20:11:05.5610626Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5610718Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5610826Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5610831Z 
2025-01-22T20:11:05.5610992Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5611328Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5611402Z        't046000', 't048000'],
2025-01-22T20:11:05.5611482Z       dtype='object')
2025-01-22T20:11:05.5611554Z key = 'cups'
2025-01-22T20:11:05.5611558Z 
2025-01-22T20:11:05.5611641Z     def get_loc(self, key):
2025-01-22T20:11:05.5611708Z         """
2025-01-22T20:11:05.5611976Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5612045Z     
2025-01-22T20:11:05.5612124Z         Parameters
2025-01-22T20:11:05.5612195Z         ----------
2025-01-22T20:11:05.5612270Z         key : label
2025-01-22T20:11:05.5612336Z     
2025-01-22T20:11:05.5612409Z         Returns
2025-01-22T20:11:05.5612479Z         -------
2025-01-22T20:11:05.5612613Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5612684Z     
2025-01-22T20:11:05.5612758Z         Examples
2025-01-22T20:11:05.5612833Z         --------
2025-01-22T20:11:05.5612931Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5613019Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5613087Z         1
2025-01-22T20:11:05.5613158Z     
2025-01-22T20:11:05.5613260Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5613353Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5613429Z         slice(1, 3, None)
2025-01-22T20:11:05.5613620Z     
2025-01-22T20:11:05.5613730Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5613825Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5613916Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5613988Z         """
2025-01-22T20:11:05.5614087Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5614162Z         try:
2025-01-22T20:11:05.5614271Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5614428Z         except KeyError as err:
2025-01-22T20:11:05.5614582Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5614742Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5614871Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5614939Z             ):
2025-01-22T20:11:05.5615036Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5615123Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5615212Z E           KeyError: 'cups'
2025-01-22T20:11:05.5615217Z 
2025-01-22T20:11:05.5615483Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5615766Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-helium_population_updated] _
2025-01-22T20:11:05.5615770Z 
2025-01-22T20:11:05.5615930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5616140Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5616220Z        't046000', 't048000'],
2025-01-22T20:11:05.5616294Z       dtype='object')
2025-01-22T20:11:05.5616373Z key = 'cups'
2025-01-22T20:11:05.5616378Z 
2025-01-22T20:11:05.5616457Z     def get_loc(self, key):
2025-01-22T20:11:05.5616534Z         """
2025-01-22T20:11:05.5616696Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5616771Z     
2025-01-22T20:11:05.5616844Z         Parameters
2025-01-22T20:11:05.5616919Z         ----------
2025-01-22T20:11:05.5616990Z         key : label
2025-01-22T20:11:05.5617061Z     
2025-01-22T20:11:05.5617128Z         Returns
2025-01-22T20:11:05.5617205Z         -------
2025-01-22T20:11:05.5617334Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5617406Z     
2025-01-22T20:11:05.5617481Z         Examples
2025-01-22T20:11:05.5617549Z         --------
2025-01-22T20:11:05.5617785Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5617874Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5617948Z         1
2025-01-22T20:11:05.5618013Z     
2025-01-22T20:11:05.5618117Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5618203Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5618282Z         slice(1, 3, None)
2025-01-22T20:11:05.5618348Z     
2025-01-22T20:11:05.5618559Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5618651Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5618747Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5618813Z         """
2025-01-22T20:11:05.5618917Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5618986Z         try:
2025-01-22T20:11:05.5619089Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5619093Z 
2025-01-22T20:11:05.5619342Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5619455Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5619598Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5619665Z     ???
2025-01-22T20:11:05.5619800Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5619866Z     ???
2025-01-22T20:11:05.5620145Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5620212Z     ???
2025-01-22T20:11:05.5620320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5620324Z 
2025-01-22T20:11:05.5620389Z >   ???
2025-01-22T20:11:05.5620471Z E   KeyError: 'cups'
2025-01-22T20:11:05.5620475Z 
2025-01-22T20:11:05.5620605Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5620608Z 
2025-01-22T20:11:05.5620774Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5620781Z 
2025-01-22T20:11:05.5621008Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5621324Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5621957Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5621962Z 
2025-01-22T20:11:05.5622056Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5622130Z     def plasma(
2025-01-22T20:11:05.5622203Z         self,
2025-01-22T20:11:05.5622313Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5622386Z         config,
2025-01-22T20:11:05.5622452Z     ):
2025-01-22T20:11:05.5622568Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5622665Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5622669Z 
2025-01-22T20:11:05.5622793Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5622897Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5623005Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5623089Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5623259Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5623360Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5623474Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5623679Z     return BasePlasma(
2025-01-22T20:11:05.5623766Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5623856Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5623945Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5624037Z     self.update(**kwargs)
2025-01-22T20:11:05.5624137Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5624384Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5624495Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5624604Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5624803Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5624957Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5625264Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5625368Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5625500Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5625666Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5625841Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5626011Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5626278Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5626450Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5626635Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5626738Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5626995Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5627122Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5627365Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5627456Z     return self.apply_standard()
2025-01-22T20:11:05.5627733Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5627854Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5628155Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5628280Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5628492Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5628582Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5628843Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5628931Z     return self._get_value(key)
2025-01-22T20:11:05.5629193Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5629279Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5629390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5629394Z 
2025-01-22T20:11:05.5629550Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5629764Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5629839Z        't046000', 't048000'],
2025-01-22T20:11:05.5629918Z       dtype='object')
2025-01-22T20:11:05.5629990Z key = 'cups'
2025-01-22T20:11:05.5629994Z 
2025-01-22T20:11:05.5630078Z     def get_loc(self, key):
2025-01-22T20:11:05.5630146Z         """
2025-01-22T20:11:05.5630307Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5630381Z     
2025-01-22T20:11:05.5630454Z         Parameters
2025-01-22T20:11:05.5630529Z         ----------
2025-01-22T20:11:05.5630601Z         key : label
2025-01-22T20:11:05.5630671Z     
2025-01-22T20:11:05.5630740Z         Returns
2025-01-22T20:11:05.5630815Z         -------
2025-01-22T20:11:05.5630941Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5631012Z     
2025-01-22T20:11:05.5631083Z         Examples
2025-01-22T20:11:05.5631158Z         --------
2025-01-22T20:11:05.5631343Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5631432Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5631499Z         1
2025-01-22T20:11:05.5631570Z     
2025-01-22T20:11:05.5631676Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5631767Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5631842Z         slice(1, 3, None)
2025-01-22T20:11:05.5631914Z     
2025-01-22T20:11:05.5632092Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5632189Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5632282Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5632349Z         """
2025-01-22T20:11:05.5632454Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5632523Z         try:
2025-01-22T20:11:05.5632625Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5632706Z         except KeyError as err:
2025-01-22T20:11:05.5632811Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5632909Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5633031Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5633098Z             ):
2025-01-22T20:11:05.5633195Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5633280Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5633364Z E           KeyError: 'cups'
2025-01-22T20:11:05.5633369Z 
2025-01-22T20:11:05.5633763Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5633949Z _____ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I']}] _____
2025-01-22T20:11:05.5633954Z 
2025-01-22T20:11:05.5634111Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5634317Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5634400Z        't046000', 't048000'],
2025-01-22T20:11:05.5634475Z       dtype='object')
2025-01-22T20:11:05.5634550Z key = 'cups'
2025-01-22T20:11:05.5634555Z 
2025-01-22T20:11:05.5634633Z     def get_loc(self, key):
2025-01-22T20:11:05.5634705Z         """
2025-01-22T20:11:05.5634859Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5634929Z     
2025-01-22T20:11:05.5635006Z         Parameters
2025-01-22T20:11:05.5635081Z         ----------
2025-01-22T20:11:05.5635157Z         key : label
2025-01-22T20:11:05.5635223Z     
2025-01-22T20:11:05.5635296Z         Returns
2025-01-22T20:11:05.5635364Z         -------
2025-01-22T20:11:05.5635497Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5635563Z     
2025-01-22T20:11:05.5635638Z         Examples
2025-01-22T20:11:05.5635710Z         --------
2025-01-22T20:11:05.5635810Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5635898Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5635969Z         1
2025-01-22T20:11:05.5636034Z     
2025-01-22T20:11:05.5636137Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5636223Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5636304Z         slice(1, 3, None)
2025-01-22T20:11:05.5636370Z     
2025-01-22T20:11:05.5636481Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5636570Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5636668Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5636741Z         """
2025-01-22T20:11:05.5636840Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5636915Z         try:
2025-01-22T20:11:05.5637012Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5637016Z 
2025-01-22T20:11:05.5637264Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5637372Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5637637Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5637705Z     ???
2025-01-22T20:11:05.5637837Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5637903Z     ???
2025-01-22T20:11:05.5638179Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5638251Z     ???
2025-01-22T20:11:05.5638472Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5638478Z 
2025-01-22T20:11:05.5638550Z >   ???
2025-01-22T20:11:05.5638628Z E   KeyError: 'cups'
2025-01-22T20:11:05.5638632Z 
2025-01-22T20:11:05.5638763Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5638767Z 
2025-01-22T20:11:05.5638931Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5638936Z 
2025-01-22T20:11:05.5639163Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5639481Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5640106Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5640113Z 
2025-01-22T20:11:05.5640207Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5640278Z     def plasma(
2025-01-22T20:11:05.5640351Z         self,
2025-01-22T20:11:05.5640430Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5640503Z         config,
2025-01-22T20:11:05.5640569Z     ):
2025-01-22T20:11:05.5640684Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5640777Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5640782Z 
2025-01-22T20:11:05.5640908Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5641013Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5641122Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5641211Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5641377Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5641481Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5641591Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5641673Z     return BasePlasma(
2025-01-22T20:11:05.5641756Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5641848Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5641936Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5642021Z     self.update(**kwargs)
2025-01-22T20:11:05.5642108Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5642231Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5642343Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5642450Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5642652Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5642800Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5643011Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5643105Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5643240Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5643405Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5643694Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5643866Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5644129Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5644418Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5644603Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5644710Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5644962Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5645087Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5645428Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5645521Z     return self.apply_standard()
2025-01-22T20:11:05.5645798Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5645921Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5646232Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5646357Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5646570Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5646661Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5646929Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5647011Z     return self._get_value(key)
2025-01-22T20:11:05.5647274Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5647361Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5647471Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5647476Z 
2025-01-22T20:11:05.5647631Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5647843Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5647921Z        't046000', 't048000'],
2025-01-22T20:11:05.5648001Z       dtype='object')
2025-01-22T20:11:05.5648071Z key = 'cups'
2025-01-22T20:11:05.5648080Z 
2025-01-22T20:11:05.5648159Z     def get_loc(self, key):
2025-01-22T20:11:05.5648231Z         """
2025-01-22T20:11:05.5648386Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5648456Z     
2025-01-22T20:11:05.5648528Z         Parameters
2025-01-22T20:11:05.5648607Z         ----------
2025-01-22T20:11:05.5648678Z         key : label
2025-01-22T20:11:05.5648749Z     
2025-01-22T20:11:05.5648817Z         Returns
2025-01-22T20:11:05.5648892Z         -------
2025-01-22T20:11:05.5649020Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5649092Z     
2025-01-22T20:11:05.5649163Z         Examples
2025-01-22T20:11:05.5649238Z         --------
2025-01-22T20:11:05.5649336Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5649428Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5649495Z         1
2025-01-22T20:11:05.5649566Z     
2025-01-22T20:11:05.5649674Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5649761Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5649841Z         slice(1, 3, None)
2025-01-22T20:11:05.5649907Z     
2025-01-22T20:11:05.5650017Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5650110Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5650210Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5650278Z         """
2025-01-22T20:11:05.5650382Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5650450Z         try:
2025-01-22T20:11:05.5650553Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5650635Z         except KeyError as err:
2025-01-22T20:11:05.5650736Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5650834Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5651046Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5651116Z             ):
2025-01-22T20:11:05.5651212Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5651304Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5651384Z E           KeyError: 'cups'
2025-01-22T20:11:05.5651388Z 
2025-01-22T20:11:05.5651725Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5651977Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I']}-time_explosion] _
2025-01-22T20:11:05.5651981Z 
2025-01-22T20:11:05.5652139Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5652345Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5652424Z        't046000', 't048000'],
2025-01-22T20:11:05.5652503Z       dtype='object')
2025-01-22T20:11:05.5652579Z key = 'cups'
2025-01-22T20:11:05.5652583Z 
2025-01-22T20:11:05.5652667Z     def get_loc(self, key):
2025-01-22T20:11:05.5652734Z         """
2025-01-22T20:11:05.5652894Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5652960Z     
2025-01-22T20:11:05.5653036Z         Parameters
2025-01-22T20:11:05.5653105Z         ----------
2025-01-22T20:11:05.5653181Z         key : label
2025-01-22T20:11:05.5653249Z     
2025-01-22T20:11:05.5653322Z         Returns
2025-01-22T20:11:05.5653391Z         -------
2025-01-22T20:11:05.5653625Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5653692Z     
2025-01-22T20:11:05.5653768Z         Examples
2025-01-22T20:11:05.5653839Z         --------
2025-01-22T20:11:05.5653939Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5654023Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5654095Z         1
2025-01-22T20:11:05.5654164Z     
2025-01-22T20:11:05.5654269Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5654359Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5654434Z         slice(1, 3, None)
2025-01-22T20:11:05.5654503Z     
2025-01-22T20:11:05.5654611Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5654705Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5654796Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5654871Z         """
2025-01-22T20:11:05.5654970Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5655042Z         try:
2025-01-22T20:11:05.5655139Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5655143Z 
2025-01-22T20:11:05.5655386Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5655494Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5655637Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5655710Z     ???
2025-01-22T20:11:05.5655839Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5655911Z     ???
2025-01-22T20:11:05.5656180Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5656252Z     ???
2025-01-22T20:11:05.5656359Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5656366Z 
2025-01-22T20:11:05.5656436Z >   ???
2025-01-22T20:11:05.5656516Z E   KeyError: 'cups'
2025-01-22T20:11:05.5656521Z 
2025-01-22T20:11:05.5656653Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5656657Z 
2025-01-22T20:11:05.5656823Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5656845Z 
2025-01-22T20:11:05.5657078Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5657517Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5658131Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5658136Z 
2025-01-22T20:11:05.5658230Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5658399Z     def plasma(
2025-01-22T20:11:05.5658475Z         self,
2025-01-22T20:11:05.5658556Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5658629Z         config,
2025-01-22T20:11:05.5658695Z     ):
2025-01-22T20:11:05.5658810Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5658908Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5658913Z 
2025-01-22T20:11:05.5659034Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5659150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5659253Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5659347Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5663217Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5663359Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5663486Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5663723Z     return BasePlasma(
2025-01-22T20:11:05.5663824Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5663927Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5664023Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5664117Z     self.update(**kwargs)
2025-01-22T20:11:05.5664208Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5664348Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5664470Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5664588Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5664809Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5664966Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5665184Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5665285Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5665424Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5665598Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5665777Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5665953Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5666225Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5666407Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5666606Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5666722Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5666986Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5667122Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5667365Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5667464Z     return self.apply_standard()
2025-01-22T20:11:05.5667743Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5667872Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5668177Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5668307Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5668711Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5668800Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5669076Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5669160Z     return self._get_value(key)
2025-01-22T20:11:05.5669425Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5669614Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5669736Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5669741Z 
2025-01-22T20:11:05.5669900Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5670116Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5670192Z        't046000', 't048000'],
2025-01-22T20:11:05.5670278Z       dtype='object')
2025-01-22T20:11:05.5670358Z key = 'cups'
2025-01-22T20:11:05.5670363Z 
2025-01-22T20:11:05.5670445Z     def get_loc(self, key):
2025-01-22T20:11:05.5670521Z         """
2025-01-22T20:11:05.5670680Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5670756Z     
2025-01-22T20:11:05.5670832Z         Parameters
2025-01-22T20:11:05.5670913Z         ----------
2025-01-22T20:11:05.5670985Z         key : label
2025-01-22T20:11:05.5671060Z     
2025-01-22T20:11:05.5671130Z         Returns
2025-01-22T20:11:05.5671206Z         -------
2025-01-22T20:11:05.5671338Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5671411Z     
2025-01-22T20:11:05.5671481Z         Examples
2025-01-22T20:11:05.5671560Z         --------
2025-01-22T20:11:05.5671660Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5671752Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5671826Z         1
2025-01-22T20:11:05.5671901Z     
2025-01-22T20:11:05.5672013Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5672104Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5672185Z         slice(1, 3, None)
2025-01-22T20:11:05.5672251Z     
2025-01-22T20:11:05.5672365Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5672458Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5672556Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5672627Z         """
2025-01-22T20:11:05.5672736Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5672805Z         try:
2025-01-22T20:11:05.5672913Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5672996Z         except KeyError as err:
2025-01-22T20:11:05.5673101Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5673203Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5673331Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5673411Z             ):
2025-01-22T20:11:05.5673621Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5673724Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5673806Z E           KeyError: 'cups'
2025-01-22T20:11:05.5673810Z 
2025-01-22T20:11:05.5674086Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5674361Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I']}-link_t_rad_t_electron] _
2025-01-22T20:11:05.5674365Z 
2025-01-22T20:11:05.5674529Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5674741Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5674821Z        't046000', 't048000'],
2025-01-22T20:11:05.5674904Z       dtype='object')
2025-01-22T20:11:05.5674976Z key = 'cups'
2025-01-22T20:11:05.5675096Z 
2025-01-22T20:11:05.5675186Z     def get_loc(self, key):
2025-01-22T20:11:05.5675255Z         """
2025-01-22T20:11:05.5675429Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5675496Z     
2025-01-22T20:11:05.5675575Z         Parameters
2025-01-22T20:11:05.5675647Z         ----------
2025-01-22T20:11:05.5675725Z         key : label
2025-01-22T20:11:05.5675791Z     
2025-01-22T20:11:05.5675865Z         Returns
2025-01-22T20:11:05.5676034Z         -------
2025-01-22T20:11:05.5676178Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5676245Z     
2025-01-22T20:11:05.5676322Z         Examples
2025-01-22T20:11:05.5676393Z         --------
2025-01-22T20:11:05.5676496Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5676581Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5676658Z         1
2025-01-22T20:11:05.5676730Z     
2025-01-22T20:11:05.5676832Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5676929Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5677004Z         slice(1, 3, None)
2025-01-22T20:11:05.5677075Z     
2025-01-22T20:11:05.5677182Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5677279Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5677370Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5677443Z         """
2025-01-22T20:11:05.5677551Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5677627Z         try:
2025-01-22T20:11:05.5677724Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5677728Z 
2025-01-22T20:11:05.5677988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5678104Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5678246Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5678317Z     ???
2025-01-22T20:11:05.5678453Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5678519Z     ???
2025-01-22T20:11:05.5678794Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5678861Z     ???
2025-01-22T20:11:05.5678971Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5678976Z 
2025-01-22T20:11:05.5679044Z >   ???
2025-01-22T20:11:05.5679130Z E   KeyError: 'cups'
2025-01-22T20:11:05.5679134Z 
2025-01-22T20:11:05.5679267Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5679271Z 
2025-01-22T20:11:05.5679447Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5679451Z 
2025-01-22T20:11:05.5679678Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5679997Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5680633Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5680637Z 
2025-01-22T20:11:05.5680731Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5680804Z     def plasma(
2025-01-22T20:11:05.5680878Z         self,
2025-01-22T20:11:05.5680961Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5681034Z         config,
2025-01-22T20:11:05.5681101Z     ):
2025-01-22T20:11:05.5681217Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5681312Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5681316Z 
2025-01-22T20:11:05.5681445Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5681553Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5681775Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5681859Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5682030Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5682129Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5682244Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5682328Z     return BasePlasma(
2025-01-22T20:11:05.5682413Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5682576Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5682669Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5682753Z     self.update(**kwargs)
2025-01-22T20:11:05.5682842Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5682967Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5683079Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5683187Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5683388Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5683666Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5683879Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5683981Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5684113Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5684284Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5684459Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5684631Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5684896Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5685070Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5685256Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5685363Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5685622Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5685747Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5685993Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5686087Z     return self.apply_standard()
2025-01-22T20:11:05.5686367Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5686491Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5686795Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5686920Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5687135Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5687228Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5687490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5687581Z     return self._get_value(key)
2025-01-22T20:11:05.5687847Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5687933Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5688048Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5688052Z 
2025-01-22T20:11:05.5688208Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5688419Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5688493Z        't046000', 't048000'],
2025-01-22T20:11:05.5688573Z       dtype='object')
2025-01-22T20:11:05.5688647Z key = 'cups'
2025-01-22T20:11:05.5688768Z 
2025-01-22T20:11:05.5688857Z     def get_loc(self, key):
2025-01-22T20:11:05.5688929Z         """
2025-01-22T20:11:05.5689093Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5689163Z     
2025-01-22T20:11:05.5689242Z         Parameters
2025-01-22T20:11:05.5689318Z         ----------
2025-01-22T20:11:05.5689396Z         key : label
2025-01-22T20:11:05.5689466Z     
2025-01-22T20:11:05.5689534Z         Returns
2025-01-22T20:11:05.5689708Z         -------
2025-01-22T20:11:05.5689840Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5689911Z     
2025-01-22T20:11:05.5689980Z         Examples
2025-01-22T20:11:05.5690054Z         --------
2025-01-22T20:11:05.5690150Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5690239Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5690306Z         1
2025-01-22T20:11:05.5690377Z     
2025-01-22T20:11:05.5690478Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5690574Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5690651Z         slice(1, 3, None)
2025-01-22T20:11:05.5690721Z     
2025-01-22T20:11:05.5690827Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5690924Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5691020Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5691089Z         """
2025-01-22T20:11:05.5691198Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5691267Z         try:
2025-01-22T20:11:05.5691370Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5691451Z         except KeyError as err:
2025-01-22T20:11:05.5691553Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5691653Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5691775Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5691843Z             ):
2025-01-22T20:11:05.5691943Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5692028Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5692114Z E           KeyError: 'cups'
2025-01-22T20:11:05.5692118Z 
2025-01-22T20:11:05.5692389Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5692591Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I']}] _
2025-01-22T20:11:05.5692596Z 
2025-01-22T20:11:05.5692758Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5692964Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5693046Z        't046000', 't048000'],
2025-01-22T20:11:05.5693121Z       dtype='object')
2025-01-22T20:11:05.5693195Z key = 'cups'
2025-01-22T20:11:05.5693199Z 
2025-01-22T20:11:05.5693279Z     def get_loc(self, key):
2025-01-22T20:11:05.5693355Z         """
2025-01-22T20:11:05.5693608Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5693682Z     
2025-01-22T20:11:05.5693761Z         Parameters
2025-01-22T20:11:05.5693832Z         ----------
2025-01-22T20:11:05.5693908Z         key : label
2025-01-22T20:11:05.5693974Z     
2025-01-22T20:11:05.5694047Z         Returns
2025-01-22T20:11:05.5694116Z         -------
2025-01-22T20:11:05.5694253Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5694320Z     
2025-01-22T20:11:05.5694395Z         Examples
2025-01-22T20:11:05.5694467Z         --------
2025-01-22T20:11:05.5694568Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5694651Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5694725Z         1
2025-01-22T20:11:05.5694791Z     
2025-01-22T20:11:05.5694895Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5694982Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5695196Z         slice(1, 3, None)
2025-01-22T20:11:05.5695264Z     
2025-01-22T20:11:05.5695375Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5695464Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5695558Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5695630Z         """
2025-01-22T20:11:05.5695729Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5695803Z         try:
2025-01-22T20:11:05.5695998Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5696003Z 
2025-01-22T20:11:05.5696251Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5696361Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5696501Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5696568Z     ???
2025-01-22T20:11:05.5696701Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5696771Z     ???
2025-01-22T20:11:05.5697043Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5697109Z     ???
2025-01-22T20:11:05.5697223Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5697226Z 
2025-01-22T20:11:05.5697297Z >   ???
2025-01-22T20:11:05.5697376Z E   KeyError: 'cups'
2025-01-22T20:11:05.5697380Z 
2025-01-22T20:11:05.5697520Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5697523Z 
2025-01-22T20:11:05.5697695Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5697699Z 
2025-01-22T20:11:05.5697923Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5698240Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5698866Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5698874Z 
2025-01-22T20:11:05.5698968Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5699041Z     def plasma(
2025-01-22T20:11:05.5699119Z         self,
2025-01-22T20:11:05.5699201Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5699277Z         config,
2025-01-22T20:11:05.5699351Z     ):
2025-01-22T20:11:05.5699469Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5699563Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5699568Z 
2025-01-22T20:11:05.5699696Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5699803Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5699915Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5700006Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5700172Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5700276Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5700385Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5700467Z     return BasePlasma(
2025-01-22T20:11:05.5700551Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5700644Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5700736Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5700819Z     self.update(**kwargs)
2025-01-22T20:11:05.5700909Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5701034Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5701145Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5701254Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5701457Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5701609Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5701909Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5702006Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5702137Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5702303Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5702548Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5702720Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5702985Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5703157Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5703341Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5703448Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5703821Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5703950Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5704188Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5704281Z     return self.apply_standard()
2025-01-22T20:11:05.5704559Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5704682Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5704985Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5705107Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5705320Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5705410Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5705677Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5705760Z     return self._get_value(key)
2025-01-22T20:11:05.5706019Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5706104Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5706215Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5706223Z 
2025-01-22T20:11:05.5706381Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5706593Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5706675Z        't046000', 't048000'],
2025-01-22T20:11:05.5706750Z       dtype='object')
2025-01-22T20:11:05.5706826Z key = 'cups'
2025-01-22T20:11:05.5706830Z 
2025-01-22T20:11:05.5706914Z     def get_loc(self, key):
2025-01-22T20:11:05.5706984Z         """
2025-01-22T20:11:05.5707149Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5707214Z     
2025-01-22T20:11:05.5707292Z         Parameters
2025-01-22T20:11:05.5707362Z         ----------
2025-01-22T20:11:05.5707439Z         key : label
2025-01-22T20:11:05.5707504Z     
2025-01-22T20:11:05.5707577Z         Returns
2025-01-22T20:11:05.5707647Z         -------
2025-01-22T20:11:05.5707787Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5707854Z     
2025-01-22T20:11:05.5707931Z         Examples
2025-01-22T20:11:05.5708001Z         --------
2025-01-22T20:11:05.5708103Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5708187Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5708260Z         1
2025-01-22T20:11:05.5708326Z     
2025-01-22T20:11:05.5708433Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5708522Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5708720Z         slice(1, 3, None)
2025-01-22T20:11:05.5708791Z     
2025-01-22T20:11:05.5708898Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5708993Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5709083Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5709155Z         """
2025-01-22T20:11:05.5709256Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5709328Z         try:
2025-01-22T20:11:05.5709532Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5709619Z         except KeyError as err:
2025-01-22T20:11:05.5709717Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5709823Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5709941Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5710013Z             ):
2025-01-22T20:11:05.5710107Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5710199Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5710285Z E           KeyError: 'cups'
2025-01-22T20:11:05.5710289Z 
2025-01-22T20:11:05.5710555Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5710745Z ___ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I']}] ____
2025-01-22T20:11:05.5710749Z 
2025-01-22T20:11:05.5710898Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5711111Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5711185Z        't046000', 't048000'],
2025-01-22T20:11:05.5711265Z       dtype='object')
2025-01-22T20:11:05.5711335Z key = 'cups'
2025-01-22T20:11:05.5711339Z 
2025-01-22T20:11:05.5711423Z     def get_loc(self, key):
2025-01-22T20:11:05.5711495Z         """
2025-01-22T20:11:05.5711652Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5711727Z     
2025-01-22T20:11:05.5711799Z         Parameters
2025-01-22T20:11:05.5711875Z         ----------
2025-01-22T20:11:05.5711945Z         key : label
2025-01-22T20:11:05.5712015Z     
2025-01-22T20:11:05.5712083Z         Returns
2025-01-22T20:11:05.5712157Z         -------
2025-01-22T20:11:05.5712287Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5712359Z     
2025-01-22T20:11:05.5712429Z         Examples
2025-01-22T20:11:05.5712506Z         --------
2025-01-22T20:11:05.5712602Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5712691Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5712759Z         1
2025-01-22T20:11:05.5712828Z     
2025-01-22T20:11:05.5712926Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5713016Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5713095Z         slice(1, 3, None)
2025-01-22T20:11:05.5713162Z     
2025-01-22T20:11:05.5713276Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5713365Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5713460Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5713647Z         """
2025-01-22T20:11:05.5713756Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5713824Z         try:
2025-01-22T20:11:05.5713925Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5713929Z 
2025-01-22T20:11:05.5714174Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5714283Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5714416Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5714489Z     ???
2025-01-22T20:11:05.5714617Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5714689Z     ???
2025-01-22T20:11:05.5714960Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5715143Z     ???
2025-01-22T20:11:05.5715255Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5715259Z 
2025-01-22T20:11:05.5715324Z >   ???
2025-01-22T20:11:05.5715409Z E   KeyError: 'cups'
2025-01-22T20:11:05.5715413Z 
2025-01-22T20:11:05.5715542Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5715546Z 
2025-01-22T20:11:05.5715830Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5715835Z 
2025-01-22T20:11:05.5716057Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5716378Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5717000Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5717009Z 
2025-01-22T20:11:05.5717096Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5717173Z     def plasma(
2025-01-22T20:11:05.5717241Z         self,
2025-01-22T20:11:05.5717326Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5717393Z         config,
2025-01-22T20:11:05.5717463Z     ):
2025-01-22T20:11:05.5717577Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5717675Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5717679Z 
2025-01-22T20:11:05.5717805Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5717909Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5718018Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5718101Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5718269Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5718370Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5718484Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5718562Z     return BasePlasma(
2025-01-22T20:11:05.5718650Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5718736Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5718830Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5718909Z     self.update(**kwargs)
2025-01-22T20:11:05.5719004Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5719123Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5719236Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5719342Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5719539Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5719694Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5719900Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5720003Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5720129Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5720298Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5720467Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5720642Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5720902Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5721074Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5721257Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5721362Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5721619Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5721828Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5722072Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5722160Z     return self.apply_standard()
2025-01-22T20:11:05.5722472Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5722591Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5722977Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5723103Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5723318Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5723409Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5723790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5723887Z     return self._get_value(key)
2025-01-22T20:11:05.5724143Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5724234Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5724344Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5724348Z 
2025-01-22T20:11:05.5724511Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5724717Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5724798Z        't046000', 't048000'],
2025-01-22T20:11:05.5724878Z       dtype='object')
2025-01-22T20:11:05.5724948Z key = 'cups'
2025-01-22T20:11:05.5724952Z 
2025-01-22T20:11:05.5725035Z     def get_loc(self, key):
2025-01-22T20:11:05.5725103Z         """
2025-01-22T20:11:05.5725264Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5725333Z     
2025-01-22T20:11:05.5725412Z         Parameters
2025-01-22T20:11:05.5725483Z         ----------
2025-01-22T20:11:05.5725558Z         key : label
2025-01-22T20:11:05.5725623Z     
2025-01-22T20:11:05.5725697Z         Returns
2025-01-22T20:11:05.5725766Z         -------
2025-01-22T20:11:05.5725898Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5725964Z     
2025-01-22T20:11:05.5726038Z         Examples
2025-01-22T20:11:05.5726113Z         --------
2025-01-22T20:11:05.5726214Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5726303Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5726370Z         1
2025-01-22T20:11:05.5726440Z     
2025-01-22T20:11:05.5726541Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5726631Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5726706Z         slice(1, 3, None)
2025-01-22T20:11:05.5726777Z     
2025-01-22T20:11:05.5726886Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5726980Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5727069Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5727141Z         """
2025-01-22T20:11:05.5727240Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5727313Z         try:
2025-01-22T20:11:05.5727411Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5727502Z         except KeyError as err:
2025-01-22T20:11:05.5727598Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5727701Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5727819Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5727886Z             ):
2025-01-22T20:11:05.5727982Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5728068Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5728156Z E           KeyError: 'cups'
2025-01-22T20:11:05.5728279Z 
2025-01-22T20:11:05.5728544Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5728659Z =============================== warnings summary ===============================
2025-01-22T20:11:05.5728772Z tardis/io/configuration/config_validator.py:6
2025-01-22T20:11:05.5728883Z tardis/io/configuration/config_validator.py:6
2025-01-22T20:11:05.5729284Z   /home/runner/work/tardis/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
2025-01-22T20:11:05.5729358Z   
2025-01-22T20:11:05.5730482Z   jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
2025-01-22T20:11:05.5730492Z 
2025-01-22T20:11:05.5730726Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22
2025-01-22T20:11:05.5731079Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
2025-01-22T20:11:05.5731146Z   
2025-01-22T20:11:05.5731299Z   Jupyter is migrating its paths to use standard platformdirs
2025-01-22T20:11:05.5731447Z   given by the platformdirs library.  To remove this warning and
2025-01-22T20:11:05.5731614Z   see the appropriate new directories, set the environment variable
2025-01-22T20:11:05.5731761Z   `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
2025-01-22T20:11:05.5731930Z   The use of platformdirs will be the default in `jupyter_core` v6
2025-01-22T20:11:05.5731934Z 
2025-01-22T20:11:05.5736778Z tardis/io/tests/test_HDFWriter.py::test_multi_index_write
2025-01-22T20:11:05.5737128Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:05.5737374Z   /home/runner/work/tardis/tardis/tardis/io/util.py:276: PerformanceWarning:
2025-01-22T20:11:05.5737445Z   
2025-01-22T20:11:05.5737513Z   
2025-01-22T20:11:05.5737723Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:05.5737993Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-22T20:11:05.5737999Z 
2025-01-22T20:11:05.5738213Z tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
2025-01-22T20:11:05.5738430Z tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
2025-01-22T20:11:05.5738664Z tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
2025-01-22T20:11:05.5738837Z tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
2025-01-22T20:11:05.5739149Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
2025-01-22T20:11:05.5739213Z   
2025-01-22T20:11:05.5739335Z   The current CMFGEN model parser is deprecated
2025-01-22T20:11:05.5739339Z 
2025-01-22T20:11:05.5739444Z tardis/io/tests/test_model_reader.py: 1 warning
2025-01-22T20:11:05.5739619Z tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
2025-01-22T20:11:05.5739914Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
2025-01-22T20:11:05.5739986Z   
2025-01-22T20:11:05.5740094Z   The current CMFGEN model parser is deprecated
2025-01-22T20:11:05.5740101Z 
2025-01-22T20:11:05.5740303Z tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
2025-01-22T20:11:05.5740663Z   /home/runner/work/tardis/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
2025-01-22T20:11:05.5740727Z   
2025-01-22T20:11:05.5741164Z   [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m
2025-01-22T20:11:05.5741169Z 
2025-01-22T20:11:05.5741269Z tardis/model/tests/test_base.py: 6 warnings
2025-01-22T20:11:05.5741564Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-22T20:11:05.5741736Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-22T20:11:05.5742003Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
2025-01-22T20:11:05.5742073Z   
2025-01-22T20:11:05.5742175Z   v_inner_boundary < 0, assuming default value
2025-01-22T20:11:05.5742179Z 
2025-01-22T20:11:05.5742388Z tardis/model/tests/test_base.py: 6 warnings
2025-01-22T20:11:05.5742510Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-22T20:11:05.5742701Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-22T20:11:05.5742969Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
2025-01-22T20:11:05.5743039Z   
2025-01-22T20:11:05.5743141Z   v_outer_boundary < 0, assuming default value
2025-01-22T20:11:05.5743145Z 
2025-01-22T20:11:05.5743292Z tardis/plasma/tests/test_complete_plasmas.py: 17 warnings
2025-01-22T20:11:05.5743710Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5743782Z   
2025-01-22T20:11:05.5743875Z   Property "atomic_mass" not found
2025-01-22T20:11:05.5743880Z 
2025-01-22T20:11:05.5744311Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
2025-01-22T20:11:05.5744693Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
2025-01-22T20:11:05.5744964Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5745033Z   
2025-01-22T20:11:05.5745129Z   Property "j_blues_norm_factor" not found
2025-01-22T20:11:05.5745133Z 
2025-01-22T20:11:05.5745544Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
2025-01-22T20:11:05.5745905Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
2025-01-22T20:11:05.5746177Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5746249Z   
2025-01-22T20:11:05.5746339Z   Property "j_blue_estimator" not found
2025-01-22T20:11:05.5746343Z 
2025-01-22T20:11:05.5746727Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
2025-01-22T20:11:05.5747052Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
2025-01-22T20:11:05.5747322Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5747387Z   
2025-01-22T20:11:05.5747477Z   Property "volume" not found
2025-01-22T20:11:05.5747481Z 
2025-01-22T20:11:05.5747868Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
2025-01-22T20:11:05.5748198Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
2025-01-22T20:11:05.5748465Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5748529Z   
2025-01-22T20:11:05.5748618Z   Property "r_inner" not found
2025-01-22T20:11:05.5748626Z 
2025-01-22T20:11:05.5748833Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
2025-01-22T20:11:05.5749035Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
2025-01-22T20:11:05.5749229Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
2025-01-22T20:11:05.5749460Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
2025-01-22T20:11:05.5749524Z   
2025-01-22T20:11:05.5749863Z   Requesting inner boundary below inner shell. Extrapolating the inner cell
2025-01-22T20:11:05.5749867Z 
2025-01-22T20:11:05.5750081Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-22T20:11:05.5750274Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:70: UserWarning:
2025-01-22T20:11:05.5750342Z   
2025-01-22T20:11:05.5750666Z   SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0
2025-01-22T20:11:05.5750769Z 
2025-01-22T20:11:05.5750978Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-22T20:11:05.5751172Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:111: UserWarning:
2025-01-22T20:11:05.5751242Z   
2025-01-22T20:11:05.5751576Z   SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.
2025-01-22T20:11:05.5751587Z 
2025-01-22T20:11:05.5751792Z tardis/transport/montecarlo/tests/test_vpacket.py::test_trace_vpacket_volley
2025-01-22T20:11:05.5751911Z   <string>:3: NumbaPendingDeprecationWarning:
2025-01-22T20:11:05.5751974Z   
2025-01-22T20:11:05.5753016Z   [1m[1mCode using Numba extension API maybe depending on 'old_style' error-capturing, which is deprecated and will be replaced by 'new_style' in a future release. See details at https://numba.readthedocs.io/en/latest/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors
2025-01-22T20:11:05.5753095Z   Exception origin:
2025-01-22T20:11:05.5753351Z     File "/home/runner/micromamba/envs/tardis/lib/python3.12/inspect.py", line 3180, in _bind
2025-01-22T20:11:05.5753438Z       raise TypeError(msg) from None
2025-01-22T20:11:05.5753663Z   [0m[0m
2025-01-22T20:11:05.5753669Z 
2025-01-22T20:11:05.5754004Z tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
2025-01-22T20:11:05.5754280Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
2025-01-22T20:11:05.5754352Z   
2025-01-22T20:11:05.5755188Z   More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
2025-01-22T20:11:05.5755192Z 
2025-01-22T20:11:05.5755544Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5755881Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5756217Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5756552Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5756886Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5757220Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5757561Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:05.5757629Z   
2025-01-22T20:11:05.5757818Z   Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
2025-01-22T20:11:05.5757993Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:05.5758226Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:05.5758236Z 
2025-01-22T20:11:05.5758571Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5758905Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5759390Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:05.5759459Z   
2025-01-22T20:11:05.5759630Z   Passing unrecognized arguments to super(FloatText).__init__(min=0).
2025-01-22T20:11:05.5759802Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:05.5760126Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:05.5760132Z 
2025-01-22T20:11:05.5760474Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5760811Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:05.5760874Z   
2025-01-22T20:11:05.5761050Z   Passing unrecognized arguments to super(HTML).__init__(indent=True).
2025-01-22T20:11:05.5761215Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:05.5761442Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:05.5761446Z 
2025-01-22T20:11:05.5761858Z tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
2025-01-22T20:11:05.5762182Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/qgridnext/grid.py:825: DeprecationWarning:
2025-01-22T20:11:05.5762245Z   
2025-01-22T20:11:05.5762519Z   QgridWidget._grid_options_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.
2025-01-22T20:11:05.5762523Z 
2025-01-22T20:11:05.5762776Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:05.5762976Z   /home/runner/work/tardis/tardis/tardis/io/util.py:289: PerformanceWarning:
2025-01-22T20:11:05.5763049Z   
2025-01-22T20:11:05.5763112Z   
2025-01-22T20:11:05.5763312Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:05.5763679Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-22T20:11:05.5763684Z 
2025-01-22T20:11:05.5763938Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:05.5764137Z   /home/runner/work/tardis/tardis/tardis/io/util.py:292: PerformanceWarning:
2025-01-22T20:11:05.5764206Z   
2025-01-22T20:11:05.5764274Z   
2025-01-22T20:11:05.5764471Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:05.5764648Z   map directly to c-types [inferred_type->mixed,key->values] [items->None]
2025-01-22T20:11:05.5764653Z 
2025-01-22T20:11:05.5764900Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:05.5765139Z   /home/runner/work/tardis/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
2025-01-22T20:11:05.5765206Z   
2025-01-22T20:11:05.5765395Z   The number of interpolate_shells was not specified. The value was set to 80.
2025-01-22T20:11:05.5765399Z 
2025-01-22T20:11:05.5765582Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-01-22T20:11:05.5765586Z 
2025-01-22T20:11:05.5765760Z ---------- coverage: platform linux, python 3.12.4-final-0 -----------
2025-01-22T20:11:05.5765887Z Coverage HTML written to dir coverage_html_report
2025-01-22T20:11:05.5765984Z Coverage XML written to file coverage.xml
2025-01-22T20:11:05.5765989Z 
2025-01-22T20:11:05.5766113Z =========================== short test summary info ============================
2025-01-22T20:11:05.5766676Z ERROR tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths - AttributeError: 'NLTEData' object has no attribute 'C_ul_interpolator'
2025-01-22T20:11:05.5767158Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5767757Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5768341Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:05.5768829Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5769300Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:05.5769742Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-w] - KeyError: 'cups'
2025-01-22T20:11:05.5770199Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5770684Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5771193Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5771686Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:05.5772175Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:05.5772627Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] - KeyError: 'cups'
2025-01-22T20:11:05.5773132Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5773730Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5774202Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:05.5774690Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:05.5775129Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] - KeyError: 'cups'
2025-01-22T20:11:05.5775610Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:05.5776061Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:05.5776532Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-metastability] - KeyError: 'cups'
2025-01-22T20:11:05.5777113Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-delta] - KeyError: 'cups'
2025-01-22T20:11:05.5777628Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5778174Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-phi] - KeyError: 'cups'
2025-01-22T20:11:05.5778669Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5779163Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5779679Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5780199Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5780708Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5781182Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:05.5781650Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5782164Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:05.5782618Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:05.5783115Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5783717Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:05.5784178Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-volume] - KeyError: 'cups'
2025-01-22T20:11:05.5784641Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:05.5785130Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:05.5785648Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:05.5786053Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5786530Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:05.5787172Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5787605Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5788152Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5788635Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5789087Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5789557Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:05.5790014Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5790472Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:05.5790903Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-w] - KeyError: 'cups'
2025-01-22T20:11:05.5791338Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5791803Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5792290Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5792774Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:05.5793247Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:05.5793808Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] - KeyError: 'cups'
2025-01-22T20:11:05.5794322Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5794811Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5795269Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:05.5795736Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:05.5796165Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] - KeyError: 'cups'
2025-01-22T20:11:05.5796744Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:05.5797175Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:05.5797734Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-metastability] - KeyError: 'cups'
2025-01-22T20:11:05.5798176Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-delta] - KeyError: 'cups'
2025-01-22T20:11:05.5798678Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5799119Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-phi] - KeyError: 'cups'
2025-01-22T20:11:05.5799592Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5800071Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5800553Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5801048Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5801534Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5801988Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:05.5802447Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5802944Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:05.5803381Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:05.5803973Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5804437Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:05.5804881Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-volume] - KeyError: 'cups'
2025-01-22T20:11:05.5805323Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:05.5805791Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:05.5806403Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:05.5806791Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5807357Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:05.5807849Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5808267Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5808667Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5809058Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5809461Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5809866Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:05.5810264Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5810659Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:05.5811031Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-w] - KeyError: 'cups'
2025-01-22T20:11:05.5811414Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5811815Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5812236Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5812649Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:05.5813056Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:05.5813444Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines] - KeyError: 'cups'
2025-01-22T20:11:05.5813956Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5814382Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5814777Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:05.5815175Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:05.5815667Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-nu] - KeyError: 'cups'
2025-01-22T20:11:05.5816064Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:05.5816446Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:05.5816960Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-metastability] - KeyError: 'cups'
2025-01-22T20:11:05.5817339Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-delta] - KeyError: 'cups'
2025-01-22T20:11:05.5817775Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5818149Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-phi] - KeyError: 'cups'
2025-01-22T20:11:05.5818561Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5818970Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5819387Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5819815Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5820229Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5820631Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:05.5821020Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5821449Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:05.5821837Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:05.5822245Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5822686Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:05.5823069Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-volume] - KeyError: 'cups'
2025-01-22T20:11:05.5823454Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:05.5823956Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:05.5824380Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:05.5824717Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:05.5825121Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I']}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:05.5825660Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I']}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5826020Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:05.5826456Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:05.5826727Z = 1332 passed, 305 skipped, 2 deselected, 19 xfailed, 8 xpassed, 87 warnings, 130 errors in 820.35s (0:13:40) =
2025-01-22T20:11:07.4996848Z ##[error]Process completed with exit code 1.
2025-01-22T20:11:07.5070760Z Post job cleanup.
2025-01-22T20:11:07.5102162Z Post job cleanup.
2025-01-22T20:11:07.6478470Z Will use pre-installed micromamba at /home/runner/micromamba-bin/micromamba
2025-01-22T20:11:07.6485763Z Removing micromamba run shell ...
2025-01-22T20:11:07.6489565Z ##[group]Deinitialize micromamba for bash
2025-01-22T20:11:07.6508429Z [command]/home/runner/micromamba-bin/micromamba shell deinit -s bash -r /home/runner/micromamba --log-level warning --rc-file /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-22T20:11:07.6606725Z Resetting RC file "/home/runner/.bashrc"
2025-01-22T20:11:07.6607272Z Deleting config for root prefix 
2025-01-22T20:11:07.6607795Z Clearing mamba executable environment variable
2025-01-22T20:11:07.6609675Z Removing the following in your "/home/runner/.bashrc" file
2025-01-22T20:11:07.6610236Z # >>> mamba initialize >>>
2025-01-22T20:11:07.6610736Z ...
2025-01-22T20:11:07.6611114Z # <<< mamba initialize <<<
2025-01-22T20:11:07.6640012Z Removing mamba initialize block from .bash_profile
2025-01-22T20:11:07.6654859Z ##[endgroup]
2025-01-22T20:11:07.6658855Z Removing environment tardis from auto-activate bash ...
2025-01-22T20:11:07.6787684Z Post job cleanup.
2025-01-22T20:11:07.6825577Z Post job cleanup.
2025-01-22T20:11:07.7829318Z [command]/usr/bin/git version
2025-01-22T20:11:07.7865053Z git version 2.47.1
2025-01-22T20:11:07.7915966Z Temporarily overriding HOME='/home/runner/work/_temp/b302d556-720b-4f2a-b594-369ccd3507ba' before making global git config changes
2025-01-22T20:11:07.7917278Z Adding repository directory to the temporary git global config as a safe directory
2025-01-22T20:11:07.7922393Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/tardis/tardis/tardis-regression-data
2025-01-22T20:11:07.7957727Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-01-22T20:11:07.7990192Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-01-22T20:11:07.8238779Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-01-22T20:11:07.8262284Z http.https://github.com/.extraheader
2025-01-22T20:11:07.8277007Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2025-01-22T20:11:07.8309804Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-01-22T20:11:07.8699764Z Post job cleanup.
2025-01-22T20:11:07.9661803Z [command]/usr/bin/git version
2025-01-22T20:11:07.9704127Z git version 2.47.1
2025-01-22T20:11:07.9758171Z Temporarily overriding HOME='/home/runner/work/_temp/63851b60-4e21-4da1-ba93-20167f7864cc' before making global git config changes
2025-01-22T20:11:07.9759378Z Adding repository directory to the temporary git global config as a safe directory
2025-01-22T20:11:07.9764519Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/tardis/tardis
2025-01-22T20:11:07.9798443Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-01-22T20:11:07.9829986Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-01-22T20:11:08.0062256Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-01-22T20:11:08.0084711Z http.https://github.com/.extraheader
2025-01-22T20:11:08.0097555Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2025-01-22T20:11:08.0130902Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-01-22T20:11:08.0457577Z Cleaning up orphan processes
