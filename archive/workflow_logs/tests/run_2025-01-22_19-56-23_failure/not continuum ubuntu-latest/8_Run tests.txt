2025-01-22T19:57:18.0055498Z ##[group]Run pytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"
2025-01-22T19:57:18.0057778Z [36;1mpytest tardis --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"[0m
2025-01-22T19:57:18.0088614Z shell: /usr/bin/bash -l {0}
2025-01-22T19:57:18.0088888Z env:
2025-01-22T19:57:18.0089068Z   CACHE_NUMBER: 0
2025-01-22T19:57:18.0089682Z   PYTEST_FLAGS: --tardis-regression-data=/home/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:57:18.0090346Z   CODECOV_TOKEN: 
2025-01-22T19:57:18.0090568Z   MAMBA_ROOT_PREFIX: /home/runner/micromamba
2025-01-22T19:57:18.0090876Z   MAMBA_EXE: /home/runner/micromamba-bin/micromamba
2025-01-22T19:57:18.0091215Z   CONDARC: /home/runner/work/_temp/setup-micromamba/.condarc
2025-01-22T19:57:18.0091547Z ##[endgroup]
2025-01-22T19:57:26.5317550Z ============================= test session starts ==============================
2025-01-22T19:57:26.5318176Z platform linux -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
2025-01-22T19:57:26.5318619Z rootdir: /home/runner/work/tardis/tardis
2025-01-22T19:57:26.5318971Z configfile: pyproject.toml
2025-01-22T19:57:26.5319418Z plugins: anyio-4.4.0, doctestplus-1.2.1, cov-5.0.0, html-4.1.1, metadata-3.1.1
2025-01-22T19:57:26.5319961Z collected 1796 items / 2 deselected / 1794 selected
2025-01-22T19:57:26.5320219Z 
2025-01-22T19:57:31.8273023Z tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
2025-01-22T19:57:34.6294391Z tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
2025-01-22T19:57:36.1929997Z tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
2025-01-22T19:57:37.9366276Z tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
2025-01-22T19:57:37.9458686Z tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
2025-01-22T19:57:39.2257409Z tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
2025-01-22T19:57:39.5726368Z tardis/grid/tests/test_grid.py .                                         [  2%]
2025-01-22T19:57:39.5742208Z tardis/gui/tests/test_gui.py s                                           [  2%]
2025-01-22T19:57:43.2418855Z tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
2025-01-22T19:57:43.2548321Z tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
2025-01-22T19:57:43.2817304Z tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
2025-01-22T19:58:20.8615295Z tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
2025-01-22T19:58:20.8761720Z tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
2025-01-22T19:58:20.8874115Z tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
2025-01-22T19:58:20.9188252Z tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
2025-01-22T19:58:20.9394859Z tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
2025-01-22T19:58:21.2430516Z tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
2025-01-22T19:58:21.5575879Z tardis/io/tests/test_atomic.py .....                                     [  7%]
2025-01-22T19:58:21.5770445Z tardis/io/tests/test_decay.py ..                                         [  7%]
2025-01-22T19:58:21.7742127Z tardis/io/tests/test_model_reader.py ......                              [  7%]
2025-01-22T19:58:21.7810654Z tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
2025-01-22T19:59:19.2920624Z tardis/model/tests/test_base.py ........................................ [ 10%]
2025-01-22T19:59:20.2940310Z ............                                                             [ 10%]
2025-01-22T19:59:23.3685279Z tardis/model/tests/test_csvy_model.py .........                          [ 11%]
2025-01-22T19:59:23.4160376Z tardis/model/tests/test_density.py ..                                    [ 11%]
2025-01-22T19:59:24.7071934Z tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
2025-01-22T19:59:26.2999242Z tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
2025-01-22T19:59:27.8800587Z tardis/opacities/tests/test_tau_sobolev.py ..                            [ 12%]
2025-01-22T19:59:30.4620219Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py ..E      [ 12%]
2025-01-22T20:00:16.9716507Z tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
2025-01-22T20:00:28.4479878Z tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
2025-01-22T20:00:29.8819372Z tardis/plasma/tests/test_complete_plasmas.py .....................s..... [ 13%]
2025-01-22T20:00:32.8189920Z s....ssssss............s............ss.....s....ssssss............s..... [ 18%]
2025-01-22T20:00:34.5471270Z .......ss.....s....ssssss............s............ss.....s....ssssss.... [ 22%]
2025-01-22T20:00:37.4274804Z ........s............ss.....s........ss............s............ss.....s [ 26%]
2025-01-22T20:00:40.3330379Z ........ss............s............ss.....s....ssssss............s...... [ 30%]
2025-01-22T20:00:41.0962530Z ......ss.....s....ssssss............s............ss.....s.ss.ssssss..... [ 34%]
2025-01-22T20:00:44.0278795Z .......s............ss.....s....ssssss............s............ss.....s. [ 38%]
2025-01-22T20:00:46.9060148Z ...ssssss............s............ss.....s....ssssss............s....... [ 42%]
2025-01-22T20:01:14.1695357Z .....ss.....s....ssssss.....EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 46%]
2025-01-22T20:01:58.0990930Z EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 50%]
2025-01-22T20:02:09.2093736Z EEEEEEEEEEEEE.......s............ss.....s....ssssss............s........ [ 54%]
2025-01-22T20:02:12.4017757Z ....ss.....s....ssssss..........................s.....s....ssss......... [ 58%]
2025-01-22T20:02:12.7362478Z ...................s.....s....ssss.......                                [ 60%]
2025-01-22T20:02:12.8507275Z tardis/plasma/tests/test_hdf_plasma.py ................................. [ 62%]
2025-01-22T20:02:12.8628774Z ......                                                                   [ 62%]
2025-01-22T20:02:12.9988085Z tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
2025-01-22T20:04:30.4339278Z tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
2025-01-22T20:04:30.4367073Z tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
2025-01-22T20:04:53.8893368Z tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
2025-01-22T20:05:07.4034248Z tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
2025-01-22T20:05:08.1627853Z tardis/simulation/tests/test_convergence.py .....                        [ 64%]
2025-01-22T20:05:16.8526164Z tardis/simulation/tests/test_simulation.py .............                 [ 65%]
2025-01-22T20:05:16.8721633Z tardis/spectrum/tests/test_cuda_formal_integral.py sssssssssssssssssssss [ 66%]
2025-01-22T20:05:17.3389963Z ssss...ssssssssssssssssssssss                                            [ 67%]
2025-01-22T20:05:17.3464086Z tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
2025-01-22T20:05:19.5351441Z tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
2025-01-22T20:05:19.5547922Z ..........                                                               [ 69%]
2025-01-22T20:05:19.7284778Z tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
2025-01-22T20:05:19.7615743Z .........                                                                [ 72%]
2025-01-22T20:05:38.3882470Z tardis/spectrum/tests/test_spectrum_solver.py ....                       [ 72%]
2025-01-22T20:06:40.9272812Z tardis/tests/test_tardis_full.py ....                                    [ 72%]
2025-01-22T20:08:05.4550320Z tardis/tests/test_tardis_full_formal_integral.py ................        [ 73%]
2025-01-22T20:08:05.5310499Z tardis/tests/test_util.py .............................................  [ 75%]
2025-01-22T20:08:08.1874572Z tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
2025-01-22T20:08:15.9339715Z tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
2025-01-22T20:08:16.1544774Z tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
2025-01-22T20:08:16.1741568Z tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
2025-01-22T20:08:16.2166694Z sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
2025-01-22T20:08:25.2021953Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py x..       [ 81%]
2025-01-22T20:08:25.2090554Z tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
2025-01-22T20:08:31.4346266Z tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
2025-01-22T20:08:31.9314362Z tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
2025-01-22T20:08:32.9962828Z tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
2025-01-22T20:08:33.1329141Z XX.........                                                              [ 84%]
2025-01-22T20:08:33.1608613Z tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
2025-01-22T20:08:33.4723271Z tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
2025-01-22T20:08:33.9146463Z .....                                                                    [ 85%]
2025-01-22T20:09:08.8559679Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py ......         [ 85%]
2025-01-22T20:09:08.8851571Z tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
2025-01-22T20:09:08.8884262Z tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
2025-01-22T20:09:11.3096152Z tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
2025-01-22T20:09:11.3274025Z tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
2025-01-22T20:09:14.8297352Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py . [ 86%]
2025-01-22T20:09:14.8298565Z                                                                          [ 86%]
2025-01-22T20:09:15.5882567Z tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
2025-01-22T20:09:16.9524925Z tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
2025-01-22T20:09:19.2179816Z ......                                                                   [ 88%]
2025-01-22T20:09:23.9457387Z tardis/visualization/tools/tests/test_liv_plot.py ...................... [ 90%]
2025-01-22T20:09:27.1495307Z .............................                                            [ 91%]
2025-01-22T20:09:30.0348786Z tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
2025-01-22T20:09:37.1255426Z ....                                                                     [ 92%]
2025-01-22T20:09:43.2806454Z tardis/visualization/tools/tests/test_sdec_plot.py ..................... [ 94%]
2025-01-22T20:09:51.4078873Z ..............................                                           [ 95%]
2025-01-22T20:09:51.8502569Z tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
2025-01-22T20:09:51.9237276Z ....                                                                     [ 96%]
2025-01-22T20:09:52.9900030Z tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
2025-01-22T20:09:53.6239019Z ..................                                                       [ 98%]
2025-01-22T20:10:57.2462618Z tardis/visualization/widgets/tests/test_shell_info.py .................. [ 99%]
2025-01-22T20:11:05.2782513Z ......                                                                   [100%]
2025-01-22T20:11:05.2783050Z 
2025-01-22T20:11:05.2783266Z ==================================== ERRORS ====================================
2025-01-22T20:11:05.2784255Z _________ ERROR at setup of test_legacy_chianti_collisional_strengths __________
2025-01-22T20:11:05.2784869Z 
2025-01-22T20:11:05.2785711Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=271741 Levels=24806>
2025-01-22T20:11:05.2786516Z 
2025-01-22T20:11:05.2786701Z     @pytest.fixture
2025-01-22T20:11:05.2787385Z     def legacy_chianti_collision_rate_plasma_solver(atomic_dataset):
2025-01-22T20:11:05.2788149Z         atom_data = copy.deepcopy(atomic_dataset)
2025-01-22T20:11:05.2788837Z         atom_data.prepare_atom_data([1], "macroatom", [(1, 0)], [])
2025-01-22T20:11:05.2789442Z >       return atom_data.nlte_data.get_collision_matrix(
2025-01-22T20:11:05.2790068Z             (1, 0), np.array([10000, 20000])
2025-01-22T20:11:05.2790541Z         )
2025-01-22T20:11:05.2790744Z 
2025-01-22T20:11:05.2791116Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py:82: 
2025-01-22T20:11:05.2791926Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2792363Z 
2025-01-22T20:11:05.2792716Z self = <tardis.io.atom_data.nlte_data.NLTEData object at 0x7f99eb469760>
2025-01-22T20:11:05.2793448Z species = (1, 0), t_electrons = array([10000, 20000])
2025-01-22T20:11:05.2794139Z 
2025-01-22T20:11:05.2794383Z     def get_collision_matrix(self, species, t_electrons):
2025-01-22T20:11:05.2794878Z         """
2025-01-22T20:11:05.2795310Z         Creat collision matrix by interpolating the C_ul values for
2025-01-22T20:11:05.2795860Z         the desired temperatures.
2025-01-22T20:11:05.2796246Z         """
2025-01-22T20:11:05.2796642Z >       c_ul_matrix = self.C_ul_interpolator[species](t_electrons)
2025-01-22T20:11:05.2797321Z E       AttributeError: 'NLTEData' object has no attribute 'C_ul_interpolator'
2025-01-22T20:11:05.2797760Z 
2025-01-22T20:11:05.2797963Z tardis/io/atom_data/nlte_data.py:91: AttributeError
2025-01-22T20:11:05.2798789Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_rad] _
2025-01-22T20:11:05.2799487Z 
2025-01-22T20:11:05.2799779Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2800611Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2801286Z        't046000', 't048000'],
2025-01-22T20:11:05.2801677Z       dtype='object')
2025-01-22T20:11:05.2802018Z key = 'cups'
2025-01-22T20:11:05.2802204Z 
2025-01-22T20:11:05.2802348Z     def get_loc(self, key):
2025-01-22T20:11:05.2802714Z         """
2025-01-22T20:11:05.2803166Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2803900Z     
2025-01-22T20:11:05.2804196Z         Parameters
2025-01-22T20:11:05.2804526Z         ----------
2025-01-22T20:11:05.2804847Z         key : label
2025-01-22T20:11:05.2805152Z     
2025-01-22T20:11:05.2805421Z         Returns
2025-01-22T20:11:05.2805722Z         -------
2025-01-22T20:11:05.2806129Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2807065Z     
2025-01-22T20:11:05.2807349Z         Examples
2025-01-22T20:11:05.2807670Z         --------
2025-01-22T20:11:05.2808040Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2808527Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2808947Z         1
2025-01-22T20:11:05.2809242Z     
2025-01-22T20:11:05.2809588Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2810064Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2810492Z         slice(1, 3, None)
2025-01-22T20:11:05.2811153Z     
2025-01-22T20:11:05.2811502Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2812006Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2812540Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2812981Z         """
2025-01-22T20:11:05.2813319Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2814014Z         try:
2025-01-22T20:11:05.2814392Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2814742Z 
2025-01-22T20:11:05.2815189Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.2816027Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2816634Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2817154Z     ???
2025-01-22T20:11:05.2817559Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2818077Z     ???
2025-01-22T20:11:05.2818726Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.2819489Z     ???
2025-01-22T20:11:05.2819837Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2820193Z 
2025-01-22T20:11:05.2820317Z >   ???
2025-01-22T20:11:05.2820607Z E   KeyError: 'cups'
2025-01-22T20:11:05.2820825Z 
2025-01-22T20:11:05.2821058Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.2821454Z 
2025-01-22T20:11:05.2821766Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.2822226Z 
2025-01-22T20:11:05.2822629Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.2823966Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.2825880Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.2827250Z 
2025-01-22T20:11:05.2827429Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.2827862Z     def plasma(
2025-01-22T20:11:05.2828178Z         self,
2025-01-22T20:11:05.2828512Z         chianti_he_db_fpath,
2025-01-22T20:11:05.2828903Z         config,
2025-01-22T20:11:05.2829126Z     ):
2025-01-22T20:11:05.2829341Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.2829637Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.2829813Z 
2025-01-22T20:11:05.2829946Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.2830262Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2830566Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.2830833Z     plasma = assemble_plasma(
2025-01-22T20:11:05.2831165Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.2831516Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.2831804Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.2832070Z     return BasePlasma(
2025-01-22T20:11:05.2832277Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.2832517Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.2832763Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.2833191Z     self.update(**kwargs)
2025-01-22T20:11:05.2833411Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.2833930Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.2834248Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.2834540Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.2834971Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.2835466Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.2836055Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.2836445Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.2836750Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.2837122Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.2837544Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.2837976Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.2838502Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.2839024Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.2839458Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.2839824Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.2840266Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.2840728Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.2841173Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.2841592Z     return self.apply_standard()
2025-01-22T20:11:05.2842027Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.2842517Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.2843023Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.2843769Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.2844260Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.2844659Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.2845089Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.2845536Z     return self._get_value(key)
2025-01-22T20:11:05.2845941Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.2846371Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.2846642Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2846844Z 
2025-01-22T20:11:05.2847007Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2847454Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2847824Z        't046000', 't048000'],
2025-01-22T20:11:05.2848037Z       dtype='object')
2025-01-22T20:11:05.2848228Z key = 'cups'
2025-01-22T20:11:05.2848334Z 
2025-01-22T20:11:05.2848412Z     def get_loc(self, key):
2025-01-22T20:11:05.2848616Z         """
2025-01-22T20:11:05.2848886Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2849191Z     
2025-01-22T20:11:05.2849352Z         Parameters
2025-01-22T20:11:05.2849537Z         ----------
2025-01-22T20:11:05.2849718Z         key : label
2025-01-22T20:11:05.2849893Z     
2025-01-22T20:11:05.2850046Z         Returns
2025-01-22T20:11:05.2850217Z         -------
2025-01-22T20:11:05.2850449Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2850877Z     
2025-01-22T20:11:05.2851032Z         Examples
2025-01-22T20:11:05.2851206Z         --------
2025-01-22T20:11:05.2851407Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2851665Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2851889Z         1
2025-01-22T20:11:05.2852045Z     
2025-01-22T20:11:05.2852231Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2852502Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2852853Z         slice(1, 3, None)
2025-01-22T20:11:05.2853045Z     
2025-01-22T20:11:05.2853237Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2853680Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2853955Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2854191Z         """
2025-01-22T20:11:05.2854381Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2854628Z         try:
2025-01-22T20:11:05.2854829Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2855090Z         except KeyError as err:
2025-01-22T20:11:05.2855330Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.2855604Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.2855900Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.2856165Z             ):
2025-01-22T20:11:05.2856359Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.2856614Z >           raise KeyError(key) from err
2025-01-22T20:11:05.2856873Z E           KeyError: 'cups'
2025-01-22T20:11:05.2857018Z 
2025-01-22T20:11:05.2857289Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.2857801Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:05.2858685Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:05.2859399Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:05.2859979Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:05.2860700Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:05.2861586Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-g_electron] _
2025-01-22T20:11:05.2861986Z 
2025-01-22T20:11:05.2862139Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2862591Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2862956Z        't046000', 't048000'],
2025-01-22T20:11:05.2863167Z       dtype='object')
2025-01-22T20:11:05.2863363Z key = 'cups'
2025-01-22T20:11:05.2863469Z 
2025-01-22T20:11:05.2863699Z     def get_loc(self, key):
2025-01-22T20:11:05.2863908Z         """
2025-01-22T20:11:05.2864167Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2864473Z     
2025-01-22T20:11:05.2864631Z         Parameters
2025-01-22T20:11:05.2864813Z         ----------
2025-01-22T20:11:05.2864992Z         key : label
2025-01-22T20:11:05.2865164Z     
2025-01-22T20:11:05.2865322Z         Returns
2025-01-22T20:11:05.2865494Z         -------
2025-01-22T20:11:05.2865731Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2866013Z     
2025-01-22T20:11:05.2866170Z         Examples
2025-01-22T20:11:05.2866346Z         --------
2025-01-22T20:11:05.2866544Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2866802Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2867025Z         1
2025-01-22T20:11:05.2867185Z     
2025-01-22T20:11:05.2867532Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2867797Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2868038Z         slice(1, 3, None)
2025-01-22T20:11:05.2868233Z     
2025-01-22T20:11:05.2868426Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2868709Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2868964Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2869198Z         """
2025-01-22T20:11:05.2869391Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2869756Z         try:
2025-01-22T20:11:05.2869950Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2870135Z 
2025-01-22T20:11:05.2870388Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.2870832Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2871166Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2871456Z     ???
2025-01-22T20:11:05.2871674Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2871953Z     ???
2025-01-22T20:11:05.2872307Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.2872733Z     ???
2025-01-22T20:11:05.2872927Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2873125Z 
2025-01-22T20:11:05.2873194Z >   ???
2025-01-22T20:11:05.2873359Z E   KeyError: 'cups'
2025-01-22T20:11:05.2873476Z 
2025-01-22T20:11:05.2873838Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.2874061Z 
2025-01-22T20:11:05.2874233Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.2874482Z 
2025-01-22T20:11:05.2874704Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.2875322Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.2876348Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.2877053Z 
2025-01-22T20:11:05.2877143Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.2877376Z     def plasma(
2025-01-22T20:11:05.2877549Z         self,
2025-01-22T20:11:05.2877733Z         chianti_he_db_fpath,
2025-01-22T20:11:05.2877940Z         config,
2025-01-22T20:11:05.2878111Z     ):
2025-01-22T20:11:05.2878309Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.2878592Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.2878770Z 
2025-01-22T20:11:05.2878890Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.2879205Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2879504Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.2879766Z     plasma = assemble_plasma(
2025-01-22T20:11:05.2880074Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.2880436Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.2880724Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.2880992Z     return BasePlasma(
2025-01-22T20:11:05.2881200Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.2881442Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.2881691Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.2881929Z     self.update(**kwargs)
2025-01-22T20:11:05.2882145Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.2882424Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.2882734Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.2883023Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.2883765Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.2884257Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.2885014Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.2885523Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.2885839Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.2886288Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.2887229Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.2887930Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.2888447Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.2888997Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.2889438Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.2889805Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.2890235Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.2890695Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.2891136Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.2891547Z     return self.apply_standard()
2025-01-22T20:11:05.2891982Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.2892461Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.2892965Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.2893473Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.2894018Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.2894547Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.2895167Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.2895608Z     return self._get_value(key)
2025-01-22T20:11:05.2896007Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.2896433Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.2896705Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2896897Z 
2025-01-22T20:11:05.2897058Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2897505Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2897873Z        't046000', 't048000'],
2025-01-22T20:11:05.2898084Z       dtype='object')
2025-01-22T20:11:05.2898276Z key = 'cups'
2025-01-22T20:11:05.2898382Z 
2025-01-22T20:11:05.2898461Z     def get_loc(self, key):
2025-01-22T20:11:05.2898662Z         """
2025-01-22T20:11:05.2898916Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2899222Z     
2025-01-22T20:11:05.2899378Z         Parameters
2025-01-22T20:11:05.2899561Z         ----------
2025-01-22T20:11:05.2899739Z         key : label
2025-01-22T20:11:05.2899918Z     
2025-01-22T20:11:05.2900071Z         Returns
2025-01-22T20:11:05.2900246Z         -------
2025-01-22T20:11:05.2900476Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2900756Z     
2025-01-22T20:11:05.2900909Z         Examples
2025-01-22T20:11:05.2901137Z         --------
2025-01-22T20:11:05.2901493Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2901867Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2902107Z         1
2025-01-22T20:11:05.2902265Z     
2025-01-22T20:11:05.2902607Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2902887Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2903125Z         slice(1, 3, None)
2025-01-22T20:11:05.2903315Z     
2025-01-22T20:11:05.2903618Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2903903Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2904157Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2904388Z         """
2025-01-22T20:11:05.2904579Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2904943Z         try:
2025-01-22T20:11:05.2905138Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2905398Z         except KeyError as err:
2025-01-22T20:11:05.2905639Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.2905915Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.2906222Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.2906498Z             ):
2025-01-22T20:11:05.2906688Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.2906944Z >           raise KeyError(key) from err
2025-01-22T20:11:05.2907186Z E           KeyError: 'cups'
2025-01-22T20:11:05.2907326Z 
2025-01-22T20:11:05.2907600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.2908605Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-selected_atoms] _
2025-01-22T20:11:05.2909027Z 
2025-01-22T20:11:05.2909190Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2909650Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2910031Z        't046000', 't048000'],
2025-01-22T20:11:05.2910246Z       dtype='object')
2025-01-22T20:11:05.2910441Z key = 'cups'
2025-01-22T20:11:05.2910549Z 
2025-01-22T20:11:05.2910632Z     def get_loc(self, key):
2025-01-22T20:11:05.2910835Z         """
2025-01-22T20:11:05.2911092Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2911401Z     
2025-01-22T20:11:05.2911561Z         Parameters
2025-01-22T20:11:05.2911743Z         ----------
2025-01-22T20:11:05.2911918Z         key : label
2025-01-22T20:11:05.2912092Z     
2025-01-22T20:11:05.2912243Z         Returns
2025-01-22T20:11:05.2912445Z         -------
2025-01-22T20:11:05.2912681Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2912959Z     
2025-01-22T20:11:05.2913111Z         Examples
2025-01-22T20:11:05.2913287Z         --------
2025-01-22T20:11:05.2913483Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2913873Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2914096Z         1
2025-01-22T20:11:05.2914251Z     
2025-01-22T20:11:05.2914438Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2914938Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2915268Z         slice(1, 3, None)
2025-01-22T20:11:05.2915464Z     
2025-01-22T20:11:05.2915658Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2915945Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2916201Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2916433Z         """
2025-01-22T20:11:05.2916626Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2916880Z         try:
2025-01-22T20:11:05.2917073Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2917254Z 
2025-01-22T20:11:05.2917502Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.2917944Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2918277Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2918703Z     ???
2025-01-22T20:11:05.2918923Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2919196Z     ???
2025-01-22T20:11:05.2919550Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.2919967Z     ???
2025-01-22T20:11:05.2920161Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2920352Z 
2025-01-22T20:11:05.2920422Z >   ???
2025-01-22T20:11:05.2920584Z E   KeyError: 'cups'
2025-01-22T20:11:05.2920812Z 
2025-01-22T20:11:05.2920946Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.2921155Z 
2025-01-22T20:11:05.2921429Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.2921898Z 
2025-01-22T20:11:05.2922143Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.2922773Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.2923995Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.2924762Z 
2025-01-22T20:11:05.2924857Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.2925084Z     def plasma(
2025-01-22T20:11:05.2925258Z         self,
2025-01-22T20:11:05.2925435Z         chianti_he_db_fpath,
2025-01-22T20:11:05.2925646Z         config,
2025-01-22T20:11:05.2925811Z     ):
2025-01-22T20:11:05.2926006Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.2926287Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.2926458Z 
2025-01-22T20:11:05.2926583Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.2926890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2927189Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.2927451Z     plasma = assemble_plasma(
2025-01-22T20:11:05.2927758Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.2928159Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.2928661Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.2928988Z     return BasePlasma(
2025-01-22T20:11:05.2929202Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.2929440Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.2929690Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.2929959Z     self.update(**kwargs)
2025-01-22T20:11:05.2930176Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.2930454Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.2930761Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.2931046Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.2931470Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.2931958Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.2932399Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.2932789Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.2933087Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.2933457Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.2934013Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.2934447Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.2935093Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.2935997Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.2936756Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.2937328Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.2937770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.2938234Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.2938680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.2939093Z     return self.apply_standard()
2025-01-22T20:11:05.2939523Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.2940113Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.2940617Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.2941128Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.2941537Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.2942086Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.2942756Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.2943194Z     return self._get_value(key)
2025-01-22T20:11:05.2943785Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.2944223Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.2944498Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2944714Z 
2025-01-22T20:11:05.2944871Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2945317Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2945686Z        't046000', 't048000'],
2025-01-22T20:11:05.2945897Z       dtype='object')
2025-01-22T20:11:05.2946086Z key = 'cups'
2025-01-22T20:11:05.2946197Z 
2025-01-22T20:11:05.2946274Z     def get_loc(self, key):
2025-01-22T20:11:05.2946476Z         """
2025-01-22T20:11:05.2946730Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2947035Z     
2025-01-22T20:11:05.2947192Z         Parameters
2025-01-22T20:11:05.2947375Z         ----------
2025-01-22T20:11:05.2947552Z         key : label
2025-01-22T20:11:05.2947729Z     
2025-01-22T20:11:05.2947885Z         Returns
2025-01-22T20:11:05.2948061Z         -------
2025-01-22T20:11:05.2948296Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2948682Z     
2025-01-22T20:11:05.2948953Z         Examples
2025-01-22T20:11:05.2949216Z         --------
2025-01-22T20:11:05.2949418Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2949678Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2949913Z         1
2025-01-22T20:11:05.2950072Z     
2025-01-22T20:11:05.2950264Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2950542Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2950784Z         slice(1, 3, None)
2025-01-22T20:11:05.2950978Z     
2025-01-22T20:11:05.2951176Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2951456Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2951714Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2951951Z         """
2025-01-22T20:11:05.2952143Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2952396Z         try:
2025-01-22T20:11:05.2952590Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2952852Z         except KeyError as err:
2025-01-22T20:11:05.2953089Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.2953365Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.2953793Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.2954061Z             ):
2025-01-22T20:11:05.2954404Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.2954656Z >           raise KeyError(key) from err
2025-01-22T20:11:05.2954897Z E           KeyError: 'cups'
2025-01-22T20:11:05.2955043Z 
2025-01-22T20:11:05.2955319Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.2956345Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-number_density] _
2025-01-22T20:11:05.2956896Z 
2025-01-22T20:11:05.2957061Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.2957515Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.2958137Z        't046000', 't048000'],
2025-01-22T20:11:05.2958466Z       dtype='object')
2025-01-22T20:11:05.2958720Z key = 'cups'
2025-01-22T20:11:05.2977114Z 
2025-01-22T20:11:05.2977310Z     def get_loc(self, key):
2025-01-22T20:11:05.2977697Z         """
2025-01-22T20:11:05.2978150Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.2978690Z     
2025-01-22T20:11:05.2978972Z         Parameters
2025-01-22T20:11:05.2979298Z         ----------
2025-01-22T20:11:05.2979628Z         key : label
2025-01-22T20:11:05.2979948Z     
2025-01-22T20:11:05.2980230Z         Returns
2025-01-22T20:11:05.2980552Z         -------
2025-01-22T20:11:05.2980986Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.2981506Z     
2025-01-22T20:11:05.2981795Z         Examples
2025-01-22T20:11:05.2982117Z         --------
2025-01-22T20:11:05.2982479Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.2982952Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.2983367Z         1
2025-01-22T20:11:05.2983866Z     
2025-01-22T20:11:05.2984228Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.2984758Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.2985216Z         slice(1, 3, None)
2025-01-22T20:11:05.2985585Z     
2025-01-22T20:11:05.2985960Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.2986480Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.2986964Z         array([False,  True, False,  True])
2025-01-22T20:11:05.2987410Z         """
2025-01-22T20:11:05.2987796Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.2988275Z         try:
2025-01-22T20:11:05.2988656Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.2988992Z 
2025-01-22T20:11:05.2989461Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.2990279Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2990902Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2991422Z     ???
2025-01-22T20:11:05.2991854Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.2992369Z     ???
2025-01-22T20:11:05.2993104Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.2994072Z     ???
2025-01-22T20:11:05.2994454Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.2994833Z 
2025-01-22T20:11:05.2994955Z >   ???
2025-01-22T20:11:05.2995262Z E   KeyError: 'cups'
2025-01-22T20:11:05.2995485Z 
2025-01-22T20:11:05.2995743Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.2996119Z 
2025-01-22T20:11:05.2996436Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.2996891Z 
2025-01-22T20:11:05.2997303Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.2998459Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3000602Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3001895Z 
2025-01-22T20:11:05.3002071Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3002503Z     def plasma(
2025-01-22T20:11:05.3002817Z         self,
2025-01-22T20:11:05.3003133Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3003658Z         config,
2025-01-22T20:11:05.3004169Z     ):
2025-01-22T20:11:05.3004519Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3005035Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3005343Z 
2025-01-22T20:11:05.3005555Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3006090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3006607Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3007070Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3007599Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3008194Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3008673Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3009128Z     return BasePlasma(
2025-01-22T20:11:05.3009475Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3009877Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3010297Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3010725Z     self.update(**kwargs)
2025-01-22T20:11:05.3011114Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3011588Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3012127Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3012674Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3013409Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3014411Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3015173Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3015838Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3016158Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3016751Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3017480Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3018226Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3019114Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3019998Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3020749Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3021381Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3021879Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3022681Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3023447Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3024341Z     return self.apply_standard()
2025-01-22T20:11:05.3025074Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3025908Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3026777Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3027689Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3028404Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3029294Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3030016Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3030761Z     return self._get_value(key)
2025-01-22T20:11:05.3031448Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3032060Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3032338Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3032667Z 
2025-01-22T20:11:05.3032951Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3033896Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3034538Z        't046000', 't048000'],
2025-01-22T20:11:05.3034897Z       dtype='object')
2025-01-22T20:11:05.3035226Z key = 'cups'
2025-01-22T20:11:05.3035397Z 
2025-01-22T20:11:05.3035546Z     def get_loc(self, key):
2025-01-22T20:11:05.3035890Z         """
2025-01-22T20:11:05.3036319Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3036850Z     
2025-01-22T20:11:05.3037121Z         Parameters
2025-01-22T20:11:05.3037434Z         ----------
2025-01-22T20:11:05.3037735Z         key : label
2025-01-22T20:11:05.3038030Z     
2025-01-22T20:11:05.3038287Z         Returns
2025-01-22T20:11:05.3038578Z         -------
2025-01-22T20:11:05.3038971Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3039458Z     
2025-01-22T20:11:05.3039723Z         Examples
2025-01-22T20:11:05.3040035Z         --------
2025-01-22T20:11:05.3040386Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3040834Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3041215Z         1
2025-01-22T20:11:05.3041480Z     
2025-01-22T20:11:05.3041795Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3042264Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3042669Z         slice(1, 3, None)
2025-01-22T20:11:05.3042992Z     
2025-01-22T20:11:05.3043315Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3043933Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3044376Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3044776Z         """
2025-01-22T20:11:05.3045104Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3045531Z         try:
2025-01-22T20:11:05.3045873Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3046326Z         except KeyError as err:
2025-01-22T20:11:05.3046731Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3047203Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3047708Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3048168Z             ):
2025-01-22T20:11:05.3048499Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3048937Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3049348Z E           KeyError: 'cups'
2025-01-22T20:11:05.3049580Z 
2025-01-22T20:11:05.3050058Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3051212Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_electrons] _
2025-01-22T20:11:05.3051896Z 
2025-01-22T20:11:05.3052177Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3052946Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3053698Z        't046000', 't048000'],
2025-01-22T20:11:05.3054066Z       dtype='object')
2025-01-22T20:11:05.3054384Z key = 'cups'
2025-01-22T20:11:05.3054554Z 
2025-01-22T20:11:05.3054692Z     def get_loc(self, key):
2025-01-22T20:11:05.3055234Z         """
2025-01-22T20:11:05.3055663Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3056189Z     
2025-01-22T20:11:05.3056457Z         Parameters
2025-01-22T20:11:05.3056755Z         ----------
2025-01-22T20:11:05.3057052Z         key : label
2025-01-22T20:11:05.3057353Z     
2025-01-22T20:11:05.3057523Z         Returns
2025-01-22T20:11:05.3057697Z         -------
2025-01-22T20:11:05.3057947Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3058625Z     
2025-01-22T20:11:05.3058889Z         Examples
2025-01-22T20:11:05.3059186Z         --------
2025-01-22T20:11:05.3059519Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3059964Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3060344Z         1
2025-01-22T20:11:05.3060607Z     
2025-01-22T20:11:05.3060920Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3061381Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3061791Z         slice(1, 3, None)
2025-01-22T20:11:05.3062113Z     
2025-01-22T20:11:05.3062437Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3062911Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3063293Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3063862Z         """
2025-01-22T20:11:05.3064199Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3064626Z         try:
2025-01-22T20:11:05.3064949Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3065272Z 
2025-01-22T20:11:05.3065697Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3066454Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3067020Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3067499Z     ???
2025-01-22T20:11:05.3067866Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3068345Z     ???
2025-01-22T20:11:05.3068877Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3069551Z     ???
2025-01-22T20:11:05.3069888Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3070226Z 
2025-01-22T20:11:05.3070342Z >   ???
2025-01-22T20:11:05.3070614Z E   KeyError: 'cups'
2025-01-22T20:11:05.3070814Z 
2025-01-22T20:11:05.3071032Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3071402Z 
2025-01-22T20:11:05.3071682Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3072122Z 
2025-01-22T20:11:05.3072398Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3073031Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3074201Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3074934Z 
2025-01-22T20:11:05.3075030Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3075427Z     def plasma(
2025-01-22T20:11:05.3075724Z         self,
2025-01-22T20:11:05.3076025Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3076374Z         config,
2025-01-22T20:11:05.3076654Z     ):
2025-01-22T20:11:05.3076992Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3077478Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3077778Z 
2025-01-22T20:11:05.3077993Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3078522Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3079033Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3079673Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3080200Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3080794Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3081273Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3081809Z     return BasePlasma(
2025-01-22T20:11:05.3082153Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3082552Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3082976Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3083685Z     self.update(**kwargs)
2025-01-22T20:11:05.3084058Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3084530Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3085067Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3085563Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3086295Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3087131Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3087904Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3088569Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3089078Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3089719Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3090440Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3091184Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3092072Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3092964Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3093857Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3094491Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3095252Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3096039Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3096796Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3097504Z     return self.apply_standard()
2025-01-22T20:11:05.3098234Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3099071Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3099952Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3100834Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3101543Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3102209Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3102932Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3103805Z     return self._get_value(key)
2025-01-22T20:11:05.3104503Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3105266Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3105729Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3106074Z 
2025-01-22T20:11:05.3106344Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3107108Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3107736Z        't046000', 't048000'],
2025-01-22T20:11:05.3108091Z       dtype='object')
2025-01-22T20:11:05.3108408Z key = 'cups'
2025-01-22T20:11:05.3108585Z 
2025-01-22T20:11:05.3108715Z     def get_loc(self, key):
2025-01-22T20:11:05.3109235Z         """
2025-01-22T20:11:05.3109664Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3110185Z     
2025-01-22T20:11:05.3110452Z         Parameters
2025-01-22T20:11:05.3110755Z         ----------
2025-01-22T20:11:05.3111062Z         key : label
2025-01-22T20:11:05.3111361Z     
2025-01-22T20:11:05.3111620Z         Returns
2025-01-22T20:11:05.3111905Z         -------
2025-01-22T20:11:05.3112293Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3113009Z     
2025-01-22T20:11:05.3113270Z         Examples
2025-01-22T20:11:05.3113703Z         --------
2025-01-22T20:11:05.3114043Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3114486Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3114866Z         1
2025-01-22T20:11:05.3115128Z     
2025-01-22T20:11:05.3115439Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3115896Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3116308Z         slice(1, 3, None)
2025-01-22T20:11:05.3116629Z     
2025-01-22T20:11:05.3116962Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3117443Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3117880Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3118278Z         """
2025-01-22T20:11:05.3118601Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3119028Z         try:
2025-01-22T20:11:05.3119354Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3119805Z         except KeyError as err:
2025-01-22T20:11:05.3120204Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3120668Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3121168Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3121624Z             ):
2025-01-22T20:11:05.3121944Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3122381Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3122802Z E           KeyError: 'cups'
2025-01-22T20:11:05.3123040Z 
2025-01-22T20:11:05.3123655Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3124787Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-w] _
2025-01-22T20:11:05.3125438Z 
2025-01-22T20:11:05.3125706Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3126480Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3127108Z        't046000', 't048000'],
2025-01-22T20:11:05.3127461Z       dtype='object')
2025-01-22T20:11:05.3127775Z key = 'cups'
2025-01-22T20:11:05.3127942Z 
2025-01-22T20:11:05.3128077Z     def get_loc(self, key):
2025-01-22T20:11:05.3128413Z         """
2025-01-22T20:11:05.3128846Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3129306Z     
2025-01-22T20:11:05.3129472Z         Parameters
2025-01-22T20:11:05.3129670Z         ----------
2025-01-22T20:11:05.3129853Z         key : label
2025-01-22T20:11:05.3130026Z     
2025-01-22T20:11:05.3130181Z         Returns
2025-01-22T20:11:05.3130352Z         -------
2025-01-22T20:11:05.3130705Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3130987Z     
2025-01-22T20:11:05.3131148Z         Examples
2025-01-22T20:11:05.3131337Z         --------
2025-01-22T20:11:05.3131542Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3131817Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3132052Z         1
2025-01-22T20:11:05.3132215Z     
2025-01-22T20:11:05.3132410Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3132686Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3132927Z         slice(1, 3, None)
2025-01-22T20:11:05.3133275Z     
2025-01-22T20:11:05.3133475Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3133978Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3134245Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3134480Z         """
2025-01-22T20:11:05.3134675Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3134926Z         try:
2025-01-22T20:11:05.3135127Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3135309Z 
2025-01-22T20:11:05.3135693Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3136141Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3136477Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3136765Z     ???
2025-01-22T20:11:05.3136988Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3137264Z     ???
2025-01-22T20:11:05.3137629Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3138049Z     ???
2025-01-22T20:11:05.3138245Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3138444Z 
2025-01-22T20:11:05.3138508Z >   ???
2025-01-22T20:11:05.3138668Z E   KeyError: 'cups'
2025-01-22T20:11:05.3138793Z 
2025-01-22T20:11:05.3138920Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3139132Z 
2025-01-22T20:11:05.3139305Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3139555Z 
2025-01-22T20:11:05.3139772Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3140398Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3141417Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3142123Z 
2025-01-22T20:11:05.3142216Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3142446Z     def plasma(
2025-01-22T20:11:05.3142622Z         self,
2025-01-22T20:11:05.3142805Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3143014Z         config,
2025-01-22T20:11:05.3143210Z     ):
2025-01-22T20:11:05.3143412Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3143890Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3144099Z 
2025-01-22T20:11:05.3144226Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3144538Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3144896Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3145334Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3145871Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3146431Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3146720Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3146987Z     return BasePlasma(
2025-01-22T20:11:05.3147195Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3147434Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3147687Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3147927Z     self.update(**kwargs)
2025-01-22T20:11:05.3148151Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3148431Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3148744Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3149058Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3149805Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3150557Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3151162Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3151556Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3151862Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3152235Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3152664Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3153089Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3153839Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3154357Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3154789Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3155161Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3155598Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3156267Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3157039Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3157470Z     return self.apply_standard()
2025-01-22T20:11:05.3157897Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3158372Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3158893Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3159411Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3159830Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3160221Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3160651Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3161096Z     return self._get_value(key)
2025-01-22T20:11:05.3161504Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3162239Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3162701Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3163034Z 
2025-01-22T20:11:05.3163202Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3163762Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3164140Z        't046000', 't048000'],
2025-01-22T20:11:05.3164357Z       dtype='object')
2025-01-22T20:11:05.3164552Z key = 'cups'
2025-01-22T20:11:05.3164663Z 
2025-01-22T20:11:05.3164748Z     def get_loc(self, key):
2025-01-22T20:11:05.3164959Z         """
2025-01-22T20:11:05.3165223Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3165526Z     
2025-01-22T20:11:05.3165687Z         Parameters
2025-01-22T20:11:05.3165876Z         ----------
2025-01-22T20:11:05.3166057Z         key : label
2025-01-22T20:11:05.3166233Z     
2025-01-22T20:11:05.3166385Z         Returns
2025-01-22T20:11:05.3166559Z         -------
2025-01-22T20:11:05.3166792Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3167078Z     
2025-01-22T20:11:05.3167242Z         Examples
2025-01-22T20:11:05.3167420Z         --------
2025-01-22T20:11:05.3167625Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3168032Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3168435Z         1
2025-01-22T20:11:05.3168699Z     
2025-01-22T20:11:05.3169011Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3169375Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3169623Z         slice(1, 3, None)
2025-01-22T20:11:05.3169965Z     
2025-01-22T20:11:05.3170167Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3170447Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3170706Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3170938Z         """
2025-01-22T20:11:05.3171135Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3171385Z         try:
2025-01-22T20:11:05.3171583Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3171952Z         except KeyError as err:
2025-01-22T20:11:05.3172195Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3172475Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3172779Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3173047Z             ):
2025-01-22T20:11:05.3173244Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3173659Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3174077Z E           KeyError: 'cups'
2025-01-22T20:11:05.3174332Z 
2025-01-22T20:11:05.3174812Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3175680Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_rad] _
2025-01-22T20:11:05.3176075Z 
2025-01-22T20:11:05.3176238Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3176697Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3177066Z        't046000', 't048000'],
2025-01-22T20:11:05.3177273Z       dtype='object')
2025-01-22T20:11:05.3177461Z key = 'cups'
2025-01-22T20:11:05.3177568Z 
2025-01-22T20:11:05.3177645Z     def get_loc(self, key):
2025-01-22T20:11:05.3177851Z         """
2025-01-22T20:11:05.3178104Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3178416Z     
2025-01-22T20:11:05.3178578Z         Parameters
2025-01-22T20:11:05.3178766Z         ----------
2025-01-22T20:11:05.3178945Z         key : label
2025-01-22T20:11:05.3179124Z     
2025-01-22T20:11:05.3179277Z         Returns
2025-01-22T20:11:05.3179451Z         -------
2025-01-22T20:11:05.3179689Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3180151Z     
2025-01-22T20:11:05.3180411Z         Examples
2025-01-22T20:11:05.3180710Z         --------
2025-01-22T20:11:05.3181020Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3181294Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3181522Z         1
2025-01-22T20:11:05.3181680Z     
2025-01-22T20:11:05.3181872Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3182143Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3182386Z         slice(1, 3, None)
2025-01-22T20:11:05.3182581Z     
2025-01-22T20:11:05.3182783Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3183063Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3183323Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3183752Z         """
2025-01-22T20:11:05.3183970Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3184228Z         try:
2025-01-22T20:11:05.3184426Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3184613Z 
2025-01-22T20:11:05.3184867Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3185318Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3185706Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3186216Z     ???
2025-01-22T20:11:05.3186589Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3187075Z     ???
2025-01-22T20:11:05.3187478Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3188052Z     ???
2025-01-22T20:11:05.3188252Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3188451Z 
2025-01-22T20:11:05.3188516Z >   ???
2025-01-22T20:11:05.3188680Z E   KeyError: 'cups'
2025-01-22T20:11:05.3188805Z 
2025-01-22T20:11:05.3188936Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3189142Z 
2025-01-22T20:11:05.3189314Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3189698Z 
2025-01-22T20:11:05.3189927Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3190555Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3191577Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3192791Z 
2025-01-22T20:11:05.3192941Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3193251Z     def plasma(
2025-01-22T20:11:05.3193433Z         self,
2025-01-22T20:11:05.3193723Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3193936Z         config,
2025-01-22T20:11:05.3194102Z     ):
2025-01-22T20:11:05.3194304Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3194600Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3194777Z 
2025-01-22T20:11:05.3194900Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3195217Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3195558Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3195827Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3196144Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3196497Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3196782Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3197045Z     return BasePlasma(
2025-01-22T20:11:05.3197251Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3197485Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3197734Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3197979Z     self.update(**kwargs)
2025-01-22T20:11:05.3198287Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3198770Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3199308Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3199664Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3200092Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3200579Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3201024Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3201422Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3201724Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3202096Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3202518Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3202942Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3203460Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3204501Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3205207Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3205578Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3206014Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3206625Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3207069Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3207484Z     return self.apply_standard()
2025-01-22T20:11:05.3207912Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3208397Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3209007Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3209518Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3209931Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3210322Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3210997Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3211708Z     return self._get_value(key)
2025-01-22T20:11:05.3212116Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3212582Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3212861Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3213055Z 
2025-01-22T20:11:05.3213218Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3213803Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3214175Z        't046000', 't048000'],
2025-01-22T20:11:05.3214387Z       dtype='object')
2025-01-22T20:11:05.3214583Z key = 'cups'
2025-01-22T20:11:05.3214684Z 
2025-01-22T20:11:05.3214774Z     def get_loc(self, key):
2025-01-22T20:11:05.3214981Z         """
2025-01-22T20:11:05.3215238Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3215549Z     
2025-01-22T20:11:05.3215710Z         Parameters
2025-01-22T20:11:05.3215895Z         ----------
2025-01-22T20:11:05.3216076Z         key : label
2025-01-22T20:11:05.3216252Z     
2025-01-22T20:11:05.3216407Z         Returns
2025-01-22T20:11:05.3216580Z         -------
2025-01-22T20:11:05.3216816Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3217304Z     
2025-01-22T20:11:05.3217567Z         Examples
2025-01-22T20:11:05.3217867Z         --------
2025-01-22T20:11:05.3218170Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3218438Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3218666Z         1
2025-01-22T20:11:05.3218824Z     
2025-01-22T20:11:05.3219015Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3219287Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3219367Z         slice(1, 3, None)
2025-01-22T20:11:05.3219437Z     
2025-01-22T20:11:05.3219554Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3219646Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3219741Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3219813Z         """
2025-01-22T20:11:05.3219913Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3219986Z         try:
2025-01-22T20:11:05.3220086Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3220172Z         except KeyError as err:
2025-01-22T20:11:05.3220273Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3220377Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3220498Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3220573Z             ):
2025-01-22T20:11:05.3220664Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3220755Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3220834Z E           KeyError: 'cups'
2025-01-22T20:11:05.3220976Z 
2025-01-22T20:11:05.3221261Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3221590Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_electron] _
2025-01-22T20:11:05.3221597Z 
2025-01-22T20:11:05.3221755Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3221972Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3222145Z        't046000', 't048000'],
2025-01-22T20:11:05.3222225Z       dtype='object')
2025-01-22T20:11:05.3222296Z key = 'cups'
2025-01-22T20:11:05.3222301Z 
2025-01-22T20:11:05.3222398Z     def get_loc(self, key):
2025-01-22T20:11:05.3222523Z         """
2025-01-22T20:11:05.3222824Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3222947Z     
2025-01-22T20:11:05.3223074Z         Parameters
2025-01-22T20:11:05.3223195Z         ----------
2025-01-22T20:11:05.3223311Z         key : label
2025-01-22T20:11:05.3223426Z     
2025-01-22T20:11:05.3223668Z         Returns
2025-01-22T20:11:05.3223792Z         -------
2025-01-22T20:11:05.3223970Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3224043Z     
2025-01-22T20:11:05.3224112Z         Examples
2025-01-22T20:11:05.3224185Z         --------
2025-01-22T20:11:05.3224284Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3224384Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3224451Z         1
2025-01-22T20:11:05.3224521Z     
2025-01-22T20:11:05.3224624Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3224718Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3224793Z         slice(1, 3, None)
2025-01-22T20:11:05.3224864Z     
2025-01-22T20:11:05.3224976Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3225076Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3225174Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3225242Z         """
2025-01-22T20:11:05.3225349Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3225418Z         try:
2025-01-22T20:11:05.3225522Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3225527Z 
2025-01-22T20:11:05.3225778Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3225900Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3226041Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3226115Z     ???
2025-01-22T20:11:05.3226246Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3226316Z     ???
2025-01-22T20:11:05.3226588Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3226665Z     ???
2025-01-22T20:11:05.3226777Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3226780Z 
2025-01-22T20:11:05.3226846Z >   ???
2025-01-22T20:11:05.3226928Z E   KeyError: 'cups'
2025-01-22T20:11:05.3226933Z 
2025-01-22T20:11:05.3227059Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3227063Z 
2025-01-22T20:11:05.3227235Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3227244Z 
2025-01-22T20:11:05.3227461Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3227779Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3228407Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3228545Z 
2025-01-22T20:11:05.3228639Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3228719Z     def plasma(
2025-01-22T20:11:05.3228785Z         self,
2025-01-22T20:11:05.3228895Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3229019Z         config,
2025-01-22T20:11:05.3229139Z     ):
2025-01-22T20:11:05.3229326Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3229490Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3229641Z 
2025-01-22T20:11:05.3229844Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3230037Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3230159Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3230245Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3230418Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3230524Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3230637Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3230714Z     return BasePlasma(
2025-01-22T20:11:05.3230806Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3230891Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3230984Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3231063Z     self.update(**kwargs)
2025-01-22T20:11:05.3231157Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3231277Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3231397Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3231500Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3231751Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3231907Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3232114Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3232218Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3232345Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3232518Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3232688Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3232871Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3251401Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3251667Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3251875Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3252000Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3252278Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3252430Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3252704Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3252800Z     return self.apply_standard()
2025-01-22T20:11:05.3253119Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3253352Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3254013Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3254231Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3254616Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3254760Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3255204Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3255500Z     return self._get_value(key)
2025-01-22T20:11:05.3255771Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3255865Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3255981Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3255986Z 
2025-01-22T20:11:05.3256152Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3256364Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3256556Z        't046000', 't048000'],
2025-01-22T20:11:05.3256636Z       dtype='object')
2025-01-22T20:11:05.3256716Z key = 'cups'
2025-01-22T20:11:05.3256721Z 
2025-01-22T20:11:05.3256809Z     def get_loc(self, key):
2025-01-22T20:11:05.3256881Z         """
2025-01-22T20:11:05.3257051Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3257126Z     
2025-01-22T20:11:05.3257227Z         Parameters
2025-01-22T20:11:05.3257374Z         ----------
2025-01-22T20:11:05.3257505Z         key : label
2025-01-22T20:11:05.3257628Z     
2025-01-22T20:11:05.3257747Z         Returns
2025-01-22T20:11:05.3257873Z         -------
2025-01-22T20:11:05.3258098Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3258213Z     
2025-01-22T20:11:05.3258332Z         Examples
2025-01-22T20:11:05.3258449Z         --------
2025-01-22T20:11:05.3258633Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3258728Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3258803Z         1
2025-01-22T20:11:05.3258870Z     
2025-01-22T20:11:05.3258982Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3259071Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3259154Z         slice(1, 3, None)
2025-01-22T20:11:05.3259222Z     
2025-01-22T20:11:05.3259337Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3259434Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3259529Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3259601Z         """
2025-01-22T20:11:05.3259708Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3259777Z         try:
2025-01-22T20:11:05.3259882Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3259969Z         except KeyError as err:
2025-01-22T20:11:05.3260068Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3260178Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3260304Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3260378Z             ):
2025-01-22T20:11:05.3260470Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3260564Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3260644Z E           KeyError: 'cups'
2025-01-22T20:11:05.3260654Z 
2025-01-22T20:11:05.3260932Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3261277Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_boltzmann_factor] _
2025-01-22T20:11:05.3261283Z 
2025-01-22T20:11:05.3261443Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3261656Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3261734Z        't046000', 't048000'],
2025-01-22T20:11:05.3261811Z       dtype='object')
2025-01-22T20:11:05.3261883Z key = 'cups'
2025-01-22T20:11:05.3261887Z 
2025-01-22T20:11:05.3261973Z     def get_loc(self, key):
2025-01-22T20:11:05.3262040Z         """
2025-01-22T20:11:05.3262205Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3262272Z     
2025-01-22T20:11:05.3262450Z         Parameters
2025-01-22T20:11:05.3262523Z         ----------
2025-01-22T20:11:05.3262603Z         key : label
2025-01-22T20:11:05.3262668Z     
2025-01-22T20:11:05.3262743Z         Returns
2025-01-22T20:11:05.3262814Z         -------
2025-01-22T20:11:05.3262950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3263022Z     
2025-01-22T20:11:05.3263092Z         Examples
2025-01-22T20:11:05.3263169Z         --------
2025-01-22T20:11:05.3263292Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3263706Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3263830Z         1
2025-01-22T20:11:05.3263953Z     
2025-01-22T20:11:05.3264129Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3264280Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3264405Z         slice(1, 3, None)
2025-01-22T20:11:05.3264521Z     
2025-01-22T20:11:05.3264702Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3264859Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3264961Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3265036Z         """
2025-01-22T20:11:05.3265141Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3265214Z         try:
2025-01-22T20:11:05.3265313Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3265323Z 
2025-01-22T20:11:05.3265581Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3265709Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3265846Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3265917Z     ???
2025-01-22T20:11:05.3266044Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3266113Z     ???
2025-01-22T20:11:05.3266391Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3266468Z     ???
2025-01-22T20:11:05.3266580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3266584Z 
2025-01-22T20:11:05.3266658Z >   ???
2025-01-22T20:11:05.3266734Z E   KeyError: 'cups'
2025-01-22T20:11:05.3266744Z 
2025-01-22T20:11:05.3266883Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3266887Z 
2025-01-22T20:11:05.3267060Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3267065Z 
2025-01-22T20:11:05.3267294Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3267628Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3268260Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3268276Z 
2025-01-22T20:11:05.3268367Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3268444Z     def plasma(
2025-01-22T20:11:05.3268510Z         self,
2025-01-22T20:11:05.3268593Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3268659Z         config,
2025-01-22T20:11:05.3268732Z     ):
2025-01-22T20:11:05.3268850Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3268952Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3268961Z 
2025-01-22T20:11:05.3269086Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3269203Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3269308Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3269397Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3269655Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3269845Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3270227Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3270360Z     return BasePlasma(
2025-01-22T20:11:05.3270508Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3270650Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3270802Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3270928Z     self.update(**kwargs)
2025-01-22T20:11:05.3271020Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3271150Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3271387Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3271491Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3271747Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3271900Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3272114Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3272221Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3272352Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3272527Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3272700Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3272878Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3273136Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3273318Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3273635Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3273750Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3274011Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3274141Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3274394Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3274481Z     return self.apply_standard()
2025-01-22T20:11:05.3274768Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3274890Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3275202Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3275329Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3275554Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3275673Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3276176Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3276321Z     return self._get_value(key)
2025-01-22T20:11:05.3276784Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3276934Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3277130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3277136Z 
2025-01-22T20:11:05.3277304Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3277514Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3277597Z        't046000', 't048000'],
2025-01-22T20:11:05.3277673Z       dtype='object')
2025-01-22T20:11:05.3277748Z key = 'cups'
2025-01-22T20:11:05.3277753Z 
2025-01-22T20:11:05.3277830Z     def get_loc(self, key):
2025-01-22T20:11:05.3277900Z         """
2025-01-22T20:11:05.3278059Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3278270Z     
2025-01-22T20:11:05.3278348Z         Parameters
2025-01-22T20:11:05.3278424Z         ----------
2025-01-22T20:11:05.3278501Z         key : label
2025-01-22T20:11:05.3278568Z     
2025-01-22T20:11:05.3278642Z         Returns
2025-01-22T20:11:05.3278715Z         -------
2025-01-22T20:11:05.3278858Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3278924Z     
2025-01-22T20:11:05.3279000Z         Examples
2025-01-22T20:11:05.3279071Z         --------
2025-01-22T20:11:05.3279175Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3279367Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3279440Z         1
2025-01-22T20:11:05.3279507Z     
2025-01-22T20:11:05.3279617Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3279705Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3279785Z         slice(1, 3, None)
2025-01-22T20:11:05.3279851Z     
2025-01-22T20:11:05.3279968Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3280070Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3280161Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3280234Z         """
2025-01-22T20:11:05.3280336Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3280410Z         try:
2025-01-22T20:11:05.3280511Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3280597Z         except KeyError as err:
2025-01-22T20:11:05.3280692Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3280801Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3280920Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3280990Z             ):
2025-01-22T20:11:05.3281083Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3281174Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3281255Z E           KeyError: 'cups'
2025-01-22T20:11:05.3281265Z 
2025-01-22T20:11:05.3281558Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3282175Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-partition_function] _
2025-01-22T20:11:05.3282186Z 
2025-01-22T20:11:05.3282452Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3282816Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3282955Z        't046000', 't048000'],
2025-01-22T20:11:05.3283043Z       dtype='object')
2025-01-22T20:11:05.3283117Z key = 'cups'
2025-01-22T20:11:05.3283121Z 
2025-01-22T20:11:05.3283204Z     def get_loc(self, key):
2025-01-22T20:11:05.3283271Z         """
2025-01-22T20:11:05.3283440Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3283606Z     
2025-01-22T20:11:05.3283681Z         Parameters
2025-01-22T20:11:05.3283763Z         ----------
2025-01-22T20:11:05.3283834Z         key : label
2025-01-22T20:11:05.3283900Z     
2025-01-22T20:11:05.3283967Z         Returns
2025-01-22T20:11:05.3284036Z         -------
2025-01-22T20:11:05.3284168Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3284241Z     
2025-01-22T20:11:05.3284312Z         Examples
2025-01-22T20:11:05.3284387Z         --------
2025-01-22T20:11:05.3284485Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3284573Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3284654Z         1
2025-01-22T20:11:05.3284718Z     
2025-01-22T20:11:05.3284823Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3284909Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3284989Z         slice(1, 3, None)
2025-01-22T20:11:05.3285055Z     
2025-01-22T20:11:05.3285167Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3285257Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3285507Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3285578Z         """
2025-01-22T20:11:05.3285678Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3285751Z         try:
2025-01-22T20:11:05.3285849Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3285853Z 
2025-01-22T20:11:05.3286108Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3286220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3286466Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3286533Z     ???
2025-01-22T20:11:05.3286666Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3286733Z     ???
2025-01-22T20:11:05.3287008Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3287078Z     ???
2025-01-22T20:11:05.3287191Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3287196Z 
2025-01-22T20:11:05.3287264Z >   ???
2025-01-22T20:11:05.3287340Z E   KeyError: 'cups'
2025-01-22T20:11:05.3287345Z 
2025-01-22T20:11:05.3287472Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3287477Z 
2025-01-22T20:11:05.3287705Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3287713Z 
2025-01-22T20:11:05.3288119Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3288673Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3289381Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3289393Z 
2025-01-22T20:11:05.3289486Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3289558Z     def plasma(
2025-01-22T20:11:05.3289627Z         self,
2025-01-22T20:11:05.3289705Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3289779Z         config,
2025-01-22T20:11:05.3289845Z     ):
2025-01-22T20:11:05.3289961Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3290053Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3290058Z 
2025-01-22T20:11:05.3290185Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3290291Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3290397Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3290485Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3290653Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3290755Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3290868Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3290950Z     return BasePlasma(
2025-01-22T20:11:05.3291034Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3291124Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3291212Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3291294Z     self.update(**kwargs)
2025-01-22T20:11:05.3291382Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3291507Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3291617Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3291725Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3291975Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3292127Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3292337Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3292432Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3292657Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3292824Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3292996Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3293166Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3293815Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3294325Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3294647Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3294831Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3295102Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3295231Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3295480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3295571Z     return self.apply_standard()
2025-01-22T20:11:05.3295851Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3295977Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3296284Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3296416Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3296631Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3296721Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3296987Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3297069Z     return self._get_value(key)
2025-01-22T20:11:05.3297331Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3297416Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3297533Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3297538Z 
2025-01-22T20:11:05.3297695Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3297911Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3297989Z        't046000', 't048000'],
2025-01-22T20:11:05.3298069Z       dtype='object')
2025-01-22T20:11:05.3298144Z key = 'cups'
2025-01-22T20:11:05.3298149Z 
2025-01-22T20:11:05.3298227Z     def get_loc(self, key):
2025-01-22T20:11:05.3298298Z         """
2025-01-22T20:11:05.3298456Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3298527Z     
2025-01-22T20:11:05.3298601Z         Parameters
2025-01-22T20:11:05.3298681Z         ----------
2025-01-22T20:11:05.3298752Z         key : label
2025-01-22T20:11:05.3298822Z     
2025-01-22T20:11:05.3298889Z         Returns
2025-01-22T20:11:05.3298961Z         -------
2025-01-22T20:11:05.3299093Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3299159Z     
2025-01-22T20:11:05.3299228Z         Examples
2025-01-22T20:11:05.3299300Z         --------
2025-01-22T20:11:05.3299395Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3299494Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3299567Z         1
2025-01-22T20:11:05.3299634Z     
2025-01-22T20:11:05.3299742Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3299870Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3300013Z         slice(1, 3, None)
2025-01-22T20:11:05.3300129Z     
2025-01-22T20:11:05.3300316Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3300629Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3300783Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3300896Z         """
2025-01-22T20:11:05.3301058Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3301129Z         try:
2025-01-22T20:11:05.3301237Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3301319Z         except KeyError as err:
2025-01-22T20:11:05.3301421Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3301521Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3301732Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3301805Z             ):
2025-01-22T20:11:05.3301896Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3301985Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3302065Z E           KeyError: 'cups'
2025-01-22T20:11:05.3302070Z 
2025-01-22T20:11:05.3302343Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3302679Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-excitation_energy] _
2025-01-22T20:11:05.3302685Z 
2025-01-22T20:11:05.3302843Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3303050Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3303126Z        't046000', 't048000'],
2025-01-22T20:11:05.3303207Z       dtype='object')
2025-01-22T20:11:05.3303277Z key = 'cups'
2025-01-22T20:11:05.3303282Z 
2025-01-22T20:11:05.3303361Z     def get_loc(self, key):
2025-01-22T20:11:05.3303428Z         """
2025-01-22T20:11:05.3303727Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3303798Z     
2025-01-22T20:11:05.3303874Z         Parameters
2025-01-22T20:11:05.3303945Z         ----------
2025-01-22T20:11:05.3304023Z         key : label
2025-01-22T20:11:05.3304088Z     
2025-01-22T20:11:05.3304159Z         Returns
2025-01-22T20:11:05.3304227Z         -------
2025-01-22T20:11:05.3304359Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3304425Z     
2025-01-22T20:11:05.3304498Z         Examples
2025-01-22T20:11:05.3304568Z         --------
2025-01-22T20:11:05.3304667Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3304751Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3304827Z         1
2025-01-22T20:11:05.3304897Z     
2025-01-22T20:11:05.3304996Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3305086Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3305161Z         slice(1, 3, None)
2025-01-22T20:11:05.3305226Z     
2025-01-22T20:11:05.3305333Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3305425Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3305520Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3305622Z         """
2025-01-22T20:11:05.3305806Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3305936Z         try:
2025-01-22T20:11:05.3306107Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3306114Z 
2025-01-22T20:11:05.3306535Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3306718Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3306963Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3307056Z     ???
2025-01-22T20:11:05.3307192Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3307263Z     ???
2025-01-22T20:11:05.3307534Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3307604Z     ???
2025-01-22T20:11:05.3307710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3307844Z 
2025-01-22T20:11:05.3307917Z >   ???
2025-01-22T20:11:05.3307993Z E   KeyError: 'cups'
2025-01-22T20:11:05.3307998Z 
2025-01-22T20:11:05.3308128Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3308133Z 
2025-01-22T20:11:05.3308300Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3308308Z 
2025-01-22T20:11:05.3308528Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3308973Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3309598Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3309611Z 
2025-01-22T20:11:05.3309705Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3309776Z     def plasma(
2025-01-22T20:11:05.3309846Z         self,
2025-01-22T20:11:05.3309926Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3309999Z         config,
2025-01-22T20:11:05.3310069Z     ):
2025-01-22T20:11:05.3310186Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3310284Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3310288Z 
2025-01-22T20:11:05.3310412Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3310530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3310635Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3310724Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3310889Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3310989Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3311098Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3311183Z     return BasePlasma(
2025-01-22T20:11:05.3311266Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3311353Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3311520Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3311662Z     self.update(**kwargs)
2025-01-22T20:11:05.3311821Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3312021Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3312208Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3312384Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3312789Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3312945Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3313158Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3313253Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3313389Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3313682Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3313857Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3314032Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3314294Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3314473Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3314659Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3314768Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3315027Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3315154Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3315396Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3315619Z     return self.apply_standard()
2025-01-22T20:11:05.3315898Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3316021Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3316329Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3316447Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3316771Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3316857Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3317125Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3317208Z     return self._get_value(key)
2025-01-22T20:11:05.3317621Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3317785Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3317981Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3317989Z 
2025-01-22T20:11:05.3318257Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3318618Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3318767Z        't046000', 't048000'],
2025-01-22T20:11:05.3318849Z       dtype='object')
2025-01-22T20:11:05.3318924Z key = 'cups'
2025-01-22T20:11:05.3318929Z 
2025-01-22T20:11:05.3319010Z     def get_loc(self, key):
2025-01-22T20:11:05.3319082Z         """
2025-01-22T20:11:05.3319246Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3319315Z     
2025-01-22T20:11:05.3319386Z         Parameters
2025-01-22T20:11:05.3319465Z         ----------
2025-01-22T20:11:05.3319536Z         key : label
2025-01-22T20:11:05.3319603Z     
2025-01-22T20:11:05.3319670Z         Returns
2025-01-22T20:11:05.3319741Z         -------
2025-01-22T20:11:05.3319878Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3319944Z     
2025-01-22T20:11:05.3320017Z         Examples
2025-01-22T20:11:05.3320086Z         --------
2025-01-22T20:11:05.3320188Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3320274Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3320347Z         1
2025-01-22T20:11:05.3320412Z     
2025-01-22T20:11:05.3320518Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3320604Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3320683Z         slice(1, 3, None)
2025-01-22T20:11:05.3320749Z     
2025-01-22T20:11:05.3320862Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3320951Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3321050Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3321117Z         """
2025-01-22T20:11:05.3321220Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3321292Z         try:
2025-01-22T20:11:05.3321389Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3321475Z         except KeyError as err:
2025-01-22T20:11:05.3321572Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3321676Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3321797Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3321867Z             ):
2025-01-22T20:11:05.3321959Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3322049Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3322129Z E           KeyError: 'cups'
2025-01-22T20:11:05.3322134Z 
2025-01-22T20:11:05.3322410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3322813Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] _
2025-01-22T20:11:05.3322823Z 
2025-01-22T20:11:05.3322979Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3323191Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3323302Z        't046000', 't048000'],
2025-01-22T20:11:05.3323672Z       dtype='object')
2025-01-22T20:11:05.3323802Z key = 'cups'
2025-01-22T20:11:05.3323810Z 
2025-01-22T20:11:05.3323950Z     def get_loc(self, key):
2025-01-22T20:11:05.3324061Z         """
2025-01-22T20:11:05.3324336Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3324445Z     
2025-01-22T20:11:05.3324568Z         Parameters
2025-01-22T20:11:05.3324696Z         ----------
2025-01-22T20:11:05.3324781Z         key : label
2025-01-22T20:11:05.3324853Z     
2025-01-22T20:11:05.3324926Z         Returns
2025-01-22T20:11:05.3324999Z         -------
2025-01-22T20:11:05.3325131Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3325198Z     
2025-01-22T20:11:05.3325267Z         Examples
2025-01-22T20:11:05.3325342Z         --------
2025-01-22T20:11:05.3325441Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3325528Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3325597Z         1
2025-01-22T20:11:05.3325670Z     
2025-01-22T20:11:05.3325771Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3325860Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3325934Z         slice(1, 3, None)
2025-01-22T20:11:05.3326003Z     
2025-01-22T20:11:05.3326110Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3326202Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3326291Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3326366Z         """
2025-01-22T20:11:05.3326470Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3326543Z         try:
2025-01-22T20:11:05.3326645Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3326649Z 
2025-01-22T20:11:05.3326900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3327015Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3327157Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3327227Z     ???
2025-01-22T20:11:05.3327356Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3327425Z     ???
2025-01-22T20:11:05.3327695Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3327765Z     ???
2025-01-22T20:11:05.3327872Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3327891Z 
2025-01-22T20:11:05.3327958Z >   ???
2025-01-22T20:11:05.3328038Z E   KeyError: 'cups'
2025-01-22T20:11:05.3328043Z 
2025-01-22T20:11:05.3328169Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3328174Z 
2025-01-22T20:11:05.3328347Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3328352Z 
2025-01-22T20:11:05.3328573Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3329118Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3330069Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3330080Z 
2025-01-22T20:11:05.3330167Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3330382Z     def plasma(
2025-01-22T20:11:05.3330451Z         self,
2025-01-22T20:11:05.3330535Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3330603Z         config,
2025-01-22T20:11:05.3330676Z     ):
2025-01-22T20:11:05.3330791Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3330892Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3330897Z 
2025-01-22T20:11:05.3331020Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3331137Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3331347Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3331436Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3331611Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3331710Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3331824Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3331908Z     return BasePlasma(
2025-01-22T20:11:05.3331997Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3332083Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3332175Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3332255Z     self.update(**kwargs)
2025-01-22T20:11:05.3332348Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3332469Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3332586Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3332687Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3332945Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3333097Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3333309Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3333411Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3333672Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3333856Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3334027Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3334207Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3334648Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3334955Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3335270Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3335441Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3335706Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3335839Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3336085Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3336177Z     return self.apply_standard()
2025-01-22T20:11:05.3336459Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3336579Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3336895Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3337013Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3337238Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3337324Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3337592Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3337681Z     return self._get_value(key)
2025-01-22T20:11:05.3337939Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3338160Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3338272Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3338277Z 
2025-01-22T20:11:05.3338559Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3338923Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3339052Z        't046000', 't048000'],
2025-01-22T20:11:05.3339355Z       dtype='object')
2025-01-22T20:11:05.3339469Z key = 'cups'
2025-01-22T20:11:05.3339475Z 
2025-01-22T20:11:05.3339559Z     def get_loc(self, key):
2025-01-22T20:11:05.3339626Z         """
2025-01-22T20:11:05.3339790Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3339858Z     
2025-01-22T20:11:05.3339933Z         Parameters
2025-01-22T20:11:05.3340004Z         ----------
2025-01-22T20:11:05.3340087Z         key : label
2025-01-22T20:11:05.3340153Z     
2025-01-22T20:11:05.3340223Z         Returns
2025-01-22T20:11:05.3340292Z         -------
2025-01-22T20:11:05.3340428Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3340494Z     
2025-01-22T20:11:05.3340569Z         Examples
2025-01-22T20:11:05.3340638Z         --------
2025-01-22T20:11:05.3340742Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3340826Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3340901Z         1
2025-01-22T20:11:05.3340972Z     
2025-01-22T20:11:05.3341080Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3341169Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3341312Z         slice(1, 3, None)
2025-01-22T20:11:05.3341438Z     
2025-01-22T20:11:05.3341628Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3341784Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3341932Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3342053Z         """
2025-01-22T20:11:05.3342218Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3342335Z         try:
2025-01-22T20:11:05.3342474Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3342561Z         except KeyError as err:
2025-01-22T20:11:05.3342656Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3342761Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3342881Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3342955Z             ):
2025-01-22T20:11:05.3343044Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3343133Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3343217Z E           KeyError: 'cups'
2025-01-22T20:11:05.3343221Z 
2025-01-22T20:11:05.3343584Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3344054Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] _
2025-01-22T20:11:05.3344061Z 
2025-01-22T20:11:05.3344223Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3344436Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3344514Z        't046000', 't048000'],
2025-01-22T20:11:05.3344592Z       dtype='object')
2025-01-22T20:11:05.3344669Z key = 'cups'
2025-01-22T20:11:05.3344677Z 
2025-01-22T20:11:05.3344755Z     def get_loc(self, key):
2025-01-22T20:11:05.3344828Z         """
2025-01-22T20:11:05.3344985Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3345056Z     
2025-01-22T20:11:05.3345131Z         Parameters
2025-01-22T20:11:05.3345206Z         ----------
2025-01-22T20:11:05.3345278Z         key : label
2025-01-22T20:11:05.3345350Z     
2025-01-22T20:11:05.3345553Z         Returns
2025-01-22T20:11:05.3345629Z         -------
2025-01-22T20:11:05.3345763Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3345834Z     
2025-01-22T20:11:05.3345903Z         Examples
2025-01-22T20:11:05.3345978Z         --------
2025-01-22T20:11:05.3346077Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3346167Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3346234Z         1
2025-01-22T20:11:05.3346307Z     
2025-01-22T20:11:05.3346516Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3346606Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3346680Z         slice(1, 3, None)
2025-01-22T20:11:05.3346746Z     
2025-01-22T20:11:05.3346854Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3346943Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3347043Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3347185Z         """
2025-01-22T20:11:05.3347373Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3347493Z         try:
2025-01-22T20:11:05.3347662Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3347669Z 
2025-01-22T20:11:05.3348087Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3348281Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3348426Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3348506Z     ???
2025-01-22T20:11:05.3348642Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3348708Z     ???
2025-01-22T20:11:05.3348983Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3349048Z     ???
2025-01-22T20:11:05.3349160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3349169Z 
2025-01-22T20:11:05.3349235Z >   ???
2025-01-22T20:11:05.3349315Z E   KeyError: 'cups'
2025-01-22T20:11:05.3349319Z 
2025-01-22T20:11:05.3349444Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3349448Z 
2025-01-22T20:11:05.3349622Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3349627Z 
2025-01-22T20:11:05.3349851Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3350172Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3350801Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3350807Z 
2025-01-22T20:11:05.3350892Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3350977Z     def plasma(
2025-01-22T20:11:05.3351043Z         self,
2025-01-22T20:11:05.3351128Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3351197Z         config,
2025-01-22T20:11:05.3351269Z     ):
2025-01-22T20:11:05.3351380Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3351479Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3351484Z 
2025-01-22T20:11:05.3351610Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3351717Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3351832Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3351913Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3352084Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3352182Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3352350Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3352491Z     return BasePlasma(
2025-01-22T20:11:05.3352767Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3352909Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3353061Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3353192Z     self.update(**kwargs)
2025-01-22T20:11:05.3353343Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3353645Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3353762Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3353871Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3354246Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3354399Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3354606Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3354708Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3354834Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3355012Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3355182Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3355367Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3355626Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3355798Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3355983Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3356091Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3356351Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3356475Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3356718Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3356809Z     return self.apply_standard()
2025-01-22T20:11:05.3357087Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3357209Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3357517Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3357640Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3357857Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3357990Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3358474Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3358620Z     return self._get_value(key)
2025-01-22T20:11:05.3359064Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3359210Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3359323Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3359327Z 
2025-01-22T20:11:05.3359490Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3359706Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3359781Z        't046000', 't048000'],
2025-01-22T20:11:05.3359860Z       dtype='object')
2025-01-22T20:11:05.3359935Z key = 'cups'
2025-01-22T20:11:05.3359940Z 
2025-01-22T20:11:05.3360024Z     def get_loc(self, key):
2025-01-22T20:11:05.3360091Z         """
2025-01-22T20:11:05.3360255Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3360322Z     
2025-01-22T20:11:05.3360399Z         Parameters
2025-01-22T20:11:05.3360470Z         ----------
2025-01-22T20:11:05.3360544Z         key : label
2025-01-22T20:11:05.3360735Z     
2025-01-22T20:11:05.3360808Z         Returns
2025-01-22T20:11:05.3360876Z         -------
2025-01-22T20:11:05.3361011Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3361075Z     
2025-01-22T20:11:05.3361147Z         Examples
2025-01-22T20:11:05.3361219Z         --------
2025-01-22T20:11:05.3361315Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3361401Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3361468Z         1
2025-01-22T20:11:05.3361536Z     
2025-01-22T20:11:05.3361719Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3361809Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3361883Z         slice(1, 3, None)
2025-01-22T20:11:05.3361953Z     
2025-01-22T20:11:05.3362059Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3362154Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3362242Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3362319Z         """
2025-01-22T20:11:05.3362420Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3362493Z         try:
2025-01-22T20:11:05.3362591Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3362676Z         except KeyError as err:
2025-01-22T20:11:05.3362776Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3362874Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3362996Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3363068Z             ):
2025-01-22T20:11:05.3363160Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3363246Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3363359Z E           KeyError: 'cups'
2025-01-22T20:11:05.3363367Z 
2025-01-22T20:11:05.3363980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3364590Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] _
2025-01-22T20:11:05.3364609Z 
2025-01-22T20:11:05.3364802Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3365029Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3365106Z        't046000', 't048000'],
2025-01-22T20:11:05.3365180Z       dtype='object')
2025-01-22T20:11:05.3365255Z key = 'cups'
2025-01-22T20:11:05.3365265Z 
2025-01-22T20:11:05.3365342Z     def get_loc(self, key):
2025-01-22T20:11:05.3365415Z         """
2025-01-22T20:11:05.3365575Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3365646Z     
2025-01-22T20:11:05.3365717Z         Parameters
2025-01-22T20:11:05.3365793Z         ----------
2025-01-22T20:11:05.3365863Z         key : label
2025-01-22T20:11:05.3365933Z     
2025-01-22T20:11:05.3366004Z         Returns
2025-01-22T20:11:05.3366075Z         -------
2025-01-22T20:11:05.3366203Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3366275Z     
2025-01-22T20:11:05.3366343Z         Examples
2025-01-22T20:11:05.3366412Z         --------
2025-01-22T20:11:05.3366519Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3366604Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3366677Z         1
2025-01-22T20:11:05.3366743Z     
2025-01-22T20:11:05.3366851Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3366942Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3367022Z         slice(1, 3, None)
2025-01-22T20:11:05.3367094Z     
2025-01-22T20:11:05.3367205Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3367295Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3367385Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3367453Z         """
2025-01-22T20:11:05.3367707Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3370569Z         try:
2025-01-22T20:11:05.3370691Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3370697Z 
2025-01-22T20:11:05.3370974Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3371091Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3371239Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3371441Z     ???
2025-01-22T20:11:05.3371583Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3371650Z     ???
2025-01-22T20:11:05.3371934Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3371999Z     ???
2025-01-22T20:11:05.3372113Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3372117Z 
2025-01-22T20:11:05.3372191Z >   ???
2025-01-22T20:11:05.3372267Z E   KeyError: 'cups'
2025-01-22T20:11:05.3372271Z 
2025-01-22T20:11:05.3372406Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3372410Z 
2025-01-22T20:11:05.3372578Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3372582Z 
2025-01-22T20:11:05.3372809Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3373133Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3374007Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3374016Z 
2025-01-22T20:11:05.3374113Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3374185Z     def plasma(
2025-01-22T20:11:05.3374273Z         self,
2025-01-22T20:11:05.3374355Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3374430Z         config,
2025-01-22T20:11:05.3374497Z     ):
2025-01-22T20:11:05.3374618Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3374714Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3374719Z 
2025-01-22T20:11:05.3374848Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3374960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3375126Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3375291Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3375596Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3375758Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3375949Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3376082Z     return BasePlasma(
2025-01-22T20:11:05.3376219Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3376382Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3376485Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3376570Z     self.update(**kwargs)
2025-01-22T20:11:05.3376662Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3376791Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3376900Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3377007Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3377258Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3377417Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3377624Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3377723Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3377856Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3378024Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3378335Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3378509Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3378774Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3378950Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3379138Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3379349Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3379612Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3379739Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3379986Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3380086Z     return self.apply_standard()
2025-01-22T20:11:05.3380362Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3380489Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3380944Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3381153Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3381524Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3381679Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3382035Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3382126Z     return self._get_value(key)
2025-01-22T20:11:05.3382387Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3382472Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3382596Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3382600Z 
2025-01-22T20:11:05.3382755Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3382968Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3383045Z        't046000', 't048000'],
2025-01-22T20:11:05.3383123Z       dtype='object')
2025-01-22T20:11:05.3383201Z key = 'cups'
2025-01-22T20:11:05.3383205Z 
2025-01-22T20:11:05.3383289Z     def get_loc(self, key):
2025-01-22T20:11:05.3383356Z         """
2025-01-22T20:11:05.3383655Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3383727Z     
2025-01-22T20:11:05.3383800Z         Parameters
2025-01-22T20:11:05.3383875Z         ----------
2025-01-22T20:11:05.3383946Z         key : label
2025-01-22T20:11:05.3384014Z     
2025-01-22T20:11:05.3384087Z         Returns
2025-01-22T20:11:05.3384159Z         -------
2025-01-22T20:11:05.3384291Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3384362Z     
2025-01-22T20:11:05.3384431Z         Examples
2025-01-22T20:11:05.3384505Z         --------
2025-01-22T20:11:05.3384603Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3384692Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3384759Z         1
2025-01-22T20:11:05.3384838Z     
2025-01-22T20:11:05.3384940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3385037Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3385109Z         slice(1, 3, None)
2025-01-22T20:11:05.3385175Z     
2025-01-22T20:11:05.3385279Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3385374Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3385467Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3385533Z         """
2025-01-22T20:11:05.3385793Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3385862Z         try:
2025-01-22T20:11:05.3385964Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3386048Z         except KeyError as err:
2025-01-22T20:11:05.3386148Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3386247Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3386373Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3386607Z             ):
2025-01-22T20:11:05.3386783Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3386932Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3387068Z E           KeyError: 'cups'
2025-01-22T20:11:05.3387075Z 
2025-01-22T20:11:05.3387539Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3387950Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-atomic_mass] _
2025-01-22T20:11:05.3387963Z 
2025-01-22T20:11:05.3388124Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3388330Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3388408Z        't046000', 't048000'],
2025-01-22T20:11:05.3388482Z       dtype='object')
2025-01-22T20:11:05.3388556Z key = 'cups'
2025-01-22T20:11:05.3388560Z 
2025-01-22T20:11:05.3388644Z     def get_loc(self, key):
2025-01-22T20:11:05.3388718Z         """
2025-01-22T20:11:05.3388875Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3388946Z     
2025-01-22T20:11:05.3389023Z         Parameters
2025-01-22T20:11:05.3389094Z         ----------
2025-01-22T20:11:05.3389169Z         key : label
2025-01-22T20:11:05.3389236Z     
2025-01-22T20:11:05.3389308Z         Returns
2025-01-22T20:11:05.3389381Z         -------
2025-01-22T20:11:05.3389514Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3389578Z     
2025-01-22T20:11:05.3389650Z         Examples
2025-01-22T20:11:05.3389717Z         --------
2025-01-22T20:11:05.3389816Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3389900Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3389973Z         1
2025-01-22T20:11:05.3390039Z     
2025-01-22T20:11:05.3390143Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3390233Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3390312Z         slice(1, 3, None)
2025-01-22T20:11:05.3390379Z     
2025-01-22T20:11:05.3390490Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3390583Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3390674Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3390745Z         """
2025-01-22T20:11:05.3390846Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3390918Z         try:
2025-01-22T20:11:05.3391016Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3391021Z 
2025-01-22T20:11:05.3391269Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3391377Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3391520Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3391586Z     ???
2025-01-22T20:11:05.3391726Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3391794Z     ???
2025-01-22T20:11:05.3392156Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3392286Z     ???
2025-01-22T20:11:05.3392467Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3392474Z 
2025-01-22T20:11:05.3392587Z >   ???
2025-01-22T20:11:05.3392828Z E   KeyError: 'cups'
2025-01-22T20:11:05.3392836Z 
2025-01-22T20:11:05.3393052Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3393059Z 
2025-01-22T20:11:05.3393286Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3393292Z 
2025-01-22T20:11:05.3393753Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3394079Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3394838Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3394844Z 
2025-01-22T20:11:05.3394938Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3395011Z     def plasma(
2025-01-22T20:11:05.3395084Z         self,
2025-01-22T20:11:05.3395170Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3395239Z         config,
2025-01-22T20:11:05.3395304Z     ):
2025-01-22T20:11:05.3395415Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3395508Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3395512Z 
2025-01-22T20:11:05.3395636Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3395745Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3395848Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3395940Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3396106Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3396209Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3396320Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3396401Z     return BasePlasma(
2025-01-22T20:11:05.3396485Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3396581Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3396668Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3396752Z     self.update(**kwargs)
2025-01-22T20:11:05.3396843Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3396964Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3397074Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3397178Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3397425Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3397582Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3397793Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3397968Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3398266Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3398549Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3398849Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3399118Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3399387Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3399559Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3399744Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3399859Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3400109Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3400234Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3400471Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3400562Z     return self.apply_standard()
2025-01-22T20:11:05.3400988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3401115Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3401417Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3401537Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3401756Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3401913Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3402182Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3402263Z     return self._get_value(key)
2025-01-22T20:11:05.3402524Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3402609Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3402726Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3402731Z 
2025-01-22T20:11:05.3402886Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3403100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3403210Z        't046000', 't048000'],
2025-01-22T20:11:05.3403345Z       dtype='object')
2025-01-22T20:11:05.3403475Z key = 'cups'
2025-01-22T20:11:05.3403489Z 
2025-01-22T20:11:05.3403741Z     def get_loc(self, key):
2025-01-22T20:11:05.3403859Z         """
2025-01-22T20:11:05.3404125Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3404241Z     
2025-01-22T20:11:05.3404360Z         Parameters
2025-01-22T20:11:05.3404490Z         ----------
2025-01-22T20:11:05.3404566Z         key : label
2025-01-22T20:11:05.3404638Z     
2025-01-22T20:11:05.3404706Z         Returns
2025-01-22T20:11:05.3404786Z         -------
2025-01-22T20:11:05.3404918Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3404989Z     
2025-01-22T20:11:05.3405060Z         Examples
2025-01-22T20:11:05.3405134Z         --------
2025-01-22T20:11:05.3405231Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3405328Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3405413Z         1
2025-01-22T20:11:05.3405479Z     
2025-01-22T20:11:05.3405585Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3405677Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3405755Z         slice(1, 3, None)
2025-01-22T20:11:05.3405821Z     
2025-01-22T20:11:05.3405930Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3406021Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3406117Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3406182Z         """
2025-01-22T20:11:05.3406284Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3406357Z         try:
2025-01-22T20:11:05.3406457Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3406537Z         except KeyError as err:
2025-01-22T20:11:05.3406636Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3406735Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3406858Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3406930Z             ):
2025-01-22T20:11:05.3407024Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3407114Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3407193Z E           KeyError: 'cups'
2025-01-22T20:11:05.3407197Z 
2025-01-22T20:11:05.3407467Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3407796Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ionization_data] _
2025-01-22T20:11:05.3407931Z 
2025-01-22T20:11:05.3408097Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3408306Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3408388Z        't046000', 't048000'],
2025-01-22T20:11:05.3408468Z       dtype='object')
2025-01-22T20:11:05.3408539Z key = 'cups'
2025-01-22T20:11:05.3408544Z 
2025-01-22T20:11:05.3408627Z     def get_loc(self, key):
2025-01-22T20:11:05.3408895Z         """
2025-01-22T20:11:05.3409189Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3409300Z     
2025-01-22T20:11:05.3409426Z         Parameters
2025-01-22T20:11:05.3409543Z         ----------
2025-01-22T20:11:05.3409663Z         key : label
2025-01-22T20:11:05.3409774Z     
2025-01-22T20:11:05.3409901Z         Returns
2025-01-22T20:11:05.3409976Z         -------
2025-01-22T20:11:05.3410126Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3410194Z     
2025-01-22T20:11:05.3410268Z         Examples
2025-01-22T20:11:05.3410336Z         --------
2025-01-22T20:11:05.3410436Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3410524Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3410590Z         1
2025-01-22T20:11:05.3410663Z     
2025-01-22T20:11:05.3410765Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3410859Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3410939Z         slice(1, 3, None)
2025-01-22T20:11:05.3411010Z     
2025-01-22T20:11:05.3411124Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3411223Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3411315Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3411390Z         """
2025-01-22T20:11:05.3411494Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3411575Z         try:
2025-01-22T20:11:05.3411674Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3411679Z 
2025-01-22T20:11:05.3411933Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3412052Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3412191Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3412266Z     ???
2025-01-22T20:11:05.3412396Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3412504Z     ???
2025-01-22T20:11:05.3412778Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3412850Z     ???
2025-01-22T20:11:05.3412962Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3412967Z 
2025-01-22T20:11:05.3413036Z >   ???
2025-01-22T20:11:05.3413113Z E   KeyError: 'cups'
2025-01-22T20:11:05.3413123Z 
2025-01-22T20:11:05.3413256Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3413260Z 
2025-01-22T20:11:05.3413435Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3413439Z 
2025-01-22T20:11:05.3413779Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3414103Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3414931Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3414947Z 
2025-01-22T20:11:05.3415099Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3415220Z     def plasma(
2025-01-22T20:11:05.3415338Z         self,
2025-01-22T20:11:05.3415474Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3415754Z         config,
2025-01-22T20:11:05.3415827Z     ):
2025-01-22T20:11:05.3415949Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3416049Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3416054Z 
2025-01-22T20:11:05.3416178Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3416294Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3416399Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3416596Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3416764Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3416867Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3416977Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3417059Z     return BasePlasma(
2025-01-22T20:11:05.3417143Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3417236Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3417335Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3417414Z     self.update(**kwargs)
2025-01-22T20:11:05.3417506Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3417633Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3417749Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3417854Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3418108Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3418267Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3418484Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3418582Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3418721Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3418890Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3419073Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3419255Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3419514Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3419694Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3419875Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3419985Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3420317Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3420550Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3420961Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3421112Z     return self.apply_standard()
2025-01-22T20:11:05.3421521Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3421652Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3421962Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3422080Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3422302Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3422389Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3422662Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3422745Z     return self._get_value(key)
2025-01-22T20:11:05.3423008Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3423095Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3423210Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3423306Z 
2025-01-22T20:11:05.3423476Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3423841Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3423925Z        't046000', 't048000'],
2025-01-22T20:11:05.3424004Z       dtype='object')
2025-01-22T20:11:05.3424081Z key = 'cups'
2025-01-22T20:11:05.3424085Z 
2025-01-22T20:11:05.3424164Z     def get_loc(self, key):
2025-01-22T20:11:05.3424374Z         """
2025-01-22T20:11:05.3424536Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3424607Z     
2025-01-22T20:11:05.3424680Z         Parameters
2025-01-22T20:11:05.3424758Z         ----------
2025-01-22T20:11:05.3424830Z         key : label
2025-01-22T20:11:05.3424901Z     
2025-01-22T20:11:05.3424978Z         Returns
2025-01-22T20:11:05.3425047Z         -------
2025-01-22T20:11:05.3425190Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3425259Z     
2025-01-22T20:11:05.3425335Z         Examples
2025-01-22T20:11:05.3425406Z         --------
2025-01-22T20:11:05.3425512Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3425598Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3425673Z         1
2025-01-22T20:11:05.3425769Z     
2025-01-22T20:11:05.3426156Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3426353Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3426571Z         slice(1, 3, None)
2025-01-22T20:11:05.3426721Z     
2025-01-22T20:11:05.3427096Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3427271Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3427432Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3427570Z         """
2025-01-22T20:11:05.3427705Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3427901Z         try:
2025-01-22T20:11:05.3428048Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3428197Z         except KeyError as err:
2025-01-22T20:11:05.3428325Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3428490Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3428641Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3428840Z             ):
2025-01-22T20:11:05.3428964Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3429122Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3450763Z E           KeyError: 'cups'
2025-01-22T20:11:05.3450787Z 
2025-01-22T20:11:05.3451275Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3451844Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] _
2025-01-22T20:11:05.3451872Z 
2025-01-22T20:11:05.3452155Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3452520Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3452645Z        't046000', 't048000'],
2025-01-22T20:11:05.3452774Z       dtype='object')
2025-01-22T20:11:05.3452892Z key = 'cups'
2025-01-22T20:11:05.3452899Z 
2025-01-22T20:11:05.3453037Z     def get_loc(self, key):
2025-01-22T20:11:05.3453157Z         """
2025-01-22T20:11:05.3453337Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3453404Z     
2025-01-22T20:11:05.3453482Z         Parameters
2025-01-22T20:11:05.3453687Z         ----------
2025-01-22T20:11:05.3453761Z         key : label
2025-01-22T20:11:05.3453828Z     
2025-01-22T20:11:05.3453894Z         Returns
2025-01-22T20:11:05.3453968Z         -------
2025-01-22T20:11:05.3454110Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3454398Z     
2025-01-22T20:11:05.3454469Z         Examples
2025-01-22T20:11:05.3454543Z         --------
2025-01-22T20:11:05.3454644Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3454732Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3454799Z         1
2025-01-22T20:11:05.3454870Z     
2025-01-22T20:11:05.3454975Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3455067Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3455141Z         slice(1, 3, None)
2025-01-22T20:11:05.3455321Z     
2025-01-22T20:11:05.3455432Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3455534Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3455623Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3455691Z         """
2025-01-22T20:11:05.3455795Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3455861Z         try:
2025-01-22T20:11:05.3455970Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3455974Z 
2025-01-22T20:11:05.3456236Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3456357Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3456496Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3456567Z     ???
2025-01-22T20:11:05.3456695Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3456767Z     ???
2025-01-22T20:11:05.3457043Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3457111Z     ???
2025-01-22T20:11:05.3457219Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3457227Z 
2025-01-22T20:11:05.3457292Z >   ???
2025-01-22T20:11:05.3457370Z E   KeyError: 'cups'
2025-01-22T20:11:05.3457375Z 
2025-01-22T20:11:05.3457506Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3457515Z 
2025-01-22T20:11:05.3457685Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3457691Z 
2025-01-22T20:11:05.3457914Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3458245Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3458873Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3458886Z 
2025-01-22T20:11:05.3458975Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3459050Z     def plasma(
2025-01-22T20:11:05.3459117Z         self,
2025-01-22T20:11:05.3459200Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3459268Z         config,
2025-01-22T20:11:05.3459342Z     ):
2025-01-22T20:11:05.3459455Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3459553Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3459558Z 
2025-01-22T20:11:05.3459679Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3459790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3459897Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3459981Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3460153Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3460250Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3460361Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3460437Z     return BasePlasma(
2025-01-22T20:11:05.3460523Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3460612Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3460703Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3460892Z     self.update(**kwargs)
2025-01-22T20:11:05.3460980Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3461107Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3461228Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3461331Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3461584Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3461740Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3462025Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3462124Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3462251Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3462421Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3462590Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3462768Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3463025Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3463198Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3463377Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3463483Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3463878Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3464003Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3464244Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3464330Z     return self.apply_standard()
2025-01-22T20:11:05.3464608Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3464734Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3465040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3465166Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3465384Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3465469Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3465736Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3465826Z     return self._get_value(key)
2025-01-22T20:11:05.3466080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3466167Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3466276Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3466286Z 
2025-01-22T20:11:05.3466444Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3466651Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3466728Z        't046000', 't048000'],
2025-01-22T20:11:05.3466801Z       dtype='object')
2025-01-22T20:11:05.3466873Z key = 'cups'
2025-01-22T20:11:05.3466878Z 
2025-01-22T20:11:05.3466959Z     def get_loc(self, key):
2025-01-22T20:11:05.3467025Z         """
2025-01-22T20:11:05.3467187Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3467253Z     
2025-01-22T20:11:05.3467327Z         Parameters
2025-01-22T20:11:05.3467399Z         ----------
2025-01-22T20:11:05.3467472Z         key : label
2025-01-22T20:11:05.3467535Z     
2025-01-22T20:11:05.3467605Z         Returns
2025-01-22T20:11:05.3467674Z         -------
2025-01-22T20:11:05.3467809Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3467998Z     
2025-01-22T20:11:05.3468069Z         Examples
2025-01-22T20:11:05.3468137Z         --------
2025-01-22T20:11:05.3468238Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3468321Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3468389Z         1
2025-01-22T20:11:05.3468453Z     
2025-01-22T20:11:05.3468560Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3468648Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3468826Z         slice(1, 3, None)
2025-01-22T20:11:05.3468892Z     
2025-01-22T20:11:05.3469001Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3469093Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3469180Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3469249Z         """
2025-01-22T20:11:05.3469351Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3469422Z         try:
2025-01-22T20:11:05.3469526Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3469607Z         except KeyError as err:
2025-01-22T20:11:05.3469703Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3469807Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3469926Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3469996Z             ):
2025-01-22T20:11:05.3470086Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3470175Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3470263Z E           KeyError: 'cups'
2025-01-22T20:11:05.3470268Z 
2025-01-22T20:11:05.3470538Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3470861Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] _
2025-01-22T20:11:05.3470867Z 
2025-01-22T20:11:05.3471019Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3471232Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3471305Z        't046000', 't048000'],
2025-01-22T20:11:05.3471382Z       dtype='object')
2025-01-22T20:11:05.3471452Z key = 'cups'
2025-01-22T20:11:05.3471460Z 
2025-01-22T20:11:05.3471541Z     def get_loc(self, key):
2025-01-22T20:11:05.3471611Z         """
2025-01-22T20:11:05.3471766Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3471839Z     
2025-01-22T20:11:05.3471909Z         Parameters
2025-01-22T20:11:05.3471982Z         ----------
2025-01-22T20:11:05.3472052Z         key : label
2025-01-22T20:11:05.3472122Z     
2025-01-22T20:11:05.3472189Z         Returns
2025-01-22T20:11:05.3472260Z         -------
2025-01-22T20:11:05.3472388Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3472459Z     
2025-01-22T20:11:05.3472527Z         Examples
2025-01-22T20:11:05.3472598Z         --------
2025-01-22T20:11:05.3472692Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3472779Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3472845Z         1
2025-01-22T20:11:05.3472912Z     
2025-01-22T20:11:05.3473009Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3473097Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3473173Z         slice(1, 3, None)
2025-01-22T20:11:05.3473241Z     
2025-01-22T20:11:05.3473352Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3473439Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3473647Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3473716Z         """
2025-01-22T20:11:05.3473821Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3473887Z         try:
2025-01-22T20:11:05.3473990Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3474113Z 
2025-01-22T20:11:05.3474364Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3474477Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3474615Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3474685Z     ???
2025-01-22T20:11:05.3474818Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3474882Z     ???
2025-01-22T20:11:05.3475153Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3475321Z     ???
2025-01-22T20:11:05.3475432Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3475437Z 
2025-01-22T20:11:05.3475499Z >   ???
2025-01-22T20:11:05.3475586Z E   KeyError: 'cups'
2025-01-22T20:11:05.3475590Z 
2025-01-22T20:11:05.3475718Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3475728Z 
2025-01-22T20:11:05.3475898Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3475903Z 
2025-01-22T20:11:05.3476125Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3476441Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3477378Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3477395Z 
2025-01-22T20:11:05.3477541Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3477667Z     def plasma(
2025-01-22T20:11:05.3477781Z         self,
2025-01-22T20:11:05.3477915Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3478028Z         config,
2025-01-22T20:11:05.3478139Z     ):
2025-01-22T20:11:05.3478330Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3478493Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3478502Z 
2025-01-22T20:11:05.3478734Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3478919Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3479097Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3479232Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3479520Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3479657Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3479771Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3479847Z     return BasePlasma(
2025-01-22T20:11:05.3479934Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3480020Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3480113Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3480195Z     self.update(**kwargs)
2025-01-22T20:11:05.3480282Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3480404Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3480512Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3480615Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3480863Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3481020Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3481240Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3481339Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3481469Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3481640Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3481812Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3482084Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3482351Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3482522Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3482707Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3482811Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3483072Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3483271Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3483668Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3483759Z     return self.apply_standard()
2025-01-22T20:11:05.3484042Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3484168Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3484473Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3484595Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3484809Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3484899Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3485160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3485256Z     return self._get_value(key)
2025-01-22T20:11:05.3485511Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3485600Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3485709Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3485713Z 
2025-01-22T20:11:05.3485879Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3486091Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3486163Z        't046000', 't048000'],
2025-01-22T20:11:05.3486239Z       dtype='object')
2025-01-22T20:11:05.3486307Z key = 'cups'
2025-01-22T20:11:05.3486312Z 
2025-01-22T20:11:05.3486391Z     def get_loc(self, key):
2025-01-22T20:11:05.3486457Z         """
2025-01-22T20:11:05.3486617Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3486687Z     
2025-01-22T20:11:05.3486760Z         Parameters
2025-01-22T20:11:05.3486830Z         ----------
2025-01-22T20:11:05.3486903Z         key : label
2025-01-22T20:11:05.3486967Z     
2025-01-22T20:11:05.3487036Z         Returns
2025-01-22T20:11:05.3487103Z         -------
2025-01-22T20:11:05.3487234Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3487307Z     
2025-01-22T20:11:05.3487377Z         Examples
2025-01-22T20:11:05.3487448Z         --------
2025-01-22T20:11:05.3487544Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3487631Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3487697Z         1
2025-01-22T20:11:05.3487763Z     
2025-01-22T20:11:05.3487867Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3488025Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3488153Z         slice(1, 3, None)
2025-01-22T20:11:05.3488271Z     
2025-01-22T20:11:05.3488449Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3488602Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3488748Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3488863Z         """
2025-01-22T20:11:05.3489007Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3489084Z         try:
2025-01-22T20:11:05.3489184Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3489425Z         except KeyError as err:
2025-01-22T20:11:05.3489524Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3489626Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3489746Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3489812Z             ):
2025-01-22T20:11:05.3489902Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3489985Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3490168Z E           KeyError: 'cups'
2025-01-22T20:11:05.3490173Z 
2025-01-22T20:11:05.3490437Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3490746Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] _
2025-01-22T20:11:05.3490752Z 
2025-01-22T20:11:05.3490906Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3491127Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3491204Z        't046000', 't048000'],
2025-01-22T20:11:05.3491276Z       dtype='object')
2025-01-22T20:11:05.3491347Z key = 'cups'
2025-01-22T20:11:05.3491352Z 
2025-01-22T20:11:05.3491430Z     def get_loc(self, key):
2025-01-22T20:11:05.3491498Z         """
2025-01-22T20:11:05.3491657Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3491729Z     
2025-01-22T20:11:05.3491798Z         Parameters
2025-01-22T20:11:05.3491871Z         ----------
2025-01-22T20:11:05.3491945Z         key : label
2025-01-22T20:11:05.3492013Z     
2025-01-22T20:11:05.3492079Z         Returns
2025-01-22T20:11:05.3492151Z         -------
2025-01-22T20:11:05.3492280Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3492348Z     
2025-01-22T20:11:05.3492422Z         Examples
2025-01-22T20:11:05.3492495Z         --------
2025-01-22T20:11:05.3492596Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3492680Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3492759Z         1
2025-01-22T20:11:05.3492824Z     
2025-01-22T20:11:05.3492930Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3493016Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3493095Z         slice(1, 3, None)
2025-01-22T20:11:05.3493160Z     
2025-01-22T20:11:05.3493268Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3493363Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3493454Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3493657Z         """
2025-01-22T20:11:05.3493764Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3493831Z         try:
2025-01-22T20:11:05.3493933Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3493938Z 
2025-01-22T20:11:05.3494191Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3494301Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3494442Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3494509Z     ???
2025-01-22T20:11:05.3494642Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3494707Z     ???
2025-01-22T20:11:05.3494985Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3495055Z     ???
2025-01-22T20:11:05.3495165Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3495170Z 
2025-01-22T20:11:05.3495234Z >   ???
2025-01-22T20:11:05.3495314Z E   KeyError: 'cups'
2025-01-22T20:11:05.3495320Z 
2025-01-22T20:11:05.3495451Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3495455Z 
2025-01-22T20:11:05.3495745Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3495750Z 
2025-01-22T20:11:05.3495974Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3496294Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3496917Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3497023Z 
2025-01-22T20:11:05.3497112Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3497190Z     def plasma(
2025-01-22T20:11:05.3497262Z         self,
2025-01-22T20:11:05.3497341Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3497413Z         config,
2025-01-22T20:11:05.3497479Z     ):
2025-01-22T20:11:05.3497593Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3497692Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3497697Z 
2025-01-22T20:11:05.3497821Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3497926Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3498035Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3498118Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3498289Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3498388Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3498499Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3498579Z     return BasePlasma(
2025-01-22T20:11:05.3498662Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3498752Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3498839Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3498923Z     self.update(**kwargs)
2025-01-22T20:11:05.3499015Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3499142Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3499251Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3499358Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3499603Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3499759Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3499965Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3500068Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3500195Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3500366Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3500541Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3500714Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3500977Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3501146Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3501325Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3501427Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3501685Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3501811Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3502050Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3502139Z     return self.apply_standard()
2025-01-22T20:11:05.3502416Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3502537Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3502932Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3503055Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3503268Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3503355Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3503714Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3503908Z     return self._get_value(key)
2025-01-22T20:11:05.3504169Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3504262Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3504373Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3504378Z 
2025-01-22T20:11:05.3504559Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3504933Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3505059Z        't046000', 't048000'],
2025-01-22T20:11:05.3505192Z       dtype='object')
2025-01-22T20:11:05.3505314Z key = 'cups'
2025-01-22T20:11:05.3505321Z 
2025-01-22T20:11:05.3505447Z     def get_loc(self, key):
2025-01-22T20:11:05.3505552Z         """
2025-01-22T20:11:05.3505783Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3505859Z     
2025-01-22T20:11:05.3505934Z         Parameters
2025-01-22T20:11:05.3506008Z         ----------
2025-01-22T20:11:05.3506076Z         key : label
2025-01-22T20:11:05.3506143Z     
2025-01-22T20:11:05.3506211Z         Returns
2025-01-22T20:11:05.3506285Z         -------
2025-01-22T20:11:05.3506416Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3506484Z     
2025-01-22T20:11:05.3506556Z         Examples
2025-01-22T20:11:05.3506628Z         --------
2025-01-22T20:11:05.3506723Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3506810Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3506874Z         1
2025-01-22T20:11:05.3506942Z     
2025-01-22T20:11:05.3507045Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3507135Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3507207Z         slice(1, 3, None)
2025-01-22T20:11:05.3507275Z     
2025-01-22T20:11:05.3507385Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3507481Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3507573Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3507640Z         """
2025-01-22T20:11:05.3507744Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3507811Z         try:
2025-01-22T20:11:05.3507913Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3507998Z         except KeyError as err:
2025-01-22T20:11:05.3508098Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3508195Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3508317Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3508385Z             ):
2025-01-22T20:11:05.3508479Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3508564Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3508649Z E           KeyError: 'cups'
2025-01-22T20:11:05.3508656Z 
2025-01-22T20:11:05.3508921Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3509250Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-metastability] _
2025-01-22T20:11:05.3509255Z 
2025-01-22T20:11:05.3509413Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3509769Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3509847Z        't046000', 't048000'],
2025-01-22T20:11:05.3509922Z       dtype='object')
2025-01-22T20:11:05.3509997Z key = 'cups'
2025-01-22T20:11:05.3510001Z 
2025-01-22T20:11:05.3510077Z     def get_loc(self, key):
2025-01-22T20:11:05.3510148Z         """
2025-01-22T20:11:05.3510303Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3510375Z     
2025-01-22T20:11:05.3510546Z         Parameters
2025-01-22T20:11:05.3510619Z         ----------
2025-01-22T20:11:05.3510689Z         key : label
2025-01-22T20:11:05.3510755Z     
2025-01-22T20:11:05.3510826Z         Returns
2025-01-22T20:11:05.3510895Z         -------
2025-01-22T20:11:05.3511025Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3511089Z     
2025-01-22T20:11:05.3511160Z         Examples
2025-01-22T20:11:05.3511227Z         --------
2025-01-22T20:11:05.3511332Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3511415Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3511485Z         1
2025-01-22T20:11:05.3511553Z     
2025-01-22T20:11:05.3511657Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3511742Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3511821Z         slice(1, 3, None)
2025-01-22T20:11:05.3511886Z     
2025-01-22T20:11:05.3511997Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3512091Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3512184Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3512255Z         """
2025-01-22T20:11:05.3512356Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3512430Z         try:
2025-01-22T20:11:05.3512570Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3512575Z 
2025-01-22T20:11:05.3512821Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3512934Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3513073Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3513140Z     ???
2025-01-22T20:11:05.3513272Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3513336Z     ???
2025-01-22T20:11:05.3513783Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3513858Z     ???
2025-01-22T20:11:05.3513969Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3513974Z 
2025-01-22T20:11:05.3514043Z >   ???
2025-01-22T20:11:05.3514119Z E   KeyError: 'cups'
2025-01-22T20:11:05.3514124Z 
2025-01-22T20:11:05.3514253Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3514257Z 
2025-01-22T20:11:05.3514421Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3514430Z 
2025-01-22T20:11:05.3514654Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3514971Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3515595Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3515604Z 
2025-01-22T20:11:05.3515694Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3515764Z     def plasma(
2025-01-22T20:11:05.3515834Z         self,
2025-01-22T20:11:05.3515912Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3515981Z         config,
2025-01-22T20:11:05.3516044Z     ):
2025-01-22T20:11:05.3516155Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3516373Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3516378Z 
2025-01-22T20:11:05.3516503Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3516608Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3516715Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3516804Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3516970Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3517071Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3517343Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3517422Z     return BasePlasma(
2025-01-22T20:11:05.3517504Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3517591Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3517681Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3517763Z     self.update(**kwargs)
2025-01-22T20:11:05.3517849Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3517977Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3518086Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3518193Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3518437Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3518593Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3518804Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3518903Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3519033Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3519199Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3519377Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3519550Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3519812Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3519985Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3520169Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3520285Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3520548Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3520674Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3520914Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3521001Z     return self.apply_standard()
2025-01-22T20:11:05.3521277Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3521400Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3521708Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3521826Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3522041Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3522130Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3522396Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3522477Z     return self._get_value(key)
2025-01-22T20:11:05.3522742Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3522828Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3522939Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3522943Z 
2025-01-22T20:11:05.3523098Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3523401Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3523474Z        't046000', 't048000'],
2025-01-22T20:11:05.3523899Z       dtype='object')
2025-01-22T20:11:05.3524014Z key = 'cups'
2025-01-22T20:11:05.3524027Z 
2025-01-22T20:11:05.3524145Z     def get_loc(self, key):
2025-01-22T20:11:05.3524259Z         """
2025-01-22T20:11:05.3524509Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3524723Z     
2025-01-22T20:11:05.3524799Z         Parameters
2025-01-22T20:11:05.3524875Z         ----------
2025-01-22T20:11:05.3524946Z         key : label
2025-01-22T20:11:05.3525014Z     
2025-01-22T20:11:05.3525080Z         Returns
2025-01-22T20:11:05.3525152Z         -------
2025-01-22T20:11:05.3525291Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3525360Z     
2025-01-22T20:11:05.3525429Z         Examples
2025-01-22T20:11:05.3525508Z         --------
2025-01-22T20:11:05.3525606Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3525695Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3525763Z         1
2025-01-22T20:11:05.3525833Z     
2025-01-22T20:11:05.3525934Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3526025Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3526103Z         slice(1, 3, None)
2025-01-22T20:11:05.3526168Z     
2025-01-22T20:11:05.3526279Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3526374Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3526466Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3526532Z         """
2025-01-22T20:11:05.3526634Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3526702Z         try:
2025-01-22T20:11:05.3526804Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3526885Z         except KeyError as err:
2025-01-22T20:11:05.3526988Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3527087Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3527208Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3527272Z             ):
2025-01-22T20:11:05.3527363Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3527452Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3527532Z E           KeyError: 'cups'
2025-01-22T20:11:05.3527537Z 
2025-01-22T20:11:05.3527818Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3528125Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-delta] _
2025-01-22T20:11:05.3528130Z 
2025-01-22T20:11:05.3528285Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3528490Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3528576Z        't046000', 't048000'],
2025-01-22T20:11:05.3528649Z       dtype='object')
2025-01-22T20:11:05.3528725Z key = 'cups'
2025-01-22T20:11:05.3528729Z 
2025-01-22T20:11:05.3528810Z     def get_loc(self, key):
2025-01-22T20:11:05.3528876Z         """
2025-01-22T20:11:05.3529037Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3529103Z     
2025-01-22T20:11:05.3529178Z         Parameters
2025-01-22T20:11:05.3529251Z         ----------
2025-01-22T20:11:05.3529324Z         key : label
2025-01-22T20:11:05.3529389Z     
2025-01-22T20:11:05.3529461Z         Returns
2025-01-22T20:11:05.3529528Z         -------
2025-01-22T20:11:05.3529664Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3529731Z     
2025-01-22T20:11:05.3529804Z         Examples
2025-01-22T20:11:05.3529873Z         --------
2025-01-22T20:11:05.3529972Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3530175Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3530246Z         1
2025-01-22T20:11:05.3530315Z     
2025-01-22T20:11:05.3530425Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3530515Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3530589Z         slice(1, 3, None)
2025-01-22T20:11:05.3530656Z     
2025-01-22T20:11:05.3530762Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3530854Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3531019Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3531090Z         """
2025-01-22T20:11:05.3531191Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3531265Z         try:
2025-01-22T20:11:05.3531363Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3531367Z 
2025-01-22T20:11:05.3531621Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3531735Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3531876Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3531946Z     ???
2025-01-22T20:11:05.3532075Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3532143Z     ???
2025-01-22T20:11:05.3532409Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3532475Z     ???
2025-01-22T20:11:05.3532583Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3532587Z 
2025-01-22T20:11:05.3532654Z >   ???
2025-01-22T20:11:05.3532730Z E   KeyError: 'cups'
2025-01-22T20:11:05.3532735Z 
2025-01-22T20:11:05.3532865Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3532870Z 
2025-01-22T20:11:05.3533034Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3533047Z 
2025-01-22T20:11:05.3533271Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3533771Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3534407Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3534418Z 
2025-01-22T20:11:05.3534513Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3534585Z     def plasma(
2025-01-22T20:11:05.3534655Z         self,
2025-01-22T20:11:05.3534737Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3534806Z         config,
2025-01-22T20:11:05.3534872Z     ):
2025-01-22T20:11:05.3534987Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3535086Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3535096Z 
2025-01-22T20:11:05.3535218Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3535330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3535435Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3535522Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3535692Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3535794Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3535908Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3535989Z     return BasePlasma(
2025-01-22T20:11:05.3536073Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3536163Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3536252Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3536335Z     self.update(**kwargs)
2025-01-22T20:11:05.3536427Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3536546Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3536785Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3536887Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3537142Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3537293Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3537508Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3537605Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3537860Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3538031Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3538205Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3538381Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3538642Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3538828Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3539008Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3539116Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3539374Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3539500Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3539744Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3539834Z     return self.apply_standard()
2025-01-22T20:11:05.3540108Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3540231Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3540540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3540662Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3540881Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3540968Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3541235Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3541317Z     return self._get_value(key)
2025-01-22T20:11:05.3541582Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3541668Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3541782Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3541787Z 
2025-01-22T20:11:05.3541945Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3542160Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3542244Z        't046000', 't048000'],
2025-01-22T20:11:05.3542318Z       dtype='object')
2025-01-22T20:11:05.3542393Z key = 'cups'
2025-01-22T20:11:05.3542398Z 
2025-01-22T20:11:05.3542476Z     def get_loc(self, key):
2025-01-22T20:11:05.3542548Z         """
2025-01-22T20:11:05.3542707Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3542778Z     
2025-01-22T20:11:05.3542850Z         Parameters
2025-01-22T20:11:05.3542931Z         ----------
2025-01-22T20:11:05.3543000Z         key : label
2025-01-22T20:11:05.3543070Z     
2025-01-22T20:11:05.3543137Z         Returns
2025-01-22T20:11:05.3543214Z         -------
2025-01-22T20:11:05.3543349Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3543418Z     
2025-01-22T20:11:05.3543489Z         Examples
2025-01-22T20:11:05.3543728Z         --------
2025-01-22T20:11:05.3543958Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3544044Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3544114Z         1
2025-01-22T20:11:05.3544178Z     
2025-01-22T20:11:05.3544288Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3544377Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3544454Z         slice(1, 3, None)
2025-01-22T20:11:05.3544517Z     
2025-01-22T20:11:05.3544627Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3544716Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3544912Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3544979Z         """
2025-01-22T20:11:05.3545084Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3545151Z         try:
2025-01-22T20:11:05.3545251Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3545334Z         except KeyError as err:
2025-01-22T20:11:05.3545437Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3545545Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3545664Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3545736Z             ):
2025-01-22T20:11:05.3545828Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3545917Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3545997Z E           KeyError: 'cups'
2025-01-22T20:11:05.3546001Z 
2025-01-22T20:11:05.3546273Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3546642Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_electron_densities] _
2025-01-22T20:11:05.3546648Z 
2025-01-22T20:11:05.3546806Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3547017Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3547098Z        't046000', 't048000'],
2025-01-22T20:11:05.3547174Z       dtype='object')
2025-01-22T20:11:05.3547244Z key = 'cups'
2025-01-22T20:11:05.3547249Z 
2025-01-22T20:11:05.3547331Z     def get_loc(self, key):
2025-01-22T20:11:05.3547397Z         """
2025-01-22T20:11:05.3547558Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3547624Z     
2025-01-22T20:11:05.3547699Z         Parameters
2025-01-22T20:11:05.3547769Z         ----------
2025-01-22T20:11:05.3547848Z         key : label
2025-01-22T20:11:05.3547913Z     
2025-01-22T20:11:05.3547986Z         Returns
2025-01-22T20:11:05.3548055Z         -------
2025-01-22T20:11:05.3548190Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3548261Z     
2025-01-22T20:11:05.3548329Z         Examples
2025-01-22T20:11:05.3548406Z         --------
2025-01-22T20:11:05.3548505Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3548598Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3548665Z         1
2025-01-22T20:11:05.3548735Z     
2025-01-22T20:11:05.3548834Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3548922Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3548995Z         slice(1, 3, None)
2025-01-22T20:11:05.3549063Z     
2025-01-22T20:11:05.3549168Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3549259Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3549352Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3549423Z         """
2025-01-22T20:11:05.3549522Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3549596Z         try:
2025-01-22T20:11:05.3549695Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3549704Z 
2025-01-22T20:11:05.3549964Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3550186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3550322Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3550393Z     ???
2025-01-22T20:11:05.3550523Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3550594Z     ???
2025-01-22T20:11:05.3550865Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3550935Z     ???
2025-01-22T20:11:05.3551041Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3551118Z 
2025-01-22T20:11:05.3551188Z >   ???
2025-01-22T20:11:05.3551264Z E   KeyError: 'cups'
2025-01-22T20:11:05.3551274Z 
2025-01-22T20:11:05.3551399Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3551403Z 
2025-01-22T20:11:05.3551572Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3551576Z 
2025-01-22T20:11:05.3551802Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3552124Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3552746Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3552754Z 
2025-01-22T20:11:05.3552845Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3552921Z     def plasma(
2025-01-22T20:11:05.3552989Z         self,
2025-01-22T20:11:05.3553073Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3553141Z         config,
2025-01-22T20:11:05.3553215Z     ):
2025-01-22T20:11:05.3553326Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3553424Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3553434Z 
2025-01-22T20:11:05.3553744Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3553861Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3553966Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3554054Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3554218Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3554330Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3554442Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3554524Z     return BasePlasma(
2025-01-22T20:11:05.3554610Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3554695Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3554789Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3554867Z     self.update(**kwargs)
2025-01-22T20:11:05.3554958Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3555075Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3555194Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3555296Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3555547Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3555696Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3555906Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3556001Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3556135Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3556306Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3556478Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3556650Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3556905Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3557206Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3557386Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3557494Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3557746Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3557877Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3558121Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3558316Z     return self.apply_standard()
2025-01-22T20:11:05.3558597Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3558714Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3559021Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3559161Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3559385Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3559471Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3559742Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3559827Z     return self._get_value(key)
2025-01-22T20:11:05.3560090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3560187Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3560295Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3560299Z 
2025-01-22T20:11:05.3560457Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3560665Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3560748Z        't046000', 't048000'],
2025-01-22T20:11:05.3560822Z       dtype='object')
2025-01-22T20:11:05.3560900Z key = 'cups'
2025-01-22T20:11:05.3560904Z 
2025-01-22T20:11:05.3560982Z     def get_loc(self, key):
2025-01-22T20:11:05.3561057Z         """
2025-01-22T20:11:05.3561213Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3561283Z     
2025-01-22T20:11:05.3561359Z         Parameters
2025-01-22T20:11:05.3561433Z         ----------
2025-01-22T20:11:05.3561507Z         key : label
2025-01-22T20:11:05.3561573Z     
2025-01-22T20:11:05.3561647Z         Returns
2025-01-22T20:11:05.3561715Z         -------
2025-01-22T20:11:05.3561848Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3561915Z     
2025-01-22T20:11:05.3561989Z         Examples
2025-01-22T20:11:05.3562058Z         --------
2025-01-22T20:11:05.3562155Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3562244Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3562314Z         1
2025-01-22T20:11:05.3562379Z     
2025-01-22T20:11:05.3562483Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3562570Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3562650Z         slice(1, 3, None)
2025-01-22T20:11:05.3562717Z     
2025-01-22T20:11:05.3562830Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3562920Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3563016Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3563087Z         """
2025-01-22T20:11:05.3563189Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3563262Z         try:
2025-01-22T20:11:05.3563361Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3563444Z         except KeyError as err:
2025-01-22T20:11:05.3563711Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3563967Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3564092Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3564164Z             ):
2025-01-22T20:11:05.3564256Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3564346Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3564426Z E           KeyError: 'cups'
2025-01-22T20:11:05.3564431Z 
2025-01-22T20:11:05.3564705Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3565119Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-phi] _
2025-01-22T20:11:05.3565124Z 
2025-01-22T20:11:05.3565281Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3565493Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3565571Z        't046000', 't048000'],
2025-01-22T20:11:05.3565649Z       dtype='object')
2025-01-22T20:11:05.3565718Z key = 'cups'
2025-01-22T20:11:05.3565722Z 
2025-01-22T20:11:05.3565804Z     def get_loc(self, key):
2025-01-22T20:11:05.3565871Z         """
2025-01-22T20:11:05.3566036Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3566101Z     
2025-01-22T20:11:05.3566176Z         Parameters
2025-01-22T20:11:05.3566249Z         ----------
2025-01-22T20:11:05.3566319Z         key : label
2025-01-22T20:11:05.3566392Z     
2025-01-22T20:11:05.3566460Z         Returns
2025-01-22T20:11:05.3566533Z         -------
2025-01-22T20:11:05.3566661Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3566733Z     
2025-01-22T20:11:05.3566802Z         Examples
2025-01-22T20:11:05.3566875Z         --------
2025-01-22T20:11:05.3566973Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3567062Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3567132Z         1
2025-01-22T20:11:05.3567201Z     
2025-01-22T20:11:05.3567299Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3567389Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3567463Z         slice(1, 3, None)
2025-01-22T20:11:05.3567532Z     
2025-01-22T20:11:05.3567639Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3567731Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3567826Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3567898Z         """
2025-01-22T20:11:05.3568002Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3568071Z         try:
2025-01-22T20:11:05.3568172Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3568177Z 
2025-01-22T20:11:05.3568420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3568534Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3568675Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3568746Z     ???
2025-01-22T20:11:05.3568876Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3568947Z     ???
2025-01-22T20:11:05.3569216Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3569288Z     ???
2025-01-22T20:11:05.3569397Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3569407Z 
2025-01-22T20:11:05.3569471Z >   ???
2025-01-22T20:11:05.3569552Z E   KeyError: 'cups'
2025-01-22T20:11:05.3569557Z 
2025-01-22T20:11:05.3569686Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3569690Z 
2025-01-22T20:11:05.3569860Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3569864Z 
2025-01-22T20:11:05.3570086Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3570500Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3571124Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3571129Z 
2025-01-22T20:11:05.3571214Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3571390Z     def plasma(
2025-01-22T20:11:05.3571457Z         self,
2025-01-22T20:11:05.3571542Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3571613Z         config,
2025-01-22T20:11:05.3571682Z     ):
2025-01-22T20:11:05.3571790Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3571889Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3571894Z 
2025-01-22T20:11:05.3572014Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3572129Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3572238Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3572320Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3572485Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3572583Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3572696Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3572777Z     return BasePlasma(
2025-01-22T20:11:05.3572864Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3572949Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3573041Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3573119Z     self.update(**kwargs)
2025-01-22T20:11:05.3573211Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3573329Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3573441Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3573706Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3574015Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3574172Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3574379Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3574478Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3574607Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3574783Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3574952Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3575129Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3575382Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3575561Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3575740Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3575846Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3576104Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3576227Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3576472Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3576563Z     return self.apply_standard()
2025-01-22T20:11:05.3576844Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3576964Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3577272Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3577518Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3577738Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3577828Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3578091Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3578179Z     return self._get_value(key)
2025-01-22T20:11:05.3578431Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3578621Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3578727Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3578732Z 
2025-01-22T20:11:05.3578891Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3579099Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3579185Z        't046000', 't048000'],
2025-01-22T20:11:05.3579261Z       dtype='object')
2025-01-22T20:11:05.3579344Z key = 'cups'
2025-01-22T20:11:05.3579349Z 
2025-01-22T20:11:05.3579433Z     def get_loc(self, key):
2025-01-22T20:11:05.3579504Z         """
2025-01-22T20:11:05.3579670Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3579741Z     
2025-01-22T20:11:05.3579820Z         Parameters
2025-01-22T20:11:05.3579892Z         ----------
2025-01-22T20:11:05.3579970Z         key : label
2025-01-22T20:11:05.3580043Z     
2025-01-22T20:11:05.3580120Z         Returns
2025-01-22T20:11:05.3580193Z         -------
2025-01-22T20:11:05.3580330Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3580397Z     
2025-01-22T20:11:05.3580476Z         Examples
2025-01-22T20:11:05.3580548Z         --------
2025-01-22T20:11:05.3580651Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3580735Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3580812Z         1
2025-01-22T20:11:05.3580879Z     
2025-01-22T20:11:05.3580989Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3581082Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3581156Z         slice(1, 3, None)
2025-01-22T20:11:05.3581228Z     
2025-01-22T20:11:05.3581334Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3581430Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3581521Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3581599Z         """
2025-01-22T20:11:05.3581700Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3581772Z         try:
2025-01-22T20:11:05.3581870Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3581958Z         except KeyError as err:
2025-01-22T20:11:05.3582054Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3582158Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3582281Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3582355Z             ):
2025-01-22T20:11:05.3582453Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3582540Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3582626Z E           KeyError: 'cups'
2025-01-22T20:11:05.3582630Z 
2025-01-22T20:11:05.3582896Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3583239Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ion_number_density] _
2025-01-22T20:11:05.3583245Z 
2025-01-22T20:11:05.3583399Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3583717Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3583794Z        't046000', 't048000'],
2025-01-22T20:11:05.3583995Z       dtype='object')
2025-01-22T20:11:05.3584074Z key = 'cups'
2025-01-22T20:11:05.3584079Z 
2025-01-22T20:11:05.3584157Z     def get_loc(self, key):
2025-01-22T20:11:05.3584229Z         """
2025-01-22T20:11:05.3584392Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3584464Z     
2025-01-22T20:11:05.3584536Z         Parameters
2025-01-22T20:11:05.3584613Z         ----------
2025-01-22T20:11:05.3584686Z         key : label
2025-01-22T20:11:05.3584757Z     
2025-01-22T20:11:05.3584947Z         Returns
2025-01-22T20:11:05.3585024Z         -------
2025-01-22T20:11:05.3585191Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3585265Z     
2025-01-22T20:11:05.3585336Z         Examples
2025-01-22T20:11:05.3585412Z         --------
2025-01-22T20:11:05.3585514Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3585606Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3585681Z         1
2025-01-22T20:11:05.3585754Z     
2025-01-22T20:11:05.3585864Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3585952Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3586034Z         slice(1, 3, None)
2025-01-22T20:11:05.3586103Z     
2025-01-22T20:11:05.3586219Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3586313Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3586409Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3586482Z         """
2025-01-22T20:11:05.3586593Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3586663Z         try:
2025-01-22T20:11:05.3586768Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3586772Z 
2025-01-22T20:11:05.3587025Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3587257Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3587435Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3587698Z     ???
2025-01-22T20:11:05.3587900Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3588017Z     ???
2025-01-22T20:11:05.3588355Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3588440Z     ???
2025-01-22T20:11:05.3588684Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3588695Z 
2025-01-22T20:11:05.3588794Z >   ???
2025-01-22T20:11:05.3588957Z E   KeyError: 'cups'
2025-01-22T20:11:05.3588962Z 
2025-01-22T20:11:05.3589122Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3589127Z 
2025-01-22T20:11:05.3589343Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3589349Z 
2025-01-22T20:11:05.3589694Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3590054Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3590755Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3590761Z 
2025-01-22T20:11:05.3590881Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3591014Z     def plasma(
2025-01-22T20:11:05.3591158Z         self,
2025-01-22T20:11:05.3591326Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3591477Z         config,
2025-01-22T20:11:05.3591576Z     ):
2025-01-22T20:11:05.3591739Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3591907Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3591913Z 
2025-01-22T20:11:05.3592134Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3592366Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3592537Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3592652Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3592923Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3593087Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3593266Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3593409Z     return BasePlasma(
2025-01-22T20:11:05.3593759Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3593979Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3594117Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3594263Z     self.update(**kwargs)
2025-01-22T20:11:05.3594385Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3594576Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3594720Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3594960Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3595243Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3595465Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3595715Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3595881Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3596145Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3596354Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3596592Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3596798Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3597124Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3597372Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3597643Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3597779Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3598122Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3598297Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3598615Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3598790Z     return self.apply_standard()
2025-01-22T20:11:05.3599099Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3599308Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3599647Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3599868Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3600136Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3600290Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3600637Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3600750Z     return self._get_value(key)
2025-01-22T20:11:05.3601115Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3601257Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3601434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3601439Z 
2025-01-22T20:11:05.3601644Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3601925Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3602225Z        't046000', 't048000'],
2025-01-22T20:11:05.3602351Z       dtype='object')
2025-01-22T20:11:05.3602523Z key = 'cups'
2025-01-22T20:11:05.3602528Z 
2025-01-22T20:11:05.3602640Z     def get_loc(self, key):
2025-01-22T20:11:05.3602772Z         """
2025-01-22T20:11:05.3602950Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3603141Z     
2025-01-22T20:11:05.3603263Z         Parameters
2025-01-22T20:11:05.3603406Z         ----------
2025-01-22T20:11:05.3603634Z         key : label
2025-01-22T20:11:05.3603880Z     
2025-01-22T20:11:05.3604038Z         Returns
2025-01-22T20:11:05.3604214Z         -------
2025-01-22T20:11:05.3604382Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3604515Z     
2025-01-22T20:11:05.3604616Z         Examples
2025-01-22T20:11:05.3604802Z         --------
2025-01-22T20:11:05.3604984Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3605102Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3605252Z         1
2025-01-22T20:11:05.3605348Z     
2025-01-22T20:11:05.3605597Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3605734Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3605879Z         slice(1, 3, None)
2025-01-22T20:11:05.3605975Z     
2025-01-22T20:11:05.3606154Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3606280Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3606497Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3606601Z         """
2025-01-22T20:11:05.3606771Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3606923Z         try:
2025-01-22T20:11:05.3607039Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3607251Z         except KeyError as err:
2025-01-22T20:11:05.3607380Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3607546Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3607706Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3607842Z             ):
2025-01-22T20:11:05.3608008Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3608179Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3608293Z E           KeyError: 'cups'
2025-01-22T20:11:05.3608299Z 
2025-01-22T20:11:05.3608691Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3609077Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-electron_densities] _
2025-01-22T20:11:05.3609087Z 
2025-01-22T20:11:05.3609324Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3609618Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3609724Z        't046000', 't048000'],
2025-01-22T20:11:05.3609887Z       dtype='object')
2025-01-22T20:11:05.3609990Z key = 'cups'
2025-01-22T20:11:05.3609994Z 
2025-01-22T20:11:05.3610173Z     def get_loc(self, key):
2025-01-22T20:11:05.3610289Z         """
2025-01-22T20:11:05.3610516Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3610678Z     
2025-01-22T20:11:05.3610782Z         Parameters
2025-01-22T20:11:05.3610957Z         ----------
2025-01-22T20:11:05.3611076Z         key : label
2025-01-22T20:11:05.3611208Z     
2025-01-22T20:11:05.3611331Z         Returns
2025-01-22T20:11:05.3611471Z         -------
2025-01-22T20:11:05.3611620Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3611812Z     
2025-01-22T20:11:05.3611915Z         Examples
2025-01-22T20:11:05.3612066Z         --------
2025-01-22T20:11:05.3612197Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3612334Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3612505Z         1
2025-01-22T20:11:05.3612802Z     
2025-01-22T20:11:05.3612943Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3613098Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3613224Z         slice(1, 3, None)
2025-01-22T20:11:05.3613368Z     
2025-01-22T20:11:05.3613684Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3613813Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3613971Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3614070Z         """
2025-01-22T20:11:05.3614414Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3614531Z         try:
2025-01-22T20:11:05.3614701Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3614706Z 
2025-01-22T20:11:05.3614985Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3615161Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3615416Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3615539Z     ???
2025-01-22T20:11:05.3615735Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3615832Z     ???
2025-01-22T20:11:05.3616171Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3616276Z     ???
2025-01-22T20:11:05.3616506Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3616511Z 
2025-01-22T20:11:05.3616610Z >   ???
2025-01-22T20:11:05.3616759Z E   KeyError: 'cups'
2025-01-22T20:11:05.3616764Z 
2025-01-22T20:11:05.3616922Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3616979Z 
2025-01-22T20:11:05.3617165Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3617170Z 
2025-01-22T20:11:05.3617515Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3617871Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3618563Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3618569Z 
2025-01-22T20:11:05.3618690Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3618832Z     def plasma(
2025-01-22T20:11:05.3619026Z         self,
2025-01-22T20:11:05.3619138Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3619272Z         config,
2025-01-22T20:11:05.3619387Z     ):
2025-01-22T20:11:05.3619549Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3619716Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3619721Z 
2025-01-22T20:11:05.3619930Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3620069Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3620262Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3620377Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3620641Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3620822Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3620963Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3621124Z     return BasePlasma(
2025-01-22T20:11:05.3621240Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3621434Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3621570Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3621717Z     self.update(**kwargs)
2025-01-22T20:11:05.3621852Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3622044Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3622172Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3622396Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3622815Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3623037Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3623311Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3623424Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3623820Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3624045Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3624407Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3624615Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3624924Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3625174Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3625461Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3625630Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3625916Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3626091Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3626426Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3626600Z     return self.apply_standard()
2025-01-22T20:11:05.3626912Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3627099Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3627433Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3627710Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3628176Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3628305Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3628640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3628757Z     return self._get_value(key)
2025-01-22T20:11:05.3629142Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3629277Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3629460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3629465Z 
2025-01-22T20:11:05.3629656Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3629958Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3630134Z        't046000', 't048000'],
2025-01-22T20:11:05.3630262Z       dtype='object')
2025-01-22T20:11:05.3630400Z key = 'cups'
2025-01-22T20:11:05.3630405Z 
2025-01-22T20:11:05.3630514Z     def get_loc(self, key):
2025-01-22T20:11:05.3630668Z         """
2025-01-22T20:11:05.3630846Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3631042Z     
2025-01-22T20:11:05.3631148Z         Parameters
2025-01-22T20:11:05.3631288Z         ----------
2025-01-22T20:11:05.3631418Z         key : label
2025-01-22T20:11:05.3631541Z     
2025-01-22T20:11:05.3631697Z         Returns
2025-01-22T20:11:05.3631857Z         -------
2025-01-22T20:11:05.3632021Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3632173Z     
2025-01-22T20:11:05.3632295Z         Examples
2025-01-22T20:11:05.3632439Z         --------
2025-01-22T20:11:05.3632618Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3632738Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3632898Z         1
2025-01-22T20:11:05.3633129Z     
2025-01-22T20:11:05.3633335Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3633473Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3633754Z         slice(1, 3, None)
2025-01-22T20:11:05.3633860Z     
2025-01-22T20:11:05.3634040Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3634147Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3634373Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3634525Z         """
2025-01-22T20:11:05.3634781Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3634916Z         try:
2025-01-22T20:11:05.3635032Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3635259Z         except KeyError as err:
2025-01-22T20:11:05.3635389Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3635557Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3635777Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3635959Z             ):
2025-01-22T20:11:05.3636141Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3636336Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3636452Z E           KeyError: 'cups'
2025-01-22T20:11:05.3636457Z 
2025-01-22T20:11:05.3636822Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3637203Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_number_density] _
2025-01-22T20:11:05.3637213Z 
2025-01-22T20:11:05.3646114Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3646394Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3646478Z        't046000', 't048000'],
2025-01-22T20:11:05.3646559Z       dtype='object')
2025-01-22T20:11:05.3646646Z key = 'cups'
2025-01-22T20:11:05.3646652Z 
2025-01-22T20:11:05.3646737Z     def get_loc(self, key):
2025-01-22T20:11:05.3646811Z         """
2025-01-22T20:11:05.3646988Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3647062Z     
2025-01-22T20:11:05.3647141Z         Parameters
2025-01-22T20:11:05.3647215Z         ----------
2025-01-22T20:11:05.3647292Z         key : label
2025-01-22T20:11:05.3647359Z     
2025-01-22T20:11:05.3647431Z         Returns
2025-01-22T20:11:05.3647500Z         -------
2025-01-22T20:11:05.3647653Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3647720Z     
2025-01-22T20:11:05.3647796Z         Examples
2025-01-22T20:11:05.3647866Z         --------
2025-01-22T20:11:05.3647975Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3648062Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3648138Z         1
2025-01-22T20:11:05.3648204Z     
2025-01-22T20:11:05.3648320Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3648410Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3648491Z         slice(1, 3, None)
2025-01-22T20:11:05.3648558Z     
2025-01-22T20:11:05.3648676Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3648773Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3648865Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3648937Z         """
2025-01-22T20:11:05.3649044Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3649124Z         try:
2025-01-22T20:11:05.3649229Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3649234Z 
2025-01-22T20:11:05.3649504Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3649620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3649770Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3650037Z     ???
2025-01-22T20:11:05.3650176Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3650244Z     ???
2025-01-22T20:11:05.3650527Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3650598Z     ???
2025-01-22T20:11:05.3650707Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3650711Z 
2025-01-22T20:11:05.3650784Z >   ???
2025-01-22T20:11:05.3650974Z E   KeyError: 'cups'
2025-01-22T20:11:05.3650980Z 
2025-01-22T20:11:05.3651118Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3651123Z 
2025-01-22T20:11:05.3651292Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3651297Z 
2025-01-22T20:11:05.3651525Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3651853Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3652494Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3652500Z 
2025-01-22T20:11:05.3652595Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3652670Z     def plasma(
2025-01-22T20:11:05.3652743Z         self,
2025-01-22T20:11:05.3652828Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3652901Z         config,
2025-01-22T20:11:05.3652968Z     ):
2025-01-22T20:11:05.3653088Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3653185Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3653190Z 
2025-01-22T20:11:05.3653318Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3653428Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3653671Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3653764Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3653936Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3654041Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3654148Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3654230Z     return BasePlasma(
2025-01-22T20:11:05.3654314Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3654411Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3654500Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3654585Z     self.update(**kwargs)
2025-01-22T20:11:05.3654676Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3654803Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3654914Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3655021Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3655278Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3655432Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3655646Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3655743Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3655874Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3656043Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3656222Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3656394Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3656659Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3656832Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3657017Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3657247Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3657509Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3657641Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3657880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3657970Z     return self.apply_standard()
2025-01-22T20:11:05.3658347Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3658473Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3658777Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3658902Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3659116Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3659213Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3659486Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3659570Z     return self._get_value(key)
2025-01-22T20:11:05.3659832Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3659919Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3660039Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3660045Z 
2025-01-22T20:11:05.3660200Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3660416Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3660490Z        't046000', 't048000'],
2025-01-22T20:11:05.3660571Z       dtype='object')
2025-01-22T20:11:05.3660652Z key = 'cups'
2025-01-22T20:11:05.3660657Z 
2025-01-22T20:11:05.3660736Z     def get_loc(self, key):
2025-01-22T20:11:05.3660809Z         """
2025-01-22T20:11:05.3660966Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3661041Z     
2025-01-22T20:11:05.3661114Z         Parameters
2025-01-22T20:11:05.3661195Z         ----------
2025-01-22T20:11:05.3661267Z         key : label
2025-01-22T20:11:05.3661339Z     
2025-01-22T20:11:05.3661410Z         Returns
2025-01-22T20:11:05.3661489Z         -------
2025-01-22T20:11:05.3661622Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3661693Z     
2025-01-22T20:11:05.3661763Z         Examples
2025-01-22T20:11:05.3661839Z         --------
2025-01-22T20:11:05.3661936Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3662028Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3662095Z         1
2025-01-22T20:11:05.3662168Z     
2025-01-22T20:11:05.3662281Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3662369Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3662450Z         slice(1, 3, None)
2025-01-22T20:11:05.3662516Z     
2025-01-22T20:11:05.3662629Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3662720Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3662813Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3662883Z         """
2025-01-22T20:11:05.3662988Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3663059Z         try:
2025-01-22T20:11:05.3663167Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3663248Z         except KeyError as err:
2025-01-22T20:11:05.3663354Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3663455Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3663685Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3663875Z             ):
2025-01-22T20:11:05.3663968Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3664060Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3664144Z E           KeyError: 'cups'
2025-01-22T20:11:05.3664149Z 
2025-01-22T20:11:05.3664429Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3664796Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] _
2025-01-22T20:11:05.3664902Z 
2025-01-22T20:11:05.3665064Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3665282Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3665363Z        't046000', 't048000'],
2025-01-22T20:11:05.3665442Z       dtype='object')
2025-01-22T20:11:05.3665514Z key = 'cups'
2025-01-22T20:11:05.3665523Z 
2025-01-22T20:11:05.3665608Z     def get_loc(self, key):
2025-01-22T20:11:05.3665676Z         """
2025-01-22T20:11:05.3665837Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3665903Z     
2025-01-22T20:11:05.3665984Z         Parameters
2025-01-22T20:11:05.3666053Z         ----------
2025-01-22T20:11:05.3666128Z         key : label
2025-01-22T20:11:05.3666193Z     
2025-01-22T20:11:05.3666267Z         Returns
2025-01-22T20:11:05.3666336Z         -------
2025-01-22T20:11:05.3666472Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3666538Z     
2025-01-22T20:11:05.3666615Z         Examples
2025-01-22T20:11:05.3666685Z         --------
2025-01-22T20:11:05.3666785Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3666871Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3666944Z         1
2025-01-22T20:11:05.3667015Z     
2025-01-22T20:11:05.3667116Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3667210Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3667287Z         slice(1, 3, None)
2025-01-22T20:11:05.3667358Z     
2025-01-22T20:11:05.3667464Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3667559Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3667648Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3667720Z         """
2025-01-22T20:11:05.3667821Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3667897Z         try:
2025-01-22T20:11:05.3667995Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3668000Z 
2025-01-22T20:11:05.3668259Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3668371Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3668513Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3668589Z     ???
2025-01-22T20:11:05.3668718Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3668795Z     ???
2025-01-22T20:11:05.3669065Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3669136Z     ???
2025-01-22T20:11:05.3669242Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3669247Z 
2025-01-22T20:11:05.3669318Z >   ???
2025-01-22T20:11:05.3669393Z E   KeyError: 'cups'
2025-01-22T20:11:05.3669401Z 
2025-01-22T20:11:05.3669530Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3669534Z 
2025-01-22T20:11:05.3669704Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3669714Z 
2025-01-22T20:11:05.3669933Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3670256Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3670967Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3670973Z 
2025-01-22T20:11:05.3671068Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3671138Z     def plasma(
2025-01-22T20:11:05.3671206Z         self,
2025-01-22T20:11:05.3671285Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3671446Z         config,
2025-01-22T20:11:05.3671515Z     ):
2025-01-22T20:11:05.3671624Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3671717Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3671722Z 
2025-01-22T20:11:05.3671842Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3671952Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3672061Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3672150Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3672313Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3672415Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3672521Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3672600Z     return BasePlasma(
2025-01-22T20:11:05.3672684Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3672775Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3672866Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3672949Z     self.update(**kwargs)
2025-01-22T20:11:05.3673041Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3673161Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3673275Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3673377Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3673725Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3673882Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3674094Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3674190Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3674321Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3674487Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3674665Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3674842Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3675098Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3675275Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3675455Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3675566Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3675819Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3675947Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3676186Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3676277Z     return self.apply_standard()
2025-01-22T20:11:05.3676552Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3676677Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3676989Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3677107Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3677325Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3677551Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3677820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3677904Z     return self._get_value(key)
2025-01-22T20:11:05.3678165Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3678250Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3678362Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3678468Z 
2025-01-22T20:11:05.3678635Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3678842Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3678922Z        't046000', 't048000'],
2025-01-22T20:11:05.3678997Z       dtype='object')
2025-01-22T20:11:05.3679077Z key = 'cups'
2025-01-22T20:11:05.3679082Z 
2025-01-22T20:11:05.3679159Z     def get_loc(self, key):
2025-01-22T20:11:05.3679231Z         """
2025-01-22T20:11:05.3679390Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3679461Z     
2025-01-22T20:11:05.3679533Z         Parameters
2025-01-22T20:11:05.3679608Z         ----------
2025-01-22T20:11:05.3679679Z         key : label
2025-01-22T20:11:05.3679750Z     
2025-01-22T20:11:05.3679817Z         Returns
2025-01-22T20:11:05.3679892Z         -------
2025-01-22T20:11:05.3680031Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3680097Z     
2025-01-22T20:11:05.3680171Z         Examples
2025-01-22T20:11:05.3680240Z         --------
2025-01-22T20:11:05.3680345Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3680430Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3680502Z         1
2025-01-22T20:11:05.3680569Z     
2025-01-22T20:11:05.3680677Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3680768Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3680851Z         slice(1, 3, None)
2025-01-22T20:11:05.3680917Z     
2025-01-22T20:11:05.3681029Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3681121Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3681215Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3681283Z         """
2025-01-22T20:11:05.3681388Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3681458Z         try:
2025-01-22T20:11:05.3681563Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3681650Z         except KeyError as err:
2025-01-22T20:11:05.3681747Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3681850Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3681968Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3682045Z             ):
2025-01-22T20:11:05.3682135Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3682226Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3682305Z E           KeyError: 'cups'
2025-01-22T20:11:05.3682310Z 
2025-01-22T20:11:05.3682581Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3682923Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] _
2025-01-22T20:11:05.3682937Z 
2025-01-22T20:11:05.3683089Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3683304Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3683378Z        't046000', 't048000'],
2025-01-22T20:11:05.3683457Z       dtype='object')
2025-01-22T20:11:05.3683855Z key = 'cups'
2025-01-22T20:11:05.3683861Z 
2025-01-22T20:11:05.3684068Z     def get_loc(self, key):
2025-01-22T20:11:05.3684136Z         """
2025-01-22T20:11:05.3684299Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3684365Z     
2025-01-22T20:11:05.3684443Z         Parameters
2025-01-22T20:11:05.3684514Z         ----------
2025-01-22T20:11:05.3684590Z         key : label
2025-01-22T20:11:05.3684656Z     
2025-01-22T20:11:05.3684732Z         Returns
2025-01-22T20:11:05.3684801Z         -------
2025-01-22T20:11:05.3684943Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3685115Z     
2025-01-22T20:11:05.3685185Z         Examples
2025-01-22T20:11:05.3685259Z         --------
2025-01-22T20:11:05.3685356Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3685447Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3685514Z         1
2025-01-22T20:11:05.3685585Z     
2025-01-22T20:11:05.3685685Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3685780Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3685857Z         slice(1, 3, None)
2025-01-22T20:11:05.3685930Z     
2025-01-22T20:11:05.3686035Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3686130Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3686219Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3686302Z         """
2025-01-22T20:11:05.3686404Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3686480Z         try:
2025-01-22T20:11:05.3686582Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3686587Z 
2025-01-22T20:11:05.3686851Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3686961Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3687108Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3687182Z     ???
2025-01-22T20:11:05.3687316Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3687393Z     ???
2025-01-22T20:11:05.3687667Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3687745Z     ???
2025-01-22T20:11:05.3687852Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3687857Z 
2025-01-22T20:11:05.3687929Z >   ???
2025-01-22T20:11:05.3688007Z E   KeyError: 'cups'
2025-01-22T20:11:05.3688011Z 
2025-01-22T20:11:05.3688147Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3688151Z 
2025-01-22T20:11:05.3688323Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3688328Z 
2025-01-22T20:11:05.3688550Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3688874Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3689498Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3689503Z 
2025-01-22T20:11:05.3689598Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3689671Z     def plasma(
2025-01-22T20:11:05.3689745Z         self,
2025-01-22T20:11:05.3689825Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3689902Z         config,
2025-01-22T20:11:05.3689975Z     ):
2025-01-22T20:11:05.3690086Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3690184Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3690188Z 
2025-01-22T20:11:05.3690308Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3690419Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3690521Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3690700Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3690867Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3690972Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3691080Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3691163Z     return BasePlasma(
2025-01-22T20:11:05.3691247Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3691339Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3691508Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3691588Z     self.update(**kwargs)
2025-01-22T20:11:05.3691683Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3691805Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3691919Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3692022Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3692271Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3692426Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3692643Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3692737Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3692870Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3693038Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3693214Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3693393Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3693778Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3693957Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3694134Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3694244Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3694497Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3694623Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3694865Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3694957Z     return self.apply_standard()
2025-01-22T20:11:05.3695232Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3695357Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3695674Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3695791Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3696009Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3696100Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3696374Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3696463Z     return self._get_value(key)
2025-01-22T20:11:05.3696731Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3696820Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3696939Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3696947Z 
2025-01-22T20:11:05.3697111Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3697323Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3697402Z        't046000', 't048000'],
2025-01-22T20:11:05.3697478Z       dtype='object')
2025-01-22T20:11:05.3697555Z key = 'cups'
2025-01-22T20:11:05.3697674Z 
2025-01-22T20:11:05.3697757Z     def get_loc(self, key):
2025-01-22T20:11:05.3697833Z         """
2025-01-22T20:11:05.3697996Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3698068Z     
2025-01-22T20:11:05.3698140Z         Parameters
2025-01-22T20:11:05.3698221Z         ----------
2025-01-22T20:11:05.3698293Z         key : label
2025-01-22T20:11:05.3698369Z     
2025-01-22T20:11:05.3698438Z         Returns
2025-01-22T20:11:05.3698516Z         -------
2025-01-22T20:11:05.3698659Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3698849Z     
2025-01-22T20:11:05.3698926Z         Examples
2025-01-22T20:11:05.3699000Z         --------
2025-01-22T20:11:05.3699107Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3699194Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3699270Z         1
2025-01-22T20:11:05.3699337Z     
2025-01-22T20:11:05.3699451Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3699544Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3699628Z         slice(1, 3, None)
2025-01-22T20:11:05.3699695Z     
2025-01-22T20:11:05.3699812Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3699903Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3700003Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3700071Z         """
2025-01-22T20:11:05.3700180Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3700255Z         try:
2025-01-22T20:11:05.3700355Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3700444Z         except KeyError as err:
2025-01-22T20:11:05.3700541Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3700645Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3700764Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3700837Z             ):
2025-01-22T20:11:05.3700931Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3701020Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3701099Z E           KeyError: 'cups'
2025-01-22T20:11:05.3701104Z 
2025-01-22T20:11:05.3701383Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3701702Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] _
2025-01-22T20:11:05.3701714Z 
2025-01-22T20:11:05.3701872Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3702091Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3702164Z        't046000', 't048000'],
2025-01-22T20:11:05.3702242Z       dtype='object')
2025-01-22T20:11:05.3702314Z key = 'cups'
2025-01-22T20:11:05.3702318Z 
2025-01-22T20:11:05.3702403Z     def get_loc(self, key):
2025-01-22T20:11:05.3702474Z         """
2025-01-22T20:11:05.3702641Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3702708Z     
2025-01-22T20:11:05.3702787Z         Parameters
2025-01-22T20:11:05.3702857Z         ----------
2025-01-22T20:11:05.3702936Z         key : label
2025-01-22T20:11:05.3703003Z     
2025-01-22T20:11:05.3703078Z         Returns
2025-01-22T20:11:05.3703154Z         -------
2025-01-22T20:11:05.3703286Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3703363Z     
2025-01-22T20:11:05.3703434Z         Examples
2025-01-22T20:11:05.3703633Z         --------
2025-01-22T20:11:05.3703733Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3703823Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3703891Z         1
2025-01-22T20:11:05.3703962Z     
2025-01-22T20:11:05.3704063Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3704154Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3704349Z         slice(1, 3, None)
2025-01-22T20:11:05.3704420Z     
2025-01-22T20:11:05.3704528Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3704621Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3704710Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3704784Z         """
2025-01-22T20:11:05.3704884Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3704960Z         try:
2025-01-22T20:11:05.3705065Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3705171Z 
2025-01-22T20:11:05.3705421Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3705539Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3705679Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3705757Z     ???
2025-01-22T20:11:05.3705891Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3705966Z     ???
2025-01-22T20:11:05.3706234Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3706311Z     ???
2025-01-22T20:11:05.3706417Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3706422Z 
2025-01-22T20:11:05.3706493Z >   ???
2025-01-22T20:11:05.3706573Z E   KeyError: 'cups'
2025-01-22T20:11:05.3706577Z 
2025-01-22T20:11:05.3706705Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3706713Z 
2025-01-22T20:11:05.3706884Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3706889Z 
2025-01-22T20:11:05.3707109Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3707434Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3708058Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3708070Z 
2025-01-22T20:11:05.3708158Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3708239Z     def plasma(
2025-01-22T20:11:05.3708309Z         self,
2025-01-22T20:11:05.3708396Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3708466Z         config,
2025-01-22T20:11:05.3708548Z     ):
2025-01-22T20:11:05.3708659Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3708760Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3708764Z 
2025-01-22T20:11:05.3708886Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3708997Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3709101Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3709201Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3709366Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3709472Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3709589Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3709667Z     return BasePlasma(
2025-01-22T20:11:05.3709758Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3709849Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3709944Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3710026Z     self.update(**kwargs)
2025-01-22T20:11:05.3710121Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3710243Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3710357Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3710458Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3710713Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3710954Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3711170Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3711270Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3711397Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3711583Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3711752Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3712001Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3712256Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3712435Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3712649Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3712756Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3713016Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3713148Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3713397Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3713483Z     return self.apply_standard()
2025-01-22T20:11:05.3713864Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3713988Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3714297Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3714412Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3714632Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3714717Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3714988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3715077Z     return self._get_value(key)
2025-01-22T20:11:05.3715339Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3715432Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3715543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3715551Z 
2025-01-22T20:11:05.3715712Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3715923Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3716004Z        't046000', 't048000'],
2025-01-22T20:11:05.3716079Z       dtype='object')
2025-01-22T20:11:05.3716156Z key = 'cups'
2025-01-22T20:11:05.3716161Z 
2025-01-22T20:11:05.3716240Z     def get_loc(self, key):
2025-01-22T20:11:05.3716316Z         """
2025-01-22T20:11:05.3716480Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3716547Z     
2025-01-22T20:11:05.3716628Z         Parameters
2025-01-22T20:11:05.3716699Z         ----------
2025-01-22T20:11:05.3716779Z         key : label
2025-01-22T20:11:05.3716846Z     
2025-01-22T20:11:05.3716923Z         Returns
2025-01-22T20:11:05.3716992Z         -------
2025-01-22T20:11:05.3717131Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3717201Z     
2025-01-22T20:11:05.3717279Z         Examples
2025-01-22T20:11:05.3717349Z         --------
2025-01-22T20:11:05.3717450Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3717536Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3717610Z         1
2025-01-22T20:11:05.3717677Z     
2025-01-22T20:11:05.3717786Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3717874Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3718074Z         slice(1, 3, None)
2025-01-22T20:11:05.3718140Z     
2025-01-22T20:11:05.3718256Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3718351Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3718445Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3718519Z         """
2025-01-22T20:11:05.3718621Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3718697Z         try:
2025-01-22T20:11:05.3718898Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3718987Z         except KeyError as err:
2025-01-22T20:11:05.3719084Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3719191Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3719312Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3719387Z             ):
2025-01-22T20:11:05.3719477Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3719574Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3719657Z E           KeyError: 'cups'
2025-01-22T20:11:05.3719669Z 
2025-01-22T20:11:05.3719939Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3720268Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] _
2025-01-22T20:11:05.3720274Z 
2025-01-22T20:11:05.3720428Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3720642Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3720716Z        't046000', 't048000'],
2025-01-22T20:11:05.3720798Z       dtype='object')
2025-01-22T20:11:05.3720869Z key = 'cups'
2025-01-22T20:11:05.3720873Z 
2025-01-22T20:11:05.3720959Z     def get_loc(self, key):
2025-01-22T20:11:05.3721026Z         """
2025-01-22T20:11:05.3721195Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3721267Z     
2025-01-22T20:11:05.3721339Z         Parameters
2025-01-22T20:11:05.3721415Z         ----------
2025-01-22T20:11:05.3721488Z         key : label
2025-01-22T20:11:05.3721559Z     
2025-01-22T20:11:05.3721628Z         Returns
2025-01-22T20:11:05.3721702Z         -------
2025-01-22T20:11:05.3721830Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3721901Z     
2025-01-22T20:11:05.3721973Z         Examples
2025-01-22T20:11:05.3722047Z         --------
2025-01-22T20:11:05.3722144Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3722231Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3722299Z         1
2025-01-22T20:11:05.3722369Z     
2025-01-22T20:11:05.3722469Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3722560Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3722639Z         slice(1, 3, None)
2025-01-22T20:11:05.3722710Z     
2025-01-22T20:11:05.3722825Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3722915Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3723009Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3723076Z         """
2025-01-22T20:11:05.3723181Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3723249Z         try:
2025-01-22T20:11:05.3723354Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3723361Z 
2025-01-22T20:11:05.3723831Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3723951Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3724089Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3724165Z     ???
2025-01-22T20:11:05.3724294Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3724507Z     ???
2025-01-22T20:11:05.3724785Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3724853Z     ???
2025-01-22T20:11:05.3724962Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3724966Z 
2025-01-22T20:11:05.3725031Z >   ???
2025-01-22T20:11:05.3725112Z E   KeyError: 'cups'
2025-01-22T20:11:05.3725117Z 
2025-01-22T20:11:05.3725244Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3725348Z 
2025-01-22T20:11:05.3725524Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3725528Z 
2025-01-22T20:11:05.3725749Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3726075Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3726700Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3726710Z 
2025-01-22T20:11:05.3726797Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3726874Z     def plasma(
2025-01-22T20:11:05.3726942Z         self,
2025-01-22T20:11:05.3727029Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3727098Z         config,
2025-01-22T20:11:05.3727170Z     ):
2025-01-22T20:11:05.3727286Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3727386Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3727390Z 
2025-01-22T20:11:05.3727509Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3727621Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3727730Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3727814Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3727986Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3728085Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3728198Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3728277Z     return BasePlasma(
2025-01-22T20:11:05.3728367Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3728455Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3728551Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3728631Z     self.update(**kwargs)
2025-01-22T20:11:05.3728727Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3728851Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3728966Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3729072Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3729317Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3729472Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3729683Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3729784Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3729910Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3730083Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3730252Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3730428Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3730685Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3730860Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3731042Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3731143Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3731485Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3731607Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3731852Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3731937Z     return self.apply_standard()
2025-01-22T20:11:05.3732219Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3732338Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3732718Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3732834Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3733052Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3733142Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3733406Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3733612Z     return self._get_value(key)
2025-01-22T20:11:05.3733874Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3733963Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3734069Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3734074Z 
2025-01-22T20:11:05.3734234Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3734445Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3734524Z        't046000', 't048000'],
2025-01-22T20:11:05.3734602Z       dtype='object')
2025-01-22T20:11:05.3734674Z key = 'cups'
2025-01-22T20:11:05.3734679Z 
2025-01-22T20:11:05.3734762Z     def get_loc(self, key):
2025-01-22T20:11:05.3734834Z         """
2025-01-22T20:11:05.3734995Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3735063Z     
2025-01-22T20:11:05.3735140Z         Parameters
2025-01-22T20:11:05.3735211Z         ----------
2025-01-22T20:11:05.3735289Z         key : label
2025-01-22T20:11:05.3735355Z     
2025-01-22T20:11:05.3735429Z         Returns
2025-01-22T20:11:05.3735498Z         -------
2025-01-22T20:11:05.3735631Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3735708Z     
2025-01-22T20:11:05.3735782Z         Examples
2025-01-22T20:11:05.3735852Z         --------
2025-01-22T20:11:05.3735953Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3736044Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3736112Z         1
2025-01-22T20:11:05.3736183Z     
2025-01-22T20:11:05.3736285Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3736425Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3736566Z         slice(1, 3, None)
2025-01-22T20:11:05.3736691Z     
2025-01-22T20:11:05.3736814Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3736910Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3737001Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3737074Z         """
2025-01-22T20:11:05.3737174Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3737247Z         try:
2025-01-22T20:11:05.3737345Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3737435Z         except KeyError as err:
2025-01-22T20:11:05.3737530Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3737633Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3737758Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3737826Z             ):
2025-01-22T20:11:05.3737920Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3738136Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3738220Z E           KeyError: 'cups'
2025-01-22T20:11:05.3738225Z 
2025-01-22T20:11:05.3738489Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3738856Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-transition_probabilities] _
2025-01-22T20:11:05.3738862Z 
2025-01-22T20:11:05.3739015Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3739326Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3739404Z        't046000', 't048000'],
2025-01-22T20:11:05.3739479Z       dtype='object')
2025-01-22T20:11:05.3739555Z key = 'cups'
2025-01-22T20:11:05.3739559Z 
2025-01-22T20:11:05.3739637Z     def get_loc(self, key):
2025-01-22T20:11:05.3739709Z         """
2025-01-22T20:11:05.3739867Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3739937Z     
2025-01-22T20:11:05.3740012Z         Parameters
2025-01-22T20:11:05.3740086Z         ----------
2025-01-22T20:11:05.3740156Z         key : label
2025-01-22T20:11:05.3740229Z     
2025-01-22T20:11:05.3740296Z         Returns
2025-01-22T20:11:05.3740371Z         -------
2025-01-22T20:11:05.3740497Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3740568Z     
2025-01-22T20:11:05.3740637Z         Examples
2025-01-22T20:11:05.3740714Z         --------
2025-01-22T20:11:05.3740809Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3740897Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3740971Z         1
2025-01-22T20:11:05.3741037Z     
2025-01-22T20:11:05.3741138Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3741224Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3741304Z         slice(1, 3, None)
2025-01-22T20:11:05.3741374Z     
2025-01-22T20:11:05.3741485Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3741576Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3741669Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3741737Z         """
2025-01-22T20:11:05.3741842Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3741909Z         try:
2025-01-22T20:11:05.3742012Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3742017Z 
2025-01-22T20:11:05.3742261Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3742374Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3742514Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3742580Z     ???
2025-01-22T20:11:05.3742713Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3742779Z     ???
2025-01-22T20:11:05.3743053Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3743119Z     ???
2025-01-22T20:11:05.3743229Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3743233Z 
2025-01-22T20:11:05.3743298Z >   ???
2025-01-22T20:11:05.3743379Z E   KeyError: 'cups'
2025-01-22T20:11:05.3743383Z 
2025-01-22T20:11:05.3743614Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3743626Z 
2025-01-22T20:11:05.3743796Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3743801Z 
2025-01-22T20:11:05.3744027Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3744343Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3744967Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3745109Z 
2025-01-22T20:11:05.3745198Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3745275Z     def plasma(
2025-01-22T20:11:05.3745343Z         self,
2025-01-22T20:11:05.3745426Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3745499Z         config,
2025-01-22T20:11:05.3745564Z     ):
2025-01-22T20:11:05.3745679Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3745874Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3745879Z 
2025-01-22T20:11:05.3746002Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3746110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3746216Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3746298Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3746470Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3746567Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3746679Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3746755Z     return BasePlasma(
2025-01-22T20:11:05.3746843Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3746933Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3747023Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3747105Z     self.update(**kwargs)
2025-01-22T20:11:05.3747197Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3747321Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3747432Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3747537Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3747781Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3747939Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3748148Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3748246Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3748373Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3748544Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3748717Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3748888Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3749153Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3749325Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3749508Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3749609Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3749866Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3749991Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3750237Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3750323Z     return self.apply_standard()
2025-01-22T20:11:05.3750603Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3750724Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3751031Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3751152Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3751364Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3751454Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3751720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3751912Z     return self._get_value(key)
2025-01-22T20:11:05.3752167Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3752257Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3752363Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3752374Z 
2025-01-22T20:11:05.3752527Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3752811Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3752884Z        't046000', 't048000'],
2025-01-22T20:11:05.3752963Z       dtype='object')
2025-01-22T20:11:05.3753032Z key = 'cups'
2025-01-22T20:11:05.3753036Z 
2025-01-22T20:11:05.3753119Z     def get_loc(self, key):
2025-01-22T20:11:05.3753186Z         """
2025-01-22T20:11:05.3753350Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3753416Z     
2025-01-22T20:11:05.3753607Z         Parameters
2025-01-22T20:11:05.3753682Z         ----------
2025-01-22T20:11:05.3753758Z         key : label
2025-01-22T20:11:05.3753824Z     
2025-01-22T20:11:05.3753896Z         Returns
2025-01-22T20:11:05.3753970Z         -------
2025-01-22T20:11:05.3754102Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3754172Z     
2025-01-22T20:11:05.3754245Z         Examples
2025-01-22T20:11:05.3754319Z         --------
2025-01-22T20:11:05.3754416Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3754506Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3754572Z         1
2025-01-22T20:11:05.3754644Z     
2025-01-22T20:11:05.3754747Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3754838Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3754913Z         slice(1, 3, None)
2025-01-22T20:11:05.3754987Z     
2025-01-22T20:11:05.3755093Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3755186Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3755275Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3755347Z         """
2025-01-22T20:11:05.3755448Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3755521Z         try:
2025-01-22T20:11:05.3755625Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3755710Z         except KeyError as err:
2025-01-22T20:11:05.3755811Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3755909Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3756032Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3756100Z             ):
2025-01-22T20:11:05.3756197Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3756282Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3756369Z E           KeyError: 'cups'
2025-01-22T20:11:05.3756373Z 
2025-01-22T20:11:05.3756638Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3756948Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] _
2025-01-22T20:11:05.3756954Z 
2025-01-22T20:11:05.3757112Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3757319Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3757400Z        't046000', 't048000'],
2025-01-22T20:11:05.3757474Z       dtype='object')
2025-01-22T20:11:05.3757548Z key = 'cups'
2025-01-22T20:11:05.3757553Z 
2025-01-22T20:11:05.3757630Z     def get_loc(self, key):
2025-01-22T20:11:05.3757702Z         """
2025-01-22T20:11:05.3757859Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3758050Z     
2025-01-22T20:11:05.3758125Z         Parameters
2025-01-22T20:11:05.3758200Z         ----------
2025-01-22T20:11:05.3758272Z         key : label
2025-01-22T20:11:05.3758345Z     
2025-01-22T20:11:05.3758416Z         Returns
2025-01-22T20:11:05.3758485Z         -------
2025-01-22T20:11:05.3758617Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3758683Z     
2025-01-22T20:11:05.3758759Z         Examples
2025-01-22T20:11:05.3758828Z         --------
2025-01-22T20:11:05.3759031Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3759115Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3759187Z         1
2025-01-22T20:11:05.3759253Z     
2025-01-22T20:11:05.3759355Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3759441Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3759519Z         slice(1, 3, None)
2025-01-22T20:11:05.3759586Z     
2025-01-22T20:11:05.3759701Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3759790Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3759885Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3759952Z         """
2025-01-22T20:11:05.3760056Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3760130Z         try:
2025-01-22T20:11:05.3760228Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3760233Z 
2025-01-22T20:11:05.3760481Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3760593Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3760733Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3760800Z     ???
2025-01-22T20:11:05.3760935Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3761003Z     ???
2025-01-22T20:11:05.3761276Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3761348Z     ???
2025-01-22T20:11:05.3761458Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3761462Z 
2025-01-22T20:11:05.3761533Z >   ???
2025-01-22T20:11:05.3761608Z E   KeyError: 'cups'
2025-01-22T20:11:05.3761613Z 
2025-01-22T20:11:05.3761743Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3761747Z 
2025-01-22T20:11:05.3761913Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3761920Z 
2025-01-22T20:11:05.3762142Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3762456Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3763080Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3763089Z 
2025-01-22T20:11:05.3763181Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3763253Z     def plasma(
2025-01-22T20:11:05.3763325Z         self,
2025-01-22T20:11:05.3763406Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3763478Z         config,
2025-01-22T20:11:05.3763663Z     ):
2025-01-22T20:11:05.3763782Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3763877Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3763882Z 
2025-01-22T20:11:05.3764007Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3764111Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3764223Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3764304Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3764473Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3764701Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3764809Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3764891Z     return BasePlasma(
2025-01-22T20:11:05.3764975Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3765073Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3765161Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3765244Z     self.update(**kwargs)
2025-01-22T20:11:05.3765330Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3765552Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3765661Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3765767Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3766011Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3766166Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3766379Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3766474Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3766604Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3766770Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3766942Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3767114Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3767374Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3767546Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3767730Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3767835Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3768093Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3768221Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3768460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3768551Z     return self.apply_standard()
2025-01-22T20:11:05.3768827Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3768950Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3769260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3769381Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3769596Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3769691Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3769957Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3770047Z     return self._get_value(key)
2025-01-22T20:11:05.3770308Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3770392Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3770503Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3770508Z 
2025-01-22T20:11:05.3770663Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3770879Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3770952Z        't046000', 't048000'],
2025-01-22T20:11:05.3771033Z       dtype='object')
2025-01-22T20:11:05.3771105Z key = 'cups'
2025-01-22T20:11:05.3771109Z 
2025-01-22T20:11:05.3771193Z     def get_loc(self, key):
2025-01-22T20:11:05.3771265Z         """
2025-01-22T20:11:05.3771421Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3771576Z     
2025-01-22T20:11:05.3771651Z         Parameters
2025-01-22T20:11:05.3771726Z         ----------
2025-01-22T20:11:05.3771801Z         key : label
2025-01-22T20:11:05.3771871Z     
2025-01-22T20:11:05.3771939Z         Returns
2025-01-22T20:11:05.3772013Z         -------
2025-01-22T20:11:05.3772141Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3772212Z     
2025-01-22T20:11:05.3772282Z         Examples
2025-01-22T20:11:05.3772356Z         --------
2025-01-22T20:11:05.3772546Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3772638Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3772706Z         1
2025-01-22T20:11:05.3772777Z     
2025-01-22T20:11:05.3772879Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3772970Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3773050Z         slice(1, 3, None)
2025-01-22T20:11:05.3773116Z     
2025-01-22T20:11:05.3773231Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3773319Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3773412Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3773479Z         """
2025-01-22T20:11:05.3773702Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3773774Z         try:
2025-01-22T20:11:05.3773881Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3773963Z         except KeyError as err:
2025-01-22T20:11:05.3774069Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3774169Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3774293Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3774363Z             ):
2025-01-22T20:11:05.3774461Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3774545Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3774630Z E           KeyError: 'cups'
2025-01-22T20:11:05.3774638Z 
2025-01-22T20:11:05.3774939Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3775280Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues_norm_factor] _
2025-01-22T20:11:05.3775285Z 
2025-01-22T20:11:05.3775450Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3775658Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3775741Z        't046000', 't048000'],
2025-01-22T20:11:05.3775817Z       dtype='object')
2025-01-22T20:11:05.3775894Z key = 'cups'
2025-01-22T20:11:05.3775899Z 
2025-01-22T20:11:05.3775984Z     def get_loc(self, key):
2025-01-22T20:11:05.3776051Z         """
2025-01-22T20:11:05.3776212Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3776282Z     
2025-01-22T20:11:05.3776359Z         Parameters
2025-01-22T20:11:05.3776429Z         ----------
2025-01-22T20:11:05.3776504Z         key : label
2025-01-22T20:11:05.3776570Z     
2025-01-22T20:11:05.3776642Z         Returns
2025-01-22T20:11:05.3776714Z         -------
2025-01-22T20:11:05.3776847Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3776913Z     
2025-01-22T20:11:05.3776987Z         Examples
2025-01-22T20:11:05.3777058Z         --------
2025-01-22T20:11:05.3777159Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3777247Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3777319Z         1
2025-01-22T20:11:05.3777385Z     
2025-01-22T20:11:05.3777491Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3777577Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3777655Z         slice(1, 3, None)
2025-01-22T20:11:05.3777725Z     
2025-01-22T20:11:05.3777832Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3778046Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3778135Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3778208Z         """
2025-01-22T20:11:05.3778307Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3778380Z         try:
2025-01-22T20:11:05.3778476Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3778481Z 
2025-01-22T20:11:05.3778729Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3778939Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3779081Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3779148Z     ???
2025-01-22T20:11:05.3779287Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3779359Z     ???
2025-01-22T20:11:05.3779629Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3779706Z     ???
2025-01-22T20:11:05.3779811Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3779815Z 
2025-01-22T20:11:05.3779885Z >   ???
2025-01-22T20:11:05.3779961Z E   KeyError: 'cups'
2025-01-22T20:11:05.3779966Z 
2025-01-22T20:11:05.3780095Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3780099Z 
2025-01-22T20:11:05.3780264Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3780271Z 
2025-01-22T20:11:05.3780499Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3780818Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3781436Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3781445Z 
2025-01-22T20:11:05.3781539Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3781611Z     def plasma(
2025-01-22T20:11:05.3781685Z         self,
2025-01-22T20:11:05.3781765Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3781842Z         config,
2025-01-22T20:11:05.3781909Z     ):
2025-01-22T20:11:05.3782022Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3782116Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3782129Z 
2025-01-22T20:11:05.3782249Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3782360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3782463Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3782551Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3782715Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3782823Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3782930Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3783012Z     return BasePlasma(
2025-01-22T20:11:05.3783098Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3783189Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3783277Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3783363Z     self.update(**kwargs)
2025-01-22T20:11:05.3783450Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3783692Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3783813Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3783918Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3784167Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3784317Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3784530Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3784742Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3784874Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3785041Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3785213Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3785385Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3785643Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3785920Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3786098Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3786207Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3786457Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3786586Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3786827Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3786920Z     return self.apply_standard()
2025-01-22T20:11:05.3787197Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3787321Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3787627Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3787751Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3787970Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3788058Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3788324Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3788410Z     return self._get_value(key)
2025-01-22T20:11:05.3788673Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3788761Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3788875Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3788879Z 
2025-01-22T20:11:05.3789035Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3789247Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3789330Z        't046000', 't048000'],
2025-01-22T20:11:05.3789405Z       dtype='object')
2025-01-22T20:11:05.3789481Z key = 'cups'
2025-01-22T20:11:05.3789485Z 
2025-01-22T20:11:05.3789564Z     def get_loc(self, key):
2025-01-22T20:11:05.3789636Z         """
2025-01-22T20:11:05.3789791Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3789865Z     
2025-01-22T20:11:05.3789940Z         Parameters
2025-01-22T20:11:05.3790016Z         ----------
2025-01-22T20:11:05.3790086Z         key : label
2025-01-22T20:11:05.3790159Z     
2025-01-22T20:11:05.3790228Z         Returns
2025-01-22T20:11:05.3790303Z         -------
2025-01-22T20:11:05.3790430Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3790502Z     
2025-01-22T20:11:05.3790573Z         Examples
2025-01-22T20:11:05.3790649Z         --------
2025-01-22T20:11:05.3790754Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3790838Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3790910Z         1
2025-01-22T20:11:05.3790977Z     
2025-01-22T20:11:05.3791089Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3791176Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3791255Z         slice(1, 3, None)
2025-01-22T20:11:05.3791322Z     
2025-01-22T20:11:05.3791435Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3791611Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3791704Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3791771Z         """
2025-01-22T20:11:05.3791879Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3791949Z         try:
2025-01-22T20:11:05.3792052Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3792132Z         except KeyError as err:
2025-01-22T20:11:05.3792233Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3792409Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3792527Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3792599Z             ):
2025-01-22T20:11:05.3792688Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3792779Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3792857Z E           KeyError: 'cups'
2025-01-22T20:11:05.3792866Z 
2025-01-22T20:11:05.3793134Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3793460Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blue_estimator] _
2025-01-22T20:11:05.3793465Z 
2025-01-22T20:11:05.3793719Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3793926Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3794007Z        't046000', 't048000'],
2025-01-22T20:11:05.3794086Z       dtype='object')
2025-01-22T20:11:05.3794158Z key = 'cups'
2025-01-22T20:11:05.3794162Z 
2025-01-22T20:11:05.3794245Z     def get_loc(self, key):
2025-01-22T20:11:05.3794312Z         """
2025-01-22T20:11:05.3794471Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3794537Z     
2025-01-22T20:11:05.3794616Z         Parameters
2025-01-22T20:11:05.3794687Z         ----------
2025-01-22T20:11:05.3794762Z         key : label
2025-01-22T20:11:05.3794828Z     
2025-01-22T20:11:05.3794901Z         Returns
2025-01-22T20:11:05.3794970Z         -------
2025-01-22T20:11:05.3795101Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3795166Z     
2025-01-22T20:11:05.3795240Z         Examples
2025-01-22T20:11:05.3795310Z         --------
2025-01-22T20:11:05.3795407Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3795498Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3795565Z         1
2025-01-22T20:11:05.3795637Z     
2025-01-22T20:11:05.3795737Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3795826Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3795900Z         slice(1, 3, None)
2025-01-22T20:11:05.3795969Z     
2025-01-22T20:11:05.3796076Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3796173Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3796262Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3796335Z         """
2025-01-22T20:11:05.3796434Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3796507Z         try:
2025-01-22T20:11:05.3796604Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3796609Z 
2025-01-22T20:11:05.3796856Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3796973Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3797108Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3797181Z     ???
2025-01-22T20:11:05.3797311Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3797384Z     ???
2025-01-22T20:11:05.3797650Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3797840Z     ???
2025-01-22T20:11:05.3797946Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3797950Z 
2025-01-22T20:11:05.3798019Z >   ???
2025-01-22T20:11:05.3798094Z E   KeyError: 'cups'
2025-01-22T20:11:05.3798099Z 
2025-01-22T20:11:05.3798230Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3798234Z 
2025-01-22T20:11:05.3798402Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3798407Z 
2025-01-22T20:11:05.3798744Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3799063Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3799678Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3799686Z 
2025-01-22T20:11:05.3799781Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3799853Z     def plasma(
2025-01-22T20:11:05.3799926Z         self,
2025-01-22T20:11:05.3800011Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3800079Z         config,
2025-01-22T20:11:05.3800151Z     ):
2025-01-22T20:11:05.3800260Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3800358Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3800366Z 
2025-01-22T20:11:05.3800484Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3800595Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3800697Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3800786Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3800948Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3801051Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3801163Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3801245Z     return BasePlasma(
2025-01-22T20:11:05.3801335Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3801421Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3801512Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3801590Z     self.update(**kwargs)
2025-01-22T20:11:05.3801682Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3801801Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3801919Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3802019Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3802267Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3802418Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3802629Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3802726Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3802857Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3803028Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3803196Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3803371Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3803741Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3803920Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3804097Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3804203Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3804455Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3804580Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3804943Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3805036Z     return self.apply_standard()
2025-01-22T20:11:05.3805317Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3805436Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3805745Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3805976Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3806196Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3806282Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3806553Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3806635Z     return self._get_value(key)
2025-01-22T20:11:05.3806903Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3806989Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3807104Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3807109Z 
2025-01-22T20:11:05.3807269Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3807482Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3807565Z        't046000', 't048000'],
2025-01-22T20:11:05.3807639Z       dtype='object')
2025-01-22T20:11:05.3807714Z key = 'cups'
2025-01-22T20:11:05.3807719Z 
2025-01-22T20:11:05.3807797Z     def get_loc(self, key):
2025-01-22T20:11:05.3807869Z         """
2025-01-22T20:11:05.3808028Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3808100Z     
2025-01-22T20:11:05.3808174Z         Parameters
2025-01-22T20:11:05.3808250Z         ----------
2025-01-22T20:11:05.3808325Z         key : label
2025-01-22T20:11:05.3808391Z     
2025-01-22T20:11:05.3808464Z         Returns
2025-01-22T20:11:05.3808538Z         -------
2025-01-22T20:11:05.3808672Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3808738Z     
2025-01-22T20:11:05.3808813Z         Examples
2025-01-22T20:11:05.3808883Z         --------
2025-01-22T20:11:05.3808986Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3809075Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3809147Z         1
2025-01-22T20:11:05.3809214Z     
2025-01-22T20:11:05.3809321Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3809409Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3809490Z         slice(1, 3, None)
2025-01-22T20:11:05.3809554Z     
2025-01-22T20:11:05.3809669Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3809762Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3809857Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3809930Z         """
2025-01-22T20:11:05.3810030Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3810103Z         try:
2025-01-22T20:11:05.3810202Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3810288Z         except KeyError as err:
2025-01-22T20:11:05.3810385Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3810491Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3810610Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3810683Z             ):
2025-01-22T20:11:05.3810774Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3810866Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3810944Z E           KeyError: 'cups'
2025-01-22T20:11:05.3810948Z 
2025-01-22T20:11:05.3811307Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3811614Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-volume] _
2025-01-22T20:11:05.3811624Z 
2025-01-22T20:11:05.3811779Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3811991Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3812136Z        't046000', 't048000'],
2025-01-22T20:11:05.3812213Z       dtype='object')
2025-01-22T20:11:05.3812288Z key = 'cups'
2025-01-22T20:11:05.3812292Z 
2025-01-22T20:11:05.3812376Z     def get_loc(self, key):
2025-01-22T20:11:05.3812444Z         """
2025-01-22T20:11:05.3812635Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3812702Z     
2025-01-22T20:11:05.3813008Z         Parameters
2025-01-22T20:11:05.3813197Z         ----------
2025-01-22T20:11:05.3813334Z         key : label
2025-01-22T20:11:05.3813430Z     
2025-01-22T20:11:05.3813691Z         Returns
2025-01-22T20:11:05.3813853Z         -------
2025-01-22T20:11:05.3814092Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3814189Z     
2025-01-22T20:11:05.3814324Z         Examples
2025-01-22T20:11:05.3814425Z         --------
2025-01-22T20:11:05.3814620Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3826677Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3826952Z         1
2025-01-22T20:11:05.3827130Z     
2025-01-22T20:11:05.3827419Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3827652Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3827806Z         slice(1, 3, None)
2025-01-22T20:11:05.3827975Z     
2025-01-22T20:11:05.3828176Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3828322Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3828477Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3828590Z         """
2025-01-22T20:11:05.3828758Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3828872Z         try:
2025-01-22T20:11:05.3829036Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3829042Z 
2025-01-22T20:11:05.3829458Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3829647Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3829884Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3830000Z     ???
2025-01-22T20:11:05.3830214Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3830329Z     ???
2025-01-22T20:11:05.3830767Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3830872Z     ???
2025-01-22T20:11:05.3831062Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3831069Z 
2025-01-22T20:11:05.3831177Z >   ???
2025-01-22T20:11:05.3831318Z E   KeyError: 'cups'
2025-01-22T20:11:05.3831324Z 
2025-01-22T20:11:05.3831540Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3831547Z 
2025-01-22T20:11:05.3831822Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3831828Z 
2025-01-22T20:11:05.3832202Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3832707Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3833986Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3834212Z 
2025-01-22T20:11:05.3834389Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3834555Z     def plasma(
2025-01-22T20:11:05.3834671Z         self,
2025-01-22T20:11:05.3834804Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3834912Z         config,
2025-01-22T20:11:05.3835027Z     ):
2025-01-22T20:11:05.3835237Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3835397Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3835404Z 
2025-01-22T20:11:05.3835611Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3835950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3836120Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3836253Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3836527Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3836679Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3836866Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3836986Z     return BasePlasma(
2025-01-22T20:11:05.3837126Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3837260Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3837405Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3837529Z     self.update(**kwargs)
2025-01-22T20:11:05.3837676Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3837869Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3838046Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3838214Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3838604Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3838862Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3839193Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3839351Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3839561Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3839841Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3840118Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3840412Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3840827Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3841125Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3841443Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3841608Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3842030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3842225Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3842648Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3842796Z     return self.apply_standard()
2025-01-22T20:11:05.3843268Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3843471Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3844137Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3844344Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3844715Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3844864Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3845309Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3845449Z     return self._get_value(key)
2025-01-22T20:11:05.3845860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3846185Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3846367Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3846374Z 
2025-01-22T20:11:05.3846633Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3846977Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3847254Z        't046000', 't048000'],
2025-01-22T20:11:05.3847376Z       dtype='object')
2025-01-22T20:11:05.3847489Z key = 'cups'
2025-01-22T20:11:05.3847495Z 
2025-01-22T20:11:05.3847623Z     def get_loc(self, key):
2025-01-22T20:11:05.3847732Z         """
2025-01-22T20:11:05.3848001Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3848111Z     
2025-01-22T20:11:05.3868913Z         Parameters
2025-01-22T20:11:05.3869057Z         ----------
2025-01-22T20:11:05.3869140Z         key : label
2025-01-22T20:11:05.3869206Z     
2025-01-22T20:11:05.3869276Z         Returns
2025-01-22T20:11:05.3869345Z         -------
2025-01-22T20:11:05.3869504Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3869569Z     
2025-01-22T20:11:05.3869642Z         Examples
2025-01-22T20:11:05.3869711Z         --------
2025-01-22T20:11:05.3869819Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3869907Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3869978Z         1
2025-01-22T20:11:05.3870044Z     
2025-01-22T20:11:05.3870156Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3870249Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3870324Z         slice(1, 3, None)
2025-01-22T20:11:05.3870391Z     
2025-01-22T20:11:05.3870508Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3870605Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3870698Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3870767Z         """
2025-01-22T20:11:05.3870873Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3870942Z         try:
2025-01-22T20:11:05.3871042Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3871128Z         except KeyError as err:
2025-01-22T20:11:05.3871228Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3871332Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3871467Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3871534Z             ):
2025-01-22T20:11:05.3871628Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3871713Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3871795Z E           KeyError: 'cups'
2025-01-22T20:11:05.3871801Z 
2025-01-22T20:11:05.3872090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3872410Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-r_inner] _
2025-01-22T20:11:05.3872416Z 
2025-01-22T20:11:05.3872576Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3872788Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3872866Z        't046000', 't048000'],
2025-01-22T20:11:05.3872943Z       dtype='object')
2025-01-22T20:11:05.3873015Z key = 'cups'
2025-01-22T20:11:05.3873019Z 
2025-01-22T20:11:05.3873096Z     def get_loc(self, key):
2025-01-22T20:11:05.3873163Z         """
2025-01-22T20:11:05.3873323Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3873390Z     
2025-01-22T20:11:05.3873461Z         Parameters
2025-01-22T20:11:05.3873726Z         ----------
2025-01-22T20:11:05.3873982Z         key : label
2025-01-22T20:11:05.3874051Z     
2025-01-22T20:11:05.3874118Z         Returns
2025-01-22T20:11:05.3874189Z         -------
2025-01-22T20:11:05.3874324Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3874391Z     
2025-01-22T20:11:05.3874460Z         Examples
2025-01-22T20:11:05.3874531Z         --------
2025-01-22T20:11:05.3874627Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3874714Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3874782Z         1
2025-01-22T20:11:05.3874953Z     
2025-01-22T20:11:05.3875056Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3875142Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3875217Z         slice(1, 3, None)
2025-01-22T20:11:05.3875281Z     
2025-01-22T20:11:05.3875390Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3875479Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3875568Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3875638Z         """
2025-01-22T20:11:05.3875740Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3875806Z         try:
2025-01-22T20:11:05.3875904Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3875908Z 
2025-01-22T20:11:05.3876158Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3876271Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3876414Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3876480Z     ???
2025-01-22T20:11:05.3876606Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3876670Z     ???
2025-01-22T20:11:05.3876942Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3877008Z     ???
2025-01-22T20:11:05.3877115Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3877124Z 
2025-01-22T20:11:05.3877187Z >   ???
2025-01-22T20:11:05.3877264Z E   KeyError: 'cups'
2025-01-22T20:11:05.3877269Z 
2025-01-22T20:11:05.3877399Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3877406Z 
2025-01-22T20:11:05.3877572Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3877577Z 
2025-01-22T20:11:05.3877801Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3878125Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3878751Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3878757Z 
2025-01-22T20:11:05.3878847Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3878921Z     def plasma(
2025-01-22T20:11:05.3878988Z         self,
2025-01-22T20:11:05.3879069Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3879139Z         config,
2025-01-22T20:11:05.3879208Z     ):
2025-01-22T20:11:05.3879330Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3879428Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3879433Z 
2025-01-22T20:11:05.3879566Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3879678Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3879792Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3879880Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3880050Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3880161Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3880273Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3880466Z     return BasePlasma(
2025-01-22T20:11:05.3880553Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3880646Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3880736Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3880819Z     self.update(**kwargs)
2025-01-22T20:11:05.3880909Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3881036Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3881148Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3881331Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3881580Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3881740Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3881957Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3882054Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3882194Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3882361Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3882537Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3882712Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3882970Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3883145Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3883335Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3883438Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3883892Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3884032Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3884278Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3884374Z     return self.apply_standard()
2025-01-22T20:11:05.3884654Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3884783Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3885091Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3885216Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3885435Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3885530Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3885800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3885884Z     return self._get_value(key)
2025-01-22T20:11:05.3886153Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3886243Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3886360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3886364Z 
2025-01-22T20:11:05.3886520Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3886737Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3886812Z        't046000', 't048000'],
2025-01-22T20:11:05.3886897Z       dtype='object')
2025-01-22T20:11:05.3886969Z key = 'cups'
2025-01-22T20:11:05.3886979Z 
2025-01-22T20:11:05.3887059Z     def get_loc(self, key):
2025-01-22T20:11:05.3887132Z         """
2025-01-22T20:11:05.3887290Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3887362Z     
2025-01-22T20:11:05.3887434Z         Parameters
2025-01-22T20:11:05.3887512Z         ----------
2025-01-22T20:11:05.3887710Z         key : label
2025-01-22T20:11:05.3887784Z     
2025-01-22T20:11:05.3887854Z         Returns
2025-01-22T20:11:05.3887930Z         -------
2025-01-22T20:11:05.3888063Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3888135Z     
2025-01-22T20:11:05.3888206Z         Examples
2025-01-22T20:11:05.3888283Z         --------
2025-01-22T20:11:05.3888381Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3888472Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3888645Z         1
2025-01-22T20:11:05.3888716Z     
2025-01-22T20:11:05.3888821Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3888915Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3888996Z         slice(1, 3, None)
2025-01-22T20:11:05.3889063Z     
2025-01-22T20:11:05.3889176Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3889265Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3889363Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3889430Z         """
2025-01-22T20:11:05.3889536Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3889605Z         try:
2025-01-22T20:11:05.3889710Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3889792Z         except KeyError as err:
2025-01-22T20:11:05.3889895Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3889994Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3890121Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3890190Z             ):
2025-01-22T20:11:05.3890286Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3890376Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3890456Z E           KeyError: 'cups'
2025-01-22T20:11:05.3890461Z 
2025-01-22T20:11:05.3890734Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3891068Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population] _
2025-01-22T20:11:05.3891074Z 
2025-01-22T20:11:05.3891233Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3891440Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3891520Z        't046000', 't048000'],
2025-01-22T20:11:05.3891594Z       dtype='object')
2025-01-22T20:11:05.3891673Z key = 'cups'
2025-01-22T20:11:05.3891677Z 
2025-01-22T20:11:05.3891760Z     def get_loc(self, key):
2025-01-22T20:11:05.3891828Z         """
2025-01-22T20:11:05.3891989Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3892056Z     
2025-01-22T20:11:05.3892134Z         Parameters
2025-01-22T20:11:05.3892205Z         ----------
2025-01-22T20:11:05.3892281Z         key : label
2025-01-22T20:11:05.3892350Z     
2025-01-22T20:11:05.3892424Z         Returns
2025-01-22T20:11:05.3892494Z         -------
2025-01-22T20:11:05.3892631Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3892696Z     
2025-01-22T20:11:05.3892771Z         Examples
2025-01-22T20:11:05.3892841Z         --------
2025-01-22T20:11:05.3892943Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3893026Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3893099Z         1
2025-01-22T20:11:05.3893165Z     
2025-01-22T20:11:05.3893272Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3893362Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3893439Z         slice(1, 3, None)
2025-01-22T20:11:05.3893785Z     
2025-01-22T20:11:05.3893905Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3893999Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3894089Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3894285Z         """
2025-01-22T20:11:05.3894386Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3894458Z         try:
2025-01-22T20:11:05.3894556Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3894560Z 
2025-01-22T20:11:05.3894814Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3894925Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3895075Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3895253Z     ???
2025-01-22T20:11:05.3895385Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3895455Z     ???
2025-01-22T20:11:05.3895728Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3895799Z     ???
2025-01-22T20:11:05.3895904Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3895914Z 
2025-01-22T20:11:05.3895983Z >   ???
2025-01-22T20:11:05.3896060Z E   KeyError: 'cups'
2025-01-22T20:11:05.3896065Z 
2025-01-22T20:11:05.3896198Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3896202Z 
2025-01-22T20:11:05.3896372Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3896381Z 
2025-01-22T20:11:05.3896605Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3896927Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3897553Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3897559Z 
2025-01-22T20:11:05.3897652Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3897729Z     def plasma(
2025-01-22T20:11:05.3897805Z         self,
2025-01-22T20:11:05.3897884Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3897958Z         config,
2025-01-22T20:11:05.3898023Z     ):
2025-01-22T20:11:05.3898141Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3898242Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3898246Z 
2025-01-22T20:11:05.3898366Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3898475Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3898583Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3898671Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3898836Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3898939Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3899049Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3899130Z     return BasePlasma(
2025-01-22T20:11:05.3899218Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3899312Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3899401Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3899485Z     self.update(**kwargs)
2025-01-22T20:11:05.3899579Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3899701Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3899815Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3899917Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3900169Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3900320Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3900532Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3900626Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3900758Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3901019Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3901193Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3901369Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3901627Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3901804Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3902059Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3902167Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3902422Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3902549Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3902788Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3902884Z     return self.apply_standard()
2025-01-22T20:11:05.3903159Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3903283Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3903797Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3903924Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3904149Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3904235Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3904503Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3904587Z     return self._get_value(key)
2025-01-22T20:11:05.3904850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3904939Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3905052Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3905056Z 
2025-01-22T20:11:05.3905211Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3905423Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3905503Z        't046000', 't048000'],
2025-01-22T20:11:05.3905582Z       dtype='object')
2025-01-22T20:11:05.3905659Z key = 'cups'
2025-01-22T20:11:05.3905663Z 
2025-01-22T20:11:05.3905742Z     def get_loc(self, key):
2025-01-22T20:11:05.3905815Z         """
2025-01-22T20:11:05.3905973Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3906044Z     
2025-01-22T20:11:05.3906119Z         Parameters
2025-01-22T20:11:05.3906194Z         ----------
2025-01-22T20:11:05.3906265Z         key : label
2025-01-22T20:11:05.3906342Z     
2025-01-22T20:11:05.3906410Z         Returns
2025-01-22T20:11:05.3906486Z         -------
2025-01-22T20:11:05.3906616Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3906689Z     
2025-01-22T20:11:05.3906765Z         Examples
2025-01-22T20:11:05.3906835Z         --------
2025-01-22T20:11:05.3906937Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3907023Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3907096Z         1
2025-01-22T20:11:05.3907164Z     
2025-01-22T20:11:05.3907274Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3907361Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3907441Z         slice(1, 3, None)
2025-01-22T20:11:05.3907506Z     
2025-01-22T20:11:05.3907618Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3907709Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3907806Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3908016Z         """
2025-01-22T20:11:05.3908124Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3908192Z         try:
2025-01-22T20:11:05.3908299Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3908380Z         except KeyError as err:
2025-01-22T20:11:05.3908481Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3908586Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3908706Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3908882Z             ):
2025-01-22T20:11:05.3908984Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3909074Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3909153Z E           KeyError: 'cups'
2025-01-22T20:11:05.3909157Z 
2025-01-22T20:11:05.3909434Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3909790Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population_updated] _
2025-01-22T20:11:05.3909800Z 
2025-01-22T20:11:05.3909961Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3910170Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3910248Z        't046000', 't048000'],
2025-01-22T20:11:05.3910326Z       dtype='object')
2025-01-22T20:11:05.3910404Z key = 'cups'
2025-01-22T20:11:05.3910408Z 
2025-01-22T20:11:05.3910495Z     def get_loc(self, key):
2025-01-22T20:11:05.3910561Z         """
2025-01-22T20:11:05.3910723Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3910788Z     
2025-01-22T20:11:05.3910865Z         Parameters
2025-01-22T20:11:05.3910935Z         ----------
2025-01-22T20:11:05.3911010Z         key : label
2025-01-22T20:11:05.3911075Z     
2025-01-22T20:11:05.3911150Z         Returns
2025-01-22T20:11:05.3911220Z         -------
2025-01-22T20:11:05.3911355Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3911421Z     
2025-01-22T20:11:05.3911496Z         Examples
2025-01-22T20:11:05.3911566Z         --------
2025-01-22T20:11:05.3911666Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3911752Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3911825Z         1
2025-01-22T20:11:05.3911891Z     
2025-01-22T20:11:05.3911997Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3912094Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3912168Z         slice(1, 3, None)
2025-01-22T20:11:05.3912239Z     
2025-01-22T20:11:05.3912348Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3912440Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3912529Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3912605Z         """
2025-01-22T20:11:05.3912708Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3912781Z         try:
2025-01-22T20:11:05.3912878Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3912883Z 
2025-01-22T20:11:05.3913131Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3913240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3913380Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3913454Z     ???
2025-01-22T20:11:05.3913765Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3913841Z     ???
2025-01-22T20:11:05.3914114Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3914188Z     ???
2025-01-22T20:11:05.3914294Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3914435Z 
2025-01-22T20:11:05.3914508Z >   ???
2025-01-22T20:11:05.3914584Z E   KeyError: 'cups'
2025-01-22T20:11:05.3914590Z 
2025-01-22T20:11:05.3914721Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3914725Z 
2025-01-22T20:11:05.3914889Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3914899Z 
2025-01-22T20:11:05.3915116Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3915439Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3916182Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3916188Z 
2025-01-22T20:11:05.3916282Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3916359Z     def plasma(
2025-01-22T20:11:05.3916433Z         self,
2025-01-22T20:11:05.3916514Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3916588Z         config,
2025-01-22T20:11:05.3916656Z     ):
2025-01-22T20:11:05.3916771Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3916870Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3916874Z 
2025-01-22T20:11:05.3916994Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3917103Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3917210Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3917298Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3917495Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3917598Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3917707Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3917789Z     return BasePlasma(
2025-01-22T20:11:05.3917878Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3917969Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3918057Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3918141Z     self.update(**kwargs)
2025-01-22T20:11:05.3918233Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3918354Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3918472Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3918574Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3918826Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3918979Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3919191Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3919287Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3919420Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3919590Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3919765Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3919939Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3920201Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3920380Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3920562Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3920677Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3920930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3921060Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3921300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3921481Z     return self.apply_standard()
2025-01-22T20:11:05.3921762Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3921886Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3922197Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3922315Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3922532Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3922691Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3922959Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3923042Z     return self._get_value(key)
2025-01-22T20:11:05.3923303Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3923394Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3923608Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3923614Z 
2025-01-22T20:11:05.3923772Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3923985Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3924064Z        't046000', 't048000'],
2025-01-22T20:11:05.3924139Z       dtype='object')
2025-01-22T20:11:05.3924218Z key = 'cups'
2025-01-22T20:11:05.3924223Z 
2025-01-22T20:11:05.3924301Z     def get_loc(self, key):
2025-01-22T20:11:05.3924373Z         """
2025-01-22T20:11:05.3924531Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3924603Z     
2025-01-22T20:11:05.3924675Z         Parameters
2025-01-22T20:11:05.3924751Z         ----------
2025-01-22T20:11:05.3924822Z         key : label
2025-01-22T20:11:05.3924896Z     
2025-01-22T20:11:05.3924963Z         Returns
2025-01-22T20:11:05.3925037Z         -------
2025-01-22T20:11:05.3925168Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3925246Z     
2025-01-22T20:11:05.3925322Z         Examples
2025-01-22T20:11:05.3925392Z         --------
2025-01-22T20:11:05.3925494Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3925580Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3925652Z         1
2025-01-22T20:11:05.3925717Z     
2025-01-22T20:11:05.3925827Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3925914Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3925996Z         slice(1, 3, None)
2025-01-22T20:11:05.3926062Z     
2025-01-22T20:11:05.3926181Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3926271Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3926364Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3926434Z         """
2025-01-22T20:11:05.3926542Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3926609Z         try:
2025-01-22T20:11:05.3926711Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3926801Z         except KeyError as err:
2025-01-22T20:11:05.3926898Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3927000Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3927117Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3927195Z             ):
2025-01-22T20:11:05.3927286Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3927377Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3927456Z E           KeyError: 'cups'
2025-01-22T20:11:05.3927461Z 
2025-01-22T20:11:05.3927730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3927989Z _ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:05.3928127Z 
2025-01-22T20:11:05.3928288Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3928503Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3928576Z        't046000', 't048000'],
2025-01-22T20:11:05.3928655Z       dtype='object')
2025-01-22T20:11:05.3928725Z key = 'cups'
2025-01-22T20:11:05.3928729Z 
2025-01-22T20:11:05.3928929Z     def get_loc(self, key):
2025-01-22T20:11:05.3928996Z         """
2025-01-22T20:11:05.3929156Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3929222Z     
2025-01-22T20:11:05.3929299Z         Parameters
2025-01-22T20:11:05.3929370Z         ----------
2025-01-22T20:11:05.3929445Z         key : label
2025-01-22T20:11:05.3929510Z     
2025-01-22T20:11:05.3929583Z         Returns
2025-01-22T20:11:05.3929652Z         -------
2025-01-22T20:11:05.3929792Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3929865Z     
2025-01-22T20:11:05.3929935Z         Examples
2025-01-22T20:11:05.3930009Z         --------
2025-01-22T20:11:05.3930104Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3930192Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3930260Z         1
2025-01-22T20:11:05.3930330Z     
2025-01-22T20:11:05.3930427Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3930521Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3930594Z         slice(1, 3, None)
2025-01-22T20:11:05.3930666Z     
2025-01-22T20:11:05.3930770Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3930864Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3930953Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3931025Z         """
2025-01-22T20:11:05.3931126Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3931202Z         try:
2025-01-22T20:11:05.3931299Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3931312Z 
2025-01-22T20:11:05.3931554Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3931667Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3931801Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3931873Z     ???
2025-01-22T20:11:05.3932004Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3932075Z     ???
2025-01-22T20:11:05.3932343Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3932417Z     ???
2025-01-22T20:11:05.3932521Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3932526Z 
2025-01-22T20:11:05.3932596Z >   ???
2025-01-22T20:11:05.3932674Z E   KeyError: 'cups'
2025-01-22T20:11:05.3932683Z 
2025-01-22T20:11:05.3932808Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3932812Z 
2025-01-22T20:11:05.3932984Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3932989Z 
2025-01-22T20:11:05.3933207Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3933630Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3934255Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3934261Z 
2025-01-22T20:11:05.3934353Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3934430Z     def plasma(
2025-01-22T20:11:05.3934498Z         self,
2025-01-22T20:11:05.3934698Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3934766Z         config,
2025-01-22T20:11:05.3934836Z     ):
2025-01-22T20:11:05.3934948Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3935045Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3935050Z 
2025-01-22T20:11:05.3935170Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3935278Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3935381Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3935570Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3935736Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3935840Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3935949Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3936031Z     return BasePlasma(
2025-01-22T20:11:05.3936120Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3936211Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3936305Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3936383Z     self.update(**kwargs)
2025-01-22T20:11:05.3936476Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3936596Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3936712Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3936815Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3937065Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3937217Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3937428Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3937522Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3937653Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3937823Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3937993Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3938170Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3938425Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3938601Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3938780Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3938890Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3939140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3939267Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3939506Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3939602Z     return self.apply_standard()
2025-01-22T20:11:05.3939887Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3940005Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3940311Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3940427Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3940644Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3940732Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3941001Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3941084Z     return self._get_value(key)
2025-01-22T20:11:05.3941353Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3941443Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3941638Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3941642Z 
2025-01-22T20:11:05.3941802Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3942009Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3942087Z        't046000', 't048000'],
2025-01-22T20:11:05.3942162Z       dtype='object')
2025-01-22T20:11:05.3942237Z key = 'cups'
2025-01-22T20:11:05.3942314Z 
2025-01-22T20:11:05.3942393Z     def get_loc(self, key):
2025-01-22T20:11:05.3942466Z         """
2025-01-22T20:11:05.3942623Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3942694Z     
2025-01-22T20:11:05.3942770Z         Parameters
2025-01-22T20:11:05.3942840Z         ----------
2025-01-22T20:11:05.3942913Z         key : label
2025-01-22T20:11:05.3942979Z     
2025-01-22T20:11:05.3943053Z         Returns
2025-01-22T20:11:05.3943126Z         -------
2025-01-22T20:11:05.3943260Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3943327Z     
2025-01-22T20:11:05.3943400Z         Examples
2025-01-22T20:11:05.3943469Z         --------
2025-01-22T20:11:05.3943688Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3943774Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3943845Z         1
2025-01-22T20:11:05.3943909Z     
2025-01-22T20:11:05.3944016Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3944108Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3944188Z         slice(1, 3, None)
2025-01-22T20:11:05.3944255Z     
2025-01-22T20:11:05.3944363Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3944453Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3944545Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3944617Z         """
2025-01-22T20:11:05.3944717Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3944792Z         try:
2025-01-22T20:11:05.3944890Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3944976Z         except KeyError as err:
2025-01-22T20:11:05.3945073Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3945175Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3945291Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3945366Z             ):
2025-01-22T20:11:05.3945459Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3945551Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3945629Z E           KeyError: 'cups'
2025-01-22T20:11:05.3945633Z 
2025-01-22T20:11:05.3945902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3946234Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-time_explosion] _
2025-01-22T20:11:05.3946243Z 
2025-01-22T20:11:05.3946396Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3946605Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3946678Z        't046000', 't048000'],
2025-01-22T20:11:05.3946756Z       dtype='object')
2025-01-22T20:11:05.3946829Z key = 'cups'
2025-01-22T20:11:05.3946834Z 
2025-01-22T20:11:05.3946916Z     def get_loc(self, key):
2025-01-22T20:11:05.3946989Z         """
2025-01-22T20:11:05.3947151Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3947217Z     
2025-01-22T20:11:05.3947294Z         Parameters
2025-01-22T20:11:05.3947370Z         ----------
2025-01-22T20:11:05.3947440Z         key : label
2025-01-22T20:11:05.3947511Z     
2025-01-22T20:11:05.3947580Z         Returns
2025-01-22T20:11:05.3947654Z         -------
2025-01-22T20:11:05.3947901Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3947972Z     
2025-01-22T20:11:05.3948040Z         Examples
2025-01-22T20:11:05.3948114Z         --------
2025-01-22T20:11:05.3948207Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3948298Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3948365Z         1
2025-01-22T20:11:05.3948435Z     
2025-01-22T20:11:05.3948533Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3948624Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3948800Z         slice(1, 3, None)
2025-01-22T20:11:05.3948871Z     
2025-01-22T20:11:05.3948975Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3949069Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3949160Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3949228Z         """
2025-01-22T20:11:05.3949330Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3949403Z         try:
2025-01-22T20:11:05.3949502Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3949507Z 
2025-01-22T20:11:05.3949746Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3949863Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3949998Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3950070Z     ???
2025-01-22T20:11:05.3950197Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3950271Z     ???
2025-01-22T20:11:05.3950538Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3950610Z     ???
2025-01-22T20:11:05.3950720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3950724Z 
2025-01-22T20:11:05.3950789Z >   ???
2025-01-22T20:11:05.3950869Z E   KeyError: 'cups'
2025-01-22T20:11:05.3950877Z 
2025-01-22T20:11:05.3951000Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3951005Z 
2025-01-22T20:11:05.3951177Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3951182Z 
2025-01-22T20:11:05.3951400Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3951721Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3952343Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3952352Z 
2025-01-22T20:11:05.3952440Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3952517Z     def plasma(
2025-01-22T20:11:05.3952584Z         self,
2025-01-22T20:11:05.3952668Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3952740Z         config,
2025-01-22T20:11:05.3952811Z     ):
2025-01-22T20:11:05.3952921Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3953017Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3953022Z 
2025-01-22T20:11:05.3953140Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3953249Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3953356Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3953444Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3953731Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3953831Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3953944Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3954021Z     return BasePlasma(
2025-01-22T20:11:05.3954109Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3954194Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3954406Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3954484Z     self.update(**kwargs)
2025-01-22T20:11:05.3954577Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3954698Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3954811Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3954912Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3955163Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3955435Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3955644Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3955743Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3955871Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3956040Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3956213Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3956388Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3956641Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3956817Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3956994Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3957100Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3957357Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3957478Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3957718Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3957804Z     return self.apply_standard()
2025-01-22T20:11:05.3958086Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3958205Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3958512Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3958626Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3958842Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3958934Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3959196Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3959282Z     return self._get_value(key)
2025-01-22T20:11:05.3959538Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3959628Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3959733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3959741Z 
2025-01-22T20:11:05.3959899Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3960106Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3960183Z        't046000', 't048000'],
2025-01-22T20:11:05.3960257Z       dtype='object')
2025-01-22T20:11:05.3960333Z key = 'cups'
2025-01-22T20:11:05.3960337Z 
2025-01-22T20:11:05.3960421Z     def get_loc(self, key):
2025-01-22T20:11:05.3960495Z         """
2025-01-22T20:11:05.3960663Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3960732Z     
2025-01-22T20:11:05.3960813Z         Parameters
2025-01-22T20:11:05.3960883Z         ----------
2025-01-22T20:11:05.3960958Z         key : label
2025-01-22T20:11:05.3961025Z     
2025-01-22T20:11:05.3961099Z         Returns
2025-01-22T20:11:05.3961167Z         -------
2025-01-22T20:11:05.3961391Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3961458Z     
2025-01-22T20:11:05.3961533Z         Examples
2025-01-22T20:11:05.3961603Z         --------
2025-01-22T20:11:05.3961706Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3961792Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3961868Z         1
2025-01-22T20:11:05.3961938Z     
2025-01-22T20:11:05.3962043Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3962134Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3962283Z         slice(1, 3, None)
2025-01-22T20:11:05.3962355Z     
2025-01-22T20:11:05.3962463Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3962558Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3962647Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3962718Z         """
2025-01-22T20:11:05.3962819Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3962895Z         try:
2025-01-22T20:11:05.3962995Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3963083Z         except KeyError as err:
2025-01-22T20:11:05.3963178Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3963281Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3963400Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3963473Z             ):
2025-01-22T20:11:05.3963669Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3963759Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3963843Z E           KeyError: 'cups'
2025-01-22T20:11:05.3963847Z 
2025-01-22T20:11:05.3964119Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3964468Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-link_t_rad_t_electron] _
2025-01-22T20:11:05.3964477Z 
2025-01-22T20:11:05.3964633Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3964847Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3964921Z        't046000', 't048000'],
2025-01-22T20:11:05.3965002Z       dtype='object')
2025-01-22T20:11:05.3965077Z key = 'cups'
2025-01-22T20:11:05.3965081Z 
2025-01-22T20:11:05.3965160Z     def get_loc(self, key):
2025-01-22T20:11:05.3965233Z         """
2025-01-22T20:11:05.3965398Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3965471Z     
2025-01-22T20:11:05.3965546Z         Parameters
2025-01-22T20:11:05.3965622Z         ----------
2025-01-22T20:11:05.3965694Z         key : label
2025-01-22T20:11:05.3965768Z     
2025-01-22T20:11:05.3965837Z         Returns
2025-01-22T20:11:05.3965914Z         -------
2025-01-22T20:11:05.3966047Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3966122Z     
2025-01-22T20:11:05.3966200Z         Examples
2025-01-22T20:11:05.3966275Z         --------
2025-01-22T20:11:05.3966373Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3966465Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3966533Z         1
2025-01-22T20:11:05.3966604Z     
2025-01-22T20:11:05.3966714Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3966802Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3966886Z         slice(1, 3, None)
2025-01-22T20:11:05.3966954Z     
2025-01-22T20:11:05.3967069Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3967162Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3967257Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3967325Z         """
2025-01-22T20:11:05.3967433Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3967502Z         try:
2025-01-22T20:11:05.3967725Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3967729Z 
2025-01-22T20:11:05.3967979Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3968098Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3968240Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3968308Z     ???
2025-01-22T20:11:05.3968444Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3968613Z     ???
2025-01-22T20:11:05.3968890Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3968957Z     ???
2025-01-22T20:11:05.3969070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3969074Z 
2025-01-22T20:11:05.3969139Z >   ???
2025-01-22T20:11:05.3969221Z E   KeyError: 'cups'
2025-01-22T20:11:05.3969226Z 
2025-01-22T20:11:05.3969357Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3969361Z 
2025-01-22T20:11:05.3969533Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3969538Z 
2025-01-22T20:11:05.3969763Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3970083Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3970706Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3970715Z 
2025-01-22T20:11:05.3970803Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3970882Z     def plasma(
2025-01-22T20:11:05.3970950Z         self,
2025-01-22T20:11:05.3971040Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3971112Z         config,
2025-01-22T20:11:05.3971184Z     ):
2025-01-22T20:11:05.3971303Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3971398Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3971402Z 
2025-01-22T20:11:05.3971526Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3971632Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3971740Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3971823Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3972001Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3972098Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3972212Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3972290Z     return BasePlasma(
2025-01-22T20:11:05.3972379Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3972466Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3972564Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3972649Z     self.update(**kwargs)
2025-01-22T20:11:05.3972741Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3972867Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3972979Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3973086Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3973332Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3973489Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3973794Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3973896Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3974023Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3974195Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3974367Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3974663Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3974925Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3975095Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3975279Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3975381Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3975737Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3975861Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3976110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3976198Z     return self.apply_standard()
2025-01-22T20:11:05.3976482Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3976608Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3976914Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3977037Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3977252Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3977342Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3977611Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3977700Z     return self._get_value(key)
2025-01-22T20:11:05.3977955Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3978049Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3978156Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3978169Z 
2025-01-22T20:11:05.3978326Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3978538Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3978613Z        't046000', 't048000'],
2025-01-22T20:11:05.3978691Z       dtype='object')
2025-01-22T20:11:05.3978763Z key = 'cups'
2025-01-22T20:11:05.3978768Z 
2025-01-22T20:11:05.3978852Z     def get_loc(self, key):
2025-01-22T20:11:05.3978922Z         """
2025-01-22T20:11:05.3979086Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3979152Z     
2025-01-22T20:11:05.3979230Z         Parameters
2025-01-22T20:11:05.3979302Z         ----------
2025-01-22T20:11:05.3979378Z         key : label
2025-01-22T20:11:05.3979444Z     
2025-01-22T20:11:05.3979517Z         Returns
2025-01-22T20:11:05.3979587Z         -------
2025-01-22T20:11:05.3979725Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3979798Z     
2025-01-22T20:11:05.3979867Z         Examples
2025-01-22T20:11:05.3979941Z         --------
2025-01-22T20:11:05.3980038Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3980129Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3980196Z         1
2025-01-22T20:11:05.3980269Z     
2025-01-22T20:11:05.3980373Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3980466Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3980545Z         slice(1, 3, None)
2025-01-22T20:11:05.3980617Z     
2025-01-22T20:11:05.3980723Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3980819Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3980909Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3980984Z         """
2025-01-22T20:11:05.3981085Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3981159Z         try:
2025-01-22T20:11:05.3981385Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3981471Z         except KeyError as err:
2025-01-22T20:11:05.3981574Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3981672Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.3981795Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.3981864Z             ):
2025-01-22T20:11:05.3981960Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.3982120Z >           raise KeyError(key) from err
2025-01-22T20:11:05.3982206Z E           KeyError: 'cups'
2025-01-22T20:11:05.3982210Z 
2025-01-22T20:11:05.3982473Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.3982763Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:05.3982767Z 
2025-01-22T20:11:05.3982924Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3983132Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3983211Z        't046000', 't048000'],
2025-01-22T20:11:05.3983285Z       dtype='object')
2025-01-22T20:11:05.3983360Z key = 'cups'
2025-01-22T20:11:05.3983364Z 
2025-01-22T20:11:05.3983443Z     def get_loc(self, key):
2025-01-22T20:11:05.3983636Z         """
2025-01-22T20:11:05.3983800Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3983876Z     
2025-01-22T20:11:05.3983951Z         Parameters
2025-01-22T20:11:05.3984028Z         ----------
2025-01-22T20:11:05.3984102Z         key : label
2025-01-22T20:11:05.3984173Z     
2025-01-22T20:11:05.3984241Z         Returns
2025-01-22T20:11:05.3984315Z         -------
2025-01-22T20:11:05.3984447Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3984522Z     
2025-01-22T20:11:05.3984596Z         Examples
2025-01-22T20:11:05.3984667Z         --------
2025-01-22T20:11:05.3984768Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3984852Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3984924Z         1
2025-01-22T20:11:05.3984991Z     
2025-01-22T20:11:05.3985096Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3985182Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3985261Z         slice(1, 3, None)
2025-01-22T20:11:05.3985330Z     
2025-01-22T20:11:05.3985443Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3985532Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3985631Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3985699Z         """
2025-01-22T20:11:05.3985807Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3985876Z         try:
2025-01-22T20:11:05.3985978Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3985986Z 
2025-01-22T20:11:05.3986235Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.3986347Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3986487Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3986554Z     ???
2025-01-22T20:11:05.3986688Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.3986755Z     ???
2025-01-22T20:11:05.3987033Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.3987100Z     ???
2025-01-22T20:11:05.3987211Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3987215Z 
2025-01-22T20:11:05.3987280Z >   ???
2025-01-22T20:11:05.3987364Z E   KeyError: 'cups'
2025-01-22T20:11:05.3987368Z 
2025-01-22T20:11:05.3987499Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.3987620Z 
2025-01-22T20:11:05.3987790Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.3987794Z 
2025-01-22T20:11:05.3988019Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.3988331Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.3988959Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.3989061Z 
2025-01-22T20:11:05.3989155Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.3989228Z     def plasma(
2025-01-22T20:11:05.3989302Z         self,
2025-01-22T20:11:05.3989382Z         chianti_he_db_fpath,
2025-01-22T20:11:05.3989455Z         config,
2025-01-22T20:11:05.3989521Z     ):
2025-01-22T20:11:05.3989640Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.3989734Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.3989738Z 
2025-01-22T20:11:05.3989864Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.3989968Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3990077Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.3990160Z     plasma = assemble_plasma(
2025-01-22T20:11:05.3990332Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.3990436Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.3990550Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.3990636Z     return BasePlasma(
2025-01-22T20:11:05.3990722Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.3990813Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.3990901Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.3990987Z     self.update(**kwargs)
2025-01-22T20:11:05.3991075Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.3991199Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.3991309Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.3991416Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.3991659Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.3991814Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.3992022Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.3992128Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.3992262Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.3992432Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.3992609Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.3992790Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.3993052Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.3993229Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.3993413Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.3993635Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.3993902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.3994028Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.3994273Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.3994371Z     return self.apply_standard()
2025-01-22T20:11:05.3994648Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.3994894Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.3995196Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.3995321Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.3995537Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.3995631Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.3995893Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.3996087Z     return self._get_value(key)
2025-01-22T20:11:05.3996345Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.3996431Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.3996541Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.3996545Z 
2025-01-22T20:11:05.3996703Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.3996920Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.3996994Z        't046000', 't048000'],
2025-01-22T20:11:05.3997075Z       dtype='object')
2025-01-22T20:11:05.3997149Z key = 'cups'
2025-01-22T20:11:05.3997154Z 
2025-01-22T20:11:05.3997236Z     def get_loc(self, key):
2025-01-22T20:11:05.3997306Z         """
2025-01-22T20:11:05.3997469Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.3997544Z     
2025-01-22T20:11:05.3997617Z         Parameters
2025-01-22T20:11:05.3997694Z         ----------
2025-01-22T20:11:05.3997767Z         key : label
2025-01-22T20:11:05.3997839Z     
2025-01-22T20:11:05.3997907Z         Returns
2025-01-22T20:11:05.3997984Z         -------
2025-01-22T20:11:05.3998114Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.3998191Z     
2025-01-22T20:11:05.3998262Z         Examples
2025-01-22T20:11:05.3998336Z         --------
2025-01-22T20:11:05.3998433Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.3998523Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.3998593Z         1
2025-01-22T20:11:05.3998666Z     
2025-01-22T20:11:05.3998769Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.3998863Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.3998938Z         slice(1, 3, None)
2025-01-22T20:11:05.3999014Z     
2025-01-22T20:11:05.3999122Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.3999220Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.3999315Z         array([False,  True, False,  True])
2025-01-22T20:11:05.3999387Z         """
2025-01-22T20:11:05.3999493Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.3999564Z         try:
2025-01-22T20:11:05.3999670Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.3999756Z         except KeyError as err:
2025-01-22T20:11:05.3999861Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.3999963Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4000086Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4000153Z             ):
2025-01-22T20:11:05.4000250Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4000336Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4000425Z E           KeyError: 'cups'
2025-01-22T20:11:05.4000429Z 
2025-01-22T20:11:05.4000697Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4000954Z _ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:05.4000960Z 
2025-01-22T20:11:05.4001116Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4001412Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4001490Z        't046000', 't048000'],
2025-01-22T20:11:05.4001566Z       dtype='object')
2025-01-22T20:11:05.4001647Z key = 'cups'
2025-01-22T20:11:05.4001652Z 
2025-01-22T20:11:05.4001732Z     def get_loc(self, key):
2025-01-22T20:11:05.4001804Z         """
2025-01-22T20:11:05.4001960Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4002106Z     
2025-01-22T20:11:05.4002185Z         Parameters
2025-01-22T20:11:05.4002257Z         ----------
2025-01-22T20:11:05.4002336Z         key : label
2025-01-22T20:11:05.4002403Z     
2025-01-22T20:11:05.4002476Z         Returns
2025-01-22T20:11:05.4002551Z         -------
2025-01-22T20:11:05.4002690Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4002758Z     
2025-01-22T20:11:05.4002836Z         Examples
2025-01-22T20:11:05.4002910Z         --------
2025-01-22T20:11:05.4003012Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4003097Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4003173Z         1
2025-01-22T20:11:05.4003243Z     
2025-01-22T20:11:05.4003351Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4003437Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4003618Z         slice(1, 3, None)
2025-01-22T20:11:05.4003687Z     
2025-01-22T20:11:05.4003800Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4003902Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4003992Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4004067Z         """
2025-01-22T20:11:05.4004166Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4004243Z         try:
2025-01-22T20:11:05.4004340Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4004345Z 
2025-01-22T20:11:05.4004598Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4004706Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4004846Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4004915Z     ???
2025-01-22T20:11:05.4005051Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4005121Z     ???
2025-01-22T20:11:05.4005391Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4005466Z     ???
2025-01-22T20:11:05.4005569Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4005573Z 
2025-01-22T20:11:05.4005643Z >   ???
2025-01-22T20:11:05.4005719Z E   KeyError: 'cups'
2025-01-22T20:11:05.4005723Z 
2025-01-22T20:11:05.4005852Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4005857Z 
2025-01-22T20:11:05.4006025Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4006030Z 
2025-01-22T20:11:05.4006261Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4006576Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4007202Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4007210Z 
2025-01-22T20:11:05.4007304Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4007377Z     def plasma(
2025-01-22T20:11:05.4007450Z         self,
2025-01-22T20:11:05.4007531Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4007605Z         config,
2025-01-22T20:11:05.4007671Z     ):
2025-01-22T20:11:05.4007788Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4008017Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4008022Z 
2025-01-22T20:11:05.4008149Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4008257Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4008365Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4008454Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4008620Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4008826Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4008936Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4009022Z     return BasePlasma(
2025-01-22T20:11:05.4009106Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4009199Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4009288Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4009374Z     self.update(**kwargs)
2025-01-22T20:11:05.4009461Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4009591Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4009700Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4009808Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4010070Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:05.4010218Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4010433Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4010531Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4010665Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4010832Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4011007Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4011177Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4011442Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4011614Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4011802Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4011909Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4012161Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4012291Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4012529Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4012621Z     return self.apply_standard()
2025-01-22T20:11:05.4012896Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4013019Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4013326Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4013451Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4013758Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4013851Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4014122Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4014208Z     return self._get_value(key)
2025-01-22T20:11:05.4014471Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4014558Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4014672Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4014676Z 
2025-01-22T20:11:05.4014833Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4015164Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4015239Z        't046000', 't048000'],
2025-01-22T20:11:05.4015324Z       dtype='object')
2025-01-22T20:11:05.4015402Z key = 'cups'
2025-01-22T20:11:05.4015406Z 
2025-01-22T20:11:05.4015485Z     def get_loc(self, key):
2025-01-22T20:11:05.4015563Z         """
2025-01-22T20:11:05.4015719Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4015891Z     
2025-01-22T20:11:05.4015965Z         Parameters
2025-01-22T20:11:05.4016044Z         ----------
2025-01-22T20:11:05.4016117Z         key : label
2025-01-22T20:11:05.4016192Z     
2025-01-22T20:11:05.4016260Z         Returns
2025-01-22T20:11:05.4016337Z         -------
2025-01-22T20:11:05.4016468Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4016542Z     
2025-01-22T20:11:05.4016613Z         Examples
2025-01-22T20:11:05.4016693Z         --------
2025-01-22T20:11:05.4016790Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4016881Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4016952Z         1
2025-01-22T20:11:05.4017019Z     
2025-01-22T20:11:05.4017128Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4017217Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4017295Z         slice(1, 3, None)
2025-01-22T20:11:05.4017389Z     
2025-01-22T20:11:05.4017501Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4017594Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4017690Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4017757Z         """
2025-01-22T20:11:05.4017863Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4017933Z         try:
2025-01-22T20:11:05.4018039Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4018120Z         except KeyError as err:
2025-01-22T20:11:05.4018229Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4018332Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4018455Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4018530Z             ):
2025-01-22T20:11:05.4018623Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4018730Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4018813Z E           KeyError: 'cups'
2025-01-22T20:11:05.4018820Z 
2025-01-22T20:11:05.4019088Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4019388Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_rad] _
2025-01-22T20:11:05.4019394Z 
2025-01-22T20:11:05.4019555Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4019761Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4019844Z        't046000', 't048000'],
2025-01-22T20:11:05.4019925Z       dtype='object')
2025-01-22T20:11:05.4019996Z key = 'cups'
2025-01-22T20:11:05.4020000Z 
2025-01-22T20:11:05.4020084Z     def get_loc(self, key):
2025-01-22T20:11:05.4020153Z         """
2025-01-22T20:11:05.4020314Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4020382Z     
2025-01-22T20:11:05.4020462Z         Parameters
2025-01-22T20:11:05.4020536Z         ----------
2025-01-22T20:11:05.4020615Z         key : label
2025-01-22T20:11:05.4020682Z     
2025-01-22T20:11:05.4020757Z         Returns
2025-01-22T20:11:05.4020830Z         -------
2025-01-22T20:11:05.4020965Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4021032Z     
2025-01-22T20:11:05.4021109Z         Examples
2025-01-22T20:11:05.4021180Z         --------
2025-01-22T20:11:05.4021369Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4021455Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4021533Z         1
2025-01-22T20:11:05.4021606Z     
2025-01-22T20:11:05.4021706Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4021799Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4021876Z         slice(1, 3, None)
2025-01-22T20:11:05.4021948Z     
2025-01-22T20:11:05.4022054Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4022221Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4022308Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4022384Z         """
2025-01-22T20:11:05.4022485Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4022562Z         try:
2025-01-22T20:11:05.4022660Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4022665Z 
2025-01-22T20:11:05.4022913Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4023025Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4023167Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4023239Z     ???
2025-01-22T20:11:05.4023370Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4023442Z     ???
2025-01-22T20:11:05.4074097Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4074246Z     ???
2025-01-22T20:11:05.4074380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4074387Z 
2025-01-22T20:11:05.4074460Z >   ???
2025-01-22T20:11:05.4074545Z E   KeyError: 'cups'
2025-01-22T20:11:05.4074551Z 
2025-01-22T20:11:05.4074706Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4074712Z 
2025-01-22T20:11:05.4074885Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4074896Z 
2025-01-22T20:11:05.4075125Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4075463Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4076090Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4076101Z 
2025-01-22T20:11:05.4076192Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4076265Z     def plasma(
2025-01-22T20:11:05.4076338Z         self,
2025-01-22T20:11:05.4076418Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4076489Z         config,
2025-01-22T20:11:05.4076554Z     ):
2025-01-22T20:11:05.4076672Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4076769Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4076781Z 
2025-01-22T20:11:05.4076906Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4077025Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4077131Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4077219Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4077389Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4077493Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4077606Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4077685Z     return BasePlasma(
2025-01-22T20:11:05.4077768Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4077855Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4077940Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4078024Z     self.update(**kwargs)
2025-01-22T20:11:05.4078112Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4078437Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4078553Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4078656Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4078899Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4079052Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4079270Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4079480Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4079610Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4079777Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4079950Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4080121Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4080383Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4080563Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4080743Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4080849Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4081108Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4081238Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4081483Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4081574Z     return self.apply_standard()
2025-01-22T20:11:05.4081850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4081975Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4082279Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4082405Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4082627Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4082713Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4082979Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4083061Z     return self._get_value(key)
2025-01-22T20:11:05.4083323Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4083408Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4083631Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4083636Z 
2025-01-22T20:11:05.4083794Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4084011Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4084090Z        't046000', 't048000'],
2025-01-22T20:11:05.4084163Z       dtype='object')
2025-01-22T20:11:05.4084238Z key = 'cups'
2025-01-22T20:11:05.4084243Z 
2025-01-22T20:11:05.4084323Z     def get_loc(self, key):
2025-01-22T20:11:05.4084392Z         """
2025-01-22T20:11:05.4084548Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4084616Z     
2025-01-22T20:11:05.4084691Z         Parameters
2025-01-22T20:11:05.4084768Z         ----------
2025-01-22T20:11:05.4084837Z         key : label
2025-01-22T20:11:05.4084903Z     
2025-01-22T20:11:05.4084970Z         Returns
2025-01-22T20:11:05.4085043Z         -------
2025-01-22T20:11:05.4085173Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4085243Z     
2025-01-22T20:11:05.4085311Z         Examples
2025-01-22T20:11:05.4085384Z         --------
2025-01-22T20:11:05.4085668Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4085753Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4085824Z         1
2025-01-22T20:11:05.4085890Z     
2025-01-22T20:11:05.4085998Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4086085Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4086164Z         slice(1, 3, None)
2025-01-22T20:11:05.4086227Z     
2025-01-22T20:11:05.4086340Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4086558Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4086652Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4086718Z         """
2025-01-22T20:11:05.4086820Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4086886Z         try:
2025-01-22T20:11:05.4086988Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4087068Z         except KeyError as err:
2025-01-22T20:11:05.4087172Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4087275Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4087398Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4087467Z             ):
2025-01-22T20:11:05.4087559Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4087647Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4087727Z E           KeyError: 'cups'
2025-01-22T20:11:05.4087732Z 
2025-01-22T20:11:05.4088005Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4088162Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:05.4088582Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:05.4089023Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:05.4089178Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:05.4089673Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:05.4089976Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-g_electron] _
2025-01-22T20:11:05.4089982Z 
2025-01-22T20:11:05.4090139Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4090352Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4090427Z        't046000', 't048000'],
2025-01-22T20:11:05.4090500Z       dtype='object')
2025-01-22T20:11:05.4090575Z key = 'cups'
2025-01-22T20:11:05.4090579Z 
2025-01-22T20:11:05.4090663Z     def get_loc(self, key):
2025-01-22T20:11:05.4090730Z         """
2025-01-22T20:11:05.4090900Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4090965Z     
2025-01-22T20:11:05.4091039Z         Parameters
2025-01-22T20:11:05.4091111Z         ----------
2025-01-22T20:11:05.4091183Z         key : label
2025-01-22T20:11:05.4091246Z     
2025-01-22T20:11:05.4091313Z         Returns
2025-01-22T20:11:05.4091381Z         -------
2025-01-22T20:11:05.4091517Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4091580Z     
2025-01-22T20:11:05.4091657Z         Examples
2025-01-22T20:11:05.4091725Z         --------
2025-01-22T20:11:05.4091829Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4091917Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4091988Z         1
2025-01-22T20:11:05.4092050Z     
2025-01-22T20:11:05.4092160Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4092249Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4092325Z         slice(1, 3, None)
2025-01-22T20:11:05.4092480Z     
2025-01-22T20:11:05.4092590Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4092684Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4092774Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4092845Z         """
2025-01-22T20:11:05.4092945Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4093014Z         try:
2025-01-22T20:11:05.4093112Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4093190Z 
2025-01-22T20:11:05.4093446Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4093831Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4093978Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4094050Z     ???
2025-01-22T20:11:05.4094177Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4094250Z     ???
2025-01-22T20:11:05.4094520Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4094590Z     ???
2025-01-22T20:11:05.4094699Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4094703Z 
2025-01-22T20:11:05.4094770Z >   ???
2025-01-22T20:11:05.4094846Z E   KeyError: 'cups'
2025-01-22T20:11:05.4094851Z 
2025-01-22T20:11:05.4094982Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4094990Z 
2025-01-22T20:11:05.4095156Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4095161Z 
2025-01-22T20:11:05.4095381Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4095703Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4096322Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4096332Z 
2025-01-22T20:11:05.4096435Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4096508Z     def plasma(
2025-01-22T20:11:05.4096580Z         self,
2025-01-22T20:11:05.4096660Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4096733Z         config,
2025-01-22T20:11:05.4096797Z     ):
2025-01-22T20:11:05.4096910Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4097010Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4097019Z 
2025-01-22T20:11:05.4097140Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4097249Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4097351Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4097434Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4097605Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4097706Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4097814Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4097893Z     return BasePlasma(
2025-01-22T20:11:05.4097977Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4098070Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4098158Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4098240Z     self.update(**kwargs)
2025-01-22T20:11:05.4098333Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4098456Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4098569Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4098670Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4098907Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4099058Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4099418Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4099515Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4099642Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4099806Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4099978Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4100154Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4100519Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4100694Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4100874Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4100980Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4101239Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4101366Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4101602Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4101691Z     return self.apply_standard()
2025-01-22T20:11:05.4101966Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4102087Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4102392Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4102513Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4102727Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4102813Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4103088Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4103170Z     return self._get_value(key)
2025-01-22T20:11:05.4103428Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4103608Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4103723Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4103728Z 
2025-01-22T20:11:05.4103881Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4104096Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4104174Z        't046000', 't048000'],
2025-01-22T20:11:05.4104247Z       dtype='object')
2025-01-22T20:11:05.4104320Z key = 'cups'
2025-01-22T20:11:05.4104325Z 
2025-01-22T20:11:05.4104401Z     def get_loc(self, key):
2025-01-22T20:11:05.4104473Z         """
2025-01-22T20:11:05.4104630Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4104698Z     
2025-01-22T20:11:05.4104769Z         Parameters
2025-01-22T20:11:05.4104844Z         ----------
2025-01-22T20:11:05.4104915Z         key : label
2025-01-22T20:11:05.4104984Z     
2025-01-22T20:11:05.4105050Z         Returns
2025-01-22T20:11:05.4105122Z         -------
2025-01-22T20:11:05.4105253Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4105324Z     
2025-01-22T20:11:05.4105396Z         Examples
2025-01-22T20:11:05.4105470Z         --------
2025-01-22T20:11:05.4105570Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4105652Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4105722Z         1
2025-01-22T20:11:05.4105786Z     
2025-01-22T20:11:05.4105892Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4105979Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4106172Z         slice(1, 3, None)
2025-01-22T20:11:05.4106235Z     
2025-01-22T20:11:05.4106343Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4106431Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4106523Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4106589Z         """
2025-01-22T20:11:05.4106693Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4106758Z         try:
2025-01-22T20:11:05.4106859Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4107040Z         except KeyError as err:
2025-01-22T20:11:05.4107140Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4107241Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4107356Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4107427Z             ):
2025-01-22T20:11:05.4107515Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4107606Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4107691Z E           KeyError: 'cups'
2025-01-22T20:11:05.4107695Z 
2025-01-22T20:11:05.4107976Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4108288Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-selected_atoms] _
2025-01-22T20:11:05.4108293Z 
2025-01-22T20:11:05.4108457Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4108677Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4108753Z        't046000', 't048000'],
2025-01-22T20:11:05.4108837Z       dtype='object')
2025-01-22T20:11:05.4108908Z key = 'cups'
2025-01-22T20:11:05.4108913Z 
2025-01-22T20:11:05.4108998Z     def get_loc(self, key):
2025-01-22T20:11:05.4109065Z         """
2025-01-22T20:11:05.4109228Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4109299Z     
2025-01-22T20:11:05.4109378Z         Parameters
2025-01-22T20:11:05.4109449Z         ----------
2025-01-22T20:11:05.4109530Z         key : label
2025-01-22T20:11:05.4109599Z     
2025-01-22T20:11:05.4109672Z         Returns
2025-01-22T20:11:05.4109744Z         -------
2025-01-22T20:11:05.4109882Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4109948Z     
2025-01-22T20:11:05.4110023Z         Examples
2025-01-22T20:11:05.4110101Z         --------
2025-01-22T20:11:05.4110198Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4110288Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4110354Z         1
2025-01-22T20:11:05.4110425Z     
2025-01-22T20:11:05.4110526Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4110618Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4110692Z         slice(1, 3, None)
2025-01-22T20:11:05.4110766Z     
2025-01-22T20:11:05.4110870Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4110966Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4111056Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4111128Z         """
2025-01-22T20:11:05.4111227Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4111301Z         try:
2025-01-22T20:11:05.4111400Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4111410Z 
2025-01-22T20:11:05.4111657Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4111774Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4111911Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4111984Z     ???
2025-01-22T20:11:05.4112116Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4112188Z     ???
2025-01-22T20:11:05.4112456Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4112633Z     ???
2025-01-22T20:11:05.4112738Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4112743Z 
2025-01-22T20:11:05.4112814Z >   ???
2025-01-22T20:11:05.4112890Z E   KeyError: 'cups'
2025-01-22T20:11:05.4112896Z 
2025-01-22T20:11:05.4113029Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4113034Z 
2025-01-22T20:11:05.4113209Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4113286Z 
2025-01-22T20:11:05.4113624Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4113956Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4114574Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4114584Z 
2025-01-22T20:11:05.4114678Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4114757Z     def plasma(
2025-01-22T20:11:05.4114826Z         self,
2025-01-22T20:11:05.4114912Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4114983Z         config,
2025-01-22T20:11:05.4115055Z     ):
2025-01-22T20:11:05.4115168Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4115273Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4115278Z 
2025-01-22T20:11:05.4115398Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4115508Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4115612Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4115700Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4115866Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4115974Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4116084Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4116167Z     return BasePlasma(
2025-01-22T20:11:05.4116257Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4116344Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4116437Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4116516Z     self.update(**kwargs)
2025-01-22T20:11:05.4116608Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4116734Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4116849Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4116950Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4117188Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4117345Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4117597Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4117692Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4117823Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4117992Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4118161Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4118339Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4118598Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4118776Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4118955Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4119061Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4119312Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4119559Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4119796Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4119887Z     return self.apply_standard()
2025-01-22T20:11:05.4120163Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4120281Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4120702Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4120818Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4121033Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4121118Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4121382Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4121468Z     return self._get_value(key)
2025-01-22T20:11:05.4121727Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4121817Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4121922Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4121927Z 
2025-01-22T20:11:05.4122084Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4122296Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4122373Z        't046000', 't048000'],
2025-01-22T20:11:05.4122450Z       dtype='object')
2025-01-22T20:11:05.4122523Z key = 'cups'
2025-01-22T20:11:05.4122527Z 
2025-01-22T20:11:05.4122604Z     def get_loc(self, key):
2025-01-22T20:11:05.4122675Z         """
2025-01-22T20:11:05.4122831Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4122906Z     
2025-01-22T20:11:05.4122977Z         Parameters
2025-01-22T20:11:05.4123051Z         ----------
2025-01-22T20:11:05.4123129Z         key : label
2025-01-22T20:11:05.4123194Z     
2025-01-22T20:11:05.4123266Z         Returns
2025-01-22T20:11:05.4123335Z         -------
2025-01-22T20:11:05.4123468Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4123632Z     
2025-01-22T20:11:05.4123706Z         Examples
2025-01-22T20:11:05.4123778Z         --------
2025-01-22T20:11:05.4123881Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4123965Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4124035Z         1
2025-01-22T20:11:05.4124099Z     
2025-01-22T20:11:05.4124205Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4124290Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4124367Z         slice(1, 3, None)
2025-01-22T20:11:05.4124435Z     
2025-01-22T20:11:05.4124547Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4124634Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4124726Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4124797Z         """
2025-01-22T20:11:05.4124897Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4124968Z         try:
2025-01-22T20:11:05.4125065Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4125148Z         except KeyError as err:
2025-01-22T20:11:05.4125247Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4125348Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4125468Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4125538Z             ):
2025-01-22T20:11:05.4125627Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4125717Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4125912Z E           KeyError: 'cups'
2025-01-22T20:11:05.4125918Z 
2025-01-22T20:11:05.4126183Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4126493Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-number_density] _
2025-01-22T20:11:05.4126498Z 
2025-01-22T20:11:05.4126645Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4126851Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4127022Z        't046000', 't048000'],
2025-01-22T20:11:05.4127099Z       dtype='object')
2025-01-22T20:11:05.4127169Z key = 'cups'
2025-01-22T20:11:05.4127174Z 
2025-01-22T20:11:05.4127253Z     def get_loc(self, key):
2025-01-22T20:11:05.4127318Z         """
2025-01-22T20:11:05.4127476Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4127544Z     
2025-01-22T20:11:05.4127620Z         Parameters
2025-01-22T20:11:05.4127696Z         ----------
2025-01-22T20:11:05.4127765Z         key : label
2025-01-22T20:11:05.4127834Z     
2025-01-22T20:11:05.4127901Z         Returns
2025-01-22T20:11:05.4127973Z         -------
2025-01-22T20:11:05.4128100Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4128168Z     
2025-01-22T20:11:05.4128236Z         Examples
2025-01-22T20:11:05.4128310Z         --------
2025-01-22T20:11:05.4128407Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4128497Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4128564Z         1
2025-01-22T20:11:05.4128631Z     
2025-01-22T20:11:05.4128729Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4128818Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4128891Z         slice(1, 3, None)
2025-01-22T20:11:05.4128961Z     
2025-01-22T20:11:05.4129065Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4129161Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4129251Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4129317Z         """
2025-01-22T20:11:05.4129419Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4129486Z         try:
2025-01-22T20:11:05.4129586Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4129590Z 
2025-01-22T20:11:05.4129830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4129942Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4130076Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4130149Z     ???
2025-01-22T20:11:05.4130277Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4130348Z     ???
2025-01-22T20:11:05.4130612Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4130686Z     ???
2025-01-22T20:11:05.4130792Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4130796Z 
2025-01-22T20:11:05.4130860Z >   ???
2025-01-22T20:11:05.4130939Z E   KeyError: 'cups'
2025-01-22T20:11:05.4130943Z 
2025-01-22T20:11:05.4131071Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4131076Z 
2025-01-22T20:11:05.4131245Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4131252Z 
2025-01-22T20:11:05.4131469Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4131788Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4132402Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4132495Z 
2025-01-22T20:11:05.4132585Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4132662Z     def plasma(
2025-01-22T20:11:05.4132730Z         self,
2025-01-22T20:11:05.4132813Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4132881Z         config,
2025-01-22T20:11:05.4132951Z     ):
2025-01-22T20:11:05.4133061Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4133160Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4133237Z 
2025-01-22T20:11:05.4133358Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4133471Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4133671Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4133755Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4133930Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4134032Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4134144Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4134220Z     return BasePlasma(
2025-01-22T20:11:05.4134307Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4134392Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4134485Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4134563Z     self.update(**kwargs)
2025-01-22T20:11:05.4134655Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4134775Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4134892Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4134992Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4135230Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4135385Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4135593Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4135695Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4135819Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4135992Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4136163Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4136338Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4136594Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4136769Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4136946Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4137052Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4137305Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4137433Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4137674Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4137760Z     return self.apply_standard()
2025-01-22T20:11:05.4138039Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4138157Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4138466Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4138587Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4138805Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4138889Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4139155Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4139381Z     return self._get_value(key)
2025-01-22T20:11:05.4139636Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4139726Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4139833Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4139837Z 
2025-01-22T20:11:05.4139996Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4140203Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4140380Z        't046000', 't048000'],
2025-01-22T20:11:05.4140455Z       dtype='object')
2025-01-22T20:11:05.4140531Z key = 'cups'
2025-01-22T20:11:05.4140535Z 
2025-01-22T20:11:05.4140616Z     def get_loc(self, key):
2025-01-22T20:11:05.4140684Z         """
2025-01-22T20:11:05.4140847Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4140917Z     
2025-01-22T20:11:05.4140993Z         Parameters
2025-01-22T20:11:05.4141063Z         ----------
2025-01-22T20:11:05.4141142Z         key : label
2025-01-22T20:11:05.4141209Z     
2025-01-22T20:11:05.4141282Z         Returns
2025-01-22T20:11:05.4141350Z         -------
2025-01-22T20:11:05.4141489Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4141554Z     
2025-01-22T20:11:05.4141628Z         Examples
2025-01-22T20:11:05.4141697Z         --------
2025-01-22T20:11:05.4141803Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4141886Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4141957Z         1
2025-01-22T20:11:05.4142022Z     
2025-01-22T20:11:05.4142132Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4142225Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4142301Z         slice(1, 3, None)
2025-01-22T20:11:05.4142372Z     
2025-01-22T20:11:05.4142482Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4142577Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4142665Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4142735Z         """
2025-01-22T20:11:05.4142835Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4142907Z         try:
2025-01-22T20:11:05.4143006Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4143091Z         except KeyError as err:
2025-01-22T20:11:05.4143187Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4143293Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4143410Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4143482Z             ):
2025-01-22T20:11:05.4143695Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4143788Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4143873Z E           KeyError: 'cups'
2025-01-22T20:11:05.4143881Z 
2025-01-22T20:11:05.4144159Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4144471Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_electrons] _
2025-01-22T20:11:05.4144476Z 
2025-01-22T20:11:05.4144629Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4144840Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4144916Z        't046000', 't048000'],
2025-01-22T20:11:05.4144994Z       dtype='object')
2025-01-22T20:11:05.4145064Z key = 'cups'
2025-01-22T20:11:05.4145072Z 
2025-01-22T20:11:05.4145150Z     def get_loc(self, key):
2025-01-22T20:11:05.4145219Z         """
2025-01-22T20:11:05.4145373Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4145441Z     
2025-01-22T20:11:05.4145629Z         Parameters
2025-01-22T20:11:05.4145702Z         ----------
2025-01-22T20:11:05.4145772Z         key : label
2025-01-22T20:11:05.4145839Z     
2025-01-22T20:11:05.4145906Z         Returns
2025-01-22T20:11:05.4145980Z         -------
2025-01-22T20:11:05.4146109Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4146178Z     
2025-01-22T20:11:05.4146246Z         Examples
2025-01-22T20:11:05.4146319Z         --------
2025-01-22T20:11:05.4146413Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4146600Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4146666Z         1
2025-01-22T20:11:05.4146738Z     
2025-01-22T20:11:05.4146838Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4146927Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4147004Z         slice(1, 3, None)
2025-01-22T20:11:05.4147069Z     
2025-01-22T20:11:05.4147176Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4147269Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4147361Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4147426Z         """
2025-01-22T20:11:05.4147528Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4147596Z         try:
2025-01-22T20:11:05.4147696Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4147701Z 
2025-01-22T20:11:05.4147944Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4148060Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4148194Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4148265Z     ???
2025-01-22T20:11:05.4148397Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4148462Z     ???
2025-01-22T20:11:05.4148733Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4148802Z     ???
2025-01-22T20:11:05.4148911Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4148915Z 
2025-01-22T20:11:05.4148980Z >   ???
2025-01-22T20:11:05.4149060Z E   KeyError: 'cups'
2025-01-22T20:11:05.4149065Z 
2025-01-22T20:11:05.4149191Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4149196Z 
2025-01-22T20:11:05.4149363Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4149367Z 
2025-01-22T20:11:05.4149595Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4149910Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4150535Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4150544Z 
2025-01-22T20:11:05.4150630Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4150707Z     def plasma(
2025-01-22T20:11:05.4150774Z         self,
2025-01-22T20:11:05.4150858Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4150926Z         config,
2025-01-22T20:11:05.4150995Z     ):
2025-01-22T20:11:05.4151105Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4151203Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4151211Z 
2025-01-22T20:11:05.4151340Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4151446Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4151557Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4151640Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4151808Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4151906Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4152105Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4152183Z     return BasePlasma(
2025-01-22T20:11:05.4152270Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4152358Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4152452Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4152530Z     self.update(**kwargs)
2025-01-22T20:11:05.4152621Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4152744Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4152926Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4153031Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4153267Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4153424Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4153750Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4153857Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4153984Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4154155Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4154325Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4154502Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4154766Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4154941Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4155123Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4155223Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4155481Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4155604Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4155847Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4155933Z     return self.apply_standard()
2025-01-22T20:11:05.4156213Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4156330Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4156644Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4156769Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4156983Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4157071Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4157331Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4157419Z     return self._get_value(key)
2025-01-22T20:11:05.4157676Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4157766Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4157874Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4157879Z 
2025-01-22T20:11:05.4158038Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4158248Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4158328Z        't046000', 't048000'],
2025-01-22T20:11:05.4158406Z       dtype='object')
2025-01-22T20:11:05.4158479Z key = 'cups'
2025-01-22T20:11:05.4158484Z 
2025-01-22T20:11:05.4158566Z     def get_loc(self, key):
2025-01-22T20:11:05.4158634Z         """
2025-01-22T20:11:05.4158796Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4158862Z     
2025-01-22T20:11:05.4159059Z         Parameters
2025-01-22T20:11:05.4159131Z         ----------
2025-01-22T20:11:05.4159206Z         key : label
2025-01-22T20:11:05.4159274Z     
2025-01-22T20:11:05.4159347Z         Returns
2025-01-22T20:11:05.4159416Z         -------
2025-01-22T20:11:05.4159551Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4159620Z     
2025-01-22T20:11:05.4159696Z         Examples
2025-01-22T20:11:05.4159773Z         --------
2025-01-22T20:11:05.4159870Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4160100Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4160167Z         1
2025-01-22T20:11:05.4160238Z     
2025-01-22T20:11:05.4160343Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4160435Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4160510Z         slice(1, 3, None)
2025-01-22T20:11:05.4160580Z     
2025-01-22T20:11:05.4160685Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4160785Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4160874Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4160946Z         """
2025-01-22T20:11:05.4161045Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4161120Z         try:
2025-01-22T20:11:05.4161218Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4161305Z         except KeyError as err:
2025-01-22T20:11:05.4161406Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4161511Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4161633Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4161702Z             ):
2025-01-22T20:11:05.4161797Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4161883Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4161967Z E           KeyError: 'cups'
2025-01-22T20:11:05.4161971Z 
2025-01-22T20:11:05.4162235Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4162524Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-w] _
2025-01-22T20:11:05.4162529Z 
2025-01-22T20:11:05.4162683Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4162892Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4162972Z        't046000', 't048000'],
2025-01-22T20:11:05.4163047Z       dtype='object')
2025-01-22T20:11:05.4163122Z key = 'cups'
2025-01-22T20:11:05.4163127Z 
2025-01-22T20:11:05.4163204Z     def get_loc(self, key):
2025-01-22T20:11:05.4163276Z         """
2025-01-22T20:11:05.4163429Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4163595Z     
2025-01-22T20:11:05.4163671Z         Parameters
2025-01-22T20:11:05.4163746Z         ----------
2025-01-22T20:11:05.4163820Z         key : label
2025-01-22T20:11:05.4163890Z     
2025-01-22T20:11:05.4163957Z         Returns
2025-01-22T20:11:05.4164031Z         -------
2025-01-22T20:11:05.4164159Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4164228Z     
2025-01-22T20:11:05.4164303Z         Examples
2025-01-22T20:11:05.4164373Z         --------
2025-01-22T20:11:05.4164474Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4164559Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4164634Z         1
2025-01-22T20:11:05.4164700Z     
2025-01-22T20:11:05.4164803Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4164889Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4164968Z         slice(1, 3, None)
2025-01-22T20:11:05.4165033Z     
2025-01-22T20:11:05.4165140Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4165228Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4165439Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4165507Z         """
2025-01-22T20:11:05.4165613Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4165681Z         try:
2025-01-22T20:11:05.4165783Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4165787Z 
2025-01-22T20:11:05.4166033Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4166142Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4166468Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4166535Z     ???
2025-01-22T20:11:05.4166668Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4166735Z     ???
2025-01-22T20:11:05.4167007Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4167073Z     ???
2025-01-22T20:11:05.4167180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4167189Z 
2025-01-22T20:11:05.4167253Z >   ???
2025-01-22T20:11:05.4167334Z E   KeyError: 'cups'
2025-01-22T20:11:05.4167339Z 
2025-01-22T20:11:05.4167472Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4167477Z 
2025-01-22T20:11:05.4167643Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4167647Z 
2025-01-22T20:11:05.4167870Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4168189Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4168814Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4168823Z 
2025-01-22T20:11:05.4168910Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4168987Z     def plasma(
2025-01-22T20:11:05.4169060Z         self,
2025-01-22T20:11:05.4169139Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4169212Z         config,
2025-01-22T20:11:05.4169278Z     ):
2025-01-22T20:11:05.4169393Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4169486Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4169491Z 
2025-01-22T20:11:05.4169614Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4169724Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4169831Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4169913Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4170083Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4170181Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4170293Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4170378Z     return BasePlasma(
2025-01-22T20:11:05.4170461Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4170552Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4170639Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4170723Z     self.update(**kwargs)
2025-01-22T20:11:05.4170811Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4170938Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4171048Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4171156Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4171390Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4171543Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4171750Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4171850Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4172061Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4172233Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4172404Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4172575Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4172835Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4173003Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4173257Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4173359Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4173714Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4173839Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4174086Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4174176Z     return self.apply_standard()
2025-01-22T20:11:05.4174454Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4174575Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4174878Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4174998Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4175214Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4175304Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4175563Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4175650Z     return self._get_value(key)
2025-01-22T20:11:05.4175905Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4176001Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4176111Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4176116Z 
2025-01-22T20:11:05.4176268Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4176477Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4176552Z        't046000', 't048000'],
2025-01-22T20:11:05.4176631Z       dtype='object')
2025-01-22T20:11:05.4176702Z key = 'cups'
2025-01-22T20:11:05.4176707Z 
2025-01-22T20:11:05.4176789Z     def get_loc(self, key):
2025-01-22T20:11:05.4176856Z         """
2025-01-22T20:11:05.4177016Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4177081Z     
2025-01-22T20:11:05.4177157Z         Parameters
2025-01-22T20:11:05.4177235Z         ----------
2025-01-22T20:11:05.4177310Z         key : label
2025-01-22T20:11:05.4177380Z     
2025-01-22T20:11:05.4177447Z         Returns
2025-01-22T20:11:05.4177520Z         -------
2025-01-22T20:11:05.4177659Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4177729Z     
2025-01-22T20:11:05.4177797Z         Examples
2025-01-22T20:11:05.4177872Z         --------
2025-01-22T20:11:05.4177970Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4178059Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4178129Z         1
2025-01-22T20:11:05.4178202Z     
2025-01-22T20:11:05.4178303Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4178399Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4178474Z         slice(1, 3, None)
2025-01-22T20:11:05.4178545Z     
2025-01-22T20:11:05.4178655Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4178751Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4178963Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4179030Z         """
2025-01-22T20:11:05.4179136Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4179204Z         try:
2025-01-22T20:11:05.4179306Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4179388Z         except KeyError as err:
2025-01-22T20:11:05.4179489Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4179587Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4179812Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4179880Z             ):
2025-01-22T20:11:05.4179976Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4180062Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4180149Z E           KeyError: 'cups'
2025-01-22T20:11:05.4180154Z 
2025-01-22T20:11:05.4180429Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4180733Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_rad] _
2025-01-22T20:11:05.4180739Z 
2025-01-22T20:11:05.4180899Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4181107Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4181186Z        't046000', 't048000'],
2025-01-22T20:11:05.4181263Z       dtype='object')
2025-01-22T20:11:05.4181339Z key = 'cups'
2025-01-22T20:11:05.4181343Z 
2025-01-22T20:11:05.4181421Z     def get_loc(self, key):
2025-01-22T20:11:05.4181493Z         """
2025-01-22T20:11:05.4181651Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4181722Z     
2025-01-22T20:11:05.4181796Z         Parameters
2025-01-22T20:11:05.4181873Z         ----------
2025-01-22T20:11:05.4181949Z         key : label
2025-01-22T20:11:05.4182018Z     
2025-01-22T20:11:05.4182091Z         Returns
2025-01-22T20:11:05.4182160Z         -------
2025-01-22T20:11:05.4182293Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4182359Z     
2025-01-22T20:11:05.4182436Z         Examples
2025-01-22T20:11:05.4182505Z         --------
2025-01-22T20:11:05.4182605Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4182692Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4182764Z         1
2025-01-22T20:11:05.4182833Z     
2025-01-22T20:11:05.4182935Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4183020Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4183099Z         slice(1, 3, None)
2025-01-22T20:11:05.4183164Z     
2025-01-22T20:11:05.4183273Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4183363Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4183457Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4183629Z         """
2025-01-22T20:11:05.4183732Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4183805Z         try:
2025-01-22T20:11:05.4183901Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4183906Z 
2025-01-22T20:11:05.4184160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4184271Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4184414Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4184480Z     ???
2025-01-22T20:11:05.4184612Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4184678Z     ???
2025-01-22T20:11:05.4184949Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4185016Z     ???
2025-01-22T20:11:05.4185127Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4185247Z 
2025-01-22T20:11:05.4185318Z >   ???
2025-01-22T20:11:05.4185395Z E   KeyError: 'cups'
2025-01-22T20:11:05.4185399Z 
2025-01-22T20:11:05.4185529Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4185534Z 
2025-01-22T20:11:05.4185701Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4185705Z 
2025-01-22T20:11:05.4185928Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4186362Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4186991Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4186997Z 
2025-01-22T20:11:05.4187087Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4187163Z     def plasma(
2025-01-22T20:11:05.4187239Z         self,
2025-01-22T20:11:05.4187319Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4187391Z         config,
2025-01-22T20:11:05.4187458Z     ):
2025-01-22T20:11:05.4187574Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4187668Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4187673Z 
2025-01-22T20:11:05.4187797Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4187901Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4188012Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4188098Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4188259Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4188362Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4188469Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4188554Z     return BasePlasma(
2025-01-22T20:11:05.4188638Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4188729Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4188817Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4188900Z     self.update(**kwargs)
2025-01-22T20:11:05.4188988Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4189112Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4189221Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4189327Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4189560Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4189716Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4189930Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4190025Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4190156Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4190325Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4190500Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4190673Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4190934Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4191105Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4191293Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4191399Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4191652Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4191780Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4192019Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4192195Z     return self.apply_standard()
2025-01-22T20:11:05.4192471Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4192594Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4192900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4193021Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4193307Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4193395Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4193779Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4193864Z     return self._get_value(key)
2025-01-22T20:11:05.4194124Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4194216Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4194336Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4194340Z 
2025-01-22T20:11:05.4194492Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4194703Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4194776Z        't046000', 't048000'],
2025-01-22T20:11:05.4194862Z       dtype='object')
2025-01-22T20:11:05.4194933Z key = 'cups'
2025-01-22T20:11:05.4194941Z 
2025-01-22T20:11:05.4195017Z     def get_loc(self, key):
2025-01-22T20:11:05.4195089Z         """
2025-01-22T20:11:05.4195244Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4195314Z     
2025-01-22T20:11:05.4195387Z         Parameters
2025-01-22T20:11:05.4195462Z         ----------
2025-01-22T20:11:05.4195532Z         key : label
2025-01-22T20:11:05.4195605Z     
2025-01-22T20:11:05.4195673Z         Returns
2025-01-22T20:11:05.4195745Z         -------
2025-01-22T20:11:05.4195873Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4195944Z     
2025-01-22T20:11:05.4196014Z         Examples
2025-01-22T20:11:05.4196090Z         --------
2025-01-22T20:11:05.4196187Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4196276Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4196344Z         1
2025-01-22T20:11:05.4196418Z     
2025-01-22T20:11:05.4196519Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4196611Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4196690Z         slice(1, 3, None)
2025-01-22T20:11:05.4196756Z     
2025-01-22T20:11:05.4196865Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4196954Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4197048Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4197119Z         """
2025-01-22T20:11:05.4197227Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4197295Z         try:
2025-01-22T20:11:05.4197399Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4197481Z         except KeyError as err:
2025-01-22T20:11:05.4197582Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4197678Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4197801Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4197874Z             ):
2025-01-22T20:11:05.4197971Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4198063Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4198142Z E           KeyError: 'cups'
2025-01-22T20:11:05.4198147Z 
2025-01-22T20:11:05.4198414Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4198845Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_electron] _
2025-01-22T20:11:05.4198851Z 
2025-01-22T20:11:05.4199009Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4199215Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4199293Z        't046000', 't048000'],
2025-01-22T20:11:05.4199368Z       dtype='object')
2025-01-22T20:11:05.4199601Z key = 'cups'
2025-01-22T20:11:05.4199606Z 
2025-01-22T20:11:05.4199688Z     def get_loc(self, key):
2025-01-22T20:11:05.4199754Z         """
2025-01-22T20:11:05.4199914Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4199980Z     
2025-01-22T20:11:05.4200057Z         Parameters
2025-01-22T20:11:05.4200129Z         ----------
2025-01-22T20:11:05.4200205Z         key : label
2025-01-22T20:11:05.4200270Z     
2025-01-22T20:11:05.4200348Z         Returns
2025-01-22T20:11:05.4200419Z         -------
2025-01-22T20:11:05.4200550Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4200614Z     
2025-01-22T20:11:05.4200686Z         Examples
2025-01-22T20:11:05.4200754Z         --------
2025-01-22T20:11:05.4200851Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4200933Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4201005Z         1
2025-01-22T20:11:05.4201071Z     
2025-01-22T20:11:05.4201172Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4201265Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4201340Z         slice(1, 3, None)
2025-01-22T20:11:05.4201410Z     
2025-01-22T20:11:05.4201517Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4201609Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4201698Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4201772Z         """
2025-01-22T20:11:05.4201876Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4201948Z         try:
2025-01-22T20:11:05.4202045Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4202049Z 
2025-01-22T20:11:05.4202296Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4202403Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4202542Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4202618Z     ???
2025-01-22T20:11:05.4202747Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4202818Z     ???
2025-01-22T20:11:05.4203086Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4203155Z     ???
2025-01-22T20:11:05.4203258Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4203263Z 
2025-01-22T20:11:05.4203338Z >   ???
2025-01-22T20:11:05.4203414Z E   KeyError: 'cups'
2025-01-22T20:11:05.4203418Z 
2025-01-22T20:11:05.4203648Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4203653Z 
2025-01-22T20:11:05.4203820Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4203829Z 
2025-01-22T20:11:05.4204049Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4204367Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4204990Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4204995Z 
2025-01-22T20:11:05.4205088Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4205159Z     def plasma(
2025-01-22T20:11:05.4205350Z         self,
2025-01-22T20:11:05.4205430Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4205502Z         config,
2025-01-22T20:11:05.4205568Z     ):
2025-01-22T20:11:05.4205720Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4205815Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4205820Z 
2025-01-22T20:11:05.4205940Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4206046Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4206248Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4206335Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4206499Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4206601Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4206709Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4206791Z     return BasePlasma(
2025-01-22T20:11:05.4206879Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4206969Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4207056Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4207139Z     self.update(**kwargs)
2025-01-22T20:11:05.4207230Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4207348Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4207460Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4207560Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4207800Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4207950Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4208161Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4208256Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4208386Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4208554Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4208725Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4208899Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4209158Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4209332Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4209520Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4209627Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4209877Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4210003Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4210239Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4210335Z     return self.apply_standard()
2025-01-22T20:11:05.4210609Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4210731Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4211038Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4211154Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4211371Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4211460Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4211727Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4211810Z     return self._get_value(key)
2025-01-22T20:11:05.4212072Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4212263Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4212373Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4212377Z 
2025-01-22T20:11:05.4212531Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4212742Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4212818Z        't046000', 't048000'],
2025-01-22T20:11:05.4212892Z       dtype='object')
2025-01-22T20:11:05.4213041Z key = 'cups'
2025-01-22T20:11:05.4213046Z 
2025-01-22T20:11:05.4213124Z     def get_loc(self, key):
2025-01-22T20:11:05.4213196Z         """
2025-01-22T20:11:05.4213351Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4213421Z     
2025-01-22T20:11:05.4213593Z         Parameters
2025-01-22T20:11:05.4213669Z         ----------
2025-01-22T20:11:05.4213740Z         key : label
2025-01-22T20:11:05.4213809Z     
2025-01-22T20:11:05.4213881Z         Returns
2025-01-22T20:11:05.4213956Z         -------
2025-01-22T20:11:05.4214085Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4214157Z     
2025-01-22T20:11:05.4214231Z         Examples
2025-01-22T20:11:05.4214300Z         --------
2025-01-22T20:11:05.4214401Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4214485Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4214557Z         1
2025-01-22T20:11:05.4214622Z     
2025-01-22T20:11:05.4214732Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4214821Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4214899Z         slice(1, 3, None)
2025-01-22T20:11:05.4214964Z     
2025-01-22T20:11:05.4215075Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4215164Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4215258Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4215328Z         """
2025-01-22T20:11:05.4215435Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4215504Z         try:
2025-01-22T20:11:05.4215606Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4215696Z         except KeyError as err:
2025-01-22T20:11:05.4215793Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4215895Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4216010Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4216088Z             ):
2025-01-22T20:11:05.4216178Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4216267Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4216346Z E           KeyError: 'cups'
2025-01-22T20:11:05.4216350Z 
2025-01-22T20:11:05.4216617Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4216950Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_boltzmann_factor] _
2025-01-22T20:11:05.4216959Z 
2025-01-22T20:11:05.4217114Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4217322Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4217422Z        't046000', 't048000'],
2025-01-22T20:11:05.4217501Z       dtype='object')
2025-01-22T20:11:05.4217572Z key = 'cups'
2025-01-22T20:11:05.4217580Z 
2025-01-22T20:11:05.4217662Z     def get_loc(self, key):
2025-01-22T20:11:05.4217729Z         """
2025-01-22T20:11:05.4217889Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4217954Z     
2025-01-22T20:11:05.4218031Z         Parameters
2025-01-22T20:11:05.4218100Z         ----------
2025-01-22T20:11:05.4218176Z         key : label
2025-01-22T20:11:05.4218242Z     
2025-01-22T20:11:05.4218315Z         Returns
2025-01-22T20:11:05.4218507Z         -------
2025-01-22T20:11:05.4218642Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4218713Z     
2025-01-22T20:11:05.4218782Z         Examples
2025-01-22T20:11:05.4218859Z         --------
2025-01-22T20:11:05.4218958Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4219046Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4219115Z         1
2025-01-22T20:11:05.4219185Z     
2025-01-22T20:11:05.4219285Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4219477Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4219553Z         slice(1, 3, None)
2025-01-22T20:11:05.4219622Z     
2025-01-22T20:11:05.4219728Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4219823Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4219911Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4219984Z         """
2025-01-22T20:11:05.4220082Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4220159Z         try:
2025-01-22T20:11:05.4220256Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4220268Z 
2025-01-22T20:11:05.4220508Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4220619Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4220755Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4220826Z     ???
2025-01-22T20:11:05.4220958Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4221029Z     ???
2025-01-22T20:11:05.4221296Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4221366Z     ???
2025-01-22T20:11:05.4221470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4221474Z 
2025-01-22T20:11:05.4221546Z >   ???
2025-01-22T20:11:05.4221626Z E   KeyError: 'cups'
2025-01-22T20:11:05.4221636Z 
2025-01-22T20:11:05.4221761Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4221765Z 
2025-01-22T20:11:05.4221938Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4221943Z 
2025-01-22T20:11:05.4222161Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4222479Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4223105Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4223110Z 
2025-01-22T20:11:05.4223202Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4223280Z     def plasma(
2025-01-22T20:11:05.4223348Z         self,
2025-01-22T20:11:05.4223434Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4223624Z         config,
2025-01-22T20:11:05.4223697Z     ):
2025-01-22T20:11:05.4223808Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4223906Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4223911Z 
2025-01-22T20:11:05.4224031Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4224141Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4224248Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4224335Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4224502Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4224606Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4224714Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4224797Z     return BasePlasma(
2025-01-22T20:11:05.4224888Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4225093Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4225186Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4225264Z     self.update(**kwargs)
2025-01-22T20:11:05.4225355Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4225474Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4225589Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4225690Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4225929Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4226196Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4226412Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4226506Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4226638Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4226812Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4226984Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4227158Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4227414Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4227588Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4227766Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4227873Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4228124Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4228251Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4228494Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4228585Z     return self.apply_standard()
2025-01-22T20:11:05.4228867Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4228983Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4229290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4229406Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4229624Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4229710Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4229977Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4230059Z     return self._get_value(key)
2025-01-22T20:11:05.4230319Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4230410Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4230521Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4230525Z 
2025-01-22T20:11:05.4230685Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4230892Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4230969Z        't046000', 't048000'],
2025-01-22T20:11:05.4231043Z       dtype='object')
2025-01-22T20:11:05.4231120Z key = 'cups'
2025-01-22T20:11:05.4231127Z 
2025-01-22T20:11:05.4231205Z     def get_loc(self, key):
2025-01-22T20:11:05.4231279Z         """
2025-01-22T20:11:05.4231434Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4231506Z     
2025-01-22T20:11:05.4231583Z         Parameters
2025-01-22T20:11:05.4231654Z         ----------
2025-01-22T20:11:05.4231733Z         key : label
2025-01-22T20:11:05.4231798Z     
2025-01-22T20:11:05.4231872Z         Returns
2025-01-22T20:11:05.4232027Z         -------
2025-01-22T20:11:05.4232162Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4232228Z     
2025-01-22T20:11:05.4232303Z         Examples
2025-01-22T20:11:05.4232372Z         --------
2025-01-22T20:11:05.4232471Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4232559Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4232631Z         1
2025-01-22T20:11:05.4232696Z     
2025-01-22T20:11:05.4232801Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4232963Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4233044Z         slice(1, 3, None)
2025-01-22T20:11:05.4233111Z     
2025-01-22T20:11:05.4233222Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4233312Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4233407Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4233479Z         """
2025-01-22T20:11:05.4233698Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4233772Z         try:
2025-01-22T20:11:05.4233871Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4233955Z         except KeyError as err:
2025-01-22T20:11:05.4234054Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4234164Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4234283Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4234354Z             ):
2025-01-22T20:11:05.4234448Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4234539Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4234618Z E           KeyError: 'cups'
2025-01-22T20:11:05.4234621Z 
2025-01-22T20:11:05.4234890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4235215Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-partition_function] _
2025-01-22T20:11:05.4235224Z 
2025-01-22T20:11:05.4235377Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4235588Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4235662Z        't046000', 't048000'],
2025-01-22T20:11:05.4235741Z       dtype='object')
2025-01-22T20:11:05.4235812Z key = 'cups'
2025-01-22T20:11:05.4235816Z 
2025-01-22T20:11:05.4235897Z     def get_loc(self, key):
2025-01-22T20:11:05.4235967Z         """
2025-01-22T20:11:05.4236127Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4236192Z     
2025-01-22T20:11:05.4236272Z         Parameters
2025-01-22T20:11:05.4236347Z         ----------
2025-01-22T20:11:05.4236417Z         key : label
2025-01-22T20:11:05.4236489Z     
2025-01-22T20:11:05.4236557Z         Returns
2025-01-22T20:11:05.4236632Z         -------
2025-01-22T20:11:05.4236764Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4236837Z     
2025-01-22T20:11:05.4236906Z         Examples
2025-01-22T20:11:05.4236979Z         --------
2025-01-22T20:11:05.4237073Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4237162Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4237229Z         1
2025-01-22T20:11:05.4237299Z     
2025-01-22T20:11:05.4237398Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4237490Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4237568Z         slice(1, 3, None)
2025-01-22T20:11:05.4237641Z     
2025-01-22T20:11:05.4237745Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4237839Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4237933Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4238001Z         """
2025-01-22T20:11:05.4238104Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4238309Z         try:
2025-01-22T20:11:05.4238411Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4238415Z 
2025-01-22T20:11:05.4238657Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4238768Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4238904Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4238975Z     ???
2025-01-22T20:11:05.4239104Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4239276Z     ???
2025-01-22T20:11:05.4239544Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4239616Z     ???
2025-01-22T20:11:05.4239724Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4239729Z 
2025-01-22T20:11:05.4239794Z >   ???
2025-01-22T20:11:05.4239875Z E   KeyError: 'cups'
2025-01-22T20:11:05.4239883Z 
2025-01-22T20:11:05.4240009Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4240013Z 
2025-01-22T20:11:05.4240186Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4240190Z 
2025-01-22T20:11:05.4240408Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4240728Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4241355Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4241360Z 
2025-01-22T20:11:05.4241447Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4241525Z     def plasma(
2025-01-22T20:11:05.4241592Z         self,
2025-01-22T20:11:05.4241677Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4241749Z         config,
2025-01-22T20:11:05.4247451Z     ):
2025-01-22T20:11:05.4247737Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4247934Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4247942Z 
2025-01-22T20:11:05.4248159Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4248341Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4248510Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4248664Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4248938Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4249091Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4249269Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4249392Z     return BasePlasma(
2025-01-22T20:11:05.4249525Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4249664Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4249817Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4249942Z     self.update(**kwargs)
2025-01-22T20:11:05.4250085Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4250280Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4250465Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4250628Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4250998Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4251266Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4251612Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4251771Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4251973Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4252237Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4252726Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4253003Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4253468Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4253975Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4254273Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4254446Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4255032Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4255228Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4255620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4255757Z     return self.apply_standard()
2025-01-22T20:11:05.4256194Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4256391Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4256888Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4257070Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4257420Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4257553Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4258001Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4258134Z     return self._get_value(key)
2025-01-22T20:11:05.4258530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4258673Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4258854Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4258868Z 
2025-01-22T20:11:05.4259121Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4259454Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4259582Z        't046000', 't048000'],
2025-01-22T20:11:05.4259700Z       dtype='object')
2025-01-22T20:11:05.4259817Z key = 'cups'
2025-01-22T20:11:05.4259824Z 
2025-01-22T20:11:05.4259965Z     def get_loc(self, key):
2025-01-22T20:11:05.4260075Z         """
2025-01-22T20:11:05.4260347Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4260448Z     
2025-01-22T20:11:05.4260570Z         Parameters
2025-01-22T20:11:05.4260686Z         ----------
2025-01-22T20:11:05.4260808Z         key : label
2025-01-22T20:11:05.4260917Z     
2025-01-22T20:11:05.4261029Z         Returns
2025-01-22T20:11:05.4261138Z         -------
2025-01-22T20:11:05.4261364Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4261471Z     
2025-01-22T20:11:05.4261593Z         Examples
2025-01-22T20:11:05.4261706Z         --------
2025-01-22T20:11:05.4261876Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4262010Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4262123Z         1
2025-01-22T20:11:05.4262229Z     
2025-01-22T20:11:05.4262401Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4262547Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4262669Z         slice(1, 3, None)
2025-01-22T20:11:05.4262781Z     
2025-01-22T20:11:05.4262952Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4263099Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4263244Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4263361Z         """
2025-01-22T20:11:05.4263665Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4263951Z         try:
2025-01-22T20:11:05.4264108Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4264250Z         except KeyError as err:
2025-01-22T20:11:05.4264401Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4264564Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4264751Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4264865Z             ):
2025-01-22T20:11:05.4265015Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4265319Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4265451Z E           KeyError: 'cups'
2025-01-22T20:11:05.4265458Z 
2025-01-22T20:11:05.4265906Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4266424Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-excitation_energy] _
2025-01-22T20:11:05.4266439Z 
2025-01-22T20:11:05.4287403Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4287704Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4287784Z        't046000', 't048000'],
2025-01-22T20:11:05.4287864Z       dtype='object')
2025-01-22T20:11:05.4287934Z key = 'cups'
2025-01-22T20:11:05.4287943Z 
2025-01-22T20:11:05.4288025Z     def get_loc(self, key):
2025-01-22T20:11:05.4288093Z         """
2025-01-22T20:11:05.4288278Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4288345Z     
2025-01-22T20:11:05.4288417Z         Parameters
2025-01-22T20:11:05.4288491Z         ----------
2025-01-22T20:11:05.4288561Z         key : label
2025-01-22T20:11:05.4288626Z     
2025-01-22T20:11:05.4288691Z         Returns
2025-01-22T20:11:05.4288761Z         -------
2025-01-22T20:11:05.4288904Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4288975Z     
2025-01-22T20:11:05.4289044Z         Examples
2025-01-22T20:11:05.4289115Z         --------
2025-01-22T20:11:05.4289215Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4289305Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4289370Z         1
2025-01-22T20:11:05.4289435Z     
2025-01-22T20:11:05.4289541Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4289630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4289710Z         slice(1, 3, None)
2025-01-22T20:11:05.4289773Z     
2025-01-22T20:11:05.4289885Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4289976Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4290067Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4290133Z         """
2025-01-22T20:11:05.4290235Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4290302Z         try:
2025-01-22T20:11:05.4290406Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4290412Z 
2025-01-22T20:11:05.4290675Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4290791Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4290933Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4291003Z     ???
2025-01-22T20:11:05.4291142Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4291210Z     ???
2025-01-22T20:11:05.4291486Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4291550Z     ???
2025-01-22T20:11:05.4291660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4291664Z 
2025-01-22T20:11:05.4291727Z >   ???
2025-01-22T20:11:05.4291804Z E   KeyError: 'cups'
2025-01-22T20:11:05.4291809Z 
2025-01-22T20:11:05.4292115Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4292121Z 
2025-01-22T20:11:05.4292291Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4292296Z 
2025-01-22T20:11:05.4292520Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4292841Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4293465Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4293768Z 
2025-01-22T20:11:05.4293871Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4293948Z     def plasma(
2025-01-22T20:11:05.4294015Z         self,
2025-01-22T20:11:05.4294098Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4294169Z         config,
2025-01-22T20:11:05.4294236Z     ):
2025-01-22T20:11:05.4294353Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4294454Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4294459Z 
2025-01-22T20:11:05.4294588Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4294696Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4294803Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4294885Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4295060Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4295159Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4295269Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4295344Z     return BasePlasma(
2025-01-22T20:11:05.4295433Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4295520Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4295612Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4295691Z     self.update(**kwargs)
2025-01-22T20:11:05.4295779Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4295902Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4296009Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4296114Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4296349Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4296505Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4296716Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4296813Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4296941Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4297114Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4297286Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4297465Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4297729Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4297902Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4298085Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4298190Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4298466Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4298595Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4298848Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4298933Z     return self.apply_standard()
2025-01-22T20:11:05.4299224Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4299466Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4299798Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4299922Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4300145Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4300230Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4300599Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4300681Z     return self._get_value(key)
2025-01-22T20:11:05.4300944Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4301034Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4301145Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4301153Z 
2025-01-22T20:11:05.4301314Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4301525Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4301603Z        't046000', 't048000'],
2025-01-22T20:11:05.4301679Z       dtype='object')
2025-01-22T20:11:05.4301756Z key = 'cups'
2025-01-22T20:11:05.4301760Z 
2025-01-22T20:11:05.4301839Z     def get_loc(self, key):
2025-01-22T20:11:05.4301914Z         """
2025-01-22T20:11:05.4302074Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4302143Z     
2025-01-22T20:11:05.4302216Z         Parameters
2025-01-22T20:11:05.4302298Z         ----------
2025-01-22T20:11:05.4302372Z         key : label
2025-01-22T20:11:05.4302437Z     
2025-01-22T20:11:05.4302510Z         Returns
2025-01-22T20:11:05.4302581Z         -------
2025-01-22T20:11:05.4302717Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4302787Z     
2025-01-22T20:11:05.4302860Z         Examples
2025-01-22T20:11:05.4302930Z         --------
2025-01-22T20:11:05.4303033Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4303120Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4303193Z         1
2025-01-22T20:11:05.4303258Z     
2025-01-22T20:11:05.4303367Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4303455Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4303706Z         slice(1, 3, None)
2025-01-22T20:11:05.4303776Z     
2025-01-22T20:11:05.4303891Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4303983Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4304079Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4304151Z         """
2025-01-22T20:11:05.4304253Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4304326Z         try:
2025-01-22T20:11:05.4304429Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4304516Z         except KeyError as err:
2025-01-22T20:11:05.4304613Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4304717Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4304834Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4304908Z             ):
2025-01-22T20:11:05.4305000Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4305098Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4305178Z E           KeyError: 'cups'
2025-01-22T20:11:05.4305182Z 
2025-01-22T20:11:05.4305456Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4305761Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] _
2025-01-22T20:11:05.4305767Z 
2025-01-22T20:11:05.4305925Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4306258Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4306333Z        't046000', 't048000'],
2025-01-22T20:11:05.4306410Z       dtype='object')
2025-01-22T20:11:05.4306482Z key = 'cups'
2025-01-22T20:11:05.4306487Z 
2025-01-22T20:11:05.4306570Z     def get_loc(self, key):
2025-01-22T20:11:05.4306637Z         """
2025-01-22T20:11:05.4306800Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4306971Z     
2025-01-22T20:11:05.4307048Z         Parameters
2025-01-22T20:11:05.4307124Z         ----------
2025-01-22T20:11:05.4307195Z         key : label
2025-01-22T20:11:05.4307266Z     
2025-01-22T20:11:05.4307334Z         Returns
2025-01-22T20:11:05.4307408Z         -------
2025-01-22T20:11:05.4307537Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4307612Z     
2025-01-22T20:11:05.4307682Z         Examples
2025-01-22T20:11:05.4307756Z         --------
2025-01-22T20:11:05.4307851Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4307941Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4308008Z         1
2025-01-22T20:11:05.4308078Z     
2025-01-22T20:11:05.4308177Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4308269Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4308344Z         slice(1, 3, None)
2025-01-22T20:11:05.4308419Z     
2025-01-22T20:11:05.4308526Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4308621Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4308716Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4308785Z         """
2025-01-22T20:11:05.4308895Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4308963Z         try:
2025-01-22T20:11:05.4309066Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4309074Z 
2025-01-22T20:11:05.4309317Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4309432Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4309572Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4309645Z     ???
2025-01-22T20:11:05.4309776Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4309847Z     ???
2025-01-22T20:11:05.4310127Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4310199Z     ???
2025-01-22T20:11:05.4310316Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4310320Z 
2025-01-22T20:11:05.4310385Z >   ???
2025-01-22T20:11:05.4310467Z E   KeyError: 'cups'
2025-01-22T20:11:05.4310472Z 
2025-01-22T20:11:05.4310601Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4310609Z 
2025-01-22T20:11:05.4310784Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4310789Z 
2025-01-22T20:11:05.4311011Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4311336Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4311955Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4311970Z 
2025-01-22T20:11:05.4312058Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4312136Z     def plasma(
2025-01-22T20:11:05.4312205Z         self,
2025-01-22T20:11:05.4312293Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4312361Z         config,
2025-01-22T20:11:05.4312432Z     ):
2025-01-22T20:11:05.4312631Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4312733Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4312737Z 
2025-01-22T20:11:05.4312859Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4312973Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4313084Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4313167Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4313337Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4313665Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4313791Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4313871Z     return BasePlasma(
2025-01-22T20:11:05.4313961Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4314048Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4314142Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4314228Z     self.update(**kwargs)
2025-01-22T20:11:05.4314322Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4314444Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4314562Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4314666Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4314906Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4315067Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4315280Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4315380Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4315508Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4315682Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4315852Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4316034Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4316290Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4316467Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4316646Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4316757Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4317017Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4317144Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4317389Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4317478Z     return self.apply_standard()
2025-01-22T20:11:05.4317758Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4317880Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4318187Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4318306Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4318524Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4318610Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4318878Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4318970Z     return self._get_value(key)
2025-01-22T20:11:05.4319226Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4319317Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4319425Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4319430Z 
2025-01-22T20:11:05.4319719Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4319932Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4320011Z        't046000', 't048000'],
2025-01-22T20:11:05.4320087Z       dtype='object')
2025-01-22T20:11:05.4320164Z key = 'cups'
2025-01-22T20:11:05.4320168Z 
2025-01-22T20:11:05.4320253Z     def get_loc(self, key):
2025-01-22T20:11:05.4320319Z         """
2025-01-22T20:11:05.4320483Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4320675Z     
2025-01-22T20:11:05.4320754Z         Parameters
2025-01-22T20:11:05.4320826Z         ----------
2025-01-22T20:11:05.4320904Z         key : label
2025-01-22T20:11:05.4320970Z     
2025-01-22T20:11:05.4321042Z         Returns
2025-01-22T20:11:05.4321111Z         -------
2025-01-22T20:11:05.4321250Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4321321Z     
2025-01-22T20:11:05.4321396Z         Examples
2025-01-22T20:11:05.4321466Z         --------
2025-01-22T20:11:05.4321568Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4321655Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4321726Z         1
2025-01-22T20:11:05.4321792Z     
2025-01-22T20:11:05.4321900Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4321993Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4322100Z         slice(1, 3, None)
2025-01-22T20:11:05.4322175Z     
2025-01-22T20:11:05.4322283Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4322377Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4322466Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4322537Z         """
2025-01-22T20:11:05.4322637Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4322709Z         try:
2025-01-22T20:11:05.4322808Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4322913Z         except KeyError as err:
2025-01-22T20:11:05.4323015Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4323121Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4323240Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4323311Z             ):
2025-01-22T20:11:05.4323403Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4323635Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4323756Z E           KeyError: 'cups'
2025-01-22T20:11:05.4323762Z 
2025-01-22T20:11:05.4324033Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4324374Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] _
2025-01-22T20:11:05.4324380Z 
2025-01-22T20:11:05.4324534Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4324751Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4324825Z        't046000', 't048000'],
2025-01-22T20:11:05.4324904Z       dtype='object')
2025-01-22T20:11:05.4324975Z key = 'cups'
2025-01-22T20:11:05.4324984Z 
2025-01-22T20:11:05.4325064Z     def get_loc(self, key):
2025-01-22T20:11:05.4325134Z         """
2025-01-22T20:11:05.4325296Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4325370Z     
2025-01-22T20:11:05.4325441Z         Parameters
2025-01-22T20:11:05.4325516Z         ----------
2025-01-22T20:11:05.4325587Z         key : label
2025-01-22T20:11:05.4325659Z     
2025-01-22T20:11:05.4325729Z         Returns
2025-01-22T20:11:05.4325802Z         -------
2025-01-22T20:11:05.4325932Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4326004Z     
2025-01-22T20:11:05.4326073Z         Examples
2025-01-22T20:11:05.4326296Z         --------
2025-01-22T20:11:05.4326393Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4326483Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4326550Z         1
2025-01-22T20:11:05.4326621Z     
2025-01-22T20:11:05.4326727Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4326819Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4326898Z         slice(1, 3, None)
2025-01-22T20:11:05.4326965Z     
2025-01-22T20:11:05.4327077Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4327269Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4327364Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4327432Z         """
2025-01-22T20:11:05.4327536Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4327604Z         try:
2025-01-22T20:11:05.4327708Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4327717Z 
2025-01-22T20:11:05.4327965Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4328079Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4328217Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4328289Z     ???
2025-01-22T20:11:05.4328422Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4328488Z     ???
2025-01-22T20:11:05.4328774Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4328847Z     ???
2025-01-22T20:11:05.4328961Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4328966Z 
2025-01-22T20:11:05.4329032Z >   ???
2025-01-22T20:11:05.4329113Z E   KeyError: 'cups'
2025-01-22T20:11:05.4329117Z 
2025-01-22T20:11:05.4329245Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4329250Z 
2025-01-22T20:11:05.4329429Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4329435Z 
2025-01-22T20:11:05.4329660Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4329981Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4330605Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4330614Z 
2025-01-22T20:11:05.4330702Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4330783Z     def plasma(
2025-01-22T20:11:05.4330851Z         self,
2025-01-22T20:11:05.4330937Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4331006Z         config,
2025-01-22T20:11:05.4331077Z     ):
2025-01-22T20:11:05.4331190Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4331295Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4331300Z 
2025-01-22T20:11:05.4331431Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4331541Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4331655Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4331754Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4331931Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4332034Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4332150Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4332228Z     return BasePlasma(
2025-01-22T20:11:05.4332318Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4332405Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4332500Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4332580Z     self.update(**kwargs)
2025-01-22T20:11:05.4332762Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4332888Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4332999Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4333105Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4333340Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4333662Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4333928Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4334152Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4334282Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4334456Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4334627Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4334804Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4335074Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4335246Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4335429Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4335532Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4335792Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4335922Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4336167Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4336254Z     return self.apply_standard()
2025-01-22T20:11:05.4336534Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4336652Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4336965Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4337088Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4337305Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4337395Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4337654Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4337743Z     return self._get_value(key)
2025-01-22T20:11:05.4337999Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4338090Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4338197Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4338202Z 
2025-01-22T20:11:05.4338362Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4338580Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4338655Z        't046000', 't048000'],
2025-01-22T20:11:05.4338737Z       dtype='object')
2025-01-22T20:11:05.4338810Z key = 'cups'
2025-01-22T20:11:05.4338815Z 
2025-01-22T20:11:05.4338899Z     def get_loc(self, key):
2025-01-22T20:11:05.4338967Z         """
2025-01-22T20:11:05.4339132Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4339201Z     
2025-01-22T20:11:05.4339277Z         Parameters
2025-01-22T20:11:05.4339349Z         ----------
2025-01-22T20:11:05.4339425Z         key : label
2025-01-22T20:11:05.4339490Z     
2025-01-22T20:11:05.4339569Z         Returns
2025-01-22T20:11:05.4339638Z         -------
2025-01-22T20:11:05.4339775Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4339841Z     
2025-01-22T20:11:05.4340031Z         Examples
2025-01-22T20:11:05.4340107Z         --------
2025-01-22T20:11:05.4340205Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4340294Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4340360Z         1
2025-01-22T20:11:05.4340432Z     
2025-01-22T20:11:05.4340536Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4340630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4340704Z         slice(1, 3, None)
2025-01-22T20:11:05.4340774Z     
2025-01-22T20:11:05.4340955Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4341050Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4341139Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4341211Z         """
2025-01-22T20:11:05.4341312Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4341385Z         try:
2025-01-22T20:11:05.4341484Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4341576Z         except KeyError as err:
2025-01-22T20:11:05.4341677Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4341780Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4341902Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4341970Z             ):
2025-01-22T20:11:05.4342066Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4342152Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4342237Z E           KeyError: 'cups'
2025-01-22T20:11:05.4342245Z 
2025-01-22T20:11:05.4342509Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4342853Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] _
2025-01-22T20:11:05.4342858Z 
2025-01-22T20:11:05.4343012Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4343226Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4343306Z        't046000', 't048000'],
2025-01-22T20:11:05.4343381Z       dtype='object')
2025-01-22T20:11:05.4343455Z key = 'cups'
2025-01-22T20:11:05.4343460Z 
2025-01-22T20:11:05.4343663Z     def get_loc(self, key):
2025-01-22T20:11:05.4343737Z         """
2025-01-22T20:11:05.4343899Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4343969Z     
2025-01-22T20:11:05.4344043Z         Parameters
2025-01-22T20:11:05.4344119Z         ----------
2025-01-22T20:11:05.4344190Z         key : label
2025-01-22T20:11:05.4344260Z     
2025-01-22T20:11:05.4344329Z         Returns
2025-01-22T20:11:05.4344403Z         -------
2025-01-22T20:11:05.4344533Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4344604Z     
2025-01-22T20:11:05.4344679Z         Examples
2025-01-22T20:11:05.4344752Z         --------
2025-01-22T20:11:05.4344854Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4344938Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4345010Z         1
2025-01-22T20:11:05.4345075Z     
2025-01-22T20:11:05.4345179Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4345265Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4345343Z         slice(1, 3, None)
2025-01-22T20:11:05.4345409Z     
2025-01-22T20:11:05.4345524Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4345618Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4345712Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4345778Z         """
2025-01-22T20:11:05.4345882Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4345951Z         try:
2025-01-22T20:11:05.4346052Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4346057Z 
2025-01-22T20:11:05.4346303Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4346551Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4346693Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4346760Z     ???
2025-01-22T20:11:05.4346892Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4346959Z     ???
2025-01-22T20:11:05.4347235Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4347403Z     ???
2025-01-22T20:11:05.4347516Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4347521Z 
2025-01-22T20:11:05.4347585Z >   ???
2025-01-22T20:11:05.4347666Z E   KeyError: 'cups'
2025-01-22T20:11:05.4347671Z 
2025-01-22T20:11:05.4347804Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4347809Z 
2025-01-22T20:11:05.4347976Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4347985Z 
2025-01-22T20:11:05.4348209Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4348527Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4349153Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4349162Z 
2025-01-22T20:11:05.4349254Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4349328Z     def plasma(
2025-01-22T20:11:05.4349400Z         self,
2025-01-22T20:11:05.4349480Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4349553Z         config,
2025-01-22T20:11:05.4349619Z     ):
2025-01-22T20:11:05.4349736Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4349836Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4349840Z 
2025-01-22T20:11:05.4349965Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4350074Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4350183Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4350267Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4350438Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4350540Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4350656Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4350739Z     return BasePlasma(
2025-01-22T20:11:05.4350825Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4350914Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4351001Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4351085Z     self.update(**kwargs)
2025-01-22T20:11:05.4351175Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4351303Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4351414Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4351519Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4351748Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4351905Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4352113Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4352217Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4352348Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4352514Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4352689Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4352862Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4353210Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4353381Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4353682Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4353786Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4354043Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4354288Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4354535Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4354628Z     return self.apply_standard()
2025-01-22T20:11:05.4354902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4355028Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4355337Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4355460Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4355674Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4355764Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4356026Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4356119Z     return self._get_value(key)
2025-01-22T20:11:05.4356374Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4356466Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4356579Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4356584Z 
2025-01-22T20:11:05.4356738Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4356956Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4357030Z        't046000', 't048000'],
2025-01-22T20:11:05.4357110Z       dtype='object')
2025-01-22T20:11:05.4357182Z key = 'cups'
2025-01-22T20:11:05.4357187Z 
2025-01-22T20:11:05.4357272Z     def get_loc(self, key):
2025-01-22T20:11:05.4357339Z         """
2025-01-22T20:11:05.4357503Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4357572Z     
2025-01-22T20:11:05.4357649Z         Parameters
2025-01-22T20:11:05.4357724Z         ----------
2025-01-22T20:11:05.4357796Z         key : label
2025-01-22T20:11:05.4357867Z     
2025-01-22T20:11:05.4357935Z         Returns
2025-01-22T20:11:05.4358010Z         -------
2025-01-22T20:11:05.4358139Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4358210Z     
2025-01-22T20:11:05.4358279Z         Examples
2025-01-22T20:11:05.4358357Z         --------
2025-01-22T20:11:05.4358454Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4358543Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4358611Z         1
2025-01-22T20:11:05.4358682Z     
2025-01-22T20:11:05.4358785Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4358878Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4358952Z         slice(1, 3, None)
2025-01-22T20:11:05.4359024Z     
2025-01-22T20:11:05.4359133Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4359232Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4359325Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4359393Z         """
2025-01-22T20:11:05.4359499Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4359567Z         try:
2025-01-22T20:11:05.4359671Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4359753Z         except KeyError as err:
2025-01-22T20:11:05.4359972Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4360072Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4360198Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4360266Z             ):
2025-01-22T20:11:05.4360363Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4360448Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4360533Z E           KeyError: 'cups'
2025-01-22T20:11:05.4360538Z 
2025-01-22T20:11:05.4360878Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4361193Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-atomic_mass] _
2025-01-22T20:11:05.4361199Z 
2025-01-22T20:11:05.4361354Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4361559Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4361642Z        't046000', 't048000'],
2025-01-22T20:11:05.4361716Z       dtype='object')
2025-01-22T20:11:05.4361792Z key = 'cups'
2025-01-22T20:11:05.4361797Z 
2025-01-22T20:11:05.4361876Z     def get_loc(self, key):
2025-01-22T20:11:05.4361947Z         """
2025-01-22T20:11:05.4362104Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4362174Z     
2025-01-22T20:11:05.4362251Z         Parameters
2025-01-22T20:11:05.4362328Z         ----------
2025-01-22T20:11:05.4362404Z         key : label
2025-01-22T20:11:05.4362469Z     
2025-01-22T20:11:05.4362544Z         Returns
2025-01-22T20:11:05.4362614Z         -------
2025-01-22T20:11:05.4362753Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4362818Z     
2025-01-22T20:11:05.4362892Z         Examples
2025-01-22T20:11:05.4362961Z         --------
2025-01-22T20:11:05.4363064Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4363151Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4363222Z         1
2025-01-22T20:11:05.4363288Z     
2025-01-22T20:11:05.4363392Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4363477Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4363675Z         slice(1, 3, None)
2025-01-22T20:11:05.4363745Z     
2025-01-22T20:11:05.4363858Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4363948Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4364047Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4364119Z         """
2025-01-22T20:11:05.4364218Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4364291Z         try:
2025-01-22T20:11:05.4364388Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4364392Z 
2025-01-22T20:11:05.4364648Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4364762Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4364902Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4364969Z     ???
2025-01-22T20:11:05.4365103Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4365169Z     ???
2025-01-22T20:11:05.4365439Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4365515Z     ???
2025-01-22T20:11:05.4365623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4365628Z 
2025-01-22T20:11:05.4365700Z >   ???
2025-01-22T20:11:05.4365778Z E   KeyError: 'cups'
2025-01-22T20:11:05.4365783Z 
2025-01-22T20:11:05.4365914Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4365919Z 
2025-01-22T20:11:05.4366085Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4366207Z 
2025-01-22T20:11:05.4366438Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4366756Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4367389Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4367496Z 
2025-01-22T20:11:05.4367595Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4367668Z     def plasma(
2025-01-22T20:11:05.4367741Z         self,
2025-01-22T20:11:05.4367821Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4367895Z         config,
2025-01-22T20:11:05.4367962Z     ):
2025-01-22T20:11:05.4368078Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4368172Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4368181Z 
2025-01-22T20:11:05.4368312Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4368418Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4368531Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4368620Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4368788Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4368892Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4369006Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4369090Z     return BasePlasma(
2025-01-22T20:11:05.4369175Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4369271Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4369361Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4369446Z     self.update(**kwargs)
2025-01-22T20:11:05.4369535Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4369661Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4369775Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4369884Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4370121Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4370279Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4370493Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4370588Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4370726Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4370892Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4371071Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4371243Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4371513Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4371688Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4371875Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4371985Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4372243Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4372374Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4372617Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4372708Z     return self.apply_standard()
2025-01-22T20:11:05.4372986Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4373111Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4373415Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4373763Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4374000Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4374106Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4374377Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4374460Z     return self._get_value(key)
2025-01-22T20:11:05.4374828Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4374914Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4375026Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4375031Z 
2025-01-22T20:11:05.4375184Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4375402Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4375480Z        't046000', 't048000'],
2025-01-22T20:11:05.4375561Z       dtype='object')
2025-01-22T20:11:05.4375637Z key = 'cups'
2025-01-22T20:11:05.4375642Z 
2025-01-22T20:11:05.4375720Z     def get_loc(self, key):
2025-01-22T20:11:05.4375793Z         """
2025-01-22T20:11:05.4375950Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4376022Z     
2025-01-22T20:11:05.4376095Z         Parameters
2025-01-22T20:11:05.4376175Z         ----------
2025-01-22T20:11:05.4376248Z         key : label
2025-01-22T20:11:05.4376319Z     
2025-01-22T20:11:05.4376388Z         Returns
2025-01-22T20:11:05.4376463Z         -------
2025-01-22T20:11:05.4376593Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4376664Z     
2025-01-22T20:11:05.4376737Z         Examples
2025-01-22T20:11:05.4376814Z         --------
2025-01-22T20:11:05.4376915Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4377005Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4377072Z         1
2025-01-22T20:11:05.4377144Z     
2025-01-22T20:11:05.4377252Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4377340Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4377419Z         slice(1, 3, None)
2025-01-22T20:11:05.4377485Z     
2025-01-22T20:11:05.4377597Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4377692Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4377787Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4377855Z         """
2025-01-22T20:11:05.4377959Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4378027Z         try:
2025-01-22T20:11:05.4378132Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4378214Z         except KeyError as err:
2025-01-22T20:11:05.4378316Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4378422Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4378547Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4378620Z             ):
2025-01-22T20:11:05.4378711Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4378802Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4378883Z E           KeyError: 'cups'
2025-01-22T20:11:05.4378887Z 
2025-01-22T20:11:05.4379162Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4379484Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ionization_data] _
2025-01-22T20:11:05.4379491Z 
2025-01-22T20:11:05.4379649Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4379852Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4380042Z        't046000', 't048000'],
2025-01-22T20:11:05.4380117Z       dtype='object')
2025-01-22T20:11:05.4380193Z key = 'cups'
2025-01-22T20:11:05.4380198Z 
2025-01-22T20:11:05.4380282Z     def get_loc(self, key):
2025-01-22T20:11:05.4380349Z         """
2025-01-22T20:11:05.4380512Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4380579Z     
2025-01-22T20:11:05.4380656Z         Parameters
2025-01-22T20:11:05.4380728Z         ----------
2025-01-22T20:11:05.4380879Z         key : label
2025-01-22T20:11:05.4380946Z     
2025-01-22T20:11:05.4381018Z         Returns
2025-01-22T20:11:05.4381087Z         -------
2025-01-22T20:11:05.4381221Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4381288Z     
2025-01-22T20:11:05.4381363Z         Examples
2025-01-22T20:11:05.4381433Z         --------
2025-01-22T20:11:05.4381535Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4381627Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4381705Z         1
2025-01-22T20:11:05.4381777Z     
2025-01-22T20:11:05.4381875Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4381967Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4382042Z         slice(1, 3, None)
2025-01-22T20:11:05.4382112Z     
2025-01-22T20:11:05.4382218Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4382315Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4382407Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4382481Z         """
2025-01-22T20:11:05.4382581Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4382654Z         try:
2025-01-22T20:11:05.4382751Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4382755Z 
2025-01-22T20:11:05.4383005Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4383117Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4383259Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4383332Z     ???
2025-01-22T20:11:05.4383464Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4383652Z     ???
2025-01-22T20:11:05.4383926Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4383999Z     ???
2025-01-22T20:11:05.4384104Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4384113Z 
2025-01-22T20:11:05.4384185Z >   ???
2025-01-22T20:11:05.4384262Z E   KeyError: 'cups'
2025-01-22T20:11:05.4384267Z 
2025-01-22T20:11:05.4384399Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4384403Z 
2025-01-22T20:11:05.4384571Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4384581Z 
2025-01-22T20:11:05.4384806Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4385128Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4385747Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4385753Z 
2025-01-22T20:11:05.4385850Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4385923Z     def plasma(
2025-01-22T20:11:05.4385999Z         self,
2025-01-22T20:11:05.4386079Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4386156Z         config,
2025-01-22T20:11:05.4386222Z     ):
2025-01-22T20:11:05.4386341Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4386439Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4386562Z 
2025-01-22T20:11:05.4386687Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4386800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4386904Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4386992Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4387157Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4387263Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4387373Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4387557Z     return BasePlasma(
2025-01-22T20:11:05.4387642Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4387733Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4387822Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4387906Z     self.update(**kwargs)
2025-01-22T20:11:05.4387998Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4388119Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4388239Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4388342Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4388578Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4388727Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4388943Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4389037Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4389174Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4389342Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4389521Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4389699Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4389961Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4390141Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4390319Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4390425Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4390676Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4390805Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4391042Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4391136Z     return self.apply_standard()
2025-01-22T20:11:05.4391410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4391533Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4391842Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4391962Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4392179Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4392265Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4392531Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4392613Z     return self._get_value(key)
2025-01-22T20:11:05.4392873Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4392964Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4393076Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4393080Z 
2025-01-22T20:11:05.4393238Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4393447Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4393775Z        't046000', 't048000'],
2025-01-22T20:11:05.4393851Z       dtype='object')
2025-01-22T20:11:05.4393928Z key = 'cups'
2025-01-22T20:11:05.4393932Z 
2025-01-22T20:11:05.4394010Z     def get_loc(self, key):
2025-01-22T20:11:05.4394082Z         """
2025-01-22T20:11:05.4394240Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4394313Z     
2025-01-22T20:11:05.4394384Z         Parameters
2025-01-22T20:11:05.4394462Z         ----------
2025-01-22T20:11:05.4394656Z         key : label
2025-01-22T20:11:05.4394728Z     
2025-01-22T20:11:05.4394797Z         Returns
2025-01-22T20:11:05.4394871Z         -------
2025-01-22T20:11:05.4395001Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4395074Z     
2025-01-22T20:11:05.4395149Z         Examples
2025-01-22T20:11:05.4395219Z         --------
2025-01-22T20:11:05.4395321Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4395409Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4395480Z         1
2025-01-22T20:11:05.4395545Z     
2025-01-22T20:11:05.4395653Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4395740Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4395820Z         slice(1, 3, None)
2025-01-22T20:11:05.4395886Z     
2025-01-22T20:11:05.4395997Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4396088Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4396185Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4396252Z         """
2025-01-22T20:11:05.4396356Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4396428Z         try:
2025-01-22T20:11:05.4396533Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4396620Z         except KeyError as err:
2025-01-22T20:11:05.4396718Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4396829Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4396947Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4397026Z             ):
2025-01-22T20:11:05.4397116Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4397206Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4397287Z E           KeyError: 'cups'
2025-01-22T20:11:05.4397291Z 
2025-01-22T20:11:05.4397562Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4397849Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] _
2025-01-22T20:11:05.4397854Z 
2025-01-22T20:11:05.4398014Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4398222Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4398301Z        't046000', 't048000'],
2025-01-22T20:11:05.4398380Z       dtype='object')
2025-01-22T20:11:05.4398450Z key = 'cups'
2025-01-22T20:11:05.4398455Z 
2025-01-22T20:11:05.4398537Z     def get_loc(self, key):
2025-01-22T20:11:05.4398604Z         """
2025-01-22T20:11:05.4398764Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4398830Z     
2025-01-22T20:11:05.4398911Z         Parameters
2025-01-22T20:11:05.4398982Z         ----------
2025-01-22T20:11:05.4399058Z         key : label
2025-01-22T20:11:05.4399127Z     
2025-01-22T20:11:05.4399200Z         Returns
2025-01-22T20:11:05.4399269Z         -------
2025-01-22T20:11:05.4399401Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4399472Z     
2025-01-22T20:11:05.4399543Z         Examples
2025-01-22T20:11:05.4399617Z         --------
2025-01-22T20:11:05.4399713Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4399803Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4399978Z         1
2025-01-22T20:11:05.4400049Z     
2025-01-22T20:11:05.4400148Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4400238Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4400313Z         slice(1, 3, None)
2025-01-22T20:11:05.4400386Z     
2025-01-22T20:11:05.4400492Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4400587Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4400676Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4400823Z         """
2025-01-22T20:11:05.4400922Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4400996Z         try:
2025-01-22T20:11:05.4401093Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4401103Z 
2025-01-22T20:11:05.4401347Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4401461Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4401603Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4401676Z     ???
2025-01-22T20:11:05.4401806Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4401877Z     ???
2025-01-22T20:11:05.4402147Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4402219Z     ???
2025-01-22T20:11:05.4402324Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4402332Z 
2025-01-22T20:11:05.4402404Z >   ???
2025-01-22T20:11:05.4402479Z E   KeyError: 'cups'
2025-01-22T20:11:05.4402489Z 
2025-01-22T20:11:05.4402614Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4402619Z 
2025-01-22T20:11:05.4402788Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4402793Z 
2025-01-22T20:11:05.4403015Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4403339Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4404084Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4404095Z 
2025-01-22T20:11:05.4404184Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4404269Z     def plasma(
2025-01-22T20:11:05.4404337Z         self,
2025-01-22T20:11:05.4404424Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4404492Z         config,
2025-01-22T20:11:05.4404562Z     ):
2025-01-22T20:11:05.4404674Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4404772Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4404776Z 
2025-01-22T20:11:05.4404895Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4405008Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4405111Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4405200Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4405364Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4405469Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4405586Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4405665Z     return BasePlasma(
2025-01-22T20:11:05.4405757Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4405844Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4405937Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4406016Z     self.update(**kwargs)
2025-01-22T20:11:05.4406112Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4406231Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4406343Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4406564Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4406804Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4406969Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4407181Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4407277Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4407411Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4407681Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4407850Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4408026Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4408283Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4408459Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4408639Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4408745Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4408996Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4409126Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4409370Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4409461Z     return self.apply_standard()
2025-01-22T20:11:05.4409740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4409856Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4410165Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4410287Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4410505Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4410591Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4410854Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4410940Z     return self._get_value(key)
2025-01-22T20:11:05.4411199Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4411293Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4411399Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4411404Z 
2025-01-22T20:11:05.4411562Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4411770Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4411854Z        't046000', 't048000'],
2025-01-22T20:11:05.4411928Z       dtype='object')
2025-01-22T20:11:05.4412005Z key = 'cups'
2025-01-22T20:11:05.4412009Z 
2025-01-22T20:11:05.4412088Z     def get_loc(self, key):
2025-01-22T20:11:05.4412160Z         """
2025-01-22T20:11:05.4412314Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4412385Z     
2025-01-22T20:11:05.4412462Z         Parameters
2025-01-22T20:11:05.4412534Z         ----------
2025-01-22T20:11:05.4412610Z         key : label
2025-01-22T20:11:05.4412679Z     
2025-01-22T20:11:05.4412754Z         Returns
2025-01-22T20:11:05.4412823Z         -------
2025-01-22T20:11:05.4412955Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4413022Z     
2025-01-22T20:11:05.4413098Z         Examples
2025-01-22T20:11:05.4413168Z         --------
2025-01-22T20:11:05.4413270Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4413356Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4413608Z         1
2025-01-22T20:11:05.4413681Z     
2025-01-22T20:11:05.4413796Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4413889Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4413972Z         slice(1, 3, None)
2025-01-22T20:11:05.4414042Z     
2025-01-22T20:11:05.4414161Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4414259Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4414348Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4414532Z         """
2025-01-22T20:11:05.4414634Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4414711Z         try:
2025-01-22T20:11:05.4414812Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4414902Z         except KeyError as err:
2025-01-22T20:11:05.4414999Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4415105Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4415229Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4415304Z             ):
2025-01-22T20:11:05.4415396Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4415494Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4415575Z E           KeyError: 'cups'
2025-01-22T20:11:05.4415580Z 
2025-01-22T20:11:05.4415853Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4416163Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] _
2025-01-22T20:11:05.4416171Z 
2025-01-22T20:11:05.4416323Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4416534Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4416607Z        't046000', 't048000'],
2025-01-22T20:11:05.4416690Z       dtype='object')
2025-01-22T20:11:05.4416760Z key = 'cups'
2025-01-22T20:11:05.4416765Z 
2025-01-22T20:11:05.4416851Z     def get_loc(self, key):
2025-01-22T20:11:05.4416918Z         """
2025-01-22T20:11:05.4417080Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4417156Z     
2025-01-22T20:11:05.4417227Z         Parameters
2025-01-22T20:11:05.4417303Z         ----------
2025-01-22T20:11:05.4417375Z         key : label
2025-01-22T20:11:05.4417447Z     
2025-01-22T20:11:05.4417515Z         Returns
2025-01-22T20:11:05.4417594Z         -------
2025-01-22T20:11:05.4417721Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4417793Z     
2025-01-22T20:11:05.4417861Z         Examples
2025-01-22T20:11:05.4417937Z         --------
2025-01-22T20:11:05.4418036Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4418127Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4418194Z         1
2025-01-22T20:11:05.4418269Z     
2025-01-22T20:11:05.4418368Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4418461Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4418535Z         slice(1, 3, None)
2025-01-22T20:11:05.4418607Z     
2025-01-22T20:11:05.4418715Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4418811Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4418907Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4418976Z         """
2025-01-22T20:11:05.4419083Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4419152Z         try:
2025-01-22T20:11:05.4419255Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4419259Z 
2025-01-22T20:11:05.4419500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4419615Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4419870Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4419943Z     ???
2025-01-22T20:11:05.4420073Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4420145Z     ???
2025-01-22T20:11:05.4420411Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4420484Z     ???
2025-01-22T20:11:05.4420594Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4420600Z 
2025-01-22T20:11:05.4420755Z >   ???
2025-01-22T20:11:05.4420837Z E   KeyError: 'cups'
2025-01-22T20:11:05.4420842Z 
2025-01-22T20:11:05.4420969Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4420974Z 
2025-01-22T20:11:05.4421148Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4421152Z 
2025-01-22T20:11:05.4421372Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4421699Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4422353Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4422359Z 
2025-01-22T20:11:05.4422447Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4422526Z     def plasma(
2025-01-22T20:11:05.4422597Z         self,
2025-01-22T20:11:05.4422682Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4422752Z         config,
2025-01-22T20:11:05.4422824Z     ):
2025-01-22T20:11:05.4422934Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4423037Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4423042Z 
2025-01-22T20:11:05.4423162Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4423277Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4423396Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4423481Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4423748Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4423848Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4423963Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4424042Z     return BasePlasma(
2025-01-22T20:11:05.4424139Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4424230Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4424329Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4424409Z     self.update(**kwargs)
2025-01-22T20:11:05.4424504Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4424623Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4424741Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4424848Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4425091Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4425249Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4425461Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4425564Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4425691Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4425864Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4426039Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4426218Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4426471Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4426649Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4426976Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4427084Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4427341Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4427463Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4427705Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4427792Z     return self.apply_standard()
2025-01-22T20:11:05.4428175Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4428293Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4428603Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4428721Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4428948Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4429039Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4429304Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4429392Z     return self._get_value(key)
2025-01-22T20:11:05.4429648Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4429743Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4429853Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4429858Z 
2025-01-22T20:11:05.4430018Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4430224Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4430302Z        't046000', 't048000'],
2025-01-22T20:11:05.4430381Z       dtype='object')
2025-01-22T20:11:05.4430460Z key = 'cups'
2025-01-22T20:11:05.4430465Z 
2025-01-22T20:11:05.4430548Z     def get_loc(self, key):
2025-01-22T20:11:05.4430617Z         """
2025-01-22T20:11:05.4430778Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4430844Z     
2025-01-22T20:11:05.4430922Z         Parameters
2025-01-22T20:11:05.4430993Z         ----------
2025-01-22T20:11:05.4431070Z         key : label
2025-01-22T20:11:05.4431136Z     
2025-01-22T20:11:05.4431214Z         Returns
2025-01-22T20:11:05.4431285Z         -------
2025-01-22T20:11:05.4431420Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4431486Z     
2025-01-22T20:11:05.4431563Z         Examples
2025-01-22T20:11:05.4431634Z         --------
2025-01-22T20:11:05.4431737Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4431821Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4431895Z         1
2025-01-22T20:11:05.4431970Z     
2025-01-22T20:11:05.4432072Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4432167Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4432243Z         slice(1, 3, None)
2025-01-22T20:11:05.4432314Z     
2025-01-22T20:11:05.4432422Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4432521Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4432612Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4432688Z         """
2025-01-22T20:11:05.4432791Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4432865Z         try:
2025-01-22T20:11:05.4432962Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4433051Z         except KeyError as err:
2025-01-22T20:11:05.4433148Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4433251Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4433370Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4433648Z             ):
2025-01-22T20:11:05.4433749Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4433837Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4433925Z E           KeyError: 'cups'
2025-01-22T20:11:05.4433929Z 
2025-01-22T20:11:05.4434194Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4434490Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] _
2025-01-22T20:11:05.4434606Z 
2025-01-22T20:11:05.4434764Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4434977Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4435052Z        't046000', 't048000'],
2025-01-22T20:11:05.4435135Z       dtype='object')
2025-01-22T20:11:05.4435219Z key = 'cups'
2025-01-22T20:11:05.4435225Z 
2025-01-22T20:11:05.4435307Z     def get_loc(self, key):
2025-01-22T20:11:05.4435386Z         """
2025-01-22T20:11:05.4435545Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4435619Z     
2025-01-22T20:11:05.4435696Z         Parameters
2025-01-22T20:11:05.4435774Z         ----------
2025-01-22T20:11:05.4435848Z         key : label
2025-01-22T20:11:05.4435922Z     
2025-01-22T20:11:05.4435991Z         Returns
2025-01-22T20:11:05.4436068Z         -------
2025-01-22T20:11:05.4436202Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4436277Z     
2025-01-22T20:11:05.4436347Z         Examples
2025-01-22T20:11:05.4436425Z         --------
2025-01-22T20:11:05.4436522Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4436614Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4436681Z         1
2025-01-22T20:11:05.4436756Z     
2025-01-22T20:11:05.4436862Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4436951Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4437032Z         slice(1, 3, None)
2025-01-22T20:11:05.4437097Z     
2025-01-22T20:11:05.4437209Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4437297Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4437391Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4437459Z         """
2025-01-22T20:11:05.4437565Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4437638Z         try:
2025-01-22T20:11:05.4437740Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4437745Z 
2025-01-22T20:11:05.4437985Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4438101Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4438242Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4438314Z     ???
2025-01-22T20:11:05.4438449Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4438518Z     ???
2025-01-22T20:11:05.4438790Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4438857Z     ???
2025-01-22T20:11:05.4438967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4438971Z 
2025-01-22T20:11:05.4439037Z >   ???
2025-01-22T20:11:05.4439118Z E   KeyError: 'cups'
2025-01-22T20:11:05.4439126Z 
2025-01-22T20:11:05.4439250Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4439255Z 
2025-01-22T20:11:05.4439427Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4439432Z 
2025-01-22T20:11:05.4439661Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4439977Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4440717Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4440724Z 
2025-01-22T20:11:05.4440813Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4440891Z     def plasma(
2025-01-22T20:11:05.4440960Z         self,
2025-01-22T20:11:05.4441119Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4441188Z         config,
2025-01-22T20:11:05.4441261Z     ):
2025-01-22T20:11:05.4441372Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4441477Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4441482Z 
2025-01-22T20:11:05.4441609Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4441715Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4441830Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4441916Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4442087Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4442187Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4442304Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4442382Z     return BasePlasma(
2025-01-22T20:11:05.4442475Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4442562Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4442660Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4442746Z     self.update(**kwargs)
2025-01-22T20:11:05.4442836Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4442964Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4443077Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4443185Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4443419Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4448626Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4448870Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4448972Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4449110Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4449289Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4449484Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4449662Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4449928Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4450103Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4450292Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4450402Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4450673Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4450808Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4451058Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4451156Z     return self.apply_standard()
2025-01-22T20:11:05.4451443Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4451577Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4451907Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4452039Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4452265Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4452547Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4452826Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4452921Z     return self._get_value(key)
2025-01-22T20:11:05.4453186Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4453279Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4453403Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4453667Z 
2025-01-22T20:11:05.4453840Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4454059Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4454138Z        't046000', 't048000'],
2025-01-22T20:11:05.4454221Z       dtype='object')
2025-01-22T20:11:05.4454302Z key = 'cups'
2025-01-22T20:11:05.4454307Z 
2025-01-22T20:11:05.4454397Z     def get_loc(self, key):
2025-01-22T20:11:05.4454474Z         """
2025-01-22T20:11:05.4454637Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4454711Z     
2025-01-22T20:11:05.4454786Z         Parameters
2025-01-22T20:11:05.4454867Z         ----------
2025-01-22T20:11:05.4454939Z         key : label
2025-01-22T20:11:05.4455011Z     
2025-01-22T20:11:05.4455080Z         Returns
2025-01-22T20:11:05.4455157Z         -------
2025-01-22T20:11:05.4455297Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4455373Z     
2025-01-22T20:11:05.4455446Z         Examples
2025-01-22T20:11:05.4455523Z         --------
2025-01-22T20:11:05.4455623Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4455716Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4455787Z         1
2025-01-22T20:11:05.4455859Z     
2025-01-22T20:11:05.4455969Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4456065Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4456142Z         slice(1, 3, None)
2025-01-22T20:11:05.4456215Z     
2025-01-22T20:11:05.4456330Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4456421Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4456519Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4456587Z         """
2025-01-22T20:11:05.4456699Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4456771Z         try:
2025-01-22T20:11:05.4456878Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4456962Z         except KeyError as err:
2025-01-22T20:11:05.4457066Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4457167Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4457294Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4457365Z             ):
2025-01-22T20:11:05.4457464Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4457553Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4457641Z E           KeyError: 'cups'
2025-01-22T20:11:05.4457646Z 
2025-01-22T20:11:05.4457928Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4458243Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-metastability] _
2025-01-22T20:11:05.4458252Z 
2025-01-22T20:11:05.4458417Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4458629Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4458711Z        't046000', 't048000'],
2025-01-22T20:11:05.4458787Z       dtype='object')
2025-01-22T20:11:05.4458865Z key = 'cups'
2025-01-22T20:11:05.4458869Z 
2025-01-22T20:11:05.4459071Z     def get_loc(self, key):
2025-01-22T20:11:05.4459146Z         """
2025-01-22T20:11:05.4459313Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4459380Z     
2025-01-22T20:11:05.4459460Z         Parameters
2025-01-22T20:11:05.4459534Z         ----------
2025-01-22T20:11:05.4459611Z         key : label
2025-01-22T20:11:05.4459679Z     
2025-01-22T20:11:05.4459755Z         Returns
2025-01-22T20:11:05.4459824Z         -------
2025-01-22T20:11:05.4459963Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4460168Z     
2025-01-22T20:11:05.4460245Z         Examples
2025-01-22T20:11:05.4460317Z         --------
2025-01-22T20:11:05.4460424Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4460512Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4460587Z         1
2025-01-22T20:11:05.4460654Z     
2025-01-22T20:11:05.4460765Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4460857Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4460939Z         slice(1, 3, None)
2025-01-22T20:11:05.4461013Z     
2025-01-22T20:11:05.4461123Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4461220Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4461312Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4461387Z         """
2025-01-22T20:11:05.4461488Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4461565Z         try:
2025-01-22T20:11:05.4461667Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4461671Z 
2025-01-22T20:11:05.4461928Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4462044Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4462194Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4462264Z     ???
2025-01-22T20:11:05.4462403Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4462479Z     ???
2025-01-22T20:11:05.4462749Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4462824Z     ???
2025-01-22T20:11:05.4462932Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4462936Z 
2025-01-22T20:11:05.4463012Z >   ???
2025-01-22T20:11:05.4463091Z E   KeyError: 'cups'
2025-01-22T20:11:05.4463096Z 
2025-01-22T20:11:05.4463234Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4463238Z 
2025-01-22T20:11:05.4463409Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4463414Z 
2025-01-22T20:11:05.4463783Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4464106Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4464739Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4464745Z 
2025-01-22T20:11:05.4464833Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4464911Z     def plasma(
2025-01-22T20:11:05.4464980Z         self,
2025-01-22T20:11:05.4465069Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4465142Z         config,
2025-01-22T20:11:05.4465216Z     ):
2025-01-22T20:11:05.4465334Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4465429Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4465434Z 
2025-01-22T20:11:05.4465560Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4465669Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4465782Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4465989Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4466161Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4466261Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4466376Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4466453Z     return BasePlasma(
2025-01-22T20:11:05.4466544Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4466631Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4466826Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4466912Z     self.update(**kwargs)
2025-01-22T20:11:05.4467000Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4467125Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4467234Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4467344Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4467578Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4467741Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4467950Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4468049Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4468175Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4468348Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4468520Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4468700Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4468966Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4469136Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4469322Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4469429Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4469687Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4469813Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4470057Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4470144Z     return self.apply_standard()
2025-01-22T20:11:05.4470426Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4470557Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4470863Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4470984Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4471198Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4471293Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4471555Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4471644Z     return self._get_value(key)
2025-01-22T20:11:05.4471900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4471991Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4472100Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4472113Z 
2025-01-22T20:11:05.4472267Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4472480Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4472558Z        't046000', 't048000'],
2025-01-22T20:11:05.4472640Z       dtype='object')
2025-01-22T20:11:05.4472714Z key = 'cups'
2025-01-22T20:11:05.4472803Z 
2025-01-22T20:11:05.4472889Z     def get_loc(self, key):
2025-01-22T20:11:05.4472956Z         """
2025-01-22T20:11:05.4473119Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4473188Z     
2025-01-22T20:11:05.4473266Z         Parameters
2025-01-22T20:11:05.4473338Z         ----------
2025-01-22T20:11:05.4473414Z         key : label
2025-01-22T20:11:05.4473480Z     
2025-01-22T20:11:05.4473677Z         Returns
2025-01-22T20:11:05.4473756Z         -------
2025-01-22T20:11:05.4473889Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4474099Z     
2025-01-22T20:11:05.4474169Z         Examples
2025-01-22T20:11:05.4474245Z         --------
2025-01-22T20:11:05.4474344Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4474436Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4474503Z         1
2025-01-22T20:11:05.4474574Z     
2025-01-22T20:11:05.4474678Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4474778Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4474853Z         slice(1, 3, None)
2025-01-22T20:11:05.4474926Z     
2025-01-22T20:11:05.4475034Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4475129Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4475221Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4475294Z         """
2025-01-22T20:11:05.4475395Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4475468Z         try:
2025-01-22T20:11:05.4475575Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4475657Z         except KeyError as err:
2025-01-22T20:11:05.4475758Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4475858Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4475985Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4476054Z             ):
2025-01-22T20:11:05.4476154Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4476240Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4476326Z E           KeyError: 'cups'
2025-01-22T20:11:05.4476331Z 
2025-01-22T20:11:05.4476599Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4476903Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-delta] _
2025-01-22T20:11:05.4476909Z 
2025-01-22T20:11:05.4477071Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4477276Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4477355Z        't046000', 't048000'],
2025-01-22T20:11:05.4477431Z       dtype='object')
2025-01-22T20:11:05.4477507Z key = 'cups'
2025-01-22T20:11:05.4477511Z 
2025-01-22T20:11:05.4477591Z     def get_loc(self, key):
2025-01-22T20:11:05.4477665Z         """
2025-01-22T20:11:05.4477822Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4477893Z     
2025-01-22T20:11:05.4477966Z         Parameters
2025-01-22T20:11:05.4478042Z         ----------
2025-01-22T20:11:05.4478114Z         key : label
2025-01-22T20:11:05.4478185Z     
2025-01-22T20:11:05.4478253Z         Returns
2025-01-22T20:11:05.4478327Z         -------
2025-01-22T20:11:05.4478463Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4478533Z     
2025-01-22T20:11:05.4478607Z         Examples
2025-01-22T20:11:05.4478676Z         --------
2025-01-22T20:11:05.4478777Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4478861Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4478933Z         1
2025-01-22T20:11:05.4479001Z     
2025-01-22T20:11:05.4479107Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4479194Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4479394Z         slice(1, 3, None)
2025-01-22T20:11:05.4479461Z     
2025-01-22T20:11:05.4479573Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4479664Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4479759Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4479825Z         """
2025-01-22T20:11:05.4479930Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4480012Z         try:
2025-01-22T20:11:05.4480123Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4480200Z 
2025-01-22T20:11:05.4480452Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4480560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4480701Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4480769Z     ???
2025-01-22T20:11:05.4480901Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4480972Z     ???
2025-01-22T20:11:05.4481244Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4481312Z     ???
2025-01-22T20:11:05.4481424Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4481428Z 
2025-01-22T20:11:05.4481499Z >   ???
2025-01-22T20:11:05.4481577Z E   KeyError: 'cups'
2025-01-22T20:11:05.4481581Z 
2025-01-22T20:11:05.4481712Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4481720Z 
2025-01-22T20:11:05.4481885Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4481890Z 
2025-01-22T20:11:05.4482113Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4482435Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4483068Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4483078Z 
2025-01-22T20:11:05.4483172Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4483245Z     def plasma(
2025-01-22T20:11:05.4483318Z         self,
2025-01-22T20:11:05.4483398Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4483472Z         config,
2025-01-22T20:11:05.4483660Z     ):
2025-01-22T20:11:05.4483783Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4483878Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4483883Z 
2025-01-22T20:11:05.4484013Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4484120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4484231Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4484318Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4484491Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4484596Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4484706Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4484788Z     return BasePlasma(
2025-01-22T20:11:05.4484873Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4484965Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4485055Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4485143Z     self.update(**kwargs)
2025-01-22T20:11:05.4485230Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4485356Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4485467Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4485573Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4485807Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4486087Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4486298Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4486402Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4486537Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4486706Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4486882Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4487159Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4487423Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4487594Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4487781Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4487884Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4488153Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4488285Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4488522Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4488615Z     return self.apply_standard()
2025-01-22T20:11:05.4488891Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4489018Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4489320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4489442Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4489658Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4489750Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4490017Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4490104Z     return self._get_value(key)
2025-01-22T20:11:05.4490363Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4490449Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4490561Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4490566Z 
2025-01-22T20:11:05.4490724Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4490937Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4491012Z        't046000', 't048000'],
2025-01-22T20:11:05.4491092Z       dtype='object')
2025-01-22T20:11:05.4491164Z key = 'cups'
2025-01-22T20:11:05.4491168Z 
2025-01-22T20:11:05.4491253Z     def get_loc(self, key):
2025-01-22T20:11:05.4491323Z         """
2025-01-22T20:11:05.4491489Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4491559Z     
2025-01-22T20:11:05.4491635Z         Parameters
2025-01-22T20:11:05.4491712Z         ----------
2025-01-22T20:11:05.4491784Z         key : label
2025-01-22T20:11:05.4491857Z     
2025-01-22T20:11:05.4491926Z         Returns
2025-01-22T20:11:05.4492011Z         -------
2025-01-22T20:11:05.4492151Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4492220Z     
2025-01-22T20:11:05.4492294Z         Examples
2025-01-22T20:11:05.4492363Z         --------
2025-01-22T20:11:05.4492468Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4492553Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4492625Z         1
2025-01-22T20:11:05.4492690Z     
2025-01-22T20:11:05.4492799Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4492887Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4493058Z         slice(1, 3, None)
2025-01-22T20:11:05.4493124Z     
2025-01-22T20:11:05.4493238Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4493332Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4493422Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4493588Z         """
2025-01-22T20:11:05.4493693Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4493766Z         try:
2025-01-22T20:11:05.4493864Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4494058Z         except KeyError as err:
2025-01-22T20:11:05.4494156Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4494263Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4494382Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4494454Z             ):
2025-01-22T20:11:05.4494546Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4494643Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4494724Z E           KeyError: 'cups'
2025-01-22T20:11:05.4494729Z 
2025-01-22T20:11:05.4495000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4495358Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_electron_densities] _
2025-01-22T20:11:05.4495363Z 
2025-01-22T20:11:05.4495517Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4495735Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4495809Z        't046000', 't048000'],
2025-01-22T20:11:05.4495889Z       dtype='object')
2025-01-22T20:11:05.4495959Z key = 'cups'
2025-01-22T20:11:05.4495963Z 
2025-01-22T20:11:05.4496048Z     def get_loc(self, key):
2025-01-22T20:11:05.4496116Z         """
2025-01-22T20:11:05.4496282Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4496353Z     
2025-01-22T20:11:05.4496425Z         Parameters
2025-01-22T20:11:05.4496500Z         ----------
2025-01-22T20:11:05.4496571Z         key : label
2025-01-22T20:11:05.4496641Z     
2025-01-22T20:11:05.4496710Z         Returns
2025-01-22T20:11:05.4496784Z         -------
2025-01-22T20:11:05.4496917Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4496988Z     
2025-01-22T20:11:05.4497060Z         Examples
2025-01-22T20:11:05.4497135Z         --------
2025-01-22T20:11:05.4497230Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4497321Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4497388Z         1
2025-01-22T20:11:05.4497459Z     
2025-01-22T20:11:05.4497558Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4497652Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4497727Z         slice(1, 3, None)
2025-01-22T20:11:05.4497802Z     
2025-01-22T20:11:05.4497909Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4498004Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4498099Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4498166Z         """
2025-01-22T20:11:05.4498272Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4498341Z         try:
2025-01-22T20:11:05.4498448Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4498456Z 
2025-01-22T20:11:05.4498700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4498814Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4498952Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4499025Z     ???
2025-01-22T20:11:05.4499158Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4499351Z     ???
2025-01-22T20:11:05.4499622Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4499695Z     ???
2025-01-22T20:11:05.4499805Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4499810Z 
2025-01-22T20:11:05.4499876Z >   ???
2025-01-22T20:11:05.4499957Z E   KeyError: 'cups'
2025-01-22T20:11:05.4499963Z 
2025-01-22T20:11:05.4500090Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4500185Z 
2025-01-22T20:11:05.4500362Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4500366Z 
2025-01-22T20:11:05.4500586Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4500906Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4501528Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4501538Z 
2025-01-22T20:11:05.4501626Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4501704Z     def plasma(
2025-01-22T20:11:05.4501772Z         self,
2025-01-22T20:11:05.4501856Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4501925Z         config,
2025-01-22T20:11:05.4501995Z     ):
2025-01-22T20:11:05.4502106Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4502208Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4502212Z 
2025-01-22T20:11:05.4502333Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4502444Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4502559Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4502641Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4502813Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4502913Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4503026Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4503104Z     return BasePlasma(
2025-01-22T20:11:05.4503193Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4503278Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4503372Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4503452Z     self.update(**kwargs)
2025-01-22T20:11:05.4503642Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4503767Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4503884Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4503986Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4504225Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4504383Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4504592Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4504693Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4504821Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4504996Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4505166Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4505342Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4505602Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4505777Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4505956Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4506063Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4506440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4506566Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4506809Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4506895Z     return self.apply_standard()
2025-01-22T20:11:05.4507178Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4507297Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4507710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4507828Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4508046Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4508136Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4508403Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4508491Z     return self._get_value(key)
2025-01-22T20:11:05.4508747Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4508837Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4508943Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4508947Z 
2025-01-22T20:11:05.4509106Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4509318Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4509396Z        't046000', 't048000'],
2025-01-22T20:11:05.4509474Z       dtype='object')
2025-01-22T20:11:05.4509547Z key = 'cups'
2025-01-22T20:11:05.4509552Z 
2025-01-22T20:11:05.4509635Z     def get_loc(self, key):
2025-01-22T20:11:05.4509706Z         """
2025-01-22T20:11:05.4509868Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4509934Z     
2025-01-22T20:11:05.4510010Z         Parameters
2025-01-22T20:11:05.4510082Z         ----------
2025-01-22T20:11:05.4510159Z         key : label
2025-01-22T20:11:05.4510224Z     
2025-01-22T20:11:05.4510300Z         Returns
2025-01-22T20:11:05.4510369Z         -------
2025-01-22T20:11:05.4510505Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4510571Z     
2025-01-22T20:11:05.4510651Z         Examples
2025-01-22T20:11:05.4510720Z         --------
2025-01-22T20:11:05.4510824Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4510907Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4510981Z         1
2025-01-22T20:11:05.4511051Z     
2025-01-22T20:11:05.4511153Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4511247Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4511329Z         slice(1, 3, None)
2025-01-22T20:11:05.4511402Z     
2025-01-22T20:11:05.4511510Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4511604Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4511694Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4511767Z         """
2025-01-22T20:11:05.4511870Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4511943Z         try:
2025-01-22T20:11:05.4512043Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4512135Z         except KeyError as err:
2025-01-22T20:11:05.4512233Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4512334Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4512453Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4512528Z             ):
2025-01-22T20:11:05.4512622Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4512707Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4512883Z E           KeyError: 'cups'
2025-01-22T20:11:05.4512889Z 
2025-01-22T20:11:05.4513156Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4513449Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-phi] _
2025-01-22T20:11:05.4513454Z 
2025-01-22T20:11:05.4513728Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4514055Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4514134Z        't046000', 't048000'],
2025-01-22T20:11:05.4514212Z       dtype='object')
2025-01-22T20:11:05.4514287Z key = 'cups'
2025-01-22T20:11:05.4514292Z 
2025-01-22T20:11:05.4514371Z     def get_loc(self, key):
2025-01-22T20:11:05.4514443Z         """
2025-01-22T20:11:05.4514598Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4514673Z     
2025-01-22T20:11:05.4514749Z         Parameters
2025-01-22T20:11:05.4514824Z         ----------
2025-01-22T20:11:05.4514895Z         key : label
2025-01-22T20:11:05.4514968Z     
2025-01-22T20:11:05.4515036Z         Returns
2025-01-22T20:11:05.4515110Z         -------
2025-01-22T20:11:05.4515238Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4515308Z     
2025-01-22T20:11:05.4515380Z         Examples
2025-01-22T20:11:05.4515454Z         --------
2025-01-22T20:11:05.4515557Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4515646Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4515713Z         1
2025-01-22T20:11:05.4515785Z     
2025-01-22T20:11:05.4515889Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4515974Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4516057Z         slice(1, 3, None)
2025-01-22T20:11:05.4516123Z     
2025-01-22T20:11:05.4516238Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4516327Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4516420Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4516488Z         """
2025-01-22T20:11:05.4516593Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4516662Z         try:
2025-01-22T20:11:05.4516763Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4516768Z 
2025-01-22T20:11:05.4517011Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4517128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4517270Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4517337Z     ???
2025-01-22T20:11:05.4517471Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4517537Z     ???
2025-01-22T20:11:05.4517810Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4517881Z     ???
2025-01-22T20:11:05.4517991Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4517995Z 
2025-01-22T20:11:05.4518060Z >   ???
2025-01-22T20:11:05.4518145Z E   KeyError: 'cups'
2025-01-22T20:11:05.4518150Z 
2025-01-22T20:11:05.4518276Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4518280Z 
2025-01-22T20:11:05.4518451Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4518459Z 
2025-01-22T20:11:05.4518686Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4519000Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4519618Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4519738Z 
2025-01-22T20:11:05.4519829Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4519906Z     def plasma(
2025-01-22T20:11:05.4519975Z         self,
2025-01-22T20:11:05.4520062Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4520130Z         config,
2025-01-22T20:11:05.4520201Z     ):
2025-01-22T20:11:05.4520317Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4520483Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4520488Z 
2025-01-22T20:11:05.4520612Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4520717Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4520828Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4520911Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4521081Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4521186Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4521301Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4521379Z     return BasePlasma(
2025-01-22T20:11:05.4521468Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4521555Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4521649Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4521734Z     self.update(**kwargs)
2025-01-22T20:11:05.4521822Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4521949Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4522059Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4522202Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4522436Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4522592Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4522805Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4522905Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4523031Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4523203Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4523369Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4523661Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4523931Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4524103Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4524289Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4524391Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4524652Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4524777Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4525023Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4525109Z     return self.apply_standard()
2025-01-22T20:11:05.4525396Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4525520Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4525826Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4525948Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4526163Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4526252Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4526515Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4526741Z     return self._get_value(key)
2025-01-22T20:11:05.4526998Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4527089Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4527198Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4527208Z 
2025-01-22T20:11:05.4527362Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4527705Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4527778Z        't046000', 't048000'],
2025-01-22T20:11:05.4527858Z       dtype='object')
2025-01-22T20:11:05.4527929Z key = 'cups'
2025-01-22T20:11:05.4527934Z 
2025-01-22T20:11:05.4528018Z     def get_loc(self, key):
2025-01-22T20:11:05.4528087Z         """
2025-01-22T20:11:05.4528250Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4528320Z     
2025-01-22T20:11:05.4528398Z         Parameters
2025-01-22T20:11:05.4528469Z         ----------
2025-01-22T20:11:05.4528546Z         key : label
2025-01-22T20:11:05.4528611Z     
2025-01-22T20:11:05.4528685Z         Returns
2025-01-22T20:11:05.4528755Z         -------
2025-01-22T20:11:05.4528889Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4528960Z     
2025-01-22T20:11:05.4529031Z         Examples
2025-01-22T20:11:05.4529109Z         --------
2025-01-22T20:11:05.4529207Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4529297Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4529365Z         1
2025-01-22T20:11:05.4529437Z     
2025-01-22T20:11:05.4529539Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4529633Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4529710Z         slice(1, 3, None)
2025-01-22T20:11:05.4529785Z     
2025-01-22T20:11:05.4529891Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4529986Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4530074Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4530147Z         """
2025-01-22T20:11:05.4530250Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4530323Z         try:
2025-01-22T20:11:05.4530421Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4530506Z         except KeyError as err:
2025-01-22T20:11:05.4530612Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4530710Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4530834Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4530903Z             ):
2025-01-22T20:11:05.4530999Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4531087Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4531177Z E           KeyError: 'cups'
2025-01-22T20:11:05.4531190Z 
2025-01-22T20:11:05.4531469Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4531800Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ion_number_density] _
2025-01-22T20:11:05.4531805Z 
2025-01-22T20:11:05.4531965Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4532172Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4532255Z        't046000', 't048000'],
2025-01-22T20:11:05.4532330Z       dtype='object')
2025-01-22T20:11:05.4532406Z key = 'cups'
2025-01-22T20:11:05.4532410Z 
2025-01-22T20:11:05.4532487Z     def get_loc(self, key):
2025-01-22T20:11:05.4532560Z         """
2025-01-22T20:11:05.4532717Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4532872Z     
2025-01-22T20:11:05.4532945Z         Parameters
2025-01-22T20:11:05.4533019Z         ----------
2025-01-22T20:11:05.4533089Z         key : label
2025-01-22T20:11:05.4533164Z     
2025-01-22T20:11:05.4533231Z         Returns
2025-01-22T20:11:05.4533309Z         -------
2025-01-22T20:11:05.4533446Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4533608Z     
2025-01-22T20:11:05.4533686Z         Examples
2025-01-22T20:11:05.4533756Z         --------
2025-01-22T20:11:05.4533856Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4534051Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4534122Z         1
2025-01-22T20:11:05.4534189Z     
2025-01-22T20:11:05.4534293Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4534379Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4534458Z         slice(1, 3, None)
2025-01-22T20:11:05.4534523Z     
2025-01-22T20:11:05.4534633Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4534726Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4534821Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4534888Z         """
2025-01-22T20:11:05.4534991Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4535059Z         try:
2025-01-22T20:11:05.4535161Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4535166Z 
2025-01-22T20:11:05.4535413Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4535525Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4535664Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4535731Z     ???
2025-01-22T20:11:05.4535866Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4535933Z     ???
2025-01-22T20:11:05.4536203Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4536273Z     ???
2025-01-22T20:11:05.4536383Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4536387Z 
2025-01-22T20:11:05.4536453Z >   ???
2025-01-22T20:11:05.4536533Z E   KeyError: 'cups'
2025-01-22T20:11:05.4536538Z 
2025-01-22T20:11:05.4536669Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4536673Z 
2025-01-22T20:11:05.4536839Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4536847Z 
2025-01-22T20:11:05.4537073Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4537388Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4538007Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4538016Z 
2025-01-22T20:11:05.4538107Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4538179Z     def plasma(
2025-01-22T20:11:05.4538253Z         self,
2025-01-22T20:11:05.4538333Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4538406Z         config,
2025-01-22T20:11:05.4538472Z     ):
2025-01-22T20:11:05.4538586Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4538678Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4538686Z 
2025-01-22T20:11:05.4538812Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4538918Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4539030Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4539114Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4539286Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4539502Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4539615Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4539697Z     return BasePlasma(
2025-01-22T20:11:05.4539781Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4539871Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4539959Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4540042Z     self.update(**kwargs)
2025-01-22T20:11:05.4540130Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4540256Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4540438Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4540543Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4540781Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4540937Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4541144Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4541249Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4541379Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4541548Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4541722Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4541894Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4542158Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4542331Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4542514Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4542615Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4542870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4542997Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4543240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4543330Z     return self.apply_standard()
2025-01-22T20:11:05.4543721Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4543848Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4544152Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4544276Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4544490Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4544583Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4544846Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4544937Z     return self._get_value(key)
2025-01-22T20:11:05.4545197Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4545281Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4545393Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4545397Z 
2025-01-22T20:11:05.4545549Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4545764Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4545841Z        't046000', 't048000'],
2025-01-22T20:11:05.4545921Z       dtype='object')
2025-01-22T20:11:05.4545994Z key = 'cups'
2025-01-22T20:11:05.4545999Z 
2025-01-22T20:11:05.4546082Z     def get_loc(self, key):
2025-01-22T20:11:05.4546150Z         """
2025-01-22T20:11:05.4546312Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4546504Z     
2025-01-22T20:11:05.4546578Z         Parameters
2025-01-22T20:11:05.4546653Z         ----------
2025-01-22T20:11:05.4546725Z         key : label
2025-01-22T20:11:05.4546795Z     
2025-01-22T20:11:05.4546863Z         Returns
2025-01-22T20:11:05.4546941Z         -------
2025-01-22T20:11:05.4547070Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4547141Z     
2025-01-22T20:11:05.4547212Z         Examples
2025-01-22T20:11:05.4547285Z         --------
2025-01-22T20:11:05.4547485Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4547574Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4547642Z         1
2025-01-22T20:11:05.4547713Z     
2025-01-22T20:11:05.4547815Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4547909Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4547984Z         slice(1, 3, None)
2025-01-22T20:11:05.4548055Z     
2025-01-22T20:11:05.4548162Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4548262Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4548356Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4548424Z         """
2025-01-22T20:11:05.4548528Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4548598Z         try:
2025-01-22T20:11:05.4548703Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4548784Z         except KeyError as err:
2025-01-22T20:11:05.4548885Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4548984Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4549109Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4549176Z             ):
2025-01-22T20:11:05.4549275Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4549359Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4549445Z E           KeyError: 'cups'
2025-01-22T20:11:05.4549454Z 
2025-01-22T20:11:05.4549722Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4550045Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-electron_densities] _
2025-01-22T20:11:05.4550050Z 
2025-01-22T20:11:05.4550208Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4550413Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4550496Z        't046000', 't048000'],
2025-01-22T20:11:05.4550571Z       dtype='object')
2025-01-22T20:11:05.4550646Z key = 'cups'
2025-01-22T20:11:05.4550650Z 
2025-01-22T20:11:05.4550728Z     def get_loc(self, key):
2025-01-22T20:11:05.4550800Z         """
2025-01-22T20:11:05.4550959Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4551030Z     
2025-01-22T20:11:05.4551111Z         Parameters
2025-01-22T20:11:05.4551182Z         ----------
2025-01-22T20:11:05.4551257Z         key : label
2025-01-22T20:11:05.4551323Z     
2025-01-22T20:11:05.4551396Z         Returns
2025-01-22T20:11:05.4551465Z         -------
2025-01-22T20:11:05.4551598Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4551665Z     
2025-01-22T20:11:05.4551741Z         Examples
2025-01-22T20:11:05.4551809Z         --------
2025-01-22T20:11:05.4551908Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4551995Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4552066Z         1
2025-01-22T20:11:05.4552132Z     
2025-01-22T20:11:05.4552235Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4552320Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4552399Z         slice(1, 3, None)
2025-01-22T20:11:05.4552465Z     
2025-01-22T20:11:05.4552579Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4552782Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4552871Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4552942Z         """
2025-01-22T20:11:05.4553040Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4553113Z         try:
2025-01-22T20:11:05.4553209Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4553213Z 
2025-01-22T20:11:05.4553460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4553783Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4553927Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4553994Z     ???
2025-01-22T20:11:05.4554129Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4554195Z     ???
2025-01-22T20:11:05.4554466Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4554540Z     ???
2025-01-22T20:11:05.4554644Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4554648Z 
2025-01-22T20:11:05.4554717Z >   ???
2025-01-22T20:11:05.4554793Z E   KeyError: 'cups'
2025-01-22T20:11:05.4554798Z 
2025-01-22T20:11:05.4554926Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4554931Z 
2025-01-22T20:11:05.4555093Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4555098Z 
2025-01-22T20:11:05.4555326Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4555641Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4556261Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4556270Z 
2025-01-22T20:11:05.4556361Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4556435Z     def plasma(
2025-01-22T20:11:05.4556507Z         self,
2025-01-22T20:11:05.4556587Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4556660Z         config,
2025-01-22T20:11:05.4556726Z     ):
2025-01-22T20:11:05.4556840Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4556933Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4556941Z 
2025-01-22T20:11:05.4557066Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4557176Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4557280Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4557369Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4557536Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4557638Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4557749Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4557831Z     return BasePlasma(
2025-01-22T20:11:05.4557916Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4558008Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4558096Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4558180Z     self.update(**kwargs)
2025-01-22T20:11:05.4558267Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4558392Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4558504Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4558611Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4558852Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4559004Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4559217Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4559426Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4559560Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4559725Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4559900Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4560074Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4560336Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4560593Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4560777Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4560883Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4561132Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4561260Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4561499Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4561590Z     return self.apply_standard()
2025-01-22T20:11:05.4561865Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4561988Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4562289Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4562417Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4562635Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4562720Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4562988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4563070Z     return self._get_value(key)
2025-01-22T20:11:05.4563335Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4563422Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4563649Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4563654Z 
2025-01-22T20:11:05.4563811Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4564023Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4564101Z        't046000', 't048000'],
2025-01-22T20:11:05.4564182Z       dtype='object')
2025-01-22T20:11:05.4564259Z key = 'cups'
2025-01-22T20:11:05.4564263Z 
2025-01-22T20:11:05.4564342Z     def get_loc(self, key):
2025-01-22T20:11:05.4564414Z         """
2025-01-22T20:11:05.4564573Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4564644Z     
2025-01-22T20:11:05.4564720Z         Parameters
2025-01-22T20:11:05.4564795Z         ----------
2025-01-22T20:11:05.4564865Z         key : label
2025-01-22T20:11:05.4564935Z     
2025-01-22T20:11:05.4565003Z         Returns
2025-01-22T20:11:05.4565080Z         -------
2025-01-22T20:11:05.4565211Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4565282Z     
2025-01-22T20:11:05.4565351Z         Examples
2025-01-22T20:11:05.4565427Z         --------
2025-01-22T20:11:05.4565525Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4565618Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4565690Z         1
2025-01-22T20:11:05.4565755Z     
2025-01-22T20:11:05.4565863Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4565950Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4566031Z         slice(1, 3, None)
2025-01-22T20:11:05.4566099Z     
2025-01-22T20:11:05.4566210Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4566430Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4566524Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4566592Z         """
2025-01-22T20:11:05.4566696Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4566764Z         try:
2025-01-22T20:11:05.4566870Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4566950Z         except KeyError as err:
2025-01-22T20:11:05.4567052Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4567262Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4567385Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4567458Z             ):
2025-01-22T20:11:05.4567548Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4567641Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4567720Z E           KeyError: 'cups'
2025-01-22T20:11:05.4567726Z 
2025-01-22T20:11:05.4567998Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4568328Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_number_density] _
2025-01-22T20:11:05.4568334Z 
2025-01-22T20:11:05.4568491Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4568700Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4568782Z        't046000', 't048000'],
2025-01-22T20:11:05.4568863Z       dtype='object')
2025-01-22T20:11:05.4568934Z key = 'cups'
2025-01-22T20:11:05.4568940Z 
2025-01-22T20:11:05.4569022Z     def get_loc(self, key):
2025-01-22T20:11:05.4569089Z         """
2025-01-22T20:11:05.4569249Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4569314Z     
2025-01-22T20:11:05.4569391Z         Parameters
2025-01-22T20:11:05.4569465Z         ----------
2025-01-22T20:11:05.4569541Z         key : label
2025-01-22T20:11:05.4569607Z     
2025-01-22T20:11:05.4569682Z         Returns
2025-01-22T20:11:05.4569754Z         -------
2025-01-22T20:11:05.4569888Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4569954Z     
2025-01-22T20:11:05.4570029Z         Examples
2025-01-22T20:11:05.4570099Z         --------
2025-01-22T20:11:05.4570200Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4570284Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4570361Z         1
2025-01-22T20:11:05.4570431Z     
2025-01-22T20:11:05.4570530Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4570620Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4570693Z         slice(1, 3, None)
2025-01-22T20:11:05.4570763Z     
2025-01-22T20:11:05.4570869Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4570963Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4571055Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4571128Z         """
2025-01-22T20:11:05.4571229Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4571301Z         try:
2025-01-22T20:11:05.4571398Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4571402Z 
2025-01-22T20:11:05.4571648Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4571758Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4571902Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4571974Z     ???
2025-01-22T20:11:05.4572104Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4572177Z     ???
2025-01-22T20:11:05.4572445Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4572517Z     ???
2025-01-22T20:11:05.4572709Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4572716Z 
2025-01-22T20:11:05.4572787Z >   ???
2025-01-22T20:11:05.4572864Z E   KeyError: 'cups'
2025-01-22T20:11:05.4572869Z 
2025-01-22T20:11:05.4572999Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4573004Z 
2025-01-22T20:11:05.4573170Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4573180Z 
2025-01-22T20:11:05.4573397Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4573905Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4574524Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4574533Z 
2025-01-22T20:11:05.4574626Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4574699Z     def plasma(
2025-01-22T20:11:05.4574773Z         self,
2025-01-22T20:11:05.4574854Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4574929Z         config,
2025-01-22T20:11:05.4575001Z     ):
2025-01-22T20:11:05.4575112Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4575209Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4575214Z 
2025-01-22T20:11:05.4575335Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4575449Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4575552Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4575641Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4575806Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4575913Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4576026Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4576108Z     return BasePlasma(
2025-01-22T20:11:05.4576192Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4576282Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4576373Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4576452Z     self.update(**kwargs)
2025-01-22T20:11:05.4576544Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4576664Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4576778Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4576884Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4577123Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4577275Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4577487Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4577581Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4577715Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4577881Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4578053Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4578232Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4578489Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4578668Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4578847Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4578956Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4579209Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4579338Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4579698Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4579789Z     return self.apply_standard()
2025-01-22T20:11:05.4580065Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4580188Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4580498Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4580713Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4580933Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4581018Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4581285Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4581368Z     return self._get_value(key)
2025-01-22T20:11:05.4581628Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4581719Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4581832Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4581837Z 
2025-01-22T20:11:05.4581998Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4582208Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4582290Z        't046000', 't048000'],
2025-01-22T20:11:05.4582364Z       dtype='object')
2025-01-22T20:11:05.4582440Z key = 'cups'
2025-01-22T20:11:05.4582444Z 
2025-01-22T20:11:05.4582521Z     def get_loc(self, key):
2025-01-22T20:11:05.4582594Z         """
2025-01-22T20:11:05.4582752Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4582824Z     
2025-01-22T20:11:05.4582898Z         Parameters
2025-01-22T20:11:05.4582977Z         ----------
2025-01-22T20:11:05.4583048Z         key : label
2025-01-22T20:11:05.4583120Z     
2025-01-22T20:11:05.4583189Z         Returns
2025-01-22T20:11:05.4583264Z         -------
2025-01-22T20:11:05.4583400Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4583465Z     
2025-01-22T20:11:05.4583631Z         Examples
2025-01-22T20:11:05.4583703Z         --------
2025-01-22T20:11:05.4583805Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4583889Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4583963Z         1
2025-01-22T20:11:05.4584029Z     
2025-01-22T20:11:05.4584135Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4584223Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4584302Z         slice(1, 3, None)
2025-01-22T20:11:05.4584369Z     
2025-01-22T20:11:05.4584480Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4584571Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4584669Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4584737Z         """
2025-01-22T20:11:05.4584843Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4584915Z         try:
2025-01-22T20:11:05.4585013Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4585102Z         except KeyError as err:
2025-01-22T20:11:05.4585199Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4585303Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4585424Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4585503Z             ):
2025-01-22T20:11:05.4585594Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4585684Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4585764Z E           KeyError: 'cups'
2025-01-22T20:11:05.4585769Z 
2025-01-22T20:11:05.4586037Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4586521Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] _
2025-01-22T20:11:05.4586533Z 
2025-01-22T20:11:05.4586688Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4586900Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4586974Z        't046000', 't048000'],
2025-01-22T20:11:05.4587173Z       dtype='object')
2025-01-22T20:11:05.4587243Z key = 'cups'
2025-01-22T20:11:05.4587247Z 
2025-01-22T20:11:05.4587330Z     def get_loc(self, key):
2025-01-22T20:11:05.4587398Z         """
2025-01-22T20:11:05.4587557Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4587623Z     
2025-01-22T20:11:05.4587702Z         Parameters
2025-01-22T20:11:05.4587772Z         ----------
2025-01-22T20:11:05.4587851Z         key : label
2025-01-22T20:11:05.4587917Z     
2025-01-22T20:11:05.4587990Z         Returns
2025-01-22T20:11:05.4588063Z         -------
2025-01-22T20:11:05.4588190Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4588260Z     
2025-01-22T20:11:05.4588330Z         Examples
2025-01-22T20:11:05.4588403Z         --------
2025-01-22T20:11:05.4588499Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4588586Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4588656Z         1
2025-01-22T20:11:05.4588727Z     
2025-01-22T20:11:05.4588825Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4588915Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4588988Z         slice(1, 3, None)
2025-01-22T20:11:05.4589060Z     
2025-01-22T20:11:05.4589166Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4589259Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4589350Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4589424Z         """
2025-01-22T20:11:05.4589524Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4589597Z         try:
2025-01-22T20:11:05.4589698Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4589702Z 
2025-01-22T20:11:05.4589945Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4590058Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4590196Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4590268Z     ???
2025-01-22T20:11:05.4590398Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4590470Z     ???
2025-01-22T20:11:05.4590737Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4590811Z     ???
2025-01-22T20:11:05.4590915Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4590928Z 
2025-01-22T20:11:05.4590993Z >   ???
2025-01-22T20:11:05.4591075Z E   KeyError: 'cups'
2025-01-22T20:11:05.4591081Z 
2025-01-22T20:11:05.4591209Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4591213Z 
2025-01-22T20:11:05.4591384Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4591389Z 
2025-01-22T20:11:05.4591606Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4591928Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4592544Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4592555Z 
2025-01-22T20:11:05.4592752Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4592831Z     def plasma(
2025-01-22T20:11:05.4592899Z         self,
2025-01-22T20:11:05.4592984Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4593056Z         config,
2025-01-22T20:11:05.4593127Z     ):
2025-01-22T20:11:05.4593237Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4593336Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4593341Z 
2025-01-22T20:11:05.4593461Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4593787Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4593894Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4593987Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4594151Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4594257Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4594370Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4594451Z     return BasePlasma(
2025-01-22T20:11:05.4594539Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4594624Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4594720Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4594799Z     self.update(**kwargs)
2025-01-22T20:11:05.4594891Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4595012Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4595125Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4595230Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4595470Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4595621Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4595835Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4595933Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4596065Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4596236Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4596407Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4596587Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4596843Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4597021Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4597201Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4597308Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4597560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4597689Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4597936Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4598026Z     return self.apply_standard()
2025-01-22T20:11:05.4598308Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4598425Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4598733Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4598849Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4599071Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4599156Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4599424Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4599512Z     return self._get_value(key)
2025-01-22T20:11:05.4599769Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4599975Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4600082Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4600087Z 
2025-01-22T20:11:05.4600245Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4600451Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4600530Z        't046000', 't048000'],
2025-01-22T20:11:05.4600711Z       dtype='object')
2025-01-22T20:11:05.4600788Z key = 'cups'
2025-01-22T20:11:05.4600792Z 
2025-01-22T20:11:05.4600869Z     def get_loc(self, key):
2025-01-22T20:11:05.4600942Z         """
2025-01-22T20:11:05.4601102Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4601167Z     
2025-01-22T20:11:05.4601245Z         Parameters
2025-01-22T20:11:05.4601317Z         ----------
2025-01-22T20:11:05.4601396Z         key : label
2025-01-22T20:11:05.4601462Z     
2025-01-22T20:11:05.4601536Z         Returns
2025-01-22T20:11:05.4601606Z         -------
2025-01-22T20:11:05.4601740Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4601806Z     
2025-01-22T20:11:05.4601881Z         Examples
2025-01-22T20:11:05.4601951Z         --------
2025-01-22T20:11:05.4602054Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4602138Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4602215Z         1
2025-01-22T20:11:05.4602281Z     
2025-01-22T20:11:05.4602386Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4602475Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4602555Z         slice(1, 3, None)
2025-01-22T20:11:05.4602621Z     
2025-01-22T20:11:05.4602732Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4602828Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4602921Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4602993Z         """
2025-01-22T20:11:05.4603094Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4603169Z         try:
2025-01-22T20:11:05.4603268Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4603354Z         except KeyError as err:
2025-01-22T20:11:05.4603450Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4603671Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4603796Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4603870Z             ):
2025-01-22T20:11:05.4603960Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4604049Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4604129Z E           KeyError: 'cups'
2025-01-22T20:11:05.4604138Z 
2025-01-22T20:11:05.4604398Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4604740Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] _
2025-01-22T20:11:05.4604745Z 
2025-01-22T20:11:05.4604904Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4605113Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4605189Z        't046000', 't048000'],
2025-01-22T20:11:05.4605268Z       dtype='object')
2025-01-22T20:11:05.4605342Z key = 'cups'
2025-01-22T20:11:05.4605346Z 
2025-01-22T20:11:05.4605431Z     def get_loc(self, key):
2025-01-22T20:11:05.4605499Z         """
2025-01-22T20:11:05.4605662Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4605733Z     
2025-01-22T20:11:05.4605805Z         Parameters
2025-01-22T20:11:05.4605880Z         ----------
2025-01-22T20:11:05.4605951Z         key : label
2025-01-22T20:11:05.4606140Z     
2025-01-22T20:11:05.4606208Z         Returns
2025-01-22T20:11:05.4606283Z         -------
2025-01-22T20:11:05.4606411Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4606482Z     
2025-01-22T20:11:05.4606551Z         Examples
2025-01-22T20:11:05.4606626Z         --------
2025-01-22T20:11:05.4606720Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4606809Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4606876Z         1
2025-01-22T20:11:05.4607050Z     
2025-01-22T20:11:05.4607149Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4607239Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4607312Z         slice(1, 3, None)
2025-01-22T20:11:05.4607390Z     
2025-01-22T20:11:05.4607502Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4607590Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4607683Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4607754Z         """
2025-01-22T20:11:05.4607857Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4607925Z         try:
2025-01-22T20:11:05.4608026Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4608032Z 
2025-01-22T20:11:05.4608274Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4608387Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4608521Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4608596Z     ???
2025-01-22T20:11:05.4608726Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4608798Z     ???
2025-01-22T20:11:05.4609069Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4609135Z     ???
2025-01-22T20:11:05.4609245Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4609252Z 
2025-01-22T20:11:05.4609317Z >   ???
2025-01-22T20:11:05.4609399Z E   KeyError: 'cups'
2025-01-22T20:11:05.4609403Z 
2025-01-22T20:11:05.4609527Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4609532Z 
2025-01-22T20:11:05.4609704Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4609708Z 
2025-01-22T20:11:05.4609930Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4610252Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4610878Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4610884Z 
2025-01-22T20:11:05.4610970Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4611051Z     def plasma(
2025-01-22T20:11:05.4611120Z         self,
2025-01-22T20:11:05.4611204Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4611273Z         config,
2025-01-22T20:11:05.4611343Z     ):
2025-01-22T20:11:05.4611453Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4611553Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4611557Z 
2025-01-22T20:11:05.4611682Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4611787Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4611900Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4611983Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4612151Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4612249Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4612362Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4612525Z     return BasePlasma(
2025-01-22T20:11:05.4612618Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4612703Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4612798Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4612877Z     self.update(**kwargs)
2025-01-22T20:11:05.4612972Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4613091Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4613208Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4613315Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4613717Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4613873Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4614081Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4614180Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4614307Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4614482Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4614649Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4614826Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4615079Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4615256Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4615444Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4615545Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4615802Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4615925Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4616170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4616261Z     return self.apply_standard()
2025-01-22T20:11:05.4616540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4616657Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4616964Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4617081Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4617311Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4621105Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4621455Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4621554Z     return self._get_value(key)
2025-01-22T20:11:05.4621831Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4621934Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4622053Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4622058Z 
2025-01-22T20:11:05.4622272Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4622485Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4622568Z        't046000', 't048000'],
2025-01-22T20:11:05.4622650Z       dtype='object')
2025-01-22T20:11:05.4622730Z key = 'cups'
2025-01-22T20:11:05.4622734Z 
2025-01-22T20:11:05.4622823Z     def get_loc(self, key):
2025-01-22T20:11:05.4622892Z         """
2025-01-22T20:11:05.4623062Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4623129Z     
2025-01-22T20:11:05.4623209Z         Parameters
2025-01-22T20:11:05.4623284Z         ----------
2025-01-22T20:11:05.4623361Z         key : label
2025-01-22T20:11:05.4623723Z     
2025-01-22T20:11:05.4623801Z         Returns
2025-01-22T20:11:05.4623873Z         -------
2025-01-22T20:11:05.4624016Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4624083Z     
2025-01-22T20:11:05.4624159Z         Examples
2025-01-22T20:11:05.4624231Z         --------
2025-01-22T20:11:05.4624339Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4624430Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4624505Z         1
2025-01-22T20:11:05.4624685Z     
2025-01-22T20:11:05.4624799Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4624895Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4624971Z         slice(1, 3, None)
2025-01-22T20:11:05.4625044Z     
2025-01-22T20:11:05.4625155Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4625255Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4625345Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4625426Z         """
2025-01-22T20:11:05.4625529Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4625603Z         try:
2025-01-22T20:11:05.4625704Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4625793Z         except KeyError as err:
2025-01-22T20:11:05.4625892Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4626000Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4626126Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4626204Z             ):
2025-01-22T20:11:05.4626298Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4626392Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4626480Z E           KeyError: 'cups'
2025-01-22T20:11:05.4626485Z 
2025-01-22T20:11:05.4626769Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4627093Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] _
2025-01-22T20:11:05.4627099Z 
2025-01-22T20:11:05.4627261Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4627480Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4627556Z        't046000', 't048000'],
2025-01-22T20:11:05.4627639Z       dtype='object')
2025-01-22T20:11:05.4627712Z key = 'cups'
2025-01-22T20:11:05.4627726Z 
2025-01-22T20:11:05.4627807Z     def get_loc(self, key):
2025-01-22T20:11:05.4627883Z         """
2025-01-22T20:11:05.4628044Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4628118Z     
2025-01-22T20:11:05.4628192Z         Parameters
2025-01-22T20:11:05.4628272Z         ----------
2025-01-22T20:11:05.4628344Z         key : label
2025-01-22T20:11:05.4628416Z     
2025-01-22T20:11:05.4628491Z         Returns
2025-01-22T20:11:05.4628566Z         -------
2025-01-22T20:11:05.4628696Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4628770Z     
2025-01-22T20:11:05.4628840Z         Examples
2025-01-22T20:11:05.4628917Z         --------
2025-01-22T20:11:05.4629015Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4629105Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4629174Z         1
2025-01-22T20:11:05.4629246Z     
2025-01-22T20:11:05.4629348Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4629444Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4629526Z         slice(1, 3, None)
2025-01-22T20:11:05.4629594Z     
2025-01-22T20:11:05.4629708Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4629800Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4629896Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4629963Z         """
2025-01-22T20:11:05.4630206Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4630275Z         try:
2025-01-22T20:11:05.4630380Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4630385Z 
2025-01-22T20:11:05.4630633Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4630753Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4630892Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4631044Z     ???
2025-01-22T20:11:05.4631184Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4631252Z     ???
2025-01-22T20:11:05.4631529Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4631597Z     ???
2025-01-22T20:11:05.4631711Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4631715Z 
2025-01-22T20:11:05.4631789Z >   ???
2025-01-22T20:11:05.4631872Z E   KeyError: 'cups'
2025-01-22T20:11:05.4631877Z 
2025-01-22T20:11:05.4632006Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4632011Z 
2025-01-22T20:11:05.4632186Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4632191Z 
2025-01-22T20:11:05.4632419Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4632737Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4633373Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4633378Z 
2025-01-22T20:11:05.4633468Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4633682Z     def plasma(
2025-01-22T20:11:05.4633757Z         self,
2025-01-22T20:11:05.4633846Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4633915Z         config,
2025-01-22T20:11:05.4633988Z     ):
2025-01-22T20:11:05.4634107Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4634210Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4634214Z 
2025-01-22T20:11:05.4634344Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4634451Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4634571Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4634656Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4634835Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4634936Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4635056Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4635135Z     return BasePlasma(
2025-01-22T20:11:05.4635232Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4635340Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4635437Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4635517Z     self.update(**kwargs)
2025-01-22T20:11:05.4635609Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4635732Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4635847Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4635950Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4636194Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4636348Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4636564Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4636658Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4636792Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4637090Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4637266Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4637446Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4637703Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4637881Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4638061Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4638271Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4638533Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4638664Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4638907Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4639004Z     return self.apply_standard()
2025-01-22T20:11:05.4639285Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4639406Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4639715Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4639834Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4640057Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4640147Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4640417Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4640500Z     return self._get_value(key)
2025-01-22T20:11:05.4640762Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4640849Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4640971Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4640976Z 
2025-01-22T20:11:05.4641140Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4641350Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4641430Z        't046000', 't048000'],
2025-01-22T20:11:05.4641505Z       dtype='object')
2025-01-22T20:11:05.4641586Z key = 'cups'
2025-01-22T20:11:05.4641591Z 
2025-01-22T20:11:05.4641670Z     def get_loc(self, key):
2025-01-22T20:11:05.4641743Z         """
2025-01-22T20:11:05.4641903Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4641975Z     
2025-01-22T20:11:05.4642049Z         Parameters
2025-01-22T20:11:05.4642127Z         ----------
2025-01-22T20:11:05.4642199Z         key : label
2025-01-22T20:11:05.4642270Z     
2025-01-22T20:11:05.4642347Z         Returns
2025-01-22T20:11:05.4642417Z         -------
2025-01-22T20:11:05.4642555Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4642621Z     
2025-01-22T20:11:05.4642698Z         Examples
2025-01-22T20:11:05.4642769Z         --------
2025-01-22T20:11:05.4642871Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4642958Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4643030Z         1
2025-01-22T20:11:05.4643096Z     
2025-01-22T20:11:05.4643210Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4643300Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4643380Z         slice(1, 3, None)
2025-01-22T20:11:05.4643446Z     
2025-01-22T20:11:05.4643678Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4643772Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4643868Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4644099Z         """
2025-01-22T20:11:05.4644229Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4644302Z         try:
2025-01-22T20:11:05.4644400Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4644487Z         except KeyError as err:
2025-01-22T20:11:05.4644584Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4644689Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4644813Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4644987Z             ):
2025-01-22T20:11:05.4645081Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4645171Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4645252Z E           KeyError: 'cups'
2025-01-22T20:11:05.4645256Z 
2025-01-22T20:11:05.4645526Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4645833Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] _
2025-01-22T20:11:05.4645848Z 
2025-01-22T20:11:05.4646003Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4646217Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4646292Z        't046000', 't048000'],
2025-01-22T20:11:05.4646370Z       dtype='object')
2025-01-22T20:11:05.4646441Z key = 'cups'
2025-01-22T20:11:05.4646445Z 
2025-01-22T20:11:05.4646532Z     def get_loc(self, key):
2025-01-22T20:11:05.4646598Z         """
2025-01-22T20:11:05.4646758Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4646825Z     
2025-01-22T20:11:05.4646902Z         Parameters
2025-01-22T20:11:05.4646973Z         ----------
2025-01-22T20:11:05.4647049Z         key : label
2025-01-22T20:11:05.4647121Z     
2025-01-22T20:11:05.4647190Z         Returns
2025-01-22T20:11:05.4647269Z         -------
2025-01-22T20:11:05.4647399Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4647474Z     
2025-01-22T20:11:05.4647543Z         Examples
2025-01-22T20:11:05.4647618Z         --------
2025-01-22T20:11:05.4647716Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4647806Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4647873Z         1
2025-01-22T20:11:05.4647944Z     
2025-01-22T20:11:05.4648043Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4648139Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4648215Z         slice(1, 3, None)
2025-01-22T20:11:05.4648285Z     
2025-01-22T20:11:05.4648391Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4648490Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4648581Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4648655Z         """
2025-01-22T20:11:05.4648761Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4648832Z         try:
2025-01-22T20:11:05.4648934Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4648939Z 
2025-01-22T20:11:05.4649190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4649305Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4649442Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4649516Z     ???
2025-01-22T20:11:05.4649649Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4649721Z     ???
2025-01-22T20:11:05.4649988Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4650061Z     ???
2025-01-22T20:11:05.4650168Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4650178Z 
2025-01-22T20:11:05.4650243Z >   ???
2025-01-22T20:11:05.4650415Z E   KeyError: 'cups'
2025-01-22T20:11:05.4650420Z 
2025-01-22T20:11:05.4650549Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4650553Z 
2025-01-22T20:11:05.4650725Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4650729Z 
2025-01-22T20:11:05.4650949Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4651275Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4651973Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4651983Z 
2025-01-22T20:11:05.4652072Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4652149Z     def plasma(
2025-01-22T20:11:05.4652218Z         self,
2025-01-22T20:11:05.4652310Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4652378Z         config,
2025-01-22T20:11:05.4652449Z     ):
2025-01-22T20:11:05.4652561Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4652662Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4652667Z 
2025-01-22T20:11:05.4652787Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4652901Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4653006Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4653098Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4653272Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4653373Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4653487Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4653664Z     return BasePlasma(
2025-01-22T20:11:05.4653755Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4653847Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4653941Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4654020Z     self.update(**kwargs)
2025-01-22T20:11:05.4654113Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4654236Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4654351Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4654454Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4654695Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4654852Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4655065Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4655165Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4655294Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4655469Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4655640Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4655818Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4656074Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4656249Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4656429Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4656541Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4656800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4656925Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4657169Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4657257Z     return self.apply_standard()
2025-01-22T20:11:05.4657687Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4657807Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4658119Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4658238Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4658456Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4658642Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4658913Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4659000Z     return self._get_value(key)
2025-01-22T20:11:05.4659257Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4659347Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4659458Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4659462Z 
2025-01-22T20:11:05.4659623Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4659834Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4659913Z        't046000', 't048000'],
2025-01-22T20:11:05.4659989Z       dtype='object')
2025-01-22T20:11:05.4660065Z key = 'cups'
2025-01-22T20:11:05.4660073Z 
2025-01-22T20:11:05.4660155Z     def get_loc(self, key):
2025-01-22T20:11:05.4660223Z         """
2025-01-22T20:11:05.4660389Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4660455Z     
2025-01-22T20:11:05.4660533Z         Parameters
2025-01-22T20:11:05.4660605Z         ----------
2025-01-22T20:11:05.4660684Z         key : label
2025-01-22T20:11:05.4660750Z     
2025-01-22T20:11:05.4660824Z         Returns
2025-01-22T20:11:05.4660897Z         -------
2025-01-22T20:11:05.4661033Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4661099Z     
2025-01-22T20:11:05.4661177Z         Examples
2025-01-22T20:11:05.4661248Z         --------
2025-01-22T20:11:05.4661350Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4661434Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4661507Z         1
2025-01-22T20:11:05.4661573Z     
2025-01-22T20:11:05.4661681Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4661773Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4661855Z         slice(1, 3, None)
2025-01-22T20:11:05.4661926Z     
2025-01-22T20:11:05.4662032Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4662127Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4662217Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4662290Z         """
2025-01-22T20:11:05.4662392Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4662469Z         try:
2025-01-22T20:11:05.4662567Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4662654Z         except KeyError as err:
2025-01-22T20:11:05.4662764Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4662862Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4662985Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4663053Z             ):
2025-01-22T20:11:05.4663152Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4663239Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4663325Z E           KeyError: 'cups'
2025-01-22T20:11:05.4663330Z 
2025-01-22T20:11:05.4663697Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4664040Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-transition_probabilities] _
2025-01-22T20:11:05.4664381Z 
2025-01-22T20:11:05.4664547Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4664758Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4664837Z        't046000', 't048000'],
2025-01-22T20:11:05.4664911Z       dtype='object')
2025-01-22T20:11:05.4664990Z key = 'cups'
2025-01-22T20:11:05.4664995Z 
2025-01-22T20:11:05.4665073Z     def get_loc(self, key):
2025-01-22T20:11:05.4665247Z         """
2025-01-22T20:11:05.4665411Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4665476Z     
2025-01-22T20:11:05.4665552Z         Parameters
2025-01-22T20:11:05.4665623Z         ----------
2025-01-22T20:11:05.4665697Z         key : label
2025-01-22T20:11:05.4665763Z     
2025-01-22T20:11:05.4665838Z         Returns
2025-01-22T20:11:05.4665907Z         -------
2025-01-22T20:11:05.4666046Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4666112Z     
2025-01-22T20:11:05.4666185Z         Examples
2025-01-22T20:11:05.4666255Z         --------
2025-01-22T20:11:05.4666359Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4666443Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4666514Z         1
2025-01-22T20:11:05.4666581Z     
2025-01-22T20:11:05.4666684Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4666769Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4666853Z         slice(1, 3, None)
2025-01-22T20:11:05.4666925Z     
2025-01-22T20:11:05.4667031Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4667128Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4667216Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4667289Z         """
2025-01-22T20:11:05.4667388Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4667463Z         try:
2025-01-22T20:11:05.4667560Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4667565Z 
2025-01-22T20:11:05.4667814Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4667922Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4668065Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4668132Z     ???
2025-01-22T20:11:05.4668267Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4668341Z     ???
2025-01-22T20:11:05.4668609Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4668680Z     ???
2025-01-22T20:11:05.4668785Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4668789Z 
2025-01-22T20:11:05.4668860Z >   ???
2025-01-22T20:11:05.4668937Z E   KeyError: 'cups'
2025-01-22T20:11:05.4668945Z 
2025-01-22T20:11:05.4669076Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4669080Z 
2025-01-22T20:11:05.4669247Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4669252Z 
2025-01-22T20:11:05.4669483Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4669807Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4670426Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4670435Z 
2025-01-22T20:11:05.4670528Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4670601Z     def plasma(
2025-01-22T20:11:05.4670674Z         self,
2025-01-22T20:11:05.4670753Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4670916Z         config,
2025-01-22T20:11:05.4670982Z     ):
2025-01-22T20:11:05.4671099Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4671191Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4671196Z 
2025-01-22T20:11:05.4671321Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4671432Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4671536Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4671701Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4671866Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4671969Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4672079Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4672160Z     return BasePlasma(
2025-01-22T20:11:05.4672243Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4672335Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4672427Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4672512Z     self.update(**kwargs)
2025-01-22T20:11:05.4672599Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4672725Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4672834Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4672942Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4673181Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4673334Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4673676Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4673776Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4673912Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4674081Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4674258Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4674430Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4674690Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4674863Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4675044Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4675155Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4675413Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4675539Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4675778Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4675867Z     return self.apply_standard()
2025-01-22T20:11:05.4676142Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4676268Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4676574Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4676696Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4676914Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4676998Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4677268Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4677351Z     return self._get_value(key)
2025-01-22T20:11:05.4677613Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4677699Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4677810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4677933Z 
2025-01-22T20:11:05.4678091Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4678303Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4678382Z        't046000', 't048000'],
2025-01-22T20:11:05.4678457Z       dtype='object')
2025-01-22T20:11:05.4678534Z key = 'cups'
2025-01-22T20:11:05.4678539Z 
2025-01-22T20:11:05.4678616Z     def get_loc(self, key):
2025-01-22T20:11:05.4678808Z         """
2025-01-22T20:11:05.4678965Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4679036Z     
2025-01-22T20:11:05.4679107Z         Parameters
2025-01-22T20:11:05.4679183Z         ----------
2025-01-22T20:11:05.4679255Z         key : label
2025-01-22T20:11:05.4679325Z     
2025-01-22T20:11:05.4679396Z         Returns
2025-01-22T20:11:05.4679470Z         -------
2025-01-22T20:11:05.4679604Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4679676Z     
2025-01-22T20:11:05.4679744Z         Examples
2025-01-22T20:11:05.4679823Z         --------
2025-01-22T20:11:05.4679919Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4680007Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4680079Z         1
2025-01-22T20:11:05.4680145Z     
2025-01-22T20:11:05.4680250Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4680337Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4680420Z         slice(1, 3, None)
2025-01-22T20:11:05.4680487Z     
2025-01-22T20:11:05.4680596Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4680687Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4680786Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4680854Z         """
2025-01-22T20:11:05.4680960Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4681034Z         try:
2025-01-22T20:11:05.4681137Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4681219Z         except KeyError as err:
2025-01-22T20:11:05.4681319Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4681419Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4681542Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4681615Z             ):
2025-01-22T20:11:05.4681706Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4681799Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4681879Z E           KeyError: 'cups'
2025-01-22T20:11:05.4681883Z 
2025-01-22T20:11:05.4682153Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4682456Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] _
2025-01-22T20:11:05.4682465Z 
2025-01-22T20:11:05.4682622Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4682827Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4682906Z        't046000', 't048000'],
2025-01-22T20:11:05.4682984Z       dtype='object')
2025-01-22T20:11:05.4683055Z key = 'cups'
2025-01-22T20:11:05.4683059Z 
2025-01-22T20:11:05.4683143Z     def get_loc(self, key):
2025-01-22T20:11:05.4683211Z         """
2025-01-22T20:11:05.4683377Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4683443Z     
2025-01-22T20:11:05.4683634Z         Parameters
2025-01-22T20:11:05.4683707Z         ----------
2025-01-22T20:11:05.4683786Z         key : label
2025-01-22T20:11:05.4683853Z     
2025-01-22T20:11:05.4683925Z         Returns
2025-01-22T20:11:05.4683995Z         -------
2025-01-22T20:11:05.4684131Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4684316Z     
2025-01-22T20:11:05.4684391Z         Examples
2025-01-22T20:11:05.4684462Z         --------
2025-01-22T20:11:05.4684562Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4684650Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4684717Z         1
2025-01-22T20:11:05.4684788Z     
2025-01-22T20:11:05.4684887Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4684979Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4685054Z         slice(1, 3, None)
2025-01-22T20:11:05.4685227Z     
2025-01-22T20:11:05.4685332Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4685427Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4685515Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4685587Z         """
2025-01-22T20:11:05.4685685Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4685758Z         try:
2025-01-22T20:11:05.4685858Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4685863Z 
2025-01-22T20:11:05.4686106Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4686218Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4686352Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4686425Z     ???
2025-01-22T20:11:05.4686554Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4686629Z     ???
2025-01-22T20:11:05.4686895Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4686965Z     ???
2025-01-22T20:11:05.4687069Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4687074Z 
2025-01-22T20:11:05.4687144Z >   ???
2025-01-22T20:11:05.4687220Z E   KeyError: 'cups'
2025-01-22T20:11:05.4687225Z 
2025-01-22T20:11:05.4687359Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4687367Z 
2025-01-22T20:11:05.4687537Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4687542Z 
2025-01-22T20:11:05.4687763Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4688100Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4688732Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4688742Z 
2025-01-22T20:11:05.4688835Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4688907Z     def plasma(
2025-01-22T20:11:05.4688979Z         self,
2025-01-22T20:11:05.4689058Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4689134Z         config,
2025-01-22T20:11:05.4689209Z     ):
2025-01-22T20:11:05.4689320Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4689418Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4689423Z 
2025-01-22T20:11:05.4689541Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4689651Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4689756Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4689845Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4690012Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4690118Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4690227Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4690310Z     return BasePlasma(
2025-01-22T20:11:05.4690395Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4690487Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4690579Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4690745Z     self.update(**kwargs)
2025-01-22T20:11:05.4690838Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4690958Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4691075Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4691177Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4691414Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4691562Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4691850Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4691944Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4692076Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4692244Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4692418Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4692603Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4692857Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4693032Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4693210Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4693315Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4693662Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4693796Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4694038Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4694132Z     return self.apply_standard()
2025-01-22T20:11:05.4694431Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4694563Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4694881Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4695001Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4695220Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4695305Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4695574Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4695659Z     return self._get_value(key)
2025-01-22T20:11:05.4695921Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4696006Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4696116Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4696124Z 
2025-01-22T20:11:05.4696283Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4696494Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4696574Z        't046000', 't048000'],
2025-01-22T20:11:05.4696649Z       dtype='object')
2025-01-22T20:11:05.4696725Z key = 'cups'
2025-01-22T20:11:05.4696730Z 
2025-01-22T20:11:05.4696808Z     def get_loc(self, key):
2025-01-22T20:11:05.4696884Z         """
2025-01-22T20:11:05.4697044Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4697115Z     
2025-01-22T20:11:05.4697187Z         Parameters
2025-01-22T20:11:05.4697264Z         ----------
2025-01-22T20:11:05.4697335Z         key : label
2025-01-22T20:11:05.4697409Z     
2025-01-22T20:11:05.4697482Z         Returns
2025-01-22T20:11:05.4697551Z         -------
2025-01-22T20:11:05.4697685Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4697870Z     
2025-01-22T20:11:05.4697946Z         Examples
2025-01-22T20:11:05.4698017Z         --------
2025-01-22T20:11:05.4698116Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4698199Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4698271Z         1
2025-01-22T20:11:05.4698336Z     
2025-01-22T20:11:05.4698443Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4698530Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4698711Z         slice(1, 3, None)
2025-01-22T20:11:05.4698777Z     
2025-01-22T20:11:05.4698887Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4698977Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4699075Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4699143Z         """
2025-01-22T20:11:05.4699248Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4699321Z         try:
2025-01-22T20:11:05.4699422Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4699509Z         except KeyError as err:
2025-01-22T20:11:05.4699604Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4699707Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4699824Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4699895Z             ):
2025-01-22T20:11:05.4699985Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4700076Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4700156Z E           KeyError: 'cups'
2025-01-22T20:11:05.4700161Z 
2025-01-22T20:11:05.4700431Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4700754Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues_norm_factor] _
2025-01-22T20:11:05.4700765Z 
2025-01-22T20:11:05.4700918Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4701131Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4701204Z        't046000', 't048000'],
2025-01-22T20:11:05.4701283Z       dtype='object')
2025-01-22T20:11:05.4701355Z key = 'cups'
2025-01-22T20:11:05.4701359Z 
2025-01-22T20:11:05.4701442Z     def get_loc(self, key):
2025-01-22T20:11:05.4701511Z         """
2025-01-22T20:11:05.4701673Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4701745Z     
2025-01-22T20:11:05.4701823Z         Parameters
2025-01-22T20:11:05.4701894Z         ----------
2025-01-22T20:11:05.4701970Z         key : label
2025-01-22T20:11:05.4702038Z     
2025-01-22T20:11:05.4702112Z         Returns
2025-01-22T20:11:05.4702187Z         -------
2025-01-22T20:11:05.4702315Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4702390Z     
2025-01-22T20:11:05.4702461Z         Examples
2025-01-22T20:11:05.4702535Z         --------
2025-01-22T20:11:05.4702629Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4702718Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4702786Z         1
2025-01-22T20:11:05.4702857Z     
2025-01-22T20:11:05.4702956Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4703048Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4703125Z         slice(1, 3, None)
2025-01-22T20:11:05.4703196Z     
2025-01-22T20:11:05.4703302Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4703398Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4703487Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4703683Z         """
2025-01-22T20:11:05.4703785Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4703861Z         try:
2025-01-22T20:11:05.4703966Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4704088Z 
2025-01-22T20:11:05.4704333Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4704446Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4704579Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4704652Z     ???
2025-01-22T20:11:05.4704782Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4704853Z     ???
2025-01-22T20:11:05.4705121Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4705312Z     ???
2025-01-22T20:11:05.4705419Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4705429Z 
2025-01-22T20:11:05.4705495Z >   ???
2025-01-22T20:11:05.4705576Z E   KeyError: 'cups'
2025-01-22T20:11:05.4705581Z 
2025-01-22T20:11:05.4705708Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4705719Z 
2025-01-22T20:11:05.4705892Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4705896Z 
2025-01-22T20:11:05.4706119Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4706437Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4707056Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4707069Z 
2025-01-22T20:11:05.4707156Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4707234Z     def plasma(
2025-01-22T20:11:05.4707302Z         self,
2025-01-22T20:11:05.4707385Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4707453Z         config,
2025-01-22T20:11:05.4707523Z     ):
2025-01-22T20:11:05.4707637Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4707736Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4707740Z 
2025-01-22T20:11:05.4707859Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4707968Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4708072Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4708161Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4708328Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4708428Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4708541Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4708618Z     return BasePlasma(
2025-01-22T20:11:05.4708707Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4708792Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4708884Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4708967Z     self.update(**kwargs)
2025-01-22T20:11:05.4709058Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4709177Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4709290Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4709392Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4709627Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4709777Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4709998Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4710099Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4710225Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4710398Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4710566Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4710831Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4711087Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4711261Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4711440Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4711546Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4711797Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4711995Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4712238Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4712325Z     return self.apply_standard()
2025-01-22T20:11:05.4712608Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4712730Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4713038Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4713153Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4713371Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4713456Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4713837Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4713930Z     return self._get_value(key)
2025-01-22T20:11:05.4714186Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4714279Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4714386Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4714391Z 
2025-01-22T20:11:05.4714554Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4714761Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4714839Z        't046000', 't048000'],
2025-01-22T20:11:05.4714913Z       dtype='object')
2025-01-22T20:11:05.4714994Z key = 'cups'
2025-01-22T20:11:05.4714998Z 
2025-01-22T20:11:05.4715075Z     def get_loc(self, key):
2025-01-22T20:11:05.4715151Z         """
2025-01-22T20:11:05.4715313Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4715382Z     
2025-01-22T20:11:05.4715460Z         Parameters
2025-01-22T20:11:05.4715531Z         ----------
2025-01-22T20:11:05.4715607Z         key : label
2025-01-22T20:11:05.4715674Z     
2025-01-22T20:11:05.4715746Z         Returns
2025-01-22T20:11:05.4715816Z         -------
2025-01-22T20:11:05.4715950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4716019Z     
2025-01-22T20:11:05.4716093Z         Examples
2025-01-22T20:11:05.4716163Z         --------
2025-01-22T20:11:05.4716263Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4716348Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4716421Z         1
2025-01-22T20:11:05.4716487Z     
2025-01-22T20:11:05.4716593Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4716679Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4716759Z         slice(1, 3, None)
2025-01-22T20:11:05.4716833Z     
2025-01-22T20:11:05.4716940Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4717034Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4717123Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4717194Z         """
2025-01-22T20:11:05.4717294Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4717367Z         try:
2025-01-22T20:11:05.4717465Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4717672Z         except KeyError as err:
2025-01-22T20:11:05.4717770Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4717871Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4717986Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4718059Z             ):
2025-01-22T20:11:05.4718150Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4718241Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4718427Z E           KeyError: 'cups'
2025-01-22T20:11:05.4718432Z 
2025-01-22T20:11:05.4718696Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4719019Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blue_estimator] _
2025-01-22T20:11:05.4719025Z 
2025-01-22T20:11:05.4719177Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4719389Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4719462Z        't046000', 't048000'],
2025-01-22T20:11:05.4719542Z       dtype='object')
2025-01-22T20:11:05.4719613Z key = 'cups'
2025-01-22T20:11:05.4719618Z 
2025-01-22T20:11:05.4719704Z     def get_loc(self, key):
2025-01-22T20:11:05.4719778Z         """
2025-01-22T20:11:05.4719933Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4720006Z     
2025-01-22T20:11:05.4720079Z         Parameters
2025-01-22T20:11:05.4720160Z         ----------
2025-01-22T20:11:05.4720230Z         key : label
2025-01-22T20:11:05.4720301Z     
2025-01-22T20:11:05.4720370Z         Returns
2025-01-22T20:11:05.4720444Z         -------
2025-01-22T20:11:05.4720573Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4720644Z     
2025-01-22T20:11:05.4720714Z         Examples
2025-01-22T20:11:05.4720792Z         --------
2025-01-22T20:11:05.4720890Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4720981Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4721050Z         1
2025-01-22T20:11:05.4721120Z     
2025-01-22T20:11:05.4721217Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4721307Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4721388Z         slice(1, 3, None)
2025-01-22T20:11:05.4721455Z     
2025-01-22T20:11:05.4721564Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4721658Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4721751Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4721819Z         """
2025-01-22T20:11:05.4721925Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4721993Z         try:
2025-01-22T20:11:05.4722095Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4722099Z 
2025-01-22T20:11:05.4722377Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4722490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4722624Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4722697Z     ???
2025-01-22T20:11:05.4722825Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4722898Z     ???
2025-01-22T20:11:05.4723176Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4723245Z     ???
2025-01-22T20:11:05.4723357Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4723363Z 
2025-01-22T20:11:05.4723428Z >   ???
2025-01-22T20:11:05.4723632Z E   KeyError: 'cups'
2025-01-22T20:11:05.4723637Z 
2025-01-22T20:11:05.4723763Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4723768Z 
2025-01-22T20:11:05.4724060Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4724065Z 
2025-01-22T20:11:05.4724286Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4724608Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4725231Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4725362Z 
2025-01-22T20:11:05.4725450Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4725528Z     def plasma(
2025-01-22T20:11:05.4725597Z         self,
2025-01-22T20:11:05.4725683Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4725751Z         config,
2025-01-22T20:11:05.4725823Z     ):
2025-01-22T20:11:05.4725932Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4726034Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4726038Z 
2025-01-22T20:11:05.4726162Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4726268Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4726375Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4726459Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4726628Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4726730Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4726843Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4726921Z     return BasePlasma(
2025-01-22T20:11:05.4727010Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4727095Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4727188Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4727267Z     self.update(**kwargs)
2025-01-22T20:11:05.4727362Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4727482Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4727597Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4727703Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4727936Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4728091Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4728300Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4728404Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4728532Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4728704Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4728872Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4729050Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4729308Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4729484Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4729668Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4729768Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4730024Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4730151Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4730395Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4730481Z     return self.apply_standard()
2025-01-22T20:11:05.4730762Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4730879Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4731293Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4731415Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4731631Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4731721Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4731982Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4732144Z     return self._get_value(key)
2025-01-22T20:11:05.4732402Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4732493Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4732597Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4732601Z 
2025-01-22T20:11:05.4732760Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4732969Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4733048Z        't046000', 't048000'],
2025-01-22T20:11:05.4733127Z       dtype='object')
2025-01-22T20:11:05.4733202Z key = 'cups'
2025-01-22T20:11:05.4733206Z 
2025-01-22T20:11:05.4733288Z     def get_loc(self, key):
2025-01-22T20:11:05.4733356Z         """
2025-01-22T20:11:05.4733612Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4733684Z     
2025-01-22T20:11:05.4733761Z         Parameters
2025-01-22T20:11:05.4733835Z         ----------
2025-01-22T20:11:05.4733912Z         key : label
2025-01-22T20:11:05.4733978Z     
2025-01-22T20:11:05.4734055Z         Returns
2025-01-22T20:11:05.4734125Z         -------
2025-01-22T20:11:05.4734260Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4734326Z     
2025-01-22T20:11:05.4734405Z         Examples
2025-01-22T20:11:05.4734474Z         --------
2025-01-22T20:11:05.4734574Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4734663Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4734730Z         1
2025-01-22T20:11:05.4734801Z     
2025-01-22T20:11:05.4734901Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4734992Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4735068Z         slice(1, 3, None)
2025-01-22T20:11:05.4735139Z     
2025-01-22T20:11:05.4735247Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4735344Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4735433Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4735506Z         """
2025-01-22T20:11:05.4735605Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4735678Z         try:
2025-01-22T20:11:05.4735774Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4735863Z         except KeyError as err:
2025-01-22T20:11:05.4735959Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4736061Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4736182Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4736251Z             ):
2025-01-22T20:11:05.4736346Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4736432Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4736516Z E           KeyError: 'cups'
2025-01-22T20:11:05.4736524Z 
2025-01-22T20:11:05.4736786Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4737085Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-volume] _
2025-01-22T20:11:05.4737090Z 
2025-01-22T20:11:05.4737244Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4737456Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4737667Z        't046000', 't048000'],
2025-01-22T20:11:05.4737741Z       dtype='object')
2025-01-22T20:11:05.4737816Z key = 'cups'
2025-01-22T20:11:05.4737821Z 
2025-01-22T20:11:05.4737899Z     def get_loc(self, key):
2025-01-22T20:11:05.4737970Z         """
2025-01-22T20:11:05.4738128Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4738198Z     
2025-01-22T20:11:05.4738370Z         Parameters
2025-01-22T20:11:05.4738449Z         ----------
2025-01-22T20:11:05.4738520Z         key : label
2025-01-22T20:11:05.4738590Z     
2025-01-22T20:11:05.4738658Z         Returns
2025-01-22T20:11:05.4738731Z         -------
2025-01-22T20:11:05.4738862Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4738932Z     
2025-01-22T20:11:05.4739002Z         Examples
2025-01-22T20:11:05.4739081Z         --------
2025-01-22T20:11:05.4739183Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4739276Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4739348Z         1
2025-01-22T20:11:05.4739414Z     
2025-01-22T20:11:05.4739518Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4739603Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4739684Z         slice(1, 3, None)
2025-01-22T20:11:05.4739751Z     
2025-01-22T20:11:05.4739863Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4739955Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4740052Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4740120Z         """
2025-01-22T20:11:05.4740227Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4740295Z         try:
2025-01-22T20:11:05.4740395Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4740400Z 
2025-01-22T20:11:05.4740638Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4740756Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4740897Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4740965Z     ???
2025-01-22T20:11:05.4741099Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4741166Z     ???
2025-01-22T20:11:05.4741438Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4741511Z     ???
2025-01-22T20:11:05.4741621Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4741626Z 
2025-01-22T20:11:05.4741691Z >   ???
2025-01-22T20:11:05.4741773Z E   KeyError: 'cups'
2025-01-22T20:11:05.4741778Z 
2025-01-22T20:11:05.4741903Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4741912Z 
2025-01-22T20:11:05.4742076Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4742085Z 
2025-01-22T20:11:05.4742311Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4742624Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4743246Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4743255Z 
2025-01-22T20:11:05.4743341Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4743420Z     def plasma(
2025-01-22T20:11:05.4743486Z         self,
2025-01-22T20:11:05.4743673Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4743751Z         config,
2025-01-22T20:11:05.4743818Z     ):
2025-01-22T20:11:05.4743933Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4744146Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4744152Z 
2025-01-22T20:11:05.4744277Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4744383Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4744490Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4744572Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4744740Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4744838Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4745051Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4745128Z     return BasePlasma(
2025-01-22T20:11:05.4745217Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4745307Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4745395Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4745477Z     self.update(**kwargs)
2025-01-22T20:11:05.4745565Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4745692Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4745806Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4745917Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4746150Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4746304Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4746512Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4746614Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4746740Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4746912Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4747089Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4747261Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4747526Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4747697Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4747880Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4747983Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4748237Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4748359Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4748602Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4748689Z     return self.apply_standard()
2025-01-22T20:11:05.4748969Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4749093Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4749396Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4749520Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4749734Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4749823Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4750087Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4750174Z     return self._get_value(key)
2025-01-22T20:11:05.4750432Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4750523Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4750628Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4750638Z 
2025-01-22T20:11:05.4750791Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4751095Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4751169Z        't046000', 't048000'],
2025-01-22T20:11:05.4751248Z       dtype='object')
2025-01-22T20:11:05.4751319Z key = 'cups'
2025-01-22T20:11:05.4751323Z 
2025-01-22T20:11:05.4751406Z     def get_loc(self, key):
2025-01-22T20:11:05.4751473Z         """
2025-01-22T20:11:05.4751637Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4751705Z     
2025-01-22T20:11:05.4751853Z         Parameters
2025-01-22T20:11:05.4751924Z         ----------
2025-01-22T20:11:05.4752005Z         key : label
2025-01-22T20:11:05.4752076Z     
2025-01-22T20:11:05.4752144Z         Returns
2025-01-22T20:11:05.4752218Z         -------
2025-01-22T20:11:05.4752347Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4752419Z     
2025-01-22T20:11:05.4752490Z         Examples
2025-01-22T20:11:05.4752566Z         --------
2025-01-22T20:11:05.4752665Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4752753Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4752820Z         1
2025-01-22T20:11:05.4752890Z     
2025-01-22T20:11:05.4752991Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4753083Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4753159Z         slice(1, 3, None)
2025-01-22T20:11:05.4753231Z     
2025-01-22T20:11:05.4753334Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4753434Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4753642Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4753722Z         """
2025-01-22T20:11:05.4753828Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4753896Z         try:
2025-01-22T20:11:05.4754001Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4754084Z         except KeyError as err:
2025-01-22T20:11:05.4754190Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4754287Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4754410Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4754478Z             ):
2025-01-22T20:11:05.4754573Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4754659Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4754744Z E           KeyError: 'cups'
2025-01-22T20:11:05.4754749Z 
2025-01-22T20:11:05.4755013Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4755319Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-r_inner] _
2025-01-22T20:11:05.4755324Z 
2025-01-22T20:11:05.4755481Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4755687Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4755770Z        't046000', 't048000'],
2025-01-22T20:11:05.4755846Z       dtype='object')
2025-01-22T20:11:05.4755921Z key = 'cups'
2025-01-22T20:11:05.4755925Z 
2025-01-22T20:11:05.4756003Z     def get_loc(self, key):
2025-01-22T20:11:05.4756076Z         """
2025-01-22T20:11:05.4756234Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4756304Z     
2025-01-22T20:11:05.4756374Z         Parameters
2025-01-22T20:11:05.4756450Z         ----------
2025-01-22T20:11:05.4756524Z         key : label
2025-01-22T20:11:05.4756595Z     
2025-01-22T20:11:05.4756667Z         Returns
2025-01-22T20:11:05.4756739Z         -------
2025-01-22T20:11:05.4756872Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4756938Z     
2025-01-22T20:11:05.4757012Z         Examples
2025-01-22T20:11:05.4757083Z         --------
2025-01-22T20:11:05.4757183Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4757408Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4757481Z         1
2025-01-22T20:11:05.4757547Z     
2025-01-22T20:11:05.4757652Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4757737Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4757816Z         slice(1, 3, None)
2025-01-22T20:11:05.4757882Z     
2025-01-22T20:11:05.4757991Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4758081Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4758276Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4758343Z         """
2025-01-22T20:11:05.4758447Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4758521Z         try:
2025-01-22T20:11:05.4758617Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4758622Z 
2025-01-22T20:11:05.4758868Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4758980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4759119Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4759186Z     ???
2025-01-22T20:11:05.4759321Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4759387Z     ???
2025-01-22T20:11:05.4759660Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4759728Z     ???
2025-01-22T20:11:05.4759836Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4759844Z 
2025-01-22T20:11:05.4759914Z >   ???
2025-01-22T20:11:05.4759990Z E   KeyError: 'cups'
2025-01-22T20:11:05.4759995Z 
2025-01-22T20:11:05.4760125Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4760130Z 
2025-01-22T20:11:05.4760294Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4760299Z 
2025-01-22T20:11:05.4760522Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4760838Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4761462Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4761470Z 
2025-01-22T20:11:05.4761566Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4761638Z     def plasma(
2025-01-22T20:11:05.4761711Z         self,
2025-01-22T20:11:05.4761790Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4761863Z         config,
2025-01-22T20:11:05.4761929Z     ):
2025-01-22T20:11:05.4762046Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4762141Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4762148Z 
2025-01-22T20:11:05.4762274Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4762381Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4762490Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4762573Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4762744Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4762848Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4762957Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4763043Z     return BasePlasma(
2025-01-22T20:11:05.4763126Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4763218Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4763309Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4763391Z     self.update(**kwargs)
2025-01-22T20:11:05.4763479Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4763724Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4763955Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4764063Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4764295Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4764451Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4764667Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4764761Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4764998Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4765168Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4765342Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4765514Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4765774Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4765951Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4766136Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4766239Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4766497Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4766627Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4766867Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4766962Z     return self.apply_standard()
2025-01-22T20:11:05.4767237Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4767360Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4767663Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4767789Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4768003Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4768094Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4768356Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4768446Z     return self._get_value(key)
2025-01-22T20:11:05.4768709Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4768801Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4768912Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4768918Z 
2025-01-22T20:11:05.4769076Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4769292Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4769369Z        't046000', 't048000'],
2025-01-22T20:11:05.4769450Z       dtype='object')
2025-01-22T20:11:05.4769521Z key = 'cups'
2025-01-22T20:11:05.4769525Z 
2025-01-22T20:11:05.4769611Z     def get_loc(self, key):
2025-01-22T20:11:05.4769684Z         """
2025-01-22T20:11:05.4769841Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4769912Z     
2025-01-22T20:11:05.4769984Z         Parameters
2025-01-22T20:11:05.4770064Z         ----------
2025-01-22T20:11:05.4770135Z         key : label
2025-01-22T20:11:05.4770207Z     
2025-01-22T20:11:05.4770279Z         Returns
2025-01-22T20:11:05.4770353Z         -------
2025-01-22T20:11:05.4770485Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4770555Z     
2025-01-22T20:11:05.4770625Z         Examples
2025-01-22T20:11:05.4770699Z         --------
2025-01-22T20:11:05.4770797Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4770971Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4771039Z         1
2025-01-22T20:11:05.4771109Z     
2025-01-22T20:11:05.4771211Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4771305Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4771387Z         slice(1, 3, None)
2025-01-22T20:11:05.4771453Z     
2025-01-22T20:11:05.4771565Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4771659Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4771826Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4771894Z         """
2025-01-22T20:11:05.4771999Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4772067Z         try:
2025-01-22T20:11:05.4772170Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4772251Z         except KeyError as err:
2025-01-22T20:11:05.4772353Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4772457Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4772580Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4772647Z             ):
2025-01-22T20:11:05.4772744Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4772831Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4772915Z E           KeyError: 'cups'
2025-01-22T20:11:05.4772919Z 
2025-01-22T20:11:05.4773190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4773611Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population] _
2025-01-22T20:11:05.4773618Z 
2025-01-22T20:11:05.4773781Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4773987Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4774068Z        't046000', 't048000'],
2025-01-22T20:11:05.4774142Z       dtype='object')
2025-01-22T20:11:05.4774218Z key = 'cups'
2025-01-22T20:11:05.4774223Z 
2025-01-22T20:11:05.4774302Z     def get_loc(self, key):
2025-01-22T20:11:05.4774376Z         """
2025-01-22T20:11:05.4774538Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4774603Z     
2025-01-22T20:11:05.4774679Z         Parameters
2025-01-22T20:11:05.4774749Z         ----------
2025-01-22T20:11:05.4774824Z         key : label
2025-01-22T20:11:05.4774894Z     
2025-01-22T20:11:05.4774966Z         Returns
2025-01-22T20:11:05.4775034Z         -------
2025-01-22T20:11:05.4775168Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4775234Z     
2025-01-22T20:11:05.4775308Z         Examples
2025-01-22T20:11:05.4775376Z         --------
2025-01-22T20:11:05.4775476Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4775562Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4775638Z         1
2025-01-22T20:11:05.4775704Z     
2025-01-22T20:11:05.4775809Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4775896Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4775976Z         slice(1, 3, None)
2025-01-22T20:11:05.4776048Z     
2025-01-22T20:11:05.4776152Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4776246Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4776335Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4776410Z         """
2025-01-22T20:11:05.4776509Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4776584Z         try:
2025-01-22T20:11:05.4776681Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4776685Z 
2025-01-22T20:11:05.4776932Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4777040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4777302Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4777369Z     ???
2025-01-22T20:11:05.4777503Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4777574Z     ???
2025-01-22T20:11:05.4777850Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4777921Z     ???
2025-01-22T20:11:05.4778026Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4778152Z 
2025-01-22T20:11:05.4778224Z >   ???
2025-01-22T20:11:05.4778299Z E   KeyError: 'cups'
2025-01-22T20:11:05.4778304Z 
2025-01-22T20:11:05.4778435Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4778439Z 
2025-01-22T20:11:05.4778605Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4778610Z 
2025-01-22T20:11:05.4778833Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4779157Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4779775Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4779780Z 
2025-01-22T20:11:05.4779872Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4779947Z     def plasma(
2025-01-22T20:11:05.4780020Z         self,
2025-01-22T20:11:05.4780100Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4780174Z         config,
2025-01-22T20:11:05.4780240Z     ):
2025-01-22T20:11:05.4780354Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4780448Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4780457Z 
2025-01-22T20:11:05.4780579Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4780688Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4780792Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4780880Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4781046Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4781150Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4781258Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4781343Z     return BasePlasma(
2025-01-22T20:11:05.4781429Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4781520Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4781608Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4781692Z     self.update(**kwargs)
2025-01-22T20:11:05.4781780Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4781904Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4782018Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4782123Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4782358Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4782512Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4782726Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4782821Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4782952Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4783121Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4783296Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4783468Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4783856Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4784158Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4784337Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4784443Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4784696Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4784824Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4785062Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4785253Z     return self.apply_standard()
2025-01-22T20:11:05.4785527Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4785651Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4785956Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4786080Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4786303Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4786389Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4786655Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4786737Z     return self._get_value(key)
2025-01-22T20:11:05.4786999Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4787087Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4787197Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4787202Z 
2025-01-22T20:11:05.4787354Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4787566Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4787647Z        't046000', 't048000'],
2025-01-22T20:11:05.4787723Z       dtype='object')
2025-01-22T20:11:05.4787798Z key = 'cups'
2025-01-22T20:11:05.4787802Z 
2025-01-22T20:11:05.4787880Z     def get_loc(self, key):
2025-01-22T20:11:05.4787952Z         """
2025-01-22T20:11:05.4788108Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4788180Z     
2025-01-22T20:11:05.4788253Z         Parameters
2025-01-22T20:11:05.4788329Z         ----------
2025-01-22T20:11:05.4788403Z         key : label
2025-01-22T20:11:05.4788474Z     
2025-01-22T20:11:05.4788542Z         Returns
2025-01-22T20:11:05.4792296Z         -------
2025-01-22T20:11:05.4792481Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4792558Z     
2025-01-22T20:11:05.4792632Z         Examples
2025-01-22T20:11:05.4792712Z         --------
2025-01-22T20:11:05.4792815Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4792917Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4792988Z         1
2025-01-22T20:11:05.4793061Z     
2025-01-22T20:11:05.4793172Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4793270Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4793354Z         slice(1, 3, None)
2025-01-22T20:11:05.4793420Z     
2025-01-22T20:11:05.4793685Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4793787Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4793885Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4793959Z         """
2025-01-22T20:11:05.4794070Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4794139Z         try:
2025-01-22T20:11:05.4794245Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4794333Z         except KeyError as err:
2025-01-22T20:11:05.4794436Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4794538Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4794829Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4794900Z             ):
2025-01-22T20:11:05.4795000Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4795094Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4795176Z E           KeyError: 'cups'
2025-01-22T20:11:05.4795181Z 
2025-01-22T20:11:05.4795479Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4795954Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population_updated] _
2025-01-22T20:11:05.4795960Z 
2025-01-22T20:11:05.4796128Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4796344Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4796430Z        't046000', 't048000'],
2025-01-22T20:11:05.4796511Z       dtype='object')
2025-01-22T20:11:05.4796590Z key = 'cups'
2025-01-22T20:11:05.4796594Z 
2025-01-22T20:11:05.4796681Z     def get_loc(self, key):
2025-01-22T20:11:05.4796749Z         """
2025-01-22T20:11:05.4796919Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4796987Z     
2025-01-22T20:11:05.4797067Z         Parameters
2025-01-22T20:11:05.4797139Z         ----------
2025-01-22T20:11:05.4797218Z         key : label
2025-01-22T20:11:05.4797288Z     
2025-01-22T20:11:05.4797364Z         Returns
2025-01-22T20:11:05.4797435Z         -------
2025-01-22T20:11:05.4797573Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4797642Z     
2025-01-22T20:11:05.4797719Z         Examples
2025-01-22T20:11:05.4797790Z         --------
2025-01-22T20:11:05.4797899Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4797985Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4798062Z         1
2025-01-22T20:11:05.4798129Z     
2025-01-22T20:11:05.4798236Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4798332Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4798409Z         slice(1, 3, None)
2025-01-22T20:11:05.4798484Z     
2025-01-22T20:11:05.4798594Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4798691Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4798782Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4798860Z         """
2025-01-22T20:11:05.4798962Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4799041Z         try:
2025-01-22T20:11:05.4799140Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4799145Z 
2025-01-22T20:11:05.4799399Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4799513Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4799660Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4799736Z     ???
2025-01-22T20:11:05.4799870Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4799944Z     ???
2025-01-22T20:11:05.4800216Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4800290Z     ???
2025-01-22T20:11:05.4800398Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4800406Z 
2025-01-22T20:11:05.4800477Z >   ???
2025-01-22T20:11:05.4800556Z E   KeyError: 'cups'
2025-01-22T20:11:05.4800561Z 
2025-01-22T20:11:05.4800699Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4800703Z 
2025-01-22T20:11:05.4800877Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4800887Z 
2025-01-22T20:11:05.4801111Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4801526Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4802148Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4802153Z 
2025-01-22T20:11:05.4802248Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4802393Z     def plasma(
2025-01-22T20:11:05.4802469Z         self,
2025-01-22T20:11:05.4802555Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4802630Z         config,
2025-01-22T20:11:05.4802697Z     ):
2025-01-22T20:11:05.4802816Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4802917Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4802923Z 
2025-01-22T20:11:05.4803046Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4803166Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4803272Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4803362Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4803658Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4803767Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4803882Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4803969Z     return BasePlasma(
2025-01-22T20:11:05.4804062Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4804158Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4804249Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4804338Z     self.update(**kwargs)
2025-01-22T20:11:05.4804435Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4804558Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4804677Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4804785Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4805030Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4805184Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4805401Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4805499Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4805633Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4805804Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4805983Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4806161Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4806436Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4806614Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4806801Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4806910Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4807167Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4807291Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4807537Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4807633Z     return self.apply_standard()
2025-01-22T20:11:05.4807917Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4808045Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4808347Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4808473Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4808812Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4808905Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4809171Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4809261Z     return self._get_value(key)
2025-01-22T20:11:05.4809519Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4809733Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4809847Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4809852Z 
2025-01-22T20:11:05.4810008Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4810224Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4810302Z        't046000', 't048000'],
2025-01-22T20:11:05.4810386Z       dtype='object')
2025-01-22T20:11:05.4810458Z key = 'cups'
2025-01-22T20:11:05.4810463Z 
2025-01-22T20:11:05.4810548Z     def get_loc(self, key):
2025-01-22T20:11:05.4810616Z         """
2025-01-22T20:11:05.4810780Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4810847Z     
2025-01-22T20:11:05.4810925Z         Parameters
2025-01-22T20:11:05.4811005Z         ----------
2025-01-22T20:11:05.4811077Z         key : label
2025-01-22T20:11:05.4811152Z     
2025-01-22T20:11:05.4811220Z         Returns
2025-01-22T20:11:05.4811294Z         -------
2025-01-22T20:11:05.4811425Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4811496Z     
2025-01-22T20:11:05.4811566Z         Examples
2025-01-22T20:11:05.4811642Z         --------
2025-01-22T20:11:05.4811741Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4811833Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4811905Z         1
2025-01-22T20:11:05.4811975Z     
2025-01-22T20:11:05.4812079Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4812172Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4812247Z         slice(1, 3, None)
2025-01-22T20:11:05.4812318Z     
2025-01-22T20:11:05.4812426Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4812523Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4812618Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4812688Z         """
2025-01-22T20:11:05.4812794Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4812861Z         try:
2025-01-22T20:11:05.4812969Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4813051Z         except KeyError as err:
2025-01-22T20:11:05.4813152Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4813253Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4813380Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4813453Z             ):
2025-01-22T20:11:05.4813650Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4813738Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4813823Z E           KeyError: 'cups'
2025-01-22T20:11:05.4813827Z 
2025-01-22T20:11:05.4814097Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4814344Z _ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:05.4814352Z 
2025-01-22T20:11:05.4814511Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4814717Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4814797Z        't046000', 't048000'],
2025-01-22T20:11:05.4814871Z       dtype='object')
2025-01-22T20:11:05.4815064Z key = 'cups'
2025-01-22T20:11:05.4815069Z 
2025-01-22T20:11:05.4815147Z     def get_loc(self, key):
2025-01-22T20:11:05.4815219Z         """
2025-01-22T20:11:05.4815375Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4815445Z     
2025-01-22T20:11:05.4815517Z         Parameters
2025-01-22T20:11:05.4815594Z         ----------
2025-01-22T20:11:05.4815671Z         key : label
2025-01-22T20:11:05.4815737Z     
2025-01-22T20:11:05.4815812Z         Returns
2025-01-22T20:11:05.4815984Z         -------
2025-01-22T20:11:05.4816118Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4816185Z     
2025-01-22T20:11:05.4816259Z         Examples
2025-01-22T20:11:05.4816329Z         --------
2025-01-22T20:11:05.4816430Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4816514Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4816585Z         1
2025-01-22T20:11:05.4816653Z     
2025-01-22T20:11:05.4816763Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4816848Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4816927Z         slice(1, 3, None)
2025-01-22T20:11:05.4816993Z     
2025-01-22T20:11:05.4817105Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4817193Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4817288Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4817361Z         """
2025-01-22T20:11:05.4817460Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4817537Z         try:
2025-01-22T20:11:05.4817633Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4817637Z 
2025-01-22T20:11:05.4817892Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4818001Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4818141Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4818211Z     ???
2025-01-22T20:11:05.4818346Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4818414Z     ???
2025-01-22T20:11:05.4818687Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4818753Z     ???
2025-01-22T20:11:05.4818862Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4818866Z 
2025-01-22T20:11:05.4818936Z >   ???
2025-01-22T20:11:05.4819017Z E   KeyError: 'cups'
2025-01-22T20:11:05.4819022Z 
2025-01-22T20:11:05.4819153Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4819158Z 
2025-01-22T20:11:05.4819325Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4819329Z 
2025-01-22T20:11:05.4819557Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4819876Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4820502Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4820508Z 
2025-01-22T20:11:05.4820599Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4820672Z     def plasma(
2025-01-22T20:11:05.4820745Z         self,
2025-01-22T20:11:05.4820828Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4820902Z         config,
2025-01-22T20:11:05.4820968Z     ):
2025-01-22T20:11:05.4821084Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4821179Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4821183Z 
2025-01-22T20:11:05.4821307Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4821412Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4821608Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4821696Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4821861Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4821964Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4822074Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4822189Z     return BasePlasma(
2025-01-22T20:11:05.4822277Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4822442Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4822531Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4822618Z     self.update(**kwargs)
2025-01-22T20:11:05.4822706Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4822831Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4822939Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4823049Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4823286Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4823444Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4823747Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4823843Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4823976Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4824144Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4824322Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4824494Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4824753Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4824923Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4825111Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4825213Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4825469Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4825597Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4825836Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4825927Z     return self.apply_standard()
2025-01-22T20:11:05.4826205Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4826328Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4826633Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4826754Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4826970Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4827060Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4827327Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4827409Z     return self._get_value(key)
2025-01-22T20:11:05.4827670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4827758Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4827877Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4827882Z 
2025-01-22T20:11:05.4828036Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4828253Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4828326Z        't046000', 't048000'],
2025-01-22T20:11:05.4828406Z       dtype='object')
2025-01-22T20:11:05.4828596Z key = 'cups'
2025-01-22T20:11:05.4828606Z 
2025-01-22T20:11:05.4828685Z     def get_loc(self, key):
2025-01-22T20:11:05.4828759Z         """
2025-01-22T20:11:05.4828916Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4828987Z     
2025-01-22T20:11:05.4829059Z         Parameters
2025-01-22T20:11:05.4829134Z         ----------
2025-01-22T20:11:05.4829206Z         key : label
2025-01-22T20:11:05.4829276Z     
2025-01-22T20:11:05.4829345Z         Returns
2025-01-22T20:11:05.4829522Z         -------
2025-01-22T20:11:05.4829651Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4829722Z     
2025-01-22T20:11:05.4829791Z         Examples
2025-01-22T20:11:05.4829866Z         --------
2025-01-22T20:11:05.4829963Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4830054Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4830122Z         1
2025-01-22T20:11:05.4830197Z     
2025-01-22T20:11:05.4830299Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4830392Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4830473Z         slice(1, 3, None)
2025-01-22T20:11:05.4830539Z     
2025-01-22T20:11:05.4830649Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4830740Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4830837Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4830904Z         """
2025-01-22T20:11:05.4831010Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4831082Z         try:
2025-01-22T20:11:05.4831189Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4831270Z         except KeyError as err:
2025-01-22T20:11:05.4831371Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4831469Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4831593Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4831664Z             ):
2025-01-22T20:11:05.4831761Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4831851Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4831931Z E           KeyError: 'cups'
2025-01-22T20:11:05.4831936Z 
2025-01-22T20:11:05.4832203Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4832516Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-time_explosion] _
2025-01-22T20:11:05.4832526Z 
2025-01-22T20:11:05.4832683Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4832888Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4832968Z        't046000', 't048000'],
2025-01-22T20:11:05.4833042Z       dtype='object')
2025-01-22T20:11:05.4833122Z key = 'cups'
2025-01-22T20:11:05.4833130Z 
2025-01-22T20:11:05.4833214Z     def get_loc(self, key):
2025-01-22T20:11:05.4833281Z         """
2025-01-22T20:11:05.4833442Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4833619Z     
2025-01-22T20:11:05.4833700Z         Parameters
2025-01-22T20:11:05.4833771Z         ----------
2025-01-22T20:11:05.4833848Z         key : label
2025-01-22T20:11:05.4833919Z     
2025-01-22T20:11:05.4833988Z         Returns
2025-01-22T20:11:05.4834062Z         -------
2025-01-22T20:11:05.4834196Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4834267Z     
2025-01-22T20:11:05.4834336Z         Examples
2025-01-22T20:11:05.4834411Z         --------
2025-01-22T20:11:05.4834504Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4834593Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4834660Z         1
2025-01-22T20:11:05.4834731Z     
2025-01-22T20:11:05.4834829Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4835058Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4835137Z         slice(1, 3, None)
2025-01-22T20:11:05.4835203Z     
2025-01-22T20:11:05.4835312Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4835401Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4835493Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4835561Z         """
2025-01-22T20:11:05.4835664Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4835833Z         try:
2025-01-22T20:11:05.4835936Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4835940Z 
2025-01-22T20:11:05.4836184Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4836296Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4836431Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4836508Z     ???
2025-01-22T20:11:05.4836638Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4836710Z     ???
2025-01-22T20:11:05.4836984Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4837051Z     ???
2025-01-22T20:11:05.4837159Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4837163Z 
2025-01-22T20:11:05.4837229Z >   ???
2025-01-22T20:11:05.4837309Z E   KeyError: 'cups'
2025-01-22T20:11:05.4837317Z 
2025-01-22T20:11:05.4837443Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4837448Z 
2025-01-22T20:11:05.4837618Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4837623Z 
2025-01-22T20:11:05.4837847Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4838169Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4838795Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4838801Z 
2025-01-22T20:11:05.4838889Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4838967Z     def plasma(
2025-01-22T20:11:05.4839035Z         self,
2025-01-22T20:11:05.4839120Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4839192Z         config,
2025-01-22T20:11:05.4839263Z     ):
2025-01-22T20:11:05.4839375Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4839476Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4839481Z 
2025-01-22T20:11:05.4839606Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4839711Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4839826Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4839909Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4840078Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4840180Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4840296Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4840376Z     return BasePlasma(
2025-01-22T20:11:05.4840469Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4840556Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4840653Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4840734Z     self.update(**kwargs)
2025-01-22T20:11:05.4840825Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4840948Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4841066Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4841173Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4841412Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4841659Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4841871Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4841974Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4842102Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4842278Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4842524Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4842702Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4842958Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4843136Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4843323Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4843428Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4843807Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4843934Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4844180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4844268Z     return self.apply_standard()
2025-01-22T20:11:05.4844547Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4844672Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4844980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4845103Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4845321Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4845415Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4845678Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4845765Z     return self._get_value(key)
2025-01-22T20:11:05.4846019Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4846112Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4846221Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4846228Z 
2025-01-22T20:11:05.4846388Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4846598Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4846678Z        't046000', 't048000'],
2025-01-22T20:11:05.4846760Z       dtype='object')
2025-01-22T20:11:05.4846832Z key = 'cups'
2025-01-22T20:11:05.4846840Z 
2025-01-22T20:11:05.4846924Z     def get_loc(self, key):
2025-01-22T20:11:05.4846992Z         """
2025-01-22T20:11:05.4847155Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4847224Z     
2025-01-22T20:11:05.4847301Z         Parameters
2025-01-22T20:11:05.4847374Z         ----------
2025-01-22T20:11:05.4847449Z         key : label
2025-01-22T20:11:05.4847515Z     
2025-01-22T20:11:05.4847588Z         Returns
2025-01-22T20:11:05.4847659Z         -------
2025-01-22T20:11:05.4847799Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4847864Z     
2025-01-22T20:11:05.4847939Z         Examples
2025-01-22T20:11:05.4848012Z         --------
2025-01-22T20:11:05.4848116Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4848206Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4848275Z         1
2025-01-22T20:11:05.4848345Z     
2025-01-22T20:11:05.4848451Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4848672Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4848749Z         slice(1, 3, None)
2025-01-22T20:11:05.4848820Z     
2025-01-22T20:11:05.4848928Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4849025Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4849115Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4849187Z         """
2025-01-22T20:11:05.4849289Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4849467Z         try:
2025-01-22T20:11:05.4849566Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4849653Z         except KeyError as err:
2025-01-22T20:11:05.4849752Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4849858Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4849983Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4850052Z             ):
2025-01-22T20:11:05.4850150Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4850236Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4850321Z E           KeyError: 'cups'
2025-01-22T20:11:05.4850325Z 
2025-01-22T20:11:05.4850595Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4850928Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-link_t_rad_t_electron] _
2025-01-22T20:11:05.4850937Z 
2025-01-22T20:11:05.4851092Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4851312Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4851393Z        't046000', 't048000'],
2025-01-22T20:11:05.4851467Z       dtype='object')
2025-01-22T20:11:05.4851543Z key = 'cups'
2025-01-22T20:11:05.4851548Z 
2025-01-22T20:11:05.4851629Z     def get_loc(self, key):
2025-01-22T20:11:05.4851700Z         """
2025-01-22T20:11:05.4851859Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4851933Z     
2025-01-22T20:11:05.4852005Z         Parameters
2025-01-22T20:11:05.4852082Z         ----------
2025-01-22T20:11:05.4852152Z         key : label
2025-01-22T20:11:05.4852224Z     
2025-01-22T20:11:05.4852292Z         Returns
2025-01-22T20:11:05.4852368Z         -------
2025-01-22T20:11:05.4852499Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4852573Z     
2025-01-22T20:11:05.4852645Z         Examples
2025-01-22T20:11:05.4852720Z         --------
2025-01-22T20:11:05.4852825Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4852908Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4852983Z         1
2025-01-22T20:11:05.4853049Z     
2025-01-22T20:11:05.4853155Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4853245Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4853324Z         slice(1, 3, None)
2025-01-22T20:11:05.4853393Z     
2025-01-22T20:11:05.4853601Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4853693Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4853786Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4853853Z         """
2025-01-22T20:11:05.4853960Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4854028Z         try:
2025-01-22T20:11:05.4854137Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4854142Z 
2025-01-22T20:11:05.4854388Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4854502Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4854645Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4854714Z     ???
2025-01-22T20:11:05.4854967Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4855033Z     ???
2025-01-22T20:11:05.4855314Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4855381Z     ???
2025-01-22T20:11:05.4855492Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4855496Z 
2025-01-22T20:11:05.4855562Z >   ???
2025-01-22T20:11:05.4855644Z E   KeyError: 'cups'
2025-01-22T20:11:05.4855649Z 
2025-01-22T20:11:05.4855875Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4855886Z 
2025-01-22T20:11:05.4856054Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4856058Z 
2025-01-22T20:11:05.4856284Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4856600Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4857233Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4857239Z 
2025-01-22T20:11:05.4857325Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4857404Z     def plasma(
2025-01-22T20:11:05.4857477Z         self,
2025-01-22T20:11:05.4857557Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4857630Z         config,
2025-01-22T20:11:05.4857700Z     ):
2025-01-22T20:11:05.4857817Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4857912Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4857916Z 
2025-01-22T20:11:05.4858045Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4858150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4858260Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4858347Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4858520Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4858622Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4858738Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4858816Z     return BasePlasma(
2025-01-22T20:11:05.4858906Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4858997Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4859086Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4859175Z     self.update(**kwargs)
2025-01-22T20:11:05.4859263Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4859388Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4859498Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4859609Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4859843Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4860005Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4860215Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4860318Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4860444Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4860616Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4860791Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4860967Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4861229Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4861401Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4861587Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4861819Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4862080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4862204Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4862446Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4862532Z     return self.apply_standard()
2025-01-22T20:11:05.4862812Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4863009Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4863313Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4863438Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4863773Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4863872Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4864135Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4864224Z     return self._get_value(key)
2025-01-22T20:11:05.4864478Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4864569Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4864682Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4864690Z 
2025-01-22T20:11:05.4864845Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4865062Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4865135Z        't046000', 't048000'],
2025-01-22T20:11:05.4865215Z       dtype='object')
2025-01-22T20:11:05.4865287Z key = 'cups'
2025-01-22T20:11:05.4865291Z 
2025-01-22T20:11:05.4865377Z     def get_loc(self, key):
2025-01-22T20:11:05.4865445Z         """
2025-01-22T20:11:05.4865604Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4865671Z     
2025-01-22T20:11:05.4865749Z         Parameters
2025-01-22T20:11:05.4865820Z         ----------
2025-01-22T20:11:05.4865896Z         key : label
2025-01-22T20:11:05.4865968Z     
2025-01-22T20:11:05.4866036Z         Returns
2025-01-22T20:11:05.4866111Z         -------
2025-01-22T20:11:05.4866241Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4866314Z     
2025-01-22T20:11:05.4866384Z         Examples
2025-01-22T20:11:05.4866461Z         --------
2025-01-22T20:11:05.4866559Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4866649Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4866716Z         1
2025-01-22T20:11:05.4866785Z     
2025-01-22T20:11:05.4866887Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4866981Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4867057Z         slice(1, 3, None)
2025-01-22T20:11:05.4867127Z     
2025-01-22T20:11:05.4867234Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4867328Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4867417Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4867490Z         """
2025-01-22T20:11:05.4867594Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4867662Z         try:
2025-01-22T20:11:05.4867767Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4867848Z         except KeyError as err:
2025-01-22T20:11:05.4867952Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4868050Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4868171Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4868242Z             ):
2025-01-22T20:11:05.4868338Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4868622Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4868707Z E           KeyError: 'cups'
2025-01-22T20:11:05.4868711Z 
2025-01-22T20:11:05.4868978Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4869256Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:05.4869261Z 
2025-01-22T20:11:05.4869417Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4869726Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4869804Z        't046000', 't048000'],
2025-01-22T20:11:05.4869884Z       dtype='object')
2025-01-22T20:11:05.4869960Z key = 'cups'
2025-01-22T20:11:05.4869965Z 
2025-01-22T20:11:05.4870042Z     def get_loc(self, key):
2025-01-22T20:11:05.4870119Z         """
2025-01-22T20:11:05.4870275Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4870345Z     
2025-01-22T20:11:05.4870417Z         Parameters
2025-01-22T20:11:05.4870491Z         ----------
2025-01-22T20:11:05.4870562Z         key : label
2025-01-22T20:11:05.4870633Z     
2025-01-22T20:11:05.4870706Z         Returns
2025-01-22T20:11:05.4870775Z         -------
2025-01-22T20:11:05.4870909Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4870975Z     
2025-01-22T20:11:05.4871051Z         Examples
2025-01-22T20:11:05.4871120Z         --------
2025-01-22T20:11:05.4871220Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4871305Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4871377Z         1
2025-01-22T20:11:05.4871445Z     
2025-01-22T20:11:05.4871551Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4871635Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4871719Z         slice(1, 3, None)
2025-01-22T20:11:05.4871784Z     
2025-01-22T20:11:05.4871894Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4871983Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4872078Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4872150Z         """
2025-01-22T20:11:05.4872249Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4872322Z         try:
2025-01-22T20:11:05.4872418Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4872426Z 
2025-01-22T20:11:05.4872675Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4872781Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4872922Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4872989Z     ???
2025-01-22T20:11:05.4873124Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4873194Z     ???
2025-01-22T20:11:05.4873466Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4873647Z     ???
2025-01-22T20:11:05.4873760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4873765Z 
2025-01-22T20:11:05.4873835Z >   ???
2025-01-22T20:11:05.4873911Z E   KeyError: 'cups'
2025-01-22T20:11:05.4873915Z 
2025-01-22T20:11:05.4874046Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4874054Z 
2025-01-22T20:11:05.4874220Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4874225Z 
2025-01-22T20:11:05.4874452Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4874765Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4875391Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4875512Z 
2025-01-22T20:11:05.4875607Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4875679Z     def plasma(
2025-01-22T20:11:05.4875753Z         self,
2025-01-22T20:11:05.4875833Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4875906Z         config,
2025-01-22T20:11:05.4875972Z     ):
2025-01-22T20:11:05.4876188Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4876282Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4876287Z 
2025-01-22T20:11:05.4876414Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4876519Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4876627Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4876715Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4876887Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4876991Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4877100Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4877185Z     return BasePlasma(
2025-01-22T20:11:05.4877270Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4877359Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4877446Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4877529Z     self.update(**kwargs)
2025-01-22T20:11:05.4877620Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4877744Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4877853Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4877959Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4878192Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4878348Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4878565Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4878660Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4878792Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4878958Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4879132Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4879302Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4879569Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4879739Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4879924Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4880029Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4880287Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4880415Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4880653Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4880744Z     return self.apply_standard()
2025-01-22T20:11:05.4881018Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4881144Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4881448Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4881570Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4881783Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4881873Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4882278Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4882365Z     return self._get_value(key)
2025-01-22T20:11:05.4882625Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4882713Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4882824Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4882830Z 
2025-01-22T20:11:05.4882983Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4883288Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4883363Z        't046000', 't048000'],
2025-01-22T20:11:05.4883444Z       dtype='object')
2025-01-22T20:11:05.4883628Z key = 'cups'
2025-01-22T20:11:05.4883633Z 
2025-01-22T20:11:05.4883719Z     def get_loc(self, key):
2025-01-22T20:11:05.4883797Z         """
2025-01-22T20:11:05.4883953Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4884023Z     
2025-01-22T20:11:05.4884095Z         Parameters
2025-01-22T20:11:05.4884171Z         ----------
2025-01-22T20:11:05.4884242Z         key : label
2025-01-22T20:11:05.4884312Z     
2025-01-22T20:11:05.4884379Z         Returns
2025-01-22T20:11:05.4884454Z         -------
2025-01-22T20:11:05.4884584Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4884658Z     
2025-01-22T20:11:05.4884727Z         Examples
2025-01-22T20:11:05.4884801Z         --------
2025-01-22T20:11:05.4884898Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4884987Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4885053Z         1
2025-01-22T20:11:05.4885129Z     
2025-01-22T20:11:05.4885229Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4885324Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4885407Z         slice(1, 3, None)
2025-01-22T20:11:05.4885473Z     
2025-01-22T20:11:05.4885583Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4885671Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4885765Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4885833Z         """
2025-01-22T20:11:05.4885939Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4886006Z         try:
2025-01-22T20:11:05.4886108Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4886194Z         except KeyError as err:
2025-01-22T20:11:05.4886296Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4886393Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4886513Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4886581Z             ):
2025-01-22T20:11:05.4886677Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4886768Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4886852Z E           KeyError: 'cups'
2025-01-22T20:11:05.4886857Z 
2025-01-22T20:11:05.4887127Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4887372Z _ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:05.4887377Z 
2025-01-22T20:11:05.4887533Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4887743Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4887821Z        't046000', 't048000'],
2025-01-22T20:11:05.4887894Z       dtype='object')
2025-01-22T20:11:05.4887970Z key = 'cups'
2025-01-22T20:11:05.4887975Z 
2025-01-22T20:11:05.4888060Z     def get_loc(self, key):
2025-01-22T20:11:05.4888128Z         """
2025-01-22T20:11:05.4888289Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4888481Z     
2025-01-22T20:11:05.4888557Z         Parameters
2025-01-22T20:11:05.4888629Z         ----------
2025-01-22T20:11:05.4888705Z         key : label
2025-01-22T20:11:05.4888771Z     
2025-01-22T20:11:05.4888845Z         Returns
2025-01-22T20:11:05.4888915Z         -------
2025-01-22T20:11:05.4889048Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4889114Z     
2025-01-22T20:11:05.4889187Z         Examples
2025-01-22T20:11:05.4889260Z         --------
2025-01-22T20:11:05.4889464Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4889547Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4889619Z         1
2025-01-22T20:11:05.4889684Z     
2025-01-22T20:11:05.4889789Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4889874Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4889953Z         slice(1, 3, None)
2025-01-22T20:11:05.4890022Z     
2025-01-22T20:11:05.4890132Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4890225Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4890313Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4890384Z         """
2025-01-22T20:11:05.4890485Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4890558Z         try:
2025-01-22T20:11:05.4890653Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4890659Z 
2025-01-22T20:11:05.4890907Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4891019Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4891159Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4891225Z     ???
2025-01-22T20:11:05.4891360Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4891430Z     ???
2025-01-22T20:11:05.4891700Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4891775Z     ???
2025-01-22T20:11:05.4891879Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4891884Z 
2025-01-22T20:11:05.4891954Z >   ???
2025-01-22T20:11:05.4892030Z E   KeyError: 'cups'
2025-01-22T20:11:05.4892036Z 
2025-01-22T20:11:05.4892166Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4892171Z 
2025-01-22T20:11:05.4892338Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4892345Z 
2025-01-22T20:11:05.4892573Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4892893Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4893604Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4893615Z 
2025-01-22T20:11:05.4893710Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4893781Z     def plasma(
2025-01-22T20:11:05.4893855Z         self,
2025-01-22T20:11:05.4893935Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4894011Z         config,
2025-01-22T20:11:05.4894077Z     ):
2025-01-22T20:11:05.4894192Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4894288Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4894298Z 
2025-01-22T20:11:05.4894419Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4894529Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4894634Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4894721Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4894887Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4895109Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4895218Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4895300Z     return BasePlasma(
2025-01-22T20:11:05.4895386Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4895477Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4895564Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4895648Z     self.update(**kwargs)
2025-01-22T20:11:05.4895735Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4895959Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4896072Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4896174Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4896411Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:05.4896562Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4896778Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4896874Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4897003Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4897168Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4897342Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4897511Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4897775Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4897962Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4898141Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4898246Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4898497Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4898626Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4898865Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4898958Z     return self.apply_standard()
2025-01-22T20:11:05.4899231Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4899352Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4899657Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4899780Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4900000Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4900084Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4900360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4900448Z     return self._get_value(key)
2025-01-22T20:11:05.4900714Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4900802Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4900921Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4900926Z 
2025-01-22T20:11:05.4901083Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4901306Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4901388Z        't046000', 't048000'],
2025-01-22T20:11:05.4901463Z       dtype='object')
2025-01-22T20:11:05.4901540Z key = 'cups'
2025-01-22T20:11:05.4901544Z 
2025-01-22T20:11:05.4901623Z     def get_loc(self, key):
2025-01-22T20:11:05.4901696Z         """
2025-01-22T20:11:05.4901858Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4902014Z     
2025-01-22T20:11:05.4902088Z         Parameters
2025-01-22T20:11:05.4902164Z         ----------
2025-01-22T20:11:05.4902235Z         key : label
2025-01-22T20:11:05.4902307Z     
2025-01-22T20:11:05.4902377Z         Returns
2025-01-22T20:11:05.4902452Z         -------
2025-01-22T20:11:05.4902586Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4902658Z     
2025-01-22T20:11:05.4902729Z         Examples
2025-01-22T20:11:05.4902877Z         --------
2025-01-22T20:11:05.4902981Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4903066Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4903139Z         1
2025-01-22T20:11:05.4903205Z     
2025-01-22T20:11:05.4903316Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4903406Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4903488Z         slice(1, 3, None)
2025-01-22T20:11:05.4903677Z     
2025-01-22T20:11:05.4903796Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4903890Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4903985Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4904053Z         """
2025-01-22T20:11:05.4904161Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4904230Z         try:
2025-01-22T20:11:05.4904334Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4904416Z         except KeyError as err:
2025-01-22T20:11:05.4904522Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4904628Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4904747Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4904820Z             ):
2025-01-22T20:11:05.4904913Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4905006Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4905090Z E           KeyError: 'cups'
2025-01-22T20:11:05.4905095Z 
2025-01-22T20:11:05.4905373Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4905605Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_rad] _
2025-01-22T20:11:05.4905610Z 
2025-01-22T20:11:05.4905771Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4905981Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4906063Z        't046000', 't048000'],
2025-01-22T20:11:05.4906143Z       dtype='object')
2025-01-22T20:11:05.4906214Z key = 'cups'
2025-01-22T20:11:05.4906218Z 
2025-01-22T20:11:05.4906300Z     def get_loc(self, key):
2025-01-22T20:11:05.4906368Z         """
2025-01-22T20:11:05.4906535Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4906602Z     
2025-01-22T20:11:05.4906685Z         Parameters
2025-01-22T20:11:05.4906756Z         ----------
2025-01-22T20:11:05.4906831Z         key : label
2025-01-22T20:11:05.4906898Z     
2025-01-22T20:11:05.4906972Z         Returns
2025-01-22T20:11:05.4907042Z         -------
2025-01-22T20:11:05.4907177Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4907243Z     
2025-01-22T20:11:05.4907318Z         Examples
2025-01-22T20:11:05.4907392Z         --------
2025-01-22T20:11:05.4907494Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4907587Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4907654Z         1
2025-01-22T20:11:05.4907726Z     
2025-01-22T20:11:05.4907826Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4907917Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4907993Z         slice(1, 3, None)
2025-01-22T20:11:05.4908066Z     
2025-01-22T20:11:05.4908175Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4908392Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4908483Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4908555Z         """
2025-01-22T20:11:05.4908656Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4908730Z         try:
2025-01-22T20:11:05.4908829Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4908834Z 
2025-01-22T20:11:05.4909085Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4909319Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4909456Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4909529Z     ???
2025-01-22T20:11:05.4909660Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4909732Z     ???
2025-01-22T20:11:05.4910005Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4910083Z     ???
2025-01-22T20:11:05.4910190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4910194Z 
2025-01-22T20:11:05.4910266Z >   ???
2025-01-22T20:11:05.4910343Z E   KeyError: 'cups'
2025-01-22T20:11:05.4910348Z 
2025-01-22T20:11:05.4910480Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4910485Z 
2025-01-22T20:11:05.4910656Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4910660Z 
2025-01-22T20:11:05.4910884Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4911207Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4911825Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4911834Z 
2025-01-22T20:11:05.4911927Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4912002Z     def plasma(
2025-01-22T20:11:05.4912076Z         self,
2025-01-22T20:11:05.4912163Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4912233Z         config,
2025-01-22T20:11:05.4912308Z     ):
2025-01-22T20:11:05.4912421Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4912520Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4912527Z 
2025-01-22T20:11:05.4912647Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4912759Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4912864Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4912952Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4913116Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4913223Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4913337Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4913422Z     return BasePlasma(
2025-01-22T20:11:05.4913625Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4913721Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4913816Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4913896Z     self.update(**kwargs)
2025-01-22T20:11:05.4913989Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4914110Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4914228Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4914331Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4914537Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4914689Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4914905Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4915119Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4915253Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4915419Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4915595Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4915771Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4916027Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4916306Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4916487Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4916596Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4916852Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4916985Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4917227Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4917320Z     return self.apply_standard()
2025-01-22T20:11:05.4917601Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4917720Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4918031Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4918150Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4918374Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4918462Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4918732Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4918815Z     return self._get_value(key)
2025-01-22T20:11:05.4919079Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4919165Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4919276Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4919280Z 
2025-01-22T20:11:05.4919441Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4919648Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4919733Z        't046000', 't048000'],
2025-01-22T20:11:05.4919808Z       dtype='object')
2025-01-22T20:11:05.4919886Z key = 'cups'
2025-01-22T20:11:05.4919892Z 
2025-01-22T20:11:05.4919970Z     def get_loc(self, key):
2025-01-22T20:11:05.4920043Z         """
2025-01-22T20:11:05.4920201Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4920273Z     
2025-01-22T20:11:05.4920349Z         Parameters
2025-01-22T20:11:05.4920425Z         ----------
2025-01-22T20:11:05.4920500Z         key : label
2025-01-22T20:11:05.4920571Z     
2025-01-22T20:11:05.4920645Z         Returns
2025-01-22T20:11:05.4920719Z         -------
2025-01-22T20:11:05.4920859Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4920926Z     
2025-01-22T20:11:05.4921002Z         Examples
2025-01-22T20:11:05.4921072Z         --------
2025-01-22T20:11:05.4921175Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4921269Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4921343Z         1
2025-01-22T20:11:05.4921409Z     
2025-01-22T20:11:05.4921516Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4921603Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4921683Z         slice(1, 3, None)
2025-01-22T20:11:05.4921748Z     
2025-01-22T20:11:05.4921859Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4922039Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4922134Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4922233Z         """
2025-01-22T20:11:05.4922340Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4922414Z         try:
2025-01-22T20:11:05.4922513Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4922600Z         except KeyError as err:
2025-01-22T20:11:05.4922697Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4922876Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4922997Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4923069Z             ):
2025-01-22T20:11:05.4923159Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4923252Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4923333Z E           KeyError: 'cups'
2025-01-22T20:11:05.4923337Z 
2025-01-22T20:11:05.4923719Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4923879Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:05.4924316Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:05.4924767Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:05.4924917Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:05.4925421Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:05.4925660Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-g_electron] _
2025-01-22T20:11:05.4925665Z 
2025-01-22T20:11:05.4925825Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4926039Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4926118Z        't046000', 't048000'],
2025-01-22T20:11:05.4926198Z       dtype='object')
2025-01-22T20:11:05.4926270Z key = 'cups'
2025-01-22T20:11:05.4926274Z 
2025-01-22T20:11:05.4926357Z     def get_loc(self, key):
2025-01-22T20:11:05.4926426Z         """
2025-01-22T20:11:05.4926589Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4926663Z     
2025-01-22T20:11:05.4926738Z         Parameters
2025-01-22T20:11:05.4926809Z         ----------
2025-01-22T20:11:05.4926886Z         key : label
2025-01-22T20:11:05.4926953Z     
2025-01-22T20:11:05.4927027Z         Returns
2025-01-22T20:11:05.4927096Z         -------
2025-01-22T20:11:05.4927231Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4927298Z     
2025-01-22T20:11:05.4927373Z         Examples
2025-01-22T20:11:05.4927446Z         --------
2025-01-22T20:11:05.4927547Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4927637Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4927705Z         1
2025-01-22T20:11:05.4927776Z     
2025-01-22T20:11:05.4927876Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4927971Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4928046Z         slice(1, 3, None)
2025-01-22T20:11:05.4928117Z     
2025-01-22T20:11:05.4928224Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4928322Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4928411Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4928485Z         """
2025-01-22T20:11:05.4928585Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4928659Z         try:
2025-01-22T20:11:05.4928759Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4928904Z 
2025-01-22T20:11:05.4929162Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4929275Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4929414Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4929487Z     ???
2025-01-22T20:11:05.4929618Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4929691Z     ???
2025-01-22T20:11:05.4929963Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4930136Z     ???
2025-01-22T20:11:05.4930244Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4930248Z 
2025-01-22T20:11:05.4930319Z >   ???
2025-01-22T20:11:05.4930396Z E   KeyError: 'cups'
2025-01-22T20:11:05.4930401Z 
2025-01-22T20:11:05.4930533Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4930537Z 
2025-01-22T20:11:05.4930712Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4930717Z 
2025-01-22T20:11:05.4930936Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4931259Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4931877Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4931885Z 
2025-01-22T20:11:05.4931978Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4932051Z     def plasma(
2025-01-22T20:11:05.4932125Z         self,
2025-01-22T20:11:05.4932205Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4932280Z         config,
2025-01-22T20:11:05.4932354Z     ):
2025-01-22T20:11:05.4932468Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4932572Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4932577Z 
2025-01-22T20:11:05.4932700Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4932810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4932916Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4933003Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4933167Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4933273Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4933382Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4933465Z     return BasePlasma(
2025-01-22T20:11:05.4933647Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4933741Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4933833Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4933913Z     self.update(**kwargs)
2025-01-22T20:11:05.4934008Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4934128Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4934242Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4934343Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4934546Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4934694Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4934907Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4935007Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4935138Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4935304Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4935478Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4935655Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4936054Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4936230Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4936410Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4936518Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4936775Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4937002Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4937239Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4937331Z     return self.apply_standard()
2025-01-22T20:11:05.4937607Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4937730Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4938044Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4938161Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4938380Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4938466Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4938732Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4938820Z     return self._get_value(key)
2025-01-22T20:11:05.4939082Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4939168Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4939280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4939284Z 
2025-01-22T20:11:05.4939445Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4939657Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4939736Z        't046000', 't048000'],
2025-01-22T20:11:05.4939811Z       dtype='object')
2025-01-22T20:11:05.4939888Z key = 'cups'
2025-01-22T20:11:05.4939892Z 
2025-01-22T20:11:05.4939972Z     def get_loc(self, key):
2025-01-22T20:11:05.4940044Z         """
2025-01-22T20:11:05.4940203Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4940280Z     
2025-01-22T20:11:05.4940352Z         Parameters
2025-01-22T20:11:05.4940428Z         ----------
2025-01-22T20:11:05.4940501Z         key : label
2025-01-22T20:11:05.4940573Z     
2025-01-22T20:11:05.4940648Z         Returns
2025-01-22T20:11:05.4940720Z         -------
2025-01-22T20:11:05.4940860Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4940926Z     
2025-01-22T20:11:05.4941005Z         Examples
2025-01-22T20:11:05.4941091Z         --------
2025-01-22T20:11:05.4941196Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4941284Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4941356Z         1
2025-01-22T20:11:05.4941422Z     
2025-01-22T20:11:05.4941532Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4941621Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4941702Z         slice(1, 3, None)
2025-01-22T20:11:05.4941769Z     
2025-01-22T20:11:05.4941887Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4941978Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4942075Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4942143Z         """
2025-01-22T20:11:05.4942250Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4942325Z         try:
2025-01-22T20:11:05.4942425Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4942601Z         except KeyError as err:
2025-01-22T20:11:05.4942698Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4942803Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4942923Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4942997Z             ):
2025-01-22T20:11:05.4943088Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4943179Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4943262Z E           KeyError: 'cups'
2025-01-22T20:11:05.4943339Z 
2025-01-22T20:11:05.4943743Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4943993Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-selected_atoms] _
2025-01-22T20:11:05.4944002Z 
2025-01-22T20:11:05.4944162Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4944379Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4944458Z        't046000', 't048000'],
2025-01-22T20:11:05.4944538Z       dtype='object')
2025-01-22T20:11:05.4944614Z key = 'cups'
2025-01-22T20:11:05.4944618Z 
2025-01-22T20:11:05.4944702Z     def get_loc(self, key):
2025-01-22T20:11:05.4944770Z         """
2025-01-22T20:11:05.4944934Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4945000Z     
2025-01-22T20:11:05.4945079Z         Parameters
2025-01-22T20:11:05.4945153Z         ----------
2025-01-22T20:11:05.4945230Z         key : label
2025-01-22T20:11:05.4945296Z     
2025-01-22T20:11:05.4945371Z         Returns
2025-01-22T20:11:05.4945446Z         -------
2025-01-22T20:11:05.4945576Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4945650Z     
2025-01-22T20:11:05.4945723Z         Examples
2025-01-22T20:11:05.4945798Z         --------
2025-01-22T20:11:05.4945897Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4945986Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4946053Z         1
2025-01-22T20:11:05.4946123Z     
2025-01-22T20:11:05.4946224Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4946315Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4946391Z         slice(1, 3, None)
2025-01-22T20:11:05.4946462Z     
2025-01-22T20:11:05.4946571Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4946666Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4946759Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4946831Z         """
2025-01-22T20:11:05.4946932Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4947006Z         try:
2025-01-22T20:11:05.4947111Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4947115Z 
2025-01-22T20:11:05.4947361Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4947482Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4947617Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4947691Z     ???
2025-01-22T20:11:05.4947822Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4947894Z     ???
2025-01-22T20:11:05.4948167Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4948242Z     ???
2025-01-22T20:11:05.4948350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4948360Z 
2025-01-22T20:11:05.4948427Z >   ???
2025-01-22T20:11:05.4948509Z E   KeyError: 'cups'
2025-01-22T20:11:05.4948514Z 
2025-01-22T20:11:05.4948639Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4948644Z 
2025-01-22T20:11:05.4948815Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4948937Z 
2025-01-22T20:11:05.4949164Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4949489Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4950114Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4950223Z 
2025-01-22T20:11:05.4950311Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4950390Z     def plasma(
2025-01-22T20:11:05.4950460Z         self,
2025-01-22T20:11:05.4950546Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4950615Z         config,
2025-01-22T20:11:05.4950690Z     ):
2025-01-22T20:11:05.4950803Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4950902Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4950910Z 
2025-01-22T20:11:05.4951030Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4951142Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4951248Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4951336Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4951504Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4951611Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4951729Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4951806Z     return BasePlasma(
2025-01-22T20:11:05.4951900Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4951985Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4952080Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4952159Z     self.update(**kwargs)
2025-01-22T20:11:05.4952251Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4952375Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4952490Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4952593Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4952796Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4952950Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4953165Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4953265Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4953395Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4953684Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4953859Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4954035Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4954293Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4954473Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4954653Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4954762Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4955014Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4955142Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4955390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4955477Z     return self.apply_standard()
2025-01-22T20:11:05.4955758Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4955875Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4956186Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4956424Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4956656Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4956766Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4957035Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4957122Z     return self._get_value(key)
2025-01-22T20:11:05.4957480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4957571Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4957678Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4957683Z 
2025-01-22T20:11:05.4957843Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4958054Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4958138Z        't046000', 't048000'],
2025-01-22T20:11:05.4958213Z       dtype='object')
2025-01-22T20:11:05.4958290Z key = 'cups'
2025-01-22T20:11:05.4958295Z 
2025-01-22T20:11:05.4958375Z     def get_loc(self, key):
2025-01-22T20:11:05.4958448Z         """
2025-01-22T20:11:05.4958614Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4958681Z     
2025-01-22T20:11:05.4958759Z         Parameters
2025-01-22T20:11:05.4958833Z         ----------
2025-01-22T20:11:05.4958910Z         key : label
2025-01-22T20:11:05.4958975Z     
2025-01-22T20:11:05.4959049Z         Returns
2025-01-22T20:11:05.4959120Z         -------
2025-01-22T20:11:05.4959254Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4959321Z     
2025-01-22T20:11:05.4959395Z         Examples
2025-01-22T20:11:05.4959466Z         --------
2025-01-22T20:11:05.4959573Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4959660Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4959733Z         1
2025-01-22T20:11:05.4959799Z     
2025-01-22T20:11:05.4959908Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4959995Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4960078Z         slice(1, 3, None)
2025-01-22T20:11:05.4960149Z     
2025-01-22T20:11:05.4960256Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4960354Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4960454Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4964490Z         """
2025-01-22T20:11:05.4964642Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4964722Z         try:
2025-01-22T20:11:05.4964833Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4964924Z         except KeyError as err:
2025-01-22T20:11:05.4965025Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4965144Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4965276Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4965353Z             ):
2025-01-22T20:11:05.4965451Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4965547Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4965630Z E           KeyError: 'cups'
2025-01-22T20:11:05.4965635Z 
2025-01-22T20:11:05.4965935Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4966198Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-number_density] _
2025-01-22T20:11:05.4966203Z 
2025-01-22T20:11:05.4966365Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4966584Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4966842Z        't046000', 't048000'],
2025-01-22T20:11:05.4966927Z       dtype='object')
2025-01-22T20:11:05.4967002Z key = 'cups'
2025-01-22T20:11:05.4967006Z 
2025-01-22T20:11:05.4967093Z     def get_loc(self, key):
2025-01-22T20:11:05.4967163Z         """
2025-01-22T20:11:05.4967333Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4967402Z     
2025-01-22T20:11:05.4967483Z         Parameters
2025-01-22T20:11:05.4967558Z         ----------
2025-01-22T20:11:05.4967636Z         key : label
2025-01-22T20:11:05.4967814Z     
2025-01-22T20:11:05.4967885Z         Returns
2025-01-22T20:11:05.4967964Z         -------
2025-01-22T20:11:05.4968105Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4968178Z     
2025-01-22T20:11:05.4968248Z         Examples
2025-01-22T20:11:05.4968324Z         --------
2025-01-22T20:11:05.4968424Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4968516Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4968587Z         1
2025-01-22T20:11:05.4968664Z     
2025-01-22T20:11:05.4968772Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4968868Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4968945Z         slice(1, 3, None)
2025-01-22T20:11:05.4969020Z     
2025-01-22T20:11:05.4969131Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4969229Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4969322Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4969399Z         """
2025-01-22T20:11:05.4969508Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4969577Z         try:
2025-01-22T20:11:05.4969683Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4969688Z 
2025-01-22T20:11:05.4969947Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4970070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4970214Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4970290Z     ???
2025-01-22T20:11:05.4970421Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4970496Z     ???
2025-01-22T20:11:05.4970770Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4970844Z     ???
2025-01-22T20:11:05.4970952Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4970966Z 
2025-01-22T20:11:05.4971033Z >   ???
2025-01-22T20:11:05.4971119Z E   KeyError: 'cups'
2025-01-22T20:11:05.4971124Z 
2025-01-22T20:11:05.4971253Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4971258Z 
2025-01-22T20:11:05.4971431Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4971437Z 
2025-01-22T20:11:05.4971659Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4971994Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4972616Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4972628Z 
2025-01-22T20:11:05.4972718Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4972802Z     def plasma(
2025-01-22T20:11:05.4972872Z         self,
2025-01-22T20:11:05.4972962Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4973032Z         config,
2025-01-22T20:11:05.4973104Z     ):
2025-01-22T20:11:05.4973218Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4973320Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4973325Z 
2025-01-22T20:11:05.4973648Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4973772Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4973879Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4973973Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4974153Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4974259Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4974376Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4974572Z     return BasePlasma(
2025-01-22T20:11:05.4974665Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4974754Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4974850Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4974933Z     self.update(**kwargs)
2025-01-22T20:11:05.4975029Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4975153Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4975271Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4975379Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4975589Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4975745Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4975962Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4976066Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4976195Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4976376Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4976551Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4976731Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4976993Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4977177Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4977358Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4977471Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4977733Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4977858Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4978109Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4978201Z     return self.apply_standard()
2025-01-22T20:11:05.4978487Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4978608Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4978919Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4979044Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4979266Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4979354Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4979625Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4979716Z     return self._get_value(key)
2025-01-22T20:11:05.4979974Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4980074Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4980182Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4980187Z 
2025-01-22T20:11:05.4980349Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4980555Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4980754Z        't046000', 't048000'],
2025-01-22T20:11:05.4980831Z       dtype='object')
2025-01-22T20:11:05.4980908Z key = 'cups'
2025-01-22T20:11:05.4980912Z 
2025-01-22T20:11:05.4980993Z     def get_loc(self, key):
2025-01-22T20:11:05.4981067Z         """
2025-01-22T20:11:05.4981227Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4981300Z     
2025-01-22T20:11:05.4981372Z         Parameters
2025-01-22T20:11:05.4981449Z         ----------
2025-01-22T20:11:05.4981521Z         key : label
2025-01-22T20:11:05.4981664Z     
2025-01-22T20:11:05.4981732Z         Returns
2025-01-22T20:11:05.4981807Z         -------
2025-01-22T20:11:05.4981939Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4982010Z     
2025-01-22T20:11:05.4982079Z         Examples
2025-01-22T20:11:05.4982156Z         --------
2025-01-22T20:11:05.4982254Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4982344Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4982421Z         1
2025-01-22T20:11:05.4982486Z     
2025-01-22T20:11:05.4982594Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4982683Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4982762Z         slice(1, 3, None)
2025-01-22T20:11:05.4982828Z     
2025-01-22T20:11:05.4982940Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4983031Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4983127Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4983199Z         """
2025-01-22T20:11:05.4983307Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4983377Z         try:
2025-01-22T20:11:05.4983483Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4983663Z         except KeyError as err:
2025-01-22T20:11:05.4983766Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.4983867Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.4983996Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.4984069Z             ):
2025-01-22T20:11:05.4984162Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.4984253Z >           raise KeyError(key) from err
2025-01-22T20:11:05.4984334Z E           KeyError: 'cups'
2025-01-22T20:11:05.4984339Z 
2025-01-22T20:11:05.4984613Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.4984865Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-t_electrons] _
2025-01-22T20:11:05.4984870Z 
2025-01-22T20:11:05.4985028Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4985235Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4985316Z        't046000', 't048000'],
2025-01-22T20:11:05.4985399Z       dtype='object')
2025-01-22T20:11:05.4985470Z key = 'cups'
2025-01-22T20:11:05.4985474Z 
2025-01-22T20:11:05.4985559Z     def get_loc(self, key):
2025-01-22T20:11:05.4985626Z         """
2025-01-22T20:11:05.4985792Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4985858Z     
2025-01-22T20:11:05.4985935Z         Parameters
2025-01-22T20:11:05.4986006Z         ----------
2025-01-22T20:11:05.4986081Z         key : label
2025-01-22T20:11:05.4986147Z     
2025-01-22T20:11:05.4986220Z         Returns
2025-01-22T20:11:05.4986293Z         -------
2025-01-22T20:11:05.4986426Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.4986493Z     
2025-01-22T20:11:05.4986569Z         Examples
2025-01-22T20:11:05.4986640Z         --------
2025-01-22T20:11:05.4986741Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.4986830Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.4986897Z         1
2025-01-22T20:11:05.4987087Z     
2025-01-22T20:11:05.4987188Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.4987279Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.4987354Z         slice(1, 3, None)
2025-01-22T20:11:05.4987424Z     
2025-01-22T20:11:05.4987530Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.4987625Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.4987715Z         array([False,  True, False,  True])
2025-01-22T20:11:05.4987788Z         """
2025-01-22T20:11:05.4988009Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.4988081Z         try:
2025-01-22T20:11:05.4988179Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.4988183Z 
2025-01-22T20:11:05.4988431Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.4988546Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4988685Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4988757Z     ???
2025-01-22T20:11:05.4988885Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.4988957Z     ???
2025-01-22T20:11:05.4989226Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.4989298Z     ???
2025-01-22T20:11:05.4989404Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4989408Z 
2025-01-22T20:11:05.4989481Z >   ???
2025-01-22T20:11:05.4989558Z E   KeyError: 'cups'
2025-01-22T20:11:05.4989562Z 
2025-01-22T20:11:05.4989694Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.4989699Z 
2025-01-22T20:11:05.4989872Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.4989877Z 
2025-01-22T20:11:05.4990097Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.4990423Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.4991044Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.4991051Z 
2025-01-22T20:11:05.4991144Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.4991216Z     def plasma(
2025-01-22T20:11:05.4991293Z         self,
2025-01-22T20:11:05.4991373Z         chianti_he_db_fpath,
2025-01-22T20:11:05.4991447Z         config,
2025-01-22T20:11:05.4991519Z     ):
2025-01-22T20:11:05.4991627Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.4991726Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.4991730Z 
2025-01-22T20:11:05.4991853Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.4991964Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4992072Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.4992164Z     plasma = assemble_plasma(
2025-01-22T20:11:05.4992329Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.4992433Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.4992543Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.4992625Z     return BasePlasma(
2025-01-22T20:11:05.4992711Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.4992805Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.4992899Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.4992979Z     self.update(**kwargs)
2025-01-22T20:11:05.4993073Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.4993193Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.4993308Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.4993410Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.4993902Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.4994060Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.4994280Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.4994377Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.4994509Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.4994677Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.4994999Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.4995177Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.4995436Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.4995617Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.4995801Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.4995907Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.4996158Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.4996287Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.4996529Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.4996623Z     return self.apply_standard()
2025-01-22T20:11:05.4996902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.4997024Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.4997335Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.4997451Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.4997673Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.4997757Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.4998032Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.4998114Z     return self._get_value(key)
2025-01-22T20:11:05.4998375Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.4998461Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.4998577Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.4998581Z 
2025-01-22T20:11:05.4998744Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.4998970Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.4999061Z        't046000', 't048000'],
2025-01-22T20:11:05.4999146Z       dtype='object')
2025-01-22T20:11:05.4999223Z key = 'cups'
2025-01-22T20:11:05.4999228Z 
2025-01-22T20:11:05.4999307Z     def get_loc(self, key):
2025-01-22T20:11:05.4999378Z         """
2025-01-22T20:11:05.4999535Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.4999608Z     
2025-01-22T20:11:05.4999680Z         Parameters
2025-01-22T20:11:05.4999757Z         ----------
2025-01-22T20:11:05.4999827Z         key : label
2025-01-22T20:11:05.4999898Z     
2025-01-22T20:11:05.4999968Z         Returns
2025-01-22T20:11:05.5000045Z         -------
2025-01-22T20:11:05.5000183Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5000250Z     
2025-01-22T20:11:05.5000324Z         Examples
2025-01-22T20:11:05.5000394Z         --------
2025-01-22T20:11:05.5000498Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5000583Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5000656Z         1
2025-01-22T20:11:05.5000837Z     
2025-01-22T20:11:05.5000947Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5001036Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5001114Z         slice(1, 3, None)
2025-01-22T20:11:05.5001181Z     
2025-01-22T20:11:05.5001292Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5001384Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5001478Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5001545Z         """
2025-01-22T20:11:05.5001725Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5001798Z         try:
2025-01-22T20:11:05.5001895Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5001981Z         except KeyError as err:
2025-01-22T20:11:05.5002079Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5002184Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5002302Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5002379Z             ):
2025-01-22T20:11:05.5002474Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5002564Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5002643Z E           KeyError: 'cups'
2025-01-22T20:11:05.5002648Z 
2025-01-22T20:11:05.5002920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5003126Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-w] _
2025-01-22T20:11:05.5003140Z 
2025-01-22T20:11:05.5003294Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5003625Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5003703Z        't046000', 't048000'],
2025-01-22T20:11:05.5003784Z       dtype='object')
2025-01-22T20:11:05.5003855Z key = 'cups'
2025-01-22T20:11:05.5003860Z 
2025-01-22T20:11:05.5003948Z     def get_loc(self, key):
2025-01-22T20:11:05.5004016Z         """
2025-01-22T20:11:05.5004181Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5004246Z     
2025-01-22T20:11:05.5004322Z         Parameters
2025-01-22T20:11:05.5004393Z         ----------
2025-01-22T20:11:05.5004468Z         key : label
2025-01-22T20:11:05.5004533Z     
2025-01-22T20:11:05.5004606Z         Returns
2025-01-22T20:11:05.5004680Z         -------
2025-01-22T20:11:05.5004810Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5004885Z     
2025-01-22T20:11:05.5004954Z         Examples
2025-01-22T20:11:05.5005028Z         --------
2025-01-22T20:11:05.5005126Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5005215Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5005282Z         1
2025-01-22T20:11:05.5005352Z     
2025-01-22T20:11:05.5005454Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5005549Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5005623Z         slice(1, 3, None)
2025-01-22T20:11:05.5005692Z     
2025-01-22T20:11:05.5005807Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5005896Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5005990Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5006056Z         """
2025-01-22T20:11:05.5006159Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5006228Z         try:
2025-01-22T20:11:05.5006332Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5006337Z 
2025-01-22T20:11:05.5006584Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5006694Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5006834Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5006904Z     ???
2025-01-22T20:11:05.5007158Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5007226Z     ???
2025-01-22T20:11:05.5007498Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5007564Z     ???
2025-01-22T20:11:05.5007676Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5007680Z 
2025-01-22T20:11:05.5007746Z >   ???
2025-01-22T20:11:05.5007828Z E   KeyError: 'cups'
2025-01-22T20:11:05.5007832Z 
2025-01-22T20:11:05.5008066Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5008071Z 
2025-01-22T20:11:05.5008238Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5008243Z 
2025-01-22T20:11:05.5008468Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5008783Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5009409Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5009415Z 
2025-01-22T20:11:05.5009507Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5009580Z     def plasma(
2025-01-22T20:11:05.5009656Z         self,
2025-01-22T20:11:05.5009736Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5009814Z         config,
2025-01-22T20:11:05.5009880Z     ):
2025-01-22T20:11:05.5009994Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5010086Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5010090Z 
2025-01-22T20:11:05.5010216Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5010321Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5010435Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5010519Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5010687Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5010785Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5010900Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5010985Z     return BasePlasma(
2025-01-22T20:11:05.5011069Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5011160Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5011252Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5011338Z     self.update(**kwargs)
2025-01-22T20:11:05.5011425Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5011549Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5011658Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5011764Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5011960Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5012117Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5012326Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5012428Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5012557Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5012724Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5012901Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5013077Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5013340Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5013605Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5013793Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5014019Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5014278Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5014400Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5014643Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5014736Z     return self.apply_standard()
2025-01-22T20:11:05.5015009Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5015254Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5015557Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5015678Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5015893Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5015987Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5016247Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5016336Z     return self._get_value(key)
2025-01-22T20:11:05.5016591Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5016682Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5016796Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5016806Z 
2025-01-22T20:11:05.5016961Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5017171Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5017244Z        't046000', 't048000'],
2025-01-22T20:11:05.5017324Z       dtype='object')
2025-01-22T20:11:05.5017396Z key = 'cups'
2025-01-22T20:11:05.5017404Z 
2025-01-22T20:11:05.5017488Z     def get_loc(self, key):
2025-01-22T20:11:05.5017556Z         """
2025-01-22T20:11:05.5017719Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5017790Z     
2025-01-22T20:11:05.5017863Z         Parameters
2025-01-22T20:11:05.5017938Z         ----------
2025-01-22T20:11:05.5018013Z         key : label
2025-01-22T20:11:05.5018083Z     
2025-01-22T20:11:05.5018151Z         Returns
2025-01-22T20:11:05.5018225Z         -------
2025-01-22T20:11:05.5018353Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5018429Z     
2025-01-22T20:11:05.5018498Z         Examples
2025-01-22T20:11:05.5018573Z         --------
2025-01-22T20:11:05.5018669Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5018758Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5018825Z         1
2025-01-22T20:11:05.5018895Z     
2025-01-22T20:11:05.5018996Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5019093Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5019169Z         slice(1, 3, None)
2025-01-22T20:11:05.5019240Z     
2025-01-22T20:11:05.5019345Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5019441Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5019534Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5019602Z         """
2025-01-22T20:11:05.5019707Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5019774Z         try:
2025-01-22T20:11:05.5019880Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5019962Z         except KeyError as err:
2025-01-22T20:11:05.5020066Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5020164Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5020286Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5020355Z             ):
2025-01-22T20:11:05.5020539Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5020626Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5020710Z E           KeyError: 'cups'
2025-01-22T20:11:05.5020715Z 
2025-01-22T20:11:05.5020979Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5021204Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-t_rad] _
2025-01-22T20:11:05.5021209Z 
2025-01-22T20:11:05.5021367Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5021644Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5021722Z        't046000', 't048000'],
2025-01-22T20:11:05.5021796Z       dtype='object')
2025-01-22T20:11:05.5021871Z key = 'cups'
2025-01-22T20:11:05.5021876Z 
2025-01-22T20:11:05.5021955Z     def get_loc(self, key):
2025-01-22T20:11:05.5022027Z         """
2025-01-22T20:11:05.5022220Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5022292Z     
2025-01-22T20:11:05.5022369Z         Parameters
2025-01-22T20:11:05.5022439Z         ----------
2025-01-22T20:11:05.5022514Z         key : label
2025-01-22T20:11:05.5022580Z     
2025-01-22T20:11:05.5022652Z         Returns
2025-01-22T20:11:05.5022720Z         -------
2025-01-22T20:11:05.5022852Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5022917Z     
2025-01-22T20:11:05.5022995Z         Examples
2025-01-22T20:11:05.5023064Z         --------
2025-01-22T20:11:05.5023164Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5023248Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5023318Z         1
2025-01-22T20:11:05.5023384Z     
2025-01-22T20:11:05.5023605Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5023696Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5023775Z         slice(1, 3, None)
2025-01-22T20:11:05.5023845Z     
2025-01-22T20:11:05.5023956Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5024047Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5024141Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5024213Z         """
2025-01-22T20:11:05.5024312Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5024385Z         try:
2025-01-22T20:11:05.5024482Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5024490Z 
2025-01-22T20:11:05.5024738Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5024845Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5024985Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5025058Z     ???
2025-01-22T20:11:05.5025191Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5025260Z     ???
2025-01-22T20:11:05.5025530Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5025601Z     ???
2025-01-22T20:11:05.5025703Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5025708Z 
2025-01-22T20:11:05.5025777Z >   ???
2025-01-22T20:11:05.5025853Z E   KeyError: 'cups'
2025-01-22T20:11:05.5025857Z 
2025-01-22T20:11:05.5025986Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5025994Z 
2025-01-22T20:11:05.5026158Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5026163Z 
2025-01-22T20:11:05.5026386Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5026699Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5027319Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5027443Z 
2025-01-22T20:11:05.5027539Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5027613Z     def plasma(
2025-01-22T20:11:05.5027685Z         self,
2025-01-22T20:11:05.5027771Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5027843Z         config,
2025-01-22T20:11:05.5027910Z     ):
2025-01-22T20:11:05.5028025Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5028234Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5028238Z 
2025-01-22T20:11:05.5028362Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5028467Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5028577Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5028711Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5028999Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5029156Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5029322Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5029450Z     return BasePlasma(
2025-01-22T20:11:05.5029589Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5029732Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5029885Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5030017Z     self.update(**kwargs)
2025-01-22T20:11:05.5030217Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5030407Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5030626Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5030824Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5031132Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5031369Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5031713Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5031865Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5032082Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5032337Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5032619Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5032900Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5033335Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5033824Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5034141Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5034324Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5034752Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5034969Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5035369Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5035511Z     return self.apply_standard()
2025-01-22T20:11:05.5035943Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5036158Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5036747Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5036968Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5037358Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5037517Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5037993Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5038384Z     return self._get_value(key)
2025-01-22T20:11:05.5038875Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5039036Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5039243Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5039252Z 
2025-01-22T20:11:05.5039531Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5040100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5040236Z        't046000', 't048000'],
2025-01-22T20:11:05.5040376Z       dtype='object')
2025-01-22T20:11:05.5040507Z key = 'cups'
2025-01-22T20:11:05.5040516Z 
2025-01-22T20:11:05.5040657Z     def get_loc(self, key):
2025-01-22T20:11:05.5040784Z         """
2025-01-22T20:11:05.5041069Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5041189Z     
2025-01-22T20:11:05.5041318Z         Parameters
2025-01-22T20:11:05.5041448Z         ----------
2025-01-22T20:11:05.5041573Z         key : label
2025-01-22T20:11:05.5041690Z     
2025-01-22T20:11:05.5041811Z         Returns
2025-01-22T20:11:05.5041940Z         -------
2025-01-22T20:11:05.5042180Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5042300Z     
2025-01-22T20:11:05.5042432Z         Examples
2025-01-22T20:11:05.5042559Z         --------
2025-01-22T20:11:05.5042728Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5042889Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5043009Z         1
2025-01-22T20:11:05.5043130Z     
2025-01-22T20:11:05.5043318Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5043469Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5043819Z         slice(1, 3, None)
2025-01-22T20:11:05.5043939Z     
2025-01-22T20:11:05.5044143Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5044306Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5044473Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5044593Z         """
2025-01-22T20:11:05.5044775Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5044894Z         try:
2025-01-22T20:11:05.5045076Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5045235Z         except KeyError as err:
2025-01-22T20:11:05.5045416Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5045584Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5045805Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5045933Z             ):
2025-01-22T20:11:05.5046111Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5046276Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5046435Z E           KeyError: 'cups'
2025-01-22T20:11:05.5046443Z 
2025-01-22T20:11:05.5046959Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5047412Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_electron] _
2025-01-22T20:11:05.5047424Z 
2025-01-22T20:11:05.5047718Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5048098Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5048240Z        't046000', 't048000'],
2025-01-22T20:11:05.5048368Z       dtype='object')
2025-01-22T20:11:05.5048494Z key = 'cups'
2025-01-22T20:11:05.5048502Z 
2025-01-22T20:11:05.5048640Z     def get_loc(self, key):
2025-01-22T20:11:05.5048758Z         """
2025-01-22T20:11:05.5049053Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5049435Z     
2025-01-22T20:11:05.5049584Z         Parameters
2025-01-22T20:11:05.5049720Z         ----------
2025-01-22T20:11:05.5049862Z         key : label
2025-01-22T20:11:05.5049978Z     
2025-01-22T20:11:05.5050113Z         Returns
2025-01-22T20:11:05.5050245Z         -------
2025-01-22T20:11:05.5050504Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5050625Z     
2025-01-22T20:11:05.5050756Z         Examples
2025-01-22T20:11:05.5050887Z         --------
2025-01-22T20:11:05.5051281Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5051432Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5051556Z         1
2025-01-22T20:11:05.5051671Z     
2025-01-22T20:11:05.5051864Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5052034Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5052174Z         slice(1, 3, None)
2025-01-22T20:11:05.5052301Z     
2025-01-22T20:11:05.5052502Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5052675Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5052832Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5052956Z         """
2025-01-22T20:11:05.5053136Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5053264Z         try:
2025-01-22T20:11:05.5053442Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5053451Z 
2025-01-22T20:11:05.5054129Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5054343Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5054606Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5054735Z     ???
2025-01-22T20:11:05.5054972Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5055096Z     ???
2025-01-22T20:11:05.5055595Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5055732Z     ???
2025-01-22T20:11:05.5055927Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5055937Z 
2025-01-22T20:11:05.5056067Z >   ???
2025-01-22T20:11:05.5056213Z E   KeyError: 'cups'
2025-01-22T20:11:05.5056224Z 
2025-01-22T20:11:05.5056475Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5056486Z 
2025-01-22T20:11:05.5056792Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5056820Z 
2025-01-22T20:11:05.5057218Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5057813Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5058945Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5058981Z 
2025-01-22T20:11:05.5059161Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5059289Z     def plasma(
2025-01-22T20:11:05.5059421Z         self,
2025-01-22T20:11:05.5059507Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5059582Z         config,
2025-01-22T20:11:05.5059649Z     ):
2025-01-22T20:11:05.5059780Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5059886Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5059896Z 
2025-01-22T20:11:05.5060030Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5060154Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5060266Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5060356Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5060529Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5060822Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5060942Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5061028Z     return BasePlasma(
2025-01-22T20:11:05.5061116Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5061214Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5061311Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5061400Z     self.update(**kwargs)
2025-01-22T20:11:05.5061494Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5061726Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5061851Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5061956Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5062168Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5062323Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5062538Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5062640Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5062773Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5062942Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5063118Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5063289Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5063765Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5063966Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5064154Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5064263Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5064525Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5064660Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5064902Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5064996Z     return self.apply_standard()
2025-01-22T20:11:05.5065273Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5065401Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5065714Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5065838Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5066060Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5066145Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5066415Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5066500Z     return self._get_value(key)
2025-01-22T20:11:05.5066764Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5066849Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5066967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5066972Z 
2025-01-22T20:11:05.5067129Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5067345Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5067428Z        't046000', 't048000'],
2025-01-22T20:11:05.5067502Z       dtype='object')
2025-01-22T20:11:05.5067579Z key = 'cups'
2025-01-22T20:11:05.5067583Z 
2025-01-22T20:11:05.5067662Z     def get_loc(self, key):
2025-01-22T20:11:05.5067735Z         """
2025-01-22T20:11:05.5067891Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5068095Z     
2025-01-22T20:11:05.5068169Z         Parameters
2025-01-22T20:11:05.5068247Z         ----------
2025-01-22T20:11:05.5068321Z         key : label
2025-01-22T20:11:05.5068399Z     
2025-01-22T20:11:05.5068469Z         Returns
2025-01-22T20:11:05.5068544Z         -------
2025-01-22T20:11:05.5068680Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5068751Z     
2025-01-22T20:11:05.5068825Z         Examples
2025-01-22T20:11:05.5068895Z         --------
2025-01-22T20:11:05.5069103Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5069191Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5069263Z         1
2025-01-22T20:11:05.5069329Z     
2025-01-22T20:11:05.5069440Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5069528Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5069608Z         slice(1, 3, None)
2025-01-22T20:11:05.5069673Z     
2025-01-22T20:11:05.5069790Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5069883Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5069978Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5070044Z         """
2025-01-22T20:11:05.5070150Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5070218Z         try:
2025-01-22T20:11:05.5070321Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5070407Z         except KeyError as err:
2025-01-22T20:11:05.5070505Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5070613Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5070734Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5070806Z             ):
2025-01-22T20:11:05.5070899Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5070990Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5071070Z E           KeyError: 'cups'
2025-01-22T20:11:05.5071078Z 
2025-01-22T20:11:05.5071354Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5071627Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-level_boltzmann_factor] _
2025-01-22T20:11:05.5071632Z 
2025-01-22T20:11:05.5071790Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5072001Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5072080Z        't046000', 't048000'],
2025-01-22T20:11:05.5072159Z       dtype='object')
2025-01-22T20:11:05.5072232Z key = 'cups'
2025-01-22T20:11:05.5072236Z 
2025-01-22T20:11:05.5072320Z     def get_loc(self, key):
2025-01-22T20:11:05.5072388Z         """
2025-01-22T20:11:05.5072548Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5072613Z     
2025-01-22T20:11:05.5072691Z         Parameters
2025-01-22T20:11:05.5072766Z         ----------
2025-01-22T20:11:05.5072842Z         key : label
2025-01-22T20:11:05.5072907Z     
2025-01-22T20:11:05.5072982Z         Returns
2025-01-22T20:11:05.5073051Z         -------
2025-01-22T20:11:05.5073184Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5073250Z     
2025-01-22T20:11:05.5073327Z         Examples
2025-01-22T20:11:05.5073401Z         --------
2025-01-22T20:11:05.5073686Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5073785Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5073854Z         1
2025-01-22T20:11:05.5073924Z     
2025-01-22T20:11:05.5074221Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5074341Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5074416Z         slice(1, 3, None)
2025-01-22T20:11:05.5074486Z     
2025-01-22T20:11:05.5074593Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5074832Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5074922Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5074993Z         """
2025-01-22T20:11:05.5075095Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5075168Z         try:
2025-01-22T20:11:05.5075266Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5075277Z 
2025-01-22T20:11:05.5075528Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5075784Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5075922Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5075994Z     ???
2025-01-22T20:11:05.5076123Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5076193Z     ???
2025-01-22T20:11:05.5076462Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5076539Z     ???
2025-01-22T20:11:05.5076643Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5076648Z 
2025-01-22T20:11:05.5076718Z >   ???
2025-01-22T20:11:05.5076796Z E   KeyError: 'cups'
2025-01-22T20:11:05.5076806Z 
2025-01-22T20:11:05.5076933Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5076938Z 
2025-01-22T20:11:05.5077116Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5077121Z 
2025-01-22T20:11:05.5077343Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5077675Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5078301Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5078310Z 
2025-01-22T20:11:05.5078408Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5078486Z     def plasma(
2025-01-22T20:11:05.5078555Z         self,
2025-01-22T20:11:05.5078640Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5078708Z         config,
2025-01-22T20:11:05.5078785Z     ):
2025-01-22T20:11:05.5078898Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5078997Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5079002Z 
2025-01-22T20:11:05.5079128Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5079238Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5079345Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5079435Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5079600Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5079704Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5079817Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5079901Z     return BasePlasma(
2025-01-22T20:11:05.5079994Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5080082Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5080175Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5080254Z     self.update(**kwargs)
2025-01-22T20:11:05.5080349Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5080470Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5080588Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5080691Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5080895Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5081045Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5081260Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5081466Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5081600Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5081771Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5081942Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5082119Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5082375Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5082625Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5082806Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5082914Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5083168Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5083297Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5083719Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5083842Z     return self.apply_standard()
2025-01-22T20:11:05.5084133Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5084255Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5084566Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5084689Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5084909Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5084995Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5085266Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5085348Z     return self._get_value(key)
2025-01-22T20:11:05.5085614Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5085705Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5085813Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5085817Z 
2025-01-22T20:11:05.5085977Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5086182Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5086263Z        't046000', 't048000'],
2025-01-22T20:11:05.5086338Z       dtype='object')
2025-01-22T20:11:05.5086414Z key = 'cups'
2025-01-22T20:11:05.5086419Z 
2025-01-22T20:11:05.5086497Z     def get_loc(self, key):
2025-01-22T20:11:05.5086569Z         """
2025-01-22T20:11:05.5086725Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5086796Z     
2025-01-22T20:11:05.5086872Z         Parameters
2025-01-22T20:11:05.5086951Z         ----------
2025-01-22T20:11:05.5087028Z         key : label
2025-01-22T20:11:05.5087093Z     
2025-01-22T20:11:05.5087166Z         Returns
2025-01-22T20:11:05.5087236Z         -------
2025-01-22T20:11:05.5087373Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5087439Z     
2025-01-22T20:11:05.5087515Z         Examples
2025-01-22T20:11:05.5087585Z         --------
2025-01-22T20:11:05.5087688Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5087779Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5087851Z         1
2025-01-22T20:11:05.5087917Z     
2025-01-22T20:11:05.5088025Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5088113Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5088198Z         slice(1, 3, None)
2025-01-22T20:11:05.5088267Z     
2025-01-22T20:11:05.5088377Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5088592Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5088688Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5088764Z         """
2025-01-22T20:11:05.5088865Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5088937Z         try:
2025-01-22T20:11:05.5089034Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5089120Z         except KeyError as err:
2025-01-22T20:11:05.5089216Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5089321Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5089541Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5089613Z             ):
2025-01-22T20:11:05.5089703Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5089794Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5089874Z E           KeyError: 'cups'
2025-01-22T20:11:05.5089879Z 
2025-01-22T20:11:05.5090150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5090417Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-partition_function] _
2025-01-22T20:11:05.5090422Z 
2025-01-22T20:11:05.5090575Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5090784Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5090858Z        't046000', 't048000'],
2025-01-22T20:11:05.5090941Z       dtype='object')
2025-01-22T20:11:05.5091012Z key = 'cups'
2025-01-22T20:11:05.5091016Z 
2025-01-22T20:11:05.5091099Z     def get_loc(self, key):
2025-01-22T20:11:05.5091166Z         """
2025-01-22T20:11:05.5091329Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5091394Z     
2025-01-22T20:11:05.5091470Z         Parameters
2025-01-22T20:11:05.5091546Z         ----------
2025-01-22T20:11:05.5091620Z         key : label
2025-01-22T20:11:05.5091692Z     
2025-01-22T20:11:05.5091760Z         Returns
2025-01-22T20:11:05.5091834Z         -------
2025-01-22T20:11:05.5091966Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5092037Z     
2025-01-22T20:11:05.5092106Z         Examples
2025-01-22T20:11:05.5092180Z         --------
2025-01-22T20:11:05.5092273Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5092364Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5092430Z         1
2025-01-22T20:11:05.5092503Z     
2025-01-22T20:11:05.5092602Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5092695Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5092770Z         slice(1, 3, None)
2025-01-22T20:11:05.5092841Z     
2025-01-22T20:11:05.5092946Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5093039Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5093132Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5093201Z         """
2025-01-22T20:11:05.5093304Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5093373Z         try:
2025-01-22T20:11:05.5093474Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5093479Z 
2025-01-22T20:11:05.5093891Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5094007Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5094148Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5094222Z     ???
2025-01-22T20:11:05.5094348Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5094420Z     ???
2025-01-22T20:11:05.5094685Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5094756Z     ???
2025-01-22T20:11:05.5094864Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5094988Z 
2025-01-22T20:11:05.5095057Z >   ???
2025-01-22T20:11:05.5095139Z E   KeyError: 'cups'
2025-01-22T20:11:05.5095143Z 
2025-01-22T20:11:05.5095269Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5095274Z 
2025-01-22T20:11:05.5095443Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5095448Z 
2025-01-22T20:11:05.5095669Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5096092Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5096716Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5096727Z 
2025-01-22T20:11:05.5096820Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5096896Z     def plasma(
2025-01-22T20:11:05.5096964Z         self,
2025-01-22T20:11:05.5097050Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5097118Z         config,
2025-01-22T20:11:05.5097188Z     ):
2025-01-22T20:11:05.5097298Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5097396Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5097400Z 
2025-01-22T20:11:05.5097520Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5097631Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5097732Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5097823Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5097990Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5098086Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5098199Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5098281Z     return BasePlasma(
2025-01-22T20:11:05.5098372Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5098457Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5098557Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5098636Z     self.update(**kwargs)
2025-01-22T20:11:05.5098731Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5098850Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5098964Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5099068Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5099271Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5099427Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5099634Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5099735Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5099861Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5100033Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5100201Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5100376Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5100633Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5100812Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5100997Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5101104Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5101362Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5101485Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5101730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5101902Z     return self.apply_standard()
2025-01-22T20:11:05.5102182Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5102302Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5102609Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5102728Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5103038Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5103124Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5103391Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5103480Z     return self._get_value(key)
2025-01-22T20:11:05.5103918Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5104016Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5104126Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5104133Z 
2025-01-22T20:11:05.5104299Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5104508Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5104588Z        't046000', 't048000'],
2025-01-22T20:11:05.5104669Z       dtype='object')
2025-01-22T20:11:05.5104747Z key = 'cups'
2025-01-22T20:11:05.5104752Z 
2025-01-22T20:11:05.5104838Z     def get_loc(self, key):
2025-01-22T20:11:05.5104905Z         """
2025-01-22T20:11:05.5105066Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5105141Z     
2025-01-22T20:11:05.5105219Z         Parameters
2025-01-22T20:11:05.5105289Z         ----------
2025-01-22T20:11:05.5105370Z         key : label
2025-01-22T20:11:05.5105436Z     
2025-01-22T20:11:05.5105509Z         Returns
2025-01-22T20:11:05.5105578Z         -------
2025-01-22T20:11:05.5105713Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5105778Z     
2025-01-22T20:11:05.5105852Z         Examples
2025-01-22T20:11:05.5105923Z         --------
2025-01-22T20:11:05.5106027Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5106112Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5106187Z         1
2025-01-22T20:11:05.5106252Z     
2025-01-22T20:11:05.5106361Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5106454Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5106530Z         slice(1, 3, None)
2025-01-22T20:11:05.5106601Z     
2025-01-22T20:11:05.5106706Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5106800Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5106893Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5106966Z         """
2025-01-22T20:11:05.5107066Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5107139Z         try:
2025-01-22T20:11:05.5107238Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5107323Z         except KeyError as err:
2025-01-22T20:11:05.5107418Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5107522Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5107638Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5107715Z             ):
2025-01-22T20:11:05.5107806Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5107896Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5107984Z E           KeyError: 'cups'
2025-01-22T20:11:05.5107989Z 
2025-01-22T20:11:05.5108262Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5108645Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-excitation_energy] _
2025-01-22T20:11:05.5108650Z 
2025-01-22T20:11:05.5108802Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5109015Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5109089Z        't046000', 't048000'],
2025-01-22T20:11:05.5109170Z       dtype='object')
2025-01-22T20:11:05.5109240Z key = 'cups'
2025-01-22T20:11:05.5109349Z 
2025-01-22T20:11:05.5109428Z     def get_loc(self, key):
2025-01-22T20:11:05.5109500Z         """
2025-01-22T20:11:05.5109658Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5109728Z     
2025-01-22T20:11:05.5109801Z         Parameters
2025-01-22T20:11:05.5109876Z         ----------
2025-01-22T20:11:05.5109948Z         key : label
2025-01-22T20:11:05.5110021Z     
2025-01-22T20:11:05.5110092Z         Returns
2025-01-22T20:11:05.5110167Z         -------
2025-01-22T20:11:05.5110295Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5110366Z     
2025-01-22T20:11:05.5110436Z         Examples
2025-01-22T20:11:05.5110510Z         --------
2025-01-22T20:11:05.5110605Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5110695Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5110763Z         1
2025-01-22T20:11:05.5110834Z     
2025-01-22T20:11:05.5110933Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5111027Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5111108Z         slice(1, 3, None)
2025-01-22T20:11:05.5111174Z     
2025-01-22T20:11:05.5111285Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5111373Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5111467Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5111534Z         """
2025-01-22T20:11:05.5111643Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5111712Z         try:
2025-01-22T20:11:05.5111813Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5111818Z 
2025-01-22T20:11:05.5112064Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5112179Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5112319Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5112395Z     ???
2025-01-22T20:11:05.5112532Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5112600Z     ???
2025-01-22T20:11:05.5112875Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5112941Z     ???
2025-01-22T20:11:05.5113054Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5113059Z 
2025-01-22T20:11:05.5113128Z >   ???
2025-01-22T20:11:05.5113209Z E   KeyError: 'cups'
2025-01-22T20:11:05.5113214Z 
2025-01-22T20:11:05.5113341Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5113345Z 
2025-01-22T20:11:05.5113710Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5113718Z 
2025-01-22T20:11:05.5113951Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5114271Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5114901Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5114906Z 
2025-01-22T20:11:05.5114994Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5115072Z     def plasma(
2025-01-22T20:11:05.5115269Z         self,
2025-01-22T20:11:05.5115358Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5115426Z         config,
2025-01-22T20:11:05.5115497Z     ):
2025-01-22T20:11:05.5115610Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5115711Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5115716Z 
2025-01-22T20:11:05.5115844Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5115951Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5116162Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5116246Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5116419Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5116518Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5116633Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5116711Z     return BasePlasma(
2025-01-22T20:11:05.5116801Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5116892Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5116989Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5117069Z     self.update(**kwargs)
2025-01-22T20:11:05.5117162Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5117287Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5117398Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5117504Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5117707Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5117865Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5118076Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5118176Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5118301Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5118473Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5118646Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5118822Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5119078Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5119255Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5119442Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5119548Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5119808Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5119933Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5120181Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5120273Z     return self.apply_standard()
2025-01-22T20:11:05.5120555Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5120675Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5120986Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5121108Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5121324Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5121418Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5121681Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5121768Z     return self._get_value(key)
2025-01-22T20:11:05.5122026Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5122118Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5122345Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5122350Z 
2025-01-22T20:11:05.5122515Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5122728Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5122803Z        't046000', 't048000'],
2025-01-22T20:11:05.5122883Z       dtype='object')
2025-01-22T20:11:05.5123027Z key = 'cups'
2025-01-22T20:11:05.5123032Z 
2025-01-22T20:11:05.5123116Z     def get_loc(self, key):
2025-01-22T20:11:05.5123185Z         """
2025-01-22T20:11:05.5123348Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5123415Z     
2025-01-22T20:11:05.5123663Z         Parameters
2025-01-22T20:11:05.5123797Z         ----------
2025-01-22T20:11:05.5123931Z         key : label
2025-01-22T20:11:05.5124055Z     
2025-01-22T20:11:05.5124205Z         Returns
2025-01-22T20:11:05.5124292Z         -------
2025-01-22T20:11:05.5124431Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5124497Z     
2025-01-22T20:11:05.5124573Z         Examples
2025-01-22T20:11:05.5124648Z         --------
2025-01-22T20:11:05.5124748Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5124840Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5124908Z         1
2025-01-22T20:11:05.5124978Z     
2025-01-22T20:11:05.5125082Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5125181Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5125256Z         slice(1, 3, None)
2025-01-22T20:11:05.5125327Z     
2025-01-22T20:11:05.5125434Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5125531Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5125623Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5125695Z         """
2025-01-22T20:11:05.5125798Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5125872Z         try:
2025-01-22T20:11:05.5125971Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5126057Z         except KeyError as err:
2025-01-22T20:11:05.5126159Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5126258Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5126380Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5126453Z             ):
2025-01-22T20:11:05.5126549Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5126637Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5126721Z E           KeyError: 'cups'
2025-01-22T20:11:05.5126726Z 
2025-01-22T20:11:05.5126993Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5127219Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines] _
2025-01-22T20:11:05.5127229Z 
2025-01-22T20:11:05.5127383Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5127595Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5127675Z        't046000', 't048000'],
2025-01-22T20:11:05.5127748Z       dtype='object')
2025-01-22T20:11:05.5127824Z key = 'cups'
2025-01-22T20:11:05.5127828Z 
2025-01-22T20:11:05.5127906Z     def get_loc(self, key):
2025-01-22T20:11:05.5127980Z         """
2025-01-22T20:11:05.5128139Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5128209Z     
2025-01-22T20:11:05.5128281Z         Parameters
2025-01-22T20:11:05.5128355Z         ----------
2025-01-22T20:11:05.5128426Z         key : label
2025-01-22T20:11:05.5128496Z     
2025-01-22T20:11:05.5128565Z         Returns
2025-01-22T20:11:05.5128641Z         -------
2025-01-22T20:11:05.5128911Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5128985Z     
2025-01-22T20:11:05.5129053Z         Examples
2025-01-22T20:11:05.5129129Z         --------
2025-01-22T20:11:05.5129228Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5129312Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5129383Z         1
2025-01-22T20:11:05.5129449Z     
2025-01-22T20:11:05.5129552Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5129637Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5129840Z         slice(1, 3, None)
2025-01-22T20:11:05.5129907Z     
2025-01-22T20:11:05.5130016Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5130106Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5130200Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5130267Z         """
2025-01-22T20:11:05.5130371Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5130443Z         try:
2025-01-22T20:11:05.5130546Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5130550Z 
2025-01-22T20:11:05.5130798Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5130905Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5131045Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5131112Z     ???
2025-01-22T20:11:05.5131245Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5131315Z     ???
2025-01-22T20:11:05.5131589Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5131657Z     ???
2025-01-22T20:11:05.5131765Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5131769Z 
2025-01-22T20:11:05.5131834Z >   ???
2025-01-22T20:11:05.5131917Z E   KeyError: 'cups'
2025-01-22T20:11:05.5131925Z 
2025-01-22T20:11:05.5132051Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5132062Z 
2025-01-22T20:11:05.5132228Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5132233Z 
2025-01-22T20:11:05.5132461Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5132782Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5133409Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5133419Z 
2025-01-22T20:11:05.5133656Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5133738Z     def plasma(
2025-01-22T20:11:05.5133812Z         self,
2025-01-22T20:11:05.5133895Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5133972Z         config,
2025-01-22T20:11:05.5134039Z     ):
2025-01-22T20:11:05.5134155Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5134249Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5134254Z 
2025-01-22T20:11:05.5134379Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5134483Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5134591Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5134677Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5134844Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5134944Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5135057Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5135134Z     return BasePlasma(
2025-01-22T20:11:05.5135223Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5135315Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5135526Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5135610Z     self.update(**kwargs)
2025-01-22T20:11:05.5135698Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5135824Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5135933Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5136041Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5136241Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5136500Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5136711Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5136812Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5136938Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5137111Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5137286Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5137460Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5137723Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5137894Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5138077Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5138179Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5138448Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5138572Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5138819Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5138905Z     return self.apply_standard()
2025-01-22T20:11:05.5139184Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5139309Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5139614Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5139734Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5139946Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5140040Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5140307Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5140394Z     return self._get_value(key)
2025-01-22T20:11:05.5140648Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5140742Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5140853Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5140861Z 
2025-01-22T20:11:05.5141016Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5141230Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5141305Z        't046000', 't048000'],
2025-01-22T20:11:05.5141386Z       dtype='object')
2025-01-22T20:11:05.5141457Z key = 'cups'
2025-01-22T20:11:05.5141461Z 
2025-01-22T20:11:05.5141546Z     def get_loc(self, key):
2025-01-22T20:11:05.5141616Z         """
2025-01-22T20:11:05.5141780Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5141848Z     
2025-01-22T20:11:05.5141927Z         Parameters
2025-01-22T20:11:05.5141999Z         ----------
2025-01-22T20:11:05.5142075Z         key : label
2025-01-22T20:11:05.5142148Z     
2025-01-22T20:11:05.5142217Z         Returns
2025-01-22T20:11:05.5142293Z         -------
2025-01-22T20:11:05.5142542Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5142613Z     
2025-01-22T20:11:05.5142681Z         Examples
2025-01-22T20:11:05.5142756Z         --------
2025-01-22T20:11:05.5142853Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5142943Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5143011Z         1
2025-01-22T20:11:05.5143082Z     
2025-01-22T20:11:05.5143183Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5143276Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5143427Z         slice(1, 3, None)
2025-01-22T20:11:05.5143618Z     
2025-01-22T20:11:05.5143727Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5143823Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5143912Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5143985Z         """
2025-01-22T20:11:05.5144091Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5144163Z         try:
2025-01-22T20:11:05.5144266Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5144347Z         except KeyError as err:
2025-01-22T20:11:05.5144449Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5144546Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5144670Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5144738Z             ):
2025-01-22T20:11:05.5144832Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5144920Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5145005Z E           KeyError: 'cups'
2025-01-22T20:11:05.5145009Z 
2025-01-22T20:11:05.5145273Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5145551Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] _
2025-01-22T20:11:05.5145556Z 
2025-01-22T20:11:05.5145716Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5145926Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5146006Z        't046000', 't048000'],
2025-01-22T20:11:05.5146080Z       dtype='object')
2025-01-22T20:11:05.5146156Z key = 'cups'
2025-01-22T20:11:05.5146161Z 
2025-01-22T20:11:05.5146238Z     def get_loc(self, key):
2025-01-22T20:11:05.5150288Z         """
2025-01-22T20:11:05.5150501Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5150585Z     
2025-01-22T20:11:05.5150664Z         Parameters
2025-01-22T20:11:05.5150746Z         ----------
2025-01-22T20:11:05.5150818Z         key : label
2025-01-22T20:11:05.5150890Z     
2025-01-22T20:11:05.5150960Z         Returns
2025-01-22T20:11:05.5151041Z         -------
2025-01-22T20:11:05.5151187Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5151266Z     
2025-01-22T20:11:05.5151344Z         Examples
2025-01-22T20:11:05.5151416Z         --------
2025-01-22T20:11:05.5151526Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5151613Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5151688Z         1
2025-01-22T20:11:05.5151754Z     
2025-01-22T20:11:05.5151866Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5151956Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5152042Z         slice(1, 3, None)
2025-01-22T20:11:05.5152113Z     
2025-01-22T20:11:05.5152237Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5152333Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5152431Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5152500Z         """
2025-01-22T20:11:05.5152609Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5152678Z         try:
2025-01-22T20:11:05.5152785Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5152942Z 
2025-01-22T20:11:05.5153215Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5153335Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5153486Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5153870Z     ???
2025-01-22T20:11:05.5154020Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5154088Z     ???
2025-01-22T20:11:05.5154517Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5154586Z     ???
2025-01-22T20:11:05.5154701Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5154706Z 
2025-01-22T20:11:05.5154772Z >   ???
2025-01-22T20:11:05.5154855Z E   KeyError: 'cups'
2025-01-22T20:11:05.5154860Z 
2025-01-22T20:11:05.5154997Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5155021Z 
2025-01-22T20:11:05.5155196Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5155200Z 
2025-01-22T20:11:05.5155430Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5155758Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5156399Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5156409Z 
2025-01-22T20:11:05.5156507Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5156582Z     def plasma(
2025-01-22T20:11:05.5156658Z         self,
2025-01-22T20:11:05.5156740Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5156815Z         config,
2025-01-22T20:11:05.5156887Z     ):
2025-01-22T20:11:05.5157010Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5157109Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5157114Z 
2025-01-22T20:11:05.5157247Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5157359Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5157474Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5157559Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5157741Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5157842Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5157962Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5158050Z     return BasePlasma(
2025-01-22T20:11:05.5158137Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5158230Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5158319Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5158411Z     self.update(**kwargs)
2025-01-22T20:11:05.5158502Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5158630Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5158740Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5158850Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5159052Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5159210Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5159423Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5159527Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5159661Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5159830Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5160010Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5160306Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5160574Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5160749Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5160935Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5161039Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5161303Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5161507Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5161759Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5161858Z     return self.apply_standard()
2025-01-22T20:11:05.5162135Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5162271Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5162578Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5162704Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5162923Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5163021Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5163286Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5163379Z     return self._get_value(key)
2025-01-22T20:11:05.5163776Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5163873Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5163993Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5163998Z 
2025-01-22T20:11:05.5164162Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5164380Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5164458Z        't046000', 't048000'],
2025-01-22T20:11:05.5164540Z       dtype='object')
2025-01-22T20:11:05.5164618Z key = 'cups'
2025-01-22T20:11:05.5164624Z 
2025-01-22T20:11:05.5164709Z     def get_loc(self, key):
2025-01-22T20:11:05.5164779Z         """
2025-01-22T20:11:05.5164946Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5165017Z     
2025-01-22T20:11:05.5165097Z         Parameters
2025-01-22T20:11:05.5165179Z         ----------
2025-01-22T20:11:05.5165252Z         key : label
2025-01-22T20:11:05.5165323Z     
2025-01-22T20:11:05.5165393Z         Returns
2025-01-22T20:11:05.5165469Z         -------
2025-01-22T20:11:05.5165603Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5165678Z     
2025-01-22T20:11:05.5165749Z         Examples
2025-01-22T20:11:05.5165825Z         --------
2025-01-22T20:11:05.5165928Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5166020Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5166087Z         1
2025-01-22T20:11:05.5166152Z     
2025-01-22T20:11:05.5166263Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5166357Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5166433Z         slice(1, 3, None)
2025-01-22T20:11:05.5166508Z     
2025-01-22T20:11:05.5166617Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5166713Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5166803Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5166874Z         """
2025-01-22T20:11:05.5166977Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5167049Z         try:
2025-01-22T20:11:05.5167149Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5167358Z         except KeyError as err:
2025-01-22T20:11:05.5167456Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5167563Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5167684Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5167757Z             ):
2025-01-22T20:11:05.5167848Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5167939Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5168125Z E           KeyError: 'cups'
2025-01-22T20:11:05.5168129Z 
2025-01-22T20:11:05.5168407Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5168682Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] _
2025-01-22T20:11:05.5168687Z 
2025-01-22T20:11:05.5168842Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5169058Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5169133Z        't046000', 't048000'],
2025-01-22T20:11:05.5169214Z       dtype='object')
2025-01-22T20:11:05.5169285Z key = 'cups'
2025-01-22T20:11:05.5169295Z 
2025-01-22T20:11:05.5169374Z     def get_loc(self, key):
2025-01-22T20:11:05.5169447Z         """
2025-01-22T20:11:05.5169604Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5169679Z     
2025-01-22T20:11:05.5169750Z         Parameters
2025-01-22T20:11:05.5169828Z         ----------
2025-01-22T20:11:05.5169901Z         key : label
2025-01-22T20:11:05.5169971Z     
2025-01-22T20:11:05.5170038Z         Returns
2025-01-22T20:11:05.5170113Z         -------
2025-01-22T20:11:05.5170246Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5170317Z     
2025-01-22T20:11:05.5170386Z         Examples
2025-01-22T20:11:05.5170463Z         --------
2025-01-22T20:11:05.5170561Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5170651Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5170719Z         1
2025-01-22T20:11:05.5170790Z     
2025-01-22T20:11:05.5170890Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5170982Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5171063Z         slice(1, 3, None)
2025-01-22T20:11:05.5171131Z     
2025-01-22T20:11:05.5171241Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5171335Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5171431Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5171499Z         """
2025-01-22T20:11:05.5171603Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5171672Z         try:
2025-01-22T20:11:05.5171773Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5171778Z 
2025-01-22T20:11:05.5172026Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5172147Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5172286Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5172360Z     ???
2025-01-22T20:11:05.5172494Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5172560Z     ???
2025-01-22T20:11:05.5172833Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5172904Z     ???
2025-01-22T20:11:05.5173015Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5173020Z 
2025-01-22T20:11:05.5173085Z >   ???
2025-01-22T20:11:05.5173166Z E   KeyError: 'cups'
2025-01-22T20:11:05.5173171Z 
2025-01-22T20:11:05.5173299Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5173303Z 
2025-01-22T20:11:05.5173660Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5173666Z 
2025-01-22T20:11:05.5173898Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5174220Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5174848Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5174962Z 
2025-01-22T20:11:05.5175054Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5175133Z     def plasma(
2025-01-22T20:11:05.5175205Z         self,
2025-01-22T20:11:05.5175290Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5175361Z         config,
2025-01-22T20:11:05.5175434Z     ):
2025-01-22T20:11:05.5175545Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5175650Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5175655Z 
2025-01-22T20:11:05.5175780Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5175886Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5175997Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5176081Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5176253Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5176360Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5176483Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5176562Z     return BasePlasma(
2025-01-22T20:11:05.5176653Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5176742Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5176837Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5176919Z     self.update(**kwargs)
2025-01-22T20:11:05.5177017Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5177151Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5177271Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5177381Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5177585Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5177745Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5177961Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5178065Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5178192Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5178363Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5178534Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5178712Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5178981Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5179155Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5179340Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5179444Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5179708Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5179835Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5180081Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5180169Z     return self.apply_standard()
2025-01-22T20:11:05.5180453Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5180571Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5181016Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5181142Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5181360Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5181451Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5181716Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5181878Z     return self._get_value(key)
2025-01-22T20:11:05.5182136Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5182230Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5182342Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5182347Z 
2025-01-22T20:11:05.5182514Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5182732Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5182807Z        't046000', 't048000'],
2025-01-22T20:11:05.5182886Z       dtype='object')
2025-01-22T20:11:05.5182959Z key = 'cups'
2025-01-22T20:11:05.5182963Z 
2025-01-22T20:11:05.5183048Z     def get_loc(self, key):
2025-01-22T20:11:05.5183116Z         """
2025-01-22T20:11:05.5183278Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5183349Z     
2025-01-22T20:11:05.5183427Z         Parameters
2025-01-22T20:11:05.5183596Z         ----------
2025-01-22T20:11:05.5183675Z         key : label
2025-01-22T20:11:05.5183744Z     
2025-01-22T20:11:05.5183818Z         Returns
2025-01-22T20:11:05.5183889Z         -------
2025-01-22T20:11:05.5184025Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5184092Z     
2025-01-22T20:11:05.5184172Z         Examples
2025-01-22T20:11:05.5184252Z         --------
2025-01-22T20:11:05.5184351Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5184441Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5184511Z         1
2025-01-22T20:11:05.5184582Z     
2025-01-22T20:11:05.5184689Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5184782Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5184858Z         slice(1, 3, None)
2025-01-22T20:11:05.5184930Z     
2025-01-22T20:11:05.5185037Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5185135Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5185227Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5185300Z         """
2025-01-22T20:11:05.5185402Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5185476Z         try:
2025-01-22T20:11:05.5185575Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5185669Z         except KeyError as err:
2025-01-22T20:11:05.5185775Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5185875Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5185999Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5186067Z             ):
2025-01-22T20:11:05.5186163Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5186250Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5186339Z E           KeyError: 'cups'
2025-01-22T20:11:05.5186344Z 
2025-01-22T20:11:05.5186613Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5186858Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-atomic_mass] _
2025-01-22T20:11:05.5186864Z 
2025-01-22T20:11:05.5187019Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5187232Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5187431Z        't046000', 't048000'],
2025-01-22T20:11:05.5187506Z       dtype='object')
2025-01-22T20:11:05.5187583Z key = 'cups'
2025-01-22T20:11:05.5187588Z 
2025-01-22T20:11:05.5187666Z     def get_loc(self, key):
2025-01-22T20:11:05.5187741Z         """
2025-01-22T20:11:05.5187900Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5187971Z     
2025-01-22T20:11:05.5188043Z         Parameters
2025-01-22T20:11:05.5188220Z         ----------
2025-01-22T20:11:05.5188292Z         key : label
2025-01-22T20:11:05.5188363Z     
2025-01-22T20:11:05.5188439Z         Returns
2025-01-22T20:11:05.5188512Z         -------
2025-01-22T20:11:05.5188642Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5188713Z     
2025-01-22T20:11:05.5188782Z         Examples
2025-01-22T20:11:05.5188859Z         --------
2025-01-22T20:11:05.5188960Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5189048Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5189120Z         1
2025-01-22T20:11:05.5189186Z     
2025-01-22T20:11:05.5189294Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5189381Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5189463Z         slice(1, 3, None)
2025-01-22T20:11:05.5189530Z     
2025-01-22T20:11:05.5189641Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5189731Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5189828Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5189895Z         """
2025-01-22T20:11:05.5189998Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5190069Z         try:
2025-01-22T20:11:05.5190172Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5190177Z 
2025-01-22T20:11:05.5190421Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5190534Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5190675Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5190742Z     ???
2025-01-22T20:11:05.5190879Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5190946Z     ???
2025-01-22T20:11:05.5191223Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5191290Z     ???
2025-01-22T20:11:05.5191404Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5191408Z 
2025-01-22T20:11:05.5191473Z >   ???
2025-01-22T20:11:05.5191556Z E   KeyError: 'cups'
2025-01-22T20:11:05.5191560Z 
2025-01-22T20:11:05.5191688Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5191697Z 
2025-01-22T20:11:05.5191864Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5191871Z 
2025-01-22T20:11:05.5192099Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5192424Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5193046Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5193056Z 
2025-01-22T20:11:05.5193148Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5193222Z     def plasma(
2025-01-22T20:11:05.5193295Z         self,
2025-01-22T20:11:05.5193376Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5193450Z         config,
2025-01-22T20:11:05.5193640Z     ):
2025-01-22T20:11:05.5193754Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5193853Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5193975Z 
2025-01-22T20:11:05.5194100Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5194212Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5194314Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5194405Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5194570Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5194675Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5194890Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5194973Z     return BasePlasma(
2025-01-22T20:11:05.5195057Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5195150Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5195242Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5195321Z     self.update(**kwargs)
2025-01-22T20:11:05.5195415Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5195536Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5195653Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5195755Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5195959Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5196111Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5196323Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5196418Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5196553Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5196718Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5196891Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5197066Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5197323Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5197504Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5197683Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5197789Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5198042Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5198168Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5198409Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5198500Z     return self.apply_standard()
2025-01-22T20:11:05.5198777Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5198898Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5199206Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5199325Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5199545Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5199631Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5199896Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5199978Z     return self._get_value(key)
2025-01-22T20:11:05.5200238Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5200326Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5200438Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5200442Z 
2025-01-22T20:11:05.5200601Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5200811Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5200974Z        't046000', 't048000'],
2025-01-22T20:11:05.5201050Z       dtype='object')
2025-01-22T20:11:05.5201126Z key = 'cups'
2025-01-22T20:11:05.5201131Z 
2025-01-22T20:11:05.5201209Z     def get_loc(self, key):
2025-01-22T20:11:05.5201283Z         """
2025-01-22T20:11:05.5201440Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5201511Z     
2025-01-22T20:11:05.5201583Z         Parameters
2025-01-22T20:11:05.5201751Z         ----------
2025-01-22T20:11:05.5201821Z         key : label
2025-01-22T20:11:05.5201892Z     
2025-01-22T20:11:05.5201960Z         Returns
2025-01-22T20:11:05.5202035Z         -------
2025-01-22T20:11:05.5202170Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5202235Z     
2025-01-22T20:11:05.5202308Z         Examples
2025-01-22T20:11:05.5202377Z         --------
2025-01-22T20:11:05.5202478Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5202566Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5202637Z         1
2025-01-22T20:11:05.5202703Z     
2025-01-22T20:11:05.5202812Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5202901Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5202982Z         slice(1, 3, None)
2025-01-22T20:11:05.5203047Z     
2025-01-22T20:11:05.5203159Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5203249Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5203349Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5203416Z         """
2025-01-22T20:11:05.5203638Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5203715Z         try:
2025-01-22T20:11:05.5203813Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5203899Z         except KeyError as err:
2025-01-22T20:11:05.5203996Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5204102Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5204219Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5204291Z             ):
2025-01-22T20:11:05.5204381Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5204472Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5204553Z E           KeyError: 'cups'
2025-01-22T20:11:05.5204557Z 
2025-01-22T20:11:05.5204825Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5205078Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-ionization_data] _
2025-01-22T20:11:05.5205088Z 
2025-01-22T20:11:05.5205239Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5205451Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5205529Z        't046000', 't048000'],
2025-01-22T20:11:05.5205609Z       dtype='object')
2025-01-22T20:11:05.5205680Z key = 'cups'
2025-01-22T20:11:05.5205684Z 
2025-01-22T20:11:05.5205768Z     def get_loc(self, key):
2025-01-22T20:11:05.5205835Z         """
2025-01-22T20:11:05.5205997Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5206064Z     
2025-01-22T20:11:05.5206141Z         Parameters
2025-01-22T20:11:05.5206211Z         ----------
2025-01-22T20:11:05.5206286Z         key : label
2025-01-22T20:11:05.5206355Z     
2025-01-22T20:11:05.5206428Z         Returns
2025-01-22T20:11:05.5206502Z         -------
2025-01-22T20:11:05.5206633Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5206703Z     
2025-01-22T20:11:05.5206773Z         Examples
2025-01-22T20:11:05.5206847Z         --------
2025-01-22T20:11:05.5206944Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5207031Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5207217Z         1
2025-01-22T20:11:05.5207287Z     
2025-01-22T20:11:05.5207386Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5207480Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5207555Z         slice(1, 3, None)
2025-01-22T20:11:05.5207625Z     
2025-01-22T20:11:05.5207731Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5207825Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5207914Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5208087Z         """
2025-01-22T20:11:05.5208187Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5208264Z         try:
2025-01-22T20:11:05.5208367Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5208373Z 
2025-01-22T20:11:05.5208621Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5208734Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5208873Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5208944Z     ???
2025-01-22T20:11:05.5209073Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5209144Z     ???
2025-01-22T20:11:05.5209411Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5209483Z     ???
2025-01-22T20:11:05.5209585Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5209597Z 
2025-01-22T20:11:05.5209663Z >   ???
2025-01-22T20:11:05.5209744Z E   KeyError: 'cups'
2025-01-22T20:11:05.5209749Z 
2025-01-22T20:11:05.5209876Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5209880Z 
2025-01-22T20:11:05.5210050Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5210054Z 
2025-01-22T20:11:05.5210274Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5210598Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5211218Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5211229Z 
2025-01-22T20:11:05.5211317Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5211397Z     def plasma(
2025-01-22T20:11:05.5211468Z         self,
2025-01-22T20:11:05.5211552Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5211620Z         config,
2025-01-22T20:11:05.5211691Z     ):
2025-01-22T20:11:05.5211799Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5211895Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5211899Z 
2025-01-22T20:11:05.5212019Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5212134Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5212237Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5212324Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5212489Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5212595Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5212709Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5212786Z     return BasePlasma(
2025-01-22T20:11:05.5212878Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5212964Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5213057Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5213136Z     self.update(**kwargs)
2025-01-22T20:11:05.5213228Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5213348Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5213463Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5213799Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5214006Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5214158Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5214370Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5214470Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5214596Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5214871Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5215039Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5215213Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5215470Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5215648Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5215831Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5215937Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5216188Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5216315Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5216559Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5216649Z     return self.apply_standard()
2025-01-22T20:11:05.5216930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5217050Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5217358Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5217477Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5217699Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5217782Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5218050Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5218137Z     return self._get_value(key)
2025-01-22T20:11:05.5218390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5218487Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5218595Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5218600Z 
2025-01-22T20:11:05.5218758Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5218970Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5219052Z        't046000', 't048000'],
2025-01-22T20:11:05.5219128Z       dtype='object')
2025-01-22T20:11:05.5219204Z key = 'cups'
2025-01-22T20:11:05.5219210Z 
2025-01-22T20:11:05.5219288Z     def get_loc(self, key):
2025-01-22T20:11:05.5219360Z         """
2025-01-22T20:11:05.5219521Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5219588Z     
2025-01-22T20:11:05.5219664Z         Parameters
2025-01-22T20:11:05.5219736Z         ----------
2025-01-22T20:11:05.5219812Z         key : label
2025-01-22T20:11:05.5219882Z     
2025-01-22T20:11:05.5219955Z         Returns
2025-01-22T20:11:05.5220024Z         -------
2025-01-22T20:11:05.5220157Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5220224Z     
2025-01-22T20:11:05.5220299Z         Examples
2025-01-22T20:11:05.5220368Z         --------
2025-01-22T20:11:05.5220472Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5220557Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5220732Z         1
2025-01-22T20:11:05.5220798Z     
2025-01-22T20:11:05.5220907Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5220995Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5221075Z         slice(1, 3, None)
2025-01-22T20:11:05.5221140Z     
2025-01-22T20:11:05.5221254Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5221352Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5221440Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5221590Z         """
2025-01-22T20:11:05.5221692Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5221765Z         try:
2025-01-22T20:11:05.5221861Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5221948Z         except KeyError as err:
2025-01-22T20:11:05.5222043Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5222146Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5222299Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5222372Z             ):
2025-01-22T20:11:05.5222464Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5222553Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5222637Z E           KeyError: 'cups'
2025-01-22T20:11:05.5222647Z 
2025-01-22T20:11:05.5222909Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5223125Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-nu] _
2025-01-22T20:11:05.5223133Z 
2025-01-22T20:11:05.5223286Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5223611Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5223689Z        't046000', 't048000'],
2025-01-22T20:11:05.5223770Z       dtype='object')
2025-01-22T20:11:05.5223843Z key = 'cups'
2025-01-22T20:11:05.5223847Z 
2025-01-22T20:11:05.5223931Z     def get_loc(self, key):
2025-01-22T20:11:05.5223998Z         """
2025-01-22T20:11:05.5224161Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5224232Z     
2025-01-22T20:11:05.5224303Z         Parameters
2025-01-22T20:11:05.5224380Z         ----------
2025-01-22T20:11:05.5224451Z         key : label
2025-01-22T20:11:05.5224521Z     
2025-01-22T20:11:05.5224590Z         Returns
2025-01-22T20:11:05.5224663Z         -------
2025-01-22T20:11:05.5224796Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5224866Z     
2025-01-22T20:11:05.5224935Z         Examples
2025-01-22T20:11:05.5225013Z         --------
2025-01-22T20:11:05.5225108Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5225195Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5225262Z         1
2025-01-22T20:11:05.5225332Z     
2025-01-22T20:11:05.5225435Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5225527Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5225601Z         slice(1, 3, None)
2025-01-22T20:11:05.5225671Z     
2025-01-22T20:11:05.5225776Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5225870Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5225963Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5226031Z         """
2025-01-22T20:11:05.5226134Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5226205Z         try:
2025-01-22T20:11:05.5226305Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5226310Z 
2025-01-22T20:11:05.5226551Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5226664Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5226798Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5226989Z     ???
2025-01-22T20:11:05.5227119Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5227193Z     ???
2025-01-22T20:11:05.5227459Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5227531Z     ???
2025-01-22T20:11:05.5227642Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5227646Z 
2025-01-22T20:11:05.5227712Z >   ???
2025-01-22T20:11:05.5227912Z E   KeyError: 'cups'
2025-01-22T20:11:05.5227917Z 
2025-01-22T20:11:05.5228042Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5228047Z 
2025-01-22T20:11:05.5228216Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5228220Z 
2025-01-22T20:11:05.5228442Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5228763Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5229393Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5229399Z 
2025-01-22T20:11:05.5229487Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5229564Z     def plasma(
2025-01-22T20:11:05.5229633Z         self,
2025-01-22T20:11:05.5229721Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5229790Z         config,
2025-01-22T20:11:05.5229861Z     ):
2025-01-22T20:11:05.5229971Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5230068Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5230072Z 
2025-01-22T20:11:05.5230192Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5230305Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5230418Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5230502Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5230676Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5230774Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5230887Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5230965Z     return BasePlasma(
2025-01-22T20:11:05.5231054Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5231144Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5231236Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5231316Z     self.update(**kwargs)
2025-01-22T20:11:05.5231408Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5231528Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5231643Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5231748Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5231948Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5232102Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5232312Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5232412Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5232538Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5232711Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5232882Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5233059Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5233314Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5233489Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5233797Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5234020Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5234279Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5234401Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5234647Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5234733Z     return self.apply_standard()
2025-01-22T20:11:05.5235117Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5235235Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5235547Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5235663Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5235883Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5235978Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5236240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5236327Z     return self._get_value(key)
2025-01-22T20:11:05.5236582Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5236675Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5236781Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5236789Z 
2025-01-22T20:11:05.5236947Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5237152Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5237231Z        't046000', 't048000'],
2025-01-22T20:11:05.5237311Z       dtype='object')
2025-01-22T20:11:05.5237388Z key = 'cups'
2025-01-22T20:11:05.5237392Z 
2025-01-22T20:11:05.5237475Z     def get_loc(self, key):
2025-01-22T20:11:05.5237544Z         """
2025-01-22T20:11:05.5237706Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5237771Z     
2025-01-22T20:11:05.5237848Z         Parameters
2025-01-22T20:11:05.5237919Z         ----------
2025-01-22T20:11:05.5237993Z         key : label
2025-01-22T20:11:05.5238060Z     
2025-01-22T20:11:05.5238132Z         Returns
2025-01-22T20:11:05.5238204Z         -------
2025-01-22T20:11:05.5238339Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5238406Z     
2025-01-22T20:11:05.5238481Z         Examples
2025-01-22T20:11:05.5238550Z         --------
2025-01-22T20:11:05.5238651Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5238735Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5238808Z         1
2025-01-22T20:11:05.5238879Z     
2025-01-22T20:11:05.5238983Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5239074Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5239149Z         slice(1, 3, None)
2025-01-22T20:11:05.5239219Z     
2025-01-22T20:11:05.5239326Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5239421Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5239510Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5239583Z         """
2025-01-22T20:11:05.5239687Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5239765Z         try:
2025-01-22T20:11:05.5239862Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5239950Z         except KeyError as err:
2025-01-22T20:11:05.5240049Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5240153Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5240271Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5240433Z             ):
2025-01-22T20:11:05.5240531Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5240616Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5240700Z E           KeyError: 'cups'
2025-01-22T20:11:05.5240704Z 
2025-01-22T20:11:05.5240969Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5241215Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] _
2025-01-22T20:11:05.5241292Z 
2025-01-22T20:11:05.5241447Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5241660Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5241734Z        't046000', 't048000'],
2025-01-22T20:11:05.5241816Z       dtype='object')
2025-01-22T20:11:05.5241892Z key = 'cups'
2025-01-22T20:11:05.5241896Z 
2025-01-22T20:11:05.5241979Z     def get_loc(self, key):
2025-01-22T20:11:05.5242052Z         """
2025-01-22T20:11:05.5242207Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5242277Z     
2025-01-22T20:11:05.5242348Z         Parameters
2025-01-22T20:11:05.5242424Z         ----------
2025-01-22T20:11:05.5242494Z         key : label
2025-01-22T20:11:05.5242565Z     
2025-01-22T20:11:05.5242634Z         Returns
2025-01-22T20:11:05.5242708Z         -------
2025-01-22T20:11:05.5242836Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5242912Z     
2025-01-22T20:11:05.5242982Z         Examples
2025-01-22T20:11:05.5243056Z         --------
2025-01-22T20:11:05.5243151Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5243240Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5243312Z         1
2025-01-22T20:11:05.5243380Z     
2025-01-22T20:11:05.5243483Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5243709Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5243789Z         slice(1, 3, None)
2025-01-22T20:11:05.5243855Z     
2025-01-22T20:11:05.5243966Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5244054Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5244148Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5244214Z         """
2025-01-22T20:11:05.5244320Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5244389Z         try:
2025-01-22T20:11:05.5244496Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5244501Z 
2025-01-22T20:11:05.5244747Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5244872Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5245012Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5245080Z     ???
2025-01-22T20:11:05.5245218Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5245284Z     ???
2025-01-22T20:11:05.5245556Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5245623Z     ???
2025-01-22T20:11:05.5245732Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5245736Z 
2025-01-22T20:11:05.5245801Z >   ???
2025-01-22T20:11:05.5245884Z E   KeyError: 'cups'
2025-01-22T20:11:05.5245889Z 
2025-01-22T20:11:05.5246019Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5246026Z 
2025-01-22T20:11:05.5246197Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5246203Z 
2025-01-22T20:11:05.5246427Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5246742Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5247488Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5247493Z 
2025-01-22T20:11:05.5247580Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5247656Z     def plasma(
2025-01-22T20:11:05.5247723Z         self,
2025-01-22T20:11:05.5247807Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5247876Z         config,
2025-01-22T20:11:05.5248047Z     ):
2025-01-22T20:11:05.5248162Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5248255Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5248259Z 
2025-01-22T20:11:05.5248384Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5248491Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5248600Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5248687Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5248858Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5248956Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5249069Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5249146Z     return BasePlasma(
2025-01-22T20:11:05.5249234Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5249320Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5249413Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5249501Z     self.update(**kwargs)
2025-01-22T20:11:05.5249589Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5249714Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5249823Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5249929Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5250127Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5250285Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5250496Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5250596Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5250721Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5250891Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5251060Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5251240Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5251505Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5251676Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5251860Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5251962Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5252221Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5252343Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5252584Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5252671Z     return self.apply_standard()
2025-01-22T20:11:05.5252950Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5253076Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5253380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5253601Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5253819Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5254044Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5254307Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5254396Z     return self._get_value(key)
2025-01-22T20:11:05.5254651Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5254743Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5254851Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5254959Z 
2025-01-22T20:11:05.5255116Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5255329Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5255402Z        't046000', 't048000'],
2025-01-22T20:11:05.5255484Z       dtype='object')
2025-01-22T20:11:05.5255554Z key = 'cups'
2025-01-22T20:11:05.5255559Z 
2025-01-22T20:11:05.5255645Z     def get_loc(self, key):
2025-01-22T20:11:05.5255713Z         """
2025-01-22T20:11:05.5255873Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5255939Z     
2025-01-22T20:11:05.5256016Z         Parameters
2025-01-22T20:11:05.5256087Z         ----------
2025-01-22T20:11:05.5256162Z         key : label
2025-01-22T20:11:05.5256229Z     
2025-01-22T20:11:05.5256302Z         Returns
2025-01-22T20:11:05.5256371Z         -------
2025-01-22T20:11:05.5256505Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5256579Z     
2025-01-22T20:11:05.5256648Z         Examples
2025-01-22T20:11:05.5256723Z         --------
2025-01-22T20:11:05.5256818Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5256908Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5256975Z         1
2025-01-22T20:11:05.5257047Z     
2025-01-22T20:11:05.5257149Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5257246Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5257321Z         slice(1, 3, None)
2025-01-22T20:11:05.5257392Z     
2025-01-22T20:11:05.5257496Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5257592Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5257680Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5257752Z         """
2025-01-22T20:11:05.5257852Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5257925Z         try:
2025-01-22T20:11:05.5258030Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5258112Z         except KeyError as err:
2025-01-22T20:11:05.5258213Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5258311Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5258434Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5258501Z             ):
2025-01-22T20:11:05.5258598Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5258688Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5258772Z E           KeyError: 'cups'
2025-01-22T20:11:05.5258778Z 
2025-01-22T20:11:05.5259039Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5259262Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-f_lu] _
2025-01-22T20:11:05.5259267Z 
2025-01-22T20:11:05.5259422Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5259629Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5259708Z        't046000', 't048000'],
2025-01-22T20:11:05.5259782Z       dtype='object')
2025-01-22T20:11:05.5259859Z key = 'cups'
2025-01-22T20:11:05.5259863Z 
2025-01-22T20:11:05.5259941Z     def get_loc(self, key):
2025-01-22T20:11:05.5260015Z         """
2025-01-22T20:11:05.5260259Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5260330Z     
2025-01-22T20:11:05.5260401Z         Parameters
2025-01-22T20:11:05.5260477Z         ----------
2025-01-22T20:11:05.5260549Z         key : label
2025-01-22T20:11:05.5260620Z     
2025-01-22T20:11:05.5260687Z         Returns
2025-01-22T20:11:05.5260762Z         -------
2025-01-22T20:11:05.5260890Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5260961Z     
2025-01-22T20:11:05.5261035Z         Examples
2025-01-22T20:11:05.5261180Z         --------
2025-01-22T20:11:05.5261281Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5261366Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5261440Z         1
2025-01-22T20:11:05.5261506Z     
2025-01-22T20:11:05.5261629Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5261717Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5261795Z         slice(1, 3, None)
2025-01-22T20:11:05.5261864Z     
2025-01-22T20:11:05.5261975Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5262063Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5262155Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5262221Z         """
2025-01-22T20:11:05.5262325Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5262394Z         try:
2025-01-22T20:11:05.5262496Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5262500Z 
2025-01-22T20:11:05.5262752Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5262861Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5263003Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5263071Z     ???
2025-01-22T20:11:05.5263206Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5263272Z     ???
2025-01-22T20:11:05.5263637Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5263707Z     ???
2025-01-22T20:11:05.5263819Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5263824Z 
2025-01-22T20:11:05.5263889Z >   ???
2025-01-22T20:11:05.5263971Z E   KeyError: 'cups'
2025-01-22T20:11:05.5263976Z 
2025-01-22T20:11:05.5264106Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5264111Z 
2025-01-22T20:11:05.5264279Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5264283Z 
2025-01-22T20:11:05.5264510Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5264823Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5265444Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5265454Z 
2025-01-22T20:11:05.5265546Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5265620Z     def plasma(
2025-01-22T20:11:05.5265692Z         self,
2025-01-22T20:11:05.5265773Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5265846Z         config,
2025-01-22T20:11:05.5265911Z     ):
2025-01-22T20:11:05.5266025Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5266122Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5266126Z 
2025-01-22T20:11:05.5266250Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5266353Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5266460Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5266542Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5266829Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5266927Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5267041Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5267123Z     return BasePlasma(
2025-01-22T20:11:05.5267206Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5267296Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5267384Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5267467Z     self.update(**kwargs)
2025-01-22T20:11:05.5267656Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5267780Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5267889Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5267995Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5268193Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5268348Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5268564Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5268664Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5268797Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5268959Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5269132Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5269302Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5269566Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5269738Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5269921Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5270022Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5270278Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5270401Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5270643Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5270734Z     return self.apply_standard()
2025-01-22T20:11:05.5271012Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5271137Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5271444Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5271564Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5271779Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5271869Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5272131Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5272223Z     return self._get_value(key)
2025-01-22T20:11:05.5272478Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5272571Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5272683Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5272688Z 
2025-01-22T20:11:05.5272842Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5273056Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5273129Z        't046000', 't048000'],
2025-01-22T20:11:05.5273210Z       dtype='object')
2025-01-22T20:11:05.5273281Z key = 'cups'
2025-01-22T20:11:05.5273285Z 
2025-01-22T20:11:05.5273369Z     def get_loc(self, key):
2025-01-22T20:11:05.5273440Z         """
2025-01-22T20:11:05.5273822Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5273895Z     
2025-01-22T20:11:05.5273967Z         Parameters
2025-01-22T20:11:05.5274042Z         ----------
2025-01-22T20:11:05.5274114Z         key : label
2025-01-22T20:11:05.5274184Z     
2025-01-22T20:11:05.5274252Z         Returns
2025-01-22T20:11:05.5274327Z         -------
2025-01-22T20:11:05.5274457Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5274528Z     
2025-01-22T20:11:05.5274597Z         Examples
2025-01-22T20:11:05.5274797Z         --------
2025-01-22T20:11:05.5274893Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5274981Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5275049Z         1
2025-01-22T20:11:05.5275119Z     
2025-01-22T20:11:05.5275221Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5275315Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5275394Z         slice(1, 3, None)
2025-01-22T20:11:05.5275468Z     
2025-01-22T20:11:05.5275573Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5275725Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5275892Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5275996Z         """
2025-01-22T20:11:05.5276145Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5276258Z         try:
2025-01-22T20:11:05.5276433Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5276547Z         except KeyError as err:
2025-01-22T20:11:05.5276741Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5276902Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5277104Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5277213Z             ):
2025-01-22T20:11:05.5277313Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5277405Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5277496Z E           KeyError: 'cups'
2025-01-22T20:11:05.5277501Z 
2025-01-22T20:11:05.5277774Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5278022Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-metastability] _
2025-01-22T20:11:05.5278028Z 
2025-01-22T20:11:05.5278186Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5278390Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5278477Z        't046000', 't048000'],
2025-01-22T20:11:05.5278552Z       dtype='object')
2025-01-22T20:11:05.5278629Z key = 'cups'
2025-01-22T20:11:05.5278633Z 
2025-01-22T20:11:05.5278712Z     def get_loc(self, key):
2025-01-22T20:11:05.5278784Z         """
2025-01-22T20:11:05.5278939Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5279014Z     
2025-01-22T20:11:05.5279094Z         Parameters
2025-01-22T20:11:05.5279165Z         ----------
2025-01-22T20:11:05.5279241Z         key : label
2025-01-22T20:11:05.5279307Z     
2025-01-22T20:11:05.5279379Z         Returns
2025-01-22T20:11:05.5279450Z         -------
2025-01-22T20:11:05.5279583Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5279650Z     
2025-01-22T20:11:05.5279724Z         Examples
2025-01-22T20:11:05.5279794Z         --------
2025-01-22T20:11:05.5279896Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5279984Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5280056Z         1
2025-01-22T20:11:05.5280122Z     
2025-01-22T20:11:05.5280226Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5280312Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5280393Z         slice(1, 3, None)
2025-01-22T20:11:05.5280460Z     
2025-01-22T20:11:05.5280570Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5280814Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5280903Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5280975Z         """
2025-01-22T20:11:05.5281075Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5281148Z         try:
2025-01-22T20:11:05.5281245Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5281250Z 
2025-01-22T20:11:05.5281497Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5281679Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5281821Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5281889Z     ???
2025-01-22T20:11:05.5282023Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5282092Z     ???
2025-01-22T20:11:05.5282362Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5282441Z     ???
2025-01-22T20:11:05.5282544Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5282549Z 
2025-01-22T20:11:05.5282618Z >   ???
2025-01-22T20:11:05.5282696Z E   KeyError: 'cups'
2025-01-22T20:11:05.5282701Z 
2025-01-22T20:11:05.5282832Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5282836Z 
2025-01-22T20:11:05.5283000Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5283007Z 
2025-01-22T20:11:05.5283233Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5283698Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5284329Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5284339Z 
2025-01-22T20:11:05.5284431Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5284508Z     def plasma(
2025-01-22T20:11:05.5284581Z         self,
2025-01-22T20:11:05.5284664Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5284737Z         config,
2025-01-22T20:11:05.5284803Z     ):
2025-01-22T20:11:05.5284922Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5285015Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5285023Z 
2025-01-22T20:11:05.5285149Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5285254Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5285362Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5285450Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5285616Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5285723Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5285836Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5285919Z     return BasePlasma(
2025-01-22T20:11:05.5286005Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5286098Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5286187Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5286271Z     self.update(**kwargs)
2025-01-22T20:11:05.5286360Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5286487Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5286600Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5286709Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5286913Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5287064Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5287277Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5287497Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5287626Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5287793Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5287965Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5288135Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5288401Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5288674Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5288858Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5288964Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5289216Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5289346Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5289584Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5289675Z     return self.apply_standard()
2025-01-22T20:11:05.5289947Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5290070Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5290374Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5290498Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5290717Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5290808Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5291076Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5291164Z     return self._get_value(key)
2025-01-22T20:11:05.5291423Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5291509Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5291623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5291628Z 
2025-01-22T20:11:05.5291782Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5291996Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5292072Z        't046000', 't048000'],
2025-01-22T20:11:05.5292154Z       dtype='object')
2025-01-22T20:11:05.5292230Z key = 'cups'
2025-01-22T20:11:05.5292235Z 
2025-01-22T20:11:05.5292313Z     def get_loc(self, key):
2025-01-22T20:11:05.5292385Z         """
2025-01-22T20:11:05.5292540Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5292614Z     
2025-01-22T20:11:05.5292685Z         Parameters
2025-01-22T20:11:05.5292762Z         ----------
2025-01-22T20:11:05.5292834Z         key : label
2025-01-22T20:11:05.5292904Z     
2025-01-22T20:11:05.5292971Z         Returns
2025-01-22T20:11:05.5293045Z         -------
2025-01-22T20:11:05.5293175Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5293247Z     
2025-01-22T20:11:05.5293317Z         Examples
2025-01-22T20:11:05.5293392Z         --------
2025-01-22T20:11:05.5293488Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5293683Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5293751Z         1
2025-01-22T20:11:05.5293822Z     
2025-01-22T20:11:05.5293931Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5294019Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5294100Z         slice(1, 3, None)
2025-01-22T20:11:05.5294167Z     
2025-01-22T20:11:05.5294278Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5294489Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5294587Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5294654Z         """
2025-01-22T20:11:05.5294758Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5294828Z         try:
2025-01-22T20:11:05.5294930Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5295011Z         except KeyError as err:
2025-01-22T20:11:05.5295113Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5295314Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5295437Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5295510Z             ):
2025-01-22T20:11:05.5295601Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5295692Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5295775Z E           KeyError: 'cups'
2025-01-22T20:11:05.5295780Z 
2025-01-22T20:11:05.5296056Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5296276Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-delta] _
2025-01-22T20:11:05.5296281Z 
2025-01-22T20:11:05.5296438Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5296644Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5296727Z        't046000', 't048000'],
2025-01-22T20:11:05.5296803Z       dtype='object')
2025-01-22T20:11:05.5296880Z key = 'cups'
2025-01-22T20:11:05.5296884Z 
2025-01-22T20:11:05.5296969Z     def get_loc(self, key):
2025-01-22T20:11:05.5297036Z         """
2025-01-22T20:11:05.5297195Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5297262Z     
2025-01-22T20:11:05.5297342Z         Parameters
2025-01-22T20:11:05.5297415Z         ----------
2025-01-22T20:11:05.5297491Z         key : label
2025-01-22T20:11:05.5297556Z     
2025-01-22T20:11:05.5297629Z         Returns
2025-01-22T20:11:05.5297699Z         -------
2025-01-22T20:11:05.5297833Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5297899Z     
2025-01-22T20:11:05.5297976Z         Examples
2025-01-22T20:11:05.5298045Z         --------
2025-01-22T20:11:05.5298144Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5298228Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5298303Z         1
2025-01-22T20:11:05.5298368Z     
2025-01-22T20:11:05.5298471Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5298563Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5298638Z         slice(1, 3, None)
2025-01-22T20:11:05.5298709Z     
2025-01-22T20:11:05.5298814Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5298907Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5299000Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5299071Z         """
2025-01-22T20:11:05.5299170Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5299242Z         try:
2025-01-22T20:11:05.5299339Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5299343Z 
2025-01-22T20:11:05.5299589Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5299695Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5299838Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5299912Z     ???
2025-01-22T20:11:05.5300042Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5300113Z     ???
2025-01-22T20:11:05.5300380Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5300452Z     ???
2025-01-22T20:11:05.5300646Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5300650Z 
2025-01-22T20:11:05.5300720Z >   ???
2025-01-22T20:11:05.5300796Z E   KeyError: 'cups'
2025-01-22T20:11:05.5300801Z 
2025-01-22T20:11:05.5300929Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5300934Z 
2025-01-22T20:11:05.5301100Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5301109Z 
2025-01-22T20:11:05.5301328Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5301741Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5302358Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5302368Z 
2025-01-22T20:11:05.5302458Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5302532Z     def plasma(
2025-01-22T20:11:05.5302605Z         self,
2025-01-22T20:11:05.5302686Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5302760Z         config,
2025-01-22T20:11:05.5302826Z     ):
2025-01-22T20:11:05.5302941Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5303041Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5303046Z 
2025-01-22T20:11:05.5303166Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5303279Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5303382Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5303471Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5303750Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5303855Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5303967Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5304052Z     return BasePlasma(
2025-01-22T20:11:05.5304136Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5304243Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5304339Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5304424Z     self.update(**kwargs)
2025-01-22T20:11:05.5304514Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5304633Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5304745Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5304852Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5305055Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5305204Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5305415Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5305511Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5305646Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5305811Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5305985Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5306152Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5306413Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5306589Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5306773Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5306879Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5307128Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5307258Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5307615Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5307707Z     return self.apply_standard()
2025-01-22T20:11:05.5307982Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5308104Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5308414Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5308630Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5308853Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5308938Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5309205Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5309287Z     return self._get_value(key)
2025-01-22T20:11:05.5309549Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5309638Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5309751Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5309756Z 
2025-01-22T20:11:05.5309908Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5310121Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5310204Z        't046000', 't048000'],
2025-01-22T20:11:05.5310279Z       dtype='object')
2025-01-22T20:11:05.5310355Z key = 'cups'
2025-01-22T20:11:05.5310360Z 
2025-01-22T20:11:05.5310438Z     def get_loc(self, key):
2025-01-22T20:11:05.5310510Z         """
2025-01-22T20:11:05.5310666Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5310738Z     
2025-01-22T20:11:05.5310810Z         Parameters
2025-01-22T20:11:05.5310890Z         ----------
2025-01-22T20:11:05.5310960Z         key : label
2025-01-22T20:11:05.5311031Z     
2025-01-22T20:11:05.5311099Z         Returns
2025-01-22T20:11:05.5311173Z         -------
2025-01-22T20:11:05.5311303Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5311388Z     
2025-01-22T20:11:05.5311481Z         Examples
2025-01-22T20:11:05.5311555Z         --------
2025-01-22T20:11:05.5311661Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5311745Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5311821Z         1
2025-01-22T20:11:05.5311887Z     
2025-01-22T20:11:05.5311993Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5312079Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5312157Z         slice(1, 3, None)
2025-01-22T20:11:05.5312223Z     
2025-01-22T20:11:05.5312332Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5312426Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5312523Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5312591Z         """
2025-01-22T20:11:05.5312697Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5312765Z         try:
2025-01-22T20:11:05.5312868Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5312954Z         except KeyError as err:
2025-01-22T20:11:05.5313052Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5313157Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5313278Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5313355Z             ):
2025-01-22T20:11:05.5313446Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5313649Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5313734Z E           KeyError: 'cups'
2025-01-22T20:11:05.5313738Z 
2025-01-22T20:11:05.5314008Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5314408Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_electron_densities] _
2025-01-22T20:11:05.5314413Z 
2025-01-22T20:11:05.5314571Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5314783Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5314858Z        't046000', 't048000'],
2025-01-22T20:11:05.5314940Z       dtype='object')
2025-01-22T20:11:05.5315115Z key = 'cups'
2025-01-22T20:11:05.5315121Z 
2025-01-22T20:11:05.5315204Z     def get_loc(self, key):
2025-01-22T20:11:05.5315271Z         """
2025-01-22T20:11:05.5315431Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5315497Z     
2025-01-22T20:11:05.5315574Z         Parameters
2025-01-22T20:11:05.5315644Z         ----------
2025-01-22T20:11:05.5315720Z         key : label
2025-01-22T20:11:05.5315791Z     
2025-01-22T20:11:05.5315865Z         Returns
2025-01-22T20:11:05.5315933Z         -------
2025-01-22T20:11:05.5316067Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5316134Z     
2025-01-22T20:11:05.5316209Z         Examples
2025-01-22T20:11:05.5316284Z         --------
2025-01-22T20:11:05.5316379Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5316467Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5316536Z         1
2025-01-22T20:11:05.5316610Z     
2025-01-22T20:11:05.5316708Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5316798Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5316875Z         slice(1, 3, None)
2025-01-22T20:11:05.5320813Z     
2025-01-22T20:11:05.5320976Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5321085Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5321181Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5321264Z         """
2025-01-22T20:11:05.5321372Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5321450Z         try:
2025-01-22T20:11:05.5321551Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5321555Z 
2025-01-22T20:11:05.5321830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5321950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5322105Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5322185Z     ???
2025-01-22T20:11:05.5322367Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5322442Z     ???
2025-01-22T20:11:05.5322716Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5322793Z     ???
2025-01-22T20:11:05.5322903Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5322913Z 
2025-01-22T20:11:05.5322987Z >   ???
2025-01-22T20:11:05.5323066Z E   KeyError: 'cups'
2025-01-22T20:11:05.5323071Z 
2025-01-22T20:11:05.5323210Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5323214Z 
2025-01-22T20:11:05.5323392Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5323397Z 
2025-01-22T20:11:05.5323754Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5324089Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5324719Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5324725Z 
2025-01-22T20:11:05.5324823Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5325078Z     def plasma(
2025-01-22T20:11:05.5325155Z         self,
2025-01-22T20:11:05.5325237Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5325315Z         config,
2025-01-22T20:11:05.5325389Z     ):
2025-01-22T20:11:05.5325508Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5325613Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5325618Z 
2025-01-22T20:11:05.5325744Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5325861Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5326079Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5326171Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5326343Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5326452Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5326568Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5326657Z     return BasePlasma(
2025-01-22T20:11:05.5326744Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5326839Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5326935Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5327017Z     self.update(**kwargs)
2025-01-22T20:11:05.5327112Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5327236Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5327352Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5327457Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5327669Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5327825Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5328041Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5328137Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5328273Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5328445Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5328622Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5328809Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5329069Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5329249Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5329434Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5329548Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5329808Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5329941Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5330182Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5330281Z     return self.apply_standard()
2025-01-22T20:11:05.5330558Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5330685Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5331019Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5331143Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5331372Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5331460Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5331734Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5331819Z     return self._get_value(key)
2025-01-22T20:11:05.5332084Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5332263Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5332380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5332385Z 
2025-01-22T20:11:05.5332548Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5332760Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5332842Z        't046000', 't048000'],
2025-01-22T20:11:05.5333011Z       dtype='object')
2025-01-22T20:11:05.5333090Z key = 'cups'
2025-01-22T20:11:05.5333094Z 
2025-01-22T20:11:05.5333174Z     def get_loc(self, key):
2025-01-22T20:11:05.5333248Z         """
2025-01-22T20:11:05.5333408Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5333485Z     
2025-01-22T20:11:05.5333666Z         Parameters
2025-01-22T20:11:05.5333748Z         ----------
2025-01-22T20:11:05.5333820Z         key : label
2025-01-22T20:11:05.5333897Z     
2025-01-22T20:11:05.5333966Z         Returns
2025-01-22T20:11:05.5334049Z         -------
2025-01-22T20:11:05.5334188Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5334255Z     
2025-01-22T20:11:05.5334334Z         Examples
2025-01-22T20:11:05.5334405Z         --------
2025-01-22T20:11:05.5334511Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5334597Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5334671Z         1
2025-01-22T20:11:05.5334741Z     
2025-01-22T20:11:05.5334854Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5334946Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5335027Z         slice(1, 3, None)
2025-01-22T20:11:05.5335094Z     
2025-01-22T20:11:05.5335208Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5335299Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5335400Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5335472Z         """
2025-01-22T20:11:05.5335583Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5335661Z         try:
2025-01-22T20:11:05.5335761Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5335850Z         except KeyError as err:
2025-01-22T20:11:05.5335949Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5336055Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5336176Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5336254Z             ):
2025-01-22T20:11:05.5336351Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5336444Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5336524Z E           KeyError: 'cups'
2025-01-22T20:11:05.5336529Z 
2025-01-22T20:11:05.5336806Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5337027Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-phi] _
2025-01-22T20:11:05.5337035Z 
2025-01-22T20:11:05.5337195Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5337401Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5337482Z        't046000', 't048000'],
2025-01-22T20:11:05.5337557Z       dtype='object')
2025-01-22T20:11:05.5337635Z key = 'cups'
2025-01-22T20:11:05.5337639Z 
2025-01-22T20:11:05.5337722Z     def get_loc(self, key):
2025-01-22T20:11:05.5337795Z         """
2025-01-22T20:11:05.5337962Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5338033Z     
2025-01-22T20:11:05.5338109Z         Parameters
2025-01-22T20:11:05.5338182Z         ----------
2025-01-22T20:11:05.5338258Z         key : label
2025-01-22T20:11:05.5338324Z     
2025-01-22T20:11:05.5338398Z         Returns
2025-01-22T20:11:05.5338587Z         -------
2025-01-22T20:11:05.5338724Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5338790Z     
2025-01-22T20:11:05.5338867Z         Examples
2025-01-22T20:11:05.5338938Z         --------
2025-01-22T20:11:05.5339042Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5339126Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5339198Z         1
2025-01-22T20:11:05.5339263Z     
2025-01-22T20:11:05.5339370Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5339559Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5339639Z         slice(1, 3, None)
2025-01-22T20:11:05.5339705Z     
2025-01-22T20:11:05.5339818Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5339907Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5340004Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5340076Z         """
2025-01-22T20:11:05.5340176Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5340254Z         try:
2025-01-22T20:11:05.5340351Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5340355Z 
2025-01-22T20:11:05.5340611Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5340724Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5340868Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5340936Z     ???
2025-01-22T20:11:05.5341074Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5341140Z     ???
2025-01-22T20:11:05.5341415Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5341487Z     ???
2025-01-22T20:11:05.5341594Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5341598Z 
2025-01-22T20:11:05.5341667Z >   ???
2025-01-22T20:11:05.5341747Z E   KeyError: 'cups'
2025-01-22T20:11:05.5341752Z 
2025-01-22T20:11:05.5341884Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5341888Z 
2025-01-22T20:11:05.5342061Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5342065Z 
2025-01-22T20:11:05.5342293Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5342612Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5343244Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5343251Z 
2025-01-22T20:11:05.5343344Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5343419Z     def plasma(
2025-01-22T20:11:05.5343492Z         self,
2025-01-22T20:11:05.5343671Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5343744Z         config,
2025-01-22T20:11:05.5343812Z     ):
2025-01-22T20:11:05.5343929Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5344024Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5344029Z 
2025-01-22T20:11:05.5344155Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5344261Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5344370Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5344462Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5344628Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5344734Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5344844Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5344926Z     return BasePlasma(
2025-01-22T20:11:05.5345012Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5345223Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5345313Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5345400Z     self.update(**kwargs)
2025-01-22T20:11:05.5345488Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5345614Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5345724Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5345833Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5346032Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5346318Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5346534Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5346631Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5346763Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5346932Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5347113Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5347285Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5347550Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5347722Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5347906Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5348016Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5348270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5348399Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5348639Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5348732Z     return self.apply_standard()
2025-01-22T20:11:05.5349009Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5349132Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5349436Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5349559Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5349773Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5349867Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5350137Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5350221Z     return self._get_value(key)
2025-01-22T20:11:05.5350483Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5350570Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5350685Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5350690Z 
2025-01-22T20:11:05.5350845Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5351056Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5351130Z        't046000', 't048000'],
2025-01-22T20:11:05.5351210Z       dtype='object')
2025-01-22T20:11:05.5351287Z key = 'cups'
2025-01-22T20:11:05.5351292Z 
2025-01-22T20:11:05.5351374Z     def get_loc(self, key):
2025-01-22T20:11:05.5351447Z         """
2025-01-22T20:11:05.5351605Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5351680Z     
2025-01-22T20:11:05.5351753Z         Parameters
2025-01-22T20:11:05.5351829Z         ----------
2025-01-22T20:11:05.5351900Z         key : label
2025-01-22T20:11:05.5351971Z     
2025-01-22T20:11:05.5352040Z         Returns
2025-01-22T20:11:05.5352200Z         -------
2025-01-22T20:11:05.5352333Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5352404Z     
2025-01-22T20:11:05.5352475Z         Examples
2025-01-22T20:11:05.5352551Z         --------
2025-01-22T20:11:05.5352650Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5352739Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5352806Z         1
2025-01-22T20:11:05.5352877Z     
2025-01-22T20:11:05.5352984Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5353149Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5353231Z         slice(1, 3, None)
2025-01-22T20:11:05.5353297Z     
2025-01-22T20:11:05.5353409Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5353625Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5353724Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5353792Z         """
2025-01-22T20:11:05.5353899Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5353971Z         try:
2025-01-22T20:11:05.5354075Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5354157Z         except KeyError as err:
2025-01-22T20:11:05.5354260Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5354358Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5354481Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5354550Z             ):
2025-01-22T20:11:05.5354651Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5354745Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5354825Z E           KeyError: 'cups'
2025-01-22T20:11:05.5354830Z 
2025-01-22T20:11:05.5355098Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5355353Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-ion_number_density] _
2025-01-22T20:11:05.5355361Z 
2025-01-22T20:11:05.5355517Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5355724Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5355804Z        't046000', 't048000'],
2025-01-22T20:11:05.5355880Z       dtype='object')
2025-01-22T20:11:05.5355955Z key = 'cups'
2025-01-22T20:11:05.5355960Z 
2025-01-22T20:11:05.5356044Z     def get_loc(self, key):
2025-01-22T20:11:05.5356111Z         """
2025-01-22T20:11:05.5356280Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5356346Z     
2025-01-22T20:11:05.5356423Z         Parameters
2025-01-22T20:11:05.5356495Z         ----------
2025-01-22T20:11:05.5356572Z         key : label
2025-01-22T20:11:05.5356638Z     
2025-01-22T20:11:05.5356710Z         Returns
2025-01-22T20:11:05.5356780Z         -------
2025-01-22T20:11:05.5356912Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5356981Z     
2025-01-22T20:11:05.5357055Z         Examples
2025-01-22T20:11:05.5357125Z         --------
2025-01-22T20:11:05.5357225Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5357308Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5357383Z         1
2025-01-22T20:11:05.5357448Z     
2025-01-22T20:11:05.5357551Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5357641Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5357719Z         slice(1, 3, None)
2025-01-22T20:11:05.5357794Z     
2025-01-22T20:11:05.5357899Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5357993Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5358082Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5358154Z         """
2025-01-22T20:11:05.5358252Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5358326Z         try:
2025-01-22T20:11:05.5358565Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5358571Z 
2025-01-22T20:11:05.5358820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5358936Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5359076Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5359148Z     ???
2025-01-22T20:11:05.5359278Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5359448Z     ???
2025-01-22T20:11:05.5359715Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5359787Z     ???
2025-01-22T20:11:05.5359894Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5359899Z 
2025-01-22T20:11:05.5359969Z >   ???
2025-01-22T20:11:05.5360045Z E   KeyError: 'cups'
2025-01-22T20:11:05.5360049Z 
2025-01-22T20:11:05.5360181Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5360185Z 
2025-01-22T20:11:05.5360350Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5360359Z 
2025-01-22T20:11:05.5360578Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5360896Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5361512Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5361521Z 
2025-01-22T20:11:05.5361613Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5361687Z     def plasma(
2025-01-22T20:11:05.5361762Z         self,
2025-01-22T20:11:05.5361843Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5361920Z         config,
2025-01-22T20:11:05.5361986Z     ):
2025-01-22T20:11:05.5362105Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5362206Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5362211Z 
2025-01-22T20:11:05.5362332Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5362446Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5362550Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5362642Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5362812Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5362915Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5363026Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5363109Z     return BasePlasma(
2025-01-22T20:11:05.5363193Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5363287Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5363386Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5363465Z     self.update(**kwargs)
2025-01-22T20:11:05.5363676Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5363799Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5363914Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5364024Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5364224Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5364381Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5364591Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5364691Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5364817Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5364989Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5365158Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5365452Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5365710Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5365885Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5366068Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5366170Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5366528Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5366650Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5366895Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5366983Z     return self.apply_standard()
2025-01-22T20:11:05.5367262Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5367386Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5367693Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5367814Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5368028Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5368118Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5368383Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5368470Z     return self._get_value(key)
2025-01-22T20:11:05.5368725Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5368824Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5368930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5368938Z 
2025-01-22T20:11:05.5369098Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5369305Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5369385Z        't046000', 't048000'],
2025-01-22T20:11:05.5369466Z       dtype='object')
2025-01-22T20:11:05.5369537Z key = 'cups'
2025-01-22T20:11:05.5369542Z 
2025-01-22T20:11:05.5369627Z     def get_loc(self, key):
2025-01-22T20:11:05.5369697Z         """
2025-01-22T20:11:05.5369859Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5369925Z     
2025-01-22T20:11:05.5370002Z         Parameters
2025-01-22T20:11:05.5370073Z         ----------
2025-01-22T20:11:05.5370149Z         key : label
2025-01-22T20:11:05.5370214Z     
2025-01-22T20:11:05.5370289Z         Returns
2025-01-22T20:11:05.5370359Z         -------
2025-01-22T20:11:05.5370492Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5370562Z     
2025-01-22T20:11:05.5370637Z         Examples
2025-01-22T20:11:05.5370706Z         --------
2025-01-22T20:11:05.5370809Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5370899Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5370967Z         1
2025-01-22T20:11:05.5371037Z     
2025-01-22T20:11:05.5371143Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5371235Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5371313Z         slice(1, 3, None)
2025-01-22T20:11:05.5371383Z     
2025-01-22T20:11:05.5371489Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5371583Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5371674Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5371745Z         """
2025-01-22T20:11:05.5371846Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5371921Z         try:
2025-01-22T20:11:05.5372108Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5372194Z         except KeyError as err:
2025-01-22T20:11:05.5372291Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5372395Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5372517Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5372586Z             ):
2025-01-22T20:11:05.5372682Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5372767Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5372927Z E           KeyError: 'cups'
2025-01-22T20:11:05.5372931Z 
2025-01-22T20:11:05.5373195Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5373456Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-electron_densities] _
2025-01-22T20:11:05.5373461Z 
2025-01-22T20:11:05.5373738Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5373955Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5374034Z        't046000', 't048000'],
2025-01-22T20:11:05.5374108Z       dtype='object')
2025-01-22T20:11:05.5374183Z key = 'cups'
2025-01-22T20:11:05.5374188Z 
2025-01-22T20:11:05.5374267Z     def get_loc(self, key):
2025-01-22T20:11:05.5374338Z         """
2025-01-22T20:11:05.5374493Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5374567Z     
2025-01-22T20:11:05.5374639Z         Parameters
2025-01-22T20:11:05.5374716Z         ----------
2025-01-22T20:11:05.5374788Z         key : label
2025-01-22T20:11:05.5374857Z     
2025-01-22T20:11:05.5374928Z         Returns
2025-01-22T20:11:05.5375002Z         -------
2025-01-22T20:11:05.5375129Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5375200Z     
2025-01-22T20:11:05.5375272Z         Examples
2025-01-22T20:11:05.5375346Z         --------
2025-01-22T20:11:05.5375448Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5375532Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5375607Z         1
2025-01-22T20:11:05.5375672Z     
2025-01-22T20:11:05.5375775Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5375862Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5375941Z         slice(1, 3, None)
2025-01-22T20:11:05.5376007Z     
2025-01-22T20:11:05.5376118Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5376207Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5376302Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5376370Z         """
2025-01-22T20:11:05.5376477Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5376545Z         try:
2025-01-22T20:11:05.5376647Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5376655Z 
2025-01-22T20:11:05.5376899Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5377012Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5377150Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5377218Z     ???
2025-01-22T20:11:05.5377353Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5377422Z     ???
2025-01-22T20:11:05.5377696Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5377766Z     ???
2025-01-22T20:11:05.5377876Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5377880Z 
2025-01-22T20:11:05.5377946Z >   ???
2025-01-22T20:11:05.5378029Z E   KeyError: 'cups'
2025-01-22T20:11:05.5378033Z 
2025-01-22T20:11:05.5378158Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5378282Z 
2025-01-22T20:11:05.5378450Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5378454Z 
2025-01-22T20:11:05.5378676Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5379000Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5379617Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5379721Z 
2025-01-22T20:11:05.5379808Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5379885Z     def plasma(
2025-01-22T20:11:05.5379953Z         self,
2025-01-22T20:11:05.5380038Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5380112Z         config,
2025-01-22T20:11:05.5380180Z     ):
2025-01-22T20:11:05.5380304Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5380401Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5380405Z 
2025-01-22T20:11:05.5380535Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5380650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5380761Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5380845Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5381021Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5381123Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5381239Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5381318Z     return BasePlasma(
2025-01-22T20:11:05.5381409Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5381501Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5381591Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5381674Z     self.update(**kwargs)
2025-01-22T20:11:05.5381766Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5381890Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5381999Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5382106Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5382305Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5382464Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5382673Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5382777Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5382908Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5383080Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5383256Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5383428Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5383815Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5383990Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5384174Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5384276Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5384535Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5384663Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5384909Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5384995Z     return self.apply_standard()
2025-01-22T20:11:05.5385276Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5385402Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5385847Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5385971Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5386185Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5386275Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5386538Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5386724Z     return self._get_value(key)
2025-01-22T20:11:05.5386982Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5387074Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5387186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5387190Z 
2025-01-22T20:11:05.5387347Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5387564Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5387643Z        't046000', 't048000'],
2025-01-22T20:11:05.5387723Z       dtype='object')
2025-01-22T20:11:05.5387798Z key = 'cups'
2025-01-22T20:11:05.5387803Z 
2025-01-22T20:11:05.5387887Z     def get_loc(self, key):
2025-01-22T20:11:05.5387957Z         """
2025-01-22T20:11:05.5388119Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5388188Z     
2025-01-22T20:11:05.5388265Z         Parameters
2025-01-22T20:11:05.5388337Z         ----------
2025-01-22T20:11:05.5388415Z         key : label
2025-01-22T20:11:05.5388484Z     
2025-01-22T20:11:05.5388552Z         Returns
2025-01-22T20:11:05.5388626Z         -------
2025-01-22T20:11:05.5388758Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5388836Z     
2025-01-22T20:11:05.5388908Z         Examples
2025-01-22T20:11:05.5388982Z         --------
2025-01-22T20:11:05.5389081Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5389171Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5389239Z         1
2025-01-22T20:11:05.5389310Z     
2025-01-22T20:11:05.5389413Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5389507Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5389582Z         slice(1, 3, None)
2025-01-22T20:11:05.5389653Z     
2025-01-22T20:11:05.5389763Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5389859Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5389947Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5390020Z         """
2025-01-22T20:11:05.5390127Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5390195Z         try:
2025-01-22T20:11:05.5390298Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5390382Z         except KeyError as err:
2025-01-22T20:11:05.5390483Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5390584Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5390708Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5390778Z             ):
2025-01-22T20:11:05.5390874Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5390962Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5391048Z E           KeyError: 'cups'
2025-01-22T20:11:05.5391055Z 
2025-01-22T20:11:05.5391321Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5391585Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-level_number_density] _
2025-01-22T20:11:05.5391590Z 
2025-01-22T20:11:05.5391746Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5392042Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5392121Z        't046000', 't048000'],
2025-01-22T20:11:05.5392195Z       dtype='object')
2025-01-22T20:11:05.5392273Z key = 'cups'
2025-01-22T20:11:05.5392277Z 
2025-01-22T20:11:05.5392355Z     def get_loc(self, key):
2025-01-22T20:11:05.5392427Z         """
2025-01-22T20:11:05.5392583Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5392654Z     
2025-01-22T20:11:05.5392798Z         Parameters
2025-01-22T20:11:05.5392872Z         ----------
2025-01-22T20:11:05.5392944Z         key : label
2025-01-22T20:11:05.5393014Z     
2025-01-22T20:11:05.5393087Z         Returns
2025-01-22T20:11:05.5393156Z         -------
2025-01-22T20:11:05.5393291Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5393359Z     
2025-01-22T20:11:05.5393432Z         Examples
2025-01-22T20:11:05.5393611Z         --------
2025-01-22T20:11:05.5393718Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5393804Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5393876Z         1
2025-01-22T20:11:05.5393941Z     
2025-01-22T20:11:05.5394045Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5394131Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5394210Z         slice(1, 3, None)
2025-01-22T20:11:05.5394277Z     
2025-01-22T20:11:05.5394386Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5394478Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5394571Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5394639Z         """
2025-01-22T20:11:05.5394744Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5394816Z         try:
2025-01-22T20:11:05.5394915Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5394919Z 
2025-01-22T20:11:05.5395166Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5395279Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5395419Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5395486Z     ???
2025-01-22T20:11:05.5395621Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5395688Z     ???
2025-01-22T20:11:05.5395959Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5396029Z     ???
2025-01-22T20:11:05.5396139Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5396144Z 
2025-01-22T20:11:05.5396213Z >   ???
2025-01-22T20:11:05.5396289Z E   KeyError: 'cups'
2025-01-22T20:11:05.5396293Z 
2025-01-22T20:11:05.5396424Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5396429Z 
2025-01-22T20:11:05.5396596Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5396603Z 
2025-01-22T20:11:05.5396829Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5397148Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5397771Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5397780Z 
2025-01-22T20:11:05.5397876Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5397949Z     def plasma(
2025-01-22T20:11:05.5398021Z         self,
2025-01-22T20:11:05.5398101Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5398175Z         config,
2025-01-22T20:11:05.5398241Z     ):
2025-01-22T20:11:05.5398357Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5398571Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5398576Z 
2025-01-22T20:11:05.5398702Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5398813Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5398921Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5399005Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5399177Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5399281Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5399492Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5399575Z     return BasePlasma(
2025-01-22T20:11:05.5399659Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5399748Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5399836Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5399921Z     self.update(**kwargs)
2025-01-22T20:11:05.5400011Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5400140Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5400248Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5400354Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5400552Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5400707Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5400923Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5401023Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5401158Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5401323Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5401498Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5401669Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5401935Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5402104Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5402290Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5402392Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5402659Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5402786Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5403028Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5403120Z     return self.apply_standard()
2025-01-22T20:11:05.5403395Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5403631Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5403941Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5404066Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5404281Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5404372Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5404634Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5404722Z     return self._get_value(key)
2025-01-22T20:11:05.5404987Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5405074Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5405187Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5405192Z 
2025-01-22T20:11:05.5405347Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5405683Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5405756Z        't046000', 't048000'],
2025-01-22T20:11:05.5405837Z       dtype='object')
2025-01-22T20:11:05.5405908Z key = 'cups'
2025-01-22T20:11:05.5405913Z 
2025-01-22T20:11:05.5405996Z     def get_loc(self, key):
2025-01-22T20:11:05.5406068Z         """
2025-01-22T20:11:05.5406230Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5406302Z     
2025-01-22T20:11:05.5406495Z         Parameters
2025-01-22T20:11:05.5406571Z         ----------
2025-01-22T20:11:05.5406642Z         key : label
2025-01-22T20:11:05.5406712Z     
2025-01-22T20:11:05.5406785Z         Returns
2025-01-22T20:11:05.5406859Z         -------
2025-01-22T20:11:05.5406989Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5407059Z     
2025-01-22T20:11:05.5407129Z         Examples
2025-01-22T20:11:05.5407204Z         --------
2025-01-22T20:11:05.5407304Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5407395Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5407462Z         1
2025-01-22T20:11:05.5407532Z     
2025-01-22T20:11:05.5407632Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5407724Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5407803Z         slice(1, 3, None)
2025-01-22T20:11:05.5407871Z     
2025-01-22T20:11:05.5407981Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5408075Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5408170Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5408238Z         """
2025-01-22T20:11:05.5408344Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5408413Z         try:
2025-01-22T20:11:05.5408514Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5408597Z         except KeyError as err:
2025-01-22T20:11:05.5408701Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5408799Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5408920Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5408988Z             ):
2025-01-22T20:11:05.5409085Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5409170Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5409255Z E           KeyError: 'cups'
2025-01-22T20:11:05.5409260Z 
2025-01-22T20:11:05.5409527Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5409812Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] _
2025-01-22T20:11:05.5409817Z 
2025-01-22T20:11:05.5409975Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5410183Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5410267Z        't046000', 't048000'],
2025-01-22T20:11:05.5410342Z       dtype='object')
2025-01-22T20:11:05.5410418Z key = 'cups'
2025-01-22T20:11:05.5410423Z 
2025-01-22T20:11:05.5410502Z     def get_loc(self, key):
2025-01-22T20:11:05.5410576Z         """
2025-01-22T20:11:05.5410736Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5410802Z     
2025-01-22T20:11:05.5410879Z         Parameters
2025-01-22T20:11:05.5410951Z         ----------
2025-01-22T20:11:05.5411030Z         key : label
2025-01-22T20:11:05.5411095Z     
2025-01-22T20:11:05.5411168Z         Returns
2025-01-22T20:11:05.5411240Z         -------
2025-01-22T20:11:05.5411377Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5411443Z     
2025-01-22T20:11:05.5411516Z         Examples
2025-01-22T20:11:05.5411586Z         --------
2025-01-22T20:11:05.5411687Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5411877Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5411949Z         1
2025-01-22T20:11:05.5412015Z     
2025-01-22T20:11:05.5412120Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5412205Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5412285Z         slice(1, 3, None)
2025-01-22T20:11:05.5412356Z     
2025-01-22T20:11:05.5412462Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5412555Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5412749Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5412870Z         """
2025-01-22T20:11:05.5413042Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5413157Z         try:
2025-01-22T20:11:05.5413305Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5413313Z 
2025-01-22T20:11:05.5413738Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5413858Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5414003Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5414072Z     ???
2025-01-22T20:11:05.5414209Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5414280Z     ???
2025-01-22T20:11:05.5414548Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5414618Z     ???
2025-01-22T20:11:05.5414723Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5414730Z 
2025-01-22T20:11:05.5414800Z >   ???
2025-01-22T20:11:05.5414878Z E   KeyError: 'cups'
2025-01-22T20:11:05.5414883Z 
2025-01-22T20:11:05.5415014Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5415019Z 
2025-01-22T20:11:05.5415184Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5415189Z 
2025-01-22T20:11:05.5415418Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5415743Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5416362Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5416371Z 
2025-01-22T20:11:05.5416479Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5416558Z     def plasma(
2025-01-22T20:11:05.5416635Z         self,
2025-01-22T20:11:05.5416715Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5416790Z         config,
2025-01-22T20:11:05.5416856Z     ):
2025-01-22T20:11:05.5416972Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5417065Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5417078Z 
2025-01-22T20:11:05.5417197Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5417307Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5417761Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5417849Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5418014Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5418118Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5418227Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5418313Z     return BasePlasma(
2025-01-22T20:11:05.5418398Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5418492Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5418579Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5418663Z     self.update(**kwargs)
2025-01-22T20:11:05.5418750Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5418881Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5419135Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5419235Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5419441Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5419591Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5419805Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5419899Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5420133Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5420299Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5420474Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5420641Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5420902Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5421083Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5421262Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5421369Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5421624Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5421751Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5421990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5422084Z     return self.apply_standard()
2025-01-22T20:11:05.5422390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5422514Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5422817Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5422940Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5423160Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5423245Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5423604Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5423688Z     return self._get_value(key)
2025-01-22T20:11:05.5423952Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5424041Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5424152Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5424157Z 
2025-01-22T20:11:05.5424311Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5424526Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5424610Z        't046000', 't048000'],
2025-01-22T20:11:05.5424684Z       dtype='object')
2025-01-22T20:11:05.5424759Z key = 'cups'
2025-01-22T20:11:05.5424763Z 
2025-01-22T20:11:05.5424841Z     def get_loc(self, key):
2025-01-22T20:11:05.5424914Z         """
2025-01-22T20:11:05.5425067Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5425138Z     
2025-01-22T20:11:05.5425210Z         Parameters
2025-01-22T20:11:05.5425286Z         ----------
2025-01-22T20:11:05.5425361Z         key : label
2025-01-22T20:11:05.5425432Z     
2025-01-22T20:11:05.5425501Z         Returns
2025-01-22T20:11:05.5425575Z         -------
2025-01-22T20:11:05.5425703Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5425775Z     
2025-01-22T20:11:05.5425843Z         Examples
2025-01-22T20:11:05.5425919Z         --------
2025-01-22T20:11:05.5426021Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5426222Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5426295Z         1
2025-01-22T20:11:05.5426361Z     
2025-01-22T20:11:05.5426469Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5426557Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5426636Z         slice(1, 3, None)
2025-01-22T20:11:05.5426701Z     
2025-01-22T20:11:05.5426813Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5426902Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5427097Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5427164Z         """
2025-01-22T20:11:05.5427269Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5427340Z         try:
2025-01-22T20:11:05.5427442Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5427524Z         except KeyError as err:
2025-01-22T20:11:05.5427624Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5427732Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5427849Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5427922Z             ):
2025-01-22T20:11:05.5428013Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5428104Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5428183Z E           KeyError: 'cups'
2025-01-22T20:11:05.5428187Z 
2025-01-22T20:11:05.5428456Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5428724Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] _
2025-01-22T20:11:05.5428729Z 
2025-01-22T20:11:05.5428889Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5429098Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5429172Z        't046000', 't048000'],
2025-01-22T20:11:05.5429255Z       dtype='object')
2025-01-22T20:11:05.5429326Z key = 'cups'
2025-01-22T20:11:05.5429330Z 
2025-01-22T20:11:05.5429413Z     def get_loc(self, key):
2025-01-22T20:11:05.5429479Z         """
2025-01-22T20:11:05.5429639Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5429704Z     
2025-01-22T20:11:05.5429781Z         Parameters
2025-01-22T20:11:05.5429850Z         ----------
2025-01-22T20:11:05.5429926Z         key : label
2025-01-22T20:11:05.5429995Z     
2025-01-22T20:11:05.5430069Z         Returns
2025-01-22T20:11:05.5430139Z         -------
2025-01-22T20:11:05.5430273Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5430339Z     
2025-01-22T20:11:05.5430412Z         Examples
2025-01-22T20:11:05.5430486Z         --------
2025-01-22T20:11:05.5430580Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5430672Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5430743Z         1
2025-01-22T20:11:05.5430813Z     
2025-01-22T20:11:05.5430912Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5431002Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5431075Z         slice(1, 3, None)
2025-01-22T20:11:05.5431146Z     
2025-01-22T20:11:05.5431250Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5431348Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5431437Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5431513Z         """
2025-01-22T20:11:05.5431612Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5431687Z         try:
2025-01-22T20:11:05.5431784Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5431794Z 
2025-01-22T20:11:05.5432035Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5432147Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5432368Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5432440Z     ???
2025-01-22T20:11:05.5432569Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5432640Z     ???
2025-01-22T20:11:05.5432909Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5432983Z     ???
2025-01-22T20:11:05.5433089Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5433190Z 
2025-01-22T20:11:05.5433262Z >   ???
2025-01-22T20:11:05.5433338Z E   KeyError: 'cups'
2025-01-22T20:11:05.5433343Z 
2025-01-22T20:11:05.5433474Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5433479Z 
2025-01-22T20:11:05.5433771Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5433777Z 
2025-01-22T20:11:05.5433998Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5434324Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5434937Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5434943Z 
2025-01-22T20:11:05.5435035Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5435121Z     def plasma(
2025-01-22T20:11:05.5435190Z         self,
2025-01-22T20:11:05.5435278Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5435347Z         config,
2025-01-22T20:11:05.5435419Z     ):
2025-01-22T20:11:05.5435530Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5435629Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5435633Z 
2025-01-22T20:11:05.5435752Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5435866Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5435970Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5436060Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5436222Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5436328Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5436437Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5436518Z     return BasePlasma(
2025-01-22T20:11:05.5436612Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5436699Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5436793Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5436871Z     self.update(**kwargs)
2025-01-22T20:11:05.5436962Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5437081Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5437196Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5437299Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5437500Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5437649Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5437861Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5437955Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5438087Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5438260Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5438428Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5438602Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5438859Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5439042Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5439339Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5439447Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5439694Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5439821Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5440059Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5440250Z     return self.apply_standard()
2025-01-22T20:11:05.5440528Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5440645Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5440957Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5441071Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5441294Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5441380Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5441646Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5441727Z     return self._get_value(key)
2025-01-22T20:11:05.5441988Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5442076Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5442186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5442191Z 
2025-01-22T20:11:05.5442348Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5442552Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5442632Z        't046000', 't048000'],
2025-01-22T20:11:05.5442709Z       dtype='object')
2025-01-22T20:11:05.5442785Z key = 'cups'
2025-01-22T20:11:05.5442791Z 
2025-01-22T20:11:05.5442870Z     def get_loc(self, key):
2025-01-22T20:11:05.5442943Z         """
2025-01-22T20:11:05.5443098Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5443170Z     
2025-01-22T20:11:05.5443242Z         Parameters
2025-01-22T20:11:05.5443318Z         ----------
2025-01-22T20:11:05.5443394Z         key : label
2025-01-22T20:11:05.5443463Z     
2025-01-22T20:11:05.5443651Z         Returns
2025-01-22T20:11:05.5443723Z         -------
2025-01-22T20:11:05.5443858Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5443924Z     
2025-01-22T20:11:05.5443998Z         Examples
2025-01-22T20:11:05.5444071Z         --------
2025-01-22T20:11:05.5444172Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5444257Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5444332Z         1
2025-01-22T20:11:05.5444397Z     
2025-01-22T20:11:05.5444505Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5444593Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5444672Z         slice(1, 3, None)
2025-01-22T20:11:05.5444739Z     
2025-01-22T20:11:05.5444852Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5444942Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5445037Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5445112Z         """
2025-01-22T20:11:05.5445215Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5445288Z         try:
2025-01-22T20:11:05.5445386Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5445473Z         except KeyError as err:
2025-01-22T20:11:05.5445568Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5445673Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5445911Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5445984Z             ):
2025-01-22T20:11:05.5446075Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5446169Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5446248Z E           KeyError: 'cups'
2025-01-22T20:11:05.5446252Z 
2025-01-22T20:11:05.5446518Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5446769Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] _
2025-01-22T20:11:05.5446876Z 
2025-01-22T20:11:05.5447032Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5447242Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5447315Z        't046000', 't048000'],
2025-01-22T20:11:05.5447395Z       dtype='object')
2025-01-22T20:11:05.5447471Z key = 'cups'
2025-01-22T20:11:05.5447475Z 
2025-01-22T20:11:05.5447560Z     def get_loc(self, key):
2025-01-22T20:11:05.5447627Z         """
2025-01-22T20:11:05.5447787Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5447852Z     
2025-01-22T20:11:05.5447929Z         Parameters
2025-01-22T20:11:05.5448000Z         ----------
2025-01-22T20:11:05.5448076Z         key : label
2025-01-22T20:11:05.5448145Z     
2025-01-22T20:11:05.5448213Z         Returns
2025-01-22T20:11:05.5448289Z         -------
2025-01-22T20:11:05.5448425Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5448496Z     
2025-01-22T20:11:05.5448564Z         Examples
2025-01-22T20:11:05.5448637Z         --------
2025-01-22T20:11:05.5448731Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5448820Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5448888Z         1
2025-01-22T20:11:05.5448961Z     
2025-01-22T20:11:05.5449064Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5449155Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5449229Z         slice(1, 3, None)
2025-01-22T20:11:05.5449301Z     
2025-01-22T20:11:05.5449407Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5449505Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5449592Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5449665Z         """
2025-01-22T20:11:05.5449770Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5449841Z         try:
2025-01-22T20:11:05.5449943Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5449948Z 
2025-01-22T20:11:05.5450188Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5450299Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5450434Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5450509Z     ???
2025-01-22T20:11:05.5450639Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5450710Z     ???
2025-01-22T20:11:05.5450975Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5451047Z     ???
2025-01-22T20:11:05.5451151Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5451161Z 
2025-01-22T20:11:05.5451227Z >   ???
2025-01-22T20:11:05.5451308Z E   KeyError: 'cups'
2025-01-22T20:11:05.5451315Z 
2025-01-22T20:11:05.5451439Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5451444Z 
2025-01-22T20:11:05.5451611Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5451616Z 
2025-01-22T20:11:05.5451834Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5452156Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5452863Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5452874Z 
2025-01-22T20:11:05.5452962Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5453040Z     def plasma(
2025-01-22T20:11:05.5453108Z         self,
2025-01-22T20:11:05.5453266Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5453335Z         config,
2025-01-22T20:11:05.5453406Z     ):
2025-01-22T20:11:05.5453610Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5453712Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5453717Z 
2025-01-22T20:11:05.5453838Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5453948Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5454056Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5454144Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5454314Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5454413Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5454526Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5454604Z     return BasePlasma(
2025-01-22T20:11:05.5454692Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5454778Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5454875Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5454953Z     self.update(**kwargs)
2025-01-22T20:11:05.5455045Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5455164Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5455281Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5455382Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5455589Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5455738Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5455950Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5456050Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5456175Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5456344Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5456515Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5456688Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5456943Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5457118Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5457296Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5457407Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5457661Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5457783Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5458025Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5458111Z     return self.apply_standard()
2025-01-22T20:11:05.5458390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5458510Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5458820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5458936Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5459154Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5459384Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5459653Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5459741Z     return self._get_value(key)
2025-01-22T20:11:05.5459997Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5460089Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5460195Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5460298Z 
2025-01-22T20:11:05.5460458Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5460666Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5460745Z        't046000', 't048000'],
2025-01-22T20:11:05.5460819Z       dtype='object')
2025-01-22T20:11:05.5460908Z key = 'cups'
2025-01-22T20:11:05.5460918Z 
2025-01-22T20:11:05.5461003Z     def get_loc(self, key):
2025-01-22T20:11:05.5461070Z         """
2025-01-22T20:11:05.5461231Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5461298Z     
2025-01-22T20:11:05.5461374Z         Parameters
2025-01-22T20:11:05.5461444Z         ----------
2025-01-22T20:11:05.5461520Z         key : label
2025-01-22T20:11:05.5461590Z     
2025-01-22T20:11:05.5461663Z         Returns
2025-01-22T20:11:05.5461733Z         -------
2025-01-22T20:11:05.5461872Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5461939Z     
2025-01-22T20:11:05.5462013Z         Examples
2025-01-22T20:11:05.5462083Z         --------
2025-01-22T20:11:05.5462186Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5462271Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5462345Z         1
2025-01-22T20:11:05.5462419Z     
2025-01-22T20:11:05.5462532Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5462619Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5462700Z         slice(1, 3, None)
2025-01-22T20:11:05.5462770Z     
2025-01-22T20:11:05.5462876Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5462970Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5463059Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5463131Z         """
2025-01-22T20:11:05.5463232Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5463307Z         try:
2025-01-22T20:11:05.5463404Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5463603Z         except KeyError as err:
2025-01-22T20:11:05.5463703Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5463807Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5463924Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5464002Z             ):
2025-01-22T20:11:05.5464095Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5464186Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5464269Z E           KeyError: 'cups'
2025-01-22T20:11:05.5464274Z 
2025-01-22T20:11:05.5464535Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5464780Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] _
2025-01-22T20:11:05.5464788Z 
2025-01-22T20:11:05.5464941Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5465150Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5465222Z        't046000', 't048000'],
2025-01-22T20:11:05.5465301Z       dtype='object')
2025-01-22T20:11:05.5465371Z key = 'cups'
2025-01-22T20:11:05.5465376Z 
2025-01-22T20:11:05.5465460Z     def get_loc(self, key):
2025-01-22T20:11:05.5465653Z         """
2025-01-22T20:11:05.5465810Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5465884Z     
2025-01-22T20:11:05.5465956Z         Parameters
2025-01-22T20:11:05.5466031Z         ----------
2025-01-22T20:11:05.5466105Z         key : label
2025-01-22T20:11:05.5466176Z     
2025-01-22T20:11:05.5466244Z         Returns
2025-01-22T20:11:05.5466318Z         -------
2025-01-22T20:11:05.5466444Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5466620Z     
2025-01-22T20:11:05.5466690Z         Examples
2025-01-22T20:11:05.5466766Z         --------
2025-01-22T20:11:05.5466860Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5466952Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5467019Z         1
2025-01-22T20:11:05.5467092Z     
2025-01-22T20:11:05.5467194Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5467286Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5467370Z         slice(1, 3, None)
2025-01-22T20:11:05.5467436Z     
2025-01-22T20:11:05.5467548Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5467637Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5467729Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5467795Z         """
2025-01-22T20:11:05.5467898Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5467967Z         try:
2025-01-22T20:11:05.5468068Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5468076Z 
2025-01-22T20:11:05.5468314Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5468426Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5468560Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5468631Z     ???
2025-01-22T20:11:05.5468762Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5468837Z     ???
2025-01-22T20:11:05.5469112Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5469179Z     ???
2025-01-22T20:11:05.5469288Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5469293Z 
2025-01-22T20:11:05.5469358Z >   ???
2025-01-22T20:11:05.5469445Z E   KeyError: 'cups'
2025-01-22T20:11:05.5469450Z 
2025-01-22T20:11:05.5469582Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5469590Z 
2025-01-22T20:11:05.5469759Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5469763Z 
2025-01-22T20:11:05.5469982Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5470304Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5470925Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5470930Z 
2025-01-22T20:11:05.5471018Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5471096Z     def plasma(
2025-01-22T20:11:05.5471167Z         self,
2025-01-22T20:11:05.5471252Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5471319Z         config,
2025-01-22T20:11:05.5471393Z     ):
2025-01-22T20:11:05.5471504Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5471604Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5471609Z 
2025-01-22T20:11:05.5471734Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5471839Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5471948Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5472117Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5472289Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5472389Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5472502Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5472579Z     return BasePlasma(
2025-01-22T20:11:05.5472667Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5472752Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5472844Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5472997Z     self.update(**kwargs)
2025-01-22T20:11:05.5473089Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5473211Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5473325Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5473430Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5473744Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5473909Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5474118Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5474216Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5474342Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5474512Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5474678Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5474856Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5475111Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5475286Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5475469Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5475570Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5475826Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5475949Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5476189Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5476276Z     return self.apply_standard()
2025-01-22T20:11:05.5476553Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5476674Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5476981Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5477102Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5477315Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5477404Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5477667Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5477756Z     return self._get_value(key)
2025-01-22T20:11:05.5478010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5478100Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5478207Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5478215Z 
2025-01-22T20:11:05.5478374Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5478580Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5478660Z        't046000', 't048000'],
2025-01-22T20:11:05.5478741Z       dtype='object')
2025-01-22T20:11:05.5478812Z key = 'cups'
2025-01-22T20:11:05.5478816Z 
2025-01-22T20:11:05.5479050Z     def get_loc(self, key):
2025-01-22T20:11:05.5479118Z         """
2025-01-22T20:11:05.5479280Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5479345Z     
2025-01-22T20:11:05.5479422Z         Parameters
2025-01-22T20:11:05.5479492Z         ----------
2025-01-22T20:11:05.5479567Z         key : label
2025-01-22T20:11:05.5479633Z     
2025-01-22T20:11:05.5479706Z         Returns
2025-01-22T20:11:05.5479774Z         -------
2025-01-22T20:11:05.5479907Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5480092Z     
2025-01-22T20:11:05.5480168Z         Examples
2025-01-22T20:11:05.5480238Z         --------
2025-01-22T20:11:05.5480338Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5480425Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5480493Z         1
2025-01-22T20:11:05.5480563Z     
2025-01-22T20:11:05.5480664Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5480760Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5480834Z         slice(1, 3, None)
2025-01-22T20:11:05.5480905Z     
2025-01-22T20:11:05.5481012Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5481105Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5481193Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5481265Z         """
2025-01-22T20:11:05.5481365Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5481438Z         try:
2025-01-22T20:11:05.5481539Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5481624Z         except KeyError as err:
2025-01-22T20:11:05.5481720Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5481825Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5481948Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5482017Z             ):
2025-01-22T20:11:05.5482113Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5482202Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5482286Z E           KeyError: 'cups'
2025-01-22T20:11:05.5482290Z 
2025-01-22T20:11:05.5482552Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5482834Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-transition_probabilities] _
2025-01-22T20:11:05.5482839Z 
2025-01-22T20:11:05.5482990Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5483201Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5483280Z        't046000', 't048000'],
2025-01-22T20:11:05.5483354Z       dtype='object')
2025-01-22T20:11:05.5483430Z key = 'cups'
2025-01-22T20:11:05.5483434Z 
2025-01-22T20:11:05.5483625Z     def get_loc(self, key):
2025-01-22T20:11:05.5483701Z         """
2025-01-22T20:11:05.5483860Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5483930Z     
2025-01-22T20:11:05.5484002Z         Parameters
2025-01-22T20:11:05.5484078Z         ----------
2025-01-22T20:11:05.5484149Z         key : label
2025-01-22T20:11:05.5484220Z     
2025-01-22T20:11:05.5484287Z         Returns
2025-01-22T20:11:05.5484360Z         -------
2025-01-22T20:11:05.5484487Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5484558Z     
2025-01-22T20:11:05.5484626Z         Examples
2025-01-22T20:11:05.5484704Z         --------
2025-01-22T20:11:05.5484804Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5484888Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5484960Z         1
2025-01-22T20:11:05.5485026Z     
2025-01-22T20:11:05.5485129Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5485215Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5485295Z         slice(1, 3, None)
2025-01-22T20:11:05.5485499Z     
2025-01-22T20:11:05.5485613Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5485701Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5485795Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5485862Z         """
2025-01-22T20:11:05.5485966Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5486035Z         try:
2025-01-22T20:11:05.5486136Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5486243Z 
2025-01-22T20:11:05.5486499Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5486611Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5486752Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5486819Z     ???
2025-01-22T20:11:05.5486955Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5487025Z     ???
2025-01-22T20:11:05.5487300Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5487376Z     ???
2025-01-22T20:11:05.5491546Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5491568Z 
2025-01-22T20:11:05.5491652Z >   ???
2025-01-22T20:11:05.5491748Z E   KeyError: 'cups'
2025-01-22T20:11:05.5491753Z 
2025-01-22T20:11:05.5491907Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5491912Z 
2025-01-22T20:11:05.5492106Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5492111Z 
2025-01-22T20:11:05.5492346Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5492676Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5493318Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5493328Z 
2025-01-22T20:11:05.5493422Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5493657Z     def plasma(
2025-01-22T20:11:05.5493733Z         self,
2025-01-22T20:11:05.5493825Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5493895Z         config,
2025-01-22T20:11:05.5493969Z     ):
2025-01-22T20:11:05.5494094Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5494205Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5494209Z 
2025-01-22T20:11:05.5494346Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5494465Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5494580Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5494666Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5494846Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5494950Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5495068Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5495148Z     return BasePlasma(
2025-01-22T20:11:05.5495245Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5495340Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5495439Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5495522Z     self.update(**kwargs)
2025-01-22T20:11:05.5495625Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5495759Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5495876Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5495986Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5496192Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5496354Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5496725Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5496834Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5496966Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5497143Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5497317Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5497495Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5497869Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5498045Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5498236Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5498342Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5498611Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5498744Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5498994Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5499085Z     return self.apply_standard()
2025-01-22T20:11:05.5499373Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5499494Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5499810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5499937Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5500155Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5500250Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5500516Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5500610Z     return self._get_value(key)
2025-01-22T20:11:05.5500867Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5500962Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5501077Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5501081Z 
2025-01-22T20:11:05.5501250Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5501471Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5501548Z        't046000', 't048000'],
2025-01-22T20:11:05.5501632Z       dtype='object')
2025-01-22T20:11:05.5501705Z key = 'cups'
2025-01-22T20:11:05.5501710Z 
2025-01-22T20:11:05.5501800Z     def get_loc(self, key):
2025-01-22T20:11:05.5501871Z         """
2025-01-22T20:11:05.5502040Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5502108Z     
2025-01-22T20:11:05.5502191Z         Parameters
2025-01-22T20:11:05.5502267Z         ----------
2025-01-22T20:11:05.5502353Z         key : label
2025-01-22T20:11:05.5502421Z     
2025-01-22T20:11:05.5502500Z         Returns
2025-01-22T20:11:05.5502573Z         -------
2025-01-22T20:11:05.5502717Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5502785Z     
2025-01-22T20:11:05.5502868Z         Examples
2025-01-22T20:11:05.5502946Z         --------
2025-01-22T20:11:05.5503047Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5503140Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5503208Z         1
2025-01-22T20:11:05.5503282Z     
2025-01-22T20:11:05.5503387Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5503483Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5503657Z         slice(1, 3, None)
2025-01-22T20:11:05.5503849Z     
2025-01-22T20:11:05.5503961Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5504060Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5504153Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5504228Z         """
2025-01-22T20:11:05.5504331Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5504408Z         try:
2025-01-22T20:11:05.5504510Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5504703Z         except KeyError as err:
2025-01-22T20:11:05.5504807Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5504909Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5505037Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5505110Z             ):
2025-01-22T20:11:05.5505209Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5505297Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5505390Z E           KeyError: 'cups'
2025-01-22T20:11:05.5505394Z 
2025-01-22T20:11:05.5505664Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5505904Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues] _
2025-01-22T20:11:05.5505909Z 
2025-01-22T20:11:05.5506069Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5506284Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5506368Z        't046000', 't048000'],
2025-01-22T20:11:05.5506445Z       dtype='object')
2025-01-22T20:11:05.5506522Z key = 'cups'
2025-01-22T20:11:05.5506527Z 
2025-01-22T20:11:05.5506608Z     def get_loc(self, key):
2025-01-22T20:11:05.5506684Z         """
2025-01-22T20:11:05.5506842Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5506919Z     
2025-01-22T20:11:05.5506996Z         Parameters
2025-01-22T20:11:05.5507076Z         ----------
2025-01-22T20:11:05.5507151Z         key : label
2025-01-22T20:11:05.5507224Z     
2025-01-22T20:11:05.5507290Z         Returns
2025-01-22T20:11:05.5507369Z         -------
2025-01-22T20:11:05.5507499Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5507571Z     
2025-01-22T20:11:05.5507642Z         Examples
2025-01-22T20:11:05.5507717Z         --------
2025-01-22T20:11:05.5507814Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5507909Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5507977Z         1
2025-01-22T20:11:05.5508048Z     
2025-01-22T20:11:05.5508147Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5508239Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5508314Z         slice(1, 3, None)
2025-01-22T20:11:05.5508386Z     
2025-01-22T20:11:05.5508492Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5508589Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5508679Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5508752Z         """
2025-01-22T20:11:05.5508856Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5508924Z         try:
2025-01-22T20:11:05.5509026Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5509031Z 
2025-01-22T20:11:05.5509284Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5509401Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5509538Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5509611Z     ???
2025-01-22T20:11:05.5509740Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5509812Z     ???
2025-01-22T20:11:05.5510080Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5510239Z     ???
2025-01-22T20:11:05.5510345Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5510355Z 
2025-01-22T20:11:05.5510421Z >   ???
2025-01-22T20:11:05.5510503Z E   KeyError: 'cups'
2025-01-22T20:11:05.5510508Z 
2025-01-22T20:11:05.5510635Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5510639Z 
2025-01-22T20:11:05.5510816Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5510915Z 
2025-01-22T20:11:05.5511141Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5511463Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5512093Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5512108Z 
2025-01-22T20:11:05.5512198Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5512275Z     def plasma(
2025-01-22T20:11:05.5512345Z         self,
2025-01-22T20:11:05.5512430Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5512499Z         config,
2025-01-22T20:11:05.5512570Z     ):
2025-01-22T20:11:05.5512682Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5512780Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5512788Z 
2025-01-22T20:11:05.5512909Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5513018Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5513121Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5513210Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5513381Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5513484Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5513726Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5513806Z     return BasePlasma(
2025-01-22T20:11:05.5513896Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5513983Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5514075Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5514155Z     self.update(**kwargs)
2025-01-22T20:11:05.5514247Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5514369Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5514489Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5514590Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5514794Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5514944Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5515158Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5515263Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5515389Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5515559Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5515730Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5515904Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5516163Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5516342Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5516522Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5516635Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5516894Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5517144Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5517397Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5517484Z     return self.apply_standard()
2025-01-22T20:11:05.5517768Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5517886Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5518196Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5518412Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5518632Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5518717Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5518985Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5519078Z     return self._get_value(key)
2025-01-22T20:11:05.5519335Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5519430Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5519534Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5519539Z 
2025-01-22T20:11:05.5519697Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5519905Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5519987Z        't046000', 't048000'],
2025-01-22T20:11:05.5520063Z       dtype='object')
2025-01-22T20:11:05.5520142Z key = 'cups'
2025-01-22T20:11:05.5520147Z 
2025-01-22T20:11:05.5520231Z     def get_loc(self, key):
2025-01-22T20:11:05.5520301Z         """
2025-01-22T20:11:05.5520463Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5520532Z     
2025-01-22T20:11:05.5520610Z         Parameters
2025-01-22T20:11:05.5520682Z         ----------
2025-01-22T20:11:05.5520762Z         key : label
2025-01-22T20:11:05.5520828Z     
2025-01-22T20:11:05.5520901Z         Returns
2025-01-22T20:11:05.5520971Z         -------
2025-01-22T20:11:05.5521104Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5521172Z     
2025-01-22T20:11:05.5521247Z         Examples
2025-01-22T20:11:05.5521318Z         --------
2025-01-22T20:11:05.5521426Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5521510Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5521583Z         1
2025-01-22T20:11:05.5521649Z     
2025-01-22T20:11:05.5521758Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5521845Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5521925Z         slice(1, 3, None)
2025-01-22T20:11:05.5521997Z     
2025-01-22T20:11:05.5522105Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5522206Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5522329Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5522402Z         """
2025-01-22T20:11:05.5522502Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5522576Z         try:
2025-01-22T20:11:05.5522673Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5522762Z         except KeyError as err:
2025-01-22T20:11:05.5522860Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5522967Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5523083Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5523157Z             ):
2025-01-22T20:11:05.5523249Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5523341Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5523426Z E           KeyError: 'cups'
2025-01-22T20:11:05.5523635Z 
2025-01-22T20:11:05.5523908Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5524172Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues_norm_factor] _
2025-01-22T20:11:05.5524176Z 
2025-01-22T20:11:05.5524330Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5524540Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5524722Z        't046000', 't048000'],
2025-01-22T20:11:05.5524802Z       dtype='object')
2025-01-22T20:11:05.5524874Z key = 'cups'
2025-01-22T20:11:05.5524878Z 
2025-01-22T20:11:05.5524963Z     def get_loc(self, key):
2025-01-22T20:11:05.5525036Z         """
2025-01-22T20:11:05.5525194Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5525269Z     
2025-01-22T20:11:05.5525341Z         Parameters
2025-01-22T20:11:05.5525425Z         ----------
2025-01-22T20:11:05.5525495Z         key : label
2025-01-22T20:11:05.5525565Z     
2025-01-22T20:11:05.5525633Z         Returns
2025-01-22T20:11:05.5525706Z         -------
2025-01-22T20:11:05.5525834Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5525906Z     
2025-01-22T20:11:05.5525975Z         Examples
2025-01-22T20:11:05.5526051Z         --------
2025-01-22T20:11:05.5526146Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5526236Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5526308Z         1
2025-01-22T20:11:05.5526379Z     
2025-01-22T20:11:05.5526477Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5526571Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5526653Z         slice(1, 3, None)
2025-01-22T20:11:05.5526719Z     
2025-01-22T20:11:05.5526830Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5526919Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5527017Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5527084Z         """
2025-01-22T20:11:05.5527188Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5527256Z         try:
2025-01-22T20:11:05.5527360Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5527365Z 
2025-01-22T20:11:05.5527611Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5527724Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5527863Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5527936Z     ???
2025-01-22T20:11:05.5528065Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5528137Z     ???
2025-01-22T20:11:05.5528408Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5528475Z     ???
2025-01-22T20:11:05.5528592Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5528597Z 
2025-01-22T20:11:05.5528662Z >   ???
2025-01-22T20:11:05.5528745Z E   KeyError: 'cups'
2025-01-22T20:11:05.5528749Z 
2025-01-22T20:11:05.5528877Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5528882Z 
2025-01-22T20:11:05.5529053Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5529057Z 
2025-01-22T20:11:05.5529278Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5529601Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5530225Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5530345Z 
2025-01-22T20:11:05.5530434Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5530512Z     def plasma(
2025-01-22T20:11:05.5530581Z         self,
2025-01-22T20:11:05.5530666Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5530734Z         config,
2025-01-22T20:11:05.5530805Z     ):
2025-01-22T20:11:05.5530916Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5531016Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5531020Z 
2025-01-22T20:11:05.5531142Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5531320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5531430Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5531512Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5531679Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5531776Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5531894Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5531972Z     return BasePlasma(
2025-01-22T20:11:05.5532062Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5532148Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5532243Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5532322Z     self.update(**kwargs)
2025-01-22T20:11:05.5532417Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5532536Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5532651Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5532762Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5532959Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5533116Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5533322Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5533422Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5533670Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5533844Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5534013Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5534186Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5534448Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5534624Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5534807Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5534913Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5535164Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5535293Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5535538Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5535629Z     return self.apply_standard()
2025-01-22T20:11:05.5535904Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5536025Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5536328Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5536453Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5536670Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5536756Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5537021Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5537107Z     return self._get_value(key)
2025-01-22T20:11:05.5537369Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5537577Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5537690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5537694Z 
2025-01-22T20:11:05.5537848Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5538059Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5538248Z        't046000', 't048000'],
2025-01-22T20:11:05.5538330Z       dtype='object')
2025-01-22T20:11:05.5538406Z key = 'cups'
2025-01-22T20:11:05.5538411Z 
2025-01-22T20:11:05.5538490Z     def get_loc(self, key):
2025-01-22T20:11:05.5538561Z         """
2025-01-22T20:11:05.5538716Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5538786Z     
2025-01-22T20:11:05.5538858Z         Parameters
2025-01-22T20:11:05.5538937Z         ----------
2025-01-22T20:11:05.5539009Z         key : label
2025-01-22T20:11:05.5539090Z     
2025-01-22T20:11:05.5539159Z         Returns
2025-01-22T20:11:05.5539233Z         -------
2025-01-22T20:11:05.5539361Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5539432Z     
2025-01-22T20:11:05.5539505Z         Examples
2025-01-22T20:11:05.5539579Z         --------
2025-01-22T20:11:05.5539679Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5539769Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5539846Z         1
2025-01-22T20:11:05.5539916Z     
2025-01-22T20:11:05.5540023Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5540111Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5540191Z         slice(1, 3, None)
2025-01-22T20:11:05.5540257Z     
2025-01-22T20:11:05.5540366Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5540456Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5540555Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5540624Z         """
2025-01-22T20:11:05.5540729Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5540798Z         try:
2025-01-22T20:11:05.5540901Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5540984Z         except KeyError as err:
2025-01-22T20:11:05.5541087Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5541185Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5541310Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5541383Z             ):
2025-01-22T20:11:05.5541473Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5541565Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5541644Z E           KeyError: 'cups'
2025-01-22T20:11:05.5541649Z 
2025-01-22T20:11:05.5541916Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5542169Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blue_estimator] _
2025-01-22T20:11:05.5542174Z 
2025-01-22T20:11:05.5542332Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5542538Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5542618Z        't046000', 't048000'],
2025-01-22T20:11:05.5542701Z       dtype='object')
2025-01-22T20:11:05.5542771Z key = 'cups'
2025-01-22T20:11:05.5542775Z 
2025-01-22T20:11:05.5542857Z     def get_loc(self, key):
2025-01-22T20:11:05.5542925Z         """
2025-01-22T20:11:05.5543084Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5543149Z     
2025-01-22T20:11:05.5543224Z         Parameters
2025-01-22T20:11:05.5543295Z         ----------
2025-01-22T20:11:05.5543370Z         key : label
2025-01-22T20:11:05.5543833Z     
2025-01-22T20:11:05.5543909Z         Returns
2025-01-22T20:11:05.5543980Z         -------
2025-01-22T20:11:05.5544123Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5544189Z     
2025-01-22T20:11:05.5544263Z         Examples
2025-01-22T20:11:05.5544332Z         --------
2025-01-22T20:11:05.5544437Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5544523Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5544595Z         1
2025-01-22T20:11:05.5544800Z     
2025-01-22T20:11:05.5544902Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5544996Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5545071Z         slice(1, 3, None)
2025-01-22T20:11:05.5545142Z     
2025-01-22T20:11:05.5545255Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5545355Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5545445Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5545522Z         """
2025-01-22T20:11:05.5545623Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5545697Z         try:
2025-01-22T20:11:05.5545796Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5545800Z 
2025-01-22T20:11:05.5546054Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5546168Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5546318Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5546390Z     ???
2025-01-22T20:11:05.5546519Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5546591Z     ???
2025-01-22T20:11:05.5546863Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5546934Z     ???
2025-01-22T20:11:05.5547041Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5547049Z 
2025-01-22T20:11:05.5547119Z >   ???
2025-01-22T20:11:05.5547197Z E   KeyError: 'cups'
2025-01-22T20:11:05.5547202Z 
2025-01-22T20:11:05.5547333Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5547338Z 
2025-01-22T20:11:05.5547507Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5547516Z 
2025-01-22T20:11:05.5547735Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5548062Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5548689Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5548694Z 
2025-01-22T20:11:05.5548788Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5548865Z     def plasma(
2025-01-22T20:11:05.5548940Z         self,
2025-01-22T20:11:05.5549021Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5549095Z         config,
2025-01-22T20:11:05.5549167Z     ):
2025-01-22T20:11:05.5549281Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5549387Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5549392Z 
2025-01-22T20:11:05.5549513Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5549627Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5549735Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5549824Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5549990Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5550096Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5550203Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5550403Z     return BasePlasma(
2025-01-22T20:11:05.5550487Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5550580Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5550668Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5550751Z     self.update(**kwargs)
2025-01-22T20:11:05.5550845Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5550965Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5551079Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5551182Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5551459Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5551609Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5551822Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5551917Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5552049Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5552221Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5552395Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5552569Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5552831Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5553009Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5553200Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5553312Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5553702Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5553837Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5554079Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5554176Z     return self.apply_standard()
2025-01-22T20:11:05.5554456Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5554588Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5554912Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5555034Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5555262Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5555350Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5555620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5555704Z     return self._get_value(key)
2025-01-22T20:11:05.5555966Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5556057Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5556171Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5556176Z 
2025-01-22T20:11:05.5556336Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5556542Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5556622Z        't046000', 't048000'],
2025-01-22T20:11:05.5556701Z       dtype='object')
2025-01-22T20:11:05.5556780Z key = 'cups'
2025-01-22T20:11:05.5556785Z 
2025-01-22T20:11:05.5556863Z     def get_loc(self, key):
2025-01-22T20:11:05.5556939Z         """
2025-01-22T20:11:05.5557098Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5557173Z     
2025-01-22T20:11:05.5557246Z         Parameters
2025-01-22T20:11:05.5557323Z         ----------
2025-01-22T20:11:05.5557395Z         key : label
2025-01-22T20:11:05.5557585Z     
2025-01-22T20:11:05.5557654Z         Returns
2025-01-22T20:11:05.5557729Z         -------
2025-01-22T20:11:05.5557867Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5557933Z     
2025-01-22T20:11:05.5558008Z         Examples
2025-01-22T20:11:05.5558078Z         --------
2025-01-22T20:11:05.5558184Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5558269Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5558341Z         1
2025-01-22T20:11:05.5558508Z     
2025-01-22T20:11:05.5558616Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5558706Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5558785Z         slice(1, 3, None)
2025-01-22T20:11:05.5558852Z     
2025-01-22T20:11:05.5558961Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5559051Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5559144Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5559216Z         """
2025-01-22T20:11:05.5559322Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5559390Z         try:
2025-01-22T20:11:05.5559495Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5559581Z         except KeyError as err:
2025-01-22T20:11:05.5559678Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5559784Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5559903Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5559978Z             ):
2025-01-22T20:11:05.5560070Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5560161Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5560242Z E           KeyError: 'cups'
2025-01-22T20:11:05.5560247Z 
2025-01-22T20:11:05.5560515Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5560743Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-volume] _
2025-01-22T20:11:05.5560753Z 
2025-01-22T20:11:05.5560905Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5561116Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5561190Z        't046000', 't048000'],
2025-01-22T20:11:05.5561272Z       dtype='object')
2025-01-22T20:11:05.5561343Z key = 'cups'
2025-01-22T20:11:05.5561350Z 
2025-01-22T20:11:05.5561434Z     def get_loc(self, key):
2025-01-22T20:11:05.5561501Z         """
2025-01-22T20:11:05.5561659Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5561727Z     
2025-01-22T20:11:05.5561804Z         Parameters
2025-01-22T20:11:05.5561874Z         ----------
2025-01-22T20:11:05.5561949Z         key : label
2025-01-22T20:11:05.5562015Z     
2025-01-22T20:11:05.5562089Z         Returns
2025-01-22T20:11:05.5562163Z         -------
2025-01-22T20:11:05.5562294Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5562365Z     
2025-01-22T20:11:05.5562435Z         Examples
2025-01-22T20:11:05.5562510Z         --------
2025-01-22T20:11:05.5562606Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5562693Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5562762Z         1
2025-01-22T20:11:05.5562835Z     
2025-01-22T20:11:05.5562935Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5563031Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5563106Z         slice(1, 3, None)
2025-01-22T20:11:05.5563176Z     
2025-01-22T20:11:05.5563282Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5563375Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5563462Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5563649Z         """
2025-01-22T20:11:05.5563753Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5563966Z         try:
2025-01-22T20:11:05.5564064Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5564074Z 
2025-01-22T20:11:05.5564317Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5564434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5564569Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5564640Z     ???
2025-01-22T20:11:05.5564870Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5564941Z     ???
2025-01-22T20:11:05.5565218Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5565291Z     ???
2025-01-22T20:11:05.5565398Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5565402Z 
2025-01-22T20:11:05.5565471Z >   ???
2025-01-22T20:11:05.5565550Z E   KeyError: 'cups'
2025-01-22T20:11:05.5565559Z 
2025-01-22T20:11:05.5565685Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5565690Z 
2025-01-22T20:11:05.5565863Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5565868Z 
2025-01-22T20:11:05.5566089Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5566413Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5567036Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5567046Z 
2025-01-22T20:11:05.5567134Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5567213Z     def plasma(
2025-01-22T20:11:05.5567284Z         self,
2025-01-22T20:11:05.5567369Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5567440Z         config,
2025-01-22T20:11:05.5567512Z     ):
2025-01-22T20:11:05.5567622Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5567720Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5567726Z 
2025-01-22T20:11:05.5567847Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5567957Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5568064Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5568153Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5568318Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5568421Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5568536Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5568614Z     return BasePlasma(
2025-01-22T20:11:05.5568702Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5568793Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5568886Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5568964Z     self.update(**kwargs)
2025-01-22T20:11:05.5569056Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5569175Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5569295Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5569399Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5569603Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5569756Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5569969Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5570064Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5570194Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5570364Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5570622Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5570799Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5571056Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5571233Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5571411Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5571589Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5571840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5571969Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5572212Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5572299Z     return self.apply_standard()
2025-01-22T20:11:05.5572594Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5572714Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5573020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5573136Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5573357Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5573445Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5573807Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5573891Z     return self._get_value(key)
2025-01-22T20:11:05.5574158Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5574248Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5574358Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5574363Z 
2025-01-22T20:11:05.5574521Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5574727Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5574805Z        't046000', 't048000'],
2025-01-22T20:11:05.5574880Z       dtype='object')
2025-01-22T20:11:05.5574956Z key = 'cups'
2025-01-22T20:11:05.5574963Z 
2025-01-22T20:11:05.5575042Z     def get_loc(self, key):
2025-01-22T20:11:05.5575114Z         """
2025-01-22T20:11:05.5575271Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5575342Z     
2025-01-22T20:11:05.5575417Z         Parameters
2025-01-22T20:11:05.5575487Z         ----------
2025-01-22T20:11:05.5575562Z         key : label
2025-01-22T20:11:05.5575627Z     
2025-01-22T20:11:05.5575704Z         Returns
2025-01-22T20:11:05.5575776Z         -------
2025-01-22T20:11:05.5575909Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5575975Z     
2025-01-22T20:11:05.5576049Z         Examples
2025-01-22T20:11:05.5576119Z         --------
2025-01-22T20:11:05.5576223Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5576307Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5576378Z         1
2025-01-22T20:11:05.5576444Z     
2025-01-22T20:11:05.5576554Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5576648Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5576728Z         slice(1, 3, None)
2025-01-22T20:11:05.5576795Z     
2025-01-22T20:11:05.5576905Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5576999Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5577088Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5577160Z         """
2025-01-22T20:11:05.5577381Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5577454Z         try:
2025-01-22T20:11:05.5577552Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5577641Z         except KeyError as err:
2025-01-22T20:11:05.5577739Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5577846Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5577961Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5578035Z             ):
2025-01-22T20:11:05.5578224Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5578316Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5578395Z E           KeyError: 'cups'
2025-01-22T20:11:05.5578400Z 
2025-01-22T20:11:05.5578669Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5578901Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-r_inner] _
2025-01-22T20:11:05.5578910Z 
2025-01-22T20:11:05.5579062Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5579278Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5579352Z        't046000', 't048000'],
2025-01-22T20:11:05.5579430Z       dtype='object')
2025-01-22T20:11:05.5579500Z key = 'cups'
2025-01-22T20:11:05.5579504Z 
2025-01-22T20:11:05.5579588Z     def get_loc(self, key):
2025-01-22T20:11:05.5579654Z         """
2025-01-22T20:11:05.5579814Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5579881Z     
2025-01-22T20:11:05.5579958Z         Parameters
2025-01-22T20:11:05.5580033Z         ----------
2025-01-22T20:11:05.5580105Z         key : label
2025-01-22T20:11:05.5580176Z     
2025-01-22T20:11:05.5580245Z         Returns
2025-01-22T20:11:05.5580318Z         -------
2025-01-22T20:11:05.5580446Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5580519Z     
2025-01-22T20:11:05.5580589Z         Examples
2025-01-22T20:11:05.5580664Z         --------
2025-01-22T20:11:05.5580760Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5580849Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5580917Z         1
2025-01-22T20:11:05.5580988Z     
2025-01-22T20:11:05.5581085Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5581177Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5581257Z         slice(1, 3, None)
2025-01-22T20:11:05.5581328Z     
2025-01-22T20:11:05.5581434Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5581528Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5581623Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5581691Z         """
2025-01-22T20:11:05.5581795Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5581863Z         try:
2025-01-22T20:11:05.5581967Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5581971Z 
2025-01-22T20:11:05.5582212Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5582325Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5582459Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5582533Z     ???
2025-01-22T20:11:05.5582661Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5582737Z     ???
2025-01-22T20:11:05.5583006Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5583078Z     ???
2025-01-22T20:11:05.5583187Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5583191Z 
2025-01-22T20:11:05.5583257Z >   ???
2025-01-22T20:11:05.5583337Z E   KeyError: 'cups'
2025-01-22T20:11:05.5583342Z 
2025-01-22T20:11:05.5583646Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5583652Z 
2025-01-22T20:11:05.5583823Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5583829Z 
2025-01-22T20:11:05.5584049Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5584367Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5584986Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5585100Z 
2025-01-22T20:11:05.5585190Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5585269Z     def plasma(
2025-01-22T20:11:05.5585337Z         self,
2025-01-22T20:11:05.5585423Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5585496Z         config,
2025-01-22T20:11:05.5585567Z     ):
2025-01-22T20:11:05.5585677Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5585775Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5585780Z 
2025-01-22T20:11:05.5585898Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5586011Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5586119Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5586203Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5586376Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5586475Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5586588Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5586665Z     return BasePlasma(
2025-01-22T20:11:05.5586753Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5586840Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5586938Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5587016Z     self.update(**kwargs)
2025-01-22T20:11:05.5587108Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5587229Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5587343Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5587445Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5587647Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5587803Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5588015Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5588112Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5588237Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5588406Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5588574Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5588752Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5589007Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5589182Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5589361Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5589469Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5589727Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5589850Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5590093Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5590181Z     return self.apply_standard()
2025-01-22T20:11:05.5590459Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5590709Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5591019Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5591135Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5591354Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5591446Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5591778Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5591865Z     return self._get_value(key)
2025-01-22T20:11:05.5592119Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5592208Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5592315Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5592323Z 
2025-01-22T20:11:05.5592481Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5592687Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5592767Z        't046000', 't048000'],
2025-01-22T20:11:05.5592846Z       dtype='object')
2025-01-22T20:11:05.5592923Z key = 'cups'
2025-01-22T20:11:05.5592927Z 
2025-01-22T20:11:05.5593011Z     def get_loc(self, key):
2025-01-22T20:11:05.5593081Z         """
2025-01-22T20:11:05.5593242Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5593308Z     
2025-01-22T20:11:05.5593385Z         Parameters
2025-01-22T20:11:05.5593462Z         ----------
2025-01-22T20:11:05.5593648Z         key : label
2025-01-22T20:11:05.5593716Z     
2025-01-22T20:11:05.5593791Z         Returns
2025-01-22T20:11:05.5593861Z         -------
2025-01-22T20:11:05.5593999Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5594068Z     
2025-01-22T20:11:05.5594142Z         Examples
2025-01-22T20:11:05.5594211Z         --------
2025-01-22T20:11:05.5594314Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5594398Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5594470Z         1
2025-01-22T20:11:05.5594535Z     
2025-01-22T20:11:05.5594643Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5594736Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5594815Z         slice(1, 3, None)
2025-01-22T20:11:05.5594885Z     
2025-01-22T20:11:05.5594991Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5595085Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5595180Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5595252Z         """
2025-01-22T20:11:05.5595353Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5595425Z         try:
2025-01-22T20:11:05.5595526Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5595613Z         except KeyError as err:
2025-01-22T20:11:05.5595710Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5595813Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5595930Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5596004Z             ):
2025-01-22T20:11:05.5596100Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5596191Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5596278Z E           KeyError: 'cups'
2025-01-22T20:11:05.5596283Z 
2025-01-22T20:11:05.5596547Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5596809Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-helium_population] _
2025-01-22T20:11:05.5596815Z 
2025-01-22T20:11:05.5596967Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5597300Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5597374Z        't046000', 't048000'],
2025-01-22T20:11:05.5597454Z       dtype='object')
2025-01-22T20:11:05.5597529Z key = 'cups'
2025-01-22T20:11:05.5597534Z 
2025-01-22T20:11:05.5597611Z     def get_loc(self, key):
2025-01-22T20:11:05.5597683Z         """
2025-01-22T20:11:05.5597836Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5598006Z     
2025-01-22T20:11:05.5598077Z         Parameters
2025-01-22T20:11:05.5598153Z         ----------
2025-01-22T20:11:05.5598224Z         key : label
2025-01-22T20:11:05.5598295Z     
2025-01-22T20:11:05.5598365Z         Returns
2025-01-22T20:11:05.5598440Z         -------
2025-01-22T20:11:05.5598569Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5598641Z     
2025-01-22T20:11:05.5598715Z         Examples
2025-01-22T20:11:05.5598789Z         --------
2025-01-22T20:11:05.5598884Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5598972Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5599038Z         1
2025-01-22T20:11:05.5599108Z     
2025-01-22T20:11:05.5599212Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5599308Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5599386Z         slice(1, 3, None)
2025-01-22T20:11:05.5599453Z     
2025-01-22T20:11:05.5599567Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5599655Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5599751Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5599818Z         """
2025-01-22T20:11:05.5599921Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5599989Z         try:
2025-01-22T20:11:05.5600090Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5600098Z 
2025-01-22T20:11:05.5600339Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5600452Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5600587Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5600659Z     ???
2025-01-22T20:11:05.5600793Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5600860Z     ???
2025-01-22T20:11:05.5601133Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5601205Z     ???
2025-01-22T20:11:05.5601316Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5601321Z 
2025-01-22T20:11:05.5601387Z >   ???
2025-01-22T20:11:05.5601468Z E   KeyError: 'cups'
2025-01-22T20:11:05.5601472Z 
2025-01-22T20:11:05.5601597Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5601604Z 
2025-01-22T20:11:05.5601777Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5601782Z 
2025-01-22T20:11:05.5602007Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5602321Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5602944Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5602953Z 
2025-01-22T20:11:05.5603040Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5603120Z     def plasma(
2025-01-22T20:11:05.5603188Z         self,
2025-01-22T20:11:05.5603276Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5603345Z         config,
2025-01-22T20:11:05.5603415Z     ):
2025-01-22T20:11:05.5603842Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5603995Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5604003Z 
2025-01-22T20:11:05.5604193Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5604360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5604539Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5604686Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5604878Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5605122Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5605237Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5605317Z     return BasePlasma(
2025-01-22T20:11:05.5605407Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5605495Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5605590Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5605669Z     self.update(**kwargs)
2025-01-22T20:11:05.5605765Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5605894Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5606002Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5606109Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5606308Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5606463Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5606669Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5606775Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5606903Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5607073Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5607243Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5607420Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5607687Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5607860Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5608044Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5608147Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5608412Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5608543Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5608786Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5608873Z     return self.apply_standard()
2025-01-22T20:11:05.5609155Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5609274Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5609585Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5609709Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5609923Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5610013Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5610277Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5610368Z     return self._get_value(key)
2025-01-22T20:11:05.5610623Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5610717Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5610824Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5610829Z 
2025-01-22T20:11:05.5610990Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5611326Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5611400Z        't046000', 't048000'],
2025-01-22T20:11:05.5611480Z       dtype='object')
2025-01-22T20:11:05.5611552Z key = 'cups'
2025-01-22T20:11:05.5611556Z 
2025-01-22T20:11:05.5611639Z     def get_loc(self, key):
2025-01-22T20:11:05.5611706Z         """
2025-01-22T20:11:05.5611866Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5612043Z     
2025-01-22T20:11:05.5612122Z         Parameters
2025-01-22T20:11:05.5612193Z         ----------
2025-01-22T20:11:05.5612268Z         key : label
2025-01-22T20:11:05.5612334Z     
2025-01-22T20:11:05.5612408Z         Returns
2025-01-22T20:11:05.5612477Z         -------
2025-01-22T20:11:05.5612611Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5612682Z     
2025-01-22T20:11:05.5612757Z         Examples
2025-01-22T20:11:05.5612831Z         --------
2025-01-22T20:11:05.5612929Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5613017Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5613085Z         1
2025-01-22T20:11:05.5613157Z     
2025-01-22T20:11:05.5613258Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5613351Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5613427Z         slice(1, 3, None)
2025-01-22T20:11:05.5613613Z     
2025-01-22T20:11:05.5613728Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5613823Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5613914Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5613986Z         """
2025-01-22T20:11:05.5614086Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5614160Z         try:
2025-01-22T20:11:05.5614268Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5614424Z         except KeyError as err:
2025-01-22T20:11:05.5614579Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5614740Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5614869Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5614938Z             ):
2025-01-22T20:11:05.5615034Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5615121Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5615206Z E           KeyError: 'cups'
2025-01-22T20:11:05.5615215Z 
2025-01-22T20:11:05.5615481Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5615764Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-helium_population_updated] _
2025-01-22T20:11:05.5615769Z 
2025-01-22T20:11:05.5615922Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5616137Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5616218Z        't046000', 't048000'],
2025-01-22T20:11:05.5616292Z       dtype='object')
2025-01-22T20:11:05.5616371Z key = 'cups'
2025-01-22T20:11:05.5616376Z 
2025-01-22T20:11:05.5616455Z     def get_loc(self, key):
2025-01-22T20:11:05.5616533Z         """
2025-01-22T20:11:05.5616694Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5616766Z     
2025-01-22T20:11:05.5616842Z         Parameters
2025-01-22T20:11:05.5616917Z         ----------
2025-01-22T20:11:05.5616988Z         key : label
2025-01-22T20:11:05.5617059Z     
2025-01-22T20:11:05.5617127Z         Returns
2025-01-22T20:11:05.5617203Z         -------
2025-01-22T20:11:05.5617332Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5617404Z     
2025-01-22T20:11:05.5617479Z         Examples
2025-01-22T20:11:05.5617547Z         --------
2025-01-22T20:11:05.5617783Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5617872Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5617946Z         1
2025-01-22T20:11:05.5618012Z     
2025-01-22T20:11:05.5618115Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5618201Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5618280Z         slice(1, 3, None)
2025-01-22T20:11:05.5618346Z     
2025-01-22T20:11:05.5618456Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5618649Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5618745Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5618812Z         """
2025-01-22T20:11:05.5618916Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5618984Z         try:
2025-01-22T20:11:05.5619087Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5619092Z 
2025-01-22T20:11:05.5619340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5619453Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5619595Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5619663Z     ???
2025-01-22T20:11:05.5619798Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5619865Z     ???
2025-01-22T20:11:05.5620139Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5620210Z     ???
2025-01-22T20:11:05.5620318Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5620323Z 
2025-01-22T20:11:05.5620387Z >   ???
2025-01-22T20:11:05.5620470Z E   KeyError: 'cups'
2025-01-22T20:11:05.5620474Z 
2025-01-22T20:11:05.5620603Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5620607Z 
2025-01-22T20:11:05.5620772Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5620779Z 
2025-01-22T20:11:05.5621006Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5621322Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5621951Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5621961Z 
2025-01-22T20:11:05.5622054Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5622128Z     def plasma(
2025-01-22T20:11:05.5622201Z         self,
2025-01-22T20:11:05.5622310Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5622384Z         config,
2025-01-22T20:11:05.5622451Z     ):
2025-01-22T20:11:05.5622567Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5622663Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5622668Z 
2025-01-22T20:11:05.5622792Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5622895Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5623004Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5623087Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5623257Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5623355Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5623472Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5623677Z     return BasePlasma(
2025-01-22T20:11:05.5623764Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5623854Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5623943Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5624035Z     self.update(**kwargs)
2025-01-22T20:11:05.5624136Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5624381Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5624493Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5624602Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5624801Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5624955Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5625165Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5625367Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5625499Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5625664Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5625839Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5626009Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5626275Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5626448Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5626633Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5626736Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5626992Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5627117Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5627363Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5627454Z     return self.apply_standard()
2025-01-22T20:11:05.5627731Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5627852Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5628153Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5628278Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5628490Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5628581Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5628841Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5628926Z     return self._get_value(key)
2025-01-22T20:11:05.5629185Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5629277Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5629388Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5629393Z 
2025-01-22T20:11:05.5629549Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5629762Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5629837Z        't046000', 't048000'],
2025-01-22T20:11:05.5629916Z       dtype='object')
2025-01-22T20:11:05.5629988Z key = 'cups'
2025-01-22T20:11:05.5629992Z 
2025-01-22T20:11:05.5630076Z     def get_loc(self, key):
2025-01-22T20:11:05.5630144Z         """
2025-01-22T20:11:05.5630305Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5630371Z     
2025-01-22T20:11:05.5630452Z         Parameters
2025-01-22T20:11:05.5630527Z         ----------
2025-01-22T20:11:05.5630600Z         key : label
2025-01-22T20:11:05.5630669Z     
2025-01-22T20:11:05.5630738Z         Returns
2025-01-22T20:11:05.5630813Z         -------
2025-01-22T20:11:05.5630939Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5631011Z     
2025-01-22T20:11:05.5631081Z         Examples
2025-01-22T20:11:05.5631156Z         --------
2025-01-22T20:11:05.5631341Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5631431Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5631497Z         1
2025-01-22T20:11:05.5631568Z     
2025-01-22T20:11:05.5631673Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5631766Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5631840Z         slice(1, 3, None)
2025-01-22T20:11:05.5631911Z     
2025-01-22T20:11:05.5632020Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5632186Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5632280Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5632348Z         """
2025-01-22T20:11:05.5632451Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5632521Z         try:
2025-01-22T20:11:05.5632623Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5632704Z         except KeyError as err:
2025-01-22T20:11:05.5632809Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5632907Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5633029Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5633096Z             ):
2025-01-22T20:11:05.5633193Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5633278Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5633362Z E           KeyError: 'cups'
2025-01-22T20:11:05.5633367Z 
2025-01-22T20:11:05.5633752Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5633948Z _____ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I']}] _____
2025-01-22T20:11:05.5633952Z 
2025-01-22T20:11:05.5634109Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5634315Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5634398Z        't046000', 't048000'],
2025-01-22T20:11:05.5634473Z       dtype='object')
2025-01-22T20:11:05.5634549Z key = 'cups'
2025-01-22T20:11:05.5634554Z 
2025-01-22T20:11:05.5634631Z     def get_loc(self, key):
2025-01-22T20:11:05.5634704Z         """
2025-01-22T20:11:05.5634857Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5634927Z     
2025-01-22T20:11:05.5634999Z         Parameters
2025-01-22T20:11:05.5635075Z         ----------
2025-01-22T20:11:05.5635155Z         key : label
2025-01-22T20:11:05.5635221Z     
2025-01-22T20:11:05.5635294Z         Returns
2025-01-22T20:11:05.5635363Z         -------
2025-01-22T20:11:05.5635496Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5635562Z     
2025-01-22T20:11:05.5635636Z         Examples
2025-01-22T20:11:05.5635708Z         --------
2025-01-22T20:11:05.5635808Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5635896Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5635967Z         1
2025-01-22T20:11:05.5636033Z     
2025-01-22T20:11:05.5636135Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5636221Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5636302Z         slice(1, 3, None)
2025-01-22T20:11:05.5636368Z     
2025-01-22T20:11:05.5636479Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5636568Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5636662Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5636739Z         """
2025-01-22T20:11:05.5636838Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5636913Z         try:
2025-01-22T20:11:05.5637010Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5637014Z 
2025-01-22T20:11:05.5637262Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5637370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5637635Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5637703Z     ???
2025-01-22T20:11:05.5637836Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5637902Z     ???
2025-01-22T20:11:05.5638176Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5638244Z     ???
2025-01-22T20:11:05.5638354Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5638476Z 
2025-01-22T20:11:05.5638548Z >   ???
2025-01-22T20:11:05.5638626Z E   KeyError: 'cups'
2025-01-22T20:11:05.5638630Z 
2025-01-22T20:11:05.5638761Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5638765Z 
2025-01-22T20:11:05.5638930Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5638934Z 
2025-01-22T20:11:05.5639161Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5639479Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5640103Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5640109Z 
2025-01-22T20:11:05.5640205Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5640276Z     def plasma(
2025-01-22T20:11:05.5640349Z         self,
2025-01-22T20:11:05.5640428Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5640502Z         config,
2025-01-22T20:11:05.5640568Z     ):
2025-01-22T20:11:05.5640682Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5640775Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5640780Z 
2025-01-22T20:11:05.5640907Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5641011Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5641119Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5641209Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5641375Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5641479Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5641586Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5641671Z     return BasePlasma(
2025-01-22T20:11:05.5641754Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5641846Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5641934Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5642019Z     self.update(**kwargs)
2025-01-22T20:11:05.5642106Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5642230Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5642341Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5642448Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5642645Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5642798Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5643009Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5643103Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5643235Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5643403Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5643691Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5643865Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5644127Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5644416Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5644601Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5644703Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5644959Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5645085Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5645324Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5645520Z     return self.apply_standard()
2025-01-22T20:11:05.5645796Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5645920Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5646230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5646355Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5646568Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5646659Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5646927Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5647008Z     return self._get_value(key)
2025-01-22T20:11:05.5647269Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5647359Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5647469Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5647475Z 
2025-01-22T20:11:05.5647629Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5647842Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5647920Z        't046000', 't048000'],
2025-01-22T20:11:05.5647998Z       dtype='object')
2025-01-22T20:11:05.5648070Z key = 'cups'
2025-01-22T20:11:05.5648079Z 
2025-01-22T20:11:05.5648157Z     def get_loc(self, key):
2025-01-22T20:11:05.5648229Z         """
2025-01-22T20:11:05.5648384Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5648455Z     
2025-01-22T20:11:05.5648527Z         Parameters
2025-01-22T20:11:05.5648602Z         ----------
2025-01-22T20:11:05.5648676Z         key : label
2025-01-22T20:11:05.5648747Z     
2025-01-22T20:11:05.5648815Z         Returns
2025-01-22T20:11:05.5648890Z         -------
2025-01-22T20:11:05.5649018Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5649090Z     
2025-01-22T20:11:05.5649161Z         Examples
2025-01-22T20:11:05.5649237Z         --------
2025-01-22T20:11:05.5649334Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5649426Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5649493Z         1
2025-01-22T20:11:05.5649565Z     
2025-01-22T20:11:05.5649667Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5649759Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5649839Z         slice(1, 3, None)
2025-01-22T20:11:05.5649905Z     
2025-01-22T20:11:05.5650016Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5650107Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5650205Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5650276Z         """
2025-01-22T20:11:05.5650380Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5650449Z         try:
2025-01-22T20:11:05.5650552Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5650633Z         except KeyError as err:
2025-01-22T20:11:05.5650735Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5650832Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5651044Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5651114Z             ):
2025-01-22T20:11:05.5651210Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5651302Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5651381Z E           KeyError: 'cups'
2025-01-22T20:11:05.5651386Z 
2025-01-22T20:11:05.5651654Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5651975Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I']}-time_explosion] _
2025-01-22T20:11:05.5651980Z 
2025-01-22T20:11:05.5652136Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5652343Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5652422Z        't046000', 't048000'],
2025-01-22T20:11:05.5652501Z       dtype='object')
2025-01-22T20:11:05.5652577Z key = 'cups'
2025-01-22T20:11:05.5652582Z 
2025-01-22T20:11:05.5652665Z     def get_loc(self, key):
2025-01-22T20:11:05.5652732Z         """
2025-01-22T20:11:05.5652892Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5652958Z     
2025-01-22T20:11:05.5653034Z         Parameters
2025-01-22T20:11:05.5653103Z         ----------
2025-01-22T20:11:05.5653179Z         key : label
2025-01-22T20:11:05.5653244Z     
2025-01-22T20:11:05.5653320Z         Returns
2025-01-22T20:11:05.5653389Z         -------
2025-01-22T20:11:05.5653622Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5653691Z     
2025-01-22T20:11:05.5653766Z         Examples
2025-01-22T20:11:05.5653837Z         --------
2025-01-22T20:11:05.5653937Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5654021Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5654093Z         1
2025-01-22T20:11:05.5654162Z     
2025-01-22T20:11:05.5654268Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5654357Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5654432Z         slice(1, 3, None)
2025-01-22T20:11:05.5654502Z     
2025-01-22T20:11:05.5654609Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5654703Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5654794Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5654866Z         """
2025-01-22T20:11:05.5654968Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5655040Z         try:
2025-01-22T20:11:05.5655137Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5655142Z 
2025-01-22T20:11:05.5655384Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5655492Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5655635Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5655703Z     ???
2025-01-22T20:11:05.5655838Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5655909Z     ???
2025-01-22T20:11:05.5656177Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5656250Z     ???
2025-01-22T20:11:05.5656358Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5656362Z 
2025-01-22T20:11:05.5656435Z >   ???
2025-01-22T20:11:05.5656514Z E   KeyError: 'cups'
2025-01-22T20:11:05.5656520Z 
2025-01-22T20:11:05.5656651Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5656655Z 
2025-01-22T20:11:05.5656821Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5656826Z 
2025-01-22T20:11:05.5657076Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5657515Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5658129Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5658134Z 
2025-01-22T20:11:05.5658228Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5658300Z     def plasma(
2025-01-22T20:11:05.5658473Z         self,
2025-01-22T20:11:05.5658554Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5658627Z         config,
2025-01-22T20:11:05.5658693Z     ):
2025-01-22T20:11:05.5658808Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5658901Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5658911Z 
2025-01-22T20:11:05.5659032Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5659148Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5659251Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5659345Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5663207Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5663357Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5663484Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5663720Z     return BasePlasma(
2025-01-22T20:11:05.5663814Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5663925Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5664021Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5664115Z     self.update(**kwargs)
2025-01-22T20:11:05.5664206Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5664346Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5664467Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5664586Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5664807Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5664964Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5665182Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5665283Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5665422Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5665592Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5665774Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5665951Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5666222Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5666404Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5666604Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5666720Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5666984Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5667120Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5667363Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5667458Z     return self.apply_standard()
2025-01-22T20:11:05.5667741Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5667870Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5668175Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5668305Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5668702Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5668798Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5669074Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5669158Z     return self._get_value(key)
2025-01-22T20:11:05.5669423Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5669511Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5669733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5669738Z 
2025-01-22T20:11:05.5669897Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5670114Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5670190Z        't046000', 't048000'],
2025-01-22T20:11:05.5670276Z       dtype='object')
2025-01-22T20:11:05.5670356Z key = 'cups'
2025-01-22T20:11:05.5670361Z 
2025-01-22T20:11:05.5670443Z     def get_loc(self, key):
2025-01-22T20:11:05.5670519Z         """
2025-01-22T20:11:05.5670677Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5670754Z     
2025-01-22T20:11:05.5670830Z         Parameters
2025-01-22T20:11:05.5670911Z         ----------
2025-01-22T20:11:05.5670984Z         key : label
2025-01-22T20:11:05.5671055Z     
2025-01-22T20:11:05.5671128Z         Returns
2025-01-22T20:11:05.5671204Z         -------
2025-01-22T20:11:05.5671336Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5671409Z     
2025-01-22T20:11:05.5671480Z         Examples
2025-01-22T20:11:05.5671558Z         --------
2025-01-22T20:11:05.5671658Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5671750Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5671818Z         1
2025-01-22T20:11:05.5671899Z     
2025-01-22T20:11:05.5672010Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5672101Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5672183Z         slice(1, 3, None)
2025-01-22T20:11:05.5672249Z     
2025-01-22T20:11:05.5672364Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5672456Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5672553Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5672622Z         """
2025-01-22T20:11:05.5672734Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5672803Z         try:
2025-01-22T20:11:05.5672911Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5672994Z         except KeyError as err:
2025-01-22T20:11:05.5673099Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5673201Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5673329Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5673409Z             ):
2025-01-22T20:11:05.5673618Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5673722Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5673804Z E           KeyError: 'cups'
2025-01-22T20:11:05.5673809Z 
2025-01-22T20:11:05.5674084Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5674355Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I']}-link_t_rad_t_electron] _
2025-01-22T20:11:05.5674364Z 
2025-01-22T20:11:05.5674527Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5674738Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5674819Z        't046000', 't048000'],
2025-01-22T20:11:05.5674896Z       dtype='object')
2025-01-22T20:11:05.5674974Z key = 'cups'
2025-01-22T20:11:05.5675095Z 
2025-01-22T20:11:05.5675185Z     def get_loc(self, key):
2025-01-22T20:11:05.5675253Z         """
2025-01-22T20:11:05.5675427Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5675494Z     
2025-01-22T20:11:05.5675573Z         Parameters
2025-01-22T20:11:05.5675645Z         ----------
2025-01-22T20:11:05.5675723Z         key : label
2025-01-22T20:11:05.5675789Z     
2025-01-22T20:11:05.5675863Z         Returns
2025-01-22T20:11:05.5675934Z         -------
2025-01-22T20:11:05.5676176Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5676244Z     
2025-01-22T20:11:05.5676320Z         Examples
2025-01-22T20:11:05.5676391Z         --------
2025-01-22T20:11:05.5676494Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5676580Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5676656Z         1
2025-01-22T20:11:05.5676728Z     
2025-01-22T20:11:05.5676830Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5676927Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5677002Z         slice(1, 3, None)
2025-01-22T20:11:05.5677073Z     
2025-01-22T20:11:05.5677180Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5677277Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5677368Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5677441Z         """
2025-01-22T20:11:05.5677545Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5677625Z         try:
2025-01-22T20:11:05.5677722Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5677727Z 
2025-01-22T20:11:05.5677985Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5678102Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5678244Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5678316Z     ???
2025-01-22T20:11:05.5678451Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5678517Z     ???
2025-01-22T20:11:05.5678792Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5678859Z     ???
2025-01-22T20:11:05.5678969Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5678974Z 
2025-01-22T20:11:05.5679042Z >   ???
2025-01-22T20:11:05.5679125Z E   KeyError: 'cups'
2025-01-22T20:11:05.5679133Z 
2025-01-22T20:11:05.5679265Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5679269Z 
2025-01-22T20:11:05.5679445Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5679450Z 
2025-01-22T20:11:05.5679676Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5679995Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5680630Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5680636Z 
2025-01-22T20:11:05.5680723Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5680802Z     def plasma(
2025-01-22T20:11:05.5680876Z         self,
2025-01-22T20:11:05.5680956Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5681032Z         config,
2025-01-22T20:11:05.5681099Z     ):
2025-01-22T20:11:05.5681215Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5681310Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5681314Z 
2025-01-22T20:11:05.5681443Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5681551Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5681773Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5681857Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5682028Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5682127Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5682243Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5682326Z     return BasePlasma(
2025-01-22T20:11:05.5682412Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5682503Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5682666Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5682751Z     self.update(**kwargs)
2025-01-22T20:11:05.5682840Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5682966Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5683077Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5683185Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5683386Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5683664Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5683877Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5683979Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5684106Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5684279Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5684457Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5684629Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5684894Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5685068Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5685254Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5685361Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5685620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5685745Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5685991Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5686085Z     return self.apply_standard()
2025-01-22T20:11:05.5686362Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5686489Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5686793Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5686918Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5687133Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5687226Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5687487Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5687579Z     return self._get_value(key)
2025-01-22T20:11:05.5687840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5687931Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5688043Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5688051Z 
2025-01-22T20:11:05.5688206Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5688417Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5688492Z        't046000', 't048000'],
2025-01-22T20:11:05.5688571Z       dtype='object')
2025-01-22T20:11:05.5688645Z key = 'cups'
2025-01-22T20:11:05.5688766Z 
2025-01-22T20:11:05.5688855Z     def get_loc(self, key):
2025-01-22T20:11:05.5688927Z         """
2025-01-22T20:11:05.5689091Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5689161Z     
2025-01-22T20:11:05.5689240Z         Parameters
2025-01-22T20:11:05.5689316Z         ----------
2025-01-22T20:11:05.5689394Z         key : label
2025-01-22T20:11:05.5689464Z     
2025-01-22T20:11:05.5689532Z         Returns
2025-01-22T20:11:05.5689606Z         -------
2025-01-22T20:11:05.5689838Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5689909Z     
2025-01-22T20:11:05.5689978Z         Examples
2025-01-22T20:11:05.5690052Z         --------
2025-01-22T20:11:05.5690148Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5690237Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5690304Z         1
2025-01-22T20:11:05.5690375Z     
2025-01-22T20:11:05.5690476Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5690572Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5690649Z         slice(1, 3, None)
2025-01-22T20:11:05.5690719Z     
2025-01-22T20:11:05.5690825Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5690922Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5691017Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5691087Z         """
2025-01-22T20:11:05.5691192Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5691265Z         try:
2025-01-22T20:11:05.5691368Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5691449Z         except KeyError as err:
2025-01-22T20:11:05.5691552Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5691651Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5691773Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5691841Z             ):
2025-01-22T20:11:05.5691941Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5692026Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5692112Z E           KeyError: 'cups'
2025-01-22T20:11:05.5692117Z 
2025-01-22T20:11:05.5692382Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5692589Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I']}] _
2025-01-22T20:11:05.5692594Z 
2025-01-22T20:11:05.5692753Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5692962Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5693044Z        't046000', 't048000'],
2025-01-22T20:11:05.5693119Z       dtype='object')
2025-01-22T20:11:05.5693194Z key = 'cups'
2025-01-22T20:11:05.5693198Z 
2025-01-22T20:11:05.5693277Z     def get_loc(self, key):
2025-01-22T20:11:05.5693354Z         """
2025-01-22T20:11:05.5693606Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5693680Z     
2025-01-22T20:11:05.5693754Z         Parameters
2025-01-22T20:11:05.5693830Z         ----------
2025-01-22T20:11:05.5693906Z         key : label
2025-01-22T20:11:05.5693972Z     
2025-01-22T20:11:05.5694045Z         Returns
2025-01-22T20:11:05.5694114Z         -------
2025-01-22T20:11:05.5694248Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5694319Z     
2025-01-22T20:11:05.5694393Z         Examples
2025-01-22T20:11:05.5694465Z         --------
2025-01-22T20:11:05.5694566Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5694650Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5694723Z         1
2025-01-22T20:11:05.5694789Z     
2025-01-22T20:11:05.5694893Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5694980Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5695194Z         slice(1, 3, None)
2025-01-22T20:11:05.5695262Z     
2025-01-22T20:11:05.5695373Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5695462Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5695557Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5695628Z         """
2025-01-22T20:11:05.5695727Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5695801Z         try:
2025-01-22T20:11:05.5695898Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5696001Z 
2025-01-22T20:11:05.5696249Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5696359Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5696498Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5696566Z     ???
2025-01-22T20:11:05.5696699Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5696769Z     ???
2025-01-22T20:11:05.5697040Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5697107Z     ???
2025-01-22T20:11:05.5697221Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5697225Z 
2025-01-22T20:11:05.5697295Z >   ???
2025-01-22T20:11:05.5697374Z E   KeyError: 'cups'
2025-01-22T20:11:05.5697378Z 
2025-01-22T20:11:05.5697515Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5697522Z 
2025-01-22T20:11:05.5697693Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5697698Z 
2025-01-22T20:11:05.5697921Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5698238Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5698864Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5698873Z 
2025-01-22T20:11:05.5698966Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5699040Z     def plasma(
2025-01-22T20:11:05.5699117Z         self,
2025-01-22T20:11:05.5699199Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5699275Z         config,
2025-01-22T20:11:05.5699346Z     ):
2025-01-22T20:11:05.5699467Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5699562Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5699566Z 
2025-01-22T20:11:05.5699694Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5699801Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5699913Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5700005Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5700170Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5700274Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5700383Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5700465Z     return BasePlasma(
2025-01-22T20:11:05.5700550Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5700642Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5700731Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5700817Z     self.update(**kwargs)
2025-01-22T20:11:05.5700907Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5701032Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5701143Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5701251Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5701450Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5701607Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5701907Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5702004Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5702135Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5702302Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5702476Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5702718Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5702982Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5703155Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5703339Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5703441Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5703819Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5703949Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5704186Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5704279Z     return self.apply_standard()
2025-01-22T20:11:05.5704553Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5704679Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5704983Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5705104Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5705318Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5705408Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5705675Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5705758Z     return self._get_value(key)
2025-01-22T20:11:05.5706017Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5706102Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5706213Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5706218Z 
2025-01-22T20:11:05.5706379Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5706591Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5706674Z        't046000', 't048000'],
2025-01-22T20:11:05.5706748Z       dtype='object')
2025-01-22T20:11:05.5706824Z key = 'cups'
2025-01-22T20:11:05.5706828Z 
2025-01-22T20:11:05.5706907Z     def get_loc(self, key):
2025-01-22T20:11:05.5706982Z         """
2025-01-22T20:11:05.5707147Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5707213Z     
2025-01-22T20:11:05.5707290Z         Parameters
2025-01-22T20:11:05.5707360Z         ----------
2025-01-22T20:11:05.5707437Z         key : label
2025-01-22T20:11:05.5707502Z     
2025-01-22T20:11:05.5707575Z         Returns
2025-01-22T20:11:05.5707645Z         -------
2025-01-22T20:11:05.5707782Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5707852Z     
2025-01-22T20:11:05.5707929Z         Examples
2025-01-22T20:11:05.5707999Z         --------
2025-01-22T20:11:05.5708101Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5708185Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5708258Z         1
2025-01-22T20:11:05.5708324Z     
2025-01-22T20:11:05.5708432Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5708520Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5708718Z         slice(1, 3, None)
2025-01-22T20:11:05.5708789Z     
2025-01-22T20:11:05.5708896Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5708991Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5709080Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5709153Z         """
2025-01-22T20:11:05.5709254Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5709326Z         try:
2025-01-22T20:11:05.5709432Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5709618Z         except KeyError as err:
2025-01-22T20:11:05.5709715Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5709821Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5709939Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5710012Z             ):
2025-01-22T20:11:05.5710105Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5710197Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5710283Z E           KeyError: 'cups'
2025-01-22T20:11:05.5710288Z 
2025-01-22T20:11:05.5710553Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5710743Z ___ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I']}] ____
2025-01-22T20:11:05.5710747Z 
2025-01-22T20:11:05.5710896Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5711106Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5711183Z        't046000', 't048000'],
2025-01-22T20:11:05.5711263Z       dtype='object')
2025-01-22T20:11:05.5711333Z key = 'cups'
2025-01-22T20:11:05.5711337Z 
2025-01-22T20:11:05.5711421Z     def get_loc(self, key):
2025-01-22T20:11:05.5711488Z         """
2025-01-22T20:11:05.5711651Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5711724Z     
2025-01-22T20:11:05.5711797Z         Parameters
2025-01-22T20:11:05.5711873Z         ----------
2025-01-22T20:11:05.5711943Z         key : label
2025-01-22T20:11:05.5712014Z     
2025-01-22T20:11:05.5712081Z         Returns
2025-01-22T20:11:05.5712155Z         -------
2025-01-22T20:11:05.5712285Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5712358Z     
2025-01-22T20:11:05.5712427Z         Examples
2025-01-22T20:11:05.5712501Z         --------
2025-01-22T20:11:05.5712600Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5712689Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5712756Z         1
2025-01-22T20:11:05.5712826Z     
2025-01-22T20:11:05.5712924Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5713014Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5713089Z         slice(1, 3, None)
2025-01-22T20:11:05.5713161Z     
2025-01-22T20:11:05.5713274Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5713363Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5713458Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5713645Z         """
2025-01-22T20:11:05.5713754Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5713822Z         try:
2025-01-22T20:11:05.5713923Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5713927Z 
2025-01-22T20:11:05.5714168Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:05.5714281Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5714414Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5714487Z     ???
2025-01-22T20:11:05.5714615Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:05.5714687Z     ???
2025-01-22T20:11:05.5714958Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:05.5715141Z     ???
2025-01-22T20:11:05.5715253Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5715258Z 
2025-01-22T20:11:05.5715322Z >   ???
2025-01-22T20:11:05.5715407Z E   KeyError: 'cups'
2025-01-22T20:11:05.5715411Z 
2025-01-22T20:11:05.5715541Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:05.5715545Z 
2025-01-22T20:11:05.5715712Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:05.5715833Z 
2025-01-22T20:11:05.5716055Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f9a1ab5fb30>
2025-01-22T20:11:05.5716376Z chianti_he_db_fpath = PosixPath('/home/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:05.5716998Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:05.5717007Z 
2025-01-22T20:11:05.5717094Z     @pytest.fixture(scope="class")
2025-01-22T20:11:05.5717171Z     def plasma(
2025-01-22T20:11:05.5717238Z         self,
2025-01-22T20:11:05.5717323Z         chianti_he_db_fpath,
2025-01-22T20:11:05.5717391Z         config,
2025-01-22T20:11:05.5717461Z     ):
2025-01-22T20:11:05.5717571Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:05.5717673Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:05.5717677Z 
2025-01-22T20:11:05.5717802Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:05.5717907Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5718016Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:05.5718099Z     plasma = assemble_plasma(
2025-01-22T20:11:05.5718267Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:05.5718368Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:05.5718482Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:05.5718560Z     return BasePlasma(
2025-01-22T20:11:05.5718649Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:05.5718734Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:05.5718829Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:05.5718907Z     self.update(**kwargs)
2025-01-22T20:11:05.5718998Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:05.5719121Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:05.5719234Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:05.5719340Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:05.5719537Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:05.5719692Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:05.5719898Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:05.5720001Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:05.5720127Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:05.5720297Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:05.5720465Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:05.5720640Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:05.5720896Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:05.5721073Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:05.5721255Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:05.5721360Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:05.5721617Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:05.5721826Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:05.5722069Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:05.5722158Z     return self.apply_standard()
2025-01-22T20:11:05.5722470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:05.5722589Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:05.5722900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:05.5723096Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:05.5723316Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:05.5723407Z     scaling_constant = row["cups"]
2025-01-22T20:11:05.5723788Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:05.5723885Z     return self._get_value(key)
2025-01-22T20:11:05.5724141Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:05.5724232Z     loc = self.index.get_loc(label)
2025-01-22T20:11:05.5724342Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:05.5724346Z 
2025-01-22T20:11:05.5724506Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:05.5724715Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:05.5724796Z        't046000', 't048000'],
2025-01-22T20:11:05.5724876Z       dtype='object')
2025-01-22T20:11:05.5724947Z key = 'cups'
2025-01-22T20:11:05.5724951Z 
2025-01-22T20:11:05.5725034Z     def get_loc(self, key):
2025-01-22T20:11:05.5725101Z         """
2025-01-22T20:11:05.5725262Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:05.5725331Z     
2025-01-22T20:11:05.5725410Z         Parameters
2025-01-22T20:11:05.5725481Z         ----------
2025-01-22T20:11:05.5725556Z         key : label
2025-01-22T20:11:05.5725621Z     
2025-01-22T20:11:05.5725695Z         Returns
2025-01-22T20:11:05.5725764Z         -------
2025-01-22T20:11:05.5725896Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:05.5725962Z     
2025-01-22T20:11:05.5726037Z         Examples
2025-01-22T20:11:05.5726107Z         --------
2025-01-22T20:11:05.5726212Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:05.5726301Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:05.5726368Z         1
2025-01-22T20:11:05.5726438Z     
2025-01-22T20:11:05.5726539Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:05.5726630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:05.5726704Z         slice(1, 3, None)
2025-01-22T20:11:05.5726775Z     
2025-01-22T20:11:05.5726884Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:05.5726978Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:05.5727067Z         array([False,  True, False,  True])
2025-01-22T20:11:05.5727139Z         """
2025-01-22T20:11:05.5727238Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:05.5727312Z         try:
2025-01-22T20:11:05.5727409Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:05.5727497Z         except KeyError as err:
2025-01-22T20:11:05.5727595Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:05.5727699Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:05.5727817Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:05.5727884Z             ):
2025-01-22T20:11:05.5727980Z                 raise InvalidIndexError(key)
2025-01-22T20:11:05.5728066Z >           raise KeyError(key) from err
2025-01-22T20:11:05.5728154Z E           KeyError: 'cups'
2025-01-22T20:11:05.5728277Z 
2025-01-22T20:11:05.5728542Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:05.5728657Z =============================== warnings summary ===============================
2025-01-22T20:11:05.5728770Z tardis/io/configuration/config_validator.py:6
2025-01-22T20:11:05.5728881Z tardis/io/configuration/config_validator.py:6
2025-01-22T20:11:05.5729175Z   /home/runner/work/tardis/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
2025-01-22T20:11:05.5729356Z   
2025-01-22T20:11:05.5730474Z   jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
2025-01-22T20:11:05.5730490Z 
2025-01-22T20:11:05.5730724Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22
2025-01-22T20:11:05.5731076Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
2025-01-22T20:11:05.5731144Z   
2025-01-22T20:11:05.5731297Z   Jupyter is migrating its paths to use standard platformdirs
2025-01-22T20:11:05.5731445Z   given by the platformdirs library.  To remove this warning and
2025-01-22T20:11:05.5731610Z   see the appropriate new directories, set the environment variable
2025-01-22T20:11:05.5731759Z   `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
2025-01-22T20:11:05.5731919Z   The use of platformdirs will be the default in `jupyter_core` v6
2025-01-22T20:11:05.5731933Z 
2025-01-22T20:11:05.5736761Z tardis/io/tests/test_HDFWriter.py::test_multi_index_write
2025-01-22T20:11:05.5737125Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:05.5737371Z   /home/runner/work/tardis/tardis/tardis/io/util.py:276: PerformanceWarning:
2025-01-22T20:11:05.5737442Z   
2025-01-22T20:11:05.5737511Z   
2025-01-22T20:11:05.5737720Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:05.5737991Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-22T20:11:05.5737997Z 
2025-01-22T20:11:05.5738201Z tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
2025-01-22T20:11:05.5738428Z tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
2025-01-22T20:11:05.5738661Z tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
2025-01-22T20:11:05.5738834Z tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
2025-01-22T20:11:05.5739147Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
2025-01-22T20:11:05.5739212Z   
2025-01-22T20:11:05.5739332Z   The current CMFGEN model parser is deprecated
2025-01-22T20:11:05.5739337Z 
2025-01-22T20:11:05.5739442Z tardis/io/tests/test_model_reader.py: 1 warning
2025-01-22T20:11:05.5739617Z tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
2025-01-22T20:11:05.5739912Z   /home/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
2025-01-22T20:11:05.5739984Z   
2025-01-22T20:11:05.5740092Z   The current CMFGEN model parser is deprecated
2025-01-22T20:11:05.5740096Z 
2025-01-22T20:11:05.5740300Z tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
2025-01-22T20:11:05.5740660Z   /home/runner/work/tardis/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
2025-01-22T20:11:05.5740726Z   
2025-01-22T20:11:05.5741162Z   [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m
2025-01-22T20:11:05.5741167Z 
2025-01-22T20:11:05.5741266Z tardis/model/tests/test_base.py: 6 warnings
2025-01-22T20:11:05.5741562Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-22T20:11:05.5741735Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-22T20:11:05.5742001Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
2025-01-22T20:11:05.5742066Z   
2025-01-22T20:11:05.5742173Z   v_inner_boundary < 0, assuming default value
2025-01-22T20:11:05.5742178Z 
2025-01-22T20:11:05.5742283Z tardis/model/tests/test_base.py: 6 warnings
2025-01-22T20:11:05.5742508Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-22T20:11:05.5742700Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-22T20:11:05.5742967Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
2025-01-22T20:11:05.5743037Z   
2025-01-22T20:11:05.5743139Z   v_outer_boundary < 0, assuming default value
2025-01-22T20:11:05.5743143Z 
2025-01-22T20:11:05.5743289Z tardis/plasma/tests/test_complete_plasmas.py: 17 warnings
2025-01-22T20:11:05.5743707Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5743780Z   
2025-01-22T20:11:05.5743868Z   Property "atomic_mass" not found
2025-01-22T20:11:05.5743878Z 
2025-01-22T20:11:05.5744308Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
2025-01-22T20:11:05.5744686Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
2025-01-22T20:11:05.5744962Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5745031Z   
2025-01-22T20:11:05.5745127Z   Property "j_blues_norm_factor" not found
2025-01-22T20:11:05.5745132Z 
2025-01-22T20:11:05.5745542Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
2025-01-22T20:11:05.5745902Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
2025-01-22T20:11:05.5746175Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5746248Z   
2025-01-22T20:11:05.5746337Z   Property "j_blue_estimator" not found
2025-01-22T20:11:05.5746342Z 
2025-01-22T20:11:05.5746721Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
2025-01-22T20:11:05.5747049Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
2025-01-22T20:11:05.5747320Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5747385Z   
2025-01-22T20:11:05.5747475Z   Property "volume" not found
2025-01-22T20:11:05.5747479Z 
2025-01-22T20:11:05.5747860Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
2025-01-22T20:11:05.5748196Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
2025-01-22T20:11:05.5748463Z   /home/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:05.5748527Z   
2025-01-22T20:11:05.5748616Z   Property "r_inner" not found
2025-01-22T20:11:05.5748621Z 
2025-01-22T20:11:05.5748831Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
2025-01-22T20:11:05.5749034Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
2025-01-22T20:11:05.5749227Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
2025-01-22T20:11:05.5749458Z   /home/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
2025-01-22T20:11:05.5749522Z   
2025-01-22T20:11:05.5749861Z   Requesting inner boundary below inner shell. Extrapolating the inner cell
2025-01-22T20:11:05.5749866Z 
2025-01-22T20:11:05.5750079Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-22T20:11:05.5750272Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:70: UserWarning:
2025-01-22T20:11:05.5750340Z   
2025-01-22T20:11:05.5750664Z   SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0
2025-01-22T20:11:05.5750669Z 
2025-01-22T20:11:05.5750976Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-22T20:11:05.5751170Z   /home/runner/work/tardis/tardis/tardis/spectrum/base.py:111: UserWarning:
2025-01-22T20:11:05.5751240Z   
2025-01-22T20:11:05.5751574Z   SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.
2025-01-22T20:11:05.5751585Z 
2025-01-22T20:11:05.5751790Z tardis/transport/montecarlo/tests/test_vpacket.py::test_trace_vpacket_volley
2025-01-22T20:11:05.5751909Z   <string>:3: NumbaPendingDeprecationWarning:
2025-01-22T20:11:05.5751973Z   
2025-01-22T20:11:05.5753013Z   [1m[1mCode using Numba extension API maybe depending on 'old_style' error-capturing, which is deprecated and will be replaced by 'new_style' in a future release. See details at https://numba.readthedocs.io/en/latest/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors
2025-01-22T20:11:05.5753089Z   Exception origin:
2025-01-22T20:11:05.5753348Z     File "/home/runner/micromamba/envs/tardis/lib/python3.12/inspect.py", line 3180, in _bind
2025-01-22T20:11:05.5753436Z       raise TypeError(msg) from None
2025-01-22T20:11:05.5753660Z   [0m[0m
2025-01-22T20:11:05.5753667Z 
2025-01-22T20:11:05.5753997Z tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
2025-01-22T20:11:05.5754278Z   /home/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
2025-01-22T20:11:05.5754350Z   
2025-01-22T20:11:05.5755185Z   More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
2025-01-22T20:11:05.5755191Z 
2025-01-22T20:11:05.5755539Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5755879Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5756215Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5756550Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5756884Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5757218Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5757559Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:05.5757628Z   
2025-01-22T20:11:05.5757812Z   Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
2025-01-22T20:11:05.5757991Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:05.5758224Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:05.5758234Z 
2025-01-22T20:11:05.5758569Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5758903Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5759388Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:05.5759457Z   
2025-01-22T20:11:05.5759628Z   Passing unrecognized arguments to super(FloatText).__init__(min=0).
2025-01-22T20:11:05.5759800Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:05.5760026Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:05.5760130Z 
2025-01-22T20:11:05.5760472Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:05.5760809Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:05.5760872Z   
2025-01-22T20:11:05.5761048Z   Passing unrecognized arguments to super(HTML).__init__(indent=True).
2025-01-22T20:11:05.5761213Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:05.5761440Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:05.5761445Z 
2025-01-22T20:11:05.5761856Z tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
2025-01-22T20:11:05.5762176Z   /home/runner/micromamba/envs/tardis/lib/python3.12/site-packages/qgridnext/grid.py:825: DeprecationWarning:
2025-01-22T20:11:05.5762244Z   
2025-01-22T20:11:05.5762517Z   QgridWidget._grid_options_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.
2025-01-22T20:11:05.5762522Z 
2025-01-22T20:11:05.5762774Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:05.5762974Z   /home/runner/work/tardis/tardis/tardis/io/util.py:289: PerformanceWarning:
2025-01-22T20:11:05.5763047Z   
2025-01-22T20:11:05.5763110Z   
2025-01-22T20:11:05.5763310Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:05.5763677Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-22T20:11:05.5763683Z 
2025-01-22T20:11:05.5763936Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:05.5764131Z   /home/runner/work/tardis/tardis/tardis/io/util.py:292: PerformanceWarning:
2025-01-22T20:11:05.5764204Z   
2025-01-22T20:11:05.5764272Z   
2025-01-22T20:11:05.5764469Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:05.5764646Z   map directly to c-types [inferred_type->mixed,key->values] [items->None]
2025-01-22T20:11:05.5764651Z 
2025-01-22T20:11:05.5764898Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:05.5765137Z   /home/runner/work/tardis/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
2025-01-22T20:11:05.5765204Z   
2025-01-22T20:11:05.5765393Z   The number of interpolate_shells was not specified. The value was set to 80.
2025-01-22T20:11:05.5765397Z 
2025-01-22T20:11:05.5765580Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-01-22T20:11:05.5765585Z 
2025-01-22T20:11:05.5765758Z ---------- coverage: platform linux, python 3.12.4-final-0 -----------
2025-01-22T20:11:05.5765882Z Coverage HTML written to dir coverage_html_report
2025-01-22T20:11:05.5765982Z Coverage XML written to file coverage.xml
2025-01-22T20:11:05.5765987Z 
2025-01-22T20:11:05.5766111Z =========================== short test summary info ============================
2025-01-22T20:11:05.5766673Z ERROR tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths - AttributeError: 'NLTEData' object has no attribute 'C_ul_interpolator'
2025-01-22T20:11:05.5767155Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5767755Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5768242Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:05.5768826Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5769298Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:05.5769739Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-w] - KeyError: 'cups'
2025-01-22T20:11:05.5770197Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5770679Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5771190Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5771683Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:05.5772173Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:05.5772625Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] - KeyError: 'cups'
2025-01-22T20:11:05.5773127Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5773727Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5774200Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:05.5774688Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:05.5775127Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] - KeyError: 'cups'
2025-01-22T20:11:05.5775605Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:05.5776059Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:05.5776530Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-metastability] - KeyError: 'cups'
2025-01-22T20:11:05.5777110Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-delta] - KeyError: 'cups'
2025-01-22T20:11:05.5777625Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5778073Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-phi] - KeyError: 'cups'
2025-01-22T20:11:05.5778666Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5779161Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5779677Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5780196Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5780702Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5781180Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:05.5781648Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5782161Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:05.5782616Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:05.5783110Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5783715Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:05.5784175Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-volume] - KeyError: 'cups'
2025-01-22T20:11:05.5784639Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:05.5785128Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:05.5785643Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:05.5786050Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5786528Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:05.5787170Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5787602Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5788050Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5788632Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5789084Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5789555Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:05.5790012Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5790466Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:05.5790901Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-w] - KeyError: 'cups'
2025-01-22T20:11:05.5791336Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5791800Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5792287Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5792769Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:05.5793244Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:05.5793805Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] - KeyError: 'cups'
2025-01-22T20:11:05.5794319Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5794809Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5795264Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:05.5795734Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:05.5796162Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] - KeyError: 'cups'
2025-01-22T20:11:05.5796742Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:05.5797173Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:05.5797636Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-metastability] - KeyError: 'cups'
2025-01-22T20:11:05.5798173Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-delta] - KeyError: 'cups'
2025-01-22T20:11:05.5798676Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5799116Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-phi] - KeyError: 'cups'
2025-01-22T20:11:05.5799590Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5800066Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5800550Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5801045Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5801532Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5801985Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:05.5802442Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5802941Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:05.5803379Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:05.5803971Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5804435Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:05.5804875Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-volume] - KeyError: 'cups'
2025-01-22T20:11:05.5805321Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:05.5805789Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:05.5806401Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:05.5806789Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5807257Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:05.5807847Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5808264Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5808665Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:05.5809055Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5809456Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5809864Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:05.5810261Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5810657Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:05.5811029Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-w] - KeyError: 'cups'
2025-01-22T20:11:05.5811411Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:05.5811810Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5812234Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5812647Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:05.5813054Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:05.5813442Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines] - KeyError: 'cups'
2025-01-22T20:11:05.5813954Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5814376Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:05.5814774Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:05.5815173Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:05.5815664Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-nu] - KeyError: 'cups'
2025-01-22T20:11:05.5816062Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:05.5816443Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:05.5816838Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-metastability] - KeyError: 'cups'
2025-01-22T20:11:05.5817337Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-delta] - KeyError: 'cups'
2025-01-22T20:11:05.5817773Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5818147Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-phi] - KeyError: 'cups'
2025-01-22T20:11:05.5818559Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5818966Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:05.5819385Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:05.5819813Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5820226Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5820629Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:05.5821018Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:05.5821443Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:05.5821835Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:05.5822243Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:05.5822684Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:05.5823067Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-volume] - KeyError: 'cups'
2025-01-22T20:11:05.5823452Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:05.5823946Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:05.5824377Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:05.5824714Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:05.5825119Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I']}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:05.5825657Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I']}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:05.5826018Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:05.5826358Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:05.5826724Z = 1332 passed, 305 skipped, 2 deselected, 19 xfailed, 8 xpassed, 87 warnings, 130 errors in 820.35s (0:13:40) =
2025-01-22T20:11:07.4996823Z ##[error]Process completed with exit code 1.
